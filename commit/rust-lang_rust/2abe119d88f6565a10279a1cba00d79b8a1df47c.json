{"sha": "2abe119d88f6565a10279a1cba00d79b8a1df47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYmUxMTlkODhmNjU2NWExMDI3OWExY2JhMDBkNzliOGExZGY0N2M=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-05T09:27:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-05T09:27:17Z"}, "message": "Merge pull request #2017 from topecongiro/issue-1987\n\nFormat strings in attributes when `format_strings = true`", "tree": {"sha": "38295cc5e3b285bb787cbf87387aa92cac19e4c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38295cc5e3b285bb787cbf87387aa92cac19e4c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abe119d88f6565a10279a1cba00d79b8a1df47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abe119d88f6565a10279a1cba00d79b8a1df47c", "html_url": "https://github.com/rust-lang/rust/commit/2abe119d88f6565a10279a1cba00d79b8a1df47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abe119d88f6565a10279a1cba00d79b8a1df47c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a", "html_url": "https://github.com/rust-lang/rust/commit/c31c24de36c2384c88cbd9e8c6b9cf2093eabb1a"}, {"sha": "bdcd36e677cb82369659d44f44fdd2b5de8029d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcd36e677cb82369659d44f44fdd2b5de8029d8", "html_url": "https://github.com/rust-lang/rust/commit/bdcd36e677cb82369659d44f44fdd2b5de8029d8"}], "stats": {"total": 123, "additions": 65, "deletions": 58}, "files": [{"sha": "3a0f05a42ab9be7e82db21c80e33fbaaff72d5e2", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2abe119d88f6565a10279a1cba00d79b8a1df47c", "patch": "@@ -72,12 +72,7 @@ pub fn format_expr(\n             shape,\n             false,\n         ),\n-        ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitKind::Str(_, ast::StrStyle::Cooked) => {\n-                rewrite_string_lit(context, l.span, shape)\n-            }\n-            _ => Some(context.snippet(expr.span)),\n-        },\n+        ast::ExprKind::Lit(ref l) => rewrite_literal(context, l, shape),\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi(), expr.span.hi());\n             let callee_str = try_opt!(callee.rewrite(context, shape));\n@@ -1938,6 +1933,13 @@ fn rewrite_pat_expr(\n         .map(|expr_rw| format!(\"\\n{}{}\", nested_indent_str, expr_rw))\n }\n \n+pub fn rewrite_literal(context: &RewriteContext, l: &ast::Lit, shape: Shape) -> Option<String> {\n+    match l.node {\n+        ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n+        _ => Some(context.snippet(l.span)),\n+    }\n+}\n+\n fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Option<String> {\n     let string_lit = context.snippet(span);\n \n@@ -1974,20 +1976,10 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n         return Some(string_lit);\n     }\n \n-    let fmt = StringFormat {\n-        opener: \"\\\"\",\n-        closer: \"\\\"\",\n-        line_start: \" \",\n-        line_end: \"\\\\\",\n-        shape: shape,\n-        trim_end: false,\n-        config: context.config,\n-    };\n-\n     // Remove the quote characters.\n     let str_lit = &string_lit[1..string_lit.len() - 1];\n \n-    rewrite_string(str_lit, &fmt)\n+    rewrite_string(str_lit, &StringFormat::new(shape, context.config))\n }\n \n fn string_requires_rewrite("}, {"sha": "efec7ff23778254ed2851421100a910ffff3aa44", "filename": "src/string.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=2abe119d88f6565a10279a1cba00d79b8a1df47c", "patch": "@@ -29,6 +29,20 @@ pub struct StringFormat<'a> {\n     pub config: &'a Config,\n }\n \n+impl<'a> StringFormat<'a> {\n+    pub fn new(shape: Shape, config: &'a Config) -> StringFormat<'a> {\n+        StringFormat {\n+            opener: \"\\\"\",\n+            closer: \"\\\"\",\n+            line_start: \" \",\n+            line_end: \"\\\\\",\n+            shape: shape,\n+            trim_end: false,\n+            config: config,\n+        }\n+    }\n+}\n+\n // FIXME: simplify this!\n pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String> {\n     // Strip line breaks.\n@@ -133,16 +147,7 @@ mod test {\n     #[test]\n     fn issue343() {\n         let config = Default::default();\n-        let fmt = StringFormat {\n-            opener: \"\\\"\",\n-            closer: \"\\\"\",\n-            line_start: \" \",\n-            line_end: \"\\\\\",\n-            shape: Shape::legacy(2, Indent::empty()),\n-            trim_end: false,\n-            config: &config,\n-        };\n-\n+        let fmt = StringFormat::new(Shape::legacy(2, Indent::empty()), &config);\n         rewrite_string(\"eq_\", &fmt);\n     }\n }"}, {"sha": "ddbbbd49eaa7be10b5ce17bb1c91e72d7caef7b1", "filename": "src/visitor.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe119d88f6565a10279a1cba00d79b8a1df47c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2abe119d88f6565a10279a1cba00d79b8a1df47c", "patch": "@@ -16,6 +16,7 @@ use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n+use expr::rewrite_literal;\n use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, CommentCodeSlices,\n@@ -798,7 +799,7 @@ impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match self.node {\n             ast::NestedMetaItemKind::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItemKind::Literal(..) => Some(context.snippet(self.span)),\n+            ast::NestedMetaItemKind::Literal(ref l) => rewrite_literal(context, l, shape),\n         }\n     }\n }\n@@ -809,10 +810,11 @@ impl Rewrite for ast::MetaItem {\n             ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n             ast::MetaItemKind::List(ref list) => {\n                 let name = self.name.as_str();\n-                // 3 = `#[` and `(`, 2 = `]` and `)`\n+                // 1 = `(`, 2 = `]` and `)`\n                 let item_shape = try_opt!(\n                     shape\n-                        .shrink_left(name.len() + 3)\n+                        .visual_indent(0)\n+                        .shrink_left(name.len() + 1)\n                         .and_then(|s| s.sub_width(2))\n                 );\n                 let items = itemize_list(\n@@ -841,41 +843,40 @@ impl Rewrite for ast::MetaItem {\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n                 let name = self.name.as_str();\n-                let value = context.snippet(literal.span);\n-                if &*name == \"doc\" && contains_comment(&value) {\n-                    let doc_shape = Shape {\n-                        width: cmp::min(shape.width, context.config.comment_width())\n-                            .checked_sub(shape.indent.width())\n-                            .unwrap_or(0),\n-                        ..shape\n-                    };\n-                    try_opt!(rewrite_comment(&value, false, doc_shape, context.config))\n-                } else {\n-                    format!(\"{} = {}\", name, value)\n-                }\n+                // 3 = ` = `\n+                let lit_shape = try_opt!(shape.shrink_left(name.len() + 3));\n+                let value = try_opt!(rewrite_literal(context, literal, lit_shape));\n+                format!(\"{} = {}\", name, value)\n             }\n         })\n     }\n }\n \n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        try_opt!(self.meta())\n-            .rewrite(context, shape)\n-            .map(|rw| if self.is_sugared_doc {\n-                rw\n-            } else {\n-                let original = context.snippet(self.span);\n-                let prefix = match self.style {\n-                    ast::AttrStyle::Inner => \"#!\",\n-                    ast::AttrStyle::Outer => \"#\",\n-                };\n-                if contains_comment(&original) {\n-                    original\n-                } else {\n-                    format!(\"{}[{}]\", prefix, rw)\n-                }\n-            })\n+        let prefix = match self.style {\n+            ast::AttrStyle::Inner => \"#!\",\n+            ast::AttrStyle::Outer => \"#\",\n+        };\n+        let snippet = context.snippet(self.span);\n+        if self.is_sugared_doc {\n+            let doc_shape = Shape {\n+                width: cmp::min(shape.width, context.config.comment_width())\n+                    .checked_sub(shape.indent.width())\n+                    .unwrap_or(0),\n+                ..shape\n+            };\n+            rewrite_comment(&snippet, false, doc_shape, context.config)\n+        } else {\n+            if contains_comment(&snippet) {\n+                return Some(snippet);\n+            }\n+            // 1 = `[`\n+            let shape = try_opt!(shape.offset_left(prefix.len() + 1));\n+            try_opt!(self.meta())\n+                .rewrite(context, shape)\n+                .map(|rw| format!(\"{}[{}]\", prefix, rw))\n+        }\n     }\n }\n "}, {"sha": "b282656d4703e1a242ce9ae3e394bc6340d4abb7", "filename": "tests/source/string-lit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2abe119d88f6565a10279a1cba00d79b8a1df47c/tests%2Fsource%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe119d88f6565a10279a1cba00d79b8a1df47c/tests%2Fsource%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstring-lit.rs?ref=2abe119d88f6565a10279a1cba00d79b8a1df47c", "patch": "@@ -56,3 +56,7 @@ fn issue_1282() {\n         }\n     }\n }\n+\n+// #1987\n+#[link_args = \"-s NO_FILESYSTEM=1 -s NO_EXIT_RUNTIME=1 -s EXPORTED_RUNTIME_METHODS=[\\\"_malloc\\\"] -s NO_DYNAMIC_EXECUTION=1 -s ELIMINATE_DUPLICATE_FUNCTIONS=1 -s EVAL_CTORS=1\"]\n+extern \"C\" {}"}, {"sha": "97cf0213a16378b05b5cfa47cfdba139371b87a1", "filename": "tests/target/string-lit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2abe119d88f6565a10279a1cba00d79b8a1df47c/tests%2Ftarget%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe119d88f6565a10279a1cba00d79b8a1df47c/tests%2Ftarget%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit.rs?ref=2abe119d88f6565a10279a1cba00d79b8a1df47c", "patch": "@@ -57,3 +57,8 @@ fn issue_1282() {\n         }\n     }\n }\n+\n+// #1987\n+#[link_args = \"-s NO_FILESYSTEM=1 -s NO_EXIT_RUNTIME=1 -s EXPORTED_RUNTIME_METHODS=[\\\"_malloc\\\"] \\\n+               -s NO_DYNAMIC_EXECUTION=1 -s ELIMINATE_DUPLICATE_FUNCTIONS=1 -s EVAL_CTORS=1\"]\n+extern \"C\" {}"}]}