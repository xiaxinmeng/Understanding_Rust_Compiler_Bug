{"sha": "44cb86bdc84cbcd659838703150bf9739b65ffd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Y2I4NmJkYzg0Y2JjZDY1OTgzODcwMzE1MGJmOTczOWI2NWZmZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T01:47:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T01:47:41Z"}, "message": "Rollup merge of #61003 - nnethercote:rm-InternedString-PartialEq-impls, r=petrochenkov\n\nRemove impls for `InternedString`/string equality.\n\n`Symbol` received the same treatment in #60630.\n\nAlso, we can derive `PartialEq` for `InternedString`.\n\nr? @petrochenkov", "tree": {"sha": "3187e98ccee0b074e8c8e9b999e5195c060eb4da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3187e98ccee0b074e8c8e9b999e5195c060eb4da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44cb86bdc84cbcd659838703150bf9739b65ffd2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5Ko9CRBK7hj4Ov3rIwAAdHIIACfmHUZ11uRjQMs8BEov9wxj\nSM0RVpmQsobQyNE0tvF7m+/ex0h6VSpE0TPjmBXlVgrXjwxawInEeE1zC3LtJN4f\n+JRU5eUiBecxmhyHLDi1YmwtdToHtb/VjZr7LTs54UGuHDvtD3qR0oeZUJCT0e1/\nw/QowrFVMNZk0dOECj69gdLr4Ea0UTmmr9gtagF+keLDJejaSceY+Ouv6fbzifht\nPbxam5qhCOktgaOuE6Gt21KTgFvdq2OMGZTninNXw3ymu/SPfOTfzHawNd2OhMCL\nVxIw3pLVrAD+n8nKV8G7raX2w9KtQ653anIqWF35ds9oz1WR4QQy89+VXp3siZk=\n=avOy\n-----END PGP SIGNATURE-----\n", "payload": "tree 3187e98ccee0b074e8c8e9b999e5195c060eb4da\nparent 98172092cf18f0b226008bce4e16c65dc5832cbf\nparent b557567c35cbb0c84c536e62df8dbfd1694314ef\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558489661 +0200\ncommitter GitHub <noreply@github.com> 1558489661 +0200\n\nRollup merge of #61003 - nnethercote:rm-InternedString-PartialEq-impls, r=petrochenkov\n\nRemove impls for `InternedString`/string equality.\n\n`Symbol` received the same treatment in #60630.\n\nAlso, we can derive `PartialEq` for `InternedString`.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44cb86bdc84cbcd659838703150bf9739b65ffd2", "html_url": "https://github.com/rust-lang/rust/commit/44cb86bdc84cbcd659838703150bf9739b65ffd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44cb86bdc84cbcd659838703150bf9739b65ffd2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98172092cf18f0b226008bce4e16c65dc5832cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/98172092cf18f0b226008bce4e16c65dc5832cbf", "html_url": "https://github.com/rust-lang/rust/commit/98172092cf18f0b226008bce4e16c65dc5832cbf"}, {"sha": "b557567c35cbb0c84c536e62df8dbfd1694314ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b557567c35cbb0c84c536e62df8dbfd1694314ef", "html_url": "https://github.com/rust-lang/rust/commit/b557567c35cbb0c84c536e62df8dbfd1694314ef"}], "stats": {"total": 100, "additions": 34, "deletions": 66}, "files": [{"sha": "1f25dba2915c4c8c38950ea56f4b3ea8da558895", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -6,7 +6,7 @@ use crate::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, sym};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n@@ -69,7 +69,7 @@ fn unpack_option_like<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         self.tcx.fn_sig(def_id).abi() == RustIntrinsic &&\n-        self.tcx.item_name(def_id) == \"transmute\"\n+        self.tcx.item_name(def_id) == sym::transmute\n     }\n \n     fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {"}, {"sha": "f9ceeb5bfc01b373e22b615a6056481c0dfa729f", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -243,15 +243,15 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     // `{Self}` is allowed\n                     Position::ArgumentNamed(s) if s == \"Self\" => (),\n                     // `{ThisTraitsName}` is allowed\n-                    Position::ArgumentNamed(s) if s == name => (),\n+                    Position::ArgumentNamed(s) if s == name.as_str() => (),\n                     // `{from_method}` is allowed\n                     Position::ArgumentNamed(s) if s == \"from_method\" => (),\n                     // `{from_desugaring}` is allowed\n                     Position::ArgumentNamed(s) if s == \"from_desugaring\" => (),\n                     // So is `{A}` if A is a type parameter\n-                    Position::ArgumentNamed(s) => match generics.params.iter().find(|param|\n-                        param.name == s\n-                    ) {\n+                    Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n+                        param.name.as_str() == s\n+                    }) {\n                         Some(_) => (),\n                         None => {\n                             span_err!(tcx.sess, span, E0230,\n@@ -301,7 +301,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                 Piece::NextArgument(a) => match a.position {\n                     Position::ArgumentNamed(s) => match generic_map.get(s) {\n                         Some(val) => val,\n-                        None if s == name => {\n+                        None if s == name.as_str() => {\n                             &trait_str\n                         }\n                         None => {"}, {"sha": "b60ef557cb84f660271a0c10e2dd353cf1342abc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -2981,9 +2981,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn item_name(self, id: DefId) -> InternedString {\n+    pub fn item_name(self, id: DefId) -> Symbol {\n         if id.index == CRATE_DEF_INDEX {\n-            self.original_crate_name(id.krate).as_interned_str()\n+            self.original_crate_name(id.krate)\n         } else {\n             let def_key = self.def_key(id);\n             match def_key.disambiguated_data.data {\n@@ -2995,7 +2995,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }),\n                 _ => def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {\n                     bug!(\"item_name: no name for {:?}\", self.def_path(id));\n-                }),\n+                }).as_symbol(),\n             }\n         }\n     }"}, {"sha": "c18852a832fce8bd6226e829c75f8a87074eb666", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -1140,14 +1140,16 @@ impl<F: fmt::Write> PrettyPrinter<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F>\n \n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                data.name != \"\" && data.name != \"'_\"\n+                data.name.as_symbol() != keywords::Invalid.name() &&\n+                data.name.as_symbol() != keywords::UnderscoreLifetime.name()\n             }\n \n             ty::ReLateBound(_, br) |\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name != \"\" && name != \"'_\" {\n+                    if name.as_symbol() != keywords::Invalid.name() &&\n+                       name.as_symbol() != keywords::UnderscoreLifetime.name() {\n                         return true;\n                     }\n                 }\n@@ -1203,7 +1205,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, '_, F> {\n         // `explain_region()` or `note_and_explain_region()`.\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                if data.name != \"\" {\n+                if data.name.as_symbol() != keywords::Invalid.name() {\n                     p!(write(\"{}\", data.name));\n                     return Ok(self);\n                 }\n@@ -1212,7 +1214,8 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, '_, F> {\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name != \"\" && name != \"'_\" {\n+                    if name.as_symbol() != keywords::Invalid.name() &&\n+                       name.as_symbol() != keywords::UnderscoreLifetime.name() {\n                         p!(write(\"{}\", name));\n                         return Ok(self);\n                     }"}, {"sha": "1a8647ed197b5c316f45db8ed205d3c68ec5c6b0", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -264,7 +264,7 @@ fn compute_symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) ->\n             return name.as_interned_str();\n         }\n         // Don't mangle foreign items.\n-        return tcx.item_name(def_id);\n+        return tcx.item_name(def_id).as_interned_str();\n     }\n \n     if let Some(name) = &attrs.export_name {\n@@ -274,7 +274,7 @@ fn compute_symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) ->\n \n     if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n         // Don't mangle\n-        return tcx.item_name(def_id);\n+        return tcx.item_name(def_id).as_interned_str();\n     }\n \n     // We want to compute the \"type\" of this item. Unfortunately, some"}, {"sha": "d17a92efb066bb9dd3725577049292b578223f1d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n \n         fn def_id_is_transmute(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n             cx.tcx.fn_sig(def_id).abi() == RustIntrinsic &&\n-            cx.tcx.item_name(def_id) == \"transmute\"\n+            cx.tcx.item_name(def_id) == sym::transmute\n         }\n     }\n }"}, {"sha": "2070a38b7b85de5ef15715ca5394e487f7720863", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -432,7 +432,7 @@ impl cstore::CStore {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n-        } else if data.name == sym::proc_macro && data.item_name(id.index) == \"quote\" {\n+        } else if data.name == sym::proc_macro && data.item_name(id.index) == sym::quote {\n             use syntax::ext::base::SyntaxExtension;\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n "}, {"sha": "d2ba82b5a1c9f04df492895bcc356a63c593db22", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -29,7 +29,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map;\n-use syntax::symbol::{InternedString, sym};\n+use syntax::symbol::{Symbol, sym};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::hygiene::Mark;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n@@ -497,12 +497,13 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn item_name(&self, item_index: DefIndex) -> InternedString {\n+    pub fn item_name(&self, item_index: DefIndex) -> Symbol {\n         self.def_key(item_index)\n             .disambiguated_data\n             .data\n             .get_opt_name()\n             .expect(\"no name in item_name\")\n+            .as_symbol()\n     }\n \n     pub fn def_kind(&self, index: DefIndex) -> Option<DefKind> {\n@@ -568,15 +569,15 @@ impl<'a, 'tcx> CrateMetadata {\n \n         ty::VariantDef::new(\n             tcx,\n-            Ident::from_interned_str(self.item_name(index)),\n+            Ident::with_empty_ctxt(self.item_name(index)),\n             variant_did,\n             ctor_did,\n             data.discr,\n             item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    ident: Ident::from_interned_str(self.item_name(index)),\n+                    ident: Ident::with_empty_ctxt(self.item_name(index)),\n                     vis: f.visibility.decode(self)\n                 }\n             }).collect(),\n@@ -787,7 +788,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(kind) = self.def_kind(child_index) {\n                                 callback(def::Export {\n                                     res: Res::Def(kind, self.local_def_id(child_index)),\n-                                    ident: Ident::from_interned_str(self.item_name(child_index)),\n+                                    ident: Ident::with_empty_ctxt(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                 });\n@@ -982,7 +983,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| self.item_name(index).as_symbol())\n+            .map(|index| self.item_name(index))\n             .collect()\n     }\n "}, {"sha": "b9224d973fe7b8fe9ca69f731aca2b72c3733971", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::query::Providers;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n use rustc_target::spec::abi::Abi;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, sym};\n \n use std::fmt;\n use std::iter;\n@@ -100,9 +100,9 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         ty::InstanceDef::CloneShim(def_id, ty) => {\n             let name = tcx.item_name(def_id);\n-            if name == \"clone\" {\n+            if name == sym::clone {\n                 build_clone_shim(tcx, def_id, ty)\n-            } else if name == \"clone_from\" {\n+            } else if name == sym::clone_from {\n                 debug!(\"make_shim({:?}: using default trait implementation\", instance);\n                 return tcx.optimized_mir(def_id);\n             } else {"}, {"sha": "7d2dbff996d084148c098ff0ebab4e34c7e468f4", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -223,7 +223,7 @@ fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 if let ty::FnDef(def_id, _) = func.ty.sty {\n                     let abi = tcx.fn_sig(def_id).abi();\n                     let name = tcx.item_name(def_id);\n-                    if abi == Abi::RustIntrinsic &&  name == \"rustc_peek\" {\n+                    if abi == Abi::RustIntrinsic && name == sym::rustc_peek {\n                         return Some((args, source_info.span));\n                     }\n                 }"}, {"sha": "6d03a5ad63bbbb237b960a16d94b795b59cf81ac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -1702,7 +1702,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         let stripped_typarams = gens.params.iter().filter_map(|param| match param.kind {\n             ty::GenericParamDefKind::Lifetime => None,\n             ty::GenericParamDefKind::Type { .. } => {\n-                if param.name == keywords::SelfUpper.name().as_str() {\n+                if param.name.as_symbol() == keywords::SelfUpper.name() {\n                     assert_eq!(param.index, 0);\n                     return None;\n                 }"}, {"sha": "8b07e81e5863790e27daec7e459ffb63e99a4d76", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb86bdc84cbcd659838703150bf9739b65ffd2/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=44cb86bdc84cbcd659838703150bf9739b65ffd2", "patch": "@@ -1147,7 +1147,7 @@ impl Encodable for LocalInternedString {\n /// assert_ne!(Symbol::gensym(\"x\"), Symbol::gensym(\"x\"))\n /// assert_eq!(Symbol::gensym(\"x\").as_interned_str(), Symbol::gensym(\"x\").as_interned_str())\n /// ```\n-#[derive(Clone, Copy, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub struct InternedString {\n     symbol: Symbol,\n }\n@@ -1212,42 +1212,6 @@ impl Ord for InternedString {\n     }\n }\n \n-impl<T: std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n-    fn eq(&self, other: &T) -> bool {\n-        self.with(|string| string == other.deref())\n-    }\n-}\n-\n-impl PartialEq<InternedString> for InternedString {\n-    fn eq(&self, other: &InternedString) -> bool {\n-        self.symbol == other.symbol\n-    }\n-}\n-\n-impl PartialEq<InternedString> for str {\n-    fn eq(&self, other: &InternedString) -> bool {\n-        other.with(|string| self == string)\n-    }\n-}\n-\n-impl<'a> PartialEq<InternedString> for &'a str {\n-    fn eq(&self, other: &InternedString) -> bool {\n-        other.with(|string| *self == string)\n-    }\n-}\n-\n-impl PartialEq<InternedString> for String {\n-    fn eq(&self, other: &InternedString) -> bool {\n-        other.with(|string| self == string)\n-    }\n-}\n-\n-impl<'a> PartialEq<InternedString> for &'a String {\n-    fn eq(&self, other: &InternedString) -> bool {\n-        other.with(|string| *self == string)\n-    }\n-}\n-\n impl fmt::Debug for InternedString {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Debug::fmt(&str, f))"}]}