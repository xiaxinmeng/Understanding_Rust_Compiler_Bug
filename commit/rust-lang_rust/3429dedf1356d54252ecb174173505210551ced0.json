{"sha": "3429dedf1356d54252ecb174173505210551ced0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjlkZWRmMTM1NmQ1NDI1MmVjYjE3NDE3MzUwNTIxMDU1MWNlZDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-15T13:57:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-17T08:14:58Z"}, "message": "Add tidy checks for rustdoc css files", "tree": {"sha": "2c820dbdb3229cd5016b7d9fb96513f23a03c8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c820dbdb3229cd5016b7d9fb96513f23a03c8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3429dedf1356d54252ecb174173505210551ced0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3429dedf1356d54252ecb174173505210551ced0", "html_url": "https://github.com/rust-lang/rust/commit/3429dedf1356d54252ecb174173505210551ced0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3429dedf1356d54252ecb174173505210551ced0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6969b3099623506bd3a99d0b06c2aaac8fb3602e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6969b3099623506bd3a99d0b06c2aaac8fb3602e", "html_url": "https://github.com/rust-lang/rust/commit/6969b3099623506bd3a99d0b06c2aaac8fb3602e"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "470fab496a442fa6dc65328896c3af6713d7593b", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3429dedf1356d54252ecb174173505210551ced0/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3429dedf1356d54252ecb174173505210551ced0/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=3429dedf1356d54252ecb174173505210551ced0", "patch": "@@ -119,6 +119,7 @@ fn contains_ignore_directive(can_contain: bool, contents: &str, check: &str) ->\n     // Update `can_contain` when changing this\n     if contents.contains(&format!(\"// ignore-tidy-{}\", check))\n         || contents.contains(&format!(\"# ignore-tidy-{}\", check))\n+        || contents.contains(&format!(\"/* ignore-tidy-{} */\", check))\n     {\n         Directive::Ignore(false)\n     } else {\n@@ -136,15 +137,37 @@ macro_rules! suppressible_tidy_err {\n     };\n }\n \n+pub fn is_in(full_path: &Path, parent_folder_to_find: &str, folder_to_find: &str) -> bool {\n+    if let Some(parent) = full_path.parent() {\n+        if parent.file_name().map_or_else(\n+            || false,\n+            |f| {\n+                f.to_string_lossy() == folder_to_find\n+                    && parent\n+                        .parent()\n+                        .and_then(|f| f.file_name())\n+                        .map_or_else(|| false, |f| f == parent_folder_to_find)\n+            },\n+        ) {\n+            true\n+        } else {\n+            is_in(parent, parent_folder_to_find, folder_to_find)\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\"];\n+        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\"];\n         if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n             return;\n         }\n \n+        let is_style_file = filename.ends_with(\".css\");\n         let under_rustfmt = filename.ends_with(\".rs\") &&\n             // This list should ideally be sourced from rustfmt.toml but we don't want to add a toml\n             // parser to tidy.\n@@ -161,6 +184,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n             // currently), just the long error code explanation ones.\n             return;\n         }\n+        if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n+            // We only check CSS files in rustdoc.\n+            return;\n+        }\n \n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n@@ -172,8 +199,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n             COLS\n         };\n \n-        let can_contain =\n-            contents.contains(\"// ignore-tidy-\") || contents.contains(\"# ignore-tidy-\");\n+        let can_contain = contents.contains(\"// ignore-tidy-\")\n+            || contents.contains(\"# ignore-tidy-\")\n+            || contents.contains(\"/* ignore-tidy-\");\n         // Enable testing ICE's that require specific (untidy)\n         // file formats easily eg. `issue-1234-ignore-tidy.rs`\n         if filename.contains(\"ignore-tidy\") {\n@@ -208,12 +236,15 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     &format!(\"line longer than {} chars\", max_columns)\n                 );\n             }\n-            if line.contains('\\t') {\n+            if !is_style_file && line.contains('\\t') {\n                 suppressible_tidy_err!(err, skip_tab, \"tab character\");\n             }\n             if line.ends_with(' ') || line.ends_with('\\t') {\n                 suppressible_tidy_err!(err, skip_end_whitespace, \"trailing whitespace\");\n             }\n+            if is_style_file && line.starts_with(' ') {\n+                err(\"CSS files use tabs for indent\");\n+            }\n             if line.contains('\\r') {\n                 suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }"}]}