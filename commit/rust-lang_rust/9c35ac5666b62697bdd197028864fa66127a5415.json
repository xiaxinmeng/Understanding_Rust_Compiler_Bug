{"sha": "9c35ac5666b62697bdd197028864fa66127a5415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzVhYzU2NjZiNjI2OTdiZGQxOTcwMjg4NjRmYTY2MTI3YTU0MTU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-14T00:29:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:55Z"}, "message": "Implement cell::clone_ref\n\nPer discussion with @alexcrichton, this is a free function.", "tree": {"sha": "a3930458b0ae90ac56a793b92c8581d35f726009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3930458b0ae90ac56a793b92c8581d35f726009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c35ac5666b62697bdd197028864fa66127a5415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c35ac5666b62697bdd197028864fa66127a5415", "html_url": "https://github.com/rust-lang/rust/commit/9c35ac5666b62697bdd197028864fa66127a5415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c35ac5666b62697bdd197028864fa66127a5415/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0594ebb8baa0544ed0f818c494be20b3c9957a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0594ebb8baa0544ed0f818c494be20b3c9957a5", "html_url": "https://github.com/rust-lang/rust/commit/a0594ebb8baa0544ed0f818c494be20b3c9957a5"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "8b3494f3127339cc83beaa7f592393a4364c5732", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c35ac5666b62697bdd197028864fa66127a5415/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c35ac5666b62697bdd197028864fa66127a5415/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9c35ac5666b62697bdd197028864fa66127a5415", "patch": "@@ -186,6 +186,25 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n     }\n }\n \n+/// Copy a `Ref`.\n+///\n+/// The `RefCell` is already immutably borrowed, so this cannot fail.\n+///\n+/// A `Clone` implementation would interfere with the widespread\n+/// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n+#[experimental]\n+pub fn clone_ref<'b, T>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n+    // Since this Ref exists, we know the borrow flag\n+    // is not set to WRITING.\n+    let borrow = orig.parent.borrow.get();\n+    debug_assert!(borrow != WRITING && borrow != UNUSED);\n+    orig.parent.borrow.set(borrow + 1);\n+\n+    Ref {\n+        parent: orig.parent,\n+    }\n+}\n+\n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n pub struct RefMut<'b, T> {\n     parent: &'b RefCell<T>\n@@ -307,4 +326,19 @@ mod test {\n         let _ = _b;\n         let _b = x.borrow_mut();\n     }\n+\n+    #[test]\n+    fn clone_ref_updates_flag() {\n+        let x = RefCell::new(0);\n+        {\n+            let b1 = x.borrow();\n+            assert!(x.try_borrow_mut().is_none());\n+            {\n+                let _b2 = clone_ref(&b1);\n+                assert!(x.try_borrow_mut().is_none());\n+            }\n+            assert!(x.try_borrow_mut().is_none());\n+        }\n+        assert!(x.try_borrow_mut().is_some());\n+    }\n }"}]}