{"sha": "f34762abb7a33991f3835030bcbe1ac6f3033cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNDc2MmFiYjdhMzM5OTFmMzgzNTAzMGJjYmUxYWM2ZjMwMzNjZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-04T11:08:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-04T11:08:33Z"}, "message": "internal: better factoring for to_proto::completion\n\nOne source completion can produce up to two lsp completions.\nAdditionally, `preselct` and `sort_text` are global properties of the\nwhole set of completions, so the right granularity here is to convert\nmany completions.\n\nAs a side-benefit, we no loger allocate intermediate vec.", "tree": {"sha": "7ff77e169aece69427a52c336bcb48448b679d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff77e169aece69427a52c336bcb48448b679d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34762abb7a33991f3835030bcbe1ac6f3033cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34762abb7a33991f3835030bcbe1ac6f3033cf1", "html_url": "https://github.com/rust-lang/rust/commit/f34762abb7a33991f3835030bcbe1ac6f3033cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34762abb7a33991f3835030bcbe1ac6f3033cf1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "108b56f354f1f5647bdaa229100bef11aae4e464", "url": "https://api.github.com/repos/rust-lang/rust/commits/108b56f354f1f5647bdaa229100bef11aae4e464", "html_url": "https://github.com/rust-lang/rust/commit/108b56f354f1f5647bdaa229100bef11aae4e464"}], "stats": {"total": 183, "additions": 98, "deletions": 85}, "files": [{"sha": "4a7525c94b97d2ef0921e675b98c7ec19b731d13", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 13, "deletions": 54, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f34762abb7a33991f3835030bcbe1ac6f3033cf1", "patch": "@@ -22,12 +22,10 @@ use lsp_types::{\n     FoldingRangeParams, HoverContents, Location, NumberOrString, Position, PrepareRenameResponse,\n     Range, RenameParams, SemanticTokensDeltaParams, SemanticTokensFullDeltaResult,\n     SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n-    SemanticTokensResult, SymbolInformation, SymbolTag, TextDocumentIdentifier,\n-    TextDocumentPositionParams, Url, WorkspaceEdit,\n+    SemanticTokensResult, SymbolInformation, SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n-use serde::{Deserialize, Serialize};\n-use serde_json::{json, to_value};\n+use serde_json::json;\n use stdx::format_to;\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n \n@@ -764,23 +762,13 @@ pub(crate) fn handle_completion(\n     };\n     let line_index = snap.file_line_index(position.file_id)?;\n \n-    let insert_replace_support =\n-        snap.config.insert_replace_support().then(|| text_document_position.position);\n-    let items: Vec<CompletionItem> = items\n-        .into_iter()\n-        .flat_map(|item| {\n-            let mut new_completion_items =\n-                to_proto::completion_item(insert_replace_support, &line_index, item.clone());\n-\n-            if completion_config.enable_imports_on_the_fly {\n-                for new_item in &mut new_completion_items {\n-                    fill_resolve_data(&mut new_item.data, &item, &text_document_position);\n-                }\n-            }\n-\n-            new_completion_items\n-        })\n-        .collect();\n+    let items = to_proto::completion_items(\n+        snap.config.insert_replace_support(),\n+        completion_config.enable_imports_on_the_fly,\n+        &line_index,\n+        text_document_position.clone(),\n+        items.clone(),\n+    );\n \n     let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n@@ -800,16 +788,13 @@ pub(crate) fn handle_completion_resolve(\n         .into());\n     }\n \n-    let resolve_data = match original_completion\n-        .data\n-        .take()\n-        .map(serde_json::from_value::<CompletionResolveData>)\n-        .transpose()?\n-    {\n-        Some(data) => data,\n+    let data = match original_completion.data.take() {\n+        Some(it) => it,\n         None => return Ok(original_completion),\n     };\n \n+    let resolve_data: lsp_ext::CompletionResolveData = serde_json::from_value(data)?;\n+\n     let file_id = from_proto::file_id(&snap, &resolve_data.position.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n     let offset = from_proto::offset(&line_index, resolve_data.position.position);\n@@ -1760,29 +1745,3 @@ fn run_rustfmt(\n         Ok(Some(to_proto::text_edit_vec(&line_index, diff(&file, &new_text))))\n     }\n }\n-\n-#[derive(Debug, Serialize, Deserialize)]\n-struct CompletionResolveData {\n-    position: lsp_types::TextDocumentPositionParams,\n-    full_import_path: String,\n-    imported_name: String,\n-}\n-\n-fn fill_resolve_data(\n-    resolve_data: &mut Option<serde_json::Value>,\n-    item: &ide::CompletionItem,\n-    position: &TextDocumentPositionParams,\n-) -> Option<()> {\n-    let import_edit = item.import_to_add()?;\n-    let import_path = &import_edit.import.import_path;\n-\n-    *resolve_data = Some(\n-        to_value(CompletionResolveData {\n-            position: position.to_owned(),\n-            full_import_path: import_path.to_string(),\n-            imported_name: import_path.segments().last()?.to_string(),\n-        })\n-        .unwrap(),\n-    );\n-    Some(())\n-}"}, {"sha": "f11ad396e702db798ef31d7c2fe794c541af63d2", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=f34762abb7a33991f3835030bcbe1ac6f3033cf1", "patch": "@@ -499,3 +499,10 @@ pub enum WorkspaceSymbolSearchKind {\n     OnlyTypes,\n     AllSymbols,\n }\n+\n+#[derive(Debug, Serialize, Deserialize)]\n+pub struct CompletionResolveData {\n+    pub position: lsp_types::TextDocumentPositionParams,\n+    pub full_import_path: String,\n+    pub imported_name: String,\n+}"}, {"sha": "f48312abb7c91facc30a347bc3e39580d5f66f4b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 77, "deletions": 30, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34762abb7a33991f3835030bcbe1ac6f3033cf1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f34762abb7a33991f3835030bcbe1ac6f3033cf1", "patch": "@@ -197,11 +197,35 @@ pub(crate) fn snippet_text_edit_vec(\n         .collect()\n }\n \n-pub(crate) fn completion_item(\n-    insert_replace_support: Option<lsp_types::Position>,\n+pub(crate) fn completion_items(\n+    insert_replace_support: bool,\n+    enable_imports_on_the_fly: bool,\n     line_index: &LineIndex,\n-    item: CompletionItem,\n+    tdpp: lsp_types::TextDocumentPositionParams,\n+    items: Vec<CompletionItem>,\n ) -> Vec<lsp_types::CompletionItem> {\n+    let mut res = Vec::with_capacity(items.len());\n+    for item in items {\n+        completion_item(\n+            &mut res,\n+            insert_replace_support,\n+            enable_imports_on_the_fly,\n+            line_index,\n+            &tdpp,\n+            item,\n+        )\n+    }\n+    res\n+}\n+\n+fn completion_item(\n+    acc: &mut Vec<lsp_types::CompletionItem>,\n+    insert_replace_support: bool,\n+    enable_imports_on_the_fly: bool,\n+    line_index: &LineIndex,\n+    tdpp: &lsp_types::TextDocumentPositionParams,\n+    item: CompletionItem,\n+) {\n     let mut additional_text_edits = Vec::new();\n \n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -211,6 +235,7 @@ pub(crate) fn completion_item(\n         let source_range = item.source_range();\n         for indel in item.text_edit().iter() {\n             if indel.delete.contains_range(source_range) {\n+                let insert_replace_support = insert_replace_support.then(|| tdpp.position);\n                 text_edit = Some(if indel.delete == source_range {\n                     self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n                 } else {\n@@ -253,29 +278,38 @@ pub(crate) fn completion_item(\n         lsp_item.command = Some(command::trigger_parameter_hints());\n     }\n \n-    let mut res = match item.ref_match() {\n-        Some((mutability, relevance)) => {\n-            let mut lsp_item_with_ref = lsp_item.clone();\n-            set_score(&mut lsp_item_with_ref, relevance);\n-            lsp_item_with_ref.label =\n-                format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n-            if let Some(it) = &mut lsp_item_with_ref.text_edit {\n-                let new_text = match it {\n-                    lsp_types::CompletionTextEdit::Edit(it) => &mut it.new_text,\n-                    lsp_types::CompletionTextEdit::InsertAndReplace(it) => &mut it.new_text,\n+    lsp_item.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n+    if enable_imports_on_the_fly {\n+        if let Some(import_edit) = item.import_to_add() {\n+            let import_path = &import_edit.import.import_path;\n+            if let Some(import_name) = import_path.segments().last() {\n+                let data = lsp_ext::CompletionResolveData {\n+                    position: tdpp.clone(),\n+                    full_import_path: import_path.to_string(),\n+                    imported_name: import_name.to_string(),\n                 };\n-                *new_text = format!(\"&{}{}\", mutability.as_keyword_for_ref(), new_text);\n+                lsp_item.data = Some(to_value(data).unwrap());\n             }\n-            vec![lsp_item_with_ref, lsp_item]\n         }\n-        None => vec![lsp_item],\n-    };\n-\n-    for lsp_item in res.iter_mut() {\n-        lsp_item.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n     }\n \n-    return res;\n+    if let Some((mutability, relevance)) = item.ref_match() {\n+        let mut lsp_item_with_ref = lsp_item.clone();\n+        set_score(&mut lsp_item_with_ref, relevance);\n+        lsp_item_with_ref.label =\n+            format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n+        if let Some(it) = &mut lsp_item_with_ref.text_edit {\n+            let new_text = match it {\n+                lsp_types::CompletionTextEdit::Edit(it) => &mut it.new_text,\n+                lsp_types::CompletionTextEdit::InsertAndReplace(it) => &mut it.new_text,\n+            };\n+            *new_text = format!(\"&{}{}\", mutability.as_keyword_for_ref(), new_text);\n+        }\n+\n+        acc.push(lsp_item_with_ref);\n+    };\n+\n+    acc.push(lsp_item);\n \n     fn set_score(res: &mut lsp_types::CompletionItem, relevance: CompletionRelevance) {\n         if relevance.is_relevant() {\n@@ -1179,7 +1213,9 @@ mod tests {\n             encoding: OffsetEncoding::Utf16,\n         };\n         let (analysis, file_id) = Analysis::from_single_file(text);\n-        let completions: Vec<(String, Option<String>)> = analysis\n+\n+        let file_position = ide_db::base_db::FilePosition { file_id, offset };\n+        let mut items = analysis\n             .completions(\n                 &ide::CompletionConfig {\n                     enable_postfix_completions: true,\n@@ -1196,15 +1232,26 @@ mod tests {\n                         skip_glob_imports: true,\n                     },\n                 },\n-                ide_db::base_db::FilePosition { file_id, offset },\n+                file_position,\n             )\n             .unwrap()\n-            .unwrap()\n-            .into_iter()\n-            .filter(|c| c.label().ends_with(\"arg\"))\n-            .map(|c| completion_item(None, &line_index, c))\n-            .flat_map(|comps| comps.into_iter().map(|c| (c.label, c.sort_text)))\n-            .collect();\n+            .unwrap();\n+        items.retain(|c| c.label().ends_with(\"arg\"));\n+        let items = completion_items(\n+            false,\n+            false,\n+            &line_index,\n+            lsp_types::TextDocumentPositionParams {\n+                text_document: lsp_types::TextDocumentIdentifier {\n+                    uri: \"file://main.rs\".parse().unwrap(),\n+                },\n+                position: position(&line_index, file_position.offset),\n+            },\n+            items,\n+        );\n+        let items: Vec<(String, Option<String>)> =\n+            items.into_iter().map(|c| (c.label, c.sort_text)).collect();\n+\n         expect_test::expect![[r#\"\n             [\n                 (\n@@ -1221,7 +1268,7 @@ mod tests {\n                 ),\n             ]\n         \"#]]\n-        .assert_debug_eq(&completions);\n+        .assert_debug_eq(&items);\n     }\n \n     #[test]"}, {"sha": "78e14b01e4508afe24d56affc997c990bcdf9ba7", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34762abb7a33991f3835030bcbe1ac6f3033cf1/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f34762abb7a33991f3835030bcbe1ac6f3033cf1/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=f34762abb7a33991f3835030bcbe1ac6f3033cf1", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 3f2879db0013a72\n+lsp_ext.rs hash: 3b2931972b33198b\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}]}