{"sha": "b5076fbb9669bd8e29ad58160a2d60ddd6813df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MDc2ZmJiOTY2OWJkOGUyOWFkNTgxNjBhMmQ2MGRkZDY4MTNkZjc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-17T13:25:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-17T13:25:05Z"}, "message": "bootstrap.py: patch RPATH on NixOS to handle the new zlib dependency.", "tree": {"sha": "886e7b18c63323aae9c76300e03895a2792785b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886e7b18c63323aae9c76300e03895a2792785b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5076fbb9669bd8e29ad58160a2d60ddd6813df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5076fbb9669bd8e29ad58160a2d60ddd6813df7", "html_url": "https://github.com/rust-lang/rust/commit/b5076fbb9669bd8e29ad58160a2d60ddd6813df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5076fbb9669bd8e29ad58160a2d60ddd6813df7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d866160b85107551c339c35995db4b35c0364264", "url": "https://api.github.com/repos/rust-lang/rust/commits/d866160b85107551c339c35995db4b35c0364264", "html_url": "https://github.com/rust-lang/rust/commit/d866160b85107551c339c35995db4b35c0364264"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "c3f1bac177de7dd6695196a0b12cc2ca69048cc5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b5076fbb9669bd8e29ad58160a2d60ddd6813df7/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/b5076fbb9669bd8e29ad58160a2d60ddd6813df7/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=b5076fbb9669bd8e29ad58160a2d60ddd6813df7", "patch": "@@ -389,8 +389,12 @@ def support_xz():\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n             self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n-            self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n-            self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n+            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(self.bin_root()))\n+            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(self.bin_root()))\n+            lib_dir = \"{}/lib\".format(self.bin_root())\n+            for lib in os.listdir(lib_dir):\n+                if lib.endswith(\".so\"):\n+                    self.fix_bin_or_dylib(\"{}/{}\".format(lib_dir, lib))\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(self.date)\n \n@@ -409,7 +413,7 @@ def support_xz():\n             filename = \"cargo-{}-{}{}\".format(cargo_channel, self.build,\n                                               tarball_suffix)\n             self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n-            self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n+            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(self.bin_root()))\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n@@ -422,8 +426,8 @@ def support_xz():\n                 [channel, date] = rustfmt_channel.split('-', 1)\n                 filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n                 self._download_stage0_helper(filename, \"rustfmt-preview\", tarball_suffix, date)\n-                self.fix_executable(\"{}/bin/rustfmt\".format(self.bin_root()))\n-                self.fix_executable(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n+                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n+                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n                     rustfmt_stamp.write(self.date + self.rustfmt_channel)\n \n@@ -441,11 +445,12 @@ def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n-    def fix_executable(self, fname):\n-        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker\n+    def fix_bin_or_dylib(self, fname):\n+        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n+        or the RPATH section, to fix the dynamic library search path\n \n         This method is only required on NixOS and uses the PatchELF utility to\n-        change the dynamic linker of ELF executables.\n+        change the interpreter/RPATH of ELF executables.\n \n         Please see https://nixos.org/patchelf.html for more information\n         \"\"\"\n@@ -483,6 +488,9 @@ def fix_executable(self, fname):\n                 # Needed for the path of `ld-linux.so` (via `nix-support/dynamic-linker`).\n                 \"stdenv.cc.bintools\",\n \n+                # Needed as a system dependency of `libLLVM-*.so`.\n+                \"zlib\",\n+\n                 # Needed for patching ELF binaries (see doc comment above).\n                 \"patchelf\",\n             ]\n@@ -507,14 +515,23 @@ def fix_executable(self, fname):\n             self.nix_deps_dir = nix_deps_dir\n \n         patchelf = \"{}/patchelf/bin/patchelf\".format(nix_deps_dir)\n-        bintools_dir = \"{}/stdenv.cc.bintools\".format(nix_deps_dir)\n \n-        with open(\"{}/nix-support/dynamic-linker\".format(bintools_dir)) as dynamic_linker:\n-            interpreter = dynamic_linker.read().rstrip()\n+        if fname.endswith(\".so\"):\n+            # Dynamic library, patch RPATH to point to system dependencies.\n+            dylib_deps = [\"zlib\"]\n+            rpath_entries = [\n+                # Relative default, all binary and dynamic libraries we ship\n+                # appear to have this (even when `../lib` is redundant).\n+                \"$ORIGIN/../lib\",\n+            ] + [\"{}/{}/lib\".format(nix_deps_dir, dep) for dep in dylib_deps]\n+            patchelf_args = [\"--set-rpath\", \":\".join(rpath_entries)]\n+        else:\n+            bintools_dir = \"{}/stdenv.cc.bintools\".format(nix_deps_dir)\n+            with open(\"{}/nix-support/dynamic-linker\".format(bintools_dir)) as dynamic_linker:\n+                patchelf_args = [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n \n         try:\n-            subprocess.check_output(\n-                [patchelf, \"--set-interpreter\", interpreter, fname])\n+            subprocess.check_output([patchelf] + patchelf_args + [fname])\n         except subprocess.CalledProcessError as reason:\n             print(\"warning: failed to call patchelf:\", reason)\n             return"}]}