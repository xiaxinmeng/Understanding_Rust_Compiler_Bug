{"sha": "0161ecd13f31d3521791d419522bab55eabfa717", "node_id": "C_kwDOAAsO6NoAKDAxNjFlY2QxM2YzMWQzNTIxNzkxZDQxOTUyMmJhYjU1ZWFiZmE3MTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-04T22:18:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Recover when failing to normalize closure signature.", "tree": {"sha": "1667cdb010a1646d09e56671a36a7aa1d72a8c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1667cdb010a1646d09e56671a36a7aa1d72a8c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0161ecd13f31d3521791d419522bab55eabfa717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0161ecd13f31d3521791d419522bab55eabfa717", "html_url": "https://github.com/rust-lang/rust/commit/0161ecd13f31d3521791d419522bab55eabfa717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0161ecd13f31d3521791d419522bab55eabfa717/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e45cd4b69bec951dda2120c070a38406d97ea1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e45cd4b69bec951dda2120c070a38406d97ea1f", "html_url": "https://github.com/rust-lang/rust/commit/2e45cd4b69bec951dda2120c070a38406d97ea1f"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "fa4ea426385612108c3b6177a3930824bca63c4b", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -686,6 +686,7 @@ fn codegen_stmt<'tcx>(\n                                 substs,\n                                 ty::ClosureKind::FnOnce,\n                             )\n+                            .expect(\"failed to normalize and resolve closure during codegen\")\n                             .polymorphize(fx.tcx);\n                             let func_ref = fx.get_function_ref(instance);\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);"}, {"sha": "a5806d64d437c75c73db5dbd89571d2413bf6818", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -213,6 +213,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     substs,\n                                     ty::ClosureKind::FnOnce,\n                                 )\n+                                .expect(\"failed to normalize and resolve closure during codegen\")\n                                 .polymorphize(bx.cx().tcx());\n                                 OperandValue::Immediate(bx.cx().get_fn_addr(instance))\n                             }"}, {"sha": "dfdcd4292c9a0b6a78a606418236b551e31231af", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -100,7 +100,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             def_id,\n                             substs,\n                             ty::ClosureKind::FnOnce,\n-                        );\n+                        )\n+                        .ok_or_else(|| err_inval!(TooGeneric))?;\n                         let fn_ptr = self.create_fn_alloc_ptr(FnVal::Instance(instance));\n                         self.write_pointer(fn_ptr, dest)?;\n                     }"}, {"sha": "0e10fe25c10cb3c5de5e7a9626a7ca138a786672", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -496,12 +496,12 @@ impl<'tcx> Instance<'tcx> {\n         def_id: DefId,\n         substs: ty::SubstsRef<'tcx>,\n         requested_kind: ty::ClosureKind,\n-    ) -> Instance<'tcx> {\n+    ) -> Option<Instance<'tcx>> {\n         let actual_kind = substs.as_closure().kind();\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n             Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n-            _ => Instance::new(def_id, substs),\n+            _ => Some(Instance::new(def_id, substs)),\n         }\n     }\n \n@@ -515,7 +515,7 @@ impl<'tcx> Instance<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_did: DefId,\n         substs: ty::SubstsRef<'tcx>,\n-    ) -> Instance<'tcx> {\n+    ) -> Option<Instance<'tcx>> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n         let fn_once = tcx.require_lang_item(LangItem::FnOnce, None);\n         let call_once = tcx\n@@ -531,12 +531,13 @@ impl<'tcx> Instance<'tcx> {\n         let self_ty = tcx.mk_closure(closure_did, substs);\n \n         let sig = substs.as_closure().sig();\n-        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig);\n+        let sig =\n+            tcx.try_normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig).ok()?;\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n         debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-        Instance { def, substs }\n+        Some(Instance { def, substs })\n     }\n \n     /// Depending on the kind of `InstanceDef`, the MIR body associated with an"}, {"sha": "9d8a811659433f6b36b4b2043f714a228d24545d", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -112,6 +112,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.normalize_erasing_regions(param_env, value)\n     }\n \n+    /// If you have a `Binder<'tcx, T>`, you can do this to strip out the\n+    /// late-bound regions and then normalize the result, yielding up\n+    /// a `T` (with regions erased). This is appropriate when the\n+    /// binder is being instantiated at the call site.\n+    ///\n+    /// N.B., currently, higher-ranked type bounds inhibit\n+    /// normalization. Therefore, each time we erase them in\n+    /// codegen, we need to normalize the contents.\n+    pub fn try_normalize_erasing_late_bound_regions<T>(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: ty::Binder<'tcx, T>,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        let value = self.erase_late_bound_regions(value);\n+        self.try_normalize_erasing_regions(param_env, value)\n+    }\n+\n     /// Monomorphizes a type from the AST by first applying the\n     /// in-scope substitutions and then normalizing any associated\n     /// types."}, {"sha": "d4978c565684e74e3b5e91f576d02cdba038e113", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -730,7 +730,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                             def_id,\n                             substs,\n                             ty::ClosureKind::FnOnce,\n-                        );\n+                        )\n+                        .expect(\"failed to normalize and resolve closure during codegen\");\n                         if should_codegen_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(self.tcx, instance, span));\n                         }"}, {"sha": "d08fe6dada104f4f645a8c8c5b4045d00168d660", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -332,12 +332,12 @@ fn resolve_associated_item<'tcx>(\n         }),\n         traits::ImplSource::Closure(closure_data) => {\n             let trait_closure_kind = tcx.fn_trait_kind_from_lang_item(trait_id).unwrap();\n-            Some(Instance::resolve_closure(\n+            Instance::resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,\n                 closure_data.substs,\n                 trait_closure_kind,\n-            ))\n+            )\n         }\n         traits::ImplSource::FnPointer(ref data) => match data.fn_ty.kind() {\n             ty::FnDef(..) | ty::FnPtr(..) => Some(Instance {"}]}