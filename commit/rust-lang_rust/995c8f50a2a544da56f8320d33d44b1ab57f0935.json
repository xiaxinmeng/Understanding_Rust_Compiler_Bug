{"sha": "995c8f50a2a544da56f8320d33d44b1ab57f0935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NWM4ZjUwYTJhNTQ0ZGE1NmY4MzIwZDMzZDQ0YjFhYjU3ZjA5MzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T21:06:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T21:06:51Z"}, "message": "some code docs for the ide_db/rename module", "tree": {"sha": "fec1225bd528cbe1a736e767f30984032910e08f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec1225bd528cbe1a736e767f30984032910e08f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995c8f50a2a544da56f8320d33d44b1ab57f0935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995c8f50a2a544da56f8320d33d44b1ab57f0935", "html_url": "https://github.com/rust-lang/rust/commit/995c8f50a2a544da56f8320d33d44b1ab57f0935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995c8f50a2a544da56f8320d33d44b1ab57f0935/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e533e5900d9dfb40f097811fdc63b5803ef3dbe", "html_url": "https://github.com/rust-lang/rust/commit/5e533e5900d9dfb40f097811fdc63b5803ef3dbe"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "d8021a0e31f9626e859875dcff8e07607a825e35", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/995c8f50a2a544da56f8320d33d44b1ab57f0935/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995c8f50a2a544da56f8320d33d44b1ab57f0935/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=995c8f50a2a544da56f8320d33d44b1ab57f0935", "patch": "@@ -1470,6 +1470,7 @@ fn foo(Foo { i: bar }: Foo) -> i32 {\n \n     #[test]\n     fn test_struct_field_complex_ident_pat() {\n+        cov_mark::check!(rename_record_pat_field_name_split);\n         check(\n             \"baz\",\n             r#\""}, {"sha": "7cdb31bd0663ebb352e34dd00227fff6f6f6ba3a", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/995c8f50a2a544da56f8320d33d44b1ab57f0935/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995c8f50a2a544da56f8320d33d44b1ab57f0935/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=995c8f50a2a544da56f8320d33d44b1ab57f0935", "patch": "@@ -326,12 +326,16 @@ pub fn source_edit_from_references(\n \n fn source_edit_from_name(name: &ast::Name, new_name: &str) -> Option<(TextRange, String)> {\n     if let Some(_) = ast::RecordPatField::for_field_name(name) {\n-        // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n-        // other name https://github.com/rust-analyzer/rust-analyzer/issues/6547\n         if let Some(ident_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n+            cov_mark::hit!(rename_record_pat_field_name_split);\n+            // Foo { ref mut field } -> Foo { new_name: ref mut field }\n+            //      ^ insert `new_name: `\n+\n+            // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n+            // other name https://github.com/rust-analyzer/rust-analyzer/issues/6547\n             return Some((\n                 TextRange::empty(ident_pat.syntax().text_range().start()),\n-                [new_name, \": \"].concat(),\n+                format!(\"{}: \", new_name),\n             ));\n         }\n     }\n@@ -347,21 +351,29 @@ fn source_edit_from_name_ref(\n     if let Some(record_field) = ast::RecordExprField::for_name_ref(name_ref) {\n         let rcf_name_ref = record_field.name_ref();\n         let rcf_expr = record_field.expr();\n-        match (rcf_name_ref, rcf_expr.and_then(|it| it.name_ref())) {\n+        match &(rcf_name_ref, rcf_expr.and_then(|it| it.name_ref())) {\n             // field: init-expr, check if we can use a field init shorthand\n             (Some(field_name), Some(init)) => {\n-                if field_name == *name_ref {\n+                if field_name == name_ref {\n                     if init.text() == new_name {\n                         cov_mark::hit!(test_rename_field_put_init_shorthand);\n+                        // Foo { field: local } -> Foo { local }\n+                        //      ^^^^^^^^ delete this\n+                        // FIXME: Actually delete this instead of replacing the entire thing\n+\n                         // same names, we can use a shorthand here instead.\n                         // we do not want to erase attributes hence this range start\n                         let s = field_name.syntax().text_range().start();\n                         let e = record_field.syntax().text_range().end();\n                         return Some((TextRange::new(s, e), new_name.to_owned()));\n                     }\n-                } else if init == *name_ref {\n+                } else if init == name_ref {\n                     if field_name.text() == new_name {\n                         cov_mark::hit!(test_rename_local_put_init_shorthand);\n+                        // Foo { field: local } -> Foo { field }\n+                        //            ^^^^^^^ delete this\n+                        // FIXME: Actually delete this instead of replacing the entire thing\n+\n                         // same names, we can use a shorthand here instead.\n                         // we do not want to erase attributes hence this range start\n                         let s = field_name.syntax().text_range().start();\n@@ -374,11 +386,15 @@ fn source_edit_from_name_ref(\n             // init shorthand\n             (None, Some(_)) if matches!(def, Definition::Field(_)) => {\n                 cov_mark::hit!(test_rename_field_in_field_shorthand);\n+                // Foo { field } -> Foo { new_name: field }\n+                //       ^ insert `new_name: `\n                 let s = name_ref.syntax().text_range().start();\n                 Some((TextRange::empty(s), format!(\"{}: \", new_name)))\n             }\n             (None, Some(_)) if matches!(def, Definition::Local(_)) => {\n                 cov_mark::hit!(test_rename_local_in_field_shorthand);\n+                // Foo { field } -> Foo { field: new_name }\n+                //            ^ insert `: new_name`\n                 let s = name_ref.syntax().text_range().end();\n                 Some((TextRange::empty(s), format!(\": {}\", new_name)))\n             }\n@@ -395,6 +411,11 @@ fn source_edit_from_name_ref(\n                 // field name is being renamed\n                 if pat.name().map_or(false, |it| it.text() == new_name) {\n                     cov_mark::hit!(test_rename_field_put_init_shorthand_pat);\n+                    // Foo { field: ref mut local } -> Foo { ref mut field }\n+                    //       ^^^^^^^ delete this\n+                    //                      ^^^^^ replace this with `field`\n+                    // FIXME: do this the way its written here\n+\n                     // same names, we can use a shorthand here instead/\n                     // we do not want to erase attributes hence this range start\n                     let s = field_name.syntax().text_range().start();"}]}