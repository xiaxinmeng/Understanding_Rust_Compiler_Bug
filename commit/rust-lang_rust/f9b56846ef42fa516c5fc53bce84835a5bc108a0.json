{"sha": "f9b56846ef42fa516c5fc53bce84835a5bc108a0", "node_id": "C_kwDOAAsO6NoAKGY5YjU2ODQ2ZWY0MmZhNTE2YzVmYzUzYmNlODQ4MzVhNWJjMTA4YTA", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-14T12:55:30Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-14T12:55:30Z"}, "message": "std: use a more efficient `Once` on platforms without threads", "tree": {"sha": "5c006f6cecd951d2466459df308ce431e03a02aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c006f6cecd951d2466459df308ce431e03a02aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b56846ef42fa516c5fc53bce84835a5bc108a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmOZx8IACgkQcE4BSbAZ\nSzw+zA/+NgLFEnqt2OgnpKBByRBWWYHxwMOwIdJW8EMQozUb0x/s3DU82Rq7iWI3\nDPzPqBEz9+xMx+icxTTnsfKXuic11mcXcpovXvWHFqSYonLpePdDVWX08ksWvjRl\nFpRl8ywfaPkoPc+9skZe7SwxgzIhV3mIEvozgAo4qsvSpsMpz9ieD8eK8NiptTgE\nEQ6tSaGZqATID7vR5eFP8fjxi+a5eIAbeVLeoEJRvD28QtIImlBFwtHSxUx/PvHL\nqoIkINYEEjd+you6ypnbK0f1zldAJGmvZIXJEY0LA7glOb8YHUZZuT7yCqdDvL9L\nbCUtUMmeZHPdiqQOyRnGBxEHxcyGtUXP0BsZihx2/W5OtLGXYIO3OW4yzXGcjnBP\n3Dvu6OJ5wKz1RzXSR6oGOwNLXbFv3RrruQaDkcp28DIeucrlOQYN1o8O8WFQJ+OY\nkHVQPl4xVHjOM460DETL4NR8S5Y+GVUcXAIWnaB1UeT3gwlXCfrBw1yGgvJVboT4\nLYw8B0VcdpKoAFMCncHJgg+EpKIbQHWaqjY1TVqjDak4PYlSO3OH6fjRHacwafw2\nt849oiUB+OJ3FknV+HTTEJwfZS2+QsQ+O7/RKz6KndUbgPsgpWJFrdVJ0aNAwdZd\nBlURc45olcQGdzg72kVb9Q8BPka7qaejiPBGjIHQD9NM3lpPeZQ=\n=kDjZ\n-----END PGP SIGNATURE-----", "payload": "tree 5c006f6cecd951d2466459df308ce431e03a02aa\nparent dc30b92cc576ed9e097db7fece0af13662de8d8d\nauthor joboet <jonasboettiger@icloud.com> 1671022530 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1671022530 +0100\n\nstd: use a more efficient `Once` on platforms without threads\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b56846ef42fa516c5fc53bce84835a5bc108a0", "html_url": "https://github.com/rust-lang/rust/commit/f9b56846ef42fa516c5fc53bce84835a5bc108a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b56846ef42fa516c5fc53bce84835a5bc108a0/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc30b92cc576ed9e097db7fece0af13662de8d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc30b92cc576ed9e097db7fece0af13662de8d8d", "html_url": "https://github.com/rust-lang/rust/commit/dc30b92cc576ed9e097db7fece0af13662de8d8d"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "15b22c620d583f64874d71d6fd91e0f077aab72b", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "patch": "@@ -9,6 +9,7 @@ pub mod fs;\n pub mod io;\n pub mod locks;\n pub mod net;\n+pub mod once;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n pub mod os_str;"}, {"sha": "b4bb4975f41c395088272fef47508b9e4fa962d0", "filename": "library/std/src/sys/unsupported/once.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fonce.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "patch": "@@ -0,0 +1,89 @@\n+use crate::cell::Cell;\n+use crate::sync as public;\n+\n+pub struct Once {\n+    state: Cell<State>,\n+}\n+\n+pub struct OnceState {\n+    poisoned: bool,\n+    set_state_to: Cell<State>,\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+enum State {\n+    Incomplete,\n+    Poisoned,\n+    Running,\n+    Complete,\n+}\n+\n+struct CompletionGuard<'a> {\n+    state: &'a Cell<State>,\n+    set_state_on_drop_to: State,\n+}\n+\n+impl<'a> Drop for CompletionGuard<'a> {\n+    fn drop(&mut self) {\n+        self.state.set(self.set_state_on_drop_to);\n+    }\n+}\n+\n+// Safety: threads are not supported on this platform.\n+unsafe impl Sync for Once {}\n+\n+impl Once {\n+    #[inline]\n+    #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n+    pub const fn new() -> Once {\n+        Once { state: Cell::new(State::Incomplete) }\n+    }\n+\n+    #[inline]\n+    pub fn is_completed(&self) -> bool {\n+        self.state.get() == State::Complete\n+    }\n+\n+    #[cold]\n+    #[track_caller]\n+    pub fn call(&self, ignore_poisoning: bool, f: &mut impl FnMut(&public::OnceState)) {\n+        let state = self.state.get();\n+        match state {\n+            State::Poisoned if !ignore_poisoning => {\n+                // Panic to propagate the poison.\n+                panic!(\"Once instance has previously been poisoned\");\n+            }\n+            State::Incomplete | State::Poisoned => {\n+                self.state.set(State::Running);\n+                // `guard` will set the new state on drop.\n+                let mut guard =\n+                    CompletionGuard { state: &self.state, set_state_on_drop_to: State::Poisoned };\n+                // Run the function, letting it know if we're poisoned or not.\n+                let f_state = public::OnceState {\n+                    inner: OnceState {\n+                        poisoned: state == State::Poisoned,\n+                        set_state_to: Cell::new(State::Complete),\n+                    },\n+                };\n+                f(&f_state);\n+                guard.set_state_on_drop_to = f_state.inner.set_state_to.get();\n+            }\n+            State::Running => {\n+                panic!(\"one-time initialization may not be performed recursively\");\n+            }\n+            State::Complete => {}\n+        }\n+    }\n+}\n+\n+impl OnceState {\n+    #[inline]\n+    pub fn is_poisoned(&self) -> bool {\n+        self.poisoned\n+    }\n+\n+    #[inline]\n+    pub fn poison(&self) {\n+        self.set_state_to.set(State::Poisoned)\n+    }\n+}"}, {"sha": "1dc3f2b20266dfa85e8a13d736231f58d6e1b4e5", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "patch": "@@ -32,6 +32,8 @@ pub mod io;\n #[path = \"../unsupported/locks/mod.rs\"]\n pub mod locks;\n pub mod net;\n+#[path = \"../unsupported/once.rs\"]\n+pub mod once;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n pub mod os_str;"}, {"sha": "77ebe3c4ac6f5676e99ea5df211e4a48bb6fce4c", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "patch": "@@ -66,6 +66,8 @@ cfg_if::cfg_if! {\n     } else {\n         #[path = \"../unsupported/locks/mod.rs\"]\n         pub mod locks;\n+        #[path = \"../unsupported/once.rs\"]\n+        pub mod once;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n     }"}, {"sha": "359697d8313170cc85934788db29e7ebaf6c7d70", "filename": "library/std/src/sys_common/once/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fmod.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "patch": "@@ -6,22 +6,6 @@\n // As a result, we end up implementing it ourselves in the standard library.\n // This also gives us the opportunity to optimize the implementation a bit which\n // should help the fast path on call sites.\n-//\n-// So to recap, the guarantees of a Once are that it will call the\n-// initialization closure at most once, and it will never return until the one\n-// that's running has finished running. This means that we need some form of\n-// blocking here while the custom callback is running at the very least.\n-// Additionally, we add on the restriction of **poisoning**. Whenever an\n-// initialization closure panics, the Once enters a \"poisoned\" state which means\n-// that all future calls will immediately panic as well.\n-//\n-// So to implement this, one might first reach for a `Mutex`, but those cannot\n-// be put into a `static`. It also gets a lot harder with poisoning to figure\n-// out when the mutex needs to be deallocated because it's not after the closure\n-// finishes, but after the first successful closure finishes.\n-//\n-// All in all, this is instead implemented with atomics and lock-free\n-// operations! Whee!\n \n cfg_if::cfg_if! {\n     if #[cfg(any(\n@@ -36,8 +20,15 @@ cfg_if::cfg_if! {\n     ))] {\n         mod futex;\n         pub use futex::{Once, OnceState};\n+    } else if #[cfg(any(\n+        windows,\n+        target_family = \"unix\",\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+        target_os = \"solid_asp3\",\n+    ))] {\n+        mod queue;\n+        pub use queue::{Once, OnceState};\n     } else {\n-        mod generic;\n-        pub use generic::{Once, OnceState};\n+        pub use crate::sys::once::{Once, OnceState};\n     }\n }"}, {"sha": "d953a6745923417b1981531e0bb2343812fa23ee", "filename": "library/std/src/sys_common/once/queue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b56846ef42fa516c5fc53bce84835a5bc108a0/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fonce%2Fqueue.rs?ref=f9b56846ef42fa516c5fc53bce84835a5bc108a0", "previous_filename": "library/std/src/sys_common/once/generic.rs"}]}