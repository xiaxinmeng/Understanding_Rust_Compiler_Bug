{"sha": "b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODljZWRjMGU0NGE2YTFmNzViMDU4OWVjYjJlYjRlODkwZTcxZTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-13T18:00:36Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:28Z"}, "message": "Generate links for methods as well", "tree": {"sha": "c6500885d5bf80bd17fd06110d5cb2e2c4b88cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6500885d5bf80bd17fd06110d5cb2e2c4b88cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "html_url": "https://github.com/rust-lang/rust/commit/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83dcd30ee0639b4f7dc55d370953a76f21ba755f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dcd30ee0639b4f7dc55d370953a76f21ba755f", "html_url": "https://github.com/rust-lang/rust/commit/83dcd30ee0639b4f7dc55d370953a76f21ba755f"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "579f22052adc6d433d1838d656c7a35337b89b81", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "patch": "@@ -547,9 +547,9 @@ fn string<T: Display>(\n                                 LinkFromSrc::Local(span) => {\n                                     eprintln!(\"==> {:?}:{:?}\", span.lo(), span.hi());\n                                     context\n-                                    .href_from_span(clean::Span::wrap(*span))\n-                                    .map(|s| format!(\"{}{}\", root_path, s))\n-                                },\n+                                        .href_from_span(clean::Span::wrap(*span))\n+                                        .map(|s| format!(\"{}{}\", root_path, s))\n+                                }\n                                 LinkFromSrc::External(def_id) => {\n                                     format::href(*def_id, context).map(|(url, _, _)| url)\n                                 }"}, {"sha": "2895b4abfb2940dff5f4052daed2476aee0effdc", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=b689cedc0e44a6a1f75b0589ecb2eb4e890e71e4", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{/*ExprKind, */ GenericParam, GenericParamKind, HirId};\n+use rustc_hir::{ExprKind, GenericParam, GenericParamKind, HirId};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -20,14 +20,14 @@ crate fn collect_spans_and_sources(\n     krate: clean::Crate,\n     src_root: &std::path::Path,\n     include_sources: bool,\n-    generate_link_to_definition: bool,\n+    _generate_link_to_definition: bool,\n ) -> (clean::Crate, FxHashMap<std::path::PathBuf, String>, FxHashMap<(u32, u32), LinkFromSrc>) {\n     let mut visitor = SpanMapVisitor { tcx, matches: FxHashMap::default() };\n \n     if include_sources {\n-        if generate_link_to_definition {\n-            intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n-        }\n+        // if generate_link_to_definition {\n+        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+        // }\n         let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n         (krate, sources, visitor.matches)\n     } else {\n@@ -94,17 +94,37 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n         intravisit::walk_path(self, path);\n     }\n \n-    // fn visit_expr(&mut self, expr: &'tcx rustc_hir::Expr<'tcx>) {\n-    //     match expr.kind {\n-    //         ExprKind::MethodCall(segment, method_span, _, _) => {\n-    //             if let Some(hir_id) = segment.hir_id {\n-    //                 // call https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.type_dependent_def_id\n-    //             }\n-    //         }\n-    //         _ => {}\n-    //     }\n-    //     intravisit::walk_expr(self, expr);\n-    // }\n+    fn visit_expr(&mut self, expr: &'tcx rustc_hir::Expr<'tcx>) {\n+        match expr.kind {\n+            ExprKind::MethodCall(segment, method_span, _, _) => {\n+                if let Some(hir_id) = segment.hir_id {\n+                    let hir = self.tcx.hir();\n+                    let body_id = hir.enclosing_body_owner(hir_id);\n+                    // FIXME: this is showing error messages for parts of the code that are not\n+                    // compiled (because of cfg)!\n+                    let typeck_results = self.tcx.typeck_body(\n+                        hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n+                    );\n+                    if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n+                        match hir.span_if_local(def_id) {\n+                            Some(span) => {\n+                                self.matches\n+                                    .insert(span_to_tuple(method_span), LinkFromSrc::Local(span));\n+                            }\n+                            None => {\n+                                self.matches.insert(\n+                                    span_to_tuple(method_span),\n+                                    LinkFromSrc::External(def_id),\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        intravisit::walk_expr(self, expr);\n+    }\n \n     fn visit_use(&mut self, path: &'tcx rustc_hir::Path<'tcx>, id: HirId) {\n         self.handle_path(path, None);"}]}