{"sha": "285fc7d704fcdd7b2a37d475d04d5d955490e000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWZjN2Q3MDRmY2RkN2IyYTM3ZDQ3NWQwNGQ1ZDk1NTQ5MGUwMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-16T20:18:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-16T20:18:19Z"}, "message": "Auto merge of #76804 - tmandry:rollup-nwntt3q, r=tmandry\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #75026 (Add array_windows fn)\n - #76642 (Do not lint ignored private doc tests)\n - #76719 (Change error message for ty param in const)\n - #76721 (Use intra-doc links in `core::mem`)\n - #76728 (Add a comment why `extern crate` is necessary for rustdoc)\n - #76735 (Remove unnecessary `clone()`s in bootstrap)\n - #76741 (Avoid printing dry run timings)\n - #76747 (Add missing code examples in libcore)\n - #76756 (fix a couple of stylistic clippy warnings)\n - #76758 ([fuchsia] Propagate the userspace UTC clock)\n - #76759 (Fix stabilization marker for future_readiness_fns)\n - #76760 (don't lazily evaluate some trivial values for Option::None replacements (clippy::unnecessary_lazy_evaluations))\n - #76764 (Update books)\n - #76775 (Strip a single leading tab when rendering dataflow diffs)\n - #76778 (Simplify iter fuse struct doc)\n - #76794 (Make graphviz font configurable)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "4f1ec58da1fa3129a2003b6dd61763381221b1c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f1ec58da1fa3129a2003b6dd61763381221b1c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285fc7d704fcdd7b2a37d475d04d5d955490e000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285fc7d704fcdd7b2a37d475d04d5d955490e000", "html_url": "https://github.com/rust-lang/rust/commit/285fc7d704fcdd7b2a37d475d04d5d955490e000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285fc7d704fcdd7b2a37d475d04d5d955490e000/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77", "html_url": "https://github.com/rust-lang/rust/commit/ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77"}, {"sha": "3bf66ae25f6f84d22e39ac05b4f3623b08132805", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf66ae25f6f84d22e39ac05b4f3623b08132805", "html_url": "https://github.com/rust-lang/rust/commit/3bf66ae25f6f84d22e39ac05b4f3623b08132805"}], "stats": {"total": 614, "additions": 450, "deletions": 164}, "files": [{"sha": "58db81bc1dc619c35d5d6c2ef984f95d928a23b9", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -591,14 +591,14 @@ pub trait GraphWalk<'a> {\n     fn target(&'a self, edge: &Self::Edge) -> Self::Node;\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub enum RenderOption {\n     NoEdgeLabels,\n     NoNodeLabels,\n     NoEdgeStyles,\n     NoNodeStyles,\n \n-    Monospace,\n+    Fontname(String),\n     DarkTheme,\n }\n \n@@ -633,11 +633,14 @@ where\n     // Global graph properties\n     let mut graph_attrs = Vec::new();\n     let mut content_attrs = Vec::new();\n-    if options.contains(&RenderOption::Monospace) {\n-        let font = r#\"fontname=\"Courier, monospace\"\"#;\n-        graph_attrs.push(font);\n-        content_attrs.push(font);\n-    };\n+    let font;\n+    if let Some(fontname) = options.iter().find_map(|option| {\n+        if let RenderOption::Fontname(fontname) = option { Some(fontname) } else { None }\n+    }) {\n+        font = format!(r#\"fontname=\"{}\"\"#, fontname);\n+        graph_attrs.push(&font[..]);\n+        content_attrs.push(&font[..]);\n+    }\n     if options.contains(&RenderOption::DarkTheme) {\n         graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n         content_attrs.push(r#\"color=\"white\"\"#);"}, {"sha": "e3c613b1d6a12876cf5066a97d9ec09a7e8d90de", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                 debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n                 if sub == &ty::ReStatic\n-                    && v.0.into_iter().find(|t| t.span.desugaring_kind().is_none()).is_some()\n+                    && v.0.into_iter().any(|t| t.span.desugaring_kind().is_none())\n                 {\n                     // If the failure is due to a `'static` requirement coming from a `dyn` or\n                     // `impl` Trait that *isn't* caused by `async fn` desugaring, handle this case"}, {"sha": "5b5dbcf192ca16caf6fb17405e658de0df370372", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -961,7 +961,7 @@ fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &\n             continue;\n         }\n \n-        let span = sugared_span.take().unwrap_or_else(|| attr.span);\n+        let span = sugared_span.take().unwrap_or(attr.span);\n \n         if attr.is_doc_comment() || cx.sess().check_name(attr, sym::doc) {\n             cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {"}, {"sha": "e76c2cb356f3f19b8dc6508f1a46e37bd3e44928", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -170,7 +170,7 @@ impl Collector<'tcx> {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::static_nobundle,\n-                span.unwrap_or_else(|| rustc_span::DUMMY_SP),\n+                span.unwrap_or(rustc_span::DUMMY_SP),\n                 \"kind=\\\"static-nobundle\\\" is unstable\",\n             )\n             .emit();\n@@ -179,7 +179,7 @@ impl Collector<'tcx> {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::raw_dylib,\n-                span.unwrap_or_else(|| rustc_span::DUMMY_SP),\n+                span.unwrap_or(rustc_span::DUMMY_SP),\n                 \"kind=\\\"raw-dylib\\\" is unstable\",\n             )\n             .emit();"}, {"sha": "4b2e9a16d4a07ec6398ea08f705dc49e53c7a4ab", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -273,10 +273,10 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match self.tcx().trimmed_def_paths(LOCAL_CRATE).get(&def_id) {\n-            None => return Ok((self, false)),\n+            None => Ok((self, false)),\n             Some(symbol) => {\n                 self.write_str(&symbol.as_str())?;\n-                return Ok((self, true));\n+                Ok((self, true))\n             }\n         }\n     }"}, {"sha": "eb1f70099fc89059ecf603f1da07cc0258e2565f", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let ReturnConstraint::ClosureUpvar(upvar) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n                 DefiningTy::Closure(def_id, _) => def_id,\n-                ty @ _ => bug!(\"unexpected DefiningTy {:?}\", ty),\n+                ty => bug!(\"unexpected DefiningTy {:?}\", ty),\n             };\n \n             let upvar_def_span = self.infcx.tcx.hir().span(upvar);"}, {"sha": "4084083bd9956a4a493aee952e254243e2812937", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -306,7 +306,8 @@ where\n     let mut buf = Vec::new();\n \n     let graphviz = graphviz::Formatter::new(body, def_id, results, style);\n-    let mut render_opts = vec![dot::RenderOption::Monospace];\n+    let mut render_opts =\n+        vec![dot::RenderOption::Fontname(tcx.sess.opts.debugging_opts.graphviz_font.clone())];\n     if tcx.sess.opts.debugging_opts.graphviz_dark_mode {\n         render_opts.push(dot::RenderOption::DarkTheme);\n     }"}, {"sha": "94151fbd0903aa496cf6b7f6d0308482ad8cb524", "filename": "compiler/rustc_mir/src/dataflow/framework/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fgraphviz.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -578,7 +578,7 @@ where\n         return String::new();\n     }\n \n-    let re = Regex::new(\"\\u{001f}([+-])\").unwrap();\n+    let re = Regex::new(\"\\t?\\u{001f}([+-])\").unwrap();\n \n     let raw_diff = format!(\"{:#?}\", DebugDiffWithAdapter { new, old, ctxt });\n "}, {"sha": "b224df92e9da0245381866a22a51439066b2d6a2", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -126,7 +126,7 @@ impl OptimizationFinder<'b, 'tcx> {\n             }\n         }\n \n-        return None;\n+        None\n     }\n }\n "}, {"sha": "4511962d68f032dcfccfc933aa943c8f2f3fd383", "filename": "compiler/rustc_mir/src/util/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -55,9 +55,9 @@ where\n     writeln!(w, \"{} {}Mir_{} {{\", kind, cluster, def_name)?;\n \n     // Global graph properties\n-    let font = r#\"fontname=\"Courier, monospace\"\"#;\n-    let mut graph_attrs = vec![font];\n-    let mut content_attrs = vec![font];\n+    let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.debugging_opts.graphviz_font);\n+    let mut graph_attrs = vec![&font[..]];\n+    let mut content_attrs = vec![&font[..]];\n \n     let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n     if dark_mode {"}, {"sha": "612bc3e74911c44d788189c4398b2cf2b50936c9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -466,7 +466,7 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n-            ResolutionError::ParamInNonTrivialAnonConst(name) => {\n+            ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n                     \"generic parameters must not be used inside of non trivial constant values\",\n@@ -478,9 +478,17 @@ impl<'a> Resolver<'a> {\n                         name\n                     ),\n                 );\n-                err.help(\n-                    &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\", name)\n-                );\n+\n+                if is_type {\n+                    err.note(\"type parameters are currently not permitted in anonymous constants\");\n+                } else {\n+                    err.help(\n+                        &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\",\n+                                 name\n+                        )\n+                    );\n+                }\n+\n                 err\n             }\n             ResolutionError::SelfInTyParamDefault => {"}, {"sha": "2cc87dc637566fafa9cec8a914790039f02b2b3e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1534,7 +1534,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             }\n         };\n \n-        let lifetime_names: Vec<_> = lifetime_names.into_iter().collect();\n+        let lifetime_names: Vec<_> = lifetime_names.iter().collect();\n         match (&lifetime_names[..], snippet.as_deref()) {\n             ([name], Some(\"&\")) => {\n                 suggest_existing(err, &name.as_str()[..], &|name| format!(\"&{} \", name));"}, {"sha": "85ddc5f55d110b389f288f839c35e2eb50417831", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -221,7 +221,7 @@ enum ResolutionError<'a> {\n     /// generic parameters must not be used inside of non trivial constant values.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n-    ParamInNonTrivialAnonConst(Symbol),\n+    ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2638,9 +2638,10 @@ impl<'a> Resolver<'a> {\n                                     if record_used {\n                                         self.report_error(\n                                             span,\n-                                            ResolutionError::ParamInNonTrivialAnonConst(\n-                                                rib_ident.name,\n-                                            ),\n+                                            ResolutionError::ParamInNonTrivialAnonConst {\n+                                                name: rib_ident.name,\n+                                                is_type: true,\n+                                            },\n                                         );\n                                     }\n                                     return Res::Err;\n@@ -2718,7 +2719,10 @@ impl<'a> Resolver<'a> {\n                                 if record_used {\n                                     self.report_error(\n                                         span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n+                                        ResolutionError::ParamInNonTrivialAnonConst {\n+                                            name: rib_ident.name,\n+                                            is_type: false,\n+                                        },\n                                     );\n                                 }\n                                 return Res::Err;"}, {"sha": "3f12596a236abe228b6e8fb2ddf77fa5ad11e22c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1762,6 +1762,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n     }\n \n+    if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {\n+        debugging_opts.graphviz_font = graphviz_font;\n+    }\n+\n     if !cg.embed_bitcode {\n         match cg.lto {\n             LtoCli::No | LtoCli::Unspecified => {}"}, {"sha": "8cc55f4ebe895245ba6bd31c56ea327eb4db7cc8", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -911,6 +911,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"set the optimization fuel quota for a crate\"),\n     graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\n         \"use dark-themed colors in graphviz output (default: no)\"),\n+    graphviz_font: String = (\"Courier, monospace\".to_string(), parse_string, [UNTRACKED],\n+        \"use the given `fontname` in graphviz output; can be overridden by setting \\\n+        environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some statistics about AST and HIR (default: no)\"),\n     human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],"}, {"sha": "c53c65c00b769919864947f9c0a84f3f5e56de7f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -182,7 +182,7 @@ fn overlap_within_probe(\n     }\n \n     if !skip_leak_check.is_yes() {\n-        if let Err(_) = infcx.leak_check(true, snapshot) {\n+        if infcx.leak_check(true, snapshot).is_err() {\n             debug!(\"overlap: leak check failed\");\n             return None;\n         }"}, {"sha": "7cb23dc05379503399de89b96a2b516f5ac61961", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // If all the obligations hold (or there are no obligations) the tail expression\n                     // we can suggest to return a boxed trait object instead of an opaque type.\n-                    if suggest_box { self.ret_type_span.clone() } else { None }\n+                    if suggest_box { self.ret_type_span } else { None }\n                 }\n                 _ => None,\n             };"}, {"sha": "d5563cdac02de090cdb78efc989e0dfc404e55c5", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1243,10 +1243,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n             let no_accessible_remaining_fields = remaining_fields\n                 .iter()\n-                .filter(|(_, (_, field))| {\n+                .find(|(_, (_, field))| {\n                     field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n                 })\n-                .next()\n                 .is_none();\n \n             if no_accessible_remaining_fields {"}, {"sha": "54b0671fab5a7f1f9b927ce3b441dbb283a527b2", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1141,10 +1141,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if !etc && !unmentioned_fields.is_empty() {\n             let no_accessible_unmentioned_fields = unmentioned_fields\n                 .iter()\n-                .filter(|(field, _)| {\n+                .find(|(field, _)| {\n                     field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n                 })\n-                .next()\n                 .is_none();\n \n             if no_accessible_unmentioned_fields {"}, {"sha": "7881c101f9f60f496f1b6f62b525c7cb330a2a2b", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -76,6 +76,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n+#![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]"}, {"sha": "79403cf86873ed28c13cb3a9f19b9892ed669c8f", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -97,6 +97,8 @@ pub use core::slice::check_range;\n pub use core::slice::ArrayChunks;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunksMut;\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub use core::slice::ArrayWindows;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]"}, {"sha": "bec3adfa984221422ebfcdbaad69ef53f6e85eed", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -21,9 +21,9 @@ pub use self::future::Future;\n #[unstable(feature = \"into_future\", issue = \"67644\")]\n pub use into_future::IntoFuture;\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n pub use pending::{pending, Pending};\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n pub use ready::{ready, Ready};\n \n #[unstable(feature = \"future_poll_fn\", issue = \"72302\")]"}, {"sha": "4fec219ede2bce8e067c255a26f355f23b3ad2d6", "filename": "library/core/src/future/pending.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -11,7 +11,7 @@ use crate::task::{Context, Poll};\n /// documentation for more.\n ///\n /// [`pending`]: fn.pending.html\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n pub struct Pending<T> {\n     _data: marker::PhantomData<T>,\n@@ -31,12 +31,12 @@ pub struct Pending<T> {\n /// unreachable!();\n /// # }\n /// ```\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n pub fn pending<T>() -> Pending<T> {\n     Pending { _data: marker::PhantomData }\n }\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Future for Pending<T> {\n     type Output = T;\n \n@@ -45,17 +45,17 @@ impl<T> Future for Pending<T> {\n     }\n }\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Unpin for Pending<T> {}\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Debug for Pending<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Pending\").finish()\n     }\n }\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Clone for Pending<T> {\n     fn clone(&self) -> Self {\n         pending()"}, {"sha": "fcfd8779b0ad2e702688308b37d59db1f40f94ee", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -8,15 +8,15 @@ use crate::task::{Context, Poll};\n /// documentation for more.\n ///\n /// [`ready`]: fn.ready.html\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n #[derive(Debug, Clone)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n pub struct Ready<T>(Option<T>);\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Unpin for Ready<T> {}\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Future for Ready<T> {\n     type Output = T;\n \n@@ -42,7 +42,7 @@ impl<T> Future for Ready<T> {\n /// assert_eq!(a.await, 1);\n /// # }\n /// ```\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n pub fn ready<T>(t: T) -> Ready<T> {\n     Ready(Some(t))\n }"}, {"sha": "c5b3bd5cf11f2534902f53f7d8f9fe10904a69dc", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -9,11 +9,8 @@ use crate::ops::Try;\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///\n-/// This `struct` is created by the [`fuse`] method on [`Iterator`]. See its\n-/// documentation for more.\n-///\n-/// [`fuse`]: trait.Iterator.html#method.fuse\n-/// [`Iterator`]: trait.Iterator.html\n+/// This `struct` is created by [`Iterator::fuse`]. See its documentation\n+/// for more.\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "aa1b5529df22247a777697edb846a25c2f5194de", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -31,10 +31,10 @@ pub use crate::intrinsics::transmute;\n /// forever in an unreachable state. However, it does not guarantee that pointers\n /// to this memory will remain valid.\n ///\n-/// * If you want to leak memory, see [`Box::leak`][leak].\n-/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`][into_raw].\n+/// * If you want to leak memory, see [`Box::leak`].\n+/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`].\n /// * If you want to dispose of a value properly, running its destructor, see\n-/// [`mem::drop`][drop].\n+/// [`mem::drop`].\n ///\n /// # Safety\n ///\n@@ -132,15 +132,11 @@ pub use crate::intrinsics::transmute;\n /// ownership to `s` \u2014 the final step of interacting with `v` to dispose of it without\n /// running its destructor is entirely avoided.\n ///\n-/// [drop]: fn.drop.html\n-/// [uninit]: fn.uninitialized.html\n-/// [clone]: ../clone/trait.Clone.html\n-/// [swap]: fn.swap.html\n-/// [box]: ../../std/boxed/struct.Box.html\n-/// [leak]: ../../std/boxed/struct.Box.html#method.leak\n-/// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n+/// [`Box`]: ../../std/boxed/struct.Box.html\n+/// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak\n+/// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw\n+/// [`mem::drop`]: drop\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [`ManuallyDrop`]: struct.ManuallyDrop.html\n #[inline]\n #[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -152,8 +148,6 @@ pub const fn forget<T>(t: T) {\n ///\n /// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n /// stabilized.\n-///\n-/// [`forget`]: fn.forget.html\n #[inline]\n #[unstable(feature = \"forget_unsized\", issue = \"none\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -301,7 +295,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n /// assert_eq!(2, mem::size_of::<ExampleUnion>());\n /// ```\n ///\n-/// [alignment]: ./fn.align_of.html\n+/// [alignment]: align_of\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n@@ -365,7 +359,6 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n-/// [`size_of_val`]: ../../core/mem/fn.size_of_val.html\n ///\n /// # Examples\n ///\n@@ -501,7 +494,6 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n-/// [`align_of_val`]: ../../core/mem/fn.align_of_val.html\n ///\n /// # Examples\n ///\n@@ -540,7 +532,7 @@ pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// `needs_drop` explicitly. Types like [`HashMap`], on the other hand, have to drop\n /// values one at a time and should use this API.\n ///\n-/// [`drop_in_place`]: ../ptr/fn.drop_in_place.html\n+/// [`drop_in_place`]: crate::ptr::drop_in_place\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n ///\n /// # Examples\n@@ -595,9 +587,9 @@ pub const fn needs_drop<T>() -> bool {\n /// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n /// It is useful for FFI sometimes, but should generally be avoided.\n ///\n-/// [zeroed]: union.MaybeUninit.html#method.zeroed\n+/// [zeroed]: MaybeUninit::zeroed\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [inv]: union.MaybeUninit.html#initialization-invariant\n+/// [inv]: MaybeUninit#initialization-invariant\n ///\n /// # Examples\n ///\n@@ -650,10 +642,10 @@ pub unsafe fn zeroed<T>() -> T {\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n ///\n-/// [`MaybeUninit<T>`]: union.MaybeUninit.html\n-/// [uninit]: union.MaybeUninit.html#method.uninit\n-/// [assume_init]: union.MaybeUninit.html#method.assume_init\n-/// [inv]: union.MaybeUninit.html#initialization-invariant\n+/// [`MaybeUninit<T>`]: MaybeUninit\n+/// [uninit]: MaybeUninit::uninit\n+/// [assume_init]: MaybeUninit::assume_init\n+/// [inv]: MaybeUninit#initialization-invariant\n #[inline(always)]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -686,9 +678,6 @@ pub unsafe fn uninitialized<T>() -> T {\n /// assert_eq!(42, x);\n /// assert_eq!(5, y);\n /// ```\n-///\n-/// [`replace`]: fn.replace.html\n-/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n@@ -754,10 +743,6 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n /// assert_eq!(buffer.buf.len(), 0);\n /// ```\n-///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`replace`]: fn.replace.html\n-/// [`swap`]: fn.swap.html\n #[inline]\n #[stable(feature = \"mem_take\", since = \"1.40.0\")]\n pub fn take<T: Default>(dest: &mut T) -> T {\n@@ -822,10 +807,6 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// assert_eq!(buffer.replace_index(0, 2), 0);\n /// assert_eq!(buffer.buf[0], 2);\n /// ```\n-///\n-/// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [`swap`]: fn.swap.html\n-/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n@@ -851,7 +832,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// Because `_x` is moved into the function, it is automatically dropped before\n /// the function returns.\n ///\n-/// [drop]: ../ops/trait.Drop.html\n+/// [drop]: Drop\n ///\n /// # Examples\n ///\n@@ -894,8 +875,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// println!(\"x: {}, y: {}\", x, y.0); // still available\n /// ```\n ///\n-/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`RefCell`]: crate::cell::RefCell\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) {}\n@@ -914,7 +894,6 @@ pub fn drop<T>(_x: T) {}\n /// `T`.\n ///\n /// [ub]: ../../reference/behavior-considered-undefined.html\n-/// [size_of]: fn.size_of.html\n ///\n /// # Examples\n ///\n@@ -960,8 +939,6 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n /// Opaque type representing the discriminant of an enum.\n ///\n /// See the [`discriminant`] function in this module for more information.\n-///\n-/// [`discriminant`]: fn.discriminant.html\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);\n "}, {"sha": "6f3a3a867450db0d9e3cf6ee1e9c3127bed0cd22", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -166,6 +166,16 @@ from_str_float_impl!(f64);\n ///\n /// This error is used as the error type for the [`FromStr`] implementation\n /// for [`f32`] and [`f64`].\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::str::FromStr;\n+///\n+/// if let Err(e) = f64::from_str(\"a.12\") {\n+///     println!(\"Failed conversion to f64: {}\", e);\n+/// }\n+/// ```\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseFloatError {"}, {"sha": "050c187e55576b5009becf286bd3c3576b780322", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -5286,13 +5286,33 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n ///\n /// [`str.trim()`]: ../../std/primitive.str.html#method.trim\n /// [`i8::from_str_radix`]: ../../std/primitive.i8.html#method.from_str_radix\n+///\n+/// # Example\n+///\n+/// ```\n+/// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n+///     println!(\"Failed conversion to i32: {}\", e);\n+/// }\n+/// ```\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseIntError {\n     kind: IntErrorKind,\n }\n \n /// Enum to store the various types of errors that can cause parsing an integer to fail.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(int_error_matching)]\n+///\n+/// # fn main() {\n+/// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n+///     println!(\"Failed conversion to i32: {:?}\", e.kind());\n+/// }\n+/// # }\n+/// ```\n #[unstable(\n     feature = \"int_error_matching\",\n     reason = \"it can be useful to match errors when making error messages \\"}, {"sha": "84fa34c75e3a2ed3219d3daea51151bc34a946e0", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1687,6 +1687,106 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n     }\n }\n \n+/// A windowed iterator over a slice in overlapping chunks (`N` elements at a\n+/// time), starting at the beginning of the slice\n+///\n+/// This struct is created by the [`array_windows`] method on [slices].\n+///\n+/// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n+/// [slices]: ../../std/primitive.slice.html\n+#[derive(Debug, Clone, Copy)]\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n+    pub(crate) slice_head: *const T,\n+    pub(crate) num: usize,\n+    pub(crate) marker: marker::PhantomData<&'a [T; N]>,\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+    type Item = &'a [T; N];\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.num == 0 {\n+            return None;\n+        }\n+        // SAFETY:\n+        // This is safe because it's indexing into a slice guaranteed to be length > N.\n+        let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };\n+        // SAFETY: Guaranteed that there are at least 1 item remaining otherwise\n+        // earlier branch would've been hit\n+        self.slice_head = unsafe { self.slice_head.add(1) };\n+\n+        self.num -= 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.num, Some(self.num))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.num\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        if self.num <= n {\n+            self.num = 0;\n+            return None;\n+        }\n+        // SAFETY:\n+        // This is safe because it's indexing into a slice guaranteed to be length > N.\n+        let ret = unsafe { &*self.slice_head.add(n).cast::<[T; N]>() };\n+        // SAFETY: Guaranteed that there are at least n items remaining\n+        self.slice_head = unsafe { self.slice_head.add(n + 1) };\n+\n+        self.num -= n + 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.nth(self.num.checked_sub(1)?)\n+    }\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<'a, T, const N: usize> DoubleEndedIterator for ArrayWindows<'a, T, N> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'a [T; N]> {\n+        if self.num == 0 {\n+            return None;\n+        }\n+        // SAFETY: Guaranteed that there are n items remaining, n-1 for 0-indexing.\n+        let ret = unsafe { &*self.slice_head.add(self.num - 1).cast::<[T; N]>() };\n+        self.num -= 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<&'a [T; N]> {\n+        if self.num <= n {\n+            self.num = 0;\n+            return None;\n+        }\n+        // SAFETY: Guaranteed that there are n items remaining, n-1 for 0-indexing.\n+        let ret = unsafe { &*self.slice_head.add(self.num - (n + 1)).cast::<[T; N]>() };\n+        self.num -= n + 1;\n+        Some(ret)\n+    }\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n+    fn is_empty(&self) -> bool {\n+        self.num == 0\n+    }\n+}\n+\n /// An iterator over a slice in (non-overlapping) chunks (`N` elements at a\n /// time), starting at the beginning of the slice.\n ///"}, {"sha": "8e9d1eb98a86b08130ea21fc972cf63d719c8f73", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -56,6 +56,9 @@ pub use iter::{RChunks, RChunksExact, RChunksExactMut, RChunksMut};\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use iter::{ArrayChunks, ArrayChunksMut};\n \n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub use iter::ArrayWindows;\n+\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub use iter::{SplitInclusive, SplitInclusiveMut};\n \n@@ -1026,6 +1029,40 @@ impl<T> [T] {\n         }\n     }\n \n+    /// Returns an iterator over overlapping windows of `N` elements of  a slice,\n+    /// starting at the beginning of the slice.\n+    ///\n+    /// This is the const generic equivalent of [`windows`].\n+    ///\n+    /// If `N` is smaller than the size of the array, it will return no windows.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_windows)]\n+    /// let slice = [0, 1, 2, 3];\n+    /// let mut iter = slice.array_windows();\n+    /// assert_eq!(iter.next().unwrap(), &[0, 1]);\n+    /// assert_eq!(iter.next().unwrap(), &[1, 2]);\n+    /// assert_eq!(iter.next().unwrap(), &[2, 3]);\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`windows`]: #method.windows\n+    #[unstable(feature = \"array_windows\", issue = \"75027\")]\n+    #[inline]\n+    pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n+        assert_ne!(N, 0);\n+\n+        let num_windows = self.len().saturating_sub(N - 1);\n+        ArrayWindows { slice_head: self.as_ptr(), num: num_windows, marker: marker::PhantomData }\n+    }\n+\n     /// Returns an iterator over `chunk_size` elements of the slice at a time, starting at the end\n     /// of the slice.\n     ///"}, {"sha": "a5b1b51e06c64ebea26e19a3d3b54a486d7579ac", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -2,6 +2,7 @@\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_map)]\n+#![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}, {"sha": "9556d43f9d78b3e9864ca1a6d78d4479ff7fb318", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -657,6 +657,55 @@ fn test_array_chunks_mut_zip() {\n     assert_eq!(v1, [13, 14, 19, 20, 4]);\n }\n \n+#[test]\n+fn test_array_windows_infer() {\n+    let v: &[i32] = &[0, 1, 0, 1];\n+    assert_eq!(v.array_windows::<2>().count(), 3);\n+    let c = v.array_windows();\n+    for &[a, b] in c {\n+        assert_eq!(a + b, 1);\n+    }\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4, 5, 6];\n+    let total = v2.array_windows().map(|&[a, b, c]| a + b + c).sum::<i32>();\n+    assert_eq!(total, 3 + 6 + 9 + 12 + 15);\n+}\n+\n+#[test]\n+fn test_array_windows_count() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let c = v.array_windows::<3>();\n+    assert_eq!(c.count(), 4);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let c2 = v2.array_windows::<6>();\n+    assert_eq!(c2.count(), 0);\n+\n+    let v3: &[i32] = &[];\n+    let c3 = v3.array_windows::<2>();\n+    assert_eq!(c3.count(), 0);\n+}\n+\n+#[test]\n+fn test_array_windows_nth() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let snd = v.array_windows::<4>().nth(1);\n+    assert_eq!(snd, Some(&[1, 2, 3, 4]));\n+    let mut arr_windows = v.array_windows::<2>();\n+    assert_ne!(arr_windows.nth(0), arr_windows.nth(0));\n+    let last = v.array_windows::<3>().last();\n+    assert_eq!(last, Some(&[3, 4, 5]));\n+}\n+\n+#[test]\n+fn test_array_windows_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let snd = v.array_windows::<4>().nth_back(1);\n+    assert_eq!(snd, Some(&[1, 2, 3, 4]));\n+    let mut arr_windows = v.array_windows::<2>();\n+    assert_ne!(arr_windows.nth_back(0), arr_windows.nth_back(0));\n+}\n+\n #[test]\n fn test_rchunks_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}, {"sha": "9d9c36e9afb0f8a06772742207e730addaace5fd", "filename": "library/std/src/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffuture.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -9,7 +9,7 @@ pub use core::future::Future;\n pub use core::future::{from_generator, get_context, ResumeTy};\n \n #[doc(inline)]\n-#[stable(feature = \"future_readiness_fns\", since = \"1.47.0\")]\n+#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n pub use core::future::{pending, ready, Pending, Ready};\n \n #[doc(inline)]"}, {"sha": "fab27cd9f70855f04904cf16f463c3681bce14b5", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -118,7 +118,8 @@ impl Command {\n             FDIO_SPAWN_CLONE_JOB\n                 | FDIO_SPAWN_CLONE_LDSVC\n                 | FDIO_SPAWN_CLONE_NAMESPACE\n-                | FDIO_SPAWN_CLONE_ENVIRON, // this is ignored when envp is non-null\n+                | FDIO_SPAWN_CLONE_ENVIRON // this is ignored when envp is non-null\n+                | FDIO_SPAWN_CLONE_UTC_CLOCK,\n             self.get_program().as_ptr(),\n             self.get_argv().as_ptr(),\n             envp,"}, {"sha": "69ec275c2b318372151200ba05590f4e4c8aabcb", "filename": "library/std/src/sys/unix/process/zircon.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -138,6 +138,7 @@ pub const FDIO_SPAWN_CLONE_LDSVC: u32 = 0x0002;\n pub const FDIO_SPAWN_CLONE_NAMESPACE: u32 = 0x0004;\n pub const FDIO_SPAWN_CLONE_STDIO: u32 = 0x0008;\n pub const FDIO_SPAWN_CLONE_ENVIRON: u32 = 0x0010;\n+pub const FDIO_SPAWN_CLONE_UTC_CLOCK: u32 = 0x0020;\n pub const FDIO_SPAWN_CLONE_ALL: u32 = 0xFFFF;\n \n // fdio_spawn_etc actions"}, {"sha": "d2537d65e67f50fe6dcf32977689b69d52511764", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1209,7 +1209,7 @@ impl<'a> Builder<'a> {\n             cargo.env(format!(\"CC_{}\", target.triple), &cc);\n \n             let cflags = self.cflags(target, GitRepo::Rustc).join(\" \");\n-            cargo.env(format!(\"CFLAGS_{}\", target.triple), cflags.clone());\n+            cargo.env(format!(\"CFLAGS_{}\", target.triple), &cflags);\n \n             if let Some(ar) = self.ar(target) {\n                 let ranlib = format!(\"{} s\", ar.display());\n@@ -1394,7 +1394,7 @@ impl<'a> Builder<'a> {\n             (out, dur - deps)\n         };\n \n-        if self.config.print_step_timings {\n+        if self.config.print_step_timings && !self.config.dry_run {\n             println!(\"[TIMING] {:?} -- {}.{:03}\", step, dur.as_secs(), dur.subsec_millis());\n         }\n "}, {"sha": "7e2cb7721865e512034a64f6fc6725a62639e391", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -500,6 +500,7 @@ impl Config {\n \n     pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n+\n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n         config.rustc_error_format = flags.rustc_error_format;\n@@ -551,14 +552,14 @@ impl Config {\n         let has_targets = build.target.is_some() || flags.target.is_some();\n         config.skip_only_host_steps = !has_hosts && has_targets;\n \n-        config.hosts = if let Some(arg_host) = flags.host.clone() {\n+        config.hosts = if let Some(arg_host) = flags.host {\n             arg_host\n         } else if let Some(file_host) = build.host {\n             file_host.iter().map(|h| TargetSelection::from_user(h)).collect()\n         } else {\n             vec![config.build]\n         };\n-        config.targets = if let Some(arg_target) = flags.target.clone() {\n+        config.targets = if let Some(arg_target) = flags.target {\n             arg_target\n         } else if let Some(file_target) = build.target {\n             file_target.iter().map(|h| TargetSelection::from_user(h)).collect()\n@@ -628,14 +629,14 @@ impl Config {\n \n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n-        if let Some(ref install) = toml.install {\n-            config.prefix = install.prefix.clone().map(PathBuf::from);\n-            config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n-            config.datadir = install.datadir.clone().map(PathBuf::from);\n-            config.docdir = install.docdir.clone().map(PathBuf::from);\n-            set(&mut config.bindir, install.bindir.clone().map(PathBuf::from));\n-            config.libdir = install.libdir.clone().map(PathBuf::from);\n-            config.mandir = install.mandir.clone().map(PathBuf::from);\n+        if let Some(install) = toml.install {\n+            config.prefix = install.prefix.map(PathBuf::from);\n+            config.sysconfdir = install.sysconfdir.map(PathBuf::from);\n+            config.datadir = install.datadir.map(PathBuf::from);\n+            config.docdir = install.docdir.map(PathBuf::from);\n+            set(&mut config.bindir, install.bindir.map(PathBuf::from));\n+            config.libdir = install.libdir.map(PathBuf::from);\n+            config.mandir = install.mandir.map(PathBuf::from);\n         }\n \n         // We want the llvm-skip-rebuild flag to take precedence over the\n@@ -658,7 +659,7 @@ impl Config {\n         let mut optimize = None;\n         let mut ignore_git = None;\n \n-        if let Some(ref llvm) = toml.llvm {\n+        if let Some(llvm) = toml.llvm {\n             match llvm.ccache {\n                 Some(StringOrBool::String(ref s)) => config.ccache = Some(s.to_string()),\n                 Some(StringOrBool::Bool(true)) => {\n@@ -726,7 +727,7 @@ impl Config {\n             }\n         }\n \n-        if let Some(ref rust) = toml.rust {\n+        if let Some(rust) = toml.rust {\n             debug = rust.debug;\n             debug_assertions = rust.debug_assertions;\n             debug_assertions_std = rust.debug_assertions_std;\n@@ -746,7 +747,7 @@ impl Config {\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n             set(&mut config.llvm_libunwind, rust.llvm_libunwind);\n             set(&mut config.backtrace, rust.backtrace);\n-            set(&mut config.channel, rust.channel.clone());\n+            set(&mut config.channel, rust.channel);\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.verbose_tests, rust.verbose_tests);\n             // in the case \"false\" is set explicitly, do not overwrite the command line args\n@@ -757,9 +758,9 @@ impl Config {\n             set(&mut config.lld_enabled, rust.lld);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel = rust.parallel_compiler.unwrap_or(false);\n-            config.rustc_default_linker = rust.default_linker.clone();\n-            config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n-            config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n+            config.rustc_default_linker = rust.default_linker;\n+            config.musl_root = rust.musl_root.map(PathBuf::from);\n+            config.save_toolstates = rust.save_toolstates.map(PathBuf::from);\n             set(&mut config.deny_warnings, flags.deny_warnings.or(rust.deny_warnings));\n             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n             set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n@@ -776,9 +777,9 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n         }\n \n-        if let Some(ref t) = toml.target {\n+        if let Some(t) = toml.target {\n             for (triple, cfg) in t {\n-                let mut target = Target::from_triple(triple);\n+                let mut target = Target::from_triple(&triple);\n \n                 if let Some(ref s) = cfg.llvm_config {\n                     target.llvm_config = Some(config.src.join(s));\n@@ -792,18 +793,18 @@ impl Config {\n                 if let Some(s) = cfg.no_std {\n                     target.no_std = s;\n                 }\n-                target.cc = cfg.cc.clone().map(PathBuf::from);\n-                target.cxx = cfg.cxx.clone().map(PathBuf::from);\n-                target.ar = cfg.ar.clone().map(PathBuf::from);\n-                target.ranlib = cfg.ranlib.clone().map(PathBuf::from);\n-                target.linker = cfg.linker.clone().map(PathBuf::from);\n+                target.cc = cfg.cc.map(PathBuf::from);\n+                target.cxx = cfg.cxx.map(PathBuf::from);\n+                target.ar = cfg.ar.map(PathBuf::from);\n+                target.ranlib = cfg.ranlib.map(PathBuf::from);\n+                target.linker = cfg.linker.map(PathBuf::from);\n                 target.crt_static = cfg.crt_static;\n-                target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n-                target.musl_libdir = cfg.musl_libdir.clone().map(PathBuf::from);\n-                target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n-                target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n+                target.musl_root = cfg.musl_root.map(PathBuf::from);\n+                target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);\n+                target.wasi_root = cfg.wasi_root.map(PathBuf::from);\n+                target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n \n-                config.target_config.insert(TargetSelection::from_user(triple), target);\n+                config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n         }\n \n@@ -821,10 +822,10 @@ impl Config {\n             build_target.llvm_filecheck = Some(ci_llvm_bin.join(exe(\"FileCheck\", config.build)));\n         }\n \n-        if let Some(ref t) = toml.dist {\n-            config.dist_sign_folder = t.sign_folder.clone().map(PathBuf::from);\n-            config.dist_gpg_password_file = t.gpg_password_file.clone().map(PathBuf::from);\n-            config.dist_upload_addr = t.upload_addr.clone();\n+        if let Some(t) = toml.dist {\n+            config.dist_sign_folder = t.sign_folder.map(PathBuf::from);\n+            config.dist_gpg_password_file = t.gpg_password_file.map(PathBuf::from);\n+            config.dist_upload_addr = t.upload_addr;\n             set(&mut config.rust_dist_src, t.src_tarball);\n             set(&mut config.missing_tools, t.missing_tools);\n         }"}, {"sha": "0ae9f9712d569bb2dc55e65462c7d437ddf1552e", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -105,15 +105,13 @@ pub fn format(build: &Build, check: bool) {\n         eprintln!(\"./x.py fmt is not supported on this channel\");\n         std::process::exit(1);\n     });\n-    let src = build.src.clone();\n-    let walker = WalkBuilder::new(&build.src).types(matcher).overrides(ignore_fmt).build_parallel();\n+    let src = &build.src;\n+    let walker = WalkBuilder::new(src).types(matcher).overrides(ignore_fmt).build_parallel();\n     walker.run(|| {\n-        let src = src.clone();\n-        let rustfmt_path = rustfmt_path.clone();\n         Box::new(move |entry| {\n             let entry = t!(entry);\n             if entry.file_type().map_or(false, |t| t.is_file()) {\n-                rustfmt(&src, &rustfmt_path, &entry.path(), check);\n+                rustfmt(src, &rustfmt_path, &entry.path(), check);\n             }\n             ignore::WalkState::Continue\n         })"}, {"sha": "6826d177a4adeac4e73d74db025b48919240fc38", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -30,8 +30,8 @@ impl Finder {\n         Self { cache: HashMap::new(), path: env::var_os(\"PATH\").unwrap_or_default() }\n     }\n \n-    pub fn maybe_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> Option<PathBuf> {\n-        let cmd: OsString = cmd.as_ref().into();\n+    pub fn maybe_have<S: Into<OsString>>(&mut self, cmd: S) -> Option<PathBuf> {\n+        let cmd: OsString = cmd.into();\n         let path = &self.path;\n         self.cache\n             .entry(cmd.clone())"}, {"sha": "cb28dee95e5e50b793e6ba9291c5d1568d3ad72e", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1 +1 @@\n-Subproject commit e5ed97128302d5fa45dbac0e64426bc7649a558c\n+Subproject commit cb28dee95e5e50b793e6ba9291c5d1568d3ad72e"}, {"sha": "6e57e64501f61873ab80cb78a07180a22751a5d6", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1 +1 @@\n-Subproject commit 25854752549d44d76fbd7650e17cb4f167a0b8fb\n+Subproject commit 6e57e64501f61873ab80cb78a07180a22751a5d6"}, {"sha": "56a13c082ee90736c08d6abdcd90462517b703d3", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1 +1 @@\n-Subproject commit 25391dba46262f882fa846beefaff54a966a8fa5\n+Subproject commit 56a13c082ee90736c08d6abdcd90462517b703d3"}, {"sha": "7762e8f8d4fb181fac97fd8c406b453f4c64b92d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -16,6 +16,16 @@\n \n #[macro_use]\n extern crate lazy_static;\n+#[macro_use]\n+extern crate tracing;\n+\n+// N.B. these need `extern crate` even in 2018 edition\n+// because they're loaded implicitly from the sysroot.\n+// The reason they're loaded from the sysroot is because\n+// the rustdoc artifacts aren't stored in rustc's cargo target directory.\n+// So if `rustc` was specified in Cargo.toml, this would spuriously rebuild crates.\n+//\n+// Dependencies listed in Cargo.toml do not need `extern crate`.\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n@@ -42,8 +52,6 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n extern crate test as testing;\n-#[macro_use]\n-extern crate tracing;\n \n use std::default::Default;\n use std::env;"}, {"sha": "78af9f9b8561a646ef1af4a7d2cbcf3b4e8a17bd", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -8,7 +8,7 @@ use crate::clean;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n+use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n use rustc_session::lint;\n \n pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n@@ -48,15 +48,11 @@ pub(crate) struct Tests {\n     pub(crate) found_tests: usize,\n }\n \n-impl Tests {\n-    pub(crate) fn new() -> Tests {\n-        Tests { found_tests: 0 }\n-    }\n-}\n-\n impl crate::doctest::Tester for Tests {\n-    fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-        self.found_tests += 1;\n+    fn add_test(&mut self, _: String, config: LangString, _: usize) {\n+        if config.rust && config.ignore == Ignore::None {\n+            self.found_tests += 1;\n+        }\n     }\n }\n \n@@ -85,7 +81,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         }\n     };\n \n-    let mut tests = Tests::new();\n+    let mut tests = Tests { found_tests: 0 };\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n "}, {"sha": "8188740f8739bde325aea289b9119bcac222c35a", "filename": "src/test/rustdoc-ui/coverage/doc-examples.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -1,7 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...tdoc-ui/coverage/doc-examples.rs |          4 |     100.0% |          2 |      50.0% |\n+| ...tdoc-ui/coverage/doc-examples.rs |          4 |     100.0% |          1 |      25.0% |\n +-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          4 |     100.0% |          2 |      50.0% |\n+| Total                               |          4 |     100.0% |          1 |      25.0% |\n +-------------------------------------+------------+------------+------------+------------+"}, {"sha": "379fa45f9fa3e9651086ba35c202f537c6b229ed", "filename": "src/test/rustdoc-ui/private-doc-test.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![deny(private_doc_tests)]\n+\n+mod foo {\n+    /// private doc test\n+    ///\n+    /// ```ignore (used for testing ignored doc tests)\n+    /// assert!(false);\n+    /// ```\n+    fn bar() {}\n+}"}, {"sha": "07822f86f524b621e6c60f28ef5de0d35a88486e", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -4,15 +4,15 @@ error: generic parameters must not be used inside of non trivial constant values\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n-   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+   = note: type parameters are currently not permitted in anonymous constants\n \n error: generic parameters must not be used inside of non trivial constant values\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n-   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+   = note: type parameters are currently not permitted in anonymous constants\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "68f1733decb93e03d1a455db3cae59714d522a8c", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -4,7 +4,7 @@ error: generic parameters must not be used inside of non trivial constant values\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n    |                              ^^^^^^^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n    |\n-   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+   = note: type parameters are currently not permitted in anonymous constants\n \n error: aborting due to previous error\n "}, {"sha": "089937e66ca06bea2e3ff116bfebb0917b01f843", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-76701-ty-param-in-const.rs:6:21\n+   |\n+LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-76701-ty-param-in-const.rs:12:37\n+   |\n+LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n+   |                                     ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a39495e0b2db016bcf689b6683814ad17b0aec2c", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n+   |\n+LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n+   |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n+   |\n+LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n+   |                                          ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9252b592360d32888db7a4a40e01a267aa89e3d6", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -0,0 +1,18 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    todo!()\n+}\n+\n+fn const_param<const N: usize>() -> [u8; N + 1] {\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "edb77a87430611c09c59161cba91d0a556f12f36", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -4,7 +4,7 @@ error: generic parameters must not be used inside of non trivial constant values\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n    |\n-   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+   = note: type parameters are currently not permitted in anonymous constants\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "e545ae8571f67d7ee7780bd20ddea1a02629f093", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -12,7 +12,7 @@ error: generic parameters must not be used inside of non trivial constant values\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n-   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+   = note: type parameters are currently not permitted in anonymous constants\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "f3b19109a7c80e14cd49faf608ae1cb7966f8802", "filename": "src/test/ui/const-generics/type-dependent/issue-61936.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285fc7d704fcdd7b2a37d475d04d5d955490e000/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs?ref=285fc7d704fcdd7b2a37d475d04d5d955490e000", "patch": "@@ -5,21 +5,21 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n trait SliceExt<T: Clone> {\n-    fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N>;\n+    fn array_windows_example<'a, const N: usize>(&'a self) -> ArrayWindowsExample<'a, T, N>;\n }\n \n impl <T: Clone> SliceExt<T> for [T] {\n-   fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N> {\n-       ArrayWindows{ idx: 0, slice: &self }\n+   fn array_windows_example<'a, const N: usize>(&'a self) -> ArrayWindowsExample<'a, T, N> {\n+       ArrayWindowsExample{ idx: 0, slice: &self }\n    }\n }\n \n-struct ArrayWindows<'a, T, const N: usize> {\n+struct ArrayWindowsExample<'a, T, const N: usize> {\n     slice: &'a [T],\n     idx: usize,\n }\n \n-impl <'a, T: Clone, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+impl <'a, T: Clone, const N: usize> Iterator for ArrayWindowsExample<'a, T, N> {\n     type Item = [T; N];\n     fn next(&mut self) -> Option<Self::Item> {\n         // Note: this is unsound for some `T` and not meant as an example\n@@ -45,7 +45,7 @@ const FOUR: usize = 4;\n fn main() {\n     let v: Vec<usize> = vec![0; 100];\n \n-    for array in v.as_slice().array_windows::<FOUR>() {\n+    for array in v.as_slice().array_windows_example::<FOUR>() {\n         assert_eq!(array, [0, 0, 0, 0])\n     }\n }"}]}