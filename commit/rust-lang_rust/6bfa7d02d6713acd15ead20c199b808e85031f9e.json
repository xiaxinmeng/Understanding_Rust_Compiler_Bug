{"sha": "6bfa7d02d6713acd15ead20c199b808e85031f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZmE3ZDAyZDY3MTNhY2QxNWVhZDIwYzE5OWI4MDhlODUwMzFmOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T23:01:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T23:01:37Z"}, "message": "Auto merge of #49058 - withoutboats:pin, r=cramertj\n\nPin, Unpin, PinBox\n\nImplementing rust-lang/rfcs#2349 (do not merge until RFC is merged)\n\n@bors r? @cramertj", "tree": {"sha": "314b54e459b791bac4983db47dbdc87da55e19eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/314b54e459b791bac4983db47dbdc87da55e19eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e", "html_url": "https://github.com/rust-lang/rust/commit/6bfa7d02d6713acd15ead20c199b808e85031f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04b88d1941644df01fa5e31dd43e0f57c13d938", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04b88d1941644df01fa5e31dd43e0f57c13d938", "html_url": "https://github.com/rust-lang/rust/commit/a04b88d1941644df01fa5e31dd43e0f57c13d938"}, {"sha": "540021ff5d4771d3dfb8ce8ea5346a0ff2c1d060", "url": "https://api.github.com/repos/rust-lang/rust/commits/540021ff5d4771d3dfb8ce8ea5346a0ff2c1d060", "html_url": "https://github.com/rust-lang/rust/commit/540021ff5d4771d3dfb8ce8ea5346a0ff2c1d060"}], "stats": {"total": 226, "additions": 222, "deletions": 4}, "files": [{"sha": "abe2071973bc84a7f85de432794b0668531d84bf", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 99, "deletions": 2, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6bfa7d02d6713acd15ead20c199b808e85031f9e", "patch": "@@ -64,8 +64,8 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash, Hasher};\n use core::iter::FusedIterator;\n-use core::marker::{self, Unsize};\n-use core::mem;\n+use core::marker::{self, Unpin, Unsize};\n+use core::mem::{self, Pin};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, NonNull, Unique};\n@@ -896,3 +896,100 @@ impl<T> Generator for Box<T>\n         (**self).resume()\n     }\n }\n+\n+/// A pinned, heap allocated reference.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[fundamental]\n+pub struct PinBox<T: ?Sized> {\n+    inner: Box<T>,\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T> PinBox<T> {\n+    /// Allocate memory on the heap, move the data into it and pin it.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn new(data: T) -> PinBox<T> {\n+        PinBox { inner: Box::new(data) }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> PinBox<T> {\n+    /// Get a pinned reference to the data in this PinBox.\n+    pub fn as_pin<'a>(&'a mut self) -> Pin<'a, T> {\n+        unsafe { Pin::new_unchecked(&mut *self.inner) }\n+    }\n+\n+    /// Get a mutable reference to the data inside this PinBox.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of this reference.\n+    pub unsafe fn get_mut<'a>(this: &'a mut PinBox<T>) -> &'a mut T {\n+        &mut *this.inner\n+    }\n+\n+    /// Convert this PinBox into an unpinned Box.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of the box.\n+    pub unsafe fn unpin(this: PinBox<T>) -> Box<T> {\n+        this.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> From<Box<T>> for PinBox<T> {\n+    fn from(boxed: Box<T>) -> PinBox<T> {\n+        PinBox { inner: boxed }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: Unpin + ?Sized> From<PinBox<T>> for Box<T> {\n+    fn from(pinned: PinBox<T>) -> Box<T> {\n+        pinned.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Deref for PinBox<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: Unpin + ?Sized> DerefMut for PinBox<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut *self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: fmt::Display + ?Sized> fmt::Display for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: fmt::Debug + ?Sized> fmt::Debug for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // It's not possible to extract the inner Uniq directly from the Box,\n+        // instead we cast it to a *const which aliases the Unique\n+        let ptr: *const T = &*self.inner;\n+        fmt::Pointer::fmt(&ptr, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}"}, {"sha": "04de5c95bee2b946970a347b835646500e611b01", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6bfa7d02d6713acd15ead20c199b808e85031f9e", "patch": "@@ -105,6 +105,7 @@\n #![feature(offset_to)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n+#![feature(pin)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(ptr_internals)]"}, {"sha": "f8a33961811c0ee3e9ac28bac3d6e16e265c0ab0", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6bfa7d02d6713acd15ead20c199b808e85031f9e", "patch": "@@ -578,3 +578,13 @@ unsafe impl<T: ?Sized> Freeze for *const T {}\n unsafe impl<T: ?Sized> Freeze for *mut T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n+\n+/// Types which can be moved out of a `Pin`.\n+///\n+/// The `Unpin` trait is used to control the behavior of the [`Pin`] type. If a\n+/// type implements `Unpin`, it is safe to move a value of that type out of the\n+/// `Pin` pointer.\n+///\n+/// This trait is automatically implemented for almost every type.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+pub unsafe auto trait Unpin {}"}, {"sha": "b2467c948b4b156506dabb8c771e73736e6569d0", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6bfa7d02d6713acd15ead20c199b808e85031f9e", "patch": "@@ -20,9 +20,9 @@ use cmp;\n use fmt;\n use hash;\n use intrinsics;\n-use marker::{Copy, PhantomData, Sized};\n+use marker::{Copy, PhantomData, Sized, Unpin, Unsize};\n use ptr;\n-use ops::{Deref, DerefMut};\n+use ops::{Deref, DerefMut, CoerceUnsized};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n@@ -1105,3 +1105,111 @@ impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n pub unsafe fn unreachable() -> ! {\n     intrinsics::unreachable()\n }\n+\n+/// A pinned reference.\n+///\n+/// A pinned reference is a lot like a mutable reference, except that it is not\n+/// safe to move a value out of a pinned reference unless the type of that\n+/// value implements the `Unpin` trait.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[fundamental]\n+pub struct Pin<'a, T: ?Sized + 'a> {\n+    inner: &'a mut T,\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unpin> Pin<'a, T> {\n+    /// Construct a new `Pin` around a reference to some data of a type that\n+    /// implements `Unpin`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn new(reference: &'a mut T) -> Pin<'a, T> {\n+        Pin { inner: reference }\n+    }\n+}\n+\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> Pin<'a, T> {\n+    /// Construct a new `Pin` around a reference to some data of a type that\n+    /// may or may not implement `Unpin`.\n+    ///\n+    /// This constructor is unsafe because we do not know what will happen with\n+    /// that data after the reference ends. If you cannot guarantee that the\n+    /// data will never move again, calling this constructor is invalid.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn new_unchecked(reference: &'a mut T) -> Pin<'a, T> {\n+        Pin { inner: reference }\n+    }\n+\n+    /// Borrow a Pin for a shorter lifetime than it already has.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn borrow<'b>(this: &'b mut Pin<'a, T>) -> Pin<'b, T> {\n+        Pin { inner: this.inner }\n+    }\n+\n+    /// Get a mutable reference to the data inside of this `Pin`.\n+    ///\n+    /// This function is unsafe. You must guarantee that you will never move\n+    /// the data out of the mutable reference you receive when you call this\n+    /// function.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn get_mut<'b>(this: &'b mut Pin<'a, T>) -> &'b mut T {\n+        this.inner\n+    }\n+\n+    /// Construct a new pin by mapping the interior value.\n+    ///\n+    /// For example, if you  wanted to get a `Pin` of a field of something, you\n+    /// could use this to get access to that field in one line of code.\n+    ///\n+    /// This function is unsafe. You must guarantee that the data you return\n+    /// will not move so long as the argument value does not move (for example,\n+    /// because it is one of the fields of that value), and also that you do\n+    /// not move out of the argument you receive to the interior function.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn map<'b, U, F>(this: &'b mut Pin<'a, T>, f: F) -> Pin<'b, U> where\n+        F: FnOnce(&mut T) -> &mut U\n+    {\n+        Pin { inner: f(this.inner) }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> Deref for Pin<'a, T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unpin> DerefMut for Pin<'a, T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for Pin<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&**self, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: fmt::Display + ?Sized> fmt::Display for Pin<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&**self, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> fmt::Pointer for Pin<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Pointer::fmt(&(&*self.inner as *const T), f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Pin<'a, U>> for Pin<'a, T> {}"}, {"sha": "daa91c3e12bb84edc9147536ee43b9ba744e5436", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfa7d02d6713acd15ead20c199b808e85031f9e/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=6bfa7d02d6713acd15ead20c199b808e85031f9e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test\n+\n pub struct Inner<T> {\n     field: T,\n }"}]}