{"sha": "2cb0b8582ebbf9784db9cec06fff517badbf4553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjBiODU4MmViYmY5Nzg0ZGI5Y2VjMDZmZmY1MTdiYWRiZjQ1NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T19:54:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T19:54:57Z"}, "message": "Auto merge of #69833 - Centril:rollup-mh74yue, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #69120 (Don't give invalid suggestion on desugared span.)\n - #69326 (mir-interpret: add method to read wide strings from Memory)\n - #69608 (Expose target libdir information via print command)\n - #69734 (Change DIBuilderCreateEnumerator signature to match LLVM 9)\n - #69800 (Compile address sanitizer test with debuginfo)\n - #69807 (Cleanup E0391 explanation)\n - #69820 (clean up E0392 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e9d43ec6f39de515bf629881b438fcd8db31b0af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d43ec6f39de515bf629881b438fcd8db31b0af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb0b8582ebbf9784db9cec06fff517badbf4553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0b8582ebbf9784db9cec06fff517badbf4553", "html_url": "https://github.com/rust-lang/rust/commit/2cb0b8582ebbf9784db9cec06fff517badbf4553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0b8582ebbf9784db9cec06fff517badbf4553/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564758c4c329e89722454dd2fbb35f1ac0b8b47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/564758c4c329e89722454dd2fbb35f1ac0b8b47c", "html_url": "https://github.com/rust-lang/rust/commit/564758c4c329e89722454dd2fbb35f1ac0b8b47c"}, {"sha": "c934c94212755eee25e86d9d49fb057073a28b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c934c94212755eee25e86d9d49fb057073a28b91", "html_url": "https://github.com/rust-lang/rust/commit/c934c94212755eee25e86d9d49fb057073a28b91"}], "stats": {"total": 224, "additions": 152, "deletions": 72}, "files": [{"sha": "7a7838d965bc77f5255c184fcbf03698a9991510", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -146,6 +146,7 @@ The valid types of print values are:\n - `crate-name` \u2014 The name of the crate.\n - `file-names` \u2014 The names of the files created by the `link` emit kind.\n - `sysroot` \u2014 Path to the sysroot.\n+- `target-libdir` - Path to the target libdir.\n - `cfg` \u2014 List of cfg values. See [conditional compilation] for more\n   information about cfg values.\n - `target-list` \u2014 List of known targets. The target may be selected with the"}, {"sha": "9dc0b24cd2f3fccbd82db3ca548ad06c61471921", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -612,6 +612,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_u8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_u16(self) -> InterpResult<'tcx, u16> {\n+        self.not_undef()?.to_u16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_u32(self) -> InterpResult<'tcx, u32> {\n         self.not_undef()?.to_u32()\n@@ -632,6 +637,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_i8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_i16(self) -> InterpResult<'tcx, i16> {\n+        self.not_undef()?.to_i16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_i32(self) -> InterpResult<'tcx, i32> {\n         self.not_undef()?.to_i32()"}, {"sha": "19bd0b6f7e674f9b280c19ea984a55382810af33", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1779,13 +1779,20 @@ fn prepare_enum_metadata(\n                 .discriminants(cx.tcx)\n                 .zip(&def.variants)\n                 .map(|((_, discr), v)| {\n-                    let name = SmallCStr::new(&v.ident.as_str());\n+                    let name = v.ident.as_str();\n+                    let is_unsigned = match discr.ty.kind {\n+                        ty::Int(_) => false,\n+                        ty::Uint(_) => true,\n+                        _ => bug!(\"non integer discriminant\"),\n+                    };\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n-                            name.as_ptr(),\n+                            name.as_ptr().cast(),\n+                            name.len(),\n                             // FIXME: what if enumeration has i128 discriminant?\n-                            discr.val as u64,\n+                            discr.val as i64,\n+                            is_unsigned,\n                         ))\n                     }\n                 })\n@@ -1794,13 +1801,15 @@ fn prepare_enum_metadata(\n                 .as_generator()\n                 .variant_range(enum_def_id, cx.tcx)\n                 .map(|variant_index| {\n-                    let name = SmallCStr::new(&substs.as_generator().variant_name(variant_index));\n+                    let name = substs.as_generator().variant_name(variant_index);\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n-                            name.as_ptr(),\n-                            // FIXME: what if enumeration has i128 discriminant?\n-                            variant_index.as_usize() as u64,\n+                            name.as_ptr().cast(),\n+                            name.len(),\n+                            // Generators use u32 as discriminant type.\n+                            variant_index.as_u32().into(),\n+                            true, // IsUnsigned\n                         ))\n                     }\n                 })"}, {"sha": "8b796e0423b1325463d9b43cc629e569bb528115", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1776,7 +1776,9 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateEnumerator(\n         Builder: &DIBuilder<'a>,\n         Name: *const c_char,\n-        Val: u64,\n+        NameLen: size_t,\n+        Value: i64,\n+        IsUnsigned: bool,\n     ) -> &'a DIEnumerator;\n \n     pub fn LLVMRustDIBuilderCreateEnumerationType("}, {"sha": "e6c98ad27e8ef7b39ccf6ae620e377239e981399", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -680,6 +680,10 @@ impl RustcDefaultCalls {\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 }\n                 Sysroot => println!(\"{}\", sess.sysroot.display()),\n+                TargetLibdir => println!(\n+                    \"{}\",\n+                    sess.target_tlib_path.as_ref().unwrap_or(&sess.host_tlib_path).dir.display()\n+                ),\n                 TargetSpec => println!(\"{}\", sess.target.target.to_json().pretty()),\n                 FileNames | CrateName => {\n                     let input = input.unwrap_or_else(|| {"}, {"sha": "dff50ccaa0b773bb36ae256315d73e2c67f707af", "filename": "src/librustc_error_codes/error_codes/E0391.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_error_codes%2Ferror_codes%2FE0391.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_error_codes%2Ferror_codes%2FE0391.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0391.md?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1,7 +1,6 @@\n-This error indicates that some types or traits depend on each other\n-and therefore cannot be constructed.\n+A type dependency cycle has been encountered.\n \n-The following example contains a circular dependency between two traits:\n+Erroneous code example:\n \n ```compile_fail,E0391\n trait FirstTrait : SecondTrait {\n@@ -12,3 +11,6 @@ trait SecondTrait : FirstTrait {\n \n }\n ```\n+\n+The previous example contains a circular dependency between two traits:\n+`FirstTrait` depends on `SecondTrait` which itself depends on `FirstTrait`."}, {"sha": "f373d89456dd4f6434ce9525080d60f84dfecddb", "filename": "src/librustc_error_codes/error_codes/E0392.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_error_codes%2Ferror_codes%2FE0392.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_error_codes%2Ferror_codes%2FE0392.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0392.md?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1,5 +1,6 @@\n-This error indicates that a type or lifetime parameter has been declared\n-but not actually used. Here is an example that demonstrates the error:\n+A type or lifetime parameter has been declared but is not actually used.\n+\n+Erroneous code example:\n \n ```compile_fail,E0392\n enum Foo<T> {"}, {"sha": "76475e709586877e97d8a59bcab56a1cc3cd91b6", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -329,58 +329,60 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if self.body.local_decls[local].is_user_variable() =>\n             {\n                 let local_decl = &self.body.local_decls[local];\n-                let suggestion = match local_decl.local_info {\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(_))) => {\n-                        Some(suggest_ampmut_self(self.infcx.tcx, local_decl))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByValue(_),\n-                            opt_ty_info,\n-                            ..\n-                        },\n-                    ))) => Some(suggest_ampmut(\n-                        self.infcx.tcx,\n-                        self.body,\n-                        local,\n-                        local_decl,\n-                        opt_ty_info,\n-                    )),\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByReference(_),\n-                            ..\n-                        },\n-                    ))) => {\n-                        let pattern_span = local_decl.source_info.span;\n-                        suggest_ref_mut(self.infcx.tcx, pattern_span)\n-                            .map(|replacement| (pattern_span, replacement))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n-\n-                    _ => unreachable!(),\n-                };\n \n                 let (pointer_sigil, pointer_desc) = if local_decl.ty.is_region_ptr() {\n                     (\"&\", \"reference\")\n                 } else {\n                     (\"*const\", \"pointer\")\n                 };\n \n-                if let Some((err_help_span, suggested_code)) = suggestion {\n-                    err.span_suggestion(\n-                        err_help_span,\n-                        &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n-                        suggested_code,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n+                        let suggestion = match local_decl.local_info {\n+                            LocalInfo::User(ClearCrossCrate::Set(\n+                                mir::BindingForm::ImplicitSelf(_),\n+                            )) => Some(suggest_ampmut_self(self.infcx.tcx, local_decl)),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByValue(_),\n+                                    opt_ty_info,\n+                                    ..\n+                                },\n+                            ))) => Some(suggest_ampmut(\n+                                self.infcx.tcx,\n+                                self.body,\n+                                local,\n+                                local_decl,\n+                                opt_ty_info,\n+                            )),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByReference(_),\n+                                    ..\n+                                },\n+                            ))) => {\n+                                let pattern_span = local_decl.source_info.span;\n+                                suggest_ref_mut(self.infcx.tcx, pattern_span)\n+                                    .map(|replacement| (pattern_span, replacement))\n+                            }\n+\n+                            LocalInfo::User(ClearCrossCrate::Clear) => {\n+                                bug!(\"saw cleared local state\")\n+                            }\n+\n+                            _ => unreachable!(),\n+                        };\n+\n+                        if let Some((err_help_span, suggested_code)) = suggestion {\n+                            err.span_suggestion(\n+                                err_help_span,\n+                                &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n+                                suggested_code,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                         err.span_label(\n                             span,\n                             format!("}, {"sha": "82a467c7ba92c0e71842ee98246c2b3916adec08", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -798,6 +798,33 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n     }\n \n+    /// Reads a 0x0000-terminated u16-sequence from memory. Returns them as a Vec<u16>.\n+    /// Terminator 0x0000 is not included in the returned Vec<u16>.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn read_wide_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, Vec<u16>> {\n+        let size_2bytes = Size::from_bytes(2);\n+        let align_2bytes = Align::from_bytes(2).unwrap();\n+        // We need to read at least 2 bytes, so we *need* a ptr.\n+        let mut ptr = self.force_ptr(ptr)?;\n+        let allocation = self.get_raw(ptr.alloc_id)?;\n+        let mut u16_seq = Vec::new();\n+\n+        loop {\n+            ptr = self\n+                .check_ptr_access(ptr.into(), size_2bytes, align_2bytes)?\n+                .expect(\"cannot be a ZST\");\n+            let single_u16 = allocation.read_scalar(self, ptr, size_2bytes)?.to_u16()?;\n+            if single_u16 != 0x0000 {\n+                u16_seq.push(single_u16);\n+                ptr = ptr.offset(size_2bytes, self)?;\n+            } else {\n+                break;\n+            }\n+        }\n+        Ok(u16_seq)\n+    }\n+\n     /// Writes the given stream of bytes into memory.\n     ///\n     /// Performs appropriate bounds checks."}, {"sha": "c273e7fdbf916432e03439a4529cf98ccc6128a5", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -391,6 +391,7 @@ impl ExternEntry {\n pub enum PrintRequest {\n     FileNames,\n     Sysroot,\n+    TargetLibdir,\n     CrateName,\n     Cfg,\n     TargetList,\n@@ -912,7 +913,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"\",\n             \"print\",\n             \"Compiler information to print on stdout\",\n-            \"[crate-name|file-names|sysroot|cfg|target-list|\\\n+            \"[crate-name|file-names|sysroot|target-libdir|cfg|target-list|\\\n              target-cpus|target-features|relocation-models|\\\n              code-models|tls-models|target-spec-json|native-static-libs]\",\n         ),\n@@ -1344,6 +1345,7 @@ fn collect_print_requests(\n         \"crate-name\" => PrintRequest::CrateName,\n         \"file-names\" => PrintRequest::FileNames,\n         \"sysroot\" => PrintRequest::Sysroot,\n+        \"target-libdir\" => PrintRequest::TargetLibdir,\n         \"cfg\" => PrintRequest::Cfg,\n         \"target-list\" => PrintRequest::TargetList,\n         \"target-cpus\" => PrintRequest::TargetCPUs,"}, {"sha": "0e430d3881e60dc277ac3e64ba72cf37bd886dc4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -891,10 +891,10 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n       unwrap(InsertAtEnd)));\n }\n \n-extern \"C\" LLVMMetadataRef\n-LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n-                                  const char *Name, uint64_t Val) {\n-  return wrap(Builder->createEnumerator(Name, Val));\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n+    LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n+    int64_t Value, bool IsUnsigned) {\n+  return wrap(Builder->createEnumerator({Name, NameLen}, Value, IsUnsigned));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType("}, {"sha": "f9da987765f9cd58c60fe86a6171304aa8453738", "filename": "src/test/codegen/enum-discriminant-value.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -0,0 +1,27 @@\n+// Verify that DIEnumerator uses isUnsigned flag when appropriate.\n+//\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+#[repr(i64)]\n+pub enum I64 {\n+    I64Min = std::i64::MIN,\n+    I64Max = std::i64::MAX,\n+}\n+\n+#[repr(u64)]\n+pub enum U64 {\n+    U64Min = std::u64::MIN,\n+    U64Max = std::u64::MAX,\n+}\n+\n+fn main() {\n+    let _a = I64::I64Min;\n+    let _b = I64::I64Max;\n+    let _c = U64::U64Min;\n+    let _d = U64::U64Max;\n+}\n+\n+// CHECK: !DIEnumerator(name: \"I64Min\", value: -9223372036854775808)\n+// CHECK: !DIEnumerator(name: \"I64Max\", value: 9223372036854775807)\n+// CHECK: !DIEnumerator(name: \"U64Min\", value: 0, isUnsigned: true)\n+// CHECK: !DIEnumerator(name: \"U64Max\", value: 18446744073709551615, isUnsigned: true)"}, {"sha": "d80467c7fa88756abf962371b63e457a2c206e99", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n-   |                   -^^^^^^^^^\n-   |                   ||\n-   |                   |cannot borrow as mutable through `&` reference\n-   |                   help: consider changing this to be a mutable reference: `&mut ref mut s`\n+   |                    ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error: aborting due to previous error\n "}, {"sha": "88773def8b7c840e44fab37dc429a407f0c0fa8f", "filename": "src/test/ui/nll/dont-print-desugared.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared.rs:4:10\n    |\n LL |     for &ref mut x in s {}\n-   |         -^^^^^^^^^\n-   |         ||\n-   |         |cannot borrow as mutable through `&` reference\n-   |         help: consider changing this to be a mutable reference: `&mut ref mut x`\n+   |          ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/dont-print-desugared.rs:17:16"}, {"sha": "f8650cd86d51e8bf80942d0e32d21e0ba5cba970", "filename": "src/test/ui/sanitize/address.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1,16 +1,15 @@\n // needs-sanitizer-support\n // only-x86_64\n //\n-// compile-flags: -Z sanitizer=address -O\n+// compile-flags: -Z sanitizer=address -O -g\n //\n // run-fail\n // error-pattern: AddressSanitizer: stack-buffer-overflow\n-// error-pattern: 'xs' <== Memory access at offset\n+// error-pattern: 'xs' (line 15) <== Memory access at offset\n \n #![feature(test)]\n \n use std::hint::black_box;\n-use std::mem;\n \n fn main() {\n     let xs = [0, 1, 2, 3];"}]}