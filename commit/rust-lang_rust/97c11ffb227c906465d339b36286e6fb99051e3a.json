{"sha": "97c11ffb227c906465d339b36286e6fb99051e3a", "node_id": "C_kwDOAAsO6NoAKDk3YzExZmZiMjI3YzkwNjQ2NWQzMzliMzYyODZlNmZiOTkwNTFlM2E", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-22T23:48:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T03:35:14Z"}, "message": "Strongly prefer alias and param-env bounds", "tree": {"sha": "a236b39746ed9ee5c45ae2a0c541e9d3cf362f8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a236b39746ed9ee5c45ae2a0c541e9d3cf362f8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c11ffb227c906465d339b36286e6fb99051e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c11ffb227c906465d339b36286e6fb99051e3a", "html_url": "https://github.com/rust-lang/rust/commit/97c11ffb227c906465d339b36286e6fb99051e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c11ffb227c906465d339b36286e6fb99051e3a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "html_url": "https://github.com/rust-lang/rust/commit/a2d806d56d3c3390b6874cb1eec90ca3c7191fda"}], "stats": {"total": 110, "additions": 78, "deletions": 32}, "files": [{"sha": "f32ff0442a4c51bb73b7feb5a34039ab1c86587a", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -2,7 +2,6 @@\n \n use super::search_graph::OverflowHandler;\n use super::{EvalCtxt, SolverMode};\n-use crate::solve::CanonicalResponseExt;\n use crate::traits::coherence;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::DefId;\n@@ -744,13 +743,18 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             SolverMode::Normal => {\n                 let param_env_responses = candidates\n                     .iter()\n-                    .filter(|c| matches!(c.source, CandidateSource::ParamEnv(_)))\n+                    .filter(|c| {\n+                        matches!(\n+                            c.source,\n+                            CandidateSource::ParamEnv(_) | CandidateSource::AliasBound\n+                        )\n+                    })\n                     .map(|c| c.result)\n                     .collect::<Vec<_>>();\n                 if let Some(result) = self.try_merge_responses(&param_env_responses) {\n-                    if result.has_only_region_constraints() {\n-                        return Ok(result);\n-                    }\n+                    // We strongly prefer alias and param-env bounds here, even if they affect inference.\n+                    // See https://github.com/rust-lang/trait-system-refactor-initiative/issues/11.\n+                    return Ok(result);\n                 }\n             }\n         }"}, {"sha": "b3af7be7950c51b0517600a6fee159509b02d70d", "filename": "tests/ui/dyn-star/param-env-infer.current.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(dyn_star, pointer_like_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0282]: type annotations needed\n-  --> $DIR/param-env-infer.rs:12:10\n+  --> $DIR/param-env-infer.rs:13:10\n    |\n LL |     t as _\n    |          ^ cannot infer type"}, {"sha": "64d76bb04b1cbafd4db364e935863e62fa10af97", "filename": "tests/ui/dyn-star/param-env-infer.next.stderr", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -7,12 +7,67 @@ LL | #![feature(dyn_star, pointer_like_trait)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0282]: type annotations needed\n-  --> $DIR/param-env-infer.rs:12:10\n+error[E0391]: cycle detected when computing type of `make_dyn_star::{opaque#0}`\n+  --> $DIR/param-env-infer.rs:11:60\n    |\n-LL |     t as _\n-   |          ^ cannot infer type\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires borrow-checking `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires promoting constants in MIR for `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires preparing `make_dyn_star` for borrow checking...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires match-checking `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building THIR for `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `make_dyn_star`...\n+  --> $DIR/param-env-infer.rs:11:1\n+   |\n+LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing layout of `make_dyn_star::{opaque#0}`...\n+   = note: ...which requires normalizing `make_dyn_star::{opaque#0}`...\n+   = note: ...which again requires computing type of `make_dyn_star::{opaque#0}`, completing the cycle\n+note: cycle used when checking item types in top-level module\n+  --> $DIR/param-env-infer.rs:5:1\n+   |\n+LL | / #![feature(dyn_star, pointer_like_trait)]\n+LL | |\n+LL | |\n+LL | | use std::fmt::Debug;\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "1fb16d768536920d5fc898e6f59e38b2cccddf31", "filename": "tests/ui/dyn-star/param-env-infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -9,8 +9,9 @@ use std::fmt::Debug;\n use std::marker::PointerLike;\n \n fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+    //[next]~^ ERROR cycle detected when computing type of `make_dyn_star::{opaque#0}`\n     t as _\n-    //~^ ERROR type annotations needed\n+    //[current]~^ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "3c7fc7403b119aabfbeee70383fc0478cf5a9790", "filename": "tests/ui/traits/new-solver/alias_eq_dont_use_normalizes_to_if_substs_eq.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Ztrait-solver=next\n \n+// check-pass\n+// (should not pass, should be turned into a coherence-only test)\n+\n // check that when computing `alias-eq(<() as Foo<u16, T>>::Assoc, <() as Foo<?0, T>>::Assoc)`\n // we do not infer `?0 = u8` via the `for<STOP> (): Foo<u8, STOP>` impl or `?0 = u16` by\n // relating substs as either could be a valid solution.\n@@ -36,7 +39,6 @@ where\n {\n     // `<() as Foo<u16, STOP>>::Assoc == <() as Foo<_, STOP>>::Assoc`\n     let _: <() as Foo<u16, T>>::Assoc = output::<_, T>();\n-    //~^ error: type annotations needed\n \n     // let _: <() as Foo<u16, T>>::Assoc = output::<u8, T>(); // OK\n     // let _: <() as Foo<u16, T>>::Assoc = output::<u16, T>(); // OK"}, {"sha": "a6712332c37c5e1abdf48b0eb325105fa7db981d", "filename": "tests/ui/traits/new-solver/alias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr?ref=a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "patch": "@@ -1,9 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/alias_eq_dont_use_normalizes_to_if_substs_eq.rs:38:41\n-   |\n-LL |     let _: <() as Foo<u16, T>>::Assoc = output::<_, T>();\n-   |                                         ^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `output`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "b036411be838e3aa4488a2693ad08737a4c7282a", "filename": "tests/ui/traits/new-solver/alias_eq_substs_eq_not_intercrate.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c11ffb227c906465d339b36286e6fb99051e3a/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs?ref=97c11ffb227c906465d339b36286e6fb99051e3a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Ztrait-solver=next\n \n+// check-pass\n+// (should not pass, should be turned into a coherence-only test)\n+\n // check that a `alias-eq(<?0 as TraitB>::Assoc, <T as TraitB>::Assoc)` goal fails.\n \n // FIXME(deferred_projection_equality): add a test that this is true during coherence\n@@ -14,7 +17,6 @@ fn needs_a<T: TraitB>() -> T::Assoc {\n \n fn bar<T: TraitB>() {\n     let _: <_ as TraitB>::Assoc = needs_a::<T>();\n-    //~^ error: type annotations needed\n }\n \n fn main() {}"}, {"sha": "d063d8fce111cf08d1053c5f22db38b268d48a9a", "filename": "tests/ui/traits/new-solver/alias_eq_substs_eq_not_intercrate.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2d806d56d3c3390b6874cb1eec90ca3c7191fda/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr?ref=a2d806d56d3c3390b6874cb1eec90ca3c7191fda", "patch": "@@ -1,9 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/alias_eq_substs_eq_not_intercrate.rs:16:12\n-   |\n-LL |     let _: <_ as TraitB>::Assoc = needs_a::<T>();\n-   |            ^^^^^^^^^^^^^^^^^^^^ cannot infer type for associated type `<_ as TraitB>::Assoc`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}]}