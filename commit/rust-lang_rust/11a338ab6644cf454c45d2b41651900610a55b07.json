{"sha": "11a338ab6644cf454c45d2b41651900610a55b07", "node_id": "C_kwDOAAsO6NoAKDExYTMzOGFiNjY0NGNmNDU0YzQ1ZDJiNDE2NTE5MDA2MTBhNTViMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T08:06:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T08:06:03Z"}, "message": "Auto merge of #106139 - cjgillot:mir-inline-location, r=eholk\n\nGive the correct track-caller location with MIR inlining.\n\nFixes https://github.com/rust-lang/rust/issues/105538", "tree": {"sha": "648b80e1deca9f72c62d397fa0373e88fcfb1c29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/648b80e1deca9f72c62d397fa0373e88fcfb1c29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a338ab6644cf454c45d2b41651900610a55b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a338ab6644cf454c45d2b41651900610a55b07", "html_url": "https://github.com/rust-lang/rust/commit/11a338ab6644cf454c45d2b41651900610a55b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a338ab6644cf454c45d2b41651900610a55b07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad83834515912c5e529e0e9fe326d5060d937cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad83834515912c5e529e0e9fe326d5060d937cf", "html_url": "https://github.com/rust-lang/rust/commit/6ad83834515912c5e529e0e9fe326d5060d937cf"}, {"sha": "edc73f97190b4ee9c47933282c416d492f089dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc73f97190b4ee9c47933282c416d492f089dab", "html_url": "https://github.com/rust-lang/rust/commit/edc73f97190b4ee9c47933282c416d492f089dab"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "8bdd965deb2098eb5b61e0b589ff6dd8e5ff7f0f", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -289,7 +289,7 @@ impl<'tcx> Inliner<'tcx> {\n     ) -> Option<CallSite<'tcx>> {\n         // Only consider direct calls to functions\n         let terminator = bb_data.terminator();\n-        if let TerminatorKind::Call { ref func, target, .. } = terminator.kind {\n+        if let TerminatorKind::Call { ref func, target, fn_span, .. } = terminator.kind {\n             let func_ty = func.ty(caller_body, self.tcx);\n             if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n                 // To resolve an instance its substs have to be fully normalized.\n@@ -302,14 +302,9 @@ impl<'tcx> Inliner<'tcx> {\n                 }\n \n                 let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n+                let source_info = SourceInfo { span: fn_span, ..terminator.source_info };\n \n-                return Some(CallSite {\n-                    callee,\n-                    fn_sig,\n-                    block: bb,\n-                    target,\n-                    source_info: terminator.source_info,\n-                });\n+                return Some(CallSite { callee, fn_sig, block: bb, target, source_info });\n             }\n         }\n "}, {"sha": "7d1443559fe53b503637cedbc156957a68c869a5", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -316,6 +316,7 @@ impl ExpnId {\n             // Stop going up the backtrace once include! is encountered\n             if expn_data.is_root()\n                 || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n+                || expn_data.kind == ExpnKind::Inlined\n             {\n                 break;\n             }"}, {"sha": "f27b64c305457a14b2da1b198d86a2b922980875", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -7,7 +7,7 @@\n       let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n       let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n       let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n-+     let mut _7: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++     let mut _7: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n       scope 1 {\n           debug _r => _1;                  // in scope 1 at $DIR/inline_generator.rs:+1:9: +1:11\n       }\n@@ -23,7 +23,7 @@\n +             }\n +         }\n +     }\n-+     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:14: 9:46\n++     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:33: 9:46\n +         debug a => _7;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n +         let mut _8: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +         let mut _9: u32;                 // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n@@ -68,16 +68,16 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_generator.rs:9:33: 9:39\n -                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n-+         _7 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         _7 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n +         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         _9 = discriminant((*_10));       // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         switchInt(move _9) -> [0: bb3, 1: bb8, 3: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageDead(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n           StorageDead(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:45: +1:46\n           StorageDead(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:46: +1:47\n           _0 = const ();                   // scope 0 at $DIR/inline_generator.rs:+0:11: +2:2"}, {"sha": "09dd35c4c68b142af5c59ecf219ebcd5ce983aa9", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -5,7 +5,7 @@\n       debug f => _1;                       // in scope 0 at $DIR/inline_shims.rs:+0:20: +0:21\n       let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline_shims.rs:+0:36: +0:44\n       let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n-+     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline_shims.rs:6:5: 6:14\n++     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline_shims.rs:6:7: 6:14\n +     }\n   \n       bb0: {"}, {"sha": "dc0c323504376c29edd7d43a6fbc65a2920f8b79", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -6,7 +6,7 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _2: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-    scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:3:5: 3:15\n+    scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:3:7: 3:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }"}, {"sha": "b6aff30149fadb32815e43ffb0e356e0756a496a", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -6,7 +6,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _2: &mut T;                  // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-    scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:8:5: 8:15\n+    scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:8:7: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "af830d2494e61f9954a2b6129366fa2698b55f93", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -5,7 +5,7 @@ fn c(_1: &[T]) -> &[T] {\n     let mut _0: &[T];                    // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:25: +0:29\n     let _2: &[T];                        // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _3: &[T];                    // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-    scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:13:5: 13:15\n+    scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:13:7: 13:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n "}, {"sha": "4f9342247d70e8c611bb124b1bdd40f4e7fb3569", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -5,7 +5,7 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _0: &T;                      // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:28: +0:30\n     let _2: &T;                          // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n-    scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:18:5: 18:15\n+    scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:18:7: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "b2706e5a436e2f02ae3084d8a75cb49b68a2c563", "filename": "src/test/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -23,7 +23,7 @@\n               debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:6:9: 6:16\n           }\n       }\n-      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:5: 14:58\n+      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:18: 14:58\n           debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           let mut _15: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL"}, {"sha": "c17d221f86a84a43f096f8cab92d58852e875cd7", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -4,9 +4,9 @@ fn num_to_digit(_1: char) -> u32 {\n     debug num => _1;                     // in scope 0 at $DIR/issue_59352.rs:+0:21: +0:24\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n     let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n-    let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+    let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n     let mut _9: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:8: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:12: 14:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _3;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -16,7 +16,7 @@ fn num_to_digit(_1: char) -> u32 {\n             debug self => _4;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:26: 14:50\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:42: 14:50\n         debug self => _2;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _7: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _8: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -26,7 +26,7 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n         StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -65,7 +65,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _9 = discriminant((*_4));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n         switchInt(move _9) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n "}, {"sha": "28b3f76c9d536805fb957bc625971530cb926684", "filename": "src/test/ui/rfc-2091-track-caller/call-chain.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a338ab6644cf454c45d2b41651900610a55b07/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs?ref=11a338ab6644cf454c45d2b41651900610a55b07", "patch": "@@ -1,10 +1,14 @@\n // run-pass\n+// revisions: default mir-opt\n+//[default] compile-flags: -Zinline-mir=no\n+//[mir-opt] compile-flags: -Zmir-opt-level=4\n \n use std::panic::Location;\n \n struct Foo;\n \n impl Foo {\n+    #[inline(always)]\n     #[track_caller]\n     fn check_loc(&self, line: u32, col: u32) -> &Self {\n         let loc = Location::caller();"}]}