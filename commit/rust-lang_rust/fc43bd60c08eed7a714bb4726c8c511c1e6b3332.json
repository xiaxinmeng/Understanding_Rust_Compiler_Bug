{"sha": "fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "node_id": "C_kwDOAAsO6NoAKGZjNDNiZDYwYzA4ZWVkN2E3MTRiYjQ3MjZjOGM1MTFjMWU2YjMzMzI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-01T09:42:16Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-07T07:50:06Z"}, "message": "revive suggestions for boxed trait objects instead of impl Trait", "tree": {"sha": "f4413c34bf183918832be80ca204ec72c8477e39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4413c34bf183918832be80ca204ec72c8477e39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "html_url": "https://github.com/rust-lang/rust/commit/fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24cf45a591481519cb0116bf2ce111ffb3e1111c", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cf45a591481519cb0116bf2ce111ffb3e1111c", "html_url": "https://github.com/rust-lang/rust/commit/24cf45a591481519cb0116bf2ce111ffb3e1111c"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "9c6896dbad70880afe0083935975b331cdd8f3fc", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, ToPredicate, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n@@ -479,7 +479,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match orig_expected {\n             Expectation::ExpectHasType(expected)\n                 if self.in_tail_expr\n-                    && self.ret_coercion.as_ref()?.borrow().merged_ty().has_opaque_types()\n+                    && self.return_type_has_opaque\n                     && self.can_coerce(outer_ty, expected) =>\n             {\n                 let obligations = self.fulfillment_cx.borrow().pending_obligations();"}, {"sha": "3c65fd998c5afe9a9dc780f501900c673f597317", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "patch": "@@ -52,6 +52,16 @@ LL | |         1u32\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn qux() -> Box<dyn std::fmt::Display> {\n+   |             ~~~~~~~                  +\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL ~         Box::new(0i32)\n+LL |     } else {\n+LL ~         Box::new(1u32)\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         1i32\n@@ -114,6 +124,15 @@ LL | |         _ => 2u32,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn dog() -> Box<dyn std::fmt::Display> {\n+   |             ~~~~~~~                  +\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL ~         0 => Box::new(0i32),\n+LL ~         1 => Box::new(1u32),\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         1 => 1i32,\n@@ -131,6 +150,16 @@ LL | |         1u32\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn apt() -> Box<dyn std::fmt::Display> {\n+   |             ~~~~~~~                  +\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL ~         Box::new(0i32)\n+LL |     } else {\n+LL ~         Box::new(1u32)\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         1i32"}, {"sha": "bc4ccbf503c125be314847c9a5e551f7d77c9f08", "filename": "src/test/ui/mismatched_types/suggest-boxed-trait-objects-instead-of-impl-trait.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.fixed?ref=fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+struct S;\n+struct Y;\n+\n+trait Trait {}\n+\n+impl Trait for S {}\n+impl Trait for Y {}\n+\n+fn baz() -> Box<dyn Trait> {\n+    if true {\n+        Box::new(S)\n+    } else {\n+        Box::new(Y) //~ ERROR `if` and `else` have incompatible types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0f609665005173590c8a5a60ef36c5d7462dcee7", "filename": "src/test/ui/mismatched_types/suggest-boxed-trait-objects-instead-of-impl-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.rs?ref=fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+struct S;\n+struct Y;\n+\n+trait Trait {}\n+\n+impl Trait for S {}\n+impl Trait for Y {}\n+\n+fn baz() -> impl Trait {\n+    if true {\n+        S\n+    } else {\n+        Y //~ ERROR `if` and `else` have incompatible types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "72b5e25ea46d1f31f736632bede8b05a39c6f70f", "filename": "src/test/ui/mismatched_types/suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc43bd60c08eed7a714bb4726c8c511c1e6b3332/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr?ref=fc43bd60c08eed7a714bb4726c8c511c1e6b3332", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/suggest-boxed-trait-objects-instead-of-impl-trait.rs:17:9\n+   |\n+LL | /     if true {\n+LL | |         S\n+   | |         - expected because of this\n+LL | |     } else {\n+LL | |         Y\n+   | |         ^ expected struct `S`, found struct `Y`\n+LL | |     }\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn baz() -> Box<dyn Trait> {\n+   |             ~~~~~~~      +\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL ~         Box::new(S)\n+LL |     } else {\n+LL ~         Box::new(Y)\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}