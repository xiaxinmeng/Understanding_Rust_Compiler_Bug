{"sha": "23c06db9c236db0f9c8ef5117fb1adefd6616c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzA2ZGI5YzIzNmRiMGY5YzhlZjUxMTdmYjFhZGVmZDY2MTZjNDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T18:02:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T18:02:56Z"}, "message": "Half of code-actions", "tree": {"sha": "8e265a79b7f8f62761c6ea2dd4fa0d6bc0c74204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e265a79b7f8f62761c6ea2dd4fa0d6bc0c74204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c06db9c236db0f9c8ef5117fb1adefd6616c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c06db9c236db0f9c8ef5117fb1adefd6616c43", "html_url": "https://github.com/rust-lang/rust/commit/23c06db9c236db0f9c8ef5117fb1adefd6616c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c06db9c236db0f9c8ef5117fb1adefd6616c43/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66be735aa98c32fb062d1c756fa9303ff2d13002", "url": "https://api.github.com/repos/rust-lang/rust/commits/66be735aa98c32fb062d1c756fa9303ff2d13002", "html_url": "https://github.com/rust-lang/rust/commit/66be735aa98c32fb062d1c756fa9303ff2d13002"}], "stats": {"total": 196, "additions": 139, "deletions": 57}, "files": [{"sha": "b502b0865768f6157a2cfee1b6863b8417a23102", "filename": "crates/server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fcaps.rs?ref=23c06db9c236db0f9c8ef5117fb1adefd6616c43", "patch": "@@ -25,7 +25,7 @@ pub const SERVER_CAPABILITIES: ServerCapabilities = ServerCapabilities {\n     document_highlight_provider: None,\n     document_symbol_provider: Some(true),\n     workspace_symbol_provider: None,\n-    code_action_provider: None,\n+    code_action_provider: Some(true),\n     code_lens_provider: None,\n     document_formatting_provider: None,\n     document_range_formatting_provider: None,"}, {"sha": "c7bea15dfc608e138efba2f6f2a3d8cd0a7e2a89", "filename": "crates/server/src/conv.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=23c06db9c236db0f9c8ef5117fb1adefd6616c43", "patch": "@@ -0,0 +1,81 @@\n+use languageserver_types::{Range, SymbolKind, Position};\n+use libeditor::{LineIndex, LineCol};\n+use libsyntax2::{SyntaxKind, TextUnit, TextRange};\n+\n+pub trait Conv {\n+    type Output;\n+    fn conv(&self) -> Self::Output;\n+}\n+\n+pub trait ConvWith {\n+    type Ctx;\n+    type Output;\n+    fn conv_with(&self, ctx: &Self::Ctx) -> Self::Output;\n+}\n+\n+impl Conv for SyntaxKind {\n+    type Output = SymbolKind;\n+\n+    fn conv(&self) -> <Self as Conv>::Output {\n+        match *self {\n+            SyntaxKind::FUNCTION => SymbolKind::Function,\n+            SyntaxKind::STRUCT => SymbolKind::Struct,\n+            SyntaxKind::ENUM => SymbolKind::Enum,\n+            SyntaxKind::TRAIT => SymbolKind::Interface,\n+            SyntaxKind::MODULE => SymbolKind::Module,\n+            SyntaxKind::TYPE_ITEM => SymbolKind::TypeParameter,\n+            SyntaxKind::STATIC_ITEM => SymbolKind::Constant,\n+            SyntaxKind::CONST_ITEM => SymbolKind::Constant,\n+            _ => SymbolKind::Variable,\n+        }\n+    }\n+}\n+\n+impl ConvWith for Position {\n+    type Ctx = LineIndex;\n+    type Output = TextUnit;\n+\n+    fn conv_with(&self, line_index: &LineIndex) -> TextUnit {\n+        // TODO: UTF-16\n+        let line_col = LineCol {\n+            line: self.line as u32,\n+            col: (self.character as u32).into(),\n+        };\n+        line_index.offset(line_col)\n+    }\n+}\n+\n+impl ConvWith for TextUnit {\n+    type Ctx = LineIndex;\n+    type Output = Position;\n+\n+    fn conv_with(&self, line_index: &LineIndex) -> Position {\n+        let line_col = line_index.line_col(*self);\n+        // TODO: UTF-16\n+        Position::new(line_col.line as u64, u32::from(line_col.col) as u64)\n+    }\n+}\n+\n+impl ConvWith for TextRange {\n+    type Ctx = LineIndex;\n+    type Output = Range;\n+\n+    fn conv_with(&self, line_index: &LineIndex) -> Range {\n+        Range::new(\n+            self.start().conv_with(line_index),\n+            self.end().conv_with(line_index),\n+        )\n+    }\n+}\n+\n+impl ConvWith for Range {\n+    type Ctx = LineIndex;\n+    type Output = TextRange;\n+\n+    fn conv_with(&self, line_index: &LineIndex) -> TextRange {\n+        TextRange::from_to(\n+            self.start.conv_with(line_index),\n+            self.end.conv_with(line_index),\n+        )\n+    }\n+}"}, {"sha": "c6db222899aeeb50946e4deb17e9878e7339d1df", "filename": "crates/server/src/handlers.rs", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fhandlers.rs?ref=23c06db9c236db0f9c8ef5117fb1adefd6616c43", "patch": "@@ -1,11 +1,15 @@\n-use languageserver_types::{Range, Position, Diagnostic, DiagnosticSeverity, Url, DocumentSymbol, SymbolKind};\n-use libsyntax2::SyntaxKind;\n+use languageserver_types::{\n+    Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n+    Command\n+};\n use libanalysis::World;\n-use libeditor::{self, LineIndex, LineCol, TextRange, TextUnit};\n+use libeditor;\n+use serde_json::to_value;\n \n use ::{\n     req::{self, Decoration}, Result,\n     util::FilePath,\n+    conv::{Conv, ConvWith},\n };\n \n pub fn handle_syntax_tree(\n@@ -25,11 +29,9 @@ pub fn handle_extend_selection(\n     let file = world.file_syntax(&path)?;\n     let line_index = world.file_line_index(&path)?;\n     let selections = params.selections.into_iter()\n-        .map(|r| {\n-            let r = to_text_range(&line_index, r);\n-            let r = libeditor::extend_selection(&file, r).unwrap_or(r);\n-            to_vs_range(&line_index, r)\n-        })\n+        .map(|r| r.conv_with(&line_index))\n+        .map(|r| libeditor::extend_selection(&file, r).unwrap_or(r))\n+        .map(|r| r.conv_with(&line_index))\n         .collect();\n     Ok(req::ExtendSelectionResult { selections })\n }\n@@ -48,10 +50,10 @@ pub fn handle_document_symbol(\n         let doc_symbol = DocumentSymbol {\n             name: symbol.name.clone(),\n             detail: Some(symbol.name),\n-            kind: to_symbol_kind(symbol.kind),\n+            kind: symbol.kind.conv(),\n             deprecated: None,\n-            range: to_vs_range(&line_index, symbol.node_range),\n-            selection_range: to_vs_range(&line_index, symbol.name_range),\n+            range: symbol.node_range.conv_with(&line_index),\n+            selection_range: symbol.name_range.conv_with(&line_index),\n             children: None,\n         };\n         if let Some(idx) = symbol.parent {\n@@ -67,17 +69,40 @@ pub fn handle_document_symbol(\n     Ok(Some(req::DocumentSymbolResponse::Nested(res)))\n }\n \n-fn to_symbol_kind(kind: SyntaxKind) -> SymbolKind {\n-    match kind {\n-        SyntaxKind::FUNCTION => SymbolKind::Function,\n-        SyntaxKind::STRUCT => SymbolKind::Struct,\n-        SyntaxKind::ENUM => SymbolKind::Enum,\n-        SyntaxKind::TRAIT => SymbolKind::Interface,\n-        SyntaxKind::MODULE => SymbolKind::Module,\n-        SyntaxKind::TYPE_ITEM => SymbolKind::TypeParameter,\n-        SyntaxKind::STATIC_ITEM => SymbolKind::Constant,\n-        SyntaxKind::CONST_ITEM => SymbolKind::Constant,\n-        _ => SymbolKind::Variable,\n+pub fn handle_code_action(\n+    world: World,\n+    params: req::CodeActionParams,\n+) -> Result<Option<Vec<Command>>> {\n+    let path = params.text_document.file_path()?;\n+    let file = world.file_syntax(&path)?;\n+    let line_index = world.file_line_index(&path)?;\n+    let offset = params.range.conv_with(&line_index).start();\n+    let ret = if libeditor::flip_comma(&file, offset).is_some() {\n+        Some(vec![apply_code_action_cmd(ActionId::FlipComma)])\n+    } else {\n+        None\n+    };\n+    Ok(ret)\n+}\n+\n+fn apply_code_action_cmd(id: ActionId) -> Command {\n+    Command {\n+        title: id.title().to_string(),\n+        command: \"apply_code_action\".to_string(),\n+        arguments: Some(vec![to_value(id).unwrap()]),\n+    }\n+}\n+\n+#[derive(Serialize, Deserialize, Clone, Copy)]\n+enum ActionId {\n+    FlipComma\n+}\n+\n+impl ActionId {\n+    fn title(&self) -> &'static str {\n+        match *self {\n+            ActionId::FlipComma => \"Flip `,`\",\n+        }\n     }\n }\n \n@@ -88,7 +113,7 @@ pub fn publish_diagnostics(world: World, uri: Url) -> Result<req::PublishDiagnos\n     let diagnostics = libeditor::diagnostics(&file)\n         .into_iter()\n         .map(|d| Diagnostic {\n-            range: to_vs_range(&line_index, d.range),\n+            range: d.range.conv_with(&line_index),\n             severity: Some(DiagnosticSeverity::Error),\n             code: None,\n             source: Some(\"libsyntax2\".to_string()),\n@@ -105,38 +130,8 @@ pub fn publish_decorations(world: World, uri: Url) -> Result<req::PublishDecorat\n     let decorations = libeditor::highlight(&file)\n         .into_iter()\n         .map(|h| Decoration {\n-            range: to_vs_range(&line_index, h.range),\n+            range: h.range.conv_with(&line_index),\n             tag: h.tag,\n         }).collect();\n     Ok(req::PublishDecorationsParams { uri, decorations })\n }\n-\n-fn to_text_range(line_index: &LineIndex, range: Range) -> TextRange {\n-    TextRange::from_to(\n-        to_text_unit(line_index, range.start),\n-        to_text_unit(line_index, range.end),\n-    )\n-}\n-\n-fn to_text_unit(line_index: &LineIndex, position: Position) -> TextUnit {\n-    // TODO: UTF-16\n-    let line_col = LineCol {\n-        line: position.line as u32,\n-        col: (position.character as u32).into(),\n-    };\n-    line_index.offset(line_col)\n-}\n-\n-\n-fn to_vs_range(line_index: &LineIndex, range: TextRange) -> Range {\n-    Range::new(\n-        to_vs_position(line_index, range.start()),\n-        to_vs_position(line_index, range.end()),\n-    )\n-}\n-\n-fn to_vs_position(line_index: &LineIndex, offset: TextUnit) -> Position {\n-    let line_col = line_index.line_col(offset);\n-    // TODO: UTF-16\n-    Position::new(line_col.line as u64, u32::from(line_col.col) as u64)\n-}"}, {"sha": "3ff300e3d20f7e1e9a59b75114648f485628e677", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=23c06db9c236db0f9c8ef5117fb1adefd6616c43", "patch": "@@ -23,6 +23,7 @@ mod req;\n mod dispatch;\n mod handlers;\n mod util;\n+mod conv;\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n@@ -33,7 +34,7 @@ use libanalysis::{WorldState, World};\n use ::{\n     io::{Io, RawMsg, RawRequest},\n     handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics, publish_decorations,\n-               handle_document_symbol},\n+               handle_document_symbol, handle_code_action},\n     util::{FilePath, FnBox}\n };\n \n@@ -182,6 +183,10 @@ fn main_loop(\n                 handle_request_on_threadpool::<req::DocumentSymbolRequest>(\n                     &mut req, pool, world, &sender, handle_document_symbol\n                 )?;\n+                handle_request_on_threadpool::<req::CodeActionRequest>(\n+                    &mut req, pool, world, &sender, handle_code_action\n+                )?;\n+\n                 let mut shutdown = false;\n                 dispatch::handle_request::<req::Shutdown, _>(&mut req, |(), resp| {\n                     resp.result(io, ())?;"}, {"sha": "e3b1cdf502a75b5793aa1f8ac9bee8c541d62e8c", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c06db9c236db0f9c8ef5117fb1adefd6616c43/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=23c06db9c236db0f9c8ef5117fb1adefd6616c43", "patch": "@@ -5,7 +5,8 @@ use url_serde;\n pub use languageserver_types::{\n     request::*, notification::*,\n     InitializeResult, PublishDiagnosticsParams,\n-    DocumentSymbolParams, DocumentSymbolResponse\n+    DocumentSymbolParams, DocumentSymbolResponse,\n+    CodeActionParams,\n };\n \n "}]}