{"sha": "95861b159072c404ad5ef2951d1f8c323a3878ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ODYxYjE1OTA3MmM0MDRhZDVlZjI5NTFkMWY4YzMyM2EzODc4Y2E=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T14:15:33Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T00:24:40Z"}, "message": "Move `BoundTy` debruijn index to the `TyKind` enum variant", "tree": {"sha": "89f0cd35cd5deec83dc2484da252d5023e9c1396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f0cd35cd5deec83dc2484da252d5023e9c1396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95861b159072c404ad5ef2951d1f8c323a3878ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95861b159072c404ad5ef2951d1f8c323a3878ca", "html_url": "https://github.com/rust-lang/rust/commit/95861b159072c404ad5ef2951d1f8c323a3878ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95861b159072c404ad5ef2951d1f8c323a3878ca/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf17d249b1dc515eeafcdd04e30723120cb7899", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf17d249b1dc515eeafcdd04e30723120cb7899", "html_url": "https://github.com/rust-lang/rust/commit/6bf17d249b1dc515eeafcdd04e30723120cb7899"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "ad317a96590b35ee5e098fceb76fceba3cb0940c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -684,7 +684,8 @@ for ty::TyKind<'gcx>\n             Param(param_ty) => {\n                 param_ty.hash_stable(hcx, hasher);\n             }\n-            Bound(bound_ty) => {\n+            Bound(debruijn, bound_ty) => {\n+                debruijn.hash_stable(hcx, hasher);\n                 bound_ty.hash_stable(hcx, hasher);\n             }\n             ty::Placeholder(placeholder_ty) => {"}, {"sha": "ddb520775da0a0f781a8ff962fb46a7c83b28802", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, BoundTy, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -382,8 +382,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 t\n             ),\n \n-            ty::Bound(bound_ty) => {\n-                if bound_ty.index >= self.binder_index {\n+            ty::Bound(debruijn, _) => {\n+                if debruijn >= self.binder_index {\n                     bug!(\"escaping bound type during canonicalization\")\n                 } else {\n                     t\n@@ -616,7 +616,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             self.fold_ty(bound_to)\n         } else {\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_ty(ty::Bound(BoundTy::new(self.binder_index, var)))\n+            self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))\n         }\n     }\n }"}, {"sha": "d32594ebdf366d3b7991206587c1a095a1a22e38", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -435,21 +435,21 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             match result_value.unpack() {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n-                    if let ty::Bound(b) = result_value.sty {\n+                    if let ty::Bound(debruijn, b) = result_value.sty {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(?U)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(b.index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[b.var] = Some(*original_value);\n                     }\n                 }\n                 UnpackedKind::Lifetime(result_value) => {\n                     // e.g., here `result_value` might be `'?1` in the example above...\n-                    if let &ty::RegionKind::ReLateBound(index, br) = result_value {\n+                    if let &ty::RegionKind::ReLateBound(debruijn, br) = result_value {\n                         // ... in which case we would set `canonical_vars[0]` to `Some('static)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[br.assert_bound_var()] = Some(*original_value);\n                     }\n                 }"}, {"sha": "0f59f478cb41575eb5568101e7a3dd573aa801fb", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -2471,7 +2471,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::UnnormalizedProjection(..)\n             | ty::Placeholder(..)\n-            | ty::Bound(_)\n+            | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2557,7 +2557,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::UnnormalizedProjection(..)\n             | ty::Placeholder(..)\n-            | ty::Bound(_)\n+            | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2601,7 +2601,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             | ty::Param(..)\n             | ty::Foreign(..)\n             | ty::Projection(..)\n-            | ty::Bound(_)\n+            | ty::Bound(..)\n             | ty::Infer(ty::TyVar(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))"}, {"sha": "36538ac0889dee908f99657931259f9cc3920027", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -324,7 +324,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         use syntax::symbol::Symbol;\n \n         match t.sty {\n-            ty::Bound(bound_ty) if bound_ty.index == self.binder_index => {\n+            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 self.types.insert(\n                     bound_ty.var.as_u32(),\n                     match bound_ty.kind {"}, {"sha": "90022a770c114ef8d26cadaf54ae64779bb6fd80", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -213,7 +213,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n             ty::Placeholder(..) => \"placeholder type\".into(),\n-            ty::Bound(_) |\n+            ty::Bound(..) => \"bound type\".into(),\n             ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),"}, {"sha": "1ea7e27c0dcdb2c451382c886685be8799a3b05f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -115,8 +115,8 @@ impl FlagComputation {\n                 self.add_substs(&substs.substs);\n             }\n \n-            &ty::Bound(bound_ty) => {\n-                self.add_binder(bound_ty.index);\n+            &ty::Bound(debruijn, _) => {\n+                self.add_binder(debruijn);\n             }\n \n             &ty::Placeholder(..) => {"}, {"sha": "6f0e8d4f0268068a0290fa178a1229c6d97601c0", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -460,8 +460,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for BoundVarReplacer<'a, 'gcx, 'tcx>\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n-            ty::Bound(bound_ty) => {\n-                if bound_ty.index == self.current_index {\n+            ty::Bound(debruijn, bound_ty) => {\n+                if debruijn == self.current_index {\n                     let fld_t = &mut self.fld_t;\n                     let ty = fld_t(bound_ty);\n                     ty::fold::shift_vars(\n@@ -526,7 +526,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n               T: TypeFoldable<'tcx>\n     {\n         // identity for bound types\n-        let fld_t = |bound_ty| self.mk_ty(ty::Bound(bound_ty));\n+        let fld_t = |bound_ty| self.mk_ty(ty::Bound(ty::INNERMOST, bound_ty));\n         self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t)\n     }\n \n@@ -722,16 +722,13 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n \n     fn fold_ty(&mut self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n         match ty.sty {\n-            ty::Bound(bound_ty) => {\n-                if self.amount == 0 || bound_ty.index < self.current_index {\n+            ty::Bound(debruijn, bound_ty) => {\n+                if self.amount == 0 || debruijn < self.current_index {\n                     ty\n                 } else {\n-                    let shifted = ty::BoundTy {\n-                        index: bound_ty.index.shifted_in(self.amount),\n-                        var: bound_ty.var,\n-                        kind: bound_ty.kind,\n-                    };\n-                    self.tcx.mk_ty(ty::Bound(shifted))\n+                    self.tcx.mk_ty(\n+                        ty::Bound(debruijn.shifted_in(self.amount), bound_ty)\n+                    )\n                 }\n             }\n "}, {"sha": "3056abba95626f1fea6b1086bf0b14113d449a8c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -201,7 +201,7 @@ pub enum TyKind<'tcx> {\n     Param(ParamTy),\n \n     /// Bound type variable, used only when preparing a trait query.\n-    Bound(BoundTy),\n+    Bound(ty::DebruijnIndex, BoundTy),\n \n     /// A placeholder type - universally quantified higher-ranked type.\n     Placeholder(ty::PlaceholderType),\n@@ -1245,7 +1245,6 @@ newtype_index! {\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct BoundTy {\n-    pub index: DebruijnIndex,\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n@@ -1256,13 +1255,12 @@ pub enum BoundTyKind {\n     Param(InternedString),\n }\n \n-impl_stable_hash_for!(struct BoundTy { index, var, kind });\n+impl_stable_hash_for!(struct BoundTy { var, kind });\n impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n \n-impl BoundTy {\n-    pub fn new(index: DebruijnIndex, var: BoundVar) -> Self {\n+impl From<BoundVar> for BoundTy {\n+    fn from(var: BoundVar) -> Self {\n         BoundTy {\n-            index,\n             var,\n             kind: BoundTyKind::Anon,\n         }\n@@ -1957,7 +1955,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Bound(_) |\n+            ty::Bound(..) |\n             ty::Placeholder(..) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |"}, {"sha": "3425203989891f916f5c341e2beb73d8f430973b", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -190,11 +190,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs::for_item(tcx, def_id, |param, _| {\n             match param.kind {\n                 ty::GenericParamDefKind::Type { .. } => {\n-                    tcx.mk_ty(ty::Bound(ty::BoundTy {\n-                        index: ty::INNERMOST,\n-                        var: ty::BoundVar::from(param.index),\n-                        kind: ty::BoundTyKind::Param(param.name),\n-                    })).into()\n+                    tcx.mk_ty(\n+                        ty::Bound(ty::INNERMOST, ty::BoundTy {\n+                            var: ty::BoundVar::from(param.index),\n+                            kind: ty::BoundTyKind::Param(param.name),\n+                        })\n+                    ).into()\n                 }\n \n                 ty::GenericParamDefKind::Lifetime => {\n@@ -584,18 +585,18 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Bound(b) => {\n+                    ty::Bound(debruijn, b) => {\n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(b.index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         cvar == b.var\n                     }\n                     _ => false,\n                 },\n \n                 UnpackedKind::Lifetime(r) => match r {\n-                    ty::ReLateBound(index, br) => {\n+                    ty::ReLateBound(debruijn, br) => {\n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(*index, ty::INNERMOST);\n+                        assert_eq!(*debruijn, ty::INNERMOST);\n                         cvar == br.assert_bound_var()\n                     }\n                     _ => false,"}, {"sha": "eea3b54919d5263eb3b7087ebabf2859acf99ceb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -1110,13 +1110,13 @@ define_print! {\n                 Infer(infer_ty) => write!(f, \"{}\", infer_ty),\n                 Error => write!(f, \"[type error]\"),\n                 Param(ref param_ty) => write!(f, \"{}\", param_ty),\n-                Bound(bound_ty) => {\n+                Bound(debruijn, bound_ty) => {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Anon => {\n-                            if bound_ty.index == ty::INNERMOST {\n+                            if debruijn == ty::INNERMOST {\n                                 write!(f, \"^{}\", bound_ty.var.index())\n                             } else {\n-                                write!(f, \"^{}_{}\", bound_ty.index.index(), bound_ty.var.index())\n+                                write!(f, \"^{}_{}\", debruijn.index(), bound_ty.var.index())\n                             }\n                         }\n "}, {"sha": "b8670e5e91436c880871b1ed72d3d32218e98c4b", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -59,7 +59,8 @@ fn assemble_clauses_from_assoc_ty_values<'tcx>(\n \n fn program_clauses_for_raw_ptr<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -88,9 +89,9 @@ fn program_clauses_for_fn_ptr<'tcx>(\n ) -> Clauses<'tcx> {\n     let inputs_and_output = tcx.mk_type_list(\n         (0..arity_and_output).into_iter()\n+            .map(|i| ty::BoundVar::from(i))\n             // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n-            .map(|i| ty::BoundTy::new(ty::DebruijnIndex::from(1usize), ty::BoundVar::from(i)))\n-            .map(|t| tcx.mk_ty(ty::Bound(t)))\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into())))\n     );\n \n     let fn_sig = ty::Binder::bind(ty::FnSig {\n@@ -115,7 +116,8 @@ fn program_clauses_for_fn_ptr<'tcx>(\n \n fn program_clauses_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -151,7 +153,8 @@ fn program_clauses_for_array<'tcx>(\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -188,8 +191,8 @@ fn program_clauses_for_tuple<'tcx>(\n ) -> Clauses<'tcx> {\n     let type_list = tcx.mk_type_list(\n         (0..arity).into_iter()\n-            .map(|i| ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from(i)))\n-            .map(|t| tcx.mk_ty(ty::Bound(t)))\n+            .map(|i| ty::BoundVar::from(i))\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n     );\n \n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n@@ -233,7 +236,7 @@ fn program_clauses_for_ref<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx>\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n     let ty = tcx.mk_ty(\n-        ty::Bound(ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(1)))\n+        ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n     );\n \n     let ref_ty = tcx.mk_ref(region, ty::TypeAndMut {"}, {"sha": "519b0ac61058e75608c630b262d305f78fd0b0cf", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -55,7 +55,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                     ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n                 );\n                 let ty = self.tcx.mk_ty(\n-                    ty::Bound(ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(1)))\n+                    ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n                 );\n \n                 let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut {"}, {"sha": "2d8e5b48aac7b69e79c9d257927e77cbca169471", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95861b159072c404ad5ef2951d1f8c323a3878ca/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=95861b159072c404ad5ef2951d1f8c323a3878ca", "patch": "@@ -515,7 +515,8 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n         .unwrap_or(0);\n     // Add a new type param after the existing ones (`U` in the comment above).\n     let ty_var = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(offset + 1))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(offset + 1).into()\n     );\n \n     // `ProjectionEq(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> = U)`"}]}