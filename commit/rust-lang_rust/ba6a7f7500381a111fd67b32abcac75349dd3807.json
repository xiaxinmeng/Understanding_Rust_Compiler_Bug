{"sha": "ba6a7f7500381a111fd67b32abcac75349dd3807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNmE3Zjc1MDAzODFhMTExZmQ2N2IzMmFiY2FjNzUzNDlkZDM4MDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-04T13:35:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T15:02:14Z"}, "message": "rename `Constraint` to `OutlivesConstraint`", "tree": {"sha": "02f28c64b20bac6153aa2ce2c35aff1e6fd6ac5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f28c64b20bac6153aa2ce2c35aff1e6fd6ac5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6a7f7500381a111fd67b32abcac75349dd3807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6a7f7500381a111fd67b32abcac75349dd3807", "html_url": "https://github.com/rust-lang/rust/commit/ba6a7f7500381a111fd67b32abcac75349dd3807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6a7f7500381a111fd67b32abcac75349dd3807/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9980415fbdc656b4b67f2cc4611d03fde2951435", "url": "https://api.github.com/repos/rust-lang/rust/commits/9980415fbdc656b4b67f2cc4611d03fde2951435", "html_url": "https://github.com/rust-lang/rust/commit/9980415fbdc656b4b67f2cc4611d03fde2951435"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "6c796ea4c73abe66195dd0d9e533e9ff2bf2721e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=ba6a7f7500381a111fd67b32abcac75349dd3807", "patch": "@@ -14,7 +14,7 @@\n //! context internal state.\n \n use std::io::{self, Write};\n-use super::{Constraint, RegionInferenceContext};\n+use super::{OutlivesConstraint, RegionInferenceContext};\n \n // Room for \"'_#NNNNr\" before things get misaligned.\n // Easy enough to fix if this ever doesn't seem like\n@@ -79,7 +79,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mut constraints: Vec<_> = self.constraints.iter().collect();\n         constraints.sort();\n         for constraint in &constraints {\n-            let Constraint {\n+            let OutlivesConstraint {\n                 sup,\n                 sub,\n                 point,"}, {"sha": "c02e4ff315687f54ef59bf1790d24656c9974309", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=ba6a7f7500381a111fd67b32abcac75349dd3807", "patch": "@@ -27,7 +27,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n impl<'this, 'tcx> dot::Labeller<'this> for RegionInferenceContext<'tcx> {\n     type Node = RegionVid;\n-    type Edge = Constraint;\n+    type Edge = OutlivesConstraint;\n \n     fn graph_id(&'this self) -> dot::Id<'this> {\n         dot::Id::new(format!(\"RegionInferenceContext\")).unwrap()\n@@ -41,31 +41,31 @@ impl<'this, 'tcx> dot::Labeller<'this> for RegionInferenceContext<'tcx> {\n     fn node_label(&'this self, n: &RegionVid) -> dot::LabelText<'this> {\n         dot::LabelText::LabelStr(format!(\"{:?}\", n).into_cow())\n     }\n-    fn edge_label(&'this self, e: &Constraint) -> dot::LabelText<'this> {\n+    fn edge_label(&'this self, e: &OutlivesConstraint) -> dot::LabelText<'this> {\n         dot::LabelText::LabelStr(format!(\"{:?}\", e.point).into_cow())\n     }\n }\n \n impl<'this, 'tcx> dot::GraphWalk<'this> for RegionInferenceContext<'tcx> {\n     type Node = RegionVid;\n-    type Edge = Constraint;\n+    type Edge = OutlivesConstraint;\n \n     fn nodes(&'this self) -> dot::Nodes<'this, RegionVid> {\n         let vids: Vec<RegionVid> = self.definitions.indices().collect();\n         vids.into_cow()\n     }\n-    fn edges(&'this self) -> dot::Edges<'this, Constraint> {\n+    fn edges(&'this self) -> dot::Edges<'this, OutlivesConstraint> {\n         (&self.constraints.raw[..]).into_cow()\n     }\n \n     // Render `a: b` as `a <- b`, indicating the flow\n     // of data during inference.\n \n-    fn source(&'this self, edge: &Constraint) -> RegionVid {\n+    fn source(&'this self, edge: &OutlivesConstraint) -> RegionVid {\n         edge.sub\n     }\n \n-    fn target(&'this self, edge: &Constraint) -> RegionVid {\n+    fn target(&'this self, edge: &OutlivesConstraint) -> RegionVid {\n         edge.sup\n     }\n }"}, {"sha": "d974a60c15c04e06e18761d1f0099347d744f0eb", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a7f7500381a111fd67b32abcac75349dd3807/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ba6a7f7500381a111fd67b32abcac75349dd3807", "patch": "@@ -68,7 +68,7 @@ pub struct RegionInferenceContext<'tcx> {\n     dependency_map: Option<IndexVec<RegionVid, Option<ConstraintIndex>>>,\n \n     /// The constraints we have accumulated and used during solving.\n-    constraints: IndexVec<ConstraintIndex, Constraint>,\n+    constraints: IndexVec<ConstraintIndex, OutlivesConstraint>,\n \n     /// Type constraints that we check after solving.\n     type_tests: Vec<TypeTest<'tcx>>,\n@@ -118,11 +118,12 @@ pub(crate) enum Cause {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct Constraint {\n+pub struct OutlivesConstraint {\n     // NB. The ordering here is not significant for correctness, but\n     // it is for convenience. Before we dump the constraints in the\n     // debugging logs, we sort them, and we'd like the \"super region\"\n     // to be first, etc. (In particular, span should remain last.)\n+\n     /// The region SUP must outlive SUB...\n     sup: RegionVid,\n \n@@ -387,7 +388,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         debug!(\"add_outlives({:?}: {:?} @ {:?}\", sup, sub, point);\n         assert!(self.inferred_values.is_none(), \"values already inferred\");\n-        self.constraints.push(Constraint {\n+        self.constraints.push(OutlivesConstraint {\n             span,\n             sup,\n             sub,\n@@ -1139,7 +1140,7 @@ impl<'tcx> RegionDefinition<'tcx> {\n     }\n }\n \n-impl fmt::Debug for Constraint {\n+impl fmt::Debug for OutlivesConstraint {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             formatter,"}]}