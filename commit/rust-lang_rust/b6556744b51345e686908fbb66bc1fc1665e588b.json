{"sha": "b6556744b51345e686908fbb66bc1fc1665e588b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTU2NzQ0YjUxMzQ1ZTY4NjkwOGZiYjY2YmMxZmMxNjY1ZTU4OGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-21T09:52:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-21T09:52:23Z"}, "message": "Rollup merge of #63755 - Centril:simplify-prexp-gating, r=petrochenkov\n\nUse dedicated type for spans in pre-expansion gating.\n\n- Simplify the overall pre-expansion gating \"experience\".", "tree": {"sha": "dd0d146bb9b56a8482818f06d89de4907c7d0b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0d146bb9b56a8482818f06d89de4907c7d0b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6556744b51345e686908fbb66bc1fc1665e588b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXRRXCRBK7hj4Ov3rIwAAdHIIACl+QTgeTF3BzWcrfVN11uU0\n8iUQxvNRmOelovOJzeTwH2JVPbfz0yjzARvAuwFj3kPK9h+XviciIwDJZBhDAUvF\nZzMyOuht7fWWPJy/xyTkbYE9Ubah7FrLw0oAou8llPlNHg64AOqB1QO2XSssyJFC\nfEYCWpF0WIP+wAoXp2aBhwuC5IKsTY9RpI4BNOEJoOcxNAiEoq1/Eti7qceCUWEv\nIdU4lpfqcHfk/5sLwfTwommcetJGfokJ92JRoy0qTOCWemfIAWXxVv2S8BN7aFLa\nvBT02F2mhHnqVnbCNr/+qukm/FLRiaaXu02RuwFBCWJGVI46SZkNqz23mULwvCE=\n=f15L\n-----END PGP SIGNATURE-----\n", "payload": "tree dd0d146bb9b56a8482818f06d89de4907c7d0b89\nparent 61ae1ccb1412cd021f0f7ba670380961ced8c296\nparent 777a12c3a4533e70baa46391e8c557950191a7c7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566381143 +0200\ncommitter GitHub <noreply@github.com> 1566381143 +0200\n\nRollup merge of #63755 - Centril:simplify-prexp-gating, r=petrochenkov\n\nUse dedicated type for spans in pre-expansion gating.\n\n- Simplify the overall pre-expansion gating \"experience\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6556744b51345e686908fbb66bc1fc1665e588b", "html_url": "https://github.com/rust-lang/rust/commit/b6556744b51345e686908fbb66bc1fc1665e588b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6556744b51345e686908fbb66bc1fc1665e588b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ae1ccb1412cd021f0f7ba670380961ced8c296", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ae1ccb1412cd021f0f7ba670380961ced8c296", "html_url": "https://github.com/rust-lang/rust/commit/61ae1ccb1412cd021f0f7ba670380961ced8c296"}, {"sha": "777a12c3a4533e70baa46391e8c557950191a7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/777a12c3a4533e70baa46391e8c557950191a7c7", "html_url": "https://github.com/rust-lang/rust/commit/777a12c3a4533e70baa46391e8c557950191a7c7"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "9cf476cc7e7156200b8580e345f841c60a1a5246", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b6556744b51345e686908fbb66bc1fc1665e588b", "patch": "@@ -2423,16 +2423,19 @@ pub fn check_crate(krate: &ast::Crate,\n     };\n \n     macro_rules! gate_all {\n+        ($gate:ident, $msg:literal) => { gate_all!($gate, $gate, $msg); };\n         ($spans:ident, $gate:ident, $msg:literal) => {\n-            for span in &*sess.$spans.borrow() { gate_feature!(&ctx, $gate, *span, $msg); }\n+            for span in &*sess.gated_spans.$spans.borrow() {\n+                gate_feature!(&ctx, $gate, *span, $msg);\n+            }\n         }\n     }\n \n-    gate_all!(param_attr_spans, param_attrs, \"attributes on function parameters are unstable\");\n-    gate_all!(let_chains_spans, let_chains, \"`let` expressions in this position are experimental\");\n-    gate_all!(async_closure_spans, async_closure, \"async closures are unstable\");\n-    gate_all!(yield_spans, generators, \"yield syntax is experimental\");\n-    gate_all!(or_pattern_spans, or_patterns, \"or-patterns syntax is experimental\");\n+    gate_all!(param_attrs, \"attributes on function parameters are unstable\");\n+    gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n+    gate_all!(async_closure, \"async closures are unstable\");\n+    gate_all!(yields, generators, \"yield syntax is experimental\");\n+    gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "c703058e7952de818f5dbb79ad4b45eeaaf1bc26", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=b6556744b51345e686908fbb66bc1fc1665e588b", "patch": "@@ -21,9 +21,8 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n impl<'a> Parser<'a> {\n     crate fn parse_arg_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let attrs = self.parse_outer_attributes()?;\n-        attrs.iter().for_each(|a|\n-            self.sess.param_attr_spans.borrow_mut().push(a.span)\n-        );\n+        self.sess.gated_spans.param_attrs.borrow_mut()\n+            .extend(attrs.iter().map(|a| a.span));\n         Ok(attrs)\n     }\n "}, {"sha": "b1af4806e2d787dde3b9f17b200550fc42931834", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b6556744b51345e686908fbb66bc1fc1665e588b", "patch": "@@ -39,6 +39,22 @@ crate mod unescape_error_reporting;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n+/// Collected spans during parsing for places where a certain feature was\n+/// used and should be feature gated accordingly in `check_crate`.\n+#[derive(Default)]\n+pub struct GatedSpans {\n+    /// Spans collected for gating `param_attrs`, e.g. `fn foo(#[attr] x: u8) {}`.\n+    pub param_attrs: Lock<Vec<Span>>,\n+    /// Spans collected for gating `let_chains`, e.g. `if a && let b = c {}`.\n+    pub let_chains: Lock<Vec<Span>>,\n+    /// Spans collected for gating `async_closure`, e.g. `async || ..`.\n+    pub async_closure: Lock<Vec<Span>>,\n+    /// Spans collected for gating `yield e?` expressions (`generators` gate).\n+    pub yields: Lock<Vec<Span>>,\n+    /// Spans collected for gating `or_patterns`, e.g. `Some(Foo | Bar)`.\n+    pub or_patterns: Lock<Vec<Span>>,\n+}\n+\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,\n@@ -58,16 +74,8 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n-    pub param_attr_spans: Lock<Vec<Span>>,\n-    // Places where `let` exprs were used and should be feature gated according to `let_chains`.\n-    pub let_chains_spans: Lock<Vec<Span>>,\n-    // Places where `async || ..` exprs were used and should be feature gated.\n-    pub async_closure_spans: Lock<Vec<Span>>,\n-    // Places where `yield e?` exprs were used and should be feature gated.\n-    pub yield_spans: Lock<Vec<Span>>,\n     pub injected_crate_name: Once<Symbol>,\n-    // Places where or-patterns e.g. `Some(Foo | Bar)` were used and should be feature gated.\n-    pub or_pattern_spans: Lock<Vec<Span>>,\n+    pub gated_spans: GatedSpans,\n }\n \n impl ParseSess {\n@@ -93,12 +101,8 @@ impl ParseSess {\n             buffered_lints: Lock::new(vec![]),\n             edition: ExpnId::root().expn_data().edition,\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n-            param_attr_spans: Lock::new(Vec::new()),\n-            let_chains_spans: Lock::new(Vec::new()),\n-            async_closure_spans: Lock::new(Vec::new()),\n-            yield_spans: Lock::new(Vec::new()),\n             injected_crate_name: Once::new(),\n-            or_pattern_spans: Lock::new(Vec::new()),\n+            gated_spans: GatedSpans::default(),\n         }\n     }\n "}, {"sha": "5da9b75d53b045cfb2b8deb6bc1ee6ab56322197", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=b6556744b51345e686908fbb66bc1fc1665e588b", "patch": "@@ -999,7 +999,7 @@ impl<'a> Parser<'a> {\n                     }\n \n                     let span = lo.to(hi);\n-                    self.sess.yield_spans.borrow_mut().push(span);\n+                    self.sess.gated_spans.yields.borrow_mut().push(span);\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n@@ -1111,7 +1111,7 @@ impl<'a> Parser<'a> {\n         };\n         if asyncness.is_async() {\n             // Feature gate `async ||` closures.\n-            self.sess.async_closure_spans.borrow_mut().push(self.prev_span);\n+            self.sess.gated_spans.async_closure.borrow_mut().push(self.prev_span);\n         }\n \n         let capture_clause = self.parse_capture_clause();\n@@ -1234,7 +1234,7 @@ impl<'a> Parser<'a> {\n \n         if let ExprKind::Let(..) = cond.node {\n             // Remove the last feature gating of a `let` expression since it's stable.\n-            let last = self.sess.let_chains_spans.borrow_mut().pop();\n+            let last = self.sess.gated_spans.let_chains.borrow_mut().pop();\n             debug_assert_eq!(cond.span, last.unwrap());\n         }\n \n@@ -1252,7 +1252,7 @@ impl<'a> Parser<'a> {\n             |this| this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         )?;\n         let span = lo.to(expr.span);\n-        self.sess.let_chains_spans.borrow_mut().push(span);\n+        self.sess.gated_spans.let_chains.borrow_mut().push(span);\n         Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n     }\n "}, {"sha": "8cfa6abbe6270e7181a337791940c90f98e5bfe1", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6556744b51345e686908fbb66bc1fc1665e588b/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=b6556744b51345e686908fbb66bc1fc1665e588b", "patch": "@@ -123,7 +123,7 @@ impl<'a> Parser<'a> {\n \n         let or_pattern_span = lo.to(self.prev_span);\n \n-        self.sess.or_pattern_spans.borrow_mut().push(or_pattern_span);\n+        self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n \n         Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }"}]}