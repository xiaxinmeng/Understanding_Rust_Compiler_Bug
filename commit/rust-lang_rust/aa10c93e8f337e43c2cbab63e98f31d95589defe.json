{"sha": "aa10c93e8f337e43c2cbab63e98f31d95589defe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMTBjOTNlOGYzMzdlNDNjMmNiYWI2M2U5OGYzMWQ5NTU4OWRlZmU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-07T22:56:23Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-07T23:13:05Z"}, "message": "Fix tests", "tree": {"sha": "883c1d84e6732010831f6687c46f5f4687b2cd29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883c1d84e6732010831f6687c46f5f4687b2cd29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa10c93e8f337e43c2cbab63e98f31d95589defe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXLnaCAAoJEF5CfHlMukXoKE8P/2YiJXkO01ZMudYtLmdQdtpa\nfKwZWOdQJz+OJVkQGgD/nk6XZLWm5j5VqDMk3ekzZQ/NzfcnGfVj5FLnvg+UDYCH\nDTRAxSzUFGOTqMrmqVZjPe6/QBPMeH5KvMgyryJPE8i9EZlWEzLDMaFd7fXJokq5\nnaV3MMNPsZY+6gs2hpV6tyaRg+/OgYB4OC6oivPEhDcWFGnj27hqIWCjrToETYaw\nolLenHd2c78j4/7dlUZK37osOjvYXc6Nf3wPYnMD/CGUmwn5plI11v4smrA6XBrC\nAXlbMKmS1goD7aR5bfZkt0dZqm2RZ3v0sXFZJR9paLosBkZH5QcfC5BDOAOAcVbJ\nPo6xRhYjpiLrGqtPT7j30ltS6Tg7TpIAUNmLx7VB4MGEUfAtjohWG3gcRVE2HEav\nm2RDNaZ8gf6wKpIjMCpkZ2mHDpZS/9oSXcQiPsk0vfL9XtZLd6obNpfT1oekL3GZ\nAB5V2Yqr68MxSNDmlRUinT/rzy0F4TRQnMTInmKC3+AV3dJx7QxiN5o8ulM6tNip\nUHoqKh/J4sgY/ytvTVE52x8YtKVRf32iv8DFrR9eK7HPZEjoC9rVl6b81gy3Dkto\nNQqu2DnEdCq0KGLzEjztmgKHTMRWb63lESCzgd0/Skgw+gioJEkoJTaFSSxSXl50\n1bb8vWsBIjhvcdgHv1+H\n=9DIO\n-----END PGP SIGNATURE-----", "payload": "tree 883c1d84e6732010831f6687c46f5f4687b2cd29\nparent ca743ecb77c35d7a0a26e625769aa1ec627811bf\nauthor mcarton <cartonmartin+git@gmail.com> 1462661783 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1462662785 +0200\n\nFix tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa10c93e8f337e43c2cbab63e98f31d95589defe", "html_url": "https://github.com/rust-lang/rust/commit/aa10c93e8f337e43c2cbab63e98f31d95589defe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa10c93e8f337e43c2cbab63e98f31d95589defe/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca743ecb77c35d7a0a26e625769aa1ec627811bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca743ecb77c35d7a0a26e625769aa1ec627811bf", "html_url": "https://github.com/rust-lang/rust/commit/ca743ecb77c35d7a0a26e625769aa1ec627811bf"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "7e9d17d643b16cd77438f2797c5d32d5450188cd", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa10c93e8f337e43c2cbab63e98f31d95589defe/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa10c93e8f337e43c2cbab63e98f31d95589defe/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=aa10c93e8f337e43c2cbab63e98f31d95589defe", "patch": "@@ -113,14 +113,9 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n             if is_named_self(i, \"len\") {\n                 let ty = cx.tcx.node_id_to_type(item.id);\n \n-                let s = i.span;\n                 span_lint(cx,\n                           LEN_WITHOUT_IS_EMPTY,\n-                          Span {\n-                              lo: s.lo,\n-                              hi: s.lo,\n-                              expn_id: s.expn_id,\n-                          },\n+                          i.span,\n                           &format!(\"item `{}` has a `.len(_: &Self)` method, but no `.is_empty(_: &Self)` method. \\\n                                     Consider adding one\",\n                                    ty));"}, {"sha": "e1b4237b9b2ec4baf37ffd6ec1c767ed1b577acd", "filename": "src/regex.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa10c93e8f337e43c2cbab63e98f31d95589defe/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa10c93e8f337e43c2cbab63e98f31d95589defe/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=aa10c93e8f337e43c2cbab63e98f31d95589defe", "patch": "@@ -143,14 +143,17 @@ impl LateLintPass for RegexPass {\n \n #[allow(cast_possible_truncation)]\n fn str_span(base: Span, s: &str, c: usize) -> Span {\n-    let lo = match s.char_indices().nth(c) {\n-        Some((b, _)) => base.lo + BytePos(b as u32),\n-        _ => base.hi,\n-    };\n-    Span {\n-        lo: lo,\n-        hi: lo,\n-        ..base\n+    let mut si = s.char_indices().skip(c);\n+\n+    match (si.next(), si.next())  {\n+        (Some((l, _)), Some((h, _))) => {\n+            Span {\n+                lo: base.lo + BytePos(l as u32),\n+                hi: base.lo + BytePos(h as u32),\n+                ..base\n+            }\n+        }\n+        _ => base,\n     }\n }\n "}, {"sha": "2f164d1e5698dab93dbd5b212e4aa9caef2cd171", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=aa10c93e8f337e43c2cbab63e98f31d95589defe", "patch": "@@ -340,7 +340,7 @@ fn main() {\n     for (_, v) in &m {\n         //~^ you seem to want to iterate on a map's values\n         //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in &m.values()\n+        //~| SUGGESTION for v in m.values()\n         let _v = v;\n     }\n "}, {"sha": "3444e49ec513604e0198916834eb6dacc5c5426a", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=aa10c93e8f337e43c2cbab63e98f31d95589defe", "patch": "@@ -140,7 +140,7 @@ fn ref_pats() {\n         match v {\n             //~^ERROR add `&` to all patterns\n             //~|HELP instead of\n-            //~|SUGGESTION `match *v { .. }`\n+            //~|SUGGESTION match *v { .. }\n             &Some(v) => println!(\"{:?}\", v),\n             &None => println!(\"none\"),\n         }\n@@ -153,7 +153,7 @@ fn ref_pats() {\n     match tup {\n         //~^ERROR add `&` to all patterns\n         //~|HELP instead of\n-        //~|SUGGESTION `match *tup { .. }`\n+        //~|SUGGESTION match *tup { .. }\n         &(v, 1) => println!(\"{}\", v),\n         _ => println!(\"none\"),\n     }\n@@ -162,7 +162,7 @@ fn ref_pats() {\n     match &w {\n         //~^ERROR add `&` to both\n         //~|HELP try\n-        //~|SUGGESTION `match w { .. }`\n+        //~|SUGGESTION match w { .. }\n         &Some(v) => println!(\"{:?}\", v),\n         &None => println!(\"none\"),\n     }\n@@ -176,15 +176,15 @@ fn ref_pats() {\n     if let &None = a {\n         //~^ERROR add `&` to all patterns\n         //~|HELP instead of\n-        //~|SUGGESTION `if let ... = *a { .. }`\n+        //~|SUGGESTION if let .. = *a { .. }\n         println!(\"none\");\n     }\n \n     let b = Some(0);\n     if let &None = &b {\n         //~^ERROR add `&` to both\n         //~|HELP try\n-        //~|SUGGESTION `if let ... = b { .. }`\n+        //~|SUGGESTION if let .. = b { .. }\n         println!(\"none\");\n     }\n }"}, {"sha": "9cd2bc8098e5427cf4992fb013c6a30272b32184", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa10c93e8f337e43c2cbab63e98f31d95589defe/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=aa10c93e8f337e43c2cbab63e98f31d95589defe", "patch": "@@ -16,6 +16,8 @@ fn syntax_error() {\n     //~^ERROR: regex syntax error: empty alternate\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n     //~^ERROR: regex syntax error: invalid character class range\n+    let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n+    //~^ERROR: regex syntax error: invalid character class range\n \n     let some_regex = Regex::new(OPENING_PAREN);\n     //~^ERROR: regex syntax error on position 0: unclosed"}]}