{"sha": "8769297e97af4db3565efde540cf5f2886daf083", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjkyOTdlOTdhZjRkYjM1NjVlZmRlNTQwY2Y1ZjI4ODZkYWYwODM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-13T22:23:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-13T22:23:47Z"}, "message": "Rollup merge of #59912 - RalfJung:maybe-uninit, r=Centril\n\nMaybeUninit: remove deprecated functions", "tree": {"sha": "9ad78082a1f2e2a692b8d84e7a55d4d849b0c49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad78082a1f2e2a692b8d84e7a55d4d849b0c49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8769297e97af4db3565efde540cf5f2886daf083", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsmF0CRBK7hj4Ov3rIwAAdHIIAKODfN86H5iQvDz5PBIGpOik\nxRDu9cN4Fx/gStJfrFRjE/ra2CZHc/OrEqTyOIG72RaKzN2oLGgUDUZQJDVJ4ZA0\nMdbSjGp3N+qhc1MqMx/vMBKtLf5aBhYFwnHYMfJhdV8lcirIHHBwIVlXbOsdXB0J\n/E4p6d9Hqzt7BnUsVW5bBEqJuEaiQ0VeqhCnL/7bo/FsIWe9Gn+9W1Kyn5igcx4V\nFbqdxOxF7hEPh72NdjzHNcZYMD1sZFkCBcqPBoWV7ZboEYPTUAYIFgAQB5mzURbL\nPCBv50/Q86qarTDiuqUwI25ymIj8fCdg3/XGpjfrKtroi6x210hl1SyDlcomafs=\n=IsAd\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ad78082a1f2e2a692b8d84e7a55d4d849b0c49a\nparent 857416b590710ae3c9dbab284ea11692ffc67aed\nparent 1ce6645d1f6e80325f2c13ae72b879c66d09c644\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555194227 +0200\ncommitter GitHub <noreply@github.com> 1555194227 +0200\n\nRollup merge of #59912 - RalfJung:maybe-uninit, r=Centril\n\nMaybeUninit: remove deprecated functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8769297e97af4db3565efde540cf5f2886daf083", "html_url": "https://github.com/rust-lang/rust/commit/8769297e97af4db3565efde540cf5f2886daf083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8769297e97af4db3565efde540cf5f2886daf083/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857416b590710ae3c9dbab284ea11692ffc67aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/857416b590710ae3c9dbab284ea11692ffc67aed", "html_url": "https://github.com/rust-lang/rust/commit/857416b590710ae3c9dbab284ea11692ffc67aed"}, {"sha": "1ce6645d1f6e80325f2c13ae72b879c66d09c644", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce6645d1f6e80325f2c13ae72b879c66d09c644", "html_url": "https://github.com/rust-lang/rust/commit/1ce6645d1f6e80325f2c13ae72b879c66d09c644"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "e887426554701deef8436f873acbce82b916af8c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8769297e97af4db3565efde540cf5f2886daf083/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8769297e97af4db3565efde540cf5f2886daf083/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8769297e97af4db3565efde540cf5f2886daf083", "patch": "@@ -1152,15 +1152,6 @@ impl<T> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `uninit` instead\")]\n-    pub const fn uninitialized() -> MaybeUninit<T> {\n-        Self::uninit()\n-    }\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,\n@@ -1221,14 +1212,6 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `write` instead\")]\n-    pub fn set(&mut self, val: T) -> &mut T {\n-        self.write(val)\n-    }\n-\n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n@@ -1346,15 +1329,6 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `assume_init` instead\")]\n-    pub unsafe fn into_initialized(self) -> T {\n-        self.assume_init()\n-    }\n-\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n@@ -1417,14 +1391,6 @@ impl<T> MaybeUninit<T> {\n         self.as_ptr().read()\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `read` instead\")]\n-    pub unsafe fn read_initialized(&self) -> T {\n-        self.read()\n-    }\n-\n     /// Gets a reference to the contained value.\n     ///\n     /// # Safety"}]}