{"sha": "1a367c62cd52b11d74f3810035cd25c368a3fe9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMzY3YzYyY2Q1MmIxMWQ3NGYzODEwMDM1Y2QyNWMzNjhhM2ZlOWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-29T18:38:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-30T01:58:39Z"}, "message": "rustc: Add search paths to dylib load paths\n\nWhen a syntax extension is loaded by the compiler, the dylib that is opened may\nhave other dylibs that it depends on. The dynamic linker must be able to find\nthese libraries on the system or else the library will fail to load.\n\nCurrently, unix gets by with the use of rpaths. This relies on the dylib not\nmoving around too drastically relative to its dependencies. For windows,\nhowever, this is no rpath available, and in theory unix should work without\nrpaths as well.\n\nThis modifies the compiler to add all -L search directories to the dynamic\nlinker's set of load paths. This is currently managed through environment\nvariables for each platform.\n\nCloses #13848", "tree": {"sha": "9bc889d385953a647b2b84385652761cad513707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc889d385953a647b2b84385652761cad513707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a367c62cd52b11d74f3810035cd25c368a3fe9e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a367c62cd52b11d74f3810035cd25c368a3fe9e", "html_url": "https://github.com/rust-lang/rust/commit/1a367c62cd52b11d74f3810035cd25c368a3fe9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a367c62cd52b11d74f3810035cd25c368a3fe9e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ad41b93d133aa4f3bda71475f8e41d9dfe704d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ad41b93d133aa4f3bda71475f8e41d9dfe704d", "html_url": "https://github.com/rust-lang/rust/commit/a1ad41b93d133aa4f3bda71475f8e41d9dfe704d"}], "stats": {"total": 117, "additions": 114, "deletions": 3}, "files": [{"sha": "a4593c1cb5afc745b804ded01209c90633b38f04", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -231,7 +231,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use types::os::arch::extra::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES};\n #[cfg(windows)] pub use types::os::arch::extra::{LPCSTR, WORD, DWORD, BYTE, FILETIME};\n #[cfg(windows)] pub use types::os::arch::extra::{LARGE_INTEGER, LPVOID, LONG};\n-#[cfg(windows)] pub use types::os::arch::extra::{time64_t, OVERLAPPED};\n+#[cfg(windows)] pub use types::os::arch::extra::{time64_t, OVERLAPPED, LPCWSTR};\n #[cfg(windows)] pub use types::os::arch::extra::{LPOVERLAPPED, SIZE_T, LPDWORD};\n #[cfg(windows)] pub use funcs::c95::string::{wcslen};\n #[cfg(windows)] pub use funcs::posix88::stat_::{wstat, wutime, wchmod, wrmdir};"}, {"sha": "87db2a8362ba02c3630cc275195757d3abb8efd9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -232,6 +232,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                  front::config::strip_unconfigured_items(krate));\n \n     krate = time(time_passes, \"expansion\", krate, |krate| {\n+        // Windows dlls do not have rpaths, so they don't know how to find their\n+        // dependencies. It's up to use to tell the system where to find all the\n+        // dependent dlls. Note that this uses cfg!(windows) as opposed to\n+        // targ_cfg because syntax extensions are always loaded for the host\n+        // compiler, not for the target.\n+        if cfg!(windows) {\n+            sess.host_filesearch().add_dylib_search_paths();\n+        }\n         let cfg = syntax::ext::expand::ExpansionConfig {\n             loader: loader,\n             deriving_hash_type_parameter: sess.features.default_type_params.get(),"}, {"sha": "ec95ef5db6529a98be49952e25d6097e11bfe9f3", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -13,6 +13,7 @@\n use std::cell::RefCell;\n use std::os;\n use std::io::fs;\n+use std::unstable::dynamic_lib::DynamicLibrary;\n use collections::HashSet;\n \n use myfs = util::fs;\n@@ -132,6 +133,13 @@ impl<'a> FileSearch<'a> {\n             triple: triple,\n         }\n     }\n+\n+    pub fn add_dylib_search_paths(&self) {\n+        self.for_each_lib_search_path(|lib_search_path| {\n+            DynamicLibrary::add_search_path(lib_search_path);\n+            FileDoesntMatch\n+        })\n+    }\n }\n \n pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> Path {"}, {"sha": "671cacbbb6f2ffb34b80e95718dd4fc30352ff1b", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -15,12 +15,16 @@ Dynamic library facilities.\n A simple wrapper over the platform's dynamic library facilities\n \n */\n+\n use c_str::ToCStr;\n use cast;\n-use path;\n use ops::*;\n use option::*;\n+use os;\n+use path::GenericPath;\n+use path;\n use result::*;\n+use str;\n \n pub struct DynamicLibrary { handle: *u8}\n \n@@ -59,6 +63,20 @@ impl DynamicLibrary {\n         }\n     }\n \n+    /// Appends a path to the system search path for dynamic libraries\n+    pub fn add_search_path(path: &path::Path) {\n+        let (envvar, sep) = if cfg!(windows) {\n+            (\"PATH\", ';' as u8)\n+        } else if cfg!(target_os = \"macos\") {\n+            (\"DYLD_LIBRARY_PATH\", ':' as u8)\n+        } else {\n+            (\"LD_LIBRARY_PATH\", ':' as u8)\n+        };\n+        let newenv = os::getenv_as_bytes(envvar).unwrap_or(~[]);\n+        let newenv = newenv + &[sep] + path.as_vec();\n+        os::setenv(envvar, str::from_utf8(newenv).unwrap());\n+    }\n+\n     /// Access the value at the symbol of the dynamic library\n     pub unsafe fn symbol<T>(&self, symbol: &str) -> Result<T, ~str> {\n         // This function should have a lifetime constraint of 'a on\n@@ -237,7 +255,6 @@ pub mod dl {\n         FreeLibrary(handle as *libc::c_void); ()\n     }\n \n-    #[link_name = \"kernel32\"]\n     extern \"system\" {\n         fn SetLastError(error: libc::size_t);\n         fn LoadLibraryW(name: *libc::c_void) -> *libc::c_void;"}, {"sha": "a6e17e73322ec9e34183392ef7c688946751b3ab", "filename": "src/test/auxiliary/syntax-extension-with-dll-deps-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-1.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// force-host\n+\n+#![crate_type = \"dylib\"]\n+\n+pub fn the_answer() -> int {\n+    2\n+}"}, {"sha": "8156e7f0e348dd46b8576cd5f0df967e73e917fc", "filename": "src/test/auxiliary/syntax-extension-with-dll-deps-2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"dylib\"]\n+#![feature(macro_registrar, quote, globs)]\n+\n+extern crate other = \"syntax-extension-with-dll-deps-1\";\n+extern crate syntax;\n+\n+use syntax::ast::{Name, TokenTree, Item, MetaItem};\n+use syntax::codemap::Span;\n+use syntax::ext::base::*;\n+use syntax::parse::token;\n+\n+#[macro_registrar]\n+pub fn macro_registrar(register: |Name, SyntaxExtension|) {\n+    register(token::intern(\"foo\"),\n+        NormalTT(~BasicMacroExpander {\n+            expander: expand_foo,\n+            span: None,\n+        },\n+        None));\n+}\n+\n+fn expand_foo(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> ~MacResult {\n+    let answer = other::the_answer();\n+    MacExpr::new(quote_expr!(cx, $answer))\n+}"}, {"sha": "efae04ea4fc7a017b951a326500e7b97ad9a4de9", "filename": "src/test/run-pass-fulldeps/syntax-extension-with-dll-deps.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a367c62cd52b11d74f3810035cd25c368a3fe9e/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-with-dll-deps.rs?ref=1a367c62cd52b11d74f3810035cd25c368a3fe9e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:syntax-extension-with-dll-deps-1.rs\n+// aux-build:syntax-extension-with-dll-deps-2.rs\n+// ignore-stage1\n+\n+#![feature(phase)]\n+\n+#[phase(syntax)]\n+extern crate extension = \"syntax-extension-with-dll-deps-2\";\n+\n+fn main() {\n+    foo!();\n+}"}]}