{"sha": "09c4013ec01b5eafc436cb9369a81036297379c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzQwMTNlYzAxYjVlYWZjNDM2Y2I5MzY5YTgxMDM2Mjk3Mzc5YzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T19:02:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T19:02:29Z"}, "message": "internal: switch some tests to minicore", "tree": {"sha": "219913471d49c6d7d595ee91d5e4bd0a51f00c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219913471d49c6d7d595ee91d5e4bd0a51f00c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c4013ec01b5eafc436cb9369a81036297379c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c4013ec01b5eafc436cb9369a81036297379c1", "html_url": "https://github.com/rust-lang/rust/commit/09c4013ec01b5eafc436cb9369a81036297379c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c4013ec01b5eafc436cb9369a81036297379c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee13e895e337d01ea283a94b7896fddc0a922cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee13e895e337d01ea283a94b7896fddc0a922cb8", "html_url": "https://github.com/rust-lang/rust/commit/ee13e895e337d01ea283a94b7896fddc0a922cb8"}], "stats": {"total": 129, "additions": 59, "deletions": 70}, "files": [{"sha": "abd9c385aee8990d2d2cd98239dbcf3146134451", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=09c4013ec01b5eafc436cb9369a81036297379c1", "patch": "@@ -975,37 +975,33 @@ fn param_overrides_fn() {\n fn lifetime_from_chalk_during_deref() {\n     check_types(\n         r#\"\n-        #[lang = \"deref\"]\n-        pub trait Deref {\n-            type Target;\n-        }\n-\n-        struct Box<T: ?Sized> {}\n-        impl<T> Deref for Box<T> {\n-            type Target = T;\n+//- minicore: deref\n+struct Box<T: ?Sized> {}\n+impl<T> core::ops::Deref for Box<T> {\n+    type Target = T;\n \n-            fn deref(&self) -> &Self::Target {\n-                loop {}\n-            }\n-        }\n+    fn deref(&self) -> &Self::Target {\n+        loop {}\n+    }\n+}\n \n-        trait Iterator {\n-            type Item;\n-        }\n+trait Iterator {\n+    type Item;\n+}\n \n-        pub struct Iter<'a, T: 'a> {\n-            inner: Box<dyn IterTrait<'a, T, Item = &'a T> + 'a>,\n-        }\n+pub struct Iter<'a, T: 'a> {\n+    inner: Box<dyn IterTrait<'a, T, Item = &'a T> + 'a>,\n+}\n \n-        trait IterTrait<'a, T: 'a>: Iterator<Item = &'a T> {\n-            fn clone_box(&self);\n-        }\n+trait IterTrait<'a, T: 'a>: Iterator<Item = &'a T> {\n+    fn clone_box(&self);\n+}\n \n-        fn clone_iter<T>(s: Iter<T>) {\n-            s.inner.clone_box();\n-          //^^^^^^^^^^^^^^^^^^^ ()\n-        }\n-        \"#,\n+fn clone_iter<T>(s: Iter<T>) {\n+    s.inner.clone_box();\n+    //^^^^^^^^^^^^^^^^^^^ ()\n+}\n+\"#,\n     )\n }\n "}, {"sha": "68776f3c0b56b7301b1991c770f4781b98b4bd44", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=09c4013ec01b5eafc436cb9369a81036297379c1", "patch": "@@ -2606,11 +2606,8 @@ fn f() {\n fn infer_boxed_self_receiver() {\n     check_infer(\n         r#\"\n-#[lang = \"deref\"]\n-pub trait Deref {\n-    type Target;\n-    fn deref(&self) -> &Self::Target;\n-}\n+//- minicore: deref\n+use core::ops::Deref;\n \n struct Box<T>(T);\n \n@@ -2642,40 +2639,39 @@ fn main() {\n }\n         \"#,\n         expect![[r#\"\n-            67..71 'self': &Self\n-            175..179 'self': &Box<T>\n-            259..263 'self': &Box<Foo<T>>\n-            289..291 '{}': ()\n-            313..317 'self': &Box<Foo<T>>\n-            346..348 '{}': ()\n-            368..372 'self': Box<Foo<T>>\n-            393..395 '{}': ()\n-            409..630 '{     ...r(); }': ()\n-            419..424 'boxed': Box<Foo<i32>>\n-            427..430 'Box': Box<Foo<i32>>(Foo<i32>) -> Box<Foo<i32>>\n-            427..442 'Box(Foo(0_i32))': Box<Foo<i32>>\n-            431..434 'Foo': Foo<i32>(i32) -> Foo<i32>\n-            431..441 'Foo(0_i32)': Foo<i32>\n-            435..440 '0_i32': i32\n-            453..457 'bad1': &i32\n-            460..465 'boxed': Box<Foo<i32>>\n-            460..477 'boxed....nner()': &i32\n-            487..492 'good1': &i32\n-            495..509 'Foo::get_inner': fn get_inner<i32>(&Box<Foo<i32>>) -> &i32\n-            495..517 'Foo::g...boxed)': &i32\n-            510..516 '&boxed': &Box<Foo<i32>>\n-            511..516 'boxed': Box<Foo<i32>>\n-            528..532 'bad2': &Foo<i32>\n-            535..540 'boxed': Box<Foo<i32>>\n-            535..551 'boxed....self()': &Foo<i32>\n-            561..566 'good2': &Foo<i32>\n-            569..582 'Foo::get_self': fn get_self<i32>(&Box<Foo<i32>>) -> &Foo<i32>\n-            569..590 'Foo::g...boxed)': &Foo<i32>\n-            583..589 '&boxed': &Box<Foo<i32>>\n-            584..589 'boxed': Box<Foo<i32>>\n-            601..606 'inner': Foo<i32>\n-            609..614 'boxed': Box<Foo<i32>>\n-            609..627 'boxed....nner()': Foo<i32>\n+            104..108 'self': &Box<T>\n+            188..192 'self': &Box<Foo<T>>\n+            218..220 '{}': ()\n+            242..246 'self': &Box<Foo<T>>\n+            275..277 '{}': ()\n+            297..301 'self': Box<Foo<T>>\n+            322..324 '{}': ()\n+            338..559 '{     ...r(); }': ()\n+            348..353 'boxed': Box<Foo<i32>>\n+            356..359 'Box': Box<Foo<i32>>(Foo<i32>) -> Box<Foo<i32>>\n+            356..371 'Box(Foo(0_i32))': Box<Foo<i32>>\n+            360..363 'Foo': Foo<i32>(i32) -> Foo<i32>\n+            360..370 'Foo(0_i32)': Foo<i32>\n+            364..369 '0_i32': i32\n+            382..386 'bad1': &i32\n+            389..394 'boxed': Box<Foo<i32>>\n+            389..406 'boxed....nner()': &i32\n+            416..421 'good1': &i32\n+            424..438 'Foo::get_inner': fn get_inner<i32>(&Box<Foo<i32>>) -> &i32\n+            424..446 'Foo::g...boxed)': &i32\n+            439..445 '&boxed': &Box<Foo<i32>>\n+            440..445 'boxed': Box<Foo<i32>>\n+            457..461 'bad2': &Foo<i32>\n+            464..469 'boxed': Box<Foo<i32>>\n+            464..480 'boxed....self()': &Foo<i32>\n+            490..495 'good2': &Foo<i32>\n+            498..511 'Foo::get_self': fn get_self<i32>(&Box<Foo<i32>>) -> &Foo<i32>\n+            498..519 'Foo::g...boxed)': &Foo<i32>\n+            512..518 '&boxed': &Box<Foo<i32>>\n+            513..518 'boxed': Box<Foo<i32>>\n+            530..535 'inner': Foo<i32>\n+            538..543 'boxed': Box<Foo<i32>>\n+            538..556 'boxed....nner()': Foo<i32>\n         \"#]],\n     );\n }"}, {"sha": "fb13e3ac5ddd98a439728bdc823547b5ed1189da", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c4013ec01b5eafc436cb9369a81036297379c1/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=09c4013ec01b5eafc436cb9369a81036297379c1", "patch": "@@ -2604,12 +2604,9 @@ fn test<T: Trait>() {\n fn dyn_trait_through_chalk() {\n     check_types(\n         r#\"\n+//- minicore: deref\n struct Box<T> {}\n-#[lang = \"deref\"]\n-trait Deref {\n-    type Target;\n-}\n-impl<T> Deref for Box<T> {\n+impl<T> core::ops::Deref for Box<T> {\n     type Target = T;\n }\n trait Trait {"}]}