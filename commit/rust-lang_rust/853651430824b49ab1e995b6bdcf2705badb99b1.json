{"sha": "853651430824b49ab1e995b6bdcf2705badb99b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MzY1MTQzMDgyNGI0OWFiMWU5OTViNmJkY2YyNzA1YmFkYjk5YjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-25T19:24:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-25T19:41:24Z"}, "message": "Rustup to rustc 1.40.0-nightly (10a52c25c 2019-10-24)", "tree": {"sha": "16b1ef9073026db0621a420a674123a26f03cefe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b1ef9073026db0621a420a674123a26f03cefe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853651430824b49ab1e995b6bdcf2705badb99b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853651430824b49ab1e995b6bdcf2705badb99b1", "html_url": "https://github.com/rust-lang/rust/commit/853651430824b49ab1e995b6bdcf2705badb99b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853651430824b49ab1e995b6bdcf2705badb99b1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda5ea883a2191b16e08ba1a455a5776acbe57d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda5ea883a2191b16e08ba1a455a5776acbe57d0", "html_url": "https://github.com/rust-lang/rust/commit/dda5ea883a2191b16e08ba1a455a5776acbe57d0"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "e0a33638139d292282f3ed4dffe545dce77184cc", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -52,7 +52,7 @@ cranelift-simplejit = { git = \"https://github.com/CraneStation/cranelift.git\" }\n # By compiling dependencies with optimizations, performing tests gets much faster.\n opt-level = 3\n \n-[profile.dev.overrides.\"rustc_codegen_cranelift\"]\n+[profile.dev.package.rustc_codegen_cranelift]\n # Disabling optimizations for cg_clif itself makes compilation after a change faster.\n opt-level = 0\n \n@@ -62,14 +62,14 @@ opt-level = 0\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.cranelift-codegen-meta]\n+[profile.dev.package.cranelift-codegen-meta]\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.syn]\n+[profile.dev.package.syn]\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.synstructure]\n+[profile.dev.package.synstructure]\n opt-level = 0\n debug = false"}, {"sha": "1d8942c6ab2c9fc3c4e0e22b361dcae8c358a4e0", "filename": "example/mini_core.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -1,6 +1,6 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs\n+    untagged_unions, decl_macro, rustc_attrs, transparent_unions\n )]\n #![no_core]\n #![allow(dead_code)]\n@@ -448,10 +448,17 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-#[allow(unions_with_drop_fields)]\n+#[lang = \"manually_drop\"]\n+#[repr(transparent)]\n+pub struct ManuallyDrop<T: ?Sized> {\n+    pub value: T,\n+}\n+\n+#[lang = \"maybe_uninit\"]\n+#[repr(transparent)]\n pub union MaybeUninit<T> {\n     pub uninit: (),\n-    pub value: T,\n+    pub value: ManuallyDrop<T>,\n }\n \n pub mod intrinsics {"}, {"sha": "fdc71af443748d792d5b9bd449cfc2e51669f437", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -196,7 +196,7 @@ fn main() {\n         }\n \n         unsafe fn uninitialized<T>() -> T {\n-            MaybeUninit { uninit: () }.value\n+            MaybeUninit { uninit: () }.value.value\n         }\n \n         zeroed::<(u8, u8)>();"}, {"sha": "c76e2e2f8b42d64a6a30bb3d70117e79f96ef2fb", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -12,18 +12,18 @@ index 8b76080..9e65de2 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n @@ -52,7 +52,7 @@ use std::fmt;\n- use std::fs::File;\n- use std::io;\n- use std::io::prelude::*;\n--use std::panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo};\n-+use std::panic::{self, PanicInfo};\n- use std::path::PathBuf;\n- use std::process;\n- use std::process::{ExitStatus, Command, Termination};\n+     env,\n+     io,\n+     io::prelude::Write,\n+-    panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo},\n++    panic::{self, PanicInfo},\n+     process,\n+     process::{Command, Termination},\n+     sync::mpsc::{channel, Sender},\n @@ -1493,7 +1493,7 @@ pub fn run_test(\n      fn run_test_inner(\n          desc: TestDesc,\n-         monitor_ch: Sender<MonitorMsg>,\n+         monitor_ch: Sender<CompletedTest>,\n -        testfn: Box<dyn FnOnce() + Send>,\n +        testfn: Box<impl FnOnce() + Send + 'static>,\n          opts: TestRunOpts,\n@@ -65,8 +65,8 @@ index 8b76080..9e65de2 100644\n      report_time: bool,\n -    testfn: Box<dyn FnOnce() + Send>,\n +    testfn: Box<impl FnOnce() + Send + 'static>,\n-     monitor_ch: Sender<MonitorMsg>,\n-     time_opts: Option<TestTimeOptions>,\n+     monitor_ch: Sender<CompletedTest>,\n+     time_opts: Option<time::TestTimeOptions>,\n  ) {\n      // Buffer for capturing standard I/O\n      let data = Arc::new(Mutex::new(Vec::new()));\n@@ -75,12 +75,12 @@ index 8b76080..9e65de2 100644\n          None\n      };\n -    let result = catch_unwind(AssertUnwindSafe(testfn));\n-+    let result = Ok::<(), Box<dyn Any + Send>>(testfn());\n++    let result = Ok::<(), Box<dyn std::any::Any + Send>>(testfn());\n      let exec_time = start.map(|start| {\n          let duration = start.elapsed();\n          TestExecTime(duration)\n @@ -1688,10 +1676,10 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n-     monitor_ch.send((desc.clone(), result, exec_time, test_output)).unwrap();\n+     monitor_ch.send(message).unwrap();\n  }\n  \n  fn run_test_in_spawned_subprocess("}, {"sha": "2d9d1d9f908bda28597d9e81c36f119ba1f6a4ae", "filename": "prepare.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/prepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/prepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare.sh?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash --verbose\n set -e\n \n-rustup component add rust-src\n+rustup component add rust-src rustc-dev\n ./build_sysroot/prepare_sysroot_src.sh\n cargo install hyperfine || echo \"Skipping hyperfine install\"\n "}, {"sha": "c3563dc0533f9e11deaaf1b8495c70b81cdf403d", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -286,7 +286,9 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n     pub caches: &'clif mut Caches<'tcx>,\n-    pub source_info_set: indexmap::IndexSet<SourceInfo>,\n+\n+    // FIXME switch back to `SourceInfo`, once it derives `Eq` and `Hash` again.\n+    pub source_info_set: indexmap::IndexSet<(Span, mir::SourceScope)>,\n }\n \n impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n@@ -365,7 +367,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {\n-        let (index, _) = self.source_info_set.insert_full(source_info);\n+        let (index, _) = self.source_info_set.insert_full((source_info.span, source_info.scope));\n         self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n }"}, {"sha": "e6d133c64510cb4bd7245ad3b0fb1953daa01995", "filename": "src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853651430824b49ab1e995b6bdcf2705badb99b1/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853651430824b49ab1e995b6bdcf2705badb99b1/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=853651430824b49ab1e995b6bdcf2705badb99b1", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         tcx: TyCtxt,\n         context: &Context,\n         isa: &dyn cranelift::codegen::isa::TargetIsa,\n-        source_info_set: &indexmap::IndexSet<SourceInfo>,\n+        source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n     ) {\n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n@@ -292,7 +292,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 line_program.row().address_offset = offset as u64;\n                 if !srcloc.is_default() {\n                     let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n-                    create_row_for_span(line_program, source_info.span);\n+                    create_row_for_span(line_program, source_info.0);\n                 } else {\n                     create_row_for_span(line_program, self.mir_span);\n                 }"}]}