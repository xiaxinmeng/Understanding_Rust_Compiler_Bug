{"sha": "9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMDNlMWFiNmEyZTI2ZWM4ODFiOWZmMjk3MDk1YTgzNDNlYmM3ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-26T18:32:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-26T18:32:19Z"}, "message": "Auto merge of #38008 - bluss:rustbuild-benches, r=alexcrichton\n\nAdd rustbuild command `bench`\n\nAdd command bench to rustbuild, so that `./x.py bench <path>` can compile and run benchmarks.\n\n`./x.py bench --stage 1 src/libcollections` and `./x.py bench --stage 1 src/libstd` should both compile well. Just `./x.py bench` runs all benchmarks for the libstd crates.\n\nFixes #37897", "tree": {"sha": "66e0d794f8b6e754547581cbf212e22c47ea7594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e0d794f8b6e754547581cbf212e22c47ea7594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "html_url": "https://github.com/rust-lang/rust/commit/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e39c0ede524e491cfd1898649115e03d4b22b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e39c0ede524e491cfd1898649115e03d4b22b53", "html_url": "https://github.com/rust-lang/rust/commit/7e39c0ede524e491cfd1898649115e03d4b22b53"}, {"sha": "17cb7bdd8340d9f83450ebd3e58b9f76e11cc01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cb7bdd8340d9f83450ebd3e58b9f76e11cc01b", "html_url": "https://github.com/rust-lang/rust/commit/17cb7bdd8340d9f83450ebd3e58b9f76e11cc01b"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "150232e4ab407636fd0e5a20c2a95f26c035f349", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -15,6 +15,7 @@\n \n use std::collections::HashSet;\n use std::env;\n+use std::fmt;\n use std::fs;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n@@ -26,6 +27,34 @@ use util::{self, dylib_path, dylib_path_var};\n \n const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n \n+/// The two modes of the test runner; tests or benchmarks.\n+#[derive(Copy, Clone)]\n+pub enum TestKind {\n+    /// Run `cargo test`\n+    Test,\n+    /// Run `cargo bench`\n+    Bench,\n+}\n+\n+impl TestKind {\n+    // Return the cargo subcommand for this test kind\n+    fn subcommand(self) -> &'static str {\n+        match self {\n+            TestKind::Test => \"test\",\n+            TestKind::Bench => \"bench\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for TestKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(match *self {\n+            TestKind::Test => \"Testing\",\n+            TestKind::Bench => \"Benchmarking\",\n+        })\n+    }\n+}\n+\n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n /// This tool in `src/tools` will verify the validity of all our links in the\n@@ -278,6 +307,7 @@ pub fn krate(build: &Build,\n              compiler: &Compiler,\n              target: &str,\n              mode: Mode,\n+             test_kind: TestKind,\n              krate: Option<&str>) {\n     let (name, path, features, root) = match mode {\n         Mode::Libstd => {\n@@ -291,15 +321,15 @@ pub fn krate(build: &Build,\n         }\n         _ => panic!(\"can only test libraries\"),\n     };\n-    println!(\"Testing {} stage{} ({} -> {})\", name, compiler.stage,\n+    println!(\"{} {} stage{} ({} -> {})\", test_kind, name, compiler.stage,\n              compiler.host, target);\n \n     // Build up the base `cargo test` command.\n     //\n     // Pass in some standard flags then iterate over the graph we've discovered\n     // in `cargo metadata` with the maps above and figure out what `-p`\n     // arguments need to get passed.\n-    let mut cargo = build.cargo(compiler, mode, target, \"test\");\n+    let mut cargo = build.cargo(compiler, mode, target, test_kind.subcommand());\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(path).join(\"Cargo.toml\"))\n          .arg(\"--features\").arg(features);"}, {"sha": "a7d80e4cdc4668df0118e0bcfab8d5b8becf9c73", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -49,6 +49,10 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n         test_args: Vec<String>,\n     },\n+    Bench {\n+        paths: Vec<PathBuf>,\n+        test_args: Vec<String>,\n+    },\n     Clean,\n     Dist {\n         install: bool,\n@@ -141,6 +145,7 @@ Arguments:\n                    command == \"dist\" ||\n                    command == \"doc\" ||\n                    command == \"test\" ||\n+                   command == \"bench\" ||\n                    command == \"clean\"  {\n                     println!(\"Available invocations:\");\n                     if args.iter().any(|a| a == \"-v\") {\n@@ -163,6 +168,7 @@ println!(\"\\\n Subcommands:\n     build       Compile either the compiler or libraries\n     test        Build and run some test suites\n+    bench       Build and run some benchmarks\n     doc         Build documentation\n     clean       Clean out build directories\n     dist        Build and/or install distribution artifacts\n@@ -210,6 +216,14 @@ To learn more about a subcommand, run `./x.py <command> -h`\n                     test_args: m.opt_strs(\"test-args\"),\n                 }\n             }\n+            \"bench\" => {\n+                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n+                m = parse(&opts);\n+                Subcommand::Bench {\n+                    paths: remaining_as_path(&m),\n+                    test_args: m.opt_strs(\"test-args\"),\n+                }\n+            }\n             \"clean\" => {\n                 m = parse(&opts);\n                 if m.free.len() > 0 {\n@@ -259,7 +273,8 @@ To learn more about a subcommand, run `./x.py <command> -h`\n impl Subcommand {\n     pub fn test_args(&self) -> Vec<&str> {\n         match *self {\n-            Subcommand::Test { ref test_args, .. } => {\n+            Subcommand::Test { ref test_args, .. } |\n+            Subcommand::Bench { ref test_args, .. } => {\n                 test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n             }\n             _ => Vec::new(),"}, {"sha": "03c74ff081ae0aa3768deb1462cf91a93f04ae80", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -141,6 +141,7 @@ struct Crate {\n     doc_step: String,\n     build_step: String,\n     test_step: String,\n+    bench_step: String,\n }\n \n /// The various \"modes\" of invoking Cargo.\n@@ -457,7 +458,8 @@ impl Build {\n         if self.config.verbose || self.flags.verbose {\n             cargo.arg(\"-v\");\n         }\n-        if self.config.rust_optimize {\n+        // FIXME: cargo bench does not accept `--release`\n+        if self.config.rust_optimize && cmd != \"bench\" {\n             cargo.arg(\"--release\");\n         }\n         if self.config.vendor {"}, {"sha": "8befb105ff618974e5650bf7977fd7d720578eed", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -70,6 +70,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n                 build_step: format!(\"build-crate-{}\", package.name),\n                 doc_step: format!(\"doc-crate-{}\", package.name),\n                 test_step: format!(\"test-crate-{}\", package.name),\n+                bench_step: format!(\"bench-crate-{}\", package.name),\n                 name: package.name,\n                 deps: Vec::new(),\n                 path: path,"}, {"sha": "4c1f58e52d96078a50321ee9e637b9ac4fc084a3", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -11,7 +11,7 @@\n use std::collections::{HashMap, HashSet};\n use std::mem;\n \n-use check;\n+use check::{self, TestKind};\n use compile;\n use dist;\n use doc;\n@@ -268,37 +268,55 @@ pub fn build_rules(build: &Build) -> Rules {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n-                                        Mode::Libstd, Some(&krate.name)));\n+                                        Mode::Libstd, TestKind::Test,\n+                                        Some(&krate.name)));\n     }\n     rules.test(\"check-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n          .default(true)\n-         .run(move |s| check::krate(build, &s.compiler(), s.target, Mode::Libstd,\n-                               None));\n+         .run(move |s| check::krate(build, &s.compiler(), s.target,\n+                                    Mode::Libstd, TestKind::Test, None));\n+\n+    // std benchmarks\n+    for (krate, path, _default) in krates(\"std_shim\") {\n+        rules.bench(&krate.bench_step, path)\n+             .dep(|s| s.name(\"libtest\"))\n+             .run(move |s| check::krate(build, &s.compiler(), s.target,\n+                                        Mode::Libstd, TestKind::Bench,\n+                                        Some(&krate.name)));\n+    }\n+    rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"libtest\"))\n+         .default(true)\n+         .run(move |s| check::krate(build, &s.compiler(), s.target,\n+                                    Mode::Libstd, TestKind::Bench, None));\n+\n     for (krate, path, _default) in krates(\"test_shim\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n-                                        Mode::Libtest, Some(&krate.name)));\n+                                        Mode::Libtest, TestKind::Test,\n+                                        Some(&krate.name)));\n     }\n     rules.test(\"check-test-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n          .default(true)\n-         .run(move |s| check::krate(build, &s.compiler(), s.target, Mode::Libtest,\n-                               None));\n+         .run(move |s| check::krate(build, &s.compiler(), s.target,\n+                                    Mode::Libtest, TestKind::Test, None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"librustc\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n-                                        Mode::Librustc, Some(&krate.name)));\n+                                        Mode::Librustc, TestKind::Test,\n+                                        Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"librustc\"))\n          .default(true)\n          .host(true)\n-         .run(move |s| check::krate(build, &s.compiler(), s.target, Mode::Librustc,\n-                               None));\n+         .run(move |s| check::krate(build, &s.compiler(), s.target,\n+                                    Mode::Librustc, TestKind::Test, None));\n \n     rules.test(\"check-linkchecker\", \"src/tools/linkchecker\")\n          .dep(|s| s.name(\"tool-linkchecker\"))\n@@ -449,6 +467,7 @@ struct Rule<'a> {\n enum Kind {\n     Build,\n     Test,\n+    Bench,\n     Dist,\n     Doc,\n }\n@@ -538,6 +557,11 @@ impl<'a> Rules<'a> {\n         self.rule(name, path, Kind::Test)\n     }\n \n+    fn bench<'b>(&'b mut self, name: &'a str, path: &'a str)\n+                -> RuleBuilder<'a, 'b> {\n+        self.rule(name, path, Kind::Bench)\n+    }\n+\n     fn doc<'b>(&'b mut self, name: &'a str, path: &'a str)\n                -> RuleBuilder<'a, 'b> {\n         self.rule(name, path, Kind::Doc)\n@@ -583,6 +607,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n             \"test\" => Kind::Test,\n+            \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n             _ => return,\n         };\n@@ -606,6 +631,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, test_args: _ } => (Kind::Test, &paths[..]),\n+            Subcommand::Bench { ref paths, test_args: _ } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { install } => {\n                 if install {\n                     return vec![self.sbuild.name(\"install\")]"}, {"sha": "3056977d224cbdfb989fe0506987915b55816688", "filename": "src/libcollections/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcollections%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcollections%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -15,3 +15,7 @@ rustc_unicode = { path = \"../librustc_unicode\" }\n [[test]]\n name = \"collectionstest\"\n path = \"../libcollectionstest/lib.rs\"\n+\n+[[bench]]\n+name = \"collectionstest\"\n+path = \"../libcollectionstest/lib.rs\""}, {"sha": "79570dc025219efb8e352777d95d53cc7b32d081", "filename": "src/libcompiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -8,6 +8,7 @@ version = \"0.0.0\"\n name = \"compiler_builtins\"\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "a72c712ad1733c4d29ae1f5f688092acf69b5526", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -7,7 +7,12 @@ version = \"0.0.0\"\n name = \"core\"\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [[test]]\n name = \"coretest\"\n path = \"../libcoretest/lib.rs\"\n+\n+[[bench]]\n+name = \"coretest\"\n+path = \"../libcoretest/lib.rs\""}, {"sha": "d90d2864813c9b3f094dd73cc9b33b611bf0d2d1", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -6,6 +6,7 @@ version = \"0.0.0\"\n [lib]\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "90c16fff6f1f169d5dcf84f12349828cbcefaa7d", "filename": "src/libpanic_unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -6,6 +6,7 @@ version = \"0.0.0\"\n [lib]\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n alloc = { path = \"../liballoc\" }"}, {"sha": "e2b4afb2a5150f7330a3032f06c4ddeb69b54dc5", "filename": "src/librustc_unicode/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibrustc_unicode%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibrustc_unicode%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_unicode\"\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "36f361b7238948690fd1898b74ded2adbb032890", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -8,6 +8,7 @@ build = \"build.rs\"\n name = \"unwind\"\n path = \"lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "e501766fbed156b65001b18e18b462e0d8f836cb", "filename": "src/rustc/libc_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Frustc%2Flibc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9003e1ab6a2e26ec881b9ff297095a8343ebc7d1/src%2Frustc%2Flibc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flibc_shim%2FCargo.toml?ref=9003e1ab6a2e26ec881b9ff297095a8343ebc7d1", "patch": "@@ -16,6 +16,7 @@ build = \"build.rs\"\n name = \"libc\"\n path = \"../../liblibc/src/lib.rs\"\n test = false\n+bench = false\n \n [dependencies]\n core = { path = \"../../libcore\" }"}]}