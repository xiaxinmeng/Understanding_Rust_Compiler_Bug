{"sha": "7a4743fab02ae9e1cb8523f91997b3f6d8d02518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNDc0M2ZhYjAyYWU5ZTFjYjg1MjNmOTE5OTdiM2Y2ZDhkMDI1MTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T14:54:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T14:54:10Z"}, "message": "review comment: use RFC example for compile-fail/issue28498-reject-ex1.rs\n\n(It is not *exactly* the text from the RFC, but the only thing it adds\nis a call to a no-op function that is just an attempt to make it clear\nwhere the potential for impl specialization comes from.)", "tree": {"sha": "f514f781074cf6e9d5a533e262e83e3b11cf9fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f514f781074cf6e9d5a533e262e83e3b11cf9fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4743fab02ae9e1cb8523f91997b3f6d8d02518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4743fab02ae9e1cb8523f91997b3f6d8d02518", "html_url": "https://github.com/rust-lang/rust/commit/7a4743fab02ae9e1cb8523f91997b3f6d8d02518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4743fab02ae9e1cb8523f91997b3f6d8d02518/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5708f44b368ae8cb5a4fdb1df222b2adef1c3bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5708f44b368ae8cb5a4fdb1df222b2adef1c3bd0", "html_url": "https://github.com/rust-lang/rust/commit/5708f44b368ae8cb5a4fdb1df222b2adef1c3bd0"}], "stats": {"total": 62, "additions": 18, "deletions": 44}, "files": [{"sha": "cee7c57c2019fea29004764a1dab7b5be30eb87b", "filename": "src/test/compile-fail/issue28498-reject-ex1.rs", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7a4743fab02ae9e1cb8523f91997b3f6d8d02518/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4743fab02ae9e1cb8523f91997b3f6d8d02518/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs?ref=7a4743fab02ae9e1cb8523f91997b3f6d8d02518", "patch": "@@ -10,65 +10,39 @@\n \n // Example taken from RFC 1238 text\n \n-// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md#examples-of-code-that-will-start-to-be-rejected\n+// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n+//     #examples-of-code-that-will-start-to-be-rejected\n \n // Compare against test/run-pass/issue28498-must-work-ex2.rs\n \n use std::cell::Cell;\n \n-#[derive(Copy, Clone, Debug)]\n-enum Validity { Valid, Invalid }\n-use self::Validity::{Valid, Invalid};\n+struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n \n-struct Abstract<T> {\n-    id: u32,\n-    nbor: Cell<Option<T>>,\n-    valid: Validity,\n-    observe: fn(&Cell<Option<T>>) -> (u32, Validity),\n-}\n-\n-#[derive(Copy, Clone)]\n-struct Neighbor<'a>(&'a Abstract<Neighbor<'a>>);\n-\n-fn observe(c: &Cell<Option<Neighbor>>) -> (u32, Validity) {\n-    let r = c.get().unwrap().0;\n-    (r.id, r.valid)\n-}\n-\n-impl<'a> Abstract<Neighbor<'a>> {\n-    fn new(id: u32) -> Self {\n-        Abstract {\n-            id: id,\n-            nbor: Cell::new(None),\n-            valid: Valid,\n-            observe: observe\n-        }\n-    }\n-}\n+struct Foo<T> { data: Vec<T> }\n \n-struct Foo<T> {\n-    data: Vec<T>,\n+fn potentially_specialized_wrt_t<T>(t: &T) {\n+    // Hypothetical code that does one thing for generic T and then is\n+    // specialized for T == Concrete (and the specialized form can\n+    // then access a reference held in concrete tuple).\n+    //\n+    // (We don't have specialization yet, but we want to allow for it\n+    // in the future.)\n }\n \n-impl<T> Drop for Abstract<T> {\n+impl<T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        let (nbor_id, nbor_valid) = (self.observe)(&self.nbor);\n-        println!(\"dropping element {} ({:?}), observed neighbor {} ({:?})\",\n-                 self.id,\n-                 self.valid,\n-                 nbor_id,\n-                 nbor_valid);\n-        self.valid = Invalid;\n+        potentially_specialized_wrt_t(&self.data[0])\n     }\n }\n \n fn main() {\n-    let mut foo: Foo<Abstract<Neighbor>> = Foo {  data: Vec::new() };\n-    foo.data.push(Abstract::new(0));\n-    foo.data.push(Abstract::new(1));\n+    let mut foo = Foo {  data: Vec::new() };\n+    foo.data.push(Concrete(0, Cell::new(None)));\n+    foo.data.push(Concrete(0, Cell::new(None)));\n \n-    foo.data[0].nbor.set(Some(Neighbor(&foo.data[1])));\n+    foo.data[0].1.set(Some(&foo.data[1]));\n     //~^ ERROR `foo.data` does not live long enough\n-    foo.data[1].nbor.set(Some(Neighbor(&foo.data[0])));\n+    foo.data[1].1.set(Some(&foo.data[0]));\n     //~^ ERROR `foo.data` does not live long enough\n }"}]}