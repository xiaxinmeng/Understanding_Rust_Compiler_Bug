{"sha": "b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGM2ZTYyMGI2ODY2NWExZDBhYTc5ZWUyZTJlZDJkZDJiNGQxMzA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-14T21:29:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-14T21:29:52Z"}, "message": "Rollup merge of #70947 - RalfJung:ctfe-no-read-mut-global, r=oli-obk\n\ntighten CTFE safety net for accesses to globals\n\nPreviously, we only rejected reading from all statics. Now we also reject reading from any mutable global. Mutable globals are the true culprit here as their run-time value might be different from their compile-time values. Statics are just the approximation we use for that so far.\n\nAlso refactor the code a bit to make it clearer what is being checked and allowed.\n\nr? @oli-obk", "tree": {"sha": "1a46683721bce285b2bbcb49c7f60066483e6cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a46683721bce285b2bbcb49c7f60066483e6cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelitQCRBK7hj4Ov3rIwAAdHIIAEI9fu3L9UIenLRzqAoeENvn\nRAg+capOjiPnwfoLHXWDL+BDb60jxhlkK/OTsMKKBcaJUd2CQroSC59Z02YZ8kN9\nxAVSR79ecZTxstVpTtL7QZ5AoHp+aPur61M3GoRlFj4WAzEAj0XtIZCJvQ3LL1gE\nG7INBGvlrA8XzL2/gN1rKUKhn5YSN3fQj7f8BxGp7kkmx5OOOKOhJLtX0jm3aimS\nQMbf+JvFV003bQo6KoSFfDeTMd0rUwDOAuwNIVvQF272rhpGMjrNietknurn9xjR\nrXfgGIs7BQJjnNnHfuZF47GQp2GFgCt8rrr/vYtKU/V+Mno9vAu2BoVpLifeZS4=\n=xkA2\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a46683721bce285b2bbcb49c7f60066483e6cfb\nparent 15ab586b495376bd8e1a591e8a80e6f976251eb5\nparent a1f7e9a7250aea6f415fd62e88bbcb848baf73ff\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586899792 +0200\ncommitter GitHub <noreply@github.com> 1586899792 +0200\n\nRollup merge of #70947 - RalfJung:ctfe-no-read-mut-global, r=oli-obk\n\ntighten CTFE safety net for accesses to globals\n\nPreviously, we only rejected reading from all statics. Now we also reject reading from any mutable global. Mutable globals are the true culprit here as their run-time value might be different from their compile-time values. Statics are just the approximation we use for that so far.\n\nAlso refactor the code a bit to make it clearer what is being checked and allowed.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130", "html_url": "https://github.com/rust-lang/rust/commit/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ab586b495376bd8e1a591e8a80e6f976251eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ab586b495376bd8e1a591e8a80e6f976251eb5", "html_url": "https://github.com/rust-lang/rust/commit/15ab586b495376bd8e1a591e8a80e6f976251eb5"}, {"sha": "a1f7e9a7250aea6f415fd62e88bbcb848baf73ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f7e9a7250aea6f415fd62e88bbcb848baf73ff", "html_url": "https://github.com/rust-lang/rust/commit/a1f7e9a7250aea6f415fd62e88bbcb848baf73ff"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "a1ab9a1c342c17a8ebc645a3250cedaaa7c08af9", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=b5dc6e620b68665a1d0aa79ee2e2ed2dd2b4d130", "patch": "@@ -353,15 +353,30 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n         static_def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n-        if is_write && allocation.mutability == Mutability::Not {\n-            Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n-        } else if is_write {\n-            Err(ConstEvalErrKind::ModifiedGlobal.into())\n-        } else if memory_extra.can_access_statics || static_def_id.is_none() {\n-            // `static_def_id.is_none()` indicates this is not a static, but a const or so.\n-            Ok(())\n+        if is_write {\n+            // Write access. These are never allowed, but we give a targeted error message.\n+            if allocation.mutability == Mutability::Not {\n+                Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n+            } else {\n+                Err(ConstEvalErrKind::ModifiedGlobal.into())\n+            }\n         } else {\n-            Err(ConstEvalErrKind::ConstAccessesStatic.into())\n+            // Read access. These are usually allowed, with some exceptions.\n+            if memory_extra.can_access_statics {\n+                // Machine configuration allows us read from anything (e.g., `static` initializer).\n+                Ok(())\n+            } else if static_def_id.is_some() {\n+                // Machine configuration does not allow us to read statics\n+                // (e.g., `const` initializer).\n+                Err(ConstEvalErrKind::ConstAccessesStatic.into())\n+            } else {\n+                // Immutable global, this read is fine.\n+                // But make sure we never accept a read from something mutable, that would be\n+                // unsound. The reason is that as the content of this allocation may be different\n+                // now and at run-time, so if we permit reading now we might return the wrong value.\n+                assert_eq!(allocation.mutability, Mutability::Not);\n+                Ok(())\n+            }\n         }\n     }\n }"}]}