{"sha": "81e91980dd87f62bdd9013f99101f6599f067e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTkxOTgwZGQ4N2Y2MmJkZDkwMTNmOTkxMDFmNjU5OWYwNjdlM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T22:05:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T22:05:18Z"}, "message": "simplify", "tree": {"sha": "0e5a8cb3e9ef348409b0aec82a34604d690162a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5a8cb3e9ef348409b0aec82a34604d690162a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e91980dd87f62bdd9013f99101f6599f067e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e91980dd87f62bdd9013f99101f6599f067e3b", "html_url": "https://github.com/rust-lang/rust/commit/81e91980dd87f62bdd9013f99101f6599f067e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e91980dd87f62bdd9013f99101f6599f067e3b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c13e223345e4ff14cc884fc5b785c925f0e0b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c13e223345e4ff14cc884fc5b785c925f0e0b61", "html_url": "https://github.com/rust-lang/rust/commit/7c13e223345e4ff14cc884fc5b785c925f0e0b61"}], "stats": {"total": 76, "additions": 22, "deletions": 54}, "files": [{"sha": "476cf117f170e71e369c90d0ba167ba8487680fe", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 22, "deletions": 54, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/81e91980dd87f62bdd9013f99101f6599f067e3b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e91980dd87f62bdd9013f99101f6599f067e3b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=81e91980dd87f62bdd9013f99101f6599f067e3b", "patch": "@@ -89,27 +89,6 @@ fn module_from_source(\n     )\n }\n \n-pub fn const_from_source(\n-    db: &impl HirDatabase,\n-    file_id: FileId,\n-    const_def: &ast::ConstDef,\n-) -> Option<Const> {\n-    let module = module_from_child_node(db, file_id, const_def.syntax())?;\n-    let res = const_from_module(db, module, const_def);\n-    Some(res)\n-}\n-\n-pub fn const_from_module(\n-    db: &impl HirDatabase,\n-    module: Module,\n-    const_def: &ast::ConstDef,\n-) -> Const {\n-    let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n-    let ctx = LocationCtx::new(db, module, file_id);\n-    Const { id: ctx.to_def(const_def) }\n-}\n-\n pub fn function_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Function> {\n     let file = db.parse(position.file_id);\n     let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)?;\n@@ -157,27 +136,6 @@ pub fn struct_from_module(\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n-pub fn static_from_source(\n-    db: &impl HirDatabase,\n-    file_id: FileId,\n-    static_def: &ast::StaticDef,\n-) -> Option<Static> {\n-    let module = module_from_child_node(db, file_id, static_def.syntax())?;\n-    let res = static_from_module(db, module, static_def);\n-    Some(res)\n-}\n-\n-pub fn static_from_module(\n-    db: &impl HirDatabase,\n-    module: Module,\n-    static_def: &ast::StaticDef,\n-) -> Static {\n-    let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n-    let ctx = LocationCtx::new(db, module, file_id);\n-    Static { id: ctx.to_def(static_def) }\n-}\n-\n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n     let (file_id, _) = module.definition_source(db);\n     let file_id = file_id.into();\n@@ -246,6 +204,27 @@ fn try_get_resolver_for_node(\n     }\n }\n \n+pub fn def_with_body_from_child_node(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Option<DefWithBody> {\n+    let module = module_from_child_node(db, file_id, node)?;\n+    let ctx = LocationCtx::new(db, module, file_id.into());\n+    node.ancestors().find_map(|node| {\n+        if let Some(def) = ast::FnDef::cast(node) {\n+            return Some(Function { id: ctx.to_def(def) }.into());\n+        }\n+        if let Some(def) = ast::ConstDef::cast(node) {\n+            return Some(Const { id: ctx.to_def(def) }.into());\n+        }\n+        if let Some(def) = ast::StaticDef::cast(node) {\n+            return Some(Static { id: ctx.to_def(def) }.into());\n+        }\n+        None\n+    })\n+}\n+\n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n@@ -274,18 +253,7 @@ impl SourceAnalyzer {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let def_with_body = node.ancestors().find_map(|node| {\n-            if let Some(src) = ast::FnDef::cast(node) {\n-                return function_from_source(db, file_id, src).map(DefWithBody::from);\n-            }\n-            if let Some(src) = ast::StaticDef::cast(node) {\n-                return static_from_source(db, file_id, src).map(DefWithBody::from);\n-            }\n-            if let Some(src) = ast::ConstDef::cast(node) {\n-                return const_from_source(db, file_id, src).map(DefWithBody::from);\n-            }\n-            None\n-        });\n+        let def_with_body = def_with_body_from_child_node(db, file_id, node);\n         SourceAnalyzer {\n             resolver: resolver_for_node(db, file_id, node, offset),\n             body_source_map: def_with_body.map(|it| it.body_source_map(db)),"}]}