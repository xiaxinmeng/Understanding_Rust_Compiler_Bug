{"sha": "10c0b003dbfee812788ac9f753a9b28bb3996b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzBiMDAzZGJmZWU4MTI3ODhhYzlmNzUzYTliMjhiYjM5OTZiMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T01:41:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T01:41:54Z"}, "message": "Auto merge of #86848 - notriddle:notriddle/drop-dyn, r=varkor\n\nfeat(rustc_lint): add `dyn_drop`\n\nBased on the conversation in #86747.\n\nExplanation\n-----------\n\nA trait object bound of the form `dyn Drop` is most likely misleading and not what the programmer intended.\n\n`Drop` bounds do not actually indicate whether a type can be trivially dropped or not, because a composite type containing `Drop` types does not necessarily implement `Drop` itself. Na\u00efvely, one might be tempted to write a deferred drop system, to pull cleaning up memory out of a latency-sensitive code path, using `dyn Drop` trait objects. However, this breaks down e.g. when `T` is `String`, which does not implement `Drop`, but should probably be accepted.\n\nTo write a trait object bound that accepts anything, use a placeholder trait with a blanket implementation.\n\n```rust\ntrait Placeholder {}\nimpl<T> Placeholder for T {}\nfn foo(_x: Box<dyn Placeholder>) {}\n```", "tree": {"sha": "0cdadea0a7ae8e1642a981c0962fdae040921438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cdadea0a7ae8e1642a981c0962fdae040921438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c0b003dbfee812788ac9f753a9b28bb3996b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c0b003dbfee812788ac9f753a9b28bb3996b26", "html_url": "https://github.com/rust-lang/rust/commit/10c0b003dbfee812788ac9f753a9b28bb3996b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c0b003dbfee812788ac9f753a9b28bb3996b26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b548d9f1c656953c3843693e060302c5c392d149", "url": "https://api.github.com/repos/rust-lang/rust/commits/b548d9f1c656953c3843693e060302c5c392d149", "html_url": "https://github.com/rust-lang/rust/commit/b548d9f1c656953c3843693e060302c5c392d149"}, {"sha": "e054522b01c841b5b30f40ef25615af03fcd9b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/e054522b01c841b5b30f40ef25615af03fcd9b27", "html_url": "https://github.com/rust-lang/rust/commit/e054522b01c841b5b30f40ef25615af03fcd9b27"}], "stats": {"total": 127, "additions": 122, "deletions": 5}, "files": [{"sha": "e713ce7c71bec3bf4ff1fdae9a752fbb7084bc5f", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -37,10 +37,47 @@ declare_lint! {\n     \"bounds of the form `T: Drop` are useless\"\n }\n \n+declare_lint! {\n+    /// The `dyn_drop` lint checks for trait objects with `std::ops::Drop`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo(_x: Box<dyn Drop>) {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// A trait object bound of the form `dyn Drop` is most likely misleading\n+    /// and not what the programmer intended.\n+    ///\n+    /// `Drop` bounds do not actually indicate whether a type can be trivially\n+    /// dropped or not, because a composite type containing `Drop` types does\n+    /// not necessarily implement `Drop` itself. Na\u00efvely, one might be tempted\n+    /// to write a deferred drop system, to pull cleaning up memory out of a\n+    /// latency-sensitive code path, using `dyn Drop` trait objects. However,\n+    /// this breaks down e.g. when `T` is `String`, which does not implement\n+    /// `Drop`, but should probably be accepted.\n+    ///\n+    /// To write a trait object bound that accepts anything, use a placeholder\n+    /// trait with a blanket implementation.\n+    ///\n+    /// ```rust\n+    /// trait Placeholder {}\n+    /// impl<T> Placeholder for T {}\n+    /// fn foo(_x: Box<dyn Placeholder>) {}\n+    /// ```\n+    pub DYN_DROP,\n+    Warn,\n+    \"trait objects of the form `dyn Drop` are useless\"\n+}\n+\n declare_lint_pass!(\n     /// Lint for bounds of the form `T: Drop`, which usually\n     /// indicate an attempt to emulate `std::mem::needs_drop`.\n-    DropTraitConstraints => [DROP_BOUNDS]\n+    DropTraitConstraints => [DROP_BOUNDS, DYN_DROP]\n );\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n@@ -75,4 +112,28 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n             }\n         }\n     }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n+        let bounds = match &ty.kind {\n+            hir::TyKind::TraitObject(bounds, _lifetime, _syntax) => bounds,\n+            _ => return,\n+        };\n+        for bound in &bounds[..] {\n+            let def_id = bound.trait_ref.trait_def_id();\n+            if cx.tcx.lang_items().drop_trait() == def_id {\n+                cx.struct_span_lint(DYN_DROP, bound.span, |lint| {\n+                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n+                        Some(needs_drop) => needs_drop,\n+                        None => return,\n+                    };\n+                    let msg = format!(\n+                        \"types that do not implement `Drop` can still have drop glue, consider \\\n+                        instead using `{}` to detect whether a type is trivially dropped\",\n+                        cx.tcx.def_path_str(needs_drop)\n+                    );\n+                    lint.build(&msg).emit()\n+                });\n+            }\n+        }\n+    }\n }"}, {"sha": "e1668a3f188d59dd8771267c748cf521a52f25c9", "filename": "src/test/ui/dyn-drop/dyn-drop.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -0,0 +1,16 @@\n+#![deny(dyn_drop)]\n+#![allow(bare_trait_objects)]\n+fn foo(_: Box<dyn Drop>) {} //~ ERROR\n+fn bar(_: &dyn Drop) {} //~ERROR\n+fn baz(_: *mut Drop) {} //~ ERROR\n+struct Foo {\n+  _x: Box<dyn Drop> //~ ERROR\n+}\n+trait Bar {\n+  type T: ?Sized;\n+}\n+struct Baz {}\n+impl Bar for Baz {\n+  type T = dyn Drop; //~ ERROR\n+}\n+fn main() {}"}, {"sha": "1b1dbc4d12d4c2c7cb27805ea18ec7f73feb1285", "filename": "src/test/ui/dyn-drop/dyn-drop.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -0,0 +1,38 @@\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:3:19\n+   |\n+LL | fn foo(_: Box<dyn Drop>) {}\n+   |                   ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dyn-drop.rs:1:9\n+   |\n+LL | #![deny(dyn_drop)]\n+   |         ^^^^^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:4:16\n+   |\n+LL | fn bar(_: &dyn Drop) {}\n+   |                ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:5:16\n+   |\n+LL | fn baz(_: *mut Drop) {}\n+   |                ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:7:15\n+   |\n+LL |   _x: Box<dyn Drop>\n+   |               ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:14:16\n+   |\n+LL |   type T = dyn Drop;\n+   |                ^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "59e7f9a6083ced1b4d395b247939aa63960fb0c9", "filename": "src/test/ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -10,6 +10,7 @@\n // anything.\n \n #![deny(rust_2018_compatibility)]\n+#![allow(dyn_drop)]\n \n macro_rules! foo {\n     () => {"}, {"sha": "8abd92da362d36c0c68351a58f97503af5812ef0", "filename": "src/test/ui/traits/object/issue-33140-traitobject-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.rs?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![warn(order_dependent_trait_objects)]\n+#![allow(dyn_drop)]\n \n // Check that traitobject 0.1.0 compiles\n "}, {"sha": "77d71360b806b1249c0bde060add8df6a183e927", "filename": "src/test/ui/traits/object/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140-traitobject-crate.rs:85:1\n+  --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n    | ------------------------------------------------------ first implementation here\n@@ -15,7 +15,7 @@ LL | #![warn(order_dependent_trait_objects)]\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140-traitobject-crate.rs:88:1\n+  --> $DIR/issue-33140-traitobject-crate.rs:89:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n@@ -27,7 +27,7 @@ LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140-traitobject-crate.rs:92:1\n+  --> $DIR/issue-33140-traitobject-crate.rs:93:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here"}, {"sha": "1d77382bf2cd1132549232dd03fe41af93de9389", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c0b003dbfee812788ac9f753a9b28bb3996b26/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs?ref=10c0b003dbfee812788ac9f753a9b28bb3996b26", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps, dyn_drop)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}]}