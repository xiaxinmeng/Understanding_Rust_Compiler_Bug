{"sha": "e44906e80c3d969ab583b4364f933795f062eb9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDkwNmU4MGMzZDk2OWFiNTgzYjQzNjRmOTMzNzk1ZjA2MmViOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-07T14:09:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-07T14:09:49Z"}, "message": "Auto merge of #52109 - michaelwoerister:ir-objs, r=alexcrichton\n\nWhen doing linker-plugin based LTO, write LLVM bitcode obj-files instead of embedding the bitcode into the regular object file.\n\nThis PR makes the compiler emit LLVM bitcode object files instead of regular object files with the IR embed when compiling for linker-plugin-based LTO. The reasoning for switching the strategy is this:\n- Embedding bitcode in a section of the object file actually makes us save bitcode twice in rlibs and Rust dylibs, once for linker-based LTO and once for rustc-based LTO. That's a waste of space.\n- When compiling for plugin-based LTO, one usually has no use for the machine code also present in the object file. Generating it is a waste of time.\n- When compiling for plugin-based LTO, `rustc` will skip running ThinLTO because the linker will do that anyway. This has the side effect of then generating poorly optimized machine code, which makes it even less useful (and may lead to users not knowing why their code is slow instead of getting an error).\n- Not having machine code available makes it impossible for the linker to silently fall back to not inlining stuff across language boundaries.\n- This is what Clang does and according to [the documentation](https://llvm.org/docs/BitCodeFormat.html#native-object-file-wrapper-format) is the better supported option.\n- The current behavior (minus the runtime performance problems) is still available via `-Z embed-bitcode` (we might want to do this for `libstd` at some point).\n\nr? @alexcrichton", "tree": {"sha": "18e7a8dcf72d3ac71a0e14ec9a55b0131b058e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e7a8dcf72d3ac71a0e14ec9a55b0131b058e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e44906e80c3d969ab583b4364f933795f062eb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e44906e80c3d969ab583b4364f933795f062eb9a", "html_url": "https://github.com/rust-lang/rust/commit/e44906e80c3d969ab583b4364f933795f062eb9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e44906e80c3d969ab583b4364f933795f062eb9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7e0f8764b13156634cf84caa2bd4b9997fe7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e0f8764b13156634cf84caa2bd4b9997fe7d8", "html_url": "https://github.com/rust-lang/rust/commit/5a7e0f8764b13156634cf84caa2bd4b9997fe7d8"}, {"sha": "4a269642c9c458fe084eebc11f979d49c5fdc1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a269642c9c458fe084eebc11f979d49c5fdc1c9", "html_url": "https://github.com/rust-lang/rust/commit/4a269642c9c458fe084eebc11f979d49c5fdc1c9"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "9810e8bf34f627d6fcb87dc8c07b33430e3b2435", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e44906e80c3d969ab583b4364f933795f062eb9a", "patch": "@@ -99,16 +99,14 @@ pub enum Lto {\n pub enum CrossLangLto {\n     LinkerPlugin(PathBuf),\n     LinkerPluginAuto,\n-    NoLink,\n     Disabled\n }\n \n impl CrossLangLto {\n-    pub fn embed_bitcode(&self) -> bool {\n+    pub fn enabled(&self) -> bool {\n         match *self {\n             CrossLangLto::LinkerPlugin(_) |\n-            CrossLangLto::LinkerPluginAuto |\n-            CrossLangLto::NoLink => true,\n+            CrossLangLto::LinkerPluginAuto => true,\n             CrossLangLto::Disabled => false,\n         }\n     }\n@@ -1031,8 +1029,7 @@ macro_rules! options {\n             }\n \n             *slot = match v {\n-                None |\n-                Some(\"no-link\") => CrossLangLto::NoLink,\n+                None => CrossLangLto::LinkerPluginAuto,\n                 Some(path) => CrossLangLto::LinkerPlugin(PathBuf::from(path)),\n             };\n             true\n@@ -3165,7 +3162,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.cross_lang_lto = CrossLangLto::NoLink;\n+        opts.debugging_opts.cross_lang_lto = CrossLangLto::LinkerPluginAuto;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n "}, {"sha": "99249255d276629b7ac767f6eceeb707c31cbb07", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=e44906e80c3d969ab583b4364f933795f062eb9a", "patch": "@@ -471,8 +471,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn cross_lang_lto(&mut self) {\n         match self.sess.opts.debugging_opts.cross_lang_lto {\n-            CrossLangLto::Disabled |\n-            CrossLangLto::NoLink => {\n+            CrossLangLto::Disabled => {\n                 // Nothing to do\n             }\n             CrossLangLto::LinkerPluginAuto => {"}, {"sha": "42b772b8a5d06aabbf0019ea5134c26e9e15fe3b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=e44906e80c3d969ab583b4364f933795f062eb9a", "patch": "@@ -288,10 +288,10 @@ impl ModuleConfig {\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n         self.time_passes = sess.time_passes();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n-        self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n+        self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode ||\n+                              sess.opts.debugging_opts.cross_lang_lto.enabled();\n         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n-                            sess.opts.debugging_opts.embed_bitcode ||\n-                            sess.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n+                            sess.opts.debugging_opts.embed_bitcode;\n         if embed_bitcode {\n             match sess.opts.optimize {\n                 config::OptLevel::No |\n@@ -1365,7 +1365,7 @@ fn execute_work_item(cgcx: &CodegenContext,\n             // Don't run LTO passes when cross-lang LTO is enabled. The linker\n             // will do that for us in this case.\n             let needs_lto = needs_lto &&\n-                !cgcx.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n+                !cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n \n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(module))"}, {"sha": "cdc429d1f995e2f2831543c20c86abc50375ab6a", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e44906e80c3d969ab583b4364f933795f062eb9a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=e44906e80c3d969ab583b4364f933795f062eb9a", "patch": "@@ -1,53 +1,49 @@\n \n # min-llvm-version 4.0\n-# ignore-mingw\n+# ignore-msvc\n \n -include ../tools.mk\n \n-# This test makes sure that the expected .llvmbc sections for use by\n-# linker-based LTO are available in object files when compiling with\n-# -Z cross-lang-lto\n+# This test makes sure that the object files we generate are actually\n+# LLVM bitcode files (as used by linker LTO plugins) when compiling with\n+# -Z cross-lang-lto.\n \n-LLVMBC_SECTION_NAME=\\\\.llvmbc\n+ASSERT_IS_BITCODE_OBJ=llvm-bcanalyzer # this only succeeds for bitcode files\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; llvm-ar x $(1))\n \n-ifeq ($(UNAME),Darwin)\n-\tLLVMBC_SECTION_NAME=__bitcode\n-endif\n-\n-\n-OBJDUMP=llvm-objdump\n-SECTION_HEADERS=$(OBJDUMP) -section-headers\n-\n-BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1\n-\n-BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1 --emit=obj\n+BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1\n+BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1 --emit=obj\n \n all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n \n staticlib: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib.a\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib.lib0.rcgu.o\n \n staticlib-fat-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-fat-lto.a -Clto=fat\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-fat-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib-fat-lto.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib-fat-lto.lib0.rcgu.o\n \n staticlib-thin-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-thin-lto.a -Clto=thin\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-thin-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib-thin-lto.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib-thin-lto.lib0.rcgu.o\n \n rlib: lib.rs\n \t$(BUILD_LIB) --crate-type=rlib -o $(TMPDIR)/liblib.rlib\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.rlib | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib.rlib)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib.lib0.rcgu.o\n \n cdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=cdylib --emit=obj -o $(TMPDIR)/cdylib.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/cdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/cdylib.o\n \n rdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=dylib --emit=obj -o $(TMPDIR)/rdylib.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/rdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/rdylib.o\n \n exe: lib.rs\n \t$(BUILD_EXE) -o $(TMPDIR)/exe.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/exe.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/exe.o"}]}