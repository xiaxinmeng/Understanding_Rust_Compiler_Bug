{"sha": "df04238d3aea4b8b105c286b49d54dd77c2b5f83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDQyMzhkM2FlYTRiOGIxMDVjMjg2YjQ5ZDU0ZGQ3N2MyYjVmODM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-29T05:22:08Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-29T05:22:08Z"}, "message": "Fix `unit_arg` false positive\n\nIgnore arguments with the question mark operator.\n\nCloses #2945", "tree": {"sha": "1df2b0155ebf4850b84a171ed8f0d0694550155d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df2b0155ebf4850b84a171ed8f0d0694550155d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df04238d3aea4b8b105c286b49d54dd77c2b5f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df04238d3aea4b8b105c286b49d54dd77c2b5f83", "html_url": "https://github.com/rust-lang/rust/commit/df04238d3aea4b8b105c286b49d54dd77c2b5f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df04238d3aea4b8b105c286b49d54dd77c2b5f83/comments", "author": null, "committer": null, "parents": [{"sha": "410d5ba6c3bea86632247a559685c2e13dedea91", "url": "https://api.github.com/repos/rust-lang/rust/commits/410d5ba6c3bea86632247a559685c2e13dedea91", "html_url": "https://github.com/rust-lang/rust/commit/410d5ba6c3bea86632247a559685c2e13dedea91"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "94c83ed572067b6ae06b38badaeadda76cc5b0e1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/df04238d3aea4b8b105c286b49d54dd77c2b5f83/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04238d3aea4b8b105c286b49d54dd77c2b5f83/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=df04238d3aea4b8b105c286b49d54dd77c2b5f83", "patch": "@@ -609,36 +609,43 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n         if in_macro(expr.span) {\n             return;\n         }\n+\n+        // apparently stuff in the desugaring of `?` can trigger this\n+        // so check for that here\n+        // only the calls to `Try::from_error` is marked as desugared,\n+        // so we need to check both the current Expr and its parent.\n+        if is_questionmark_desugar_marked_call(expr) {\n+            return;\n+        }\n+        if_chain! {\n+            let map = &cx.tcx.hir();\n+            let opt_parent_node = map.find(map.get_parent_node(expr.id));\n+            if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n+            if is_questionmark_desugar_marked_call(parent_expr);\n+            then {\n+                return;\n+            }\n+        }\n+\n         match expr.node {\n             ExprKind::Call(_, ref args) | ExprKind::MethodCall(_, _, ref args) => {\n                 for arg in args {\n                     if is_unit(cx.tables.expr_ty(arg)) && !is_unit_literal(arg) {\n-                        let map = &cx.tcx.hir();\n-                        // apparently stuff in the desugaring of `?` can trigger this\n-                        // so check for that here\n-                        // only the calls to `Try::from_error` is marked as desugared,\n-                        // so we need to check both the current Expr and its parent.\n-                        if !is_questionmark_desugar_marked_call(expr) {\n-                            if_chain! {\n-                                let opt_parent_node = map.find(map.get_parent_node(expr.id));\n-                                if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n-                                if is_questionmark_desugar_marked_call(parent_expr);\n-                                then {}\n-                                else {\n-                                    // `expr` and `parent_expr` where _both_ not from\n-                                    // desugaring `?`, so lint\n-                                    span_lint_and_sugg(\n-                                        cx,\n-                                        UNIT_ARG,\n-                                        arg.span,\n-                                        \"passing a unit value to a function\",\n-                                        \"if you intended to pass a unit value, use a unit literal instead\",\n-                                        \"()\".to_string(),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n+                        if let ExprKind::Match(.., match_source) = &arg.node {\n+                            if *match_source == MatchSource::TryDesugar {\n+                                continue;\n                             }\n                         }\n+\n+                        span_lint_and_sugg(\n+                            cx,\n+                            UNIT_ARG,\n+                            arg.span,\n+                            \"passing a unit value to a function\",\n+                            \"if you intended to pass a unit value, use a unit literal instead\",\n+                            \"()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                 }\n             },"}, {"sha": "cf146c91f6d0105299d94fb1a278fc9619df9389", "filename": "tests/ui/unit_arg.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df04238d3aea4b8b105c286b49d54dd77c2b5f83/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/df04238d3aea4b8b105c286b49d54dd77c2b5f83/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=df04238d3aea4b8b105c286b49d54dd77c2b5f83", "patch": "@@ -47,6 +47,17 @@ fn question_mark() -> Result<(), ()> {\n     Ok(())\n }\n \n+#[allow(dead_code)]\n+mod issue_2945 {\n+    fn unit_fn() -> Result<(), i32> {\n+        Ok(())\n+    }\n+\n+    fn fallible() -> Result<(), i32> {\n+        Ok(unit_fn()?)\n+    }\n+}\n+\n fn main() {\n     bad();\n     ok();"}, {"sha": "c15b0a50045565b691a751af079e54211030e052", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df04238d3aea4b8b105c286b49d54dd77c2b5f83/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04238d3aea4b8b105c286b49d54dd77c2b5f83/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=df04238d3aea4b8b105c286b49d54dd77c2b5f83", "patch": "@@ -54,6 +54,17 @@ fn question_mark() -> Result<(), ()> {\n     Ok(())\n }\n \n+#[allow(dead_code)]\n+mod issue_2945 {\n+    fn unit_fn() -> Result<(), i32> {\n+        Ok(())\n+    }\n+\n+    fn fallible() -> Result<(), i32> {\n+        Ok(unit_fn()?)\n+    }\n+}\n+\n fn main() {\n     bad();\n     ok();"}]}