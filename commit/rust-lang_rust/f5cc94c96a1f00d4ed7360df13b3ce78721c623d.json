{"sha": "f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Y2M5NGM5NmExZjAwZDRlZDczNjBkZjEzYjNjZTc4NzIxYzYyM2Q=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-01-29T07:34:09Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-01-29T07:39:00Z"}, "message": "Add for_loop_over_option lint", "tree": {"sha": "545f1adfaa06d5caa9c72cbeb2a58089d7e1c781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/545f1adfaa06d5caa9c72cbeb2a58089d7e1c781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "html_url": "https://github.com/rust-lang/rust/commit/f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783b342bc144bfd1c8f85c3ec6b37570a334a03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/783b342bc144bfd1c8f85c3ec6b37570a334a03a", "html_url": "https://github.com/rust-lang/rust/commit/783b342bc144bfd1c8f85c3ec6b37570a334a03a"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "b58d2f67ac20532900e83edaaefb10a8eef64cbc", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 101 lints included in this crate:\n+There are 102 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -37,6 +37,7 @@ name\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                         | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an Option, which is more clear as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases"}, {"sha": "b955a33707629fb132f8a71a00528660a8a2625e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "patch": "@@ -192,6 +192,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_ITER_LOOP,\n+        loops::FOR_LOOP_OVER_OPTION,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::REVERSE_RANGE_LOOP,"}, {"sha": "dd7f7cbe3eb40859db8b6367b9e79905137ec4ba", "filename": "src/loops.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "patch": "@@ -11,7 +11,7 @@ use std::collections::{HashSet, HashMap};\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro, expr_block,\n             span_help_and_lint, is_integer_literal, get_enclosing_block};\n-use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH};\n+use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH, OPTION_PATH};\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n ///\n@@ -48,6 +48,16 @@ declare_lint!{ pub EXPLICIT_ITER_LOOP, Warn,\n declare_lint!{ pub ITER_NEXT_LOOP, Warn,\n                \"for-looping over `_.next()` which is probably not intended\" }\n \n+/// **What it does:** This lint checks for `for` loops over Option values. It is `Warn` by default.\n+///\n+/// **Why is this bad?** Readability. This is more clearly expressed as an `if let`.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `for x in option { .. }`. This should be `if let Some(x) = option { .. }`.\n+declare_lint!{ pub FOR_LOOP_OVER_OPTION, Warn,\n+               \"for-looping over an Option, which is more clear as an `if let`\" }\n+\n /// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop. It is `Warn` by default.\n ///\n /// **Why is this bad?** The `while let` loop is usually shorter and more readable\n@@ -248,7 +258,7 @@ impl LateLintPass for LoopsPass {\n fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     check_for_loop_range(cx, pat, arg, body, expr);\n     check_for_loop_reverse_range(cx, arg, expr);\n-    check_for_loop_explicit_iter(cx, arg, expr);\n+    check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n }\n \n@@ -373,7 +383,8 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     }\n }\n \n-fn check_for_loop_explicit_iter(cx: &LateContext, arg: &Expr, expr: &Expr) {\n+fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n+    let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n     if let ExprMethodCall(ref method, _, ref args) = arg.node {\n         // just the receiver, no arguments\n         if args.len() == 1 {\n@@ -401,10 +412,29 @@ fn check_for_loop_explicit_iter(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                           expr.span,\n                           \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n                            probably not what you want\");\n+                next_loop_linted = true;\n             }\n         }\n     }\n+    if !next_loop_linted {\n+        check_option_looping(cx, pat, arg);\n+    }\n+}\n \n+/// Check for `for` loops over `Option`s\n+fn check_option_looping(cx: &LateContext, pat: &Pat, arg: &Expr) {\n+    let ty = cx.tcx.expr_ty(arg);\n+    if match_type(cx, ty, &OPTION_PATH) {\n+        span_help_and_lint(\n+            cx,\n+            FOR_LOOP_OVER_OPTION,\n+            arg.span,\n+            &format!(\"for loop over `{0}`, which is an Option. This is more readably written as \\\n+                      an `if let` statement.\", snippet(cx, arg.span, \"_\")),\n+            &format!(\"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n+                     snippet(cx, pat.span, \"_\"), snippet(cx, arg.span, \"_\"))\n+        );\n+    }\n }\n \n fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, expr: &Expr) {"}, {"sha": "a45dc4bbb3556d8c5c6ea41fa8bd527a494c7041", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc94c96a1f00d4ed7360df13b3ce78721c623d/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=f5cc94c96a1f00d4ed7360df13b3ce78721c623d", "patch": "@@ -3,6 +3,39 @@\n \n use std::collections::*;\n \n+#[deny(clippy)]\n+fn for_loop_over_option() {\n+    let option = Some(1);\n+    let v = vec![0,1,2];\n+\n+    // check FOR_LOOP_OVER_OPTION lint\n+    for x in option {\n+        //~^ ERROR for loop over `option`, which is an Option.\n+        //~| HELP consider replacing `for x in option` with `if let Some(x) = option`\n+        println!(\"{}\", x);\n+    }\n+\n+    // make sure LOOP_OVER_NEXT lint takes precedence\n+    for x in v.iter().next() {\n+        //~^ ERROR you are iterating over `Iterator::next()` which is an Option\n+        // TODO: make sure we don't lint twice\n+        println!(\"{}\", x);\n+    }\n+\n+    // check for false positives\n+\n+    // for loop false positive\n+    for x in v {\n+        println!(\"{}\", x);\n+    }\n+\n+    // while let false positive\n+    while let Some(x) = option {\n+        println!(\"{}\", x);\n+        break;\n+    }\n+}\n+\n struct Unrelated(Vec<u8>);\n impl Unrelated {\n     fn next(&self) -> std::slice::Iter<u8> {\n@@ -209,4 +242,6 @@ fn main() {\n     let mut index = 0;\n     for _v in &vec { index += 1 }\n     println!(\"index: {}\", index);\n+\n+    for_loop_over_option();\n }"}]}