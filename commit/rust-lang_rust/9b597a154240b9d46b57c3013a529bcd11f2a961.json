{"sha": "9b597a154240b9d46b57c3013a529bcd11f2a961", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTk3YTE1NDI0MGI5ZDQ2YjU3YzMwMTNhNTI5YmNkMTFmMmE5NjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-18T22:26:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-25T11:14:43Z"}, "message": "Add rustc --explain back", "tree": {"sha": "eaf840b1e861c4225890fb7762f925ca527c6d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf840b1e861c4225890fb7762f925ca527c6d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b597a154240b9d46b57c3013a529bcd11f2a961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b597a154240b9d46b57c3013a529bcd11f2a961", "html_url": "https://github.com/rust-lang/rust/commit/9b597a154240b9d46b57c3013a529bcd11f2a961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b597a154240b9d46b57c3013a529bcd11f2a961/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026339e42ba11a559767029d933d1197aefb877a", "url": "https://api.github.com/repos/rust-lang/rust/commits/026339e42ba11a559767029d933d1197aefb877a", "html_url": "https://github.com/rust-lang/rust/commit/026339e42ba11a559767029d933d1197aefb877a"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "18900de973398b25bc270f093ea12a1ce1f9c741", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9b597a154240b9d46b57c3013a529bcd11f2a961/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b597a154240b9d46b57c3013a529bcd11f2a961/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9b597a154240b9d46b57c3013a529bcd11f2a961", "patch": "@@ -21,7 +21,7 @@ use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use term;\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::cmp::min;\n use unicode_width;\n \n@@ -107,6 +107,7 @@ pub struct EmitterWriter {\n     cm: Option<Rc<CodeMapper>>,\n     short_message: bool,\n     teach: bool,\n+    error_codes: HashSet<String>,\n }\n \n struct FileWithAnnotatedLines {\n@@ -115,6 +116,30 @@ struct FileWithAnnotatedLines {\n     multiline_depth: usize,\n }\n \n+impl Drop for EmitterWriter {\n+    fn drop(&mut self) {\n+        if !self.short_message && !self.error_codes.is_empty() {\n+            let mut error_codes = self.error_codes.clone().into_iter().collect::<Vec<_>>();\n+            error_codes.sort();\n+            if error_codes.len() > 1 {\n+                writeln!(self.dst,\n+                         \"You've got a few errors: {}\",\n+                         error_codes.join(\", \")).expect(\"failed to give tips...\");\n+                writeln!(self.dst,\n+                         \"If you want more information on an error, try using \\\n+                          \\\"rustc --explain {}\\\"\",\n+                         &error_codes[0]).expect(\"failed to give tips...\");\n+            } else {\n+                writeln!(self.dst,\n+                         \"If you want more information on this error, try using \\\n+                          \\\"rustc --explain {}\\\"\",\n+                         &error_codes[0]).expect(\"failed to give tips...\");\n+            }\n+            self.dst.flush().expect(\"failed to emit errors\");\n+        }\n+    }\n+}\n+\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   code_map: Option<Rc<CodeMapper>>,\n@@ -128,13 +153,15 @@ impl EmitterWriter {\n                 cm: code_map,\n                 short_message,\n                 teach,\n+                error_codes: HashSet::new(),\n             }\n         } else {\n             EmitterWriter {\n                 dst: Raw(Box::new(io::stderr())),\n                 cm: code_map,\n                 short_message,\n                 teach,\n+                error_codes: HashSet::new(),\n             }\n         }\n     }\n@@ -149,6 +176,7 @@ impl EmitterWriter {\n             cm: code_map,\n             short_message,\n             teach,\n+            error_codes: HashSet::new(),\n         }\n     }\n \n@@ -975,12 +1003,14 @@ impl EmitterWriter {\n             if primary_span != &&DUMMY_SP {\n                 (cm.lookup_char_pos(primary_span.lo()), cm)\n             } else {\n-                emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n+                emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message,\n+                                    &mut self.error_codes)?;\n                 return Ok(());\n             }\n         } else {\n             // If we don't have span information, emit and exit\n-            emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n+            emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message,\n+                                &mut self.error_codes)?;\n             return Ok(());\n         };\n         if let Ok(pos) =\n@@ -1153,7 +1183,8 @@ impl EmitterWriter {\n         }\n \n         // final step: take our styled buffer, render it, then output it\n-        emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n+        emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message,\n+                            &mut self.error_codes)?;\n \n         Ok(())\n \n@@ -1241,7 +1272,8 @@ impl EmitterWriter {\n                 let msg = format!(\"and {} other candidates\", suggestions.len() - MAX_SUGGESTIONS);\n                 buffer.puts(row_num, 0, &msg, Style::NoStyle);\n             }\n-            emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n+            emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message,\n+                                &mut self.error_codes)?;\n         }\n         Ok(())\n     }\n@@ -1269,7 +1301,7 @@ impl EmitterWriter {\n                         draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n                     }\n                     match emit_to_destination(&buffer.render(), level, &mut self.dst,\n-                                              self.short_message) {\n+                                              self.short_message, &mut self.error_codes) {\n                         Ok(()) => (),\n                         Err(e) => panic!(\"failed to emit error: {}\", e)\n                     }\n@@ -1362,7 +1394,8 @@ fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n                        lvl: &Level,\n                        dst: &mut Destination,\n-                       short_message: bool)\n+                       short_message: bool,\n+                       error_codes: &mut HashSet<String>)\n                        -> io::Result<()> {\n     use lock;\n \n@@ -1383,6 +1416,9 @@ fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n         for part in line {\n             dst.apply_style(lvl.clone(), part.style)?;\n             write!(dst, \"{}\", part.text)?;\n+            if !short_message && part.text.len() == 12 && part.text.starts_with(\"error[E\") {\n+                error_codes.insert(part.text[6..11].to_owned());\n+            }\n             dst.reset_attrs()?;\n         }\n         if !short_message {"}]}