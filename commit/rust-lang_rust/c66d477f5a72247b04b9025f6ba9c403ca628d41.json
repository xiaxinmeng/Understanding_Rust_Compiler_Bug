{"sha": "c66d477f5a72247b04b9025f6ba9c403ca628d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmQ0NzdmNWE3MjI0N2IwNGI5MDI1ZjZiYTljNDAzY2E2MjhkNDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-27T11:14:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-27T11:14:14Z"}, "message": "Merge #6648\n\n6648: Avoid allocation in ast::String::value if the string needs no unescaping r=lnicola a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4a5d5820bac53506624f031ef1c4a6454443fc1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a5d5820bac53506624f031ef1c4a6454443fc1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66d477f5a72247b04b9025f6ba9c403ca628d41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwN+GCRBK7hj4Ov3rIwAAdHIIAFmgZb7iQJzkLMsCt/+Frler\nVwvojL7mPzlx8CNCJNwKy6R7rG3mrKnRN4qQF5LIeLZ2Ku7X3NXhIq/ZgOvtf+8h\nJ36V+20lKr5HyB5LwpfT0kbWK+sDql5llUAOf1pCWIF6dn4KDu8JhycjsbYPMyPM\npftNzZnFJQDUtKNonKIJU3Jsir9Cbug6HLh0hVKGHOipjlmbgdlxEoPI08Lsu0k6\nvCN78Uv1a2oaBkfGmLFrY9kYW3TUYoMx184OilqLgl6gT3KyOSr4+n1rwtGdjDdi\niVnYAnJCcrFn83JhK3jJLpzxq6GJiA701LXqRWl6U0Fwi0rpVtDsmVCg7K4EVGs=\n=5gWN\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a5d5820bac53506624f031ef1c4a6454443fc1c\nparent 572081f1c4d54590fc71276d362ab0c76f71c54c\nparent 347da74edabf329ce84ec81cf22bd65ef944199b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606475654 +0000\ncommitter GitHub <noreply@github.com> 1606475654 +0000\n\nMerge #6648\n\n6648: Avoid allocation in ast::String::value if the string needs no unescaping r=lnicola a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66d477f5a72247b04b9025f6ba9c403ca628d41", "html_url": "https://github.com/rust-lang/rust/commit/c66d477f5a72247b04b9025f6ba9c403ca628d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66d477f5a72247b04b9025f6ba9c403ca628d41/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572081f1c4d54590fc71276d362ab0c76f71c54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/572081f1c4d54590fc71276d362ab0c76f71c54c", "html_url": "https://github.com/rust-lang/rust/commit/572081f1c4d54590fc71276d362ab0c76f71c54c"}, {"sha": "347da74edabf329ce84ec81cf22bd65ef944199b", "url": "https://api.github.com/repos/rust-lang/rust/commits/347da74edabf329ce84ec81cf22bd65ef944199b", "html_url": "https://github.com/rust-lang/rust/commit/347da74edabf329ce84ec81cf22bd65ef944199b"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "b985861f228640fe9124891864263342c82cdf70", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c66d477f5a72247b04b9025f6ba9c403ca628d41/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d477f5a72247b04b9025f6ba9c403ca628d41/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=c66d477f5a72247b04b9025f6ba9c403ca628d41", "patch": "@@ -130,19 +130,28 @@ impl ast::String {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n-        let mut buf = String::with_capacity(text.len());\n+        let mut buf = String::new();\n+        let mut text_iter = text.chars();\n         let mut has_error = false;\n-        unescape_literal(text, Mode::Str, &mut |_, unescaped_char| match unescaped_char {\n-            Ok(c) => buf.push(c),\n-            Err(_) => has_error = true,\n+        unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c),\n+            (Ok(c), true) if Some(c) == text_iter.next() => (),\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.push_str(&text[..char_range.start]);\n+                buf.push(c);\n+            }\n+            (Err(_), _) => has_error = true,\n         });\n \n-        if has_error {\n-            return None;\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text)),\n+            (false, false) => Some(Cow::Owned(buf)),\n         }\n-        // FIXME: don't actually allocate for borrowed case\n-        let res = if buf == text { Cow::Borrowed(text) } else { Cow::Owned(buf) };\n-        Some(res)\n     }\n \n     pub fn quote_offsets(&self) -> Option<QuoteOffsets> {"}]}