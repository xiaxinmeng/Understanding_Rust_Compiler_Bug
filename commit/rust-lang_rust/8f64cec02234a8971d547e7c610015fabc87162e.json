{"sha": "8f64cec02234a8971d547e7c610015fabc87162e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjRjZWMwMjIzNGE4OTcxZDU0N2U3YzYxMDAxNWZhYmM4NzE2MmU=", "commit": {"author": {"name": "Gus Caplan", "email": "me@gus.host", "date": "2020-12-14T16:33:35Z"}, "committer": {"name": "Gus Caplan", "email": "me@gus.host", "date": "2021-01-11T20:22:41Z"}, "message": "new target", "tree": {"sha": "5d308de42b4c5e61078ec95edd303894fc209223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d308de42b4c5e61078ec95edd303894fc209223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f64cec02234a8971d547e7c610015fabc87162e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEXSkNpnBNseeWrjXy8AvRGIDoLw4FAl/8s5EACgkQ8AvRGIDo\nLw5rEggAm59htSqfozPCs2laIym0OC25Xt5caqJzJU3vkxD+YUeJV6qBQcCmQ9lb\ngfZduXCew8T0FaV98Hmv2Fz6h7rnEAfDi8bICjOTPSnxkyTfYhVwOcaCdm/ETl6M\nZmX3efjy1A/OCFPr5euOfVQYyDhgBlPW5j76dYePuvgE6IUNxEb4VB7OJPsXkuJ5\nwdRf+uHroqOdmKR0Oj88Q9E5FkXn6YTluMG6u/BalHuXDuaFE4Ck4I4qrSafKq07\ny9g6l+Qpl8OEVEzAc29PSbHODgx2Scl/a0vRN1NqvCAqTxqcIRTNtxTjWFQDuR3s\nJc+iClB8Oqduk34XcR9aybHN8f7UMA==\n=nuV4\n-----END PGP SIGNATURE-----", "payload": "tree 5d308de42b4c5e61078ec95edd303894fc209223\nparent 94bf59ea34a1592ca8797e03ac4511e344139cdf\nauthor Gus Caplan <me@gus.host> 1607963615 -0600\ncommitter Gus Caplan <me@gus.host> 1610396561 -0600\n\nnew target\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f64cec02234a8971d547e7c610015fabc87162e", "html_url": "https://github.com/rust-lang/rust/commit/8f64cec02234a8971d547e7c610015fabc87162e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f64cec02234a8971d547e7c610015fabc87162e/comments", "author": {"login": "devsnek", "id": 5952481, "node_id": "MDQ6VXNlcjU5NTI0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5952481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsnek", "html_url": "https://github.com/devsnek", "followers_url": "https://api.github.com/users/devsnek/followers", "following_url": "https://api.github.com/users/devsnek/following{/other_user}", "gists_url": "https://api.github.com/users/devsnek/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsnek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsnek/subscriptions", "organizations_url": "https://api.github.com/users/devsnek/orgs", "repos_url": "https://api.github.com/users/devsnek/repos", "events_url": "https://api.github.com/users/devsnek/events{/privacy}", "received_events_url": "https://api.github.com/users/devsnek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devsnek", "id": 5952481, "node_id": "MDQ6VXNlcjU5NTI0ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5952481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devsnek", "html_url": "https://github.com/devsnek", "followers_url": "https://api.github.com/users/devsnek/followers", "following_url": "https://api.github.com/users/devsnek/following{/other_user}", "gists_url": "https://api.github.com/users/devsnek/gists{/gist_id}", "starred_url": "https://api.github.com/users/devsnek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devsnek/subscriptions", "organizations_url": "https://api.github.com/users/devsnek/orgs", "repos_url": "https://api.github.com/users/devsnek/repos", "events_url": "https://api.github.com/users/devsnek/events{/privacy}", "received_events_url": "https://api.github.com/users/devsnek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94bf59ea34a1592ca8797e03ac4511e344139cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/94bf59ea34a1592ca8797e03ac4511e344139cdf", "html_url": "https://github.com/rust-lang/rust/commit/94bf59ea34a1592ca8797e03ac4511e344139cdf"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "89a1f2a55343eeed94e5f131e2e0175b2fa51493", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=8f64cec02234a8971d547e7c610015fabc87162e", "patch": "@@ -605,12 +605,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\"\n-                if cx.target_spec().os != \"emscripten\"\n-                    && std::env::var(\"RUSTC_USE_WASM32_BINDGEN_COMPAT_ABI\")\n-                        .map(|x| &x != \"0\")\n-                        .unwrap_or(false) =>\n-            {\n+            \"wasm32\" if cx.target_spec().os == \"bindgen\" => {\n                 wasm32_bindgen_compat::compute_abi_info(self)\n             }\n             \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),"}, {"sha": "32d64bac05cbeecf784c48b5732cf595170740c9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=8f64cec02234a8971d547e7c610015fabc87162e", "patch": "@@ -613,6 +613,7 @@ supported_targets! {\n     (\"thumbv7a-uwp-windows-msvc\", thumbv7a_uwp_windows_msvc),\n \n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n+    (\"wasm32-unknown-bindgen\", wasm32_unknown_bindgen),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),"}, {"sha": "67163fcb4175cbdb4f721c90c937ab8e664f0dc3", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_bindgen.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_bindgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f64cec02234a8971d547e7c610015fabc87162e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_bindgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_bindgen.rs?ref=8f64cec02234a8971d547e7c610015fabc87162e", "patch": "@@ -0,0 +1,9 @@\n+//! This target is a variant of `wasm32-unknown-unknown` which uses the bindgen\n+//! ABI instead of the normal ABI.\n+use super::{wasm32_unknown_unknown, Target};\n+\n+pub fn target() -> Target {\n+    let mut target = wasm32_unknown_unknown::target();\n+    target.options.os = \"bindgen\".to_string();\n+    target\n+}"}, {"sha": "bbfffecfe88fd2bf13875ecfd6bf0d3f97ad708b", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f64cec02234a8971d547e7c610015fabc87162e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f64cec02234a8971d547e7c610015fabc87162e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=8f64cec02234a8971d547e7c610015fabc87162e", "patch": "@@ -126,6 +126,7 @@ target | std | host | notes\n `thumbv8m.base-none-eabi` | * |  | ARMv8-M Baseline\n `thumbv8m.main-none-eabi` | * |  | ARMv8-M Mainline\n `thumbv8m.main-none-eabihf` | * |  | ARMv8-M Mainline, hardfloat\n+`wasm32-unknown-bindgen` | \u2713 |  | WebAssembly via wasm-bindgen\n `wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n `wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n `wasm32-wasi` | \u2713 |  | WebAssembly with WASI"}]}