{"sha": "6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMWJjMDg4YTdlMDRiYjZiMzljYzk0YWI2ZGUyZTk1ZWVjYTMwM2U=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-13T18:44:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-13T18:44:40Z"}, "message": "Rustup to rustc 1.37.0-nightly (2887008e0 2019-06-12)", "tree": {"sha": "ded0731d8944c561850527c979a75acb635b68ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded0731d8944c561850527c979a75acb635b68ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "html_url": "https://github.com/rust-lang/rust/commit/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e2ea4f1943067c04e6f76db81c81f8cbb381b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2ea4f1943067c04e6f76db81c81f8cbb381b52", "html_url": "https://github.com/rust-lang/rust/commit/5e2ea4f1943067c04e6f76db81c81f8cbb381b52"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "033d41c5f20ad6393ae91710be42d86aa8173096", "filename": "src/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -39,8 +39,8 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n     }\n }\n \n-fn get_pass_mode<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn get_pass_mode<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> PassMode {\n     let layout = tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n@@ -76,7 +76,7 @@ fn adjust_arg_for_abi<'a, 'tcx: 'a>(\n     }\n }\n \n-fn clif_sig_from_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: FnSig<'tcx>) -> Signature {\n+fn clif_sig_from_fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sig: FnSig<'tcx>) -> Signature {\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n@@ -128,8 +128,8 @@ fn clif_sig_from_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: FnSig<'t\n     }\n }\n \n-pub fn get_function_name_and_sig<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn get_function_name_and_sig<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     inst: Instance<'tcx>,\n     support_vararg: bool,\n ) -> (String, Signature) {\n@@ -143,8 +143,8 @@ pub fn get_function_name_and_sig<'a, 'tcx>(\n }\n \n /// Instance must be monomorphized\n-pub fn import_function<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn import_function<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<impl Backend>,\n     inst: Instance<'tcx>,\n ) -> FuncId {"}, {"sha": "aec7f3f77e8cf14ac1c59e055b03fe735b64aebe", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::adjustment::PointerCast;\n use crate::prelude::*;\n \n pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n+    cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n ) {\n@@ -18,9 +18,9 @@ pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n         // Check sig for u128 and i128\n         let fn_sig = tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &instance.fn_sig(tcx));\n \n-        struct UI128Visitor<'a, 'tcx: 'a>(TyCtxt<'a, 'tcx, 'tcx>, bool);\n+        struct UI128Visitor<'tcx>(TyCtxt<'tcx, 'tcx>, bool);\n \n-        impl<'a, 'tcx: 'a> rustc::ty::fold::TypeVisitor<'tcx> for UI128Visitor<'a, 'tcx> {\n+        impl<'tcx> rustc::ty::fold::TypeVisitor<'tcx> for UI128Visitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n                 if t.sty == self.0.types.u128.sty || t.sty == self.0.types.i128.sty {\n                     self.1 = true;"}, {"sha": "700c6ec75ec1f66e3cf0cb59ea5b3aff10285e02", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -18,7 +18,7 @@ pub fn pointer_ty(tcx: TyCtxt) -> types::Type {\n }\n \n pub fn clif_type_from_ty<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<types::Type> {\n     Some(match ty.sty {\n@@ -95,7 +95,7 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n \n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n-    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n     pub pointer_type: Type, // Cached from module\n \n@@ -123,7 +123,7 @@ impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n }\n \n impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for FunctionCx<'a, 'tcx, B> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "068d08097ddca3d8252ea8bea2421900f179dee0", "filename": "src/constant.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -28,7 +28,7 @@ enum TodoItem {\n impl ConstantCx {\n     pub fn finalize<'a, 'tcx: 'a, B: Backend>(\n         mut self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         module: &mut Module<B>,\n     ) {\n         //println!(\"todo {:?}\", self.todo);\n@@ -184,7 +184,7 @@ fn data_id_for_alloc_id<B: Backend>(module: &mut Module<B>, alloc_id: AllocId) -\n }\n \n fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<B>,\n     def_id: DefId,\n     linkage: Linkage,\n@@ -238,7 +238,7 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n }\n \n fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n ) {\n@@ -336,7 +336,7 @@ fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T>\n \n struct TransPlaceInterpreter;\n \n-impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n+impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryKinds = !;\n     type PointerTag = ();\n     type AllocExtra = ();\n@@ -345,16 +345,16 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n     const STATIC_KIND: Option<!> = None;\n \n-    fn enforce_validity(_: &InterpretCx<'a, 'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_: &InterpretCx<'mir, 'tcx, Self>) -> bool {\n         false\n     }\n \n-    fn before_terminator(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn before_terminator(_: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n     fn find_fn(\n-        _: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        _: &mut InterpretCx<'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<PlaceTy<'tcx>>,\n@@ -364,7 +364,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn call_intrinsic(\n-        _: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        _: &mut InterpretCx<'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: PlaceTy<'tcx>,\n@@ -374,21 +374,21 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn find_foreign_static(\n         _: DefId,\n-        _: ::rustc::ty::query::TyCtxtAt<'a, 'tcx, 'tcx>,\n+        _: ::rustc::ty::query::TyCtxtAt<'tcx, 'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         panic!();\n     }\n \n     fn ptr_op(\n-        _: &InterpretCx<'a, 'mir, 'tcx, Self>,\n+        _: &InterpretCx<'mir, 'tcx, Self>,\n         _: mir::BinOp,\n         _: ImmTy<'tcx>,\n         _: ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool)> {\n         panic!();\n     }\n \n-    fn box_alloc(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> InterpResult<'tcx> {\n+    fn box_alloc(_: &mut InterpretCx<'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n@@ -405,11 +405,11 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         ()\n     }\n \n-    fn stack_push(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn stack_push(_: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n+    fn stack_pop(_: &mut InterpretCx<'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n         Ok(())\n     }\n }"}, {"sha": "6d1726dd7b487576facf3ffbb2245e4296c1b585", "filename": "src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         }\n     }\n \n-    fn emit_location(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, entry_id: UnitEntryId, span: Span) {\n+    fn emit_location(&mut self, tcx: TyCtxt<'tcx, 'tcx>, entry_id: UnitEntryId, span: Span) {\n         let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n@@ -232,7 +232,7 @@ pub struct FunctionDebugContext<'a, 'tcx> {\n \n impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'b, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         debug_context: &'a mut DebugContext<'tcx>,\n         mir: &Body,\n         name: &str,"}, {"sha": "81c8100d3da8f87b2413957043c1df82741e0da2", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -14,7 +14,7 @@ use cranelift_faerie::*;\n use crate::prelude::*;\n \n pub fn codegen_crate<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<dyn Any> {\n@@ -45,7 +45,7 @@ pub fn codegen_crate<'a, 'tcx>(\n }\n \n #[cfg(not(target_arch = \"wasm32\"))]\n-fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, log: &mut Option<File>) -> ! {\n+fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>, log: &mut Option<File>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n     let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new(\n@@ -96,7 +96,7 @@ fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, log: &mut Option<File>) ->\n }\n \n fn run_aot<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n     log: &mut Option<File>,\n@@ -225,7 +225,7 @@ fn run_aot<'a, 'tcx: 'a>(\n }\n \n fn codegen_cgus<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug: &mut Option<DebugContext<'tcx>>,\n     log: &mut Option<File>,\n@@ -243,7 +243,7 @@ fn codegen_cgus<'a, 'tcx: 'a>(\n }\n \n fn codegen_mono_items<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n     log: &mut Option<File>,\n@@ -263,7 +263,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n }\n \n fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n+    cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {"}, {"sha": "897e8a1e367f3cf294b4fa96c9584d841dc162d6", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -122,17 +122,17 @@ impl<'tcx> Default for Caches<'tcx> {\n     }\n }\n \n-pub struct CodegenCx<'a, 'clif, 'tcx, B: Backend + 'static> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &'clif mut Module<B>,\n     ccx: ConstantCx,\n     caches: Caches<'tcx>,\n     debug_context: Option<&'clif mut DebugContext<'tcx>>,\n }\n \n-impl<'a, 'clif, 'tcx, B: Backend + 'static> CodegenCx<'a, 'clif, 'tcx, B> {\n+impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n     fn new(\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         module: &'clif mut Module<B>,\n         debug_context: Option<&'clif mut DebugContext<'tcx>>,\n     ) -> Self {\n@@ -195,7 +195,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n     fn codegen_crate<'a, 'tcx>(\n         &self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n         _rx: mpsc::Receiver<Box<dyn Any + Send>>,"}, {"sha": "6653951fd68b3eece33bccaefe9a05404fddc513", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n ) {\n     use rustc::middle::lang_items::StartFnLangItem;\n@@ -23,7 +23,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n     create_entry_fn(tcx, module, main_def_id, use_start_lang_item);;\n \n     fn create_entry_fn<'a, 'tcx: 'a>(\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         m: &mut Module<impl Backend + 'static>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,"}, {"sha": "9f6fccdc71e8cee3e3993820d80d11b8ac541ef3", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -49,7 +49,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n pub fn write_metadata<'a, 'gcx>(\n-    tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     artifact: &mut faerie::Artifact\n ) -> EncodedMetadata {\n     use std::io::Write;"}, {"sha": "677cb4705bcc5ffbf63f00199e75bb80cb5042be", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=6d1bc088a7e04bb6b39cc94ab6de2e95eeca303e", "patch": "@@ -77,7 +77,7 @@ pub struct CommentWriter {\n }\n \n impl CommentWriter {\n-    pub fn new<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>) -> Self {\n+    pub fn new<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>, instance: Instance<'tcx>) -> Self {\n         CommentWriter {\n             global_comments: vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).as_str()),\n@@ -194,7 +194,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n }\n \n pub fn write_clif_file<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     postfix: &str,\n     instance: Instance<'tcx>,\n     func: &ir::Function,"}]}