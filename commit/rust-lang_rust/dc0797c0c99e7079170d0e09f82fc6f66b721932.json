{"sha": "dc0797c0c99e7079170d0e09f82fc6f66b721932", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDc5N2MwYzk5ZTcwNzkxNzBkMGUwOWY4MmZjNmY2NmI3MjE5MzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-15T22:49:55Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-16T00:36:06Z"}, "message": "Address the other cases of #22234; fix #22234.\n\nThe other cases: `concat_idents!`, `log_syntax!`, and `trace_macros!`,\n(these macros, with `asm!`, are handled (eagerly) in feature_gate.rs).", "tree": {"sha": "5b0e828bc786427580c67ade6f7a26f1390997a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b0e828bc786427580c67ade6f7a26f1390997a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0797c0c99e7079170d0e09f82fc6f66b721932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0797c0c99e7079170d0e09f82fc6f66b721932", "html_url": "https://github.com/rust-lang/rust/commit/dc0797c0c99e7079170d0e09f82fc6f66b721932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0797c0c99e7079170d0e09f82fc6f66b721932/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52bdda778ad595e661d06b16a193b3affe443d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bdda778ad595e661d06b16a193b3affe443d41", "html_url": "https://github.com/rust-lang/rust/commit/52bdda778ad595e661d06b16a193b3affe443d41"}], "stats": {"total": 205, "additions": 199, "deletions": 6}, "files": [{"sha": "63a8bd9ddf1b39972868aeba18fe19fbe52117fa", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -12,12 +12,21 @@ use ast;\n use codemap::Span;\n use ext::base::*;\n use ext::base;\n+use feature_gate;\n use parse::token;\n use parse::token::{str_to_ident};\n use ptr::P;\n \n pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n+    if !cx.ecfg.enable_concat_idents() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"concat_idents\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_CONCAT_IDENTS);\n+        return base::DummyResult::expr(sp);\n+    }\n+\n     let mut res_str = String::new();\n     for (i, e) in tts.iter().enumerate() {\n         if i & 1 == 1 {"}, {"sha": "72dc717910bc15d74a963a7b9d5126587e79eb18", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -1436,6 +1436,27 @@ impl<'feat> ExpansionConfig<'feat> {\n             _ => false,\n         }\n     }\n+\n+    pub fn enable_log_syntax(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_log_syntax: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_concat_idents(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_concat_idents: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_trace_macros(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_trace_macros: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,"}, {"sha": "8173dd93f7468db4c5c2853d9e9f958cf63c264c", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -11,12 +11,20 @@\n use ast;\n use codemap;\n use ext::base;\n+use feature_gate;\n use print;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               sp: codemap::Span,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n+    if !cx.ecfg.enable_log_syntax() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"log_syntax\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_LOG_SYNTAX);\n+        return base::DummyResult::any(sp);\n+    }\n \n     cx.print_backtrace();\n "}, {"sha": "3fcc6a8d69241b7cb2bfa80258589457f176dcf5", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -12,13 +12,23 @@ use ast;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n+use feature_gate;\n use parse::token::keywords;\n \n \n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[ast::TokenTree])\n                            -> Box<base::MacResult+'static> {\n+    if !cx.ecfg.enable_trace_macros() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"trace_macros\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_TRACE_MACROS);\n+        return base::DummyResult::any(sp);\n+    }\n+\n+\n     match tt {\n         [ast::TtToken(_, ref tok)] if tok.is_keyword(keywords::True) => {\n             cx.set_trace_macros(true);"}, {"sha": "5e29f3a6b69850f32333e893ab6081613d1aac16", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -158,6 +158,9 @@ pub struct Features {\n     pub visible_private_types: bool,\n     pub allow_quote: bool,\n     pub allow_asm: bool,\n+    pub allow_log_syntax: bool,\n+    pub allow_concat_idents: bool,\n+    pub allow_trace_macros: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n@@ -175,6 +178,9 @@ impl Features {\n             visible_private_types: false,\n             allow_quote: false,\n             allow_asm: false,\n+            allow_log_syntax: false,\n+            allow_concat_idents: false,\n+            allow_trace_macros: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n@@ -226,6 +232,15 @@ pub fn emit_feature_warn(diag: &SpanHandler, feature: &str, span: Span, explain:\n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_LOG_SYNTAX: &'static str =\n+    \"`log_syntax!` is not stable enough for use and is subject to change\";\n+\n+pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n+    \"`concat_idents` is not stable enough for use and is subject to change\";\n+\n+pub const EXPLAIN_TRACE_MACROS: &'static str =\n+    \"`trace_macros` is not stable enough for use and is subject to change\";\n+\n struct MacroVisitor<'a> {\n     context: &'a Context<'a>\n }\n@@ -235,23 +250,28 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n         let ast::MacInvocTT(ref path, _, _) = mac.node;\n         let id = path.segments.last().unwrap().identifier;\n \n+        // Issue 22234: If you add a new case here, make sure to also\n+        // add code to catch the macro during or after expansion.\n+        //\n+        // We still keep this MacroVisitor (rather than *solely*\n+        // relying on catching cases during or after expansion) to\n+        // catch uses of these macros within conditionally-compiled\n+        // code, e.g. `#[cfg]`-guarded functions.\n+\n         if id == token::str_to_ident(\"asm\") {\n             self.context.gate_feature(\"asm\", path.span, EXPLAIN_ASM);\n         }\n \n         else if id == token::str_to_ident(\"log_syntax\") {\n-            self.context.gate_feature(\"log_syntax\", path.span, \"`log_syntax!` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"log_syntax\", path.span, EXPLAIN_LOG_SYNTAX);\n         }\n \n         else if id == token::str_to_ident(\"trace_macros\") {\n-            self.context.gate_feature(\"trace_macros\", path.span, \"`trace_macros` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"trace_macros\", path.span, EXPLAIN_TRACE_MACROS);\n         }\n \n         else if id == token::str_to_ident(\"concat_idents\") {\n-            self.context.gate_feature(\"concat_idents\", path.span, \"`concat_idents` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"concat_idents\", path.span, EXPLAIN_CONCAT_IDENTS);\n         }\n     }\n }\n@@ -594,12 +614,18 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n     check(&mut cx, krate);\n \n+    // FIXME (pnkfelix): Before adding the 99th entry below, change it\n+    // to a single-pass (instead of N calls to `.has_feature`).\n+\n     Features {\n         unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         allow_quote: cx.has_feature(\"quote\"),\n         allow_asm: cx.has_feature(\"asm\"),\n+        allow_log_syntax: cx.has_feature(\"log_syntax\"),\n+        allow_concat_idents: cx.has_feature(\"concat_idents\"),\n+        allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),"}, {"sha": "f4d97445725cd37de1a6b5f6f57e62e78e146ad7", "filename": "src/test/compile-fail/concat_idents-gate.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const XY_1: i32 = 10;\n+\n+fn main() {\n+    const XY_2: i32 = 20;\n+    let a = concat_idents!(X, Y_1); //~ ERROR `concat_idents` is not stable\n+    let b = concat_idents!(X, Y_2); //~ ERROR `concat_idents` is not stable\n+    assert_eq!(a, 10);\n+    assert_eq!(b, 20);\n+}"}, {"sha": "d8f8f803edcc8ad053780d8f1bbe1f732e817e17", "filename": "src/test/compile-fail/concat_idents-gate2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const XY_1: i32 = 10;\n+\n+fn main() {\n+    const XY_2: i32 = 20;\n+    assert_eq!(10, concat_idents!(X, Y_1)); //~ ERROR `concat_idents` is not stable\n+    assert_eq!(20, concat_idents!(X, Y_2)); //~ ERROR `concat_idents` is not stable\n+}"}, {"sha": "bb19e97ab0fa85ec9db950293320f37cdf769326", "filename": "src/test/compile-fail/log-syntax-gate2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+}"}, {"sha": "6473bcece91b694f336277cea78927a1b5e8ba94", "filename": "src/test/compile-fail/trace_macros-gate.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+fn main() {\n+    trace_macros!(); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(1); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(ident); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(for); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(true,); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(false 1); //~ ERROR `trace_macros` is not stable\n+\n+    // Errors are signalled early for the above, before expansion.\n+    // See trace_macros-gate2 and trace_macros-gate3. for examples\n+    // of the below being caught.\n+\n+    macro_rules! expando {\n+        ($x: ident) => { trace_macros!($x) }\n+    }\n+\n+    expando!(true);\n+}"}, {"sha": "71cc45e132d3385de283753010b08d1e6db467ab", "filename": "src/test/compile-fail/trace_macros-gate2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+fn main() {\n+    // (Infrastructure does not attempt to detect uses in macro definitions.)\n+    macro_rules! expando {\n+        ($x: ident) => { trace_macros!($x) }\n+    }\n+\n+    expando!(true); //~ ERROR `trace_macros` is not stable\n+}"}, {"sha": "66d03cf9d8046fd32b598e797b768c5d71541a21", "filename": "src/test/compile-fail/trace_macros-gate3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0797c0c99e7079170d0e09f82fc6f66b721932/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs?ref=dc0797c0c99e7079170d0e09f82fc6f66b721932", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+pub fn main() {\n+    println!(\"arg: {}\", trace_macros!()); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(1)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(ident)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(for)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(true,)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(false 1)); //~ ERROR `trace_macros` is not stable\n+}"}]}