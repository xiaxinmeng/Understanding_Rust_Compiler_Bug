{"sha": "b8e6883a2fb1e43747f410d3e906ec6371215d49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTY4ODNhMmZiMWU0Mzc0N2Y0MTBkM2U5MDZlYzYzNzEyMTVkNDk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:57:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:57:14Z"}, "message": "Reflect the \"do not call this query directly\" mentality in its name", "tree": {"sha": "589e89c82cfb384580126be5dc6fa8efd615a3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589e89c82cfb384580126be5dc6fa8efd615a3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e6883a2fb1e43747f410d3e906ec6371215d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6883a2fb1e43747f410d3e906ec6371215d49", "html_url": "https://github.com/rust-lang/rust/commit/b8e6883a2fb1e43747f410d3e906ec6371215d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6883a2fb1e43747f410d3e906ec6371215d49/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5889e4dabf4c7a40785949ff16a0c6f80bd8062", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5889e4dabf4c7a40785949ff16a0c6f80bd8062", "html_url": "https://github.com/rust-lang/rust/commit/c5889e4dabf4c7a40785949ff16a0c6f80bd8062"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "8c4c4b61daa8a4ed6a161f0ae811e8df3fcade39", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -1484,6 +1484,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {\n             }\n             hir::ItemKind::Static(_, _, body_id) => {\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+                // FIXME: Use ensure here\n                 let _ = cx.tcx.eval_static_initializer(def_id);\n             }\n             _ => {}"}, {"sha": "f366681bc75e9d1ab47d017c47e07632812350bc", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -69,9 +69,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         // improve caching of queries.\n         let inputs = self.erase_regions(&param_env.and(cid));\n         if let Some(span) = span {\n-            self.at(span).eval_to_const_value(inputs)\n+            self.at(span).eval_to_const_value_raw(inputs)\n         } else {\n-            self.eval_to_const_value(inputs)\n+            self.eval_to_const_value_raw(inputs)\n         }\n     }\n "}, {"sha": "c0a606a586b6b5b549a458584b5f5512f88d3085", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -724,7 +724,7 @@ rustc_queries! {\n         ///\n         /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n         /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_global_id`.\n-        query eval_to_const_value(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        query eval_to_const_value_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> EvalToConstValueResult<'tcx> {\n             desc { |tcx|\n                 \"simplifying constant for the type system `{}`\","}, {"sha": "a0ee7fdc072ef3c21209a476bbb5d3a845ae932a", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -200,21 +200,21 @@ fn turn_into_const_value<'tcx>(\n     );\n     assert!(\n         !is_static || cid.promoted.is_some(),\n-        \"the `eval_to_const_value` query should not be used for statics, use `eval_to_allocation` instead\"\n+        \"the `eval_to_const_value_raw` query should not be used for statics, use `eval_to_allocation` instead\"\n     );\n     // Turn this into a proper constant.\n     op_to_const(&ecx, mplace.into())\n }\n \n-pub fn eval_to_const_value_provider<'tcx>(\n+pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.eval_to_const_value(key) {\n+        match tcx.eval_to_const_value_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls"}, {"sha": "49770b96a995d0d17a36d31428ee3ea37ced7631", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -52,7 +52,7 @@ pub fn provide(providers: &mut Providers) {\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n     monomorphize::polymorphize::provide(providers);\n-    providers.eval_to_const_value = const_eval::eval_to_const_value_provider;\n+    providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n     providers.destructure_const = |tcx, param_env_and_value| {"}, {"sha": "8c57fd37e88f68c449f151b60f745020d6fe202b", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6883a2fb1e43747f410d3e906ec6371215d49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6883a2fb1e43747f410d3e906ec6371215d49/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=b8e6883a2fb1e43747f410d3e906ec6371215d49", "patch": "@@ -10,8 +10,8 @@ LL |     let x: &'static i32 = &(1 / 0);\n \n query stack during panic:\n #0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n-#1 [eval_to_const_value] simplifying constant for the type system `main::promoted[1]`\n-#2 [eval_to_const_value] simplifying constant for the type system `main::promoted[1]`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n+#2 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n #3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n #4 [optimized_mir] optimizing MIR for `main`\n #5 [collect_and_partition_mono_items] collect_and_partition_mono_items"}]}