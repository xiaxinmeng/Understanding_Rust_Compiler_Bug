{"sha": "7378c25f2593086a496e66e638c305ded2e39e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzhjMjVmMjU5MzA4NmE0OTZlNjZlNjM4YzMwNWRlZDJlMzllN2E=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-08T22:11:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-12T19:50:45Z"}, "message": "Rename in librustc_mir.", "tree": {"sha": "0e5845094a1880ed5246eadca1e19824e1d6c944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5845094a1880ed5246eadca1e19824e1d6c944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7378c25f2593086a496e66e638c305ded2e39e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7378c25f2593086a496e66e638c305ded2e39e7a", "html_url": "https://github.com/rust-lang/rust/commit/7378c25f2593086a496e66e638c305ded2e39e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7378c25f2593086a496e66e638c305ded2e39e7a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028c83cdf6d6d0054bafaaf85af39bca393a104c", "url": "https://api.github.com/repos/rust-lang/rust/commits/028c83cdf6d6d0054bafaaf85af39bca393a104c", "html_url": "https://github.com/rust-lang/rust/commit/028c83cdf6d6d0054bafaaf85af39bca393a104c"}], "stats": {"total": 112, "additions": 66, "deletions": 46}, "files": [{"sha": "cdfbca65e7efa4809ad466c978dc86ccfdce4277", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -27,7 +27,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{ConstValue, PanicInfo};\n+use rustc::mir::interpret::PanicInfo;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -309,7 +309,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 );\n             }\n         } else {\n-            if let ConstValue::Unevaluated(def_id, substs) = constant.literal.val {\n+            if let ty::ConstKind::Unevaluated(def_id, substs) = constant.literal.val {\n                 if let Err(terr) = self.cx.fully_perform_op(\n                     location.to_locations(),\n                     ConstraintCategory::Boring,"}, {"sha": "326953d9f302d28f7e5efe7e858f05c25ba38722", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -128,7 +128,7 @@ fn op_to_const<'tcx>(\n             }\n         },\n     };\n-    ecx.tcx.mk_const(ty::Const { val, ty: op.layout.ty })\n+    ecx.tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: op.layout.ty })\n }\n \n // Returns a pointer to where the result lives\n@@ -519,7 +519,7 @@ pub fn const_caller_location<'tcx>(\n     intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n     let loc_const = ty::Const {\n         ty: loc_ty,\n-        val: ConstValue::Scalar(loc_place.ptr.into()),\n+        val: ty::ConstKind::Value(ConstValue::Scalar(loc_place.ptr.into())),\n     };\n \n     tcx.mk_const(loc_const)\n@@ -580,10 +580,10 @@ fn validate_and_turn_into_const<'tcx>(\n         if tcx.is_static(def_id) || cid.promoted.is_some() {\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n-                val: ConstValue::ByRef {\n+                val: ty::ConstKind::Value(ConstValue::ByRef {\n                     alloc: ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n                     offset: ptr.offset,\n-                },\n+                }),\n                 ty: mplace.layout.ty,\n             }))\n         } else {"}, {"sha": "1abdcde10ab0f82aac26bcb02bc91f801c78dbbd", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -56,7 +56,7 @@ crate fn lit_to_const<'tcx>(\n         LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n         LitKind::Err(_) => unreachable!(),\n     };\n-    Ok(tcx.mk_const(ty::Const { val: lit, ty }))\n+    Ok(tcx.mk_const(ty::Const { val: ty::ConstKind::Value(lit), ty }))\n }\n \n fn parse_float<'tcx>("}, {"sha": "92c9c702c7a8367f820dff7f4f6b19c7e8a2c21e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_index::vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n+use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -692,7 +692,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n-                                val: ConstValue::Unevaluated(did, substs),\n+                                val: ty::ConstKind::Unevaluated(did, substs),\n                                 ty: var_ty,\n                             }));\n                             let bin = ExprKind::Binary {\n@@ -914,7 +914,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n             let name = cx.tcx.hir().name(hir_id);\n-            let val = ConstValue::Param(ty::ParamConst::new(index, name));\n+            let val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(\n                     ty::Const {\n@@ -932,7 +932,7 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ConstValue::Unevaluated(def_id, substs),\n+                    val: ty::ConstKind::Unevaluated(def_id, substs),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "9a1fbf71e6f4b98884a22d08fc062ee7ca4b892e", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -313,7 +313,10 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n             (\n                 &ty::Ref(_, rty, _),\n                 &PatKind::Constant {\n-                    value: Const { val, ty: ty::TyS { kind: ty::Ref(_, crty, _), .. } },\n+                    value: Const {\n+                        val: ty::ConstKind::Value(val),\n+                        ty: ty::TyS { kind: ty::Ref(_, crty, _), .. }\n+                    },\n                 },\n             ) => Pat {\n                 ty: pat.ty,\n@@ -324,13 +327,21 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n                         span: pat.span,\n                         kind: box PatKind::Constant {\n                             value: self.tcx.mk_const(Const {\n-                                val: self.fold_const_value_deref(*val, rty, crty),\n+                                val: ty::ConstKind::Value(self.fold_const_value_deref(*val, rty, crty)),\n                                 ty: rty,\n                             }),\n                         },\n                     },\n                 },\n             },\n+\n+            (\n+                &ty::Ref(_, rty, _),\n+                &PatKind::Constant {\n+                    value: Const { val, ty: ty::TyS { kind: ty::Ref(_, crty, _), .. } },\n+                },\n+            ) => bug!(\"cannot deref {:#?}, {} -> {}\", val, crty, rty),\n+\n             (_, &PatKind::Binding { subpattern: Some(ref s), .. }) => s.fold_with(self),\n             _ => pat.super_fold_with(self),\n         }\n@@ -1245,7 +1256,7 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ConstValue::Scalar(Scalar::Raw { data, size }) = value.val {\n+            let val = if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, size })) = value.val {\n                 // For this specific pattern we can skip a lot of effort and go\n                 // straight to the result, after doing a bit of checking. (We\n                 // could remove this branch and just use the next branch, which\n@@ -1781,7 +1792,19 @@ fn slice_pat_covered_by_const<'tcx>(\n     suffix: &[Pat<'tcx>],\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Result<bool, ErrorReported> {\n-    let data: &[u8] = match (const_val.val, &const_val.ty.kind) {\n+    let const_val_val = if let ty::ConstKind::Value(val) = const_val.val {\n+        val\n+    } else {\n+        bug!(\n+            \"slice_pat_covered_by_const: {:#?}, {:#?}, {:#?}, {:#?}\",\n+            const_val,\n+            prefix,\n+            slice,\n+            suffix,\n+        )\n+    };\n+\n+    let data: &[u8] = match (const_val_val, &const_val.ty.kind) {\n         (ConstValue::ByRef { offset, alloc, .. }, ty::Array(t, n)) => {\n             assert_eq!(*t, tcx.types.u8);\n             let n = n.eval_usize(tcx, param_env);\n@@ -2054,7 +2077,8 @@ fn split_grouped_constructors<'p, 'tcx>(\n                                     max_fixed_len =\n                                         cmp::max(max_fixed_len, n.eval_usize(tcx, param_env))\n                                 }\n-                                (ConstValue::Slice { start, end, .. }, ty::Slice(_)) => {\n+                                (ty::ConstKind::Value(ConstValue::Slice { start, end, .. }),\n+                                 ty::Slice(_)) => {\n                                     max_fixed_len = cmp::max(max_fixed_len, (end - start) as u64)\n                                 }\n                                 _ => {}\n@@ -2253,17 +2277,17 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             // is when they are subslices of nonzero slices.\n             let (alloc, offset, n, ty) = match value.ty.kind {\n                 ty::Array(t, n) => match value.val {\n-                    ConstValue::ByRef { offset, alloc, .. } => {\n+                    ty::ConstKind::Value(ConstValue::ByRef { offset, alloc, .. }) => {\n                         (alloc, offset, n.eval_usize(cx.tcx, cx.param_env), t)\n                     }\n                     _ => span_bug!(pat.span, \"array pattern is {:?}\", value,),\n                 },\n                 ty::Slice(t) => {\n                     match value.val {\n-                        ConstValue::Slice { data, start, end } => {\n+                        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n                             (data, Size::from_bytes(start as u64), (end - start) as u64, t)\n                         }\n-                        ConstValue::ByRef { .. } => {\n+                        ty::ConstKind::Value(ConstValue::ByRef { .. }) => {\n                             // FIXME(oli-obk): implement `deref` for `ConstValue`\n                             return None;\n                         }"}, {"sha": "3d97ed6bf9b984c62172ec3f026256aeaafe3fa3", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -1197,9 +1197,10 @@ pub fn compare_const_vals<'tcx>(\n \n     if let ty::Str = ty.kind {\n         match (a.val, b.val) {\n-            (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n-                let a_bytes = get_slice_bytes(&tcx, a.val);\n-                let b_bytes = get_slice_bytes(&tcx, b.val);\n+            (ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n+             ty::ConstKind::Value(b_val @ ConstValue::Slice { .. })) => {\n+                let a_bytes = get_slice_bytes(&tcx, a_val);\n+                let b_bytes = get_slice_bytes(&tcx, b_val);\n                 return from_bool(a_bytes == b_bytes);\n             }\n             _ => (),"}, {"sha": "b48cac082e313d87dd028bbc8f6fd00c94596228", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -54,11 +54,11 @@ crate fn eval_nullary_intrinsic<'tcx>(\n         \"type_name\" => {\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n             tcx.mk_const(ty::Const {\n-                val: ConstValue::Slice {\n+                val: ty::ConstKind::Value(ConstValue::Slice {\n                     data: alloc,\n                     start: 0,\n                     end: alloc.len(),\n-                },\n+                }),\n                 ty: tcx.mk_static_str(),\n             })\n         },"}, {"sha": "4d2ccdc20da6529ae71b5a245815b7c2c6c2f6e9", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -545,23 +545,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Scalar::Raw { data, size } => Scalar::Raw { data, size },\n         };\n         // Early-return cases.\n-        match val.val {\n-            ConstValue::Param(_) =>\n+        let val_val = match val.val {\n+            ty::ConstKind::Param(_) =>\n                 throw_inval!(TooGeneric),\n-            ConstValue::Unevaluated(def_id, substs) => {\n+            ty::ConstKind::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 return Ok(OpTy::from(self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: None,\n                 })?));\n             }\n-            _ => {}\n-        }\n+            ty::ConstKind::Infer(..) |\n+            ty::ConstKind::Bound(..) |\n+            ty::ConstKind::Placeholder(..) =>\n+                bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val),\n+            ty::ConstKind::Value(val_val) => val_val,\n+        };\n         // Other cases need layout.\n         let layout = from_known_layout(layout, || {\n             self.layout_of(val.ty)\n         })?;\n-        let op = match val.val {\n+        let op = match val_val {\n             ConstValue::ByRef { alloc, offset } => {\n                 let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n@@ -583,12 +587,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self,\n                 ))\n             }\n-            ConstValue::Param(..) |\n-            ConstValue::Infer(..) |\n-            ConstValue::Bound(..) |\n-            ConstValue::Placeholder(..) |\n-            ConstValue::Unevaluated(..) =>\n-                bug!(\"eval_const_to_op: Unexpected ConstValue {:?}\", val),\n         };\n         Ok(OpTy { op, layout })\n     }"}, {"sha": "49f27a8117ece7978ed02ac8528a628a2b751f4f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -1284,15 +1284,15 @@ fn collect_const<'tcx>(\n     );\n \n     match substituted_constant.val {\n-        ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n+        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Ptr(ptr))) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n-        ConstValue::Slice { data: alloc, start: _, end: _ } |\n-        ConstValue::ByRef { alloc, .. } => {\n+        ty::ConstKind::Value(ConstValue::Slice { data: alloc, start: _, end: _ }) |\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) => {\n             for &((), id) in alloc.relocations().values() {\n                 collect_miri(tcx, id, output);\n             }\n         }\n-        ConstValue::Unevaluated(def_id, substs) => {\n+        ty::ConstKind::Unevaluated(def_id, substs) => {\n             let instance = ty::Instance::resolve(tcx,\n                                                 param_env,\n                                                 def_id,"}, {"sha": "595ef2aad49d912d602db637e8dc27530ff9a146", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -1,7 +1,6 @@\n //! A copy of the `Qualif` trait in `qualify_consts.rs` that is suitable for the new validator.\n \n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::ty::{self, Ty};\n use syntax_pos::DUMMY_SP;\n \n@@ -118,7 +117,7 @@ pub trait Qualif {\n             Operand::Move(ref place) => Self::in_place(cx, per_local, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)"}, {"sha": "a7f48162f9b18fbbfcd4090eb83bfa1c7a422494", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -14,7 +14,6 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n use rustc::ty::{self, List, TyCtxt, TypeFoldable};\n@@ -584,7 +583,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Operand::Move(place) => self.validate_place(place.as_ref()),\n \n             Operand::Constant(constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     if self.tcx.trait_of_item(def_id).is_some() {\n                         // Don't peek inside trait associated constants.\n                         // (see below what we do for other consts, for now)"}, {"sha": "0373fbc55f7a33d85d748bbd4ff8e17facbd7c26", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7378c25f2593086a496e66e638c305ded2e39e7a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7378c25f2593086a496e66e638c305ded2e39e7a", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUseContext};\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n@@ -251,7 +250,7 @@ trait Qualif {\n             Operand::Move(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)"}]}