{"sha": "1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDhhNjUxYmEyYTU5NmI4MjVhZmE2YWY4ZjdkZDdjZjVmNTI0YTE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T13:55:07Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T13:55:40Z"}, "message": "Make iterator struct docs more consistent.\n\nFixes #24008.", "tree": {"sha": "a634b5d29a0d12a76d41d3a8eea3cc6c5d0a9457", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a634b5d29a0d12a76d41d3a8eea3cc6c5d0a9457"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1", "html_url": "https://github.com/rust-lang/rust/commit/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5910dc0e8e396a4af7b948b83bab03f27b414a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5910dc0e8e396a4af7b948b83bab03f27b414a0e", "html_url": "https://github.com/rust-lang/rust/commit/5910dc0e8e396a4af7b948b83bab03f27b414a0e"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "5c862d73537ad7749485bfe5ff5f08e0115a79dc", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1dd8a651ba2a596b825afa6af8f7dd7cf5f524a1", "patch": "@@ -341,7 +341,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n ///\n-/// Created with `str::bytes`\n+/// Created with the method `.bytes()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Bytes<'a>(Map<slice::Iter<'a, u8>, BytesDeref>);\n@@ -636,10 +636,10 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Return type of `str::split()`\n+        /// Created with the method `.split()`.\n         struct Split;\n     reverse:\n-        /// Return type of `str::rsplit()`\n+        /// Created with the method `.rsplit()`.\n         struct RSplit;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -650,10 +650,10 @@ generate_pattern_iterators! {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Return type of `str::split_terminator()`\n+        /// Created with the method `.split_terminator()`.\n         struct SplitTerminator;\n     reverse:\n-        /// Return type of `str::rsplit_terminator()`\n+        /// Created with the method `.rsplit_terminator()`.\n         struct RSplitTerminator;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -696,10 +696,10 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Return type of `str::splitn()`\n+        /// Created with the method `.splitn()`.\n         struct SplitN;\n     reverse:\n-        /// Return type of `str::rsplitn()`\n+        /// Created with the method `.rsplitn()`.\n         struct RSplitN;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -730,10 +730,10 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Return type of `str::match_indices()`\n+        /// Created with the method `.match_indices()`.\n         struct MatchIndices;\n     reverse:\n-        /// Return type of `str::rmatch_indices()`\n+        /// Created with the method `.rmatch_indices()`.\n         struct RMatchIndices;\n     stability:\n         #[unstable(feature = \"core\",\n@@ -771,10 +771,10 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Return type of `str::matches()`\n+        /// Created with the method `.matches()`.\n         struct Matches;\n     reverse:\n-        /// Return type of `str::rmatches()`\n+        /// Created with the method `.rmatches()`.\n         struct RMatches;\n     stability:\n         #[unstable(feature = \"core\", reason = \"type got recently added\")]\n@@ -783,7 +783,7 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n-/// Return type of `str::lines()`\n+/// Created with the method `.lines()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Lines<'a>(SplitTerminator<'a, char>);\n@@ -811,7 +811,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n     }\n }\n \n-/// Return type of `str::lines_any()`\n+/// Created with the method `.lines_any()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct LinesAny<'a>(Map<Lines<'a>, LinesAnyMap>);"}]}