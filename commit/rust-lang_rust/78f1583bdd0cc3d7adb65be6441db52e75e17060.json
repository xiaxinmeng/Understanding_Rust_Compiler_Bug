{"sha": "78f1583bdd0cc3d7adb65be6441db52e75e17060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjE1ODNiZGQwY2MzZDdhZGI2NWJlNjQ0MWRiNTJlNzVlMTcwNjA=", "commit": {"author": {"name": "Comonad", "email": "comonad@foxmail.com", "date": "2021-04-29T07:26:41Z"}, "committer": {"name": "Comonad", "email": "comonad@foxmail.com", "date": "2021-04-29T07:26:41Z"}, "message": "fix: closure unify without check ClosureId\n\ncloses #8604", "tree": {"sha": "9f211591a2055c4820de7b92f5ad7d1aeb06a607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f211591a2055c4820de7b92f5ad7d1aeb06a607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f1583bdd0cc3d7adb65be6441db52e75e17060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f1583bdd0cc3d7adb65be6441db52e75e17060", "html_url": "https://github.com/rust-lang/rust/commit/78f1583bdd0cc3d7adb65be6441db52e75e17060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f1583bdd0cc3d7adb65be6441db52e75e17060/comments", "author": {"login": "komonad", "id": 69359480, "node_id": "MDQ6VXNlcjY5MzU5NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/69359480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/komonad", "html_url": "https://github.com/komonad", "followers_url": "https://api.github.com/users/komonad/followers", "following_url": "https://api.github.com/users/komonad/following{/other_user}", "gists_url": "https://api.github.com/users/komonad/gists{/gist_id}", "starred_url": "https://api.github.com/users/komonad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/komonad/subscriptions", "organizations_url": "https://api.github.com/users/komonad/orgs", "repos_url": "https://api.github.com/users/komonad/repos", "events_url": "https://api.github.com/users/komonad/events{/privacy}", "received_events_url": "https://api.github.com/users/komonad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "komonad", "id": 69359480, "node_id": "MDQ6VXNlcjY5MzU5NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/69359480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/komonad", "html_url": "https://github.com/komonad", "followers_url": "https://api.github.com/users/komonad/followers", "following_url": "https://api.github.com/users/komonad/following{/other_user}", "gists_url": "https://api.github.com/users/komonad/gists{/gist_id}", "starred_url": "https://api.github.com/users/komonad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/komonad/subscriptions", "organizations_url": "https://api.github.com/users/komonad/orgs", "repos_url": "https://api.github.com/users/komonad/repos", "events_url": "https://api.github.com/users/komonad/events{/privacy}", "received_events_url": "https://api.github.com/users/komonad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce0d71b18ed78f55989d2a7462ae1d8df10e14f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce0d71b18ed78f55989d2a7462ae1d8df10e14f", "html_url": "https://github.com/rust-lang/rust/commit/dce0d71b18ed78f55989d2a7462ae1d8df10e14f"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "d8e0b432064670b58f59e2ab06284d32b3a90cc2", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78f1583bdd0cc3d7adb65be6441db52e75e17060/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f1583bdd0cc3d7adb65be6441db52e75e17060/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=78f1583bdd0cc3d7adb65be6441db52e75e17060", "patch": "@@ -332,6 +332,10 @@ impl InferenceTable {\n                 | (TyKind::Slice(ty1), TyKind::Slice(ty2)) => self.unify_inner(ty1, ty2, depth + 1),\n                 _ => true, /* we checked equals_ctor already */\n             }\n+        } else if let (TyKind::Closure(.., substs1), TyKind::Closure(.., substs2)) =\n+            (ty1.kind(&Interner), ty2.kind(&Interner))\n+        {\n+            self.unify_substs(substs1, substs2, depth + 1)\n         } else {\n             self.unify_inner_trivial(&ty1, &ty2, depth)\n         }"}, {"sha": "0eefd70f2271eb1dbe18bc9fba4f4ae57a191dfe", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/78f1583bdd0cc3d7adb65be6441db52e75e17060/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f1583bdd0cc3d7adb65be6441db52e75e17060/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=78f1583bdd0cc3d7adb65be6441db52e75e17060", "patch": "@@ -1028,6 +1028,42 @@ fn infer_in_elseif() {\n     )\n }\n \n+#[test]\n+fn infer_closure_unify() {\n+    check_infer(\n+        r#\"\n+        fn foo(f: bool) {\n+            let a = |x| x;\n+            let b = |x| x;\n+            let id = if f { a } else { b };\n+            id(123);\n+        }\n+        \"#,\n+        expect![[r#\"\n+            7..8 'f': bool\n+            16..106 '{     ...23); }': ()\n+            26..27 'a': |i32| -> i32\n+            30..35 '|x| x': |i32| -> i32\n+            31..32 'x': i32\n+            34..35 'x': i32\n+            45..46 'b': |i32| -> i32\n+            49..54 '|x| x': |i32| -> i32\n+            50..51 'x': i32\n+            53..54 'x': i32\n+            64..66 'id': |i32| -> i32\n+            69..90 'if f {... { b }': |i32| -> i32\n+            72..73 'f': bool\n+            74..79 '{ a }': |i32| -> i32\n+            76..77 'a': |i32| -> i32\n+            85..90 '{ b }': |i32| -> i32\n+            87..88 'b': |i32| -> i32\n+            96..98 'id': |i32| -> i32\n+            96..103 'id(123)': i32\n+            99..102 '123': i32\n+        \"#]],\n+    )\n+}\n+\n #[test]\n fn infer_if_match_with_return() {\n     check_infer("}]}