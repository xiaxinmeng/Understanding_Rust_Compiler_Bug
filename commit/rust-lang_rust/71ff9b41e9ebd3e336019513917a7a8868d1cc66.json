{"sha": "71ff9b41e9ebd3e336019513917a7a8868d1cc66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZmY5YjQxZTllYmQzZTMzNjAxOTUxMzkxN2E3YTg4NjhkMWNjNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T04:27:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T04:27:35Z"}, "message": "Auto merge of #87712 - est31:line-column-1-based, r=petrochenkov\n\nProc macro spans: make columns 1 based\n\nThis makes proc macro spans consistent with the `column!()` macro as well as `std::panic::Location`, as both are 1-based.\n\nhttps://github.com/rust-lang/rust/issues/54725#issuecomment-497246753", "tree": {"sha": "d0694f2d26fa1e9943433bc77bbc58271847e5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0694f2d26fa1e9943433bc77bbc58271847e5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ff9b41e9ebd3e336019513917a7a8868d1cc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ff9b41e9ebd3e336019513917a7a8868d1cc66", "html_url": "https://github.com/rust-lang/rust/commit/71ff9b41e9ebd3e336019513917a7a8868d1cc66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ff9b41e9ebd3e336019513917a7a8868d1cc66/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb744e1e9f1e193014ab3f04bf5e0640dbe4dc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb744e1e9f1e193014ab3f04bf5e0640dbe4dc63", "html_url": "https://github.com/rust-lang/rust/commit/bb744e1e9f1e193014ab3f04bf5e0640dbe4dc63"}, {"sha": "7d20789c0225160e99267b81c5431e3f75cf5421", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d20789c0225160e99267b81c5431e3f75cf5421", "html_url": "https://github.com/rust-lang/rust/commit/7d20789c0225160e99267b81c5431e3f75cf5421"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "f25e257bf3168e3d6e7d4aad7ef8f16dbb93f309", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71ff9b41e9ebd3e336019513917a7a8868d1cc66/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ff9b41e9ebd3e336019513917a7a8868d1cc66/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=71ff9b41e9ebd3e336019513917a7a8868d1cc66", "patch": "@@ -348,13 +348,13 @@ impl Span {\n     /// Gets the starting line/column in the source file for this span.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {\n-        self.0.start()\n+        self.0.start().add_1_to_column()\n     }\n \n     /// Gets the ending line/column in the source file for this span.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn end(&self) -> LineColumn {\n-        self.0.end()\n+        self.0.end().add_1_to_column()\n     }\n \n     /// Creates a new span encompassing `self` and `other`.\n@@ -432,12 +432,18 @@ pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub line: usize,\n-    /// The 0-indexed column (in UTF-8 characters) in the source file on which\n-    /// the span starts or ends (inclusive).\n+    /// The 1-indexed column (number of bytes in UTF-8 encoding) in the source\n+    /// file on which the span starts or ends (inclusive).\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub column: usize,\n }\n \n+impl LineColumn {\n+    fn add_1_to_column(self) -> Self {\n+        LineColumn { line: self.line, column: self.column + 1 }\n+    }\n+}\n+\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for LineColumn {}\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]"}, {"sha": "455c5c7c380af3f2f76a7ec78f14f1c249314340", "filename": "src/test/ui/proc-macro/auxiliary/assert-span-pos.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fassert-span-pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fassert-span-pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fassert-span-pos.rs?ref=71ff9b41e9ebd3e336019513917a7a8868d1cc66", "patch": "@@ -0,0 +1,37 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_diagnostic, proc_macro_span)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{TokenStream, TokenTree, Span};\n+\n+fn lit_span(tt: TokenTree) -> (Span, String) {\n+    match tt {\n+        TokenTree::Literal(..) |\n+        TokenTree::Group(..) => (tt.span(), tt.to_string().trim().into()),\n+        _ => panic!(\"expected a literal in token tree, got: {:?}\", tt)\n+    }\n+}\n+\n+#[proc_macro]\n+pub fn assert_span_pos(input: TokenStream) -> TokenStream {\n+    let mut tokens = input.into_iter();\n+    let (sp1, str1) = lit_span(tokens.next().expect(\"first argument\"));\n+    let _ = tokens.next();\n+    let (_sp2, str2) = lit_span(tokens.next().expect(\"second argument\"));\n+\n+    let line: usize = str1.parse().unwrap();\n+    let col: usize = str2.parse().unwrap();\n+\n+    let sp1s = sp1.start();\n+    if (line, col) != (sp1s.line, sp1s.column) {\n+        let msg = format!(\"line/column mismatch: ({}, {}) != ({}, {})\", line, col,\n+            sp1s.line, sp1s.column);\n+        sp1.error(msg).emit();\n+    }\n+\n+    \"\".parse().unwrap()\n+}"}, {"sha": "6d70fe611c47e8a3b43ceb52bd75385289de21fb", "filename": "src/test/ui/proc-macro/span-absolute-posititions.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.rs?ref=71ff9b41e9ebd3e336019513917a7a8868d1cc66", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:assert-span-pos.rs\n+// ignore-tidy-tab\n+extern crate assert_span_pos;\n+\n+assert_span_pos::assert_span_pos!(5, 35);\n+\n+// Test space indentation\n+    assert_span_pos::assert_span_pos!(8, 39);\n+// Test tab indentation\n+\tassert_span_pos::assert_span_pos!(10, 36);\n+\n+// Two tests to ensure the promise of the docs that the column is the number\n+// of UTF-8 bytes instead of some other number like number of code points.\n+\n+// Test that multi byte UTF-8 characters indeed count as multiple bytes\n+/*\ud83c\udf08*/assert_span_pos::assert_span_pos!(16, 40);\n+// Test with a complete grapheme cluster\n+/*\ud83c\udff3\ufe0f\u200d\ud83c\udf08*/assert_span_pos::assert_span_pos!(18, 43);\n+\n+// Test that the macro actually emits an error on a mismatch:\n+assert_span_pos::assert_span_pos!(0, 35); //~ ERROR line/column mismatch: (0, 35) != (21, 35)\n+assert_span_pos::assert_span_pos!(22, 0); //~ ERROR line/column mismatch: (22, 0) != (22, 35)\n+\n+fn main() {}"}, {"sha": "6aca44a6b57a6199b621709fec317ed328a16fc7", "filename": "src/test/ui/proc-macro/span-absolute-posititions.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ff9b41e9ebd3e336019513917a7a8868d1cc66/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-absolute-posititions.stderr?ref=71ff9b41e9ebd3e336019513917a7a8868d1cc66", "patch": "@@ -0,0 +1,14 @@\n+error: line/column mismatch: (0, 35) != (21, 35)\n+  --> $DIR/span-absolute-posititions.rs:21:35\n+   |\n+LL | assert_span_pos::assert_span_pos!(0, 35);\n+   |                                   ^\n+\n+error: line/column mismatch: (22, 0) != (22, 35)\n+  --> $DIR/span-absolute-posititions.rs:22:35\n+   |\n+LL | assert_span_pos::assert_span_pos!(22, 0);\n+   |                                   ^^\n+\n+error: aborting due to 2 previous errors\n+"}]}