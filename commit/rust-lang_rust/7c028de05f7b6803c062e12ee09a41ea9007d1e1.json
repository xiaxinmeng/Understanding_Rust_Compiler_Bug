{"sha": "7c028de05f7b6803c062e12ee09a41ea9007d1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDI4ZGUwNWY3YjY4MDNjMDYyZTEyZWUwOWE0MWVhOTAwN2QxZTE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-24T14:20:31Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-27T13:49:55Z"}, "message": "Move too_many_lines to its own module", "tree": {"sha": "9abba2005cf9ab0b8f8871ca901e9a9c960b55c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9abba2005cf9ab0b8f8871ca901e9a9c960b55c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c028de05f7b6803c062e12ee09a41ea9007d1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c028de05f7b6803c062e12ee09a41ea9007d1e1", "html_url": "https://github.com/rust-lang/rust/commit/7c028de05f7b6803c062e12ee09a41ea9007d1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c028de05f7b6803c062e12ee09a41ea9007d1e1/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "url": "https://api.github.com/repos/rust-lang/rust/commits/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b", "html_url": "https://github.com/rust-lang/rust/commit/febf34e2b4ed9b66fc3095d55ae13cef9b6b154b"}], "stats": {"total": 132, "additions": 71, "deletions": 61}, "files": [{"sha": "97d3623d9192b3d1abd1c16c72047fd7b3d92647", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 3, "deletions": 61, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7c028de05f7b6803c062e12ee09a41ea9007d1e1/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c028de05f7b6803c062e12ee09a41ea9007d1e1/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=7c028de05f7b6803c062e12ee09a41ea9007d1e1", "patch": "@@ -1,7 +1,8 @@\n mod too_many_arguments;\n+mod too_many_lines;\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_then};\n-use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, type_is_unsafe_function};\n use clippy_utils::{\n     attr_by_name, attrs::is_proc_macro, iter_input_pats, match_def_path, must_use_attr, path_to_local, return_ty,\n@@ -256,6 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n+        too_many_lines::check(cx, span, body, self.too_many_lines_threshold);\n \n         let unsafety = match kind {\n             intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n@@ -264,7 +266,6 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         };\n \n         Self::check_raw_ptr(cx, unsafety, decl, body, hir_id);\n-        self.check_line_number(cx, span, body);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n@@ -356,65 +357,6 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n }\n \n impl<'tcx> Functions {\n-    fn check_line_number(self, cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>) {\n-        if in_external_macro(cx.sess(), span) {\n-            return;\n-        }\n-\n-        let code_snippet = snippet(cx, body.value.span, \"..\");\n-        let mut line_count: u64 = 0;\n-        let mut in_comment = false;\n-        let mut code_in_line;\n-\n-        // Skip the surrounding function decl.\n-        let start_brace_idx = code_snippet.find('{').map_or(0, |i| i + 1);\n-        let end_brace_idx = code_snippet.rfind('}').unwrap_or_else(|| code_snippet.len());\n-        let function_lines = code_snippet[start_brace_idx..end_brace_idx].lines();\n-\n-        for mut line in function_lines {\n-            code_in_line = false;\n-            loop {\n-                line = line.trim_start();\n-                if line.is_empty() {\n-                    break;\n-                }\n-                if in_comment {\n-                    if let Some(i) = line.find(\"*/\") {\n-                        line = &line[i + 2..];\n-                        in_comment = false;\n-                        continue;\n-                    }\n-                } else {\n-                    let multi_idx = line.find(\"/*\").unwrap_or_else(|| line.len());\n-                    let single_idx = line.find(\"//\").unwrap_or_else(|| line.len());\n-                    code_in_line |= multi_idx > 0 && single_idx > 0;\n-                    // Implies multi_idx is below line.len()\n-                    if multi_idx < single_idx {\n-                        line = &line[multi_idx + 2..];\n-                        in_comment = true;\n-                        continue;\n-                    }\n-                }\n-                break;\n-            }\n-            if code_in_line {\n-                line_count += 1;\n-            }\n-        }\n-\n-        if line_count > self.too_many_lines_threshold {\n-            span_lint(\n-                cx,\n-                TOO_MANY_LINES,\n-                span,\n-                &format!(\n-                    \"this function has too many lines ({}/{})\",\n-                    line_count, self.too_many_lines_threshold\n-                ),\n-            )\n-        }\n-    }\n-\n     fn check_raw_ptr(\n         cx: &LateContext<'tcx>,\n         unsafety: hir::Unsafety,"}, {"sha": "99d5028befc5c2d1b0896cd4c722e3d2c1927290", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7c028de05f7b6803c062e12ee09a41ea9007d1e1/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c028de05f7b6803c062e12ee09a41ea9007d1e1/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=7c028de05f7b6803c062e12ee09a41ea9007d1e1", "patch": "@@ -0,0 +1,68 @@\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_span::Span;\n+\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::source::snippet;\n+\n+use super::TOO_MANY_LINES;\n+\n+pub(super) fn check(cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>, too_many_lines_threshold: u64) {\n+    if in_external_macro(cx.sess(), span) {\n+        return;\n+    }\n+\n+    let code_snippet = snippet(cx, body.value.span, \"..\");\n+    let mut line_count: u64 = 0;\n+    let mut in_comment = false;\n+    let mut code_in_line;\n+\n+    // Skip the surrounding function decl.\n+    let start_brace_idx = code_snippet.find('{').map_or(0, |i| i + 1);\n+    let end_brace_idx = code_snippet.rfind('}').unwrap_or_else(|| code_snippet.len());\n+    let function_lines = code_snippet[start_brace_idx..end_brace_idx].lines();\n+\n+    for mut line in function_lines {\n+        code_in_line = false;\n+        loop {\n+            line = line.trim_start();\n+            if line.is_empty() {\n+                break;\n+            }\n+            if in_comment {\n+                if let Some(i) = line.find(\"*/\") {\n+                    line = &line[i + 2..];\n+                    in_comment = false;\n+                    continue;\n+                }\n+            } else {\n+                let multi_idx = line.find(\"/*\").unwrap_or_else(|| line.len());\n+                let single_idx = line.find(\"//\").unwrap_or_else(|| line.len());\n+                code_in_line |= multi_idx > 0 && single_idx > 0;\n+                // Implies multi_idx is below line.len()\n+                if multi_idx < single_idx {\n+                    line = &line[multi_idx + 2..];\n+                    in_comment = true;\n+                    continue;\n+                }\n+            }\n+            break;\n+        }\n+        if code_in_line {\n+            line_count += 1;\n+        }\n+    }\n+\n+    if line_count > too_many_lines_threshold {\n+        span_lint(\n+            cx,\n+            TOO_MANY_LINES,\n+            span,\n+            &format!(\n+                \"this function has too many lines ({}/{})\",\n+                line_count, too_many_lines_threshold\n+            ),\n+        )\n+    }\n+}"}]}