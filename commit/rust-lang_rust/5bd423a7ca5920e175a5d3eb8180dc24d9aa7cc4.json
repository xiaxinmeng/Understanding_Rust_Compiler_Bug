{"sha": "5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDQyM2E3Y2E1OTIwZTE3NWE1ZDNlYjgxODBkYzI0ZDlhYTdjYzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-25T14:55:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:23Z"}, "message": "introduce more tests covering `async fn` surface", "tree": {"sha": "dea2a791128af5839cfba3ebe53bd0fb5081117c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea2a791128af5839cfba3ebe53bd0fb5081117c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "html_url": "https://github.com/rust-lang/rust/commit/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076b0d0f5cc33f108fda043c2e6e12229d734cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/076b0d0f5cc33f108fda043c2e6e12229d734cf4", "html_url": "https://github.com/rust-lang/rust/commit/076b0d0f5cc33f108fda043c2e6e12229d734cf4"}], "stats": {"total": 243, "additions": 239, "deletions": 4}, "files": [{"sha": "8355a450ae64135b328cf6c4890d541031f99b5c", "filename": "src/test/ui/async-await/multiple-lifetimes/elided.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-pass\n+\n+// Test that we can use async fns with multiple arbitrary lifetimes.\n+\n+#![feature(async_await, await_macro)]\n+\n+async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n+\n+fn main() {\n+    let _ = multiple_elided_lifetimes(&22, &44);\n+}"}, {"sha": "5f3820b6c31cd84ecda308f71c2a0ee9f60aa714", "filename": "src/test/ui/async-await/multiple-lifetimes/fn-ptr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+// run-pass\n+\n+// Test that we can use async fns with multiple arbitrary lifetimes.\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8, _: fn(&u8)) {}\n+\n+fn gimme(_: &u8) { }\n+\n+fn main() {\n+    let _ = multiple_named_lifetimes(&22, &44, gimme);\n+}"}, {"sha": "620b0080966b9e5e70f3dddc4127194625ab05ca", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -4,17 +4,14 @@\n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n #![feature(arbitrary_self_types, async_await, await_macro)]\n+#![allow(dead_code)]\n \n use std::ops::Add;\n \n-async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n-\n async fn multiple_hrtb_and_single_named_lifetime_ok<'c>(\n     _: impl for<'a> Add<&'a u8>,\n     _: impl for<'b> Add<&'b u8>,\n     _: &'c u8,\n ) {}\n \n-async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n-\n fn main() {}", "previous_filename": "src/test/ui/async-await/async-fn-multiple-lifetimes.rs"}, {"sha": "7d13d48bc8bbde12e87cd361337e5c1a7b216405", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-pass\n+\n+// Test that we can use async fns with multiple arbitrary lifetimes.\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n+\n+fn main() {\n+    let _ = multiple_named_lifetimes(&22, &44);\n+}"}, {"sha": "903c43950a5c46f966b0188d6716d5c4fa985885", "filename": "src/test/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+// run-pass\n+\n+#![feature(async_await)]\n+\n+async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n+    where 'b: 'a\n+{\n+    drop((a, c));\n+    (b, b)\n+}\n+\n+fn main() {\n+    let _ = lotsa_lifetimes(&22, &44, &66);\n+}"}, {"sha": "08622311f7b1cb5a1f7595cb5058fdb8152c0284", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+// run-pass\n+\n+// Test that a feature gate is needed to use `impl Trait` as the\n+// return type of an async.\n+\n+#![feature(async_await, member_constraints)]\n+\n+trait Trait<'a, 'b> { }\n+impl<T> Trait<'_, '_> for T { }\n+\n+async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+    (a, b)\n+}\n+\n+fn main() {\n+    let _ = async_ret_impl_trait(&22, &44);\n+}"}, {"sha": "0359d5deb4d3024ba7926c6764f12a5e003b3ea7", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+\n+// Test that a feature gate is needed to use `impl Trait` as the\n+// return type of an async.\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+trait Trait<'a, 'b> { }\n+impl<T> Trait<'_, '_> for T { }\n+\n+async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+    //~^ ERROR ambiguous lifetime bound\n+    (a, b)\n+}\n+\n+fn main() {\n+    let _ = async_ret_impl_trait(&22, &44);\n+}"}, {"sha": "de2c85d772a72610e7d88f7b2334f2de80c37070", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,10 @@\n+error: ambiguous lifetime bound in `impl Trait`\n+  --> $DIR/ret-impl-trait-no-fg.rs:11:64\n+   |\n+LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n+   |\n+   = help: add #![feature(member_constraints)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "27f789e340d09d63b463625b938c9f07e273e55e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,27 @@\n+// edition:2018\n+\n+// Test that a feature gate is needed to use `impl Trait` as the\n+// return type of an async.\n+\n+#![feature(async_await, member_constraints)]\n+\n+trait Trait<'a> { }\n+impl<T> Trait<'_> for T { }\n+\n+// Only `'a` permitted in return type, not `'b`.\n+async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+    //~^ ERROR lifetime mismatch\n+    (a, b)\n+}\n+\n+// As above, but `'b: 'a`, so return type ca be inferred to `(&'a u8,\n+// &'a u8)`.\n+async fn async_ret_impl_trait2<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a>\n+where\n+    'b: 'a,\n+{\n+    (a, b)\n+}\n+\n+fn main() {\n+}"}, {"sha": "f6d611517bc8f7abff1dde1637685e1cd33df26d", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,11 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ret-impl-trait-one.rs:12:65\n+   |\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+   |                                           ------                ^^^^^^^^^^^^^^\n+   |                                           |                     |\n+   |                                           |                     ...but data from `b` is returned here\n+   |                                           this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to previous error\n+"}, {"sha": "98da90161e5fd014cb25d67439bba1216ffd5eb2", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+// Test that we get the expected borrow check errors when an async\n+// function (which takes multiple lifetimes) only returns data from\n+// one of them.\n+\n+#![feature(async_await)]\n+\n+async fn multiple_named_lifetimes<'a, 'b>(a: &'a u8, _: &'b u8) -> &'a u8 {\n+    a\n+}\n+\n+// Both are borrowed whilst the future is live.\n+async fn future_live() {\n+    let mut a = 22;\n+    let mut b = 44;\n+    let future = multiple_named_lifetimes(&a, &b);\n+    a += 1; //~ ERROR cannot assign\n+    b += 1; //~ ERROR cannot assign\n+    let p = future.await;\n+    drop(p);\n+}\n+\n+// Just the return value is live after future is awaited.\n+async fn just_return_live() {\n+    let mut a = 22;\n+    let mut b = 44;\n+    let future = multiple_named_lifetimes(&a, &b);\n+    let p = future.await;\n+    a += 1; //~ ERROR cannot assign\n+    b += 1;\n+    drop(p);\n+}\n+\n+// Once `p` is dead, both `a` and `b` are unborrowed.\n+async fn after_both_dead() {\n+    let mut a = 22;\n+    let mut b = 44;\n+    let future = multiple_named_lifetimes(&a, &b);\n+    let p = future.await;\n+    drop(p);\n+    a += 1;\n+    b += 1;\n+}\n+\n+fn main() { }"}, {"sha": "fe70d35942c7c679811f02fbec8fb7ab07f2a682", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,37 @@\n+error[E0506]: cannot assign to `a` because it is borrowed\n+  --> $DIR/ret-ref.rs:18:5\n+   |\n+LL |     let future = multiple_named_lifetimes(&a, &b);\n+   |                                           -- borrow of `a` occurs here\n+LL |     a += 1;\n+   |     ^^^^^^ assignment to borrowed `a` occurs here\n+LL |     b += 1;\n+LL |     let p = future.await;\n+   |             ------ borrow later used here\n+\n+error[E0506]: cannot assign to `b` because it is borrowed\n+  --> $DIR/ret-ref.rs:19:5\n+   |\n+LL |     let future = multiple_named_lifetimes(&a, &b);\n+   |                                               -- borrow of `b` occurs here\n+LL |     a += 1;\n+LL |     b += 1;\n+   |     ^^^^^^ assignment to borrowed `b` occurs here\n+LL |     let p = future.await;\n+   |             ------ borrow later used here\n+\n+error[E0506]: cannot assign to `a` because it is borrowed\n+  --> $DIR/ret-ref.rs:30:5\n+   |\n+LL |     let future = multiple_named_lifetimes(&a, &b);\n+   |                                           -- borrow of `a` occurs here\n+LL |     let p = future.await;\n+LL |     a += 1;\n+   |     ^^^^^^ assignment to borrowed `a` occurs here\n+LL |     b += 1;\n+LL |     drop(p);\n+   |          - borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "4c1788712148b358540b8b0c3e07892657fc42fc", "filename": "src/test/ui/async-await/multiple-lifetimes/variance.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs?ref=5bd423a7ca5920e175a5d3eb8180dc24d9aa7cc4", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+// run-pass\n+\n+// Test for async fn where the parameters have distinct lifetime\n+// parameters that appear in all possible variances.\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+#[allow(dead_code)]\n+async fn lotsa_lifetimes<'a, 'b, 'c>(_: fn(&'a u8), _: fn(&'b u8) -> &'b u8, _: fn() -> &'c u8) { }\n+\n+fn take_any(_: &u8) { }\n+fn identify(x: &u8) -> &u8 { x }\n+fn give_back() -> &'static u8 { &22 }\n+\n+fn main() {\n+    let _ = lotsa_lifetimes(take_any, identify, give_back);\n+}"}]}