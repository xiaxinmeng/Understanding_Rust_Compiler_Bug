{"sha": "6c54745784b03e614a7a152ef010c05207156c2a", "node_id": "C_kwDOAAsO6NoAKDZjNTQ3NDU3ODRiMDNlNjE0YTdhMTUyZWYwMTBjMDUyMDcxNTZjMmE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:05:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T19:05:22Z"}, "message": "Make `pointer::with_metadata_of` const (+simplify implementation)", "tree": {"sha": "3a1b3a2421ac9b5da2d00f64bfd657c2373d20f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a1b3a2421ac9b5da2d00f64bfd657c2373d20f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c54745784b03e614a7a152ef010c05207156c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c54745784b03e614a7a152ef010c05207156c2a", "html_url": "https://github.com/rust-lang/rust/commit/6c54745784b03e614a7a152ef010c05207156c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c54745784b03e614a7a152ef010c05207156c2a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "html_url": "https://github.com/rust-lang/rust/commit/44fcfb0a9606fa08ea293a71f2e6d470227ef9df"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "56246ccfa8ae92899ea9239434588e7b578b2494", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c54745784b03e614a7a152ef010c05207156c2a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c54745784b03e614a7a152ef010c05207156c2a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=6c54745784b03e614a7a152ef010c05207156c2a", "patch": "@@ -79,19 +79,14 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, mut val: *const U) -> *const U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *const U\n     where\n         U: ?Sized,\n     {\n-        let target = &mut val as *mut *const U as *mut *const u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *const u8 };\n-        val\n+        from_raw_parts::<U>(self as *const (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type."}, {"sha": "ddbe69d97f260352787a0e5d04594a4bdf03b623", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c54745784b03e614a7a152ef010c05207156c2a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c54745784b03e614a7a152ef010c05207156c2a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=6c54745784b03e614a7a152ef010c05207156c2a", "patch": "@@ -78,23 +78,14 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, val: *const U) -> *mut U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *mut U\n     where\n         U: ?Sized,\n     {\n-        // Prepare in the type system that we will replace the pointer value with a mutable\n-        // pointer, taking the mutable provenance from the `self` pointer.\n-        let mut val = val as *mut U;\n-        // Pointer to the pointer value within the value.\n-        let target = &mut val as *mut *mut U as *mut *mut u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *mut u8 };\n-        val\n+        from_raw_parts_mut::<U>(self as *mut (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type."}]}