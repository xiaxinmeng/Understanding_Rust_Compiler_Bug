{"sha": "933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzM2JiMTg5NTZmOGU4YTU3ZTEzMGNlMGM5ZDM0MmJlY2MwYWQwYWU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-12T14:28:49Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-01-18T20:09:23Z"}, "message": "Use `rustc_type_ir::{IntTy,UintTy,FloatTy} instead of the `rustc_ast` ones in types", "tree": {"sha": "c3aa5c6d17599bcf4f31dc1bf8a2255abbabd89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3aa5c6d17599bcf4f31dc1bf8a2255abbabd89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "html_url": "https://github.com/rust-lang/rust/commit/933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0724573448a09f90d087f5341de483f9ef85a9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0724573448a09f90d087f5341de483f9ef85a9be", "html_url": "https://github.com/rust-lang/rust/commit/0724573448a09f90d087f5341de483f9ef85a9be"}], "stats": {"total": 217, "additions": 143, "deletions": 74}, "files": [{"sha": "20a6af5f6c13bb0d4207e2ad8f188e1829f8d18d", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -3,13 +3,12 @@\n \n use crate::ty::{self, Ty};\n \n-use rustc_ast as ast;\n use rustc_macros::HashStable;\n \n /// Types that are represented as ints.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum IntTy {\n-    U(ast::UintTy),\n+    U(ty::UintTy),\n     I,\n     CEnum,\n     Bool,"}, {"sha": "1255302f743840359809554d2f062c48db8c9f84", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -19,10 +19,10 @@ use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, Substs\n use crate::ty::TyKind::*;\n use crate::ty::{\n     self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n-    DefIdTree, ExistentialPredicate, FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy,\n-    IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateInner, PredicateKind,\n-    ProjectionTy, Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar,\n-    TyVid, TypeAndMut, Visibility,\n+    DefIdTree, ExistentialPredicate, FloatTy, FloatVar, FloatVid, GenericParamDefKind, InferConst,\n+    InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate,\n+    PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n+    TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n@@ -839,20 +839,20 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: mk(Bool),\n             char: mk(Char),\n             never: mk(Never),\n-            isize: mk(Int(ast::IntTy::Isize)),\n-            i8: mk(Int(ast::IntTy::I8)),\n-            i16: mk(Int(ast::IntTy::I16)),\n-            i32: mk(Int(ast::IntTy::I32)),\n-            i64: mk(Int(ast::IntTy::I64)),\n-            i128: mk(Int(ast::IntTy::I128)),\n-            usize: mk(Uint(ast::UintTy::Usize)),\n-            u8: mk(Uint(ast::UintTy::U8)),\n-            u16: mk(Uint(ast::UintTy::U16)),\n-            u32: mk(Uint(ast::UintTy::U32)),\n-            u64: mk(Uint(ast::UintTy::U64)),\n-            u128: mk(Uint(ast::UintTy::U128)),\n-            f32: mk(Float(ast::FloatTy::F32)),\n-            f64: mk(Float(ast::FloatTy::F64)),\n+            isize: mk(Int(ty::IntTy::Isize)),\n+            i8: mk(Int(ty::IntTy::I8)),\n+            i16: mk(Int(ty::IntTy::I16)),\n+            i32: mk(Int(ty::IntTy::I32)),\n+            i64: mk(Int(ty::IntTy::I64)),\n+            i128: mk(Int(ty::IntTy::I128)),\n+            usize: mk(Uint(ty::UintTy::Usize)),\n+            u8: mk(Uint(ty::UintTy::U8)),\n+            u16: mk(Uint(ty::UintTy::U16)),\n+            u32: mk(Uint(ty::UintTy::U32)),\n+            u64: mk(Uint(ty::UintTy::U64)),\n+            u128: mk(Uint(ty::UintTy::U128)),\n+            f32: mk(Float(ty::FloatTy::F32)),\n+            f64: mk(Float(ty::FloatTy::F64)),\n             str_: mk(Str),\n             self_param: mk(ty::Param(ty::ParamTy { index: 0, name: kw::SelfUpper })),\n \n@@ -2102,32 +2102,32 @@ impl<'tcx> TyCtxt<'tcx> {\n         if pred.kind() != binder { self.mk_predicate(binder) } else { pred }\n     }\n \n-    pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {\n+    pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {\n         match tm {\n-            ast::IntTy::Isize => self.types.isize,\n-            ast::IntTy::I8 => self.types.i8,\n-            ast::IntTy::I16 => self.types.i16,\n-            ast::IntTy::I32 => self.types.i32,\n-            ast::IntTy::I64 => self.types.i64,\n-            ast::IntTy::I128 => self.types.i128,\n+            IntTy::Isize => self.types.isize,\n+            IntTy::I8 => self.types.i8,\n+            IntTy::I16 => self.types.i16,\n+            IntTy::I32 => self.types.i32,\n+            IntTy::I64 => self.types.i64,\n+            IntTy::I128 => self.types.i128,\n         }\n     }\n \n-    pub fn mk_mach_uint(self, tm: ast::UintTy) -> Ty<'tcx> {\n+    pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {\n         match tm {\n-            ast::UintTy::Usize => self.types.usize,\n-            ast::UintTy::U8 => self.types.u8,\n-            ast::UintTy::U16 => self.types.u16,\n-            ast::UintTy::U32 => self.types.u32,\n-            ast::UintTy::U64 => self.types.u64,\n-            ast::UintTy::U128 => self.types.u128,\n+            UintTy::Usize => self.types.usize,\n+            UintTy::U8 => self.types.u8,\n+            UintTy::U16 => self.types.u16,\n+            UintTy::U32 => self.types.u32,\n+            UintTy::U64 => self.types.u64,\n+            UintTy::U128 => self.types.u128,\n         }\n     }\n \n-    pub fn mk_mach_float(self, tm: ast::FloatTy) -> Ty<'tcx> {\n+    pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {\n         match tm {\n-            ast::FloatTy::F32 => self.types.f32,\n-            ast::FloatTy::F64 => self.types.f64,\n+            FloatTy::F32 => self.types.f32,\n+            FloatTy::F64 => self.types.f64,\n         }\n     }\n "}, {"sha": "c211f07bed8c2f41bf640ac845df95ad52624730", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -1,7 +1,6 @@\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n-use rustc_ast as ast;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -48,7 +47,7 @@ pub enum TypeError<'tcx> {\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n-    FloatMismatch(ExpectedFound<ast::FloatTy>),\n+    FloatMismatch(ExpectedFound<ty::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n     VariadicMismatch(ExpectedFound<bool>),\n "}, {"sha": "94d75a469d3d7527054af67ef8bc18594f077329", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -1,6 +1,5 @@\n use crate::ich::StableHashingContext;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_ast as ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n@@ -24,9 +23,9 @@ where\n {\n     BoolSimplifiedType,\n     CharSimplifiedType,\n-    IntSimplifiedType(ast::IntTy),\n-    UintSimplifiedType(ast::UintTy),\n-    FloatSimplifiedType(ast::FloatTy),\n+    IntSimplifiedType(ty::IntTy),\n+    UintSimplifiedType(ty::UintTy),\n+    FloatSimplifiedType(ty::FloatTy),\n     AdtSimplifiedType(D),\n     StrSimplifiedType,\n     ArraySimplifiedType,"}, {"sha": "03728ed59ad7356e886751f07f4ba00e35b0ccbd", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -4,7 +4,7 @@ use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n-use rustc_ast::{self as ast, IntTy, UintTy};\n+use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n@@ -30,6 +30,8 @@ use std::ops::Bound;\n pub trait IntegerExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n+    fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer;\n+    fn from_uint_ty<C: HasDataLayout>(cx: &C, uty: ty::UintTy) -> Integer;\n     fn repr_discr<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n@@ -60,17 +62,38 @@ impl IntegerExt for Integer {\n         let dl = cx.data_layout();\n \n         match ity {\n-            attr::SignedInt(IntTy::I8) | attr::UnsignedInt(UintTy::U8) => I8,\n-            attr::SignedInt(IntTy::I16) | attr::UnsignedInt(UintTy::U16) => I16,\n-            attr::SignedInt(IntTy::I32) | attr::UnsignedInt(UintTy::U32) => I32,\n-            attr::SignedInt(IntTy::I64) | attr::UnsignedInt(UintTy::U64) => I64,\n-            attr::SignedInt(IntTy::I128) | attr::UnsignedInt(UintTy::U128) => I128,\n-            attr::SignedInt(IntTy::Isize) | attr::UnsignedInt(UintTy::Usize) => {\n+            attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) => I8,\n+            attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) => I16,\n+            attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) => I32,\n+            attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) => I64,\n+            attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => I128,\n+            attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => {\n                 dl.ptr_sized_integer()\n             }\n         }\n     }\n \n+    fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer {\n+        match ity {\n+            ty::IntTy::I8 => I8,\n+            ty::IntTy::I16 => I16,\n+            ty::IntTy::I32 => I32,\n+            ty::IntTy::I64 => I64,\n+            ty::IntTy::I128 => I128,\n+            ty::IntTy::Isize => cx.data_layout().ptr_sized_integer(),\n+        }\n+    }\n+    fn from_uint_ty<C: HasDataLayout>(cx: &C, ity: ty::UintTy) -> Integer {\n+        match ity {\n+            ty::UintTy::U8 => I8,\n+            ty::UintTy::U16 => I16,\n+            ty::UintTy::U32 => I32,\n+            ty::UintTy::U64 => I64,\n+            ty::UintTy::U128 => I128,\n+            ty::UintTy::Usize => cx.data_layout().ptr_sized_integer(),\n+        }\n+    }\n+\n     /// Finds the appropriate Integer type and signedness for the given\n     /// signed discriminant range and `#[repr]` attribute.\n     /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but\n@@ -487,11 +510,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 self,\n                 Scalar { value: Int(I32, false), valid_range: 0..=0x10FFFF },\n             )),\n-            ty::Int(ity) => scalar(Int(Integer::from_attr(dl, attr::SignedInt(ity)), true)),\n-            ty::Uint(ity) => scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false)),\n+            ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),\n+            ty::Uint(ity) => scalar(Int(Integer::from_uint_ty(dl, ity), false)),\n             ty::Float(fty) => scalar(match fty {\n-                ast::FloatTy::F32 => F32,\n-                ast::FloatTy::F64 => F64,\n+                ty::FloatTy::F32 => F32,\n+                ty::FloatTy::F64 => F64,\n             }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);"}, {"sha": "7f4a494e37cb4eec4b75f1329d0f1937a388ee5e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -3045,6 +3045,57 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     None\n }\n \n+pub fn int_ty(ity: ast::IntTy) -> IntTy {\n+    match ity {\n+        ast::IntTy::Isize => IntTy::Isize,\n+        ast::IntTy::I8 => IntTy::I8,\n+        ast::IntTy::I16 => IntTy::I16,\n+        ast::IntTy::I32 => IntTy::I32,\n+        ast::IntTy::I64 => IntTy::I64,\n+        ast::IntTy::I128 => IntTy::I128,\n+    }\n+}\n+\n+pub fn uint_ty(uty: ast::UintTy) -> UintTy {\n+    match uty {\n+        ast::UintTy::Usize => UintTy::Usize,\n+        ast::UintTy::U8 => UintTy::U8,\n+        ast::UintTy::U16 => UintTy::U16,\n+        ast::UintTy::U32 => UintTy::U32,\n+        ast::UintTy::U64 => UintTy::U64,\n+        ast::UintTy::U128 => UintTy::U128,\n+    }\n+}\n+\n+pub fn float_ty(fty: ast::FloatTy) -> FloatTy {\n+    match fty {\n+        ast::FloatTy::F32 => FloatTy::F32,\n+        ast::FloatTy::F64 => FloatTy::F64,\n+    }\n+}\n+\n+pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {\n+    match ity {\n+        IntTy::Isize => ast::IntTy::Isize,\n+        IntTy::I8 => ast::IntTy::I8,\n+        IntTy::I16 => ast::IntTy::I16,\n+        IntTy::I32 => ast::IntTy::I32,\n+        IntTy::I64 => ast::IntTy::I64,\n+        IntTy::I128 => ast::IntTy::I128,\n+    }\n+}\n+\n+pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {\n+    match uty {\n+        UintTy::Usize => ast::UintTy::Usize,\n+        UintTy::U8 => ast::UintTy::U8,\n+        UintTy::U16 => ast::UintTy::U16,\n+        UintTy::U32 => ast::UintTy::U32,\n+        UintTy::U64 => ast::UintTy::U64,\n+        UintTy::U128 => ast::UintTy::U128,\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);"}, {"sha": "4937fdd73144de928d7bbae4bb1e1f06a40cf5c6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -3,7 +3,6 @@ use crate::mir::interpret::{AllocId, ConstValue, GlobalAlloc, Pointer, Scalar};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n-use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n@@ -973,7 +972,7 @@ pub trait PrettyPrinter<'tcx>:\n                     ty::TyS {\n                         kind:\n                             ty::Array(\n-                                ty::TyS { kind: ty::Uint(ast::UintTy::U8), .. },\n+                                ty::TyS { kind: ty::Uint(ty::UintTy::U8), .. },\n                                 ty::Const {\n                                     val: ty::ConstKind::Value(ConstValue::Scalar(int)),\n                                     ..\n@@ -1002,10 +1001,10 @@ pub trait PrettyPrinter<'tcx>:\n             (Scalar::Int(int), ty::Bool) if int == ScalarInt::FALSE => p!(\"false\"),\n             (Scalar::Int(int), ty::Bool) if int == ScalarInt::TRUE => p!(\"true\"),\n             // Float\n-            (Scalar::Int(int), ty::Float(ast::FloatTy::F32)) => {\n+            (Scalar::Int(int), ty::Float(ty::FloatTy::F32)) => {\n                 p!(write(\"{}f32\", Single::try_from(int).unwrap()))\n             }\n-            (Scalar::Int(int), ty::Float(ast::FloatTy::F64)) => {\n+            (Scalar::Int(int), ty::Float(ty::FloatTy::F64)) => {\n                 p!(write(\"{}f64\", Double::try_from(int).unwrap()))\n             }\n             // Int"}, {"sha": "9cec0eb5be3c508d4ec7fb12aa9e57bdaf7a7fde", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -12,7 +12,6 @@ use crate::ty::{\n };\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv, TyS};\n use polonius_engine::Atom;\n-use rustc_ast as ast;\n use rustc_data_structures::captures::Captures;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -104,13 +103,13 @@ pub enum TyKind<'tcx> {\n     Char,\n \n     /// A primitive signed integer type. For example, `i32`.\n-    Int(ast::IntTy),\n+    Int(ty::IntTy),\n \n     /// A primitive unsigned integer type. For example, `u32`.\n-    Uint(ast::UintTy),\n+    Uint(ty::UintTy),\n \n     /// A primitive floating-point type. For example, `f64`.\n-    Float(ast::FloatTy),\n+    Float(ty::FloatTy),\n \n     /// Algebraic data types (ADT). For example: structures, enumerations and unions.\n     ///\n@@ -1798,7 +1797,7 @@ impl<'tcx> TyS<'tcx> {\n     pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind() {\n             Array(ty, _) | Slice(ty) => ty,\n-            Str => tcx.mk_mach_uint(ast::UintTy::U8),\n+            Str => tcx.mk_mach_uint(ty::UintTy::U8),\n             _ => bug!(\"`sequence_element_type` called on non-sequence value: {}\", self),\n         }\n     }\n@@ -1938,7 +1937,7 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_ptr_sized_integral(&self) -> bool {\n-        matches!(self.kind(), Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize))\n+        matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))\n     }\n \n     #[inline]\n@@ -2126,9 +2125,9 @@ impl<'tcx> TyS<'tcx> {\n     pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {\n         match self.kind() {\n             Int(int_ty) => match int_ty {\n-                ast::IntTy::I8 => Some(ty::ClosureKind::Fn),\n-                ast::IntTy::I16 => Some(ty::ClosureKind::FnMut),\n-                ast::IntTy::I32 => Some(ty::ClosureKind::FnOnce),\n+                ty::IntTy::I8 => Some(ty::ClosureKind::Fn),\n+                ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),\n+                ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),\n                 _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n             },\n "}, {"sha": "8edde8794ed27c3de6ef2544acc857c6da7d888e", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933bb18956f8e8a57e130ce0c9d342becc0ad0ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self.ty.kind() {\n             ty::Int(ity) => {\n-                let size = ty::tls::with(|tcx| Integer::from_attr(&tcx, SignedInt(ity)).size());\n+                let size = ty::tls::with(|tcx| Integer::from_int_ty(&tcx, ity).size());\n                 let x = self.val;\n                 // sign extend the raw representation to be an i128\n                 let x = size.sign_extend(x) as i128;\n@@ -59,8 +59,8 @@ fn unsigned_max(size: Size) -> u128 {\n \n fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {\n     let (int, signed) = match *ty.kind() {\n-        Int(ity) => (Integer::from_attr(&tcx, SignedInt(ity)), true),\n-        Uint(uty) => (Integer::from_attr(&tcx, UnsignedInt(uty)), false),\n+        Int(ity) => (Integer::from_int_ty(&tcx, ity), true),\n+        Uint(uty) => (Integer::from_uint_ty(&tcx, uty), false),\n         _ => bug!(\"non integer discriminant\"),\n     };\n     (int.size(), signed)\n@@ -642,8 +642,8 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n             ty::Char => Some(std::char::MAX as u128),\n             ty::Float(fty) => Some(match fty {\n-                ast::FloatTy::F32 => rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n-                ast::FloatTy::F64 => rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n+                ty::FloatTy::F32 => rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n+                ty::FloatTy::F64 => rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n             }),\n             _ => None,\n         };\n@@ -661,8 +661,8 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n             ty::Char => Some(0),\n             ty::Float(fty) => Some(match fty {\n-                ast::FloatTy::F32 => (-::rustc_apfloat::ieee::Single::INFINITY).to_bits(),\n-                ast::FloatTy::F64 => (-::rustc_apfloat::ieee::Double::INFINITY).to_bits(),\n+                ty::FloatTy::F32 => (-::rustc_apfloat::ieee::Single::INFINITY).to_bits(),\n+                ty::FloatTy::F64 => (-::rustc_apfloat::ieee::Double::INFINITY).to_bits(),\n             }),\n             _ => None,\n         };"}]}