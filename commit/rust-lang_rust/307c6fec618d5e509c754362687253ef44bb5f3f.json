{"sha": "307c6fec618d5e509c754362687253ef44bb5f3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwN2M2ZmVjNjE4ZDVlNTA5Yzc1NDM2MjY4NzI1M2VmNDRiYjVmM2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T07:53:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T07:53:53Z"}, "message": "Use CrateName for semantic names", "tree": {"sha": "09715ea291087ed1fffa4dc597c02a5541564bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09715ea291087ed1fffa4dc597c02a5541564bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/307c6fec618d5e509c754362687253ef44bb5f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/307c6fec618d5e509c754362687253ef44bb5f3f", "html_url": "https://github.com/rust-lang/rust/commit/307c6fec618d5e509c754362687253ef44bb5f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/307c6fec618d5e509c754362687253ef44bb5f3f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e336a96998710c94685d42435acccff15dc8cd4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e336a96998710c94685d42435acccff15dc8cd4f", "html_url": "https://github.com/rust-lang/rust/commit/e336a96998710c94685d42435acccff15dc8cd4f"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "a8cc588f9cde11e539e452cb16abab9eb6e3d961", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=307c6fec618d5e509c754362687253ef44bb5f3f", "patch": "@@ -94,6 +94,13 @@ impl fmt::Display for CrateName {\n     }\n }\n \n+impl ops::Deref for CrateName {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        &*self.0\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ProcMacroId(pub u32);\n \n@@ -138,7 +145,7 @@ pub struct Env {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n-    pub name: SmolStr,\n+    pub name: CrateName,\n }\n \n impl CrateGraph {\n@@ -178,7 +185,7 @@ impl CrateGraph {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n             return Err(CyclicDependenciesError);\n         }\n-        self.arena.get_mut(&from).unwrap().add_dep(name.0, to);\n+        self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n     }\n \n@@ -247,7 +254,7 @@ impl CrateId {\n }\n \n impl CrateData {\n-    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n+    fn add_dep(&mut self, name: CrateName, crate_id: CrateId) {\n         self.dependencies.push(Dependency { name, crate_id })\n     }\n }\n@@ -429,7 +436,10 @@ mod tests {\n             .is_ok());\n         assert_eq!(\n             graph[crate1].dependencies,\n-            vec![Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n+            vec![Dependency {\n+                crate_id: crate2,\n+                name: CrateName::new(\"crate_name_with_dashes\").unwrap()\n+            }]\n         );\n     }\n }"}, {"sha": "f2d6648638563cc6be5eff2a6d530cb23a4a17ee", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=307c6fec618d5e509c754362687253ef44bb5f3f", "patch": "@@ -161,7 +161,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n     // XXX\n     //  All crates except core itself should have a dependency on core,\n     //  We detect `core` by seeing whether it doesn't have such a dependency.\n-    let tt = if cg[krate].dependencies.iter().any(|dep| dep.name == \"core\") {\n+    let tt = if cg[krate].dependencies.iter().any(|dep| &*dep.name == \"core\") {\n         quote! { core }\n     } else {\n         quote! { crate }"}, {"sha": "969a2e5b834eea7e3ebc450d6142bc104f9a4f61", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=307c6fec618d5e509c754362687253ef44bb5f3f", "patch": "@@ -117,7 +117,7 @@ impl AsName for ast::FieldKind {\n \n impl AsName for ra_db::Dependency {\n     fn as_name(&self) -> Name {\n-        Name::new_text(self.name.clone())\n+        Name::new_text(SmolStr::new(&*self.name))\n     }\n }\n "}, {"sha": "1533d32c98aa599cf68ef21d8bf7c7b69b34e617", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=307c6fec618d5e509c754362687253ef44bb5f3f", "patch": "@@ -288,10 +288,7 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n-                            if crate_graph\n-                                .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n-                                .is_err()\n-                            {\n+                            if crate_graph.add_dep(from, dep.name.clone(), to).is_err() {\n                                 log::error!(\n                                     \"cyclic dependency {:?} -> {:?}\",\n                                     from_crate_id,"}, {"sha": "9fe1e2dcb792d423516e22d27ad83d390857274a", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307c6fec618d5e509c754362687253ef44bb5f3f/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=307c6fec618d5e509c754362687253ef44bb5f3f", "patch": "@@ -4,9 +4,9 @@ use std::path::PathBuf;\n \n use paths::{AbsPath, AbsPathBuf};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateId, Dependency, Edition};\n+use ra_db::{CrateId, CrateName, Dependency, Edition};\n use rustc_hash::FxHashSet;\n-use serde::Deserialize;\n+use serde::{de, Deserialize};\n use stdx::split_delim;\n \n /// Roots and crates that compose this Rust project.\n@@ -50,7 +50,7 @@ impl ProjectJson {\n                         .into_iter()\n                         .map(|dep_data| Dependency {\n                             crate_id: CrateId(dep_data.krate as u32),\n-                            name: dep_data.name.into(),\n+                            name: dep_data.name,\n                         })\n                         .collect::<Vec<_>>(),\n                     cfg: {\n@@ -113,5 +113,14 @@ struct DepData {\n     /// Identifies a crate by position in the crates array.\n     #[serde(rename = \"crate\")]\n     krate: usize,\n-    name: String,\n+    #[serde(deserialize_with = \"deserialize_crate_name\")]\n+    name: CrateName,\n+}\n+\n+fn deserialize_crate_name<'de, D>(de: D) -> Result<CrateName, D::Error>\n+where\n+    D: de::Deserializer<'de>,\n+{\n+    let name = String::deserialize(de)?;\n+    CrateName::new(&name).map_err(|err| de::Error::custom(format!(\"invalid crate name: {:?}\", err)))\n }"}]}