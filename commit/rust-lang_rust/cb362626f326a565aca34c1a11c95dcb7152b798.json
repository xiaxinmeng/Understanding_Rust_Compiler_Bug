{"sha": "cb362626f326a565aca34c1a11c95dcb7152b798", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzYyNjI2ZjMyNmE1NjVhY2EzNGMxYTExYzk1ZGNiNzE1MmI3OTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T15:58:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T15:58:46Z"}, "message": "Parser: guess what? Groundwork!", "tree": {"sha": "5a1cc081e36b4061f8e9275db9bf14ed71e924f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1cc081e36b4061f8e9275db9bf14ed71e924f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb362626f326a565aca34c1a11c95dcb7152b798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb362626f326a565aca34c1a11c95dcb7152b798", "html_url": "https://github.com/rust-lang/rust/commit/cb362626f326a565aca34c1a11c95dcb7152b798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb362626f326a565aca34c1a11c95dcb7152b798/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af33a2587e4fb96e5001492792f1e926d576e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af33a2587e4fb96e5001492792f1e926d576e27", "html_url": "https://github.com/rust-lang/rust/commit/0af33a2587e4fb96e5001492792f1e926d576e27"}], "stats": {"total": 257, "additions": 199, "deletions": 58}, "files": [{"sha": "fb2c6d90ed3e213786f46517e83995dc2a8a46cd", "filename": "grammar.ron", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -1,4 +1,12 @@\n Grammar(\n+    keywords: [\n+        \"use\",\n+        \"fn\",\n+        \"struct\",\n+        \"enum\",\n+        \"trait\",\n+        \"impl\",\n+    ],\n     tokens: [\n         \"ERROR\",\n         \"IDENT\",\n@@ -53,6 +61,6 @@ Grammar(\n         \"SHEBANG\",\n     ],\n     nodes: [\n-        \"FILE\"\n+        \"FILE\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "9d7f7e3893a10db72aa0cf0032f3976cb0da6065", "filename": "src/bin/gen.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgen.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -17,6 +17,7 @@ fn main() {\n \n #[derive(Deserialize)]\n struct Grammar {\n+    keywords: Vec<String>,\n     tokens: Vec<String>,\n     nodes: Vec<String>,\n }\n@@ -33,8 +34,10 @@ impl Grammar {\n         acc.push_str(\"use tree::{SyntaxKind, SyntaxInfo};\\n\");\n         acc.push_str(\"\\n\");\n \n-        let syntax_kinds: Vec<&String> =\n-            self.tokens.iter().chain(self.nodes.iter())\n+        let syntax_kinds: Vec<String> =\n+            self.keywords.iter().map(|kw| kw_token(kw))\n+                .chain(self.tokens.iter().cloned())\n+                .chain(self.nodes.iter().cloned())\n                 .collect();\n \n         for (idx, kind) in syntax_kinds.iter().enumerate() {\n@@ -60,6 +63,14 @@ impl Grammar {\n \n         acc.push_str(\"pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\\n\");\n         acc.push_str(\"    &INFOS[kind.0 as usize]\\n\");\n+        acc.push_str(\"}\\n\\n\");\n+        acc.push_str(\"pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\\n\");\n+        acc.push_str(\"   match ident {\\n\");\n+        for kw in self.keywords.iter() {\n+            write!(acc, \"       {:?} => Some({}),\\n\", kw, kw_token(kw)).unwrap();\n+        }\n+        acc.push_str(\"       _ => None,\\n\");\n+        acc.push_str(\"   }\\n\");\n         acc.push_str(\"}\\n\");\n         acc\n     }\n@@ -77,4 +88,8 @@ fn generated_file() -> PathBuf {\n \n fn scream(word: &str) -> String {\n     word.chars().map(|c| c.to_ascii_uppercase()).collect()\n+}\n+\n+fn kw_token(keyword: &str) -> String {\n+    format!(\"{}_KW\", scream(keyword))\n }\n\\ No newline at end of file"}, {"sha": "bc5344b5ffac89b3181f3fbd0268b20dc35cd02b", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -187,6 +187,9 @@ fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n         return if c == '_' { UNDERSCORE } else { IDENT };\n     }\n     ptr.bump_while(is_ident_continue);\n+    if let Some(kind) = ident_to_keyword(ptr.current_token_text()) {\n+        return kind;\n+    }\n     IDENT\n }\n "}, {"sha": "ff6ef11fcd2fd1e474aa0f1356af8f56af7bc596", "filename": "src/lexer/ptr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -59,6 +59,11 @@ impl<'s> Ptr<'s> {\n         }\n     }\n \n+    pub fn current_token_text(&self) -> &str {\n+        let len: u32 = self.len.into();\n+        &self.text[..len as usize]\n+    }\n+\n     fn chars(&self) -> Chars {\n         let len: u32 = self.len.into();\n         self.text[len as usize ..].chars()"}, {"sha": "5219ed535debbb97fa7b45c0ae0134d338be6d5b", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -3,8 +3,68 @@ use super::parser::Parser;\n \n use syntax_kinds::*;\n \n+// Items //\n+\n pub fn file(p: &mut Parser) {\n     p.start(FILE);\n-    //TODO: parse_shebang\n+    shebang(p);\n+    inner_attributes(p);\n+    mod_items(p);\n+    p.finish();\n+}\n+\n+type Result = ::std::result::Result<(), ()>;\n+const OK: Result = Ok(());\n+const ERR: Result = Err(());\n+\n+fn shebang(_: &mut Parser) {\n+    //TODO\n+}\n+\n+fn inner_attributes(_: &mut Parser) {\n+    //TODO\n+}\n+\n+fn mod_items(p: &mut Parser) {\n+    loop {\n+        skip_until_item(p);\n+        if p.is_eof() {\n+            return;\n+        }\n+        if item(p).is_err() {\n+            skip_one_token(p);\n+        }\n+    }\n+}\n+\n+fn item(p: &mut Parser) -> Result {\n+    outer_attributes(p)?;\n+    visibility(p)?;\n+    ERR\n+}\n+\n+\n+\n+// Paths, types, attributes, and stuff //\n+\n+fn outer_attributes(_: &mut Parser) -> Result {\n+    OK\n+}\n+\n+fn visibility(_: &mut Parser) -> Result {\n+    OK\n+}\n+\n+// Expressions //\n+\n+// Error recovery and high-order utils //\n+\n+fn skip_until_item(_: &mut Parser) {\n+    //TODO\n+}\n+\n+fn skip_one_token(p: &mut Parser) {\n+    p.start(ERROR);\n+    p.bump().unwrap();\n     p.finish();\n }\n\\ No newline at end of file"}, {"sha": "0e4d44b798480538fd3ed0eae3ecde2def256bef", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -34,10 +34,14 @@ impl<'t> Parser<'t> {\n     }\n \n     pub(crate) fn into_events(self) -> Vec<Event> {\n-        assert!(self.pos == self.non_ws_tokens.len());\n+        assert!(self.is_eof());\n         self.events\n     }\n \n+    pub(crate) fn is_eof(&self) -> bool {\n+        self.pos == self.non_ws_tokens.len()\n+    }\n+\n     pub(crate) fn start(&mut self, kind: SyntaxKind) {\n         self.event(Event::Start { kind });\n     }\n@@ -46,6 +50,15 @@ impl<'t> Parser<'t> {\n         self.event(Event::Finish);\n     }\n \n+    pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n+        if self.is_eof() {\n+            return None;\n+        }\n+        let idx = self.non_ws_tokens[self.pos].0;\n+        self.pos += 1;\n+        Some(self.raw_tokens[idx].kind)\n+    }\n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}, {"sha": "a1bcad062546800cdfe07cd3302661362d045ccd", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 77, "deletions": 53, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -1,60 +1,72 @@\n // Generated from grammar.ron\n use tree::{SyntaxKind, SyntaxInfo};\n \n-pub const ERROR: SyntaxKind = SyntaxKind(0);\n-pub const IDENT: SyntaxKind = SyntaxKind(1);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(2);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(3);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(4);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(5);\n-pub const SEMI: SyntaxKind = SyntaxKind(6);\n-pub const COMMA: SyntaxKind = SyntaxKind(7);\n-pub const DOT: SyntaxKind = SyntaxKind(8);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(9);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(10);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(11);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(12);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(13);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(14);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(15);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(16);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(17);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(18);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(19);\n-pub const AT: SyntaxKind = SyntaxKind(20);\n-pub const POUND: SyntaxKind = SyntaxKind(21);\n-pub const TILDE: SyntaxKind = SyntaxKind(22);\n-pub const QUESTION: SyntaxKind = SyntaxKind(23);\n-pub const COLON: SyntaxKind = SyntaxKind(24);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(25);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(26);\n-pub const EQ: SyntaxKind = SyntaxKind(27);\n-pub const EQEQ: SyntaxKind = SyntaxKind(28);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(29);\n-pub const NEQ: SyntaxKind = SyntaxKind(30);\n-pub const NOT: SyntaxKind = SyntaxKind(31);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(32);\n-pub const CHAR: SyntaxKind = SyntaxKind(33);\n-pub const BYTE: SyntaxKind = SyntaxKind(34);\n-pub const STRING: SyntaxKind = SyntaxKind(35);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(36);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(37);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(38);\n-pub const PLUS: SyntaxKind = SyntaxKind(39);\n-pub const MINUS: SyntaxKind = SyntaxKind(40);\n-pub const STAR: SyntaxKind = SyntaxKind(41);\n-pub const SLASH: SyntaxKind = SyntaxKind(42);\n-pub const CARET: SyntaxKind = SyntaxKind(43);\n-pub const PERCENT: SyntaxKind = SyntaxKind(44);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(45);\n-pub const PIPE: SyntaxKind = SyntaxKind(46);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(47);\n-pub const COMMENT: SyntaxKind = SyntaxKind(48);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(49);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(50);\n-pub const FILE: SyntaxKind = SyntaxKind(51);\n+pub const USE_KW: SyntaxKind = SyntaxKind(0);\n+pub const FN_KW: SyntaxKind = SyntaxKind(1);\n+pub const STRUCT_KW: SyntaxKind = SyntaxKind(2);\n+pub const ENUM_KW: SyntaxKind = SyntaxKind(3);\n+pub const TRAIT_KW: SyntaxKind = SyntaxKind(4);\n+pub const IMPL_KW: SyntaxKind = SyntaxKind(5);\n+pub const ERROR: SyntaxKind = SyntaxKind(6);\n+pub const IDENT: SyntaxKind = SyntaxKind(7);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(8);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(9);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(10);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(11);\n+pub const SEMI: SyntaxKind = SyntaxKind(12);\n+pub const COMMA: SyntaxKind = SyntaxKind(13);\n+pub const DOT: SyntaxKind = SyntaxKind(14);\n+pub const DOTDOT: SyntaxKind = SyntaxKind(15);\n+pub const DOTDOTDOT: SyntaxKind = SyntaxKind(16);\n+pub const DOTDOTEQ: SyntaxKind = SyntaxKind(17);\n+pub const L_PAREN: SyntaxKind = SyntaxKind(18);\n+pub const R_PAREN: SyntaxKind = SyntaxKind(19);\n+pub const L_CURLY: SyntaxKind = SyntaxKind(20);\n+pub const R_CURLY: SyntaxKind = SyntaxKind(21);\n+pub const L_BRACK: SyntaxKind = SyntaxKind(22);\n+pub const R_BRACK: SyntaxKind = SyntaxKind(23);\n+pub const L_ANGLE: SyntaxKind = SyntaxKind(24);\n+pub const R_ANGLE: SyntaxKind = SyntaxKind(25);\n+pub const AT: SyntaxKind = SyntaxKind(26);\n+pub const POUND: SyntaxKind = SyntaxKind(27);\n+pub const TILDE: SyntaxKind = SyntaxKind(28);\n+pub const QUESTION: SyntaxKind = SyntaxKind(29);\n+pub const COLON: SyntaxKind = SyntaxKind(30);\n+pub const COLONCOLON: SyntaxKind = SyntaxKind(31);\n+pub const DOLLAR: SyntaxKind = SyntaxKind(32);\n+pub const EQ: SyntaxKind = SyntaxKind(33);\n+pub const EQEQ: SyntaxKind = SyntaxKind(34);\n+pub const FAT_ARROW: SyntaxKind = SyntaxKind(35);\n+pub const NEQ: SyntaxKind = SyntaxKind(36);\n+pub const NOT: SyntaxKind = SyntaxKind(37);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(38);\n+pub const CHAR: SyntaxKind = SyntaxKind(39);\n+pub const BYTE: SyntaxKind = SyntaxKind(40);\n+pub const STRING: SyntaxKind = SyntaxKind(41);\n+pub const RAW_STRING: SyntaxKind = SyntaxKind(42);\n+pub const BYTE_STRING: SyntaxKind = SyntaxKind(43);\n+pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(44);\n+pub const PLUS: SyntaxKind = SyntaxKind(45);\n+pub const MINUS: SyntaxKind = SyntaxKind(46);\n+pub const STAR: SyntaxKind = SyntaxKind(47);\n+pub const SLASH: SyntaxKind = SyntaxKind(48);\n+pub const CARET: SyntaxKind = SyntaxKind(49);\n+pub const PERCENT: SyntaxKind = SyntaxKind(50);\n+pub const AMPERSAND: SyntaxKind = SyntaxKind(51);\n+pub const PIPE: SyntaxKind = SyntaxKind(52);\n+pub const THIN_ARROW: SyntaxKind = SyntaxKind(53);\n+pub const COMMENT: SyntaxKind = SyntaxKind(54);\n+pub const DOC_COMMENT: SyntaxKind = SyntaxKind(55);\n+pub const SHEBANG: SyntaxKind = SyntaxKind(56);\n+pub const FILE: SyntaxKind = SyntaxKind(57);\n \n-static INFOS: [SyntaxInfo; 52] = [\n+static INFOS: [SyntaxInfo; 58] = [\n+    SyntaxInfo { name: \"USE_KW\" },\n+    SyntaxInfo { name: \"FN_KW\" },\n+    SyntaxInfo { name: \"STRUCT_KW\" },\n+    SyntaxInfo { name: \"ENUM_KW\" },\n+    SyntaxInfo { name: \"TRAIT_KW\" },\n+    SyntaxInfo { name: \"IMPL_KW\" },\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -112,3 +124,15 @@ static INFOS: [SyntaxInfo; 52] = [\n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\n     &INFOS[kind.0 as usize]\n }\n+\n+pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n+   match ident {\n+       \"use\" => Some(USE_KW),\n+       \"fn\" => Some(FN_KW),\n+       \"struct\" => Some(STRUCT_KW),\n+       \"enum\" => Some(ENUM_KW),\n+       \"trait\" => Some(TRAIT_KW),\n+       \"impl\" => Some(IMPL_KW),\n+       _ => None,\n+   }\n+}"}, {"sha": "aa89d70c5117c01de15ebd0925208fcf9a9c62ce", "filename": "tests/data/lexer/0011_keywords.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -0,0 +1 @@\n+fn use struct trait enum impl"}, {"sha": "d90047d1e8c4dbc909b2a9a76bd4d50bd06320a2", "filename": "tests/data/lexer/0011_keywords.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb362626f326a565aca34c1a11c95dcb7152b798/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cb362626f326a565aca34c1a11c95dcb7152b798/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=cb362626f326a565aca34c1a11c95dcb7152b798", "patch": "@@ -0,0 +1,12 @@\n+FN_KW 2 \"fn\"\n+WHITESPACE 1 \" \"\n+USE_KW 3 \"use\"\n+WHITESPACE 1 \" \"\n+STRUCT_KW 6 \"struct\"\n+WHITESPACE 1 \" \"\n+TRAIT_KW 5 \"trait\"\n+WHITESPACE 1 \" \"\n+ENUM_KW 4 \"enum\"\n+WHITESPACE 1 \" \"\n+IMPL_KW 4 \"impl\"\n+WHITESPACE 1 \"\\n\""}]}