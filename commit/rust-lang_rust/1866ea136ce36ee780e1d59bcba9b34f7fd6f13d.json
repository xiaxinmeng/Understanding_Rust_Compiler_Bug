{"sha": "1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "node_id": "C_kwDOAAsO6NoAKDE4NjZlYTEzNmNlMzZlZTc4MGUxZDU5YmNiYTliMzRmN2ZkNmYxM2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-06T15:41:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-06T15:41:57Z"}, "message": "Rollup merge of #108780 - Zeegomo:close-70919, r=WaffleLapkin\n\nAdd regression tests for issue 70919\n\nDesugaring DropAndReplace at MIR build (#107844) fixed #70919.\nAdd regressions tests, borrowed from #102078, to ensure we check for this in the future.\n\ncc ``@Aaron1011``", "tree": {"sha": "f8344df36fcc0f63b20a875a4f83a822f83e17cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8344df36fcc0f63b20a875a4f83a822f83e17cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBgnFCRBK7hj4Ov3rIwAAPEcIAABbTbT+PQU2+ineIH3zAnAV\nHz5aJJMZDPYOmrBIDw2OEN7HFKvkm8i9Lac4QX9Ty/wT6x/VZCD4HYMjpHixr9TQ\nJRlY4xQVJMNoLiG8AmAHPA1KJPE0tXkG7mVYaBzcD0TrFAMrMEXEOKaHy0vEz/JH\n46zJgHAKDk4qTe/y0AfsMAzsCKTrJW3W9EkelS/aLlaR/I9uVtxFTGSEM76D7v/X\n7QGHifVv+7ApuRXyJmn7RtLt5AXwfE8yh2bL2gkLFNp1nfiCQX0BxEKheanEpa9k\ncGew4zlAnI+xKbfnfrrtijG2saMpgVA5J+ZQw7NFsWjXBHTzN9I0q7uE23GoET8=\n=xK1A\n-----END PGP SIGNATURE-----\n", "payload": "tree f8344df36fcc0f63b20a875a4f83a822f83e17cf\nparent 6240b5496602ba10f28a974d26b7421d4178627f\nparent beebd3a4c6ab38a71d4ff7cafcd1bf37def5b721\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678117317 +0100\ncommitter GitHub <noreply@github.com> 1678117317 +0100\n\nRollup merge of #108780 - Zeegomo:close-70919, r=WaffleLapkin\n\nAdd regression tests for issue 70919\n\nDesugaring DropAndReplace at MIR build (#107844) fixed #70919.\nAdd regressions tests, borrowed from #102078, to ensure we check for this in the future.\n\ncc ``@Aaron1011``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "html_url": "https://github.com/rust-lang/rust/commit/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6240b5496602ba10f28a974d26b7421d4178627f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6240b5496602ba10f28a974d26b7421d4178627f", "html_url": "https://github.com/rust-lang/rust/commit/6240b5496602ba10f28a974d26b7421d4178627f"}, {"sha": "beebd3a4c6ab38a71d4ff7cafcd1bf37def5b721", "url": "https://api.github.com/repos/rust-lang/rust/commits/beebd3a4c6ab38a71d4ff7cafcd1bf37def5b721", "html_url": "https://github.com/rust-lang/rust/commit/beebd3a4c6ab38a71d4ff7cafcd1bf37def5b721"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "866c27ef20324221f2bcf7a8bc5393587be5dafa", "filename": "tests/ui/borrowck/drop-in-loop.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fdrop-in-loop.rs?ref=1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "patch": "@@ -0,0 +1,24 @@\n+// A version of `issue-70919-drop-in-loop`, but without\n+// the necessary `drop` call.\n+//\n+// This should fail to compile, since the `Drop` impl\n+// for `WrapperWithDrop` could observe the changed\n+// `base` value.\n+\n+struct WrapperWithDrop<'a>(&'a mut bool);\n+impl<'a> Drop for WrapperWithDrop<'a> {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn drop_in_loop() {\n+    let mut base = true;\n+    let mut wrapper = WrapperWithDrop(&mut base);\n+    loop {\n+        base = false; //~ ERROR: cannot assign to `base`\n+        wrapper = WrapperWithDrop(&mut base);\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "d5734e7ec97707a7154cd7d409dd1ed84139a4fa", "filename": "tests/ui/borrowck/drop-in-loop.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fdrop-in-loop.stderr?ref=1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `base` because it is borrowed\n+  --> $DIR/drop-in-loop.rs:18:9\n+   |\n+LL |     let mut wrapper = WrapperWithDrop(&mut base);\n+   |                                       --------- `base` is borrowed here\n+LL |     loop {\n+LL |         base = false;\n+   |         ^^^^^^^^^^^^ `base` is assigned to here but it was already borrowed\n+LL |         wrapper = WrapperWithDrop(&mut base);\n+   |         ------- borrow might be used here, when `wrapper` is dropped and runs the `Drop` code for type `WrapperWithDrop`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "a8d5849a31c0b068fb7ef0f03ae7342d24df32de", "filename": "tests/ui/borrowck/issue-70919-drop-in-loop.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1866ea136ce36ee780e1d59bcba9b34f7fd6f13d/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-70919-drop-in-loop.rs?ref=1866ea136ce36ee780e1d59bcba9b34f7fd6f13d", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for issue #70919\n+// Tests that we don't emit a spurious \"borrow might be used\" error\n+// when we have an explicit `drop` in a loop\n+\n+// check-pass\n+\n+struct WrapperWithDrop<'a>(&'a mut bool);\n+impl<'a> Drop for WrapperWithDrop<'a> {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn drop_in_loop() {\n+    let mut base = true;\n+    let mut wrapper = WrapperWithDrop(&mut base);\n+    loop {\n+        drop(wrapper);\n+\n+        base = false;\n+        wrapper = WrapperWithDrop(&mut base);\n+    }\n+}\n+\n+fn main() {\n+}"}]}