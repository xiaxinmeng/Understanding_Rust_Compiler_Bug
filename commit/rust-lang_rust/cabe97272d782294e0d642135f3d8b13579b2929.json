{"sha": "cabe97272d782294e0d642135f3d8b13579b2929", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYmU5NzI3MmQ3ODIyOTRlMGQ2NDIxMzVmM2Q4YjEzNTc5YjI5Mjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T01:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T01:34:21Z"}, "message": "Rollup merge of #82057 - upsuper-forks:cstr, r=davidtwco,wesleywiser\n\nReplace const_cstr with cstr crate\n\nThis PR replaces the `const_cstr` macro inside `rustc_data_structures` with `cstr` macro from [cstr](https://crates.io/crates/cstr) crate.\n\nThe two macros basically serve the same purpose, which is to generate `&'static CStr` from a string literal. `cstr` is better because it validates the literal at compile time, while the existing `const_cstr` does it at runtime when `debug_assertions` is enabled. In addition, the value `cstr` generates can be used in constant context (which is seemingly not needed anywhere currently, though).", "tree": {"sha": "2af31ef1bee69e720a118099e88dbe0d33137255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af31ef1bee69e720a118099e88dbe0d33137255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cabe97272d782294e0d642135f3d8b13579b2929", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOaGdCRBK7hj4Ov3rIwAAdHIIAHicxfrzKy9yBnWUiZdoHaN9\nRoT88l0NU+KwZy77IdHfxp+5ObNbAfR7gvzFWGraPOJK1j96mn+JgRSi7kIup1rY\niP77mklPdCCCWuSLMqMntXZpMTa7uSYE4kRiErQ28HNNCh59rYKGxZAUMbh/0r0o\nj7PYlFbi34plHxiQhJk2XZa5eq1RdH4YX7TG/CbahW3brSENq/7oUi4HBkMXRPBh\nffC4dKrIgtoSYXcANwbNYtgyvezrUuVi2ZV4/cSU1iH8qNWRmxXzuGaMLJXMG/y+\ngxDAJkDqZmWvQNj+dgx1Nc67jEeWn+ArYID5GpJodLHp5OlL6NvHTi9vLF2fTgQ=\n=MLlZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2af31ef1bee69e720a118099e88dbe0d33137255\nparent db8ac16d000e9cd454f8ab99fb04c4410243fa88\nparent 38e4233a3291b0b8e3148e7ea47da66c9d8b307f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614389661 +0100\ncommitter GitHub <noreply@github.com> 1614389661 +0100\n\nRollup merge of #82057 - upsuper-forks:cstr, r=davidtwco,wesleywiser\n\nReplace const_cstr with cstr crate\n\nThis PR replaces the `const_cstr` macro inside `rustc_data_structures` with `cstr` macro from [cstr](https://crates.io/crates/cstr) crate.\n\nThe two macros basically serve the same purpose, which is to generate `&'static CStr` from a string literal. `cstr` is better because it validates the literal at compile time, while the existing `const_cstr` does it at runtime when `debug_assertions` is enabled. In addition, the value `cstr` generates can be used in constant context (which is seemingly not needed anywhere currently, though).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cabe97272d782294e0d642135f3d8b13579b2929", "html_url": "https://github.com/rust-lang/rust/commit/cabe97272d782294e0d642135f3d8b13579b2929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cabe97272d782294e0d642135f3d8b13579b2929/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db8ac16d000e9cd454f8ab99fb04c4410243fa88", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8ac16d000e9cd454f8ab99fb04c4410243fa88", "html_url": "https://github.com/rust-lang/rust/commit/db8ac16d000e9cd454f8ab99fb04c4410243fa88"}, {"sha": "38e4233a3291b0b8e3148e7ea47da66c9d8b307f", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e4233a3291b0b8e3148e7ea47da66c9d8b307f", "html_url": "https://github.com/rust-lang/rust/commit/38e4233a3291b0b8e3148e7ea47da66c9d8b307f"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "b3b4284a56459c8a964a03226cdc5d0f27a98742", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -904,6 +904,16 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"cstr\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+]\n+\n [[package]]\n name = \"ctor\"\n version = \"0.1.15\"\n@@ -3698,6 +3708,7 @@ name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n+ \"cstr\",\n  \"libc\",\n  \"measureme\",\n  \"rustc-demangle\","}, {"sha": "260edd9570b2b169cf480450b6832dd1759a1c33", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -10,6 +10,7 @@ doctest = false\n \n [dependencies]\n bitflags = \"1.0\"\n+cstr = \"0.2\"\n libc = \"0.2\"\n measureme = \"9.0.0\"\n snap = \"1\""}, {"sha": "d714ff1fe9b4aa4c3f9c9a58a6f59c07a63f5db5", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -554,7 +554,7 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 llvm::AddCallSiteAttrString(\n                     callsite,\n                     llvm::AttributePlace::Function,\n-                    rustc_data_structures::const_cstr!(\"cmse_nonsecure_call\"),\n+                    cstr::cstr!(\"cmse_nonsecure_call\"),\n                 );\n             }\n         }"}, {"sha": "09ece6164ebd1a1b2421179685debb983def9190", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -2,8 +2,8 @@\n \n use std::ffi::CString;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n@@ -75,8 +75,8 @@ pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value)\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"frame-pointer\"),\n-            const_cstr!(\"all\"),\n+            cstr!(\"frame-pointer\"),\n+            cstr!(\"all\"),\n         );\n     }\n }\n@@ -95,7 +95,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"instrument-function-entry-inlined\"),\n+            cstr!(\"instrument-function-entry-inlined\"),\n             &mcount_name,\n         );\n     }\n@@ -129,24 +129,24 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         StackProbeType::None => None,\n         // Request LLVM to generate the probes inline. If the given LLVM version does not support\n         // this, no probe is generated at all (even if the attribute is specified).\n-        StackProbeType::Inline => Some(const_cstr!(\"inline-asm\")),\n+        StackProbeType::Inline => Some(cstr!(\"inline-asm\")),\n         // Flag our internal `__rust_probestack` function as the stack probe symbol.\n         // This is defined in the `compiler-builtins` crate for each architecture.\n-        StackProbeType::Call => Some(const_cstr!(\"__rust_probestack\")),\n+        StackProbeType::Call => Some(cstr!(\"__rust_probestack\")),\n         // Pick from the two above based on the LLVM version.\n         StackProbeType::InlineOrCall { min_llvm_version_for_inline } => {\n             if llvm_util::get_version() < min_llvm_version_for_inline {\n-                Some(const_cstr!(\"__rust_probestack\"))\n+                Some(cstr!(\"__rust_probestack\"))\n             } else {\n-                Some(const_cstr!(\"inline-asm\"))\n+                Some(cstr!(\"inline-asm\"))\n             }\n         }\n     };\n     if let Some(attr_value) = attr_value {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"probe-stack\"),\n+            cstr!(\"probe-stack\"),\n             attr_value,\n         );\n     }\n@@ -169,7 +169,7 @@ pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     llvm::AddFunctionAttrStringValue(\n         llfn,\n         llvm::AttributePlace::Function,\n-        const_cstr!(\"target-cpu\"),\n+        cstr!(\"target-cpu\"),\n         target_cpu.as_c_str(),\n     );\n }\n@@ -180,7 +180,7 @@ pub fn apply_tune_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"tune-cpu\"),\n+            cstr!(\"tune-cpu\"),\n             tune_cpu.as_c_str(),\n         );\n     }\n@@ -289,7 +289,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n-        llvm::AddFunctionAttrString(llfn, Function, const_cstr!(\"cmse_nonsecure_entry\"));\n+        llvm::AddFunctionAttrString(llfn, Function, cstr!(\"cmse_nonsecure_entry\"));\n     }\n     sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n@@ -319,7 +319,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"target-features\"),\n+            cstr!(\"target-features\"),\n             &val,\n         );\n     }\n@@ -332,7 +332,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,\n-                const_cstr!(\"wasm-import-module\"),\n+                cstr!(\"wasm-import-module\"),\n                 &module,\n             );\n \n@@ -342,7 +342,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,\n-                const_cstr!(\"wasm-import-name\"),\n+                cstr!(\"wasm-import-name\"),\n                 &name,\n             );\n         }"}, {"sha": "f4852c91e53d5a67fd1b06ba85814f7fb4808cec", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -5,13 +5,13 @@ use crate::llvm::{AtomicOrdering, AtomicRmwBinOp, SynchronizationScope};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n+use cstr::cstr;\n use libc::{c_char, c_uint};\n use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, TypeKind};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -979,7 +979,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = const_cstr!(\"cleanuppad\");\n+        let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupPad(\n                 self.llbuilder,\n@@ -1003,7 +1003,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = const_cstr!(\"catchpad\");\n+        let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchPad(\n                 self.llbuilder,\n@@ -1022,7 +1022,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unwind: Option<&'ll BasicBlock>,\n         num_handlers: usize,\n     ) -> &'ll Value {\n-        let name = const_cstr!(\"catchswitch\");\n+        let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(\n                 self.llbuilder,"}, {"sha": "99046839973d5c64ba968a1ecc06792944d01669", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -5,9 +5,9 @@ use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n+use cstr::cstr;\n use libc::c_uint;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n@@ -419,9 +419,9 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                             .all(|&byte| byte == 0);\n \n                     let sect_name = if all_bytes_are_zero {\n-                        const_cstr!(\"__DATA,__thread_bss\")\n+                        cstr!(\"__DATA,__thread_bss\")\n                     } else {\n-                        const_cstr!(\"__DATA,__thread_data\")\n+                        cstr!(\"__DATA,__thread_data\")\n                     };\n                     llvm::LLVMSetSection(g, sect_name.as_ptr());\n                 }"}, {"sha": "3ddc742420202908879624f5b29b5ea10d45b84b", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -7,10 +7,10 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::value::Value;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n@@ -414,8 +414,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn create_used_variable(&self) {\n-        let name = const_cstr!(\"llvm.used\");\n-        let section = const_cstr!(\"llvm.metadata\");\n+        let name = cstr!(\"llvm.used\");\n+        let section = cstr!(\"llvm.metadata\");\n         let array =\n             self.const_array(&self.type_ptr_to(self.type_i8()), &*self.used_statics.borrow());\n "}, {"sha": "85d1b70239925aa136d232117256b153b12afeeb", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -18,8 +18,8 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -1075,7 +1075,7 @@ pub fn compile_unit_metadata(\n                 gcov_cu_info.len() as c_uint,\n             );\n \n-            let llvm_gcov_ident = const_cstr!(\"llvm.gcov\");\n+            let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n                 llvm_gcov_ident.as_ptr(),\n@@ -1093,7 +1093,7 @@ pub fn compile_unit_metadata(\n             );\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n-                const_cstr!(\"llvm.ident\").as_ptr(),\n+                cstr!(\"llvm.ident\").as_ptr(),\n                 llvm::LLVMMDNodeInContext(debug_context.llcontext, &name_metadata, 1),\n             );\n         }"}, {"sha": "1ebcb87818ecf3b53b0e4911caaccda2cac30575", "filename": "compiler/rustc_data_structures/src/const_cstr.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db8ac16d000e9cd454f8ab99fb04c4410243fa88/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8ac16d000e9cd454f8ab99fb04c4410243fa88/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs?ref=db8ac16d000e9cd454f8ab99fb04c4410243fa88", "patch": "@@ -1,30 +0,0 @@\n-/// This macro creates a zero-overhead &CStr by adding a NUL terminator to\n-/// the string literal passed into it at compile-time. Use it like:\n-///\n-/// ```\n-///     let some_const_cstr = const_cstr!(\"abc\");\n-/// ```\n-///\n-/// The above is roughly equivalent to:\n-///\n-/// ```\n-///     let some_const_cstr = CStr::from_bytes_with_nul(b\"abc\\0\").unwrap()\n-/// ```\n-///\n-/// Note that macro only checks the string literal for internal NULs if\n-/// debug-assertions are enabled in order to avoid runtime overhead in release\n-/// builds.\n-#[macro_export]\n-macro_rules! const_cstr {\n-    ($s:expr) => {{\n-        use std::ffi::CStr;\n-\n-        let str_plus_nul = concat!($s, \"\\0\");\n-\n-        if cfg!(debug_assertions) {\n-            CStr::from_bytes_with_nul(str_plus_nul.as_bytes()).unwrap()\n-        } else {\n-            unsafe { CStr::from_bytes_with_nul_unchecked(str_plus_nul.as_bytes()) }\n-        }\n-    }};\n-}"}, {"sha": "fcb2bca7b4cc195005315711ae01356760475abf", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -69,7 +69,6 @@ pub mod base_n;\n pub mod binary_search_util;\n pub mod box_region;\n pub mod captures;\n-pub mod const_cstr;\n pub mod flock;\n pub mod functor;\n pub mod fx;"}, {"sha": "f8e0bcc357d91a17c56b123ea74a60b26b290937", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cabe97272d782294e0d642135f3d8b13579b2929/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabe97272d782294e0d642135f3d8b13579b2929/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=cabe97272d782294e0d642135f3d8b13579b2929", "patch": "@@ -85,6 +85,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"crossbeam-epoch\",\n     \"crossbeam-queue\",\n     \"crossbeam-utils\",\n+    \"cstr\",\n     \"datafrog\",\n     \"difference\",\n     \"digest\","}]}