{"sha": "d3d56732a7278881900ce6709892636bdc546862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZDU2NzMyYTcyNzg4ODE5MDBjZTY3MDk4OTI2MzZiZGM1NDY4NjI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-08T13:36:00Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-08T13:36:00Z"}, "message": "Get rid of \"is not const\" naming", "tree": {"sha": "3167e3f42178aa665b2fa20ef022a28ba33ded22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3167e3f42178aa665b2fa20ef022a28ba33ded22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d56732a7278881900ce6709892636bdc546862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d56732a7278881900ce6709892636bdc546862", "html_url": "https://github.com/rust-lang/rust/commit/d3d56732a7278881900ce6709892636bdc546862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d56732a7278881900ce6709892636bdc546862/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec5206588fe31e631d8f8b1d27400f18744b448e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5206588fe31e631d8f8b1d27400f18744b448e", "html_url": "https://github.com/rust-lang/rust/commit/ec5206588fe31e631d8f8b1d27400f18744b448e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "8dd060d7a150d2e152efd6cc846ea5a5e00aa19b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3d56732a7278881900ce6709892636bdc546862/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d56732a7278881900ce6709892636bdc546862/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d3d56732a7278881900ce6709892636bdc546862", "patch": "@@ -365,11 +365,11 @@ impl Qualif for NeedsDrop {\n     }\n }\n \n-// Not constant at all - non-`const fn` calls, asm!,\n+// Not promotable at all - non-`const fn` calls, asm!,\n // pointer comparisons, ptr-to-int casts, etc.\n-struct IsNotConst;\n+struct IsNotPromotable;\n \n-impl Qualif for IsNotConst {\n+impl Qualif for IsNotPromotable {\n     const IDX: usize = 2;\n \n     fn in_static(cx: &ConstCx<'_, 'tcx>, static_: &Static<'tcx>) -> bool {\n@@ -548,14 +548,14 @@ macro_rules! static_assert_seq_qualifs {\n         static_assert!(SEQ_QUALIFS: QUALIF_COUNT == $i);\n     };\n }\n-static_assert_seq_qualifs!(0 => HasMutInterior, NeedsDrop, IsNotConst, IsNotImplicitlyPromotable);\n+static_assert_seq_qualifs!(0 => HasMutInterior, NeedsDrop, IsNotPromotable, IsNotImplicitlyPromotable);\n \n impl ConstCx<'_, 'tcx> {\n     fn qualifs_in_any_value_of_ty(&self, ty: Ty<'tcx>) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[NeedsDrop] = NeedsDrop::in_any_value_of_ty(self, ty).unwrap_or(false);\n-        qualifs[IsNotConst] = IsNotConst::in_any_value_of_ty(self, ty).unwrap_or(false);\n+        qualifs[IsNotPromotable] = IsNotPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs\n     }\n@@ -564,7 +564,7 @@ impl ConstCx<'_, 'tcx> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_local(self, local);\n         qualifs[NeedsDrop] = NeedsDrop::in_local(self, local);\n-        qualifs[IsNotConst] = IsNotConst::in_local(self, local);\n+        qualifs[IsNotPromotable] = IsNotPromotable::in_local(self, local);\n         qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_local(self, local);\n         qualifs\n     }\n@@ -573,7 +573,7 @@ impl ConstCx<'_, 'tcx> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_value(self, source);\n         qualifs[NeedsDrop] = NeedsDrop::in_value(self, source);\n-        qualifs[IsNotConst] = IsNotConst::in_value(self, source);\n+        qualifs[IsNotPromotable] = IsNotPromotable::in_value(self, source);\n         qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_value(self, source);\n         qualifs\n     }\n@@ -638,12 +638,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             }\n             if !temps[local].is_promotable() {\n-                cx.per_local[IsNotConst].insert(local);\n+                cx.per_local[IsNotPromotable].insert(local);\n             }\n             if let LocalKind::Var = mir.local_kind(local) {\n                 // Sanity check to prevent implicit and explicit promotion of\n                 // named locals\n-                assert!(cx.per_local[IsNotConst].contains(local));\n+                assert!(cx.per_local[IsNotPromotable].contains(local));\n             }\n         }\n \n@@ -691,11 +691,11 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             // the borrowed place is disallowed from being borrowed,\n             // due to either a mutable borrow (with some exceptions),\n             // or an shared borrow of a value with interior mutability.\n-            // Then `HasMutInterior` is replaced with `IsNotConst`,\n+            // Then `HasMutInterior` is replaced with `IsNotPromotable`,\n             // to avoid duplicate errors (e.g. from reborrowing).\n             if qualifs[HasMutInterior] {\n                 qualifs[HasMutInterior] = false;\n-                qualifs[IsNotConst] = true;\n+                qualifs[IsNotPromotable] = true;\n \n                 if self.mode != Mode::Fn {\n                     if let BorrowKind::Mut { .. } = kind {\n@@ -810,15 +810,15 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        // Ensure the `IsNotConst` qualification is preserved.\n+        // Ensure the `IsNotPromotable` qualification is preserved.\n         // NOTE(eddyb) this is actually unnecessary right now, as\n         // we never replace the local's qualif, but we might in\n         // the future, and so it serves to catch changes that unset\n         // important bits (in which case, asserting `contains` could\n         // be replaced with calling `insert` to re-set the bit).\n         if kind == LocalKind::Temp {\n             if !self.temp_promotion_state[index].is_promotable() {\n-                assert!(self.cx.per_local[IsNotConst].contains(index));\n+                assert!(self.cx.per_local[IsNotPromotable].contains(index));\n             }\n         }\n     }\n@@ -904,7 +904,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n-        if qualifs[IsNotConst] {\n+        if qualifs[IsNotPromotable] {\n             qualifs = self.qualifs_in_any_value_of_ty(mir.return_ty());\n         }\n \n@@ -1319,7 +1319,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     // which happens even without the user requesting it.\n                     // We can error out with a hard error if the argument is not\n                     // constant here.\n-                    if !IsNotConst::in_operand(self, arg) {\n+                    if !IsNotPromotable::in_operand(self, arg) {\n                         debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                         self.promotion_candidates.push(candidate);\n                     } else {\n@@ -1437,7 +1437,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n-        return (1 << IsNotConst::IDX, Lrc::new(BitSet::new_empty(0)));\n+        return (1 << IsNotPromotable::IDX, Lrc::new(BitSet::new_empty(0)));\n     }\n \n     Checker::new(tcx, def_id, mir, Mode::Const).check_const()"}]}