{"sha": "c199a3988476f50e203a6cce8e7bcd3b653055ea", "node_id": "C_kwDOAAsO6NoAKGMxOTlhMzk4ODQ3NmY1MGUyMDNhNmNjZThlN2JjZDNiNjUzMDU1ZWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T08:49:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T08:52:31Z"}, "message": "bootstrap: add support for running Miri on a file", "tree": {"sha": "94f5f1be779fd35851b961acf608ac2fea3d9680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f5f1be779fd35851b961acf608ac2fea3d9680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c199a3988476f50e203a6cce8e7bcd3b653055ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c199a3988476f50e203a6cce8e7bcd3b653055ea", "html_url": "https://github.com/rust-lang/rust/commit/c199a3988476f50e203a6cce8e7bcd3b653055ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c199a3988476f50e203a6cce8e7bcd3b653055ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452cf4f7109f58433ac38be7d3da527408571054", "url": "https://api.github.com/repos/rust-lang/rust/commits/452cf4f7109f58433ac38be7d3da527408571054", "html_url": "https://github.com/rust-lang/rust/commit/452cf4f7109f58433ac38be7d3da527408571054"}], "stats": {"total": 186, "additions": 132, "deletions": 54}, "files": [{"sha": "e467ce47f4c0d3acb29f2039bb6cf9bd37f6d690", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c199a3988476f50e203a6cce8e7bcd3b653055ea", "patch": "@@ -755,6 +755,7 @@ impl<'a> Builder<'a> {\n                 run::BuildManifest,\n                 run::BumpStage0,\n                 run::ReplaceVersionPlaceholder,\n+                run::Miri,\n             ),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n             Kind::Clean | Kind::Format | Kind::Setup => vec![],\n@@ -818,7 +819,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n-            Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n+            Subcommand::Run { ref paths, .. } => (Kind::Run, &paths[..]),\n             Subcommand::Format { .. } => (Kind::Format, &[][..]),\n             Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n                 panic!()"}, {"sha": "2001e29bd2eadc56759de805020fb83fc86cdc25", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c199a3988476f50e203a6cce8e7bcd3b653055ea", "patch": "@@ -140,6 +140,7 @@ pub enum Subcommand {\n     },\n     Run {\n         paths: Vec<PathBuf>,\n+        args: Vec<String>,\n     },\n     Setup {\n         profile: Profile,\n@@ -342,6 +343,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             Kind::Format => {\n                 opts.optflag(\"\", \"check\", \"check formatting instead of applying.\");\n             }\n+            Kind::Run => {\n+                opts.optmulti(\"\", \"args\", \"arguments for the tool\", \"ARGS\");\n+            }\n             _ => {}\n         };\n \n@@ -613,7 +617,7 @@ Arguments:\n                     println!(\"\\nrun requires at least a path!\\n\");\n                     usage(1, &opts, verbose, &subcommand_help);\n                 }\n-                Subcommand::Run { paths }\n+                Subcommand::Run { paths, args: matches.opt_strs(\"args\") }\n             }\n             Kind::Setup => {\n                 let profile = if paths.len() > 1 {\n@@ -721,24 +725,29 @@ impl Subcommand {\n     }\n \n     pub fn test_args(&self) -> Vec<&str> {\n-        let mut args = vec![];\n-\n         match *self {\n             Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n-                args.extend(test_args.iter().flat_map(|s| s.split_whitespace()))\n+                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n             }\n-            _ => (),\n+            _ => vec![],\n         }\n-\n-        args\n     }\n \n     pub fn rustc_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref rustc_args, .. } => {\n                 rustc_args.iter().flat_map(|s| s.split_whitespace()).collect()\n             }\n-            _ => Vec::new(),\n+            _ => vec![],\n+        }\n+    }\n+\n+    pub fn args(&self) -> Vec<&str> {\n+        match *self {\n+            Subcommand::Run { ref args, .. } => {\n+                args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n         }\n     }\n "}, {"sha": "d49b41c51327961203f561254a85ef0ffad7346e", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=c199a3988476f50e203a6cce8e7bcd3b653055ea", "patch": "@@ -1,8 +1,12 @@\n+use std::process::Command;\n+\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::config::TargetSelection;\n use crate::dist::distdir;\n-use crate::tool::Tool;\n+use crate::test;\n+use crate::tool::{self, SourceType, Tool};\n use crate::util::output;\n-use std::process::Command;\n+use crate::Mode;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ExpandYamlAnchors;\n@@ -125,3 +129,63 @@ impl Step for ReplaceVersionPlaceholder {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Miri {\n+    stage: u32,\n+    host: TargetSelection,\n+    target: TargetSelection,\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/miri\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            host: run.build_triple(),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let target = self.target;\n+        let compiler = builder.compiler(stage, host);\n+\n+        let miri = builder\n+            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let miri_sysroot = test::Miri::build_miri_sysroot(builder, compiler, &miri, target);\n+\n+        // # Run miri.\n+        // Running it via `cargo run` as that figures out the right dylib path.\n+        // add_rustc_lib_path does not add the path that contains librustc_driver-<...>.so.\n+        let mut miri = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            host,\n+            \"run\",\n+            \"src/tools/miri\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        miri.add_rustc_lib_path(builder, compiler);\n+        // Forward arguments.\n+        miri.arg(\"--\").arg(\"--target\").arg(target.rustc_target_arg());\n+        miri.args(builder.config.cmd.args());\n+\n+        // miri tests need to know about the stage sysroot\n+        miri.env(\"MIRI_SYSROOT\", &miri_sysroot);\n+\n+        let mut miri = Command::from(miri);\n+        builder.run(&mut miri);\n+    }\n+}"}, {"sha": "08799602a791bc66ef3451066bcda4f444633489", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 47, "deletions": 43, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c199a3988476f50e203a6cce8e7bcd3b653055ea/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c199a3988476f50e203a6cce8e7bcd3b653055ea", "patch": "@@ -464,49 +464,14 @@ pub struct Miri {\n     target: TargetSelection,\n }\n \n-impl Step for Miri {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = false;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/miri\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Miri {\n-            stage: run.builder.top_stage,\n-            host: run.build_triple(),\n-            target: run.target,\n-        });\n-    }\n-\n-    /// Runs `cargo test` for miri.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let host = self.host;\n-        let target = self.target;\n-        let compiler = builder.compiler(stage, host);\n-        // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n-        // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n-        let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n-\n-        let miri = builder\n-            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n-            .expect(\"in-tree tool\");\n-        let _cargo_miri = builder\n-            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })\n-            .expect(\"in-tree tool\");\n-        // The stdlib we need might be at a different stage. And just asking for the\n-        // sysroot does not seem to populate it, so we do that first.\n-        builder.ensure(compile::Std::new(compiler_std, host));\n-        let sysroot = builder.sysroot(compiler_std);\n-\n-        // # Run `cargo miri setup` for the given target.\n+impl Miri {\n+    /// Run `cargo miri setup` for the given target, return where the Miri sysroot was put.\n+    pub fn build_miri_sysroot(builder: &Builder<'_>, compiler: Compiler, miri: &Path, target: TargetSelection) -> String {\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n-            host,\n+            compiler.host,\n             \"run\",\n             \"src/tools/miri/cargo-miri\",\n             SourceType::InTree,\n@@ -534,7 +499,7 @@ impl Step for Miri {\n         cargo.arg(\"--print-sysroot\");\n \n         // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n-        let miri_sysroot = if builder.config.dry_run {\n+        if builder.config.dry_run {\n             String::new()\n         } else {\n             builder.verbose(&format!(\"running: {:?}\", cargo));\n@@ -547,7 +512,48 @@ impl Step for Miri {\n             let sysroot = stdout.trim_end();\n             builder.verbose(&format!(\"`cargo miri setup --print-sysroot` said: {:?}\", sysroot));\n             sysroot.to_owned()\n-        };\n+        }\n+    }\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/miri\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            host: run.build_triple(),\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for miri.\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let target = self.target;\n+        let compiler = builder.compiler(stage, host);\n+        // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n+        // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n+        let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n+\n+        let miri = builder\n+            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let _cargo_miri = builder\n+            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        // The stdlib we need might be at a different stage. And just asking for the\n+        // sysroot does not seem to populate it, so we do that first.\n+        builder.ensure(compile::Std::new(compiler_std, host));\n+        let sysroot = builder.sysroot(compiler_std);\n+        // We also need a Miri sysroot.\n+        let miri_sysroot = Miri::build_miri_sysroot(builder, compiler, &miri, target);\n \n         // # Run `cargo test`.\n         let mut cargo = tool::prepare_tool_cargo(\n@@ -565,7 +571,6 @@ impl Step for Miri {\n         // miri tests need to know about the stage sysroot\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n-        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         cargo.env(\"MIRI\", &miri);\n         // propagate --bless\n         if builder.config.cmd.bless() {\n@@ -606,7 +611,6 @@ impl Step for Miri {\n         // Tell `cargo miri` where to find things.\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n-        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         cargo.env(\"MIRI\", &miri);\n         // Debug things.\n         cargo.env(\"RUST_BACKTRACE\", \"1\");"}]}