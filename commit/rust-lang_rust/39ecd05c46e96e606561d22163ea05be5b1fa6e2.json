{"sha": "39ecd05c46e96e606561d22163ea05be5b1fa6e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZWNkMDVjNDZlOTZlNjA2NTYxZDIyMTYzZWEwNWJlNWIxZmE2ZTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:25:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:25:38Z"}, "message": "embrace find_map and some whitespace changes", "tree": {"sha": "bfe5da4015448c6a25c7361ac1d34677409e7fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe5da4015448c6a25c7361ac1d34677409e7fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39ecd05c46e96e606561d22163ea05be5b1fa6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39ecd05c46e96e606561d22163ea05be5b1fa6e2", "html_url": "https://github.com/rust-lang/rust/commit/39ecd05c46e96e606561d22163ea05be5b1fa6e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39ecd05c46e96e606561d22163ea05be5b1fa6e2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe8959339c7fafbc4cba85bda1f64a59f88a88e", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe8959339c7fafbc4cba85bda1f64a59f88a88e", "html_url": "https://github.com/rust-lang/rust/commit/abe8959339c7fafbc4cba85bda1f64a59f88a88e"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "250def0c7ce6b59f60e02651afba15d97e44324a", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39ecd05c46e96e606561d22163ea05be5b1fa6e2/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ecd05c46e96e606561d22163ea05be5b1fa6e2/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=39ecd05c46e96e606561d22163ea05be5b1fa6e2", "patch": "@@ -263,14 +263,13 @@ impl<'tcx> Stack {\n             .rev() // search top-to-bottom\n             // Return permission of first item that grants access.\n             // We require a permission with the right tag, ensuring U3 and F3.\n-            .filter_map(|(idx, item)|\n+            .find_map(|(idx, item)|\n                 if item.perm.grants(access) && tag == item.tag {\n                     Some((idx, item.perm))\n                 } else {\n                     None\n                 }\n             )\n-            .next()\n     }\n \n     /// Test if a memory `access` using pointer tagged `tag` is granted.\n@@ -286,8 +285,8 @@ impl<'tcx> Stack {\n         // Step 1: Find granting item.\n         let (granting_idx, granting_perm) = self.find_granting(access, tag)\n             .ok_or_else(|| InterpError::MachineError(format!(\n-                    \"no item granting {} access to tag {} found in borrow stack\",\n-                    access, tag,\n+                \"no item granting {} access to tag {} found in borrow stack\",\n+                access, tag,\n             )))?;\n \n         // Step 2: Remove everything incompatible above them.  Make sure we do not remove protected\n@@ -313,9 +312,9 @@ impl<'tcx> Stack {\n                     if let Some(call) = item.protector {\n                         if global.is_active(call) {\n                             return err!(MachineError(format!(\n-                                    \"not granting {} access to tag {} because incompatible item {} is protected\",\n-                                    access, tag, item\n-                                )));\n+                                \"not granting {} access to tag {} because incompatible item {} is protected\",\n+                                access, tag, item\n+                            )));\n                         }\n                     }\n                     trace!(\"access: removing item {}\", item);\n@@ -337,8 +336,8 @@ impl<'tcx> Stack {\n         // Step 1: Find granting item.\n         self.find_granting(AccessKind::Write, tag)\n             .ok_or_else(|| InterpError::MachineError(format!(\n-                    \"no item granting write access for deallocation to tag {} found in borrow stack\",\n-                    tag,\n+                \"no item granting write access for deallocation to tag {} found in borrow stack\",\n+                tag,\n             )))?;\n \n         // We must make sure there are no protected items remaining on the stack.\n@@ -386,10 +385,10 @@ impl<'tcx> Stack {\n     ) -> EvalResult<'tcx> {\n         // Figure out which access `perm` corresponds to.\n         let access = if new.perm.grants(AccessKind::Write) {\n-                AccessKind::Write\n-            } else {\n-                AccessKind::Read\n-            };\n+            AccessKind::Write\n+        } else {\n+            AccessKind::Read\n+        };\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let (derived_from_idx, _) = self.find_granting(access, derived_from)"}]}