{"sha": "8eee116cb8532d5879cbef6af4a59d563d4fb644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWUxMTZjYjg1MzJkNTg3OWNiZWY2YWY0YTU5ZDU2M2Q0ZmI2NDQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-08T19:09:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-10T21:50:33Z"}, "message": "Add a MIR visitor that allows to mutate the visited data", "tree": {"sha": "bffc49e73e87e36b94842d4c811b3eb8b6b6d444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bffc49e73e87e36b94842d4c811b3eb8b6b6d444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eee116cb8532d5879cbef6af4a59d563d4fb644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eee116cb8532d5879cbef6af4a59d563d4fb644", "html_url": "https://github.com/rust-lang/rust/commit/8eee116cb8532d5879cbef6af4a59d563d4fb644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eee116cb8532d5879cbef6af4a59d563d4fb644/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "html_url": "https://github.com/rust-lang/rust/commit/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0"}], "stats": {"total": 274, "additions": 274, "deletions": 0}, "files": [{"sha": "00d21d3c16e1faeb84a6b60d65721fa4847f3d75", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/8eee116cb8532d5879cbef6af4a59d563d4fb644/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee116cb8532d5879cbef6af4a59d563d4fb644/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=8eee116cb8532d5879cbef6af4a59d563d4fb644", "patch": "@@ -280,3 +280,277 @@ pub enum LvalueContext {\n     // Consumed as part of an operand\n     Consume,\n }\n+\n+pub trait MutVisitor<'tcx> {\n+    // Override these, and call `self.super_xxx` to revert back to the\n+    // default behavior.\n+\n+    fn visit_mir(&mut self, mir: &mut Mir<'tcx>) {\n+        self.super_mir(mir);\n+    }\n+\n+    fn visit_basic_block_data(&mut self,\n+                              block: BasicBlock,\n+                              data: &mut BasicBlockData<'tcx>) {\n+        self.super_basic_block_data(block, data);\n+    }\n+\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>) {\n+        self.super_statement(block, statement);\n+    }\n+\n+    fn visit_assign(&mut self,\n+                    block: BasicBlock,\n+                    lvalue: &mut Lvalue<'tcx>,\n+                    rvalue: &mut Rvalue<'tcx>) {\n+        self.super_assign(block, lvalue, rvalue);\n+    }\n+\n+    fn visit_terminator(&mut self,\n+                        block: BasicBlock,\n+                        terminator: &mut Terminator<'tcx>) {\n+        self.super_terminator(block, terminator);\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>) {\n+        self.super_rvalue(rvalue);\n+    }\n+\n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>) {\n+        self.super_operand(operand);\n+    }\n+\n+    fn visit_lvalue(&mut self,\n+                    lvalue: &mut Lvalue<'tcx>,\n+                    context: LvalueContext) {\n+        self.super_lvalue(lvalue, context);\n+    }\n+\n+    fn visit_branch(&mut self, source: BasicBlock, target: BasicBlock) {\n+        self.super_branch(source, target);\n+    }\n+\n+    fn visit_constant(&mut self, constant: &mut Constant<'tcx>) {\n+        self.super_constant(constant);\n+    }\n+\n+    fn visit_literal(&mut self, literal: &mut Literal<'tcx>) {\n+        self.super_literal(literal);\n+    }\n+\n+    fn visit_def_id(&mut self, def_id: &mut DefId) {\n+        self.super_def_id(def_id);\n+    }\n+\n+    fn visit_span(&mut self, span: &mut Span) {\n+        self.super_span(span);\n+    }\n+\n+    // The `super_xxx` methods comprise the default behavior and are\n+    // not meant to be overidden.\n+\n+    fn super_mir(&mut self, mir: &mut Mir<'tcx>) {\n+        for block in mir.all_basic_blocks() {\n+            let data = mir.basic_block_data_mut(block);\n+            self.visit_basic_block_data(block, data);\n+        }\n+    }\n+\n+    fn super_basic_block_data(&mut self,\n+                              block: BasicBlock,\n+                              data: &mut BasicBlockData<'tcx>) {\n+        for statement in &mut data.statements {\n+            self.visit_statement(block, statement);\n+        }\n+        self.visit_terminator(block, &mut data.terminator);\n+    }\n+\n+    fn super_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>) {\n+        self.visit_span(&mut statement.span);\n+\n+        match statement.kind {\n+            StatementKind::Assign(ref mut lvalue, ref mut rvalue) => {\n+                self.visit_assign(block, lvalue, rvalue);\n+            }\n+            StatementKind::Drop(_, ref mut lvalue) => {\n+                self.visit_lvalue(lvalue, LvalueContext::Drop);\n+            }\n+        }\n+    }\n+\n+    fn super_assign(&mut self,\n+                    _block: BasicBlock,\n+                    lvalue: &mut Lvalue<'tcx>,\n+                    rvalue: &mut Rvalue<'tcx>) {\n+        self.visit_lvalue(lvalue, LvalueContext::Store);\n+        self.visit_rvalue(rvalue);\n+    }\n+\n+    fn super_terminator(&mut self,\n+                        block: BasicBlock,\n+                        terminator: &mut Terminator<'tcx>) {\n+        match *terminator {\n+            Terminator::Goto { target } |\n+            Terminator::Panic { target } => {\n+                self.visit_branch(block, target);\n+            }\n+\n+            Terminator::If { ref mut cond, ref mut targets } => {\n+                self.visit_operand(cond);\n+                for &target in targets.as_slice() {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+\n+            Terminator::Switch { ref mut discr, adt_def: _, ref targets } => {\n+                self.visit_lvalue(discr, LvalueContext::Inspect);\n+                for &target in targets {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+\n+            Terminator::SwitchInt { ref mut discr, switch_ty: _, values: _, ref targets } => {\n+                self.visit_lvalue(discr, LvalueContext::Inspect);\n+                for &target in targets {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+\n+            Terminator::Diverge |\n+            Terminator::Return => {\n+            }\n+\n+            Terminator::Call { ref mut data, ref mut targets } => {\n+                self.visit_lvalue(&mut data.destination, LvalueContext::Store);\n+                self.visit_operand(&mut data.func);\n+                for arg in &mut data.args {\n+                    self.visit_operand(arg);\n+                }\n+                for &target in targets.as_slice() {\n+                    self.visit_branch(block, target);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn super_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>) {\n+        match *rvalue {\n+            Rvalue::Use(ref mut operand) => {\n+                self.visit_operand(operand);\n+            }\n+\n+            Rvalue::Repeat(ref mut value, ref mut len) => {\n+                self.visit_operand(value);\n+                self.visit_constant(len);\n+            }\n+\n+            Rvalue::Ref(r, bk, ref mut path) => {\n+                self.visit_lvalue(path, LvalueContext::Borrow {\n+                    region: r,\n+                    kind: bk\n+                });\n+            }\n+\n+            Rvalue::Len(ref mut path) => {\n+                self.visit_lvalue(path, LvalueContext::Inspect);\n+            }\n+\n+            Rvalue::Cast(_, ref mut operand, _) => {\n+                self.visit_operand(operand);\n+            }\n+\n+            Rvalue::BinaryOp(_, ref mut lhs, ref mut rhs) => {\n+                self.visit_operand(lhs);\n+                self.visit_operand(rhs);\n+            }\n+\n+            Rvalue::UnaryOp(_, ref mut op) => {\n+                self.visit_operand(op);\n+            }\n+\n+            Rvalue::Box(_) => {\n+            }\n+\n+            Rvalue::Aggregate(ref mut kind, ref mut operands) => {\n+                match *kind {\n+                    AggregateKind::Closure(ref mut def_id, _) => {\n+                        self.visit_def_id(def_id);\n+                    }\n+                    _ => { /* nothing to do */ }\n+                }\n+\n+                for operand in &mut operands[..] {\n+                    self.visit_operand(operand);\n+                }\n+            }\n+\n+            Rvalue::Slice { ref mut input, from_start, from_end } => {\n+                self.visit_lvalue(input, LvalueContext::Slice {\n+                    from_start: from_start,\n+                    from_end: from_end,\n+                });\n+            }\n+\n+            Rvalue::InlineAsm(_) => {\n+            }\n+        }\n+    }\n+\n+    fn super_operand(&mut self, operand: &mut Operand<'tcx>) {\n+        match *operand {\n+            Operand::Consume(ref mut lvalue) => {\n+                self.visit_lvalue(lvalue, LvalueContext::Consume);\n+            }\n+            Operand::Constant(ref mut constant) => {\n+                self.visit_constant(constant);\n+            }\n+        }\n+    }\n+\n+    fn super_lvalue(&mut self,\n+                    lvalue: &mut Lvalue<'tcx>,\n+                    _context: LvalueContext) {\n+        match *lvalue {\n+            Lvalue::Var(_) |\n+            Lvalue::Temp(_) |\n+            Lvalue::Arg(_) |\n+            Lvalue::ReturnPointer => {\n+            }\n+            Lvalue::Static(ref mut def_id) => {\n+                self.visit_def_id(def_id);\n+            }\n+            Lvalue::Projection(ref mut proj) => {\n+                self.visit_lvalue(&mut proj.base, LvalueContext::Projection);\n+            }\n+        }\n+    }\n+\n+    fn super_branch(&mut self, _source: BasicBlock, _target: BasicBlock) {\n+    }\n+\n+    fn super_constant(&mut self, constant: &mut Constant<'tcx>) {\n+        self.visit_span(&mut constant.span);\n+        self.visit_literal(&mut constant.literal);\n+    }\n+\n+    fn super_literal(&mut self, literal: &mut Literal<'tcx>) {\n+        match *literal {\n+            Literal::Item { ref mut def_id, .. } => {\n+                self.visit_def_id(def_id);\n+            },\n+            Literal::Value { .. } => {\n+                // Nothing to do\n+            }\n+        }\n+    }\n+\n+    fn super_def_id(&mut self, _def_id: &mut DefId) {\n+    }\n+\n+    fn super_span(&mut self, _span: &mut Span) {\n+    }\n+}"}]}