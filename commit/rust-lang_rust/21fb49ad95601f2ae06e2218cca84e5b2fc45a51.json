{"sha": "21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZmI0OWFkOTU2MDFmMmFlMDZlMjIxOGNjYTg0ZTViMmZjNDVhNTE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-02T23:06:19Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-03T00:35:50Z"}, "message": "Join the results of alt arms so alt can be used as an expression.\n\nUn-XFAIL expr-alt.rs.", "tree": {"sha": "b019c6f0037561abc040f3ef6d29f23ec4426af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b019c6f0037561abc040f3ef6d29f23ec4426af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "html_url": "https://github.com/rust-lang/rust/commit/21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fb49ad95601f2ae06e2218cca84e5b2fc45a51/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203e33b611f56b3220ecafcbb82fa15c4de0e2b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/203e33b611f56b3220ecafcbb82fa15c4de0e2b7", "html_url": "https://github.com/rust-lang/rust/commit/203e33b611f56b3220ecafcbb82fa15c4de0e2b7"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "809a268a47810dff153fe6732a8d8a957df88a77", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21fb49ad95601f2ae06e2218cca84e5b2fc45a51/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fb49ad95601f2ae06e2218cca84e5b2fc45a51/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "patch": "@@ -3549,13 +3549,12 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n     }\n }\n \n-fn trans_alt(@block_ctxt cx, @ast.expr expr, vec[ast.arm] arms)\n-    -> result {\n+fn trans_alt(@block_ctxt cx, @ast.expr expr,\n+             vec[ast.arm] arms, ast.ann ann) -> result {\n     auto expr_res = trans_expr(cx, expr);\n \n-    auto last_cx = new_sub_block_ctxt(expr_res.bcx, \"last\");\n-\n     auto this_cx = expr_res.bcx;\n+    let vec[result] arm_results = vec();\n     for (ast.arm arm in arms) {\n         auto next_cx = new_sub_block_ctxt(expr_res.bcx, \"next\");\n         auto match_res = trans_pat_match(this_cx, arm.pat, expr_res.val,\n@@ -3568,9 +3567,7 @@ fn trans_alt(@block_ctxt cx, @ast.expr expr, vec[ast.arm] arms)\n                                              expr_res.val);\n \n         auto block_res = trans_block(binding_res.bcx, arm.block);\n-        if (!is_terminated(block_res.bcx)) {\n-            block_res.bcx.build.Br(last_cx.llbb);\n-        }\n+        arm_results += vec(block_res);\n \n         this_cx = next_cx;\n     }\n@@ -3579,9 +3576,18 @@ fn trans_alt(@block_ctxt cx, @ast.expr expr, vec[ast.arm] arms)\n     auto default_res = trans_fail(default_cx, expr.span,\n                                   \"non-exhaustive match failure\");\n \n-    // FIXME: This is very wrong; we should phi together all the arm blocks,\n-    // since this is an expression.\n-    ret res(last_cx, C_nil());\n+    auto expr_ty = ty.ann_to_type(ann);\n+    auto expr_llty;\n+    if (ty.type_has_dynamic_size(expr_ty)) {\n+        expr_llty = T_typaram_ptr(cx.fcx.ccx.tn);\n+    } else {\n+        expr_llty = type_of(cx.fcx.ccx, expr_ty);\n+        if (ty.type_is_structural(expr_ty)) {\n+            expr_llty = T_ptr(expr_llty);\n+        }\n+    }\n+\n+    ret join_results(cx, expr_llty, arm_results);\n }\n \n type generic_info = rec(@ty.t item_type,\n@@ -4703,8 +4709,8 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_do_while(cx, body, cond);\n         }\n \n-        case (ast.expr_alt(?expr, ?arms, _)) {\n-            ret trans_alt(cx, expr, arms);\n+        case (ast.expr_alt(?expr, ?arms, ?ann)) {\n+            ret trans_alt(cx, expr, arms, ann);\n         }\n \n         case (ast.expr_block(?blk, _)) {"}, {"sha": "420ccbc9cba95c26a1a0470db01023e561960cbe", "filename": "src/test/run-pass/expr-alt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fb49ad95601f2ae06e2218cca84e5b2fc45a51/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fb49ad95601f2ae06e2218cca84e5b2fc45a51/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt.rs?ref=21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "patch": "@@ -1,5 +1,4 @@\n // xfail-boot\n-// xfail-stage0\n // -*- rust -*-\n \n // Tests for using alt as an expression"}]}