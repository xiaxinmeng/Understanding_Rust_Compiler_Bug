{"sha": "b0ccfd1f90e086c700fbccccb3ca91804b71293d", "node_id": "C_kwDOAAsO6NoAKGIwY2NmZDFmOTBlMDg2YzcwMGZiY2NjY2IzY2E5MTgwNGI3MTI5M2Q", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-09-10T11:31:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-10T11:31:45Z"}, "message": "Merge pull request #215 from sadlerap/extract-element\n\nsimd: impl extract_element for vector types", "tree": {"sha": "4f3a3dac2fe538619d76c74ab42a1a9e2fd26d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3a3dac2fe538619d76c74ab42a1a9e2fd26d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ccfd1f90e086c700fbccccb3ca91804b71293d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHHWhCRBK7hj4Ov3rIwAAneMIAK+1yVeR8xXUCUxGF43AkKdJ\ns8AZuzBmBXKC7T+n3IBu+qNXWbyjDuc054xal+GBnCgggSFbJR6OjSpvXryF71zf\ndLXo+bL7nOjoEqzK6cm9cy10ztwbBFGQPWqkJPlAJ9ROKyZ0IY4JGwPqzswu/YWH\nFuP/hY53JJDnlQyqMmllm/bKGbPm3PtiacH2T+HJ3v695DEFOFQwGsSWVtxxYmU9\noZr3zhlfBFQbfGNC17W3Hvo9qihDieEFW5gAfe53SuKH3DSouJSGhSpa4GOPGnxA\nNNkA/0izKK/sDVSPHp8ylZEJ2kl3iYHmGgWe10MyNLBvlO4PqAJfRoiAoW/sj0Y=\n=zspo\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f3a3dac2fe538619d76c74ab42a1a9e2fd26d2d\nparent 2ecd620acb56c1f834bc4b7c50b2ac4fe8fac0c5\nparent d7d820fc47a5987566550ef9ede2ea18b0d1ff05\nauthor antoyo <antoyo@users.noreply.github.com> 1662809505 -0400\ncommitter GitHub <noreply@github.com> 1662809505 -0400\n\nMerge pull request #215 from sadlerap/extract-element\n\nsimd: impl extract_element for vector types"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ccfd1f90e086c700fbccccb3ca91804b71293d", "html_url": "https://github.com/rust-lang/rust/commit/b0ccfd1f90e086c700fbccccb3ca91804b71293d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ccfd1f90e086c700fbccccb3ca91804b71293d/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ecd620acb56c1f834bc4b7c50b2ac4fe8fac0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ecd620acb56c1f834bc4b7c50b2ac4fe8fac0c5", "html_url": "https://github.com/rust-lang/rust/commit/2ecd620acb56c1f834bc4b7c50b2ac4fe8fac0c5"}, {"sha": "d7d820fc47a5987566550ef9ede2ea18b0d1ff05", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d820fc47a5987566550ef9ede2ea18b0d1ff05", "html_url": "https://github.com/rust-lang/rust/commit/d7d820fc47a5987566550ef9ede2ea18b0d1ff05"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "7fe9e084940adf52e14c3674ead3728607f3303d", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0ccfd1f90e086c700fbccccb3ca91804b71293d/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b0ccfd1f90e086c700fbccccb3ca91804b71293d/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=b0ccfd1f90e086c700fbccccb3ca91804b71293d", "patch": "@@ -30,12 +30,10 @@ src/test/ui/sepcomp/sepcomp-extern.rs\n src/test/ui/sepcomp/sepcomp-fns-backwards.rs\n src/test/ui/sepcomp/sepcomp-fns.rs\n src/test/ui/sepcomp/sepcomp-statics.rs\n-src/test/ui/simd/generics.rs\n src/test/ui/simd/intrinsic/float-math-pass.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs\n src/test/ui/simd/intrinsic/generic-as.rs\n src/test/ui/simd/intrinsic/generic-bitmask-pass.rs\n-src/test/ui/simd/intrinsic/generic-comparison-pass.rs\n src/test/ui/simd/intrinsic/generic-gather-pass.rs\n src/test/ui/simd/intrinsic/generic-select-pass.rs\n src/test/ui/simd/issue-17170.rs"}, {"sha": "7826875f04edf78f7c4b9bff2846b422cc9b9c81", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0ccfd1f90e086c700fbccccb3ca91804b71293d/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b0ccfd1f90e086c700fbccccb3ca91804b71293d/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=b0ccfd1f90e086c700fbccccb3ca91804b71293d", "patch": "@@ -12,6 +12,7 @@ src/test/ui/simd/intrinsic/float-minmax-pass.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs\n src/test/ui/simd/intrinsic/generic-cast-pass.rs\n src/test/ui/simd/intrinsic/generic-cast-pointer-width.rs\n+src/test/ui/simd/intrinsic/generic-comparison-pass.rs\n src/test/ui/simd/intrinsic/generic-elements-pass.rs\n src/test/ui/simd/intrinsic/generic-reduction-pass.rs\n src/test/ui/simd/intrinsic/inlining-issue67557-ice.rs"}, {"sha": "95080e024fc9c088a90d2cd549a62ebc9195371b", "filename": "src/builder.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b0ccfd1f90e086c700fbccccb3ca91804b71293d/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ccfd1f90e086c700fbccccb3ca91804b71293d/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=b0ccfd1f90e086c700fbccccb3ca91804b71293d", "patch": "@@ -1059,8 +1059,19 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-    fn extract_element(&mut self, _vec: RValue<'gcc>, _idx: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    #[cfg(feature=\"master\")]\n+    fn extract_element(&mut self, vec: RValue<'gcc>, idx: RValue<'gcc>) -> RValue<'gcc> {\n+        self.context.new_vector_access(None, vec, idx).to_rvalue()\n+    }\n+\n+    #[cfg(not(feature=\"master\"))]\n+    fn extract_element(&mut self, vec: RValue<'gcc>, idx: RValue<'gcc>) -> RValue<'gcc> {\n+        let vector_type = vec.get_type().unqualified().dyncast_vector().expect(\"Called extract_element on a non-vector type\");\n+        let element_type = vector_type.get_element_type();\n+        let vec_num_units = vector_type.get_num_units();\n+        let array_type = self.context.new_array_type(None, element_type, vec_num_units as i32);\n+        let array = self.context.new_bitcast(None, vec, array_type).to_rvalue();\n+        self.context.new_array_access(None, array, idx).to_rvalue()\n     }\n \n     fn vector_splat(&mut self, _num_elts: usize, _elt: RValue<'gcc>) -> RValue<'gcc> {"}]}