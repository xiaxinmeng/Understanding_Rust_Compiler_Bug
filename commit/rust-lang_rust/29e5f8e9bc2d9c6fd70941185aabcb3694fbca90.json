{"sha": "29e5f8e9bc2d9c6fd70941185aabcb3694fbca90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTVmOGU5YmMyZDljNmZkNzA5NDExODVhYWJjYjM2OTRmYmNhOTA=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2019-12-07T18:03:06Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2019-12-12T19:56:14Z"}, "message": "E0369 messages mimics E0277", "tree": {"sha": "93d46396ac52dfc8404022a6a2a85cc5d5c89fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d46396ac52dfc8404022a6a2a85cc5d5c89fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90", "html_url": "https://github.com/rust-lang/rust/commit/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9469a6aec2f49fa1e2ae670649f293866932253", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9469a6aec2f49fa1e2ae670649f293866932253", "html_url": "https://github.com/rust-lang/rust/commit/e9469a6aec2f49fa1e2ae670649f293866932253"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "e85bf0797c8320b0cc7367a3358a430677b09199", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e5f8e9bc2d9c6fd70941185aabcb3694fbca90/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=29e5f8e9bc2d9c6fd70941185aabcb3694fbca90", "patch": "@@ -334,10 +334,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.emit();\n                         }\n                         IsAssign::No => {\n+                            let (message, missing_trait) = match op.node {\n+                                hir::BinOpKind::Add    => {\n+                                    (format!(\"cannot add `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Add\"))\n+                                },\n+                                hir::BinOpKind::Sub    => {\n+                                    (format!(\"cannot substract `{}` from `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Sub\"))\n+                                },\n+                                hir::BinOpKind::Mul    => {\n+                                    (format!(\"cannot multiply `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Mul\"))\n+                                },\n+                                hir::BinOpKind::Div    => {\n+                                    (format!(\"cannot divide `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Div\"))\n+                                },\n+                                hir::BinOpKind::Rem    => {\n+                                    (format!(\"cannot mod `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Rem\"))\n+                                },\n+                                hir::BinOpKind::BitAnd => {\n+                                    (format!(\"no implementation for `{} & {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitAnd\"))\n+                                },\n+                                hir::BinOpKind::BitXor => {\n+                                    (format!(\"no implementation for `{} ^ {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitXor\"))\n+                                },\n+                                hir::BinOpKind::BitOr  => {\n+                                    (format!(\"no implementation for `{} | {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitOr\"))\n+                                },\n+                                hir::BinOpKind::Shl    => {\n+                                    (format!(\"no implementation for `{} << {}\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Shl\"))\n+                                },\n+                                hir::BinOpKind::Shr    => {\n+                                    (format!(\"no implementation for `{} << {}\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Shr\"))\n+                                },\n+                                _ => (format!(\"binary operation `{}` cannot be applied to type `{}`\", op.node.as_str(), lhs_ty), None)\n+                            };\n                             let mut err = struct_span_err!(self.tcx.sess, op.span, E0369,\n-                                \"binary operation `{}` cannot be applied to type `{}`\",\n-                                op.node.as_str(),\n-                                lhs_ty);\n+                                \"{}\", message.as_str());\n \n                             let mut involves_fn = false;\n                             if !lhs_expr.span.eq(&rhs_expr.span) {\n@@ -382,25 +423,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     }\n                                 }\n                             }\n-                            let missing_trait = match op.node {\n-                                hir::BinOpKind::Add    => Some(\"std::ops::Add\"),\n-                                hir::BinOpKind::Sub    => Some(\"std::ops::Sub\"),\n-                                hir::BinOpKind::Mul    => Some(\"std::ops::Mul\"),\n-                                hir::BinOpKind::Div    => Some(\"std::ops::Div\"),\n-                                hir::BinOpKind::Rem    => Some(\"std::ops::Rem\"),\n-                                hir::BinOpKind::BitAnd => Some(\"std::ops::BitAnd\"),\n-                                hir::BinOpKind::BitXor => Some(\"std::ops::BitXor\"),\n-                                hir::BinOpKind::BitOr  => Some(\"std::ops::BitOr\"),\n-                                hir::BinOpKind::Shl    => Some(\"std::ops::Shl\"),\n-                                hir::BinOpKind::Shr    => Some(\"std::ops::Shr\"),\n-                                hir::BinOpKind::Eq |\n-                                hir::BinOpKind::Ne => Some(\"std::cmp::PartialEq\"),\n-                                hir::BinOpKind::Lt |\n-                                hir::BinOpKind::Le |\n-                                hir::BinOpKind::Gt |\n-                                hir::BinOpKind::Ge => Some(\"std::cmp::PartialOrd\"),\n-                                _ => None\n-                            };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition("}]}