{"sha": "defa2456246a8272ceace9c1cdccdf2e4c36175e", "node_id": "C_kwDOAAsO6NoAKGRlZmEyNDU2MjQ2YTgyNzJjZWFjZTljMWNkY2NkZjJlNGMzNjE3NWU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-02-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-03-06T11:24:15Z"}, "message": "Implement read_buf for a few more types\n\nImplement read_buf for TcpStream, Stdin, StdinLock, ChildStdout,\nChildStderr (and internally for AnonPipe, Handle, Socket), so\nthat it skips buffer initialization.\n\nThe other provided methods like read_to_string and read_to_end are\nimplemented in terms of read_buf and so benefit from the optimization\nas well.\n\nThis commit also implements read_vectored and is_read_vectored where\napplicable.", "tree": {"sha": "707a262f47a0659bdfe1d6698ac8ec99019c89b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707a262f47a0659bdfe1d6698ac8ec99019c89b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defa2456246a8272ceace9c1cdccdf2e4c36175e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defa2456246a8272ceace9c1cdccdf2e4c36175e", "html_url": "https://github.com/rust-lang/rust/commit/defa2456246a8272ceace9c1cdccdf2e4c36175e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defa2456246a8272ceace9c1cdccdf2e4c36175e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbfc3e76916521b509b63286296dd0762170d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfc3e76916521b509b63286296dd0762170d34", "html_url": "https://github.com/rust-lang/rust/commit/0fbfc3e76916521b509b63286296dd0762170d34"}], "stats": {"total": 281, "additions": 250, "deletions": 31}, "files": [{"sha": "401def1845827d84186941851ef9a70a62d592d7", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -2,7 +2,8 @@ use crate::io::prelude::*;\n \n use crate::env;\n use crate::fs::{self, File, OpenOptions};\n-use crate::io::{ErrorKind, SeekFrom};\n+use crate::io::{BorrowedBuf, ErrorKind, SeekFrom};\n+use crate::mem::MaybeUninit;\n use crate::path::Path;\n use crate::str;\n use crate::sync::Arc;\n@@ -401,6 +402,23 @@ fn file_test_io_seek_read_write() {\n     check!(fs::remove_file(&filename));\n }\n \n+#[test]\n+fn file_test_read_buf() {\n+    let tmpdir = tmpdir();\n+    let filename = &tmpdir.join(\"test\");\n+    check!(fs::write(filename, &[1, 2, 3, 4]));\n+\n+    let mut buf: [MaybeUninit<u8>; 128] = MaybeUninit::uninit_array();\n+    let mut buf = BorrowedBuf::from(buf.as_mut_slice());\n+    let mut file = check!(File::open(filename));\n+    check!(file.read_buf(buf.unfilled()));\n+    assert_eq!(buf.filled(), &[1, 2, 3, 4]);\n+    // File::read_buf should omit buffer initialization.\n+    assert_eq!(buf.init_len(), 4);\n+\n+    check!(fs::remove_file(filename));\n+}\n+\n #[test]\n fn file_test_stat_is_correct_on_is_file() {\n     let tmpdir = tmpdir();"}, {"sha": "0455a00956e6fa5345e3e20ea1217a13d66d6c47", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -8,7 +8,7 @@ use crate::io::prelude::*;\n use crate::cell::{Cell, RefCell};\n use crate::fmt;\n use crate::fs::File;\n-use crate::io::{self, BufReader, IoSlice, IoSliceMut, LineWriter, Lines};\n+use crate::io::{self, BorrowedCursor, BufReader, IoSlice, IoSliceMut, LineWriter, Lines};\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sync::{Arc, Mutex, MutexGuard, OnceLock, ReentrantMutex, ReentrantMutexGuard};\n use crate::sys::stdio;\n@@ -97,6 +97,10 @@ impl Read for StdinRaw {\n         handle_ebadf(self.0.read(buf), 0)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        handle_ebadf(self.0.read_buf(buf), ())\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         handle_ebadf(self.0.read_vectored(bufs), 0)\n     }\n@@ -418,6 +422,9 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.lock().read_buf(buf)\n+    }\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.lock().read_vectored(bufs)\n     }\n@@ -450,6 +457,10 @@ impl Read for StdinLock<'_> {\n         self.inner.read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.inner.read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }"}, {"sha": "3982d3636614e4a4ba1bf0e303b9d0d91fc76729", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -6,7 +6,7 @@ mod tests;\n use crate::io::prelude::*;\n \n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::iter::FusedIterator;\n use crate::net::{Shutdown, SocketAddr, ToSocketAddrs};\n use crate::sys_common::net as net_imp;\n@@ -619,6 +619,10 @@ impl Read for TcpStream {\n         self.0.read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.0.read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n@@ -653,6 +657,10 @@ impl Read for &TcpStream {\n         self.0.read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.0.read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }"}, {"sha": "7a3c66e450456ff554c911822ba3f957592bbc61", "filename": "library/std/src/net/tcp/tests.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,6 +1,7 @@\n use crate::fmt;\n use crate::io::prelude::*;\n-use crate::io::{ErrorKind, IoSlice, IoSliceMut};\n+use crate::io::{BorrowedBuf, ErrorKind, IoSlice, IoSliceMut};\n+use crate::mem::MaybeUninit;\n use crate::net::test::{next_test_ip4, next_test_ip6};\n use crate::net::*;\n use crate::sync::mpsc::channel;\n@@ -279,6 +280,31 @@ fn partial_read() {\n     })\n }\n \n+#[test]\n+fn read_buf() {\n+    each_ip(&mut |addr| {\n+        let srv = t!(TcpListener::bind(&addr));\n+        let t = thread::spawn(move || {\n+            let mut s = t!(TcpStream::connect(&addr));\n+            s.write_all(&[1, 2, 3, 4]).unwrap();\n+        });\n+\n+        let mut s = t!(srv.accept()).0;\n+        let mut buf: [MaybeUninit<u8>; 128] = MaybeUninit::uninit_array();\n+        let mut buf = BorrowedBuf::from(buf.as_mut_slice());\n+        t!(s.read_buf(buf.unfilled()));\n+        assert_eq!(buf.filled(), &[1, 2, 3, 4]);\n+\n+        // FIXME: sgx uses default_read_buf that initializes the buffer.\n+        if cfg!(not(target_env = \"sgx\")) {\n+            // TcpStream::read_buf should omit buffer initialization.\n+            assert_eq!(buf.init_len(), 4);\n+        }\n+\n+        t.join().ok().expect(\"thread panicked\");\n+    })\n+}\n+\n #[test]\n fn read_vectored() {\n     each_ip(&mut |addr| {"}, {"sha": "80d73084c4f01091f6868101f8379e1b8ab6c742", "filename": "library/std/src/process.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -110,7 +110,7 @@ use crate::convert::Infallible;\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::fs;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::num::NonZeroI32;\n use crate::path::Path;\n use crate::str;\n@@ -354,6 +354,10 @@ impl Read for ChildStdout {\n         self.inner.read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.inner.read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n@@ -419,6 +423,10 @@ impl Read for ChildStderr {\n         self.inner.read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.inner.read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }"}, {"sha": "d7f4d335de3e334f7b8bcf25bbf01968a1240e96", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,7 +1,8 @@\n use crate::io::prelude::*;\n \n use super::{Command, Output, Stdio};\n-use crate::io::ErrorKind;\n+use crate::io::{BorrowedBuf, ErrorKind};\n+use crate::mem::MaybeUninit;\n use crate::str;\n \n fn known_command() -> Command {\n@@ -119,6 +120,37 @@ fn stdin_works() {\n     assert_eq!(out, \"foobar\\n\");\n }\n \n+#[test]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n+fn child_stdout_read_buf() {\n+    let mut cmd = if cfg!(target_os = \"windows\") {\n+        let mut cmd = Command::new(\"cmd\");\n+        cmd.arg(\"/C\").arg(\"echo abc\");\n+        cmd\n+    } else {\n+        let mut cmd = shell_cmd();\n+        cmd.arg(\"-c\").arg(\"echo abc\");\n+        cmd\n+    };\n+    cmd.stdin(Stdio::null());\n+    cmd.stdout(Stdio::piped());\n+    let child = cmd.spawn().unwrap();\n+\n+    let mut stdout = child.stdout.unwrap();\n+    let mut buf: [MaybeUninit<u8>; 128] = MaybeUninit::uninit_array();\n+    let mut buf = BorrowedBuf::from(buf.as_mut_slice());\n+    stdout.read_buf(buf.unfilled()).unwrap();\n+\n+    // ChildStdout::read_buf should omit buffer initialization.\n+    if cfg!(target_os = \"windows\") {\n+        assert_eq!(buf.filled(), b\"abc\\r\\n\");\n+        assert_eq!(buf.init_len(), 5);\n+    } else {\n+        assert_eq!(buf.filled(), b\"abc\\n\");\n+        assert_eq!(buf.init_len(), 4);\n+    };\n+}\n+\n #[test]\n #[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_process_status() {"}, {"sha": "0c02a107691c89fe2fea710c313b0696f2814c87", "filename": "library/std/src/sys/sgx/fd.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,7 +1,7 @@\n use fortanix_sgx_abi::Fd;\n \n use super::abi::usercalls;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::sys::{AsInner, FromInner, IntoInner};\n \n@@ -30,6 +30,10 @@ impl FileDesc {\n         usercalls::read(self.fd, &mut [IoSliceMut::new(buf)])\n     }\n \n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        crate::io::default_read_buf(|b| self.read(b), buf)\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         usercalls::read(self.fd, bufs)\n     }"}, {"sha": "923be5eb944ec09d1d1ba1b4aa0f272090643688", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,6 +1,6 @@\n use crate::error;\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr, ToSocketAddrs};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n@@ -144,6 +144,10 @@ impl TcpStream {\n         self.inner.inner.read(buf)\n     }\n \n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.inner.inner.read_buf(buf)\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.inner.read_vectored(bufs)\n     }"}, {"sha": "ce5c048f252a1572deeda25680314173ba808c0d", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -469,6 +469,15 @@ impl<'a> Read for &'a FileDesc {\n     fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n         (**self).read_buf(cursor)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+        (**self).read_vectored(bufs)\n+    }\n+\n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        (**self).is_read_vectored()\n+    }\n }\n \n impl AsInner<OwnedFd> for FileDesc {"}, {"sha": "f84240d268fec3e3620f693346db6751a8bcc7d8", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,6 +1,6 @@\n use crate::cmp;\n use crate::ffi::CStr;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedBuf, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{Shutdown, SocketAddr};\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n@@ -242,19 +242,35 @@ impl Socket {\n         self.0.duplicate().map(Socket)\n     }\n \n-    fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {\n+    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {\n         let ret = cvt(unsafe {\n-            libc::recv(self.as_raw_fd(), buf.as_mut_ptr() as *mut c_void, buf.len(), flags)\n+            libc::recv(\n+                self.as_raw_fd(),\n+                buf.as_mut().as_mut_ptr() as *mut c_void,\n+                buf.capacity(),\n+                flags,\n+            )\n         })?;\n-        Ok(ret as usize)\n+        unsafe {\n+            buf.advance(ret as usize);\n+        }\n+        Ok(())\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.recv_with_flags(buf, 0)\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), 0)?;\n+        Ok(buf.len())\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.recv_with_flags(buf, MSG_PEEK)\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), MSG_PEEK)?;\n+        Ok(buf.len())\n+    }\n+\n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.recv_with_flags(buf, 0)\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {"}, {"sha": "dc17c9fac460a8dd3f0443623e167169614cb1fd", "filename": "library/std/src/sys/unix/pipe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys::fd::FileDesc;\n@@ -49,6 +49,10 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.0.read_buf(buf)\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }"}, {"sha": "a26f20795a191eeb40a07d11fbff6e2bba186b3a", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::os::unix::io::FromRawFd;\n use crate::sys::fd::FileDesc;\n@@ -18,6 +18,10 @@ impl io::Read for Stdin {\n         unsafe { ManuallyDrop::new(FileDesc::from_raw_fd(libc::STDIN_FILENO)).read(buf) }\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        unsafe { ManuallyDrop::new(FileDesc::from_raw_fd(libc::STDIN_FILENO)).read_buf(buf) }\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         unsafe { ManuallyDrop::new(FileDesc::from_raw_fd(libc::STDIN_FILENO)).read_vectored(bufs) }\n     }"}, {"sha": "bbc52703f96322dffa18097a8743ee72775e60c3", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::sys::unsupported;\n use crate::time::Duration;\n@@ -39,6 +39,10 @@ impl TcpStream {\n         self.0\n     }\n \n+    pub fn read_buf(&self, _buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.0\n+    }\n+\n     pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0\n     }"}, {"sha": "d7d8f297ae586aecd61fd18088c3596adcf54a9e", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n \n pub struct AnonPipe(!);\n \n@@ -7,6 +7,10 @@ impl AnonPipe {\n         self.0\n     }\n \n+    pub fn read_buf(&self, _buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.0\n+    }\n+\n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0\n     }"}, {"sha": "191db4b60f72a690b58c6ee36acd0efcab630168", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n \n use super::err2io;\n-use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n@@ -46,6 +46,22 @@ impl WasiFd {\n         unsafe { wasi::fd_read(self.as_raw_fd() as wasi::Fd, iovec(bufs)).map_err(err2io) }\n     }\n \n+    pub fn read_buf(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        unsafe {\n+            let bufs = [wasi::Iovec {\n+                buf: buf.as_mut().as_mut_ptr() as *mut u8,\n+                buf_len: buf.capacity(),\n+            }];\n+            match wasi::fd_read(self.as_raw_fd() as wasi::Fd, &bufs) {\n+                Ok(n) => {\n+                    buf.advance(n);\n+                    Ok(())\n+                }\n+                Err(e) => Err(err2io(e)),\n+            }\n+        }\n+    }\n+\n     pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         unsafe { wasi::fd_write(self.as_raw_fd() as wasi::Fd, ciovec(bufs)).map_err(err2io) }\n     }"}, {"sha": "3a205267e34689b88671cfadcdef653225641fdc", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -441,7 +441,7 @@ impl File {\n     }\n \n     pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n-        crate::io::default_read_buf(|buf| self.read(buf), cursor)\n+        self.fd.read_buf(cursor)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "59d94a3686dc513e94370cb2ecaa74a2c0b0ba66", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -3,7 +3,7 @@\n use super::err2io;\n use super::fd::WasiFd;\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys::unsupported;\n@@ -91,6 +91,10 @@ impl TcpStream {\n         self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.socket().as_inner().read_buf(buf)\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.socket().as_inner().read(bufs)\n     }"}, {"sha": "b290f4070e8fdb766adc3b0097906fa5d328cda8", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -327,7 +327,16 @@ impl<'a> Read for &'a Handle {\n         (**self).read(buf)\n     }\n \n+    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        (**self).read_buf(buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n+\n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        (**self).is_read_vectored()\n+    }\n }"}, {"sha": "ee1f5482b47eedb420be2ccb3dbbb5ca080a248c", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"none\", feature = \"windows_net\")]\n \n use crate::cmp;\n-use crate::io::{self, IoSlice, IoSliceMut, Read};\n+use crate::io::{self, BorrowedBuf, BorrowedCursor, IoSlice, IoSliceMut, Read};\n use crate::mem;\n use crate::net::{Shutdown, SocketAddr};\n use crate::os::windows::io::{\n@@ -214,28 +214,38 @@ impl Socket {\n         Ok(Self(self.0.try_clone()?))\n     }\n \n-    fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {\n+    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {\n         // On unix when a socket is shut down all further reads return 0, so we\n         // do the same on windows to map a shut down socket to returning EOF.\n-        let length = cmp::min(buf.len(), i32::MAX as usize) as i32;\n-        let result =\n-            unsafe { c::recv(self.as_raw_socket(), buf.as_mut_ptr() as *mut _, length, flags) };\n+        let length = cmp::min(buf.capacity(), i32::MAX as usize) as i32;\n+        let result = unsafe {\n+            c::recv(self.as_raw_socket(), buf.as_mut().as_mut_ptr() as *mut _, length, flags)\n+        };\n \n         match result {\n             c::SOCKET_ERROR => {\n                 let error = unsafe { c::WSAGetLastError() };\n \n                 if error == c::WSAESHUTDOWN {\n-                    Ok(0)\n+                    Ok(())\n                 } else {\n                     Err(io::Error::from_raw_os_error(error))\n                 }\n             }\n-            _ => Ok(result as usize),\n+            _ => {\n+                unsafe { buf.advance(result as usize) };\n+                Ok(())\n+            }\n         }\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), 0)?;\n+        Ok(buf.len())\n+    }\n+\n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n         self.recv_with_flags(buf, 0)\n     }\n \n@@ -277,7 +287,9 @@ impl Socket {\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.recv_with_flags(buf, c::MSG_PEEK)\n+        let mut buf = BorrowedBuf::from(buf);\n+        self.recv_with_flags(buf.unfilled(), c::MSG_PEEK)?;\n+        Ok(buf.len())\n     }\n \n     fn recv_from_with_flags("}, {"sha": "0780b29584da40f11c285dbf2540b88977993295", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io::{self, IoSlice, IoSliceMut, Read};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, Read};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -252,6 +252,28 @@ impl AnonPipe {\n         }\n     }\n \n+    pub fn read_buf(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        let result = unsafe {\n+            let len = crate::cmp::min(buf.capacity(), c::DWORD::MAX as usize) as c::DWORD;\n+            self.alertable_io_internal(c::ReadFileEx, buf.as_mut().as_mut_ptr() as _, len)\n+        };\n+\n+        match result {\n+            // The special treatment of BrokenPipe is to deal with Windows\n+            // pipe semantics, which yields this error when *reading* from\n+            // a pipe after the other end has closed; we interpret that as\n+            // EOF on the pipe.\n+            Err(ref e) if e.kind() == io::ErrorKind::BrokenPipe => Ok(()),\n+            Err(e) => Err(e),\n+            Ok(n) => {\n+                unsafe {\n+                    buf.advance(n);\n+                }\n+                Ok(())\n+            }\n+        }\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }"}, {"sha": "eb427dbda2393253e495e0ef3548f8309a1ddd17", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defa2456246a8272ceace9c1cdccdf2e4c36175e/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=defa2456246a8272ceace9c1cdccdf2e4c36175e", "patch": "@@ -4,7 +4,7 @@ mod tests;\n use crate::cmp;\n use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n-use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n+use crate::io::{self, BorrowedCursor, ErrorKind, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::ptr;\n@@ -272,6 +272,10 @@ impl TcpStream {\n         self.inner.read(buf)\n     }\n \n+    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {\n+        self.inner.read_buf(buf)\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }"}]}