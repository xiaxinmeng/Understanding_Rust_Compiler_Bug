{"sha": "079c390d5089735b5eaa8b06ddb3beedcddbee7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OWMzOTBkNTA4OTczNWI1ZWFhOGIwNmRkYjNiZWVkY2RkYmVlN2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-22T18:11:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Generate debuginfo for unions", "tree": {"sha": "0ee26d3362956037a075eab5d8e1a433a0ba34da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ee26d3362956037a075eab5d8e1a433a0ba34da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079c390d5089735b5eaa8b06ddb3beedcddbee7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079c390d5089735b5eaa8b06ddb3beedcddbee7d", "html_url": "https://github.com/rust-lang/rust/commit/079c390d5089735b5eaa8b06ddb3beedcddbee7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079c390d5089735b5eaa8b06ddb3beedcddbee7d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b332bd69770cb716233b6998b11d345f6f184b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b332bd69770cb716233b6998b11d345f6f184b", "html_url": "https://github.com/rust-lang/rust/commit/d9b332bd69770cb716233b6998b11d345f6f184b"}], "stats": {"total": 155, "additions": 153, "deletions": 2}, "files": [{"sha": "bdfeee37625e812031af0ce7bbe4bf098d99dd8d", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/079c390d5089735b5eaa8b06ddb3beedcddbee7d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079c390d5089735b5eaa8b06ddb3beedcddbee7d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=079c390d5089735b5eaa8b06ddb3beedcddbee7d", "patch": "@@ -786,7 +786,10 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                     usage_site_span).finalize(cx)\n         }\n         ty::TyUnion(..) => {\n-            unimplemented!();\n+            prepare_union_metadata(cx,\n+                                   t,\n+                                   unique_type_id,\n+                                   usage_site_span).finalize(cx)\n         }\n         ty::TyTuple(ref elements) => {\n             prepare_tuple_metadata(cx,\n@@ -1038,6 +1041,7 @@ enum MemberDescriptionFactory<'tcx> {\n     StructMDF(StructMemberDescriptionFactory<'tcx>),\n     TupleMDF(TupleMemberDescriptionFactory<'tcx>),\n     EnumMDF(EnumMemberDescriptionFactory<'tcx>),\n+    UnionMDF(UnionMemberDescriptionFactory<'tcx>),\n     VariantMDF(VariantMemberDescriptionFactory<'tcx>)\n }\n \n@@ -1054,6 +1058,9 @@ impl<'tcx> MemberDescriptionFactory<'tcx> {\n             EnumMDF(ref this) => {\n                 this.create_member_descriptions(cx)\n             }\n+            UnionMDF(ref this) => {\n+                this.create_member_descriptions(cx)\n+            }\n             VariantMDF(ref this) => {\n                 this.create_member_descriptions(cx)\n             }\n@@ -1154,7 +1161,6 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     )\n }\n \n-\n //=-----------------------------------------------------------------------------\n // Tuples\n //=-----------------------------------------------------------------------------\n@@ -1209,6 +1215,66 @@ fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     )\n }\n \n+//=-----------------------------------------------------------------------------\n+// Unions\n+//=-----------------------------------------------------------------------------\n+\n+struct UnionMemberDescriptionFactory<'tcx> {\n+    variant: ty::VariantDef<'tcx>,\n+    substs: &'tcx Substs<'tcx>,\n+    span: Span,\n+}\n+\n+impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n+    fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)\n+                                      -> Vec<MemberDescription> {\n+        self.variant.fields.iter().map(|field| {\n+            let fty = monomorphize::field_ty(cx.tcx(), self.substs, field);\n+            MemberDescription {\n+                name: field.name.to_string(),\n+                llvm_type: type_of::type_of(cx, fty),\n+                type_metadata: type_metadata(cx, fty, self.span),\n+                offset: FixedMemberOffset { bytes: 0 },\n+                flags: FLAGS_NONE,\n+            }\n+        }).collect()\n+    }\n+}\n+\n+fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n+                                    union_type: Ty<'tcx>,\n+                                    unique_type_id: UniqueTypeId,\n+                                    span: Span)\n+                                    -> RecursiveTypeDescription<'tcx> {\n+    let union_name = compute_debuginfo_type_name(cx, union_type, false);\n+    let union_llvm_type = type_of::in_memory_type_of(cx, union_type);\n+\n+    let (union_def_id, variant, substs) = match union_type.sty {\n+        ty::TyUnion(def, substs) => (def.did, def.struct_variant(), substs),\n+        _ => bug!(\"prepare_union_metadata on a non-union\")\n+    };\n+\n+    let (containing_scope, _) = get_namespace_and_span_for_item(cx, union_def_id);\n+\n+    let union_metadata_stub = create_union_stub(cx,\n+                                                union_llvm_type,\n+                                                &union_name,\n+                                                unique_type_id,\n+                                                containing_scope);\n+\n+    create_and_register_recursive_type_forward_declaration(\n+        cx,\n+        union_type,\n+        unique_type_id,\n+        union_metadata_stub,\n+        union_llvm_type,\n+        UnionMDF(UnionMemberDescriptionFactory {\n+            variant: variant,\n+            substs: substs,\n+            span: span,\n+        })\n+    )\n+}\n \n //=-----------------------------------------------------------------------------\n // Enums\n@@ -1798,6 +1864,42 @@ fn create_struct_stub(cx: &CrateContext,\n     return metadata_stub;\n }\n \n+fn create_union_stub(cx: &CrateContext,\n+                     union_llvm_type: Type,\n+                     union_type_name: &str,\n+                     unique_type_id: UniqueTypeId,\n+                     containing_scope: DIScope)\n+                   -> DICompositeType {\n+    let (union_size, union_align) = size_and_align_of(cx, union_llvm_type);\n+\n+    let unique_type_id_str = debug_context(cx).type_map\n+                                              .borrow()\n+                                              .get_unique_type_id_as_string(unique_type_id);\n+    let name = CString::new(union_type_name).unwrap();\n+    let unique_type_id = CString::new(unique_type_id_str.as_bytes()).unwrap();\n+    let metadata_stub = unsafe {\n+        // LLVMRustDIBuilderCreateUnionType() wants an empty array. A null\n+        // pointer will lead to hard to trace and debug LLVM assertions\n+        // later on in llvm/lib/IR/Value.cpp.\n+        let empty_array = create_DIArray(DIB(cx), &[]);\n+\n+        llvm::LLVMRustDIBuilderCreateUnionType(\n+            DIB(cx),\n+            containing_scope,\n+            name.as_ptr(),\n+            unknown_file_metadata(cx),\n+            UNKNOWN_LINE_NUMBER,\n+            bytes_to_bits(union_size),\n+            bytes_to_bits(union_align),\n+            0, // Flags\n+            empty_array,\n+            0, // RuntimeLang\n+            unique_type_id.as_ptr())\n+    };\n+\n+    return metadata_stub;\n+}\n+\n /// Creates debug information for the given global variable.\n ///\n /// Adds the created metadata nodes directly to the crate's IR."}, {"sha": "11ee5031ca771ba9c28e9ea196ed192a5c8d6cc8", "filename": "src/test/debuginfo/union-smoke.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/079c390d5089735b5eaa8b06ddb3beedcddbee7d/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079c390d5089735b5eaa8b06ddb3beedcddbee7d/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs?ref=079c390d5089735b5eaa8b06ddb3beedcddbee7d", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print u\n+// gdb-check:$1 = {a = 11 '\\v', b = 11}\n+// gdb-command:print union_smoke::SU\n+// gdb-check:$2 = {a = 10 '\\n', b = 10}\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print a\n+// lldb-check:[...]$0 = {a = 11 '\\v', b = 11}\n+// lldb-command:print union_smoke::SU\n+// lldb-check:[...]$1 = {a = 10 '\\n', b = 10}\n+\n+#![allow(unused)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: u8,\n+    b: u64,\n+}\n+\n+static SU: U = U { a: 10 };\n+\n+fn main() {\n+    let u = U { b: 11 };\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}"}]}