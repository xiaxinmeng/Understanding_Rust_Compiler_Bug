{"sha": "94c63d280246971983cad4fa6ce2d333e3ba9f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzYzZDI4MDI0Njk3MTk4M2NhZDRmYTZjZTJkMzMzZTNiYTlmMDI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-19T14:56:28Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-19T14:56:28Z"}, "message": "Change to use Expansion::file_id and reordering", "tree": {"sha": "af2c90f5243f91f4526da10b21ef1212da041663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2c90f5243f91f4526da10b21ef1212da041663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c63d280246971983cad4fa6ce2d333e3ba9f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c63d280246971983cad4fa6ce2d333e3ba9f02", "html_url": "https://github.com/rust-lang/rust/commit/94c63d280246971983cad4fa6ce2d333e3ba9f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c63d280246971983cad4fa6ce2d333e3ba9f02/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8010b42b21a59e4bb1e025155b8133ae52d3cf45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8010b42b21a59e4bb1e025155b8133ae52d3cf45", "html_url": "https://github.com/rust-lang/rust/commit/8010b42b21a59e4bb1e025155b8133ae52d3cf45"}], "stats": {"total": 86, "additions": 40, "deletions": 46}, "files": [{"sha": "5d3196c2a2e1d0850535f4c10e404c864f010cde", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c63d280246971983cad4fa6ce2d333e3ba9f02/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c63d280246971983cad4fa6ce2d333e3ba9f02/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=94c63d280246971983cad4fa6ce2d333e3ba9f02", "patch": "@@ -140,12 +140,7 @@ impl Expansion {\n         exp_info.map_token_down(token)\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> Source<AstId<ast::MacroCall>> {\n-        let loc = db.lookup_intern_macro(self.macro_call_id);\n-        Source::new(self.file_id(), loc.ast_id)\n-    }\n-\n-    fn file_id(&self) -> HirFileId {\n+    pub fn file_id(&self) -> HirFileId {\n         self.macro_call_id.as_file(MacroFileKind::Items)\n     }\n }"}, {"sha": "bd557d455054ba22e0a5821313deea97af3868c7", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/94c63d280246971983cad4fa6ce2d333e3ba9f02/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c63d280246971983cad4fa6ce2d333e3ba9f02/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=94c63d280246971983cad4fa6ce2d333e3ba9f02", "patch": "@@ -11,33 +11,20 @@ use ra_syntax::{\n     AstNode, NodeOrToken, SyntaxKind, SyntaxNode, WalkEvent,\n };\n \n-fn insert_whitespaces(syn: SyntaxNode) -> String {\n-    let mut res = String::new();\n-\n-    let mut token_iter = syn\n-        .preorder_with_tokens()\n-        .filter_map(|event| {\n-            if let WalkEvent::Enter(NodeOrToken::Token(token)) = event {\n-                Some(token)\n-            } else {\n-                None\n-            }\n-        })\n-        .peekable();\n+pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<(String, String)> {\n+    let parse = db.parse(position.file_id);\n+    let file = parse.tree();\n+    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)?;\n+    let mac = name_ref.syntax().ancestors().find_map(ast::MacroCall::cast)?;\n \n-    while let Some(token) = token_iter.next() {\n-        res += &token.text().to_string();\n-        if token.kind().is_keyword()\n-            || token.kind().is_literal()\n-            || token.kind() == SyntaxKind::IDENT\n-        {\n-            if !token_iter.peek().map(|it| it.kind().is_punct()).unwrap_or(false) {\n-                res += \" \";\n-            }\n-        }\n-    }\n+    let source = hir::Source::new(position.file_id.into(), mac.syntax());\n+    let expanded = expand_macro_recur(db, source, &mac)?;\n \n-    res\n+    // FIXME:\n+    // macro expansion may lose all white space information\n+    // But we hope someday we can use ra_fmt for that\n+    let res = insert_whitespaces(expanded);\n+    Some((name_ref.text().to_string(), res))\n }\n \n fn expand_macro_recur(\n@@ -47,14 +34,14 @@ fn expand_macro_recur(\n ) -> Option<SyntaxNode> {\n     let analyzer = hir::SourceAnalyzer::new(db, source, None);\n     let expansion = analyzer.expand(db, &macro_call)?;\n-    let new_source = expansion.source(db);\n-    let expanded: SyntaxNode = db.parse_or_expand(new_source.file_id)?;\n+    let macro_file_id = expansion.file_id();\n+    let expanded: SyntaxNode = db.parse_or_expand(macro_file_id)?;\n \n     let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n     let mut replaces = FxHashMap::default();\n \n     for child in children.into_iter() {\n-        let source = new_source.with_ast(source.ast);\n+        let source = hir::Source::new(macro_file_id, source.ast);\n         let new_node = expand_macro_recur(db, source, &child)?;\n \n         replaces.insert(child.syntax().clone().into(), new_node.into());\n@@ -63,21 +50,33 @@ fn expand_macro_recur(\n     Some(replace_descendants(&expanded, &replaces))\n }\n \n-pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<(String, String)> {\n-    let parse = db.parse(position.file_id);\n-    let file = parse.tree();\n-    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)?;\n-    let mac = name_ref.syntax().ancestors().find_map(ast::MacroCall::cast)?;\n+fn insert_whitespaces(syn: SyntaxNode) -> String {\n+    let mut res = String::new();\n \n-    let source = hir::Source::new(position.file_id.into(), mac.syntax());\n+    let mut token_iter = syn\n+        .preorder_with_tokens()\n+        .filter_map(|event| {\n+            if let WalkEvent::Enter(NodeOrToken::Token(token)) = event {\n+                Some(token)\n+            } else {\n+                None\n+            }\n+        })\n+        .peekable();\n \n-    let expanded = expand_macro_recur(db, source, &mac)?;\n+    while let Some(token) = token_iter.next() {\n+        res += &token.text().to_string();\n+        if token.kind().is_keyword()\n+            || token.kind().is_literal()\n+            || token.kind() == SyntaxKind::IDENT\n+        {\n+            if !token_iter.peek().map(|it| it.kind().is_punct()).unwrap_or(false) {\n+                res += \" \";\n+            }\n+        }\n+    }\n \n-    // FIXME:\n-    // macro expansion may lose all white space information\n-    // But we hope someday we can use ra_fmt for that\n-    let res = insert_whitespaces(expanded);\n-    Some((name_ref.text().to_string(), res))\n+    res\n }\n \n #[cfg(test)]"}]}