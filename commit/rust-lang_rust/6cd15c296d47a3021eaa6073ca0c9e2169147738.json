{"sha": "6cd15c296d47a3021eaa6073ca0c9e2169147738", "node_id": "C_kwDOAAsO6NoAKDZjZDE1YzI5NmQ0N2EzMDIxZWFhNjA3M2NhMGM5ZTIxNjkxNDc3Mzg", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T13:40:49Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T13:40:49Z"}, "message": "wip", "tree": {"sha": "f2650202e91cae873f2f1ccdebb9962333c5c6b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2650202e91cae873f2f1ccdebb9962333c5c6b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cd15c296d47a3021eaa6073ca0c9e2169147738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd15c296d47a3021eaa6073ca0c9e2169147738", "html_url": "https://github.com/rust-lang/rust/commit/6cd15c296d47a3021eaa6073ca0c9e2169147738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cd15c296d47a3021eaa6073ca0c9e2169147738/comments", "author": null, "committer": null, "parents": [{"sha": "8d3ac328ee3f60c7e06de4907a29b1aca62b35b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3ac328ee3f60c7e06de4907a29b1aca62b35b4", "html_url": "https://github.com/rust-lang/rust/commit/8d3ac328ee3f60c7e06de4907a29b1aca62b35b4"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "76f694aa51221dd1499afea6d222724f6863d267", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6cd15c296d47a3021eaa6073ca0c9e2169147738/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cd15c296d47a3021eaa6073ca0c9e2169147738/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=6cd15c296d47a3021eaa6073ca0c9e2169147738", "patch": "@@ -12,7 +12,7 @@ use ide_db::{\n     RootDatabase,\n };\n use itertools::Itertools;\n-use stdx::{always, never};\n+use stdx::never;\n use syntax::{ast, AstNode, SyntaxNode};\n \n use text_edit::TextEdit;\n@@ -33,17 +33,35 @@ pub(crate) fn prepare_rename(\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n \n-    let mut defs = find_definitions(&sema, syntax, position)?;\n-\n-    // TODO:\n-    // - `find_definitions` is implemented so that it returns a non-empty vec\n-    //   in the `Ok` case. But that's not expressed by the type signature, hence `unwrap()`\n-    //   here which ... wart.\n-    // - is \"just take the first `name_like`\" correct? If not, what do?\n-    let (name_like, _def) = defs.next().unwrap();\n-    let frange = sema.original_range(name_like.syntax());\n-    always!(frange.range.contains_inclusive(position.offset) && frange.file_id == position.file_id);\n-    Ok(RangeInfo::new(frange.range, ()))\n+    let res = find_definitions(&sema, syntax, position)?\n+        .map(|(name_like, def)| {\n+            // ensure all ranges are valid\n+\n+            if def.range_for_rename(&sema).is_none() {\n+                bail!(\"No references found at position\")\n+            }\n+            let frange = sema.original_range(name_like.syntax());\n+            if frange.range.contains_inclusive(position.offset)\n+                && frange.file_id == position.file_id\n+            {\n+                Ok(frange.range)\n+            } else {\n+                bail!(\"invalid text range\")\n+            }\n+        })\n+        .reduce(|acc, cur| match acc {\n+            // ensure all ranges are the same\n+            Ok(acc_inner) if cur.is_ok() && acc_inner == cur.unwrap() => acc,\n+            Err(e) => Err(e),\n+            _ => bail!(\"inconsistent text range\"),\n+        });\n+\n+    match res {\n+        // ensure at least one definition was found\n+        // TODO this duplicates work done at the end of `find_definitions`\n+        Some(res) => res.map(|range| RangeInfo::new(range, ())),\n+        None => bail!(\"No references found at position\"),\n+    }\n }\n \n // Feature: Rename"}]}