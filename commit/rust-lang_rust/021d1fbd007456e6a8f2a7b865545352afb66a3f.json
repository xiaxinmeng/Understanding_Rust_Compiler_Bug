{"sha": "021d1fbd007456e6a8f2a7b865545352afb66a3f", "node_id": "C_kwDOAAsO6NoAKDAyMWQxZmJkMDA3NDU2ZTZhOGYyYTdiODY1NTQ1MzUyYWZiNjZhM2Y", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-07T02:57:32Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T20:23:14Z"}, "message": "Clean up rustdoc startup.\n\nrustc's startup has several layers, including:\n- `interface::run_compiler` passes a closure, `f`, to\n  `run_in_thread_pool_with_globals`, which creates a thread pool, sets\n  up session globals, and passes `f` to `create_compiler_and_run`.\n- `create_compiler_and_run` creates a `Session`, a `Compiler`, sets the\n  source map, and calls `f`.\n\nrustdoc is a bit different.\n- `main_args` calls `main_options` via\n  `run_in_thread_pool_with_globals`, which (again) creates a thread pool\n  (hardcoded to a single thread!) and sets up session globals.\n- `main_options` has four different paths.\n  - The second one calls `interface::run_compiler`, which redoes the\n    `run_in_thread_pool_with_globals`! This is bad.\n  - The fourth one calls `interface::create_compiler_and_run`, which is\n    reasonable.\n  - The first and third ones don't do anything of note involving the\n    above functions, except for some symbol interning which requires\n    session globals.\n\nIn other words, rustdoc calls into `rustc_interface` at three different\nlevels. It's a bit confused, and feels like code where functionality has\nbeen added by different people at different times without fully\nunderstanding how the globally accessible stuff is set up.\n\nThis commit tidies things up. It removes the\n`run_in_thread_pool_with_globals` call in `main_args`, and adjust the\nfour paths in `main_options` as follows.\n- `markdown::test` calls `test::test_main`, which provides its own\n  parallelism and so doesn't need a thread pool. It had one small use of\n  symbol interning, which required session globals, but the commit\n  removes this.\n- `doctest::run` already calls `interface::run_compiler`, so it doesn't\n  need further adjustment.\n- `markdown::render` is simple but needs session globals for interning\n  (which can't easily be removed), so it's now wrapped in\n  `create_session_globals_then`.\n- The fourth path now uses `interface::run_compiler`, which is\n  equivalent to the old `run_in_thread_pool_with_globals` +\n  `create_compiler_and_run` pairing.", "tree": {"sha": "b7e0b61ad7f823a692e0106b4bad7395e0d5d199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e0b61ad7f823a692e0106b4bad7395e0d5d199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021d1fbd007456e6a8f2a7b865545352afb66a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021d1fbd007456e6a8f2a7b865545352afb66a3f", "html_url": "https://github.com/rust-lang/rust/commit/021d1fbd007456e6a8f2a7b865545352afb66a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021d1fbd007456e6a8f2a7b865545352afb66a3f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24a020e6d926dffe6b472fc647978f92269504e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24a020e6d926dffe6b472fc647978f92269504e", "html_url": "https://github.com/rust-lang/rust/commit/a24a020e6d926dffe6b472fc647978f92269504e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "58f02e3da557f5bdb8703efce585fe6fc1d99443", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=021d1fbd007456e6a8f2a7b865545352afb66a3f", "patch": "@@ -18,7 +18,6 @@ use rustc_session::{lint, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n-use rustc_span::Symbol;\n use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n use rustc_target::spec::TargetTriple;\n use tempfile::Builder as TempFileBuilder;\n@@ -124,7 +123,7 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n                     let opts = scrape_test_config(crate_attrs);\n                     let enable_per_target_ignores = options.enable_per_target_ignores;\n                     let mut collector = Collector::new(\n-                        tcx.crate_name(LOCAL_CRATE),\n+                        tcx.crate_name(LOCAL_CRATE).to_string(),\n                         options,\n                         false,\n                         opts,\n@@ -908,7 +907,7 @@ pub(crate) struct Collector {\n     rustdoc_options: RustdocOptions,\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n-    crate_name: Symbol,\n+    crate_name: String,\n     opts: GlobalTestOptions,\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n@@ -920,7 +919,7 @@ pub(crate) struct Collector {\n \n impl Collector {\n     pub(crate) fn new(\n-        crate_name: Symbol,\n+        crate_name: String,\n         rustdoc_options: RustdocOptions,\n         use_headers: bool,\n         opts: GlobalTestOptions,\n@@ -983,7 +982,7 @@ impl Tester for Collector {\n     fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n-        let crate_name = self.crate_name.to_string();\n+        let crate_name = self.crate_name.clone();\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.rustdoc_options.edition);\n         let rustdoc_options = self.rustdoc_options.clone();"}, {"sha": "ce6f7e817c6208fea1cf2bd22329a76c413cdbc9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=021d1fbd007456e6a8f2a7b865545352afb66a3f", "patch": "@@ -700,11 +700,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n             };\n         }\n     };\n-    rustc_interface::util::run_in_thread_pool_with_globals(\n-        options.edition,\n-        1, // this runs single-threaded, even in a parallel compiler\n-        move || main_options(options),\n-    )\n+    main_options(options)\n }\n \n fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainResult {\n@@ -749,9 +745,12 @@ fn main_options(options: config::Options) -> MainResult {\n         (true, true) => return wrap_return(&diag, markdown::test(options)),\n         (true, false) => return doctest::run(options),\n         (false, true) => {\n+            // Session globals are required for symbol interning.\n             return wrap_return(\n                 &diag,\n-                markdown::render(&options.input, options.render_options, options.edition),\n+                rustc_span::create_session_globals_then(options.edition, || {\n+                    markdown::render(&options.input, options.render_options, options.edition)\n+                }),\n             );\n         }\n         (false, false) => {}\n@@ -777,9 +776,10 @@ fn main_options(options: config::Options) -> MainResult {\n     let render_options = options.render_options.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n     let document_private = options.render_options.document_private;\n+\n     let config = core::create_config(options);\n \n-    interface::create_compiler_and_run(config, |compiler| {\n+    interface::run_compiler(config, |compiler| {\n         let sess = compiler.session();\n \n         if sess.opts.describe_lints {"}, {"sha": "eb64ac455dc4cfc6236ae30d81e2eec6d42e3b2b", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021d1fbd007456e6a8f2a7b865545352afb66a3f/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=021d1fbd007456e6a8f2a7b865545352afb66a3f", "patch": "@@ -5,7 +5,6 @@ use std::path::Path;\n \n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_span::Symbol;\n \n use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, GlobalTestOptions};\n@@ -36,6 +35,8 @@ fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n \n /// Render `input` (e.g., \"foo.md\") into an HTML file in `output`\n /// (e.g., output = \"bar\" => \"bar/foo.html\").\n+///\n+/// Requires session globals to be available, for symbol interning.\n pub(crate) fn render<P: AsRef<Path>>(\n     input: P,\n     options: RenderOptions,\n@@ -133,7 +134,7 @@ pub(crate) fn test(options: Options) -> Result<(), String> {\n     let mut opts = GlobalTestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(\n-        Symbol::intern(&options.input.display().to_string()),\n+        options.input.display().to_string(),\n         options.clone(),\n         true,\n         opts,"}]}