{"sha": "36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "node_id": "C_kwDOAAsO6NoAKDM2YTM5NmNlNTEzOTFmZjZiMGM0MTg5OGE0YzIxZmM2ZDMwM2M0YTQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-27T03:06:13Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-29T01:12:10Z"}, "message": "macros: add helper functions for invalid attrs\n\nRemove some duplicated code between both diagnostic derives by\nintroducing helper functions for reporting an error in case of a invalid\nattribute.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "f11fa973b1dd598c5cec2f1930b626bb55811e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11fa973b1dd598c5cec2f1930b626bb55811e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "html_url": "https://github.com/rust-lang/rust/commit/36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "071f07274b3d0b2c0806e0a904b71e51da1318de", "url": "https://api.github.com/repos/rust-lang/rust/commits/071f07274b3d0b2c0806e0a904b71e51da1318de", "html_url": "https://github.com/rust-lang/rust/commit/071f07274b3d0b2c0806e0a904b71e51da1318de"}], "stats": {"total": 516, "additions": 225, "deletions": 291}, "files": [{"sha": "2336186dc715305952a2885d99bf5e6063373803", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 39, "deletions": 131, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -1,6 +1,9 @@\n #![deny(unused_must_use)]\n \n-use crate::diagnostics::error::{span_err, throw_span_err, SessionDiagnosticDeriveError};\n+use crate::diagnostics::error::{\n+    invalid_nested_attr, span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err,\n+    SessionDiagnosticDeriveError,\n+};\n use crate::diagnostics::utils::{\n     option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, FieldInfo, HasFieldMap,\n };\n@@ -292,39 +295,24 @@ impl SessionDiagnosticDeriveBuilder {\n         }\n \n         let nested = match meta {\n-            Meta::List(MetaList { nested, .. }) => nested,\n-            Meta::Path(..) => throw_span_err!(\n-                span,\n-                &format!(\"`#[{}]` is not a valid `SessionDiagnostic` struct attribute\", name)\n-            ),\n-            Meta::NameValue(..) => throw_span_err!(\n-                span,\n-                &format!(\"`#[{} = ...]` is not a valid `SessionDiagnostic` struct attribute\", name)\n-            ),\n+            Meta::List(MetaList { ref nested, .. }) => nested,\n+            _ => throw_invalid_attr!(attr, &meta),\n         };\n \n         let kind = match name {\n             \"error\" => SessionDiagnosticKind::Error,\n             \"warning\" => SessionDiagnosticKind::Warn,\n-            other => throw_span_err!(\n-                span,\n-                &format!(\"`#[{}(...)]` is not a valid `SessionDiagnostic` struct attribute\", other)\n-            ),\n+            _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\"only `error` and `warning` are valid attributes\")\n+            }),\n         };\n         self.set_kind_once(kind, span)?;\n \n         let mut tokens = Vec::new();\n-        for attr in nested {\n-            let span = attr.span().unwrap();\n-            let meta = match attr {\n+        for nested_attr in nested {\n+            let meta = match nested_attr {\n                 syn::NestedMeta::Meta(meta) => meta,\n-                syn::NestedMeta::Lit(_) => throw_span_err!(\n-                    span,\n-                    &format!(\n-                        \"`#[{}(\\\"...\\\")]` is not a valid `SessionDiagnostic` struct attribute\",\n-                        name\n-                    )\n-                ),\n+                _ => throw_invalid_nested_attr!(attr, &nested_attr),\n             };\n \n             let path = meta.path();\n@@ -340,49 +328,12 @@ impl SessionDiagnosticDeriveBuilder {\n                         \"code\" => {\n                             tokens.push(self.set_code_once(s.value(), s.span().unwrap()));\n                         }\n-                        other => {\n-                            let diag = span_err(\n-                                span,\n-                                &format!(\n-                                    \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` struct attribute\",\n-                                    name, other\n-                                ),\n-                            );\n-                            diag.emit();\n-                        }\n+                        _ => invalid_nested_attr(attr, &nested_attr)\n+                            .help(\"only `slug` and `code` are valid nested attributes\")\n+                            .emit(),\n                     }\n                 }\n-                Meta::NameValue(..) => {\n-                    span_err(\n-                        span,\n-                        &format!(\n-                            \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` struct attribute\",\n-                            name, nested_name\n-                        ),\n-                    )\n-                    .help(\"value must be a string\")\n-                    .emit();\n-                }\n-                Meta::Path(..) => {\n-                    span_err(\n-                        span,\n-                        &format!(\n-                            \"`#[{}({})]` is not a valid `SessionDiagnostic` struct attribute\",\n-                            name, nested_name\n-                        ),\n-                    )\n-                    .emit();\n-                }\n-                Meta::List(..) => {\n-                    span_err(\n-                        span,\n-                        &format!(\n-                            \"`#[{}({}(...))]` is not a valid `SessionDiagnostic` struct attribute\",\n-                            name, nested_name\n-                        ),\n-                    )\n-                    .emit();\n-                }\n+                _ => invalid_nested_attr(attr, &nested_attr).emit(),\n             }\n         }\n \n@@ -478,7 +429,6 @@ impl SessionDiagnosticDeriveBuilder {\n         info: FieldInfo<'_>,\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let diag = &self.diag;\n-        let span = attr.span().unwrap();\n         let field_binding = &info.binding.binding;\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -502,66 +452,46 @@ impl SessionDiagnosticDeriveBuilder {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n                     Ok(self.add_subdiagnostic(field_binding, name, name))\n                 }\n-                other => throw_span_err!(\n-                    span,\n-                    &format!(\"`#[{}]` is not a valid `SessionDiagnostic` field attribute\", other)\n-                ),\n+                _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                    diag\n+                        .help(\"only `skip_arg`, `primary_span`, `label`, `note` and `help` are valid field attributes\")\n+                }),\n             },\n-            Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => match name {\n+            Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(ref s), .. }) => match name {\n                 \"label\" | \"note\" | \"help\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n                     Ok(self.add_subdiagnostic(field_binding, name, &s.value()))\n                 }\n-                other => throw_span_err!(\n-                    span,\n-                    &format!(\n-                        \"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\",\n-                        other\n-                    )\n-                ),\n+                _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                    diag.help(\"only `label`, `note` and `help` are valid field attributes\")\n+                }),\n             },\n-            Meta::NameValue(_) => throw_span_err!(\n-                span,\n-                &format!(\"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\", name),\n-                |diag| diag.help(\"value must be a string\")\n-            ),\n-            Meta::List(MetaList { path, nested, .. }) => {\n+            Meta::List(MetaList { ref path, ref nested, .. }) => {\n                 let name = path.segments.last().unwrap().ident.to_string();\n                 let name = name.as_ref();\n \n                 match name {\n                     \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\"\n                     | \"suggestion_verbose\" => (),\n-                    other => throw_span_err!(\n-                        span,\n-                        &format!(\n-                            \"`#[{}(...)]` is not a valid `SessionDiagnostic` field attribute\",\n-                            other\n-                        )\n-                    ),\n+                    _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                        diag\n+                            .help(\"only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\")\n+                    }),\n                 };\n \n                 let (span_, applicability) = self.span_and_applicability_of_ty(info)?;\n \n                 let mut msg = None;\n                 let mut code = None;\n \n-                for attr in nested {\n-                    let meta = match attr {\n-                        syn::NestedMeta::Meta(meta) => meta,\n-                        syn::NestedMeta::Lit(_) => throw_span_err!(\n-                            span,\n-                            &format!(\n-                                \"`#[{}(\\\"...\\\")]` is not a valid `SessionDiagnostic` field attribute\",\n-                                name\n-                            )\n-                        ),\n+                for nested_attr in nested {\n+                    let meta = match nested_attr {\n+                        syn::NestedMeta::Meta(ref meta) => meta,\n+                        syn::NestedMeta::Lit(_) => throw_invalid_nested_attr!(attr, &nested_attr),\n                     };\n \n-                    let span = meta.span().unwrap();\n                     let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n                     let nested_name = nested_name.as_str();\n-\n                     match meta {\n                         Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n                             match nested_name {\n@@ -572,37 +502,14 @@ impl SessionDiagnosticDeriveBuilder {\n                                     let formatted_str = self.build_format(&s.value(), s.span());\n                                     code = Some(formatted_str);\n                                 }\n-                                other => throw_span_err!(\n-                                    span,\n-                                    &format!(\n-                                        \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` field attribute\",\n-                                        name, other\n+                                _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                    diag.help(\n+                                        \"only `message` and `code` are valid field attributes\",\n                                     )\n-                                ),\n+                                }),\n                             }\n                         }\n-                        Meta::NameValue(..) => throw_span_err!(\n-                            span,\n-                            &format!(\n-                                \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` struct attribute\",\n-                                name, nested_name\n-                            ),\n-                            |diag| diag.help(\"value must be a string\")\n-                        ),\n-                        Meta::Path(..) => throw_span_err!(\n-                            span,\n-                            &format!(\n-                                \"`#[{}({})]` is not a valid `SessionDiagnostic` struct attribute\",\n-                                name, nested_name\n-                            )\n-                        ),\n-                        Meta::List(..) => throw_span_err!(\n-                            span,\n-                            &format!(\n-                                \"`#[{}({}(...))]` is not a valid `SessionDiagnostic` struct attribute\",\n-                                name, nested_name\n-                            )\n-                        ),\n+                        _ => throw_invalid_nested_attr!(attr, &nested_attr),\n                     }\n                 }\n \n@@ -619,6 +526,7 @@ impl SessionDiagnosticDeriveBuilder {\n \n                 Ok(quote! { #diag.#method(#span_, #msg, #code, #applicability); })\n             }\n+            _ => throw_invalid_attr!(attr, &meta),\n         }\n     }\n "}, {"sha": "fd1dc2f307397f1bcd220a7a67f7349781b08d84", "filename": "compiler/rustc_macros/src/diagnostics/error.rs", "status": "modified", "additions": 90, "deletions": 18, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -1,11 +1,11 @@\n use proc_macro::{Diagnostic, Level, MultiSpan};\n use proc_macro2::TokenStream;\n use quote::quote;\n-use syn;\n+use syn::{spanned::Spanned, Attribute, Error as SynError, Meta, NestedMeta};\n \n #[derive(Debug)]\n pub(crate) enum SessionDiagnosticDeriveError {\n-    SynError(syn::Error),\n+    SynError(SynError),\n     ErrorHandled,\n }\n \n@@ -24,37 +24,109 @@ impl SessionDiagnosticDeriveError {\n     }\n }\n \n+impl From<SynError> for SessionDiagnosticDeriveError {\n+    fn from(e: SynError) -> Self {\n+        SessionDiagnosticDeriveError::SynError(e)\n+    }\n+}\n+\n+/// Helper function for use with `throw_*` macros - constraints `$f` to an `impl FnOnce`.\n+pub(crate) fn _throw_err(\n+    diag: Diagnostic,\n+    f: impl FnOnce(Diagnostic) -> Diagnostic,\n+) -> SessionDiagnosticDeriveError {\n+    f(diag).emit();\n+    SessionDiagnosticDeriveError::ErrorHandled\n+}\n+\n+/// Returns an error diagnostic on span `span` with msg `msg`.\n pub(crate) fn span_err(span: impl MultiSpan, msg: &str) -> Diagnostic {\n     Diagnostic::spanned(span, Level::Error, msg)\n }\n \n-/// For methods that return a `Result<_, SessionDiagnosticDeriveError>`:\n-///\n /// Emit a diagnostic on span `$span` with msg `$msg` (optionally performing additional decoration\n /// using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n+///\n+/// For methods that return a `Result<_, SessionDiagnosticDeriveError>`:\n macro_rules! throw_span_err {\n     ($span:expr, $msg:expr) => {{ throw_span_err!($span, $msg, |diag| diag) }};\n     ($span:expr, $msg:expr, $f:expr) => {{\n-        return Err(crate::diagnostics::error::_throw_span_err($span, $msg, $f));\n+        let diag = span_err($span, $msg);\n+        return Err(crate::diagnostics::error::_throw_err(diag, $f));\n     }};\n }\n \n pub(crate) use throw_span_err;\n \n-/// When possible, prefer using `throw_span_err!` over using this function directly. This only\n-/// exists as a function to constrain `f` to an `impl FnOnce`.\n-pub(crate) fn _throw_span_err(\n-    span: impl MultiSpan,\n-    msg: &str,\n-    f: impl FnOnce(Diagnostic) -> Diagnostic,\n-) -> SessionDiagnosticDeriveError {\n-    let diag = span_err(span, msg);\n-    f(diag).emit();\n-    SessionDiagnosticDeriveError::ErrorHandled\n+/// Returns an error diagnostic for an invalid attribute.\n+pub(crate) fn invalid_attr(attr: &Attribute, meta: &Meta) -> Diagnostic {\n+    let span = attr.span().unwrap();\n+    let name = attr.path.segments.last().unwrap().ident.to_string();\n+    let name = name.as_str();\n+\n+    match meta {\n+        Meta::Path(_) => span_err(span, &format!(\"`#[{}]` is not a valid attribute\", name)),\n+        Meta::NameValue(_) => {\n+            span_err(span, &format!(\"`#[{} = ...]` is not a valid attribute\", name))\n+        }\n+        Meta::List(_) => span_err(span, &format!(\"`#[{}(...)]` is not a valid attribute\", name)),\n+    }\n }\n \n-impl From<syn::Error> for SessionDiagnosticDeriveError {\n-    fn from(e: syn::Error) -> Self {\n-        SessionDiagnosticDeriveError::SynError(e)\n+/// Emit a error diagnostic for an invalid attribute (optionally performing additional decoration\n+/// using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n+///\n+/// For methods that return a `Result<_, SessionDiagnosticDeriveError>`:\n+macro_rules! throw_invalid_attr {\n+    ($attr:expr, $meta:expr) => {{ throw_invalid_attr!($attr, $meta, |diag| diag) }};\n+    ($attr:expr, $meta:expr, $f:expr) => {{\n+        let diag = crate::diagnostics::error::invalid_attr($attr, $meta);\n+        return Err(crate::diagnostics::error::_throw_err(diag, $f));\n+    }};\n+}\n+\n+pub(crate) use throw_invalid_attr;\n+\n+/// Returns an error diagnostic for an invalid nested attribute.\n+pub(crate) fn invalid_nested_attr(attr: &Attribute, nested: &NestedMeta) -> Diagnostic {\n+    let name = attr.path.segments.last().unwrap().ident.to_string();\n+    let name = name.as_str();\n+\n+    let span = nested.span().unwrap();\n+    let meta = match nested {\n+        syn::NestedMeta::Meta(meta) => meta,\n+        syn::NestedMeta::Lit(_) => {\n+            return span_err(span, &format!(\"`#[{}(\\\"...\\\")]` is not a valid attribute\", name));\n+        }\n+    };\n+\n+    let span = meta.span().unwrap();\n+    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+    let nested_name = nested_name.as_str();\n+    match meta {\n+        Meta::NameValue(..) => span_err(\n+            span,\n+            &format!(\"`#[{}({} = ...)]` is not a valid attribute\", name, nested_name),\n+        ),\n+        Meta::Path(..) => {\n+            span_err(span, &format!(\"`#[{}({})]` is not a valid attribute\", name, nested_name))\n+        }\n+        Meta::List(..) => {\n+            span_err(span, &format!(\"`#[{}({}(...))]` is not a valid attribute\", name, nested_name))\n+        }\n     }\n }\n+\n+/// Emit a error diagnostic for an invalid nested attribute (optionally performing additional\n+/// decoration using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n+///\n+/// For methods that return a `Result<_, SessionDiagnosticDeriveError>`:\n+macro_rules! throw_invalid_nested_attr {\n+    ($attr:expr, $nested_attr:expr) => {{ throw_invalid_nested_attr!($attr, $nested_attr, |diag| diag) }};\n+    ($attr:expr, $nested_attr:expr, $f:expr) => {{\n+        let diag = crate::diagnostics::error::invalid_nested_attr($attr, $nested_attr);\n+        return Err(crate::diagnostics::error::_throw_err(diag, $f));\n+    }};\n+}\n+\n+pub(crate) use throw_invalid_nested_attr;"}, {"sha": "b644773b32bf38bd895b2765aa5b62c903fc00e9", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 20, "deletions": 80, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -1,6 +1,9 @@\n #![deny(unused_must_use)]\n \n-use crate::diagnostics::error::{span_err, throw_span_err, SessionDiagnosticDeriveError};\n+use crate::diagnostics::error::{\n+    span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err,\n+    SessionDiagnosticDeriveError,\n+};\n use crate::diagnostics::utils::{\n     option_inner_ty, report_error_if_not_applied_to_applicability,\n     report_error_if_not_applied_to_span, FieldInfo, HasFieldMap, SetOnce,\n@@ -253,25 +256,11 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n             let meta = attr.parse_meta()?;\n             let kind = match meta {\n-                Meta::Path(_) => throw_span_err!(\n-                    span,\n-                    &format!(\"`#[{}]` is not a valid `SessionSubdiagnostic` attribute\", name)\n-                ),\n-                Meta::NameValue(_) => throw_span_err!(\n-                    span,\n-                    &format!(\"`#[{} = ...]` is not a valid `SessionSubdiagnostic` attribute\", name)\n-                ),\n-                Meta::List(MetaList { nested, .. }) => {\n-                    for attr in nested {\n-                        let meta = match attr {\n-                            syn::NestedMeta::Meta(meta) => meta,\n-                            syn::NestedMeta::Lit(_) => throw_span_err!(\n-                                span,\n-                                &format!(\n-                                    \"`#[{}(\\\"...\\\")]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                    name\n-                                )\n-                            ),\n+                Meta::List(MetaList { ref nested, .. }) => {\n+                    for nested_attr in nested {\n+                        let meta = match nested_attr {\n+                            syn::NestedMeta::Meta(ref meta) => meta,\n+                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n                         };\n \n                         let span = meta.span().unwrap();\n@@ -296,51 +285,22 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                                         };\n                                         self.applicability.set_once((quote! { #value }, span));\n                                     }\n-                                    other => throw_span_err!(\n-                                        span,\n-                                        &format!(\n-                                            \"`#[{}({} = ...)]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                            name, other\n-                                        )\n-                                    ),\n+                                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                        diag.help(\"only `code`, `slug` and `applicability` are valid nested attributes\")\n+                                    }),\n                                 }\n                             }\n-                            Meta::NameValue(..) => throw_span_err!(\n-                                span,\n-                                &format!(\n-                                    \"`#[{}({} = ...)]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                    name, nested_name\n-                                ),\n-                                |diag| diag.help(\"value must be a string\")\n-                            ),\n-                            Meta::Path(..) => throw_span_err!(\n-                                span,\n-                                &format!(\n-                                    \"`#[{}({})]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                    name, nested_name\n-                                )\n-                            ),\n-                            Meta::List(..) => throw_span_err!(\n-                                span,\n-                                &format!(\n-                                    \"`#[{}({}(...))]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                    name, nested_name\n-                                )\n-                            ),\n+                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n                         }\n                     }\n \n                     let Ok(kind) = SubdiagnosticKind::from_str(name) else {\n-                        throw_span_err!(\n-                            span,\n-                            &format!(\n-                                \"`#[{}(...)]` is not a valid `SessionSubdiagnostic` attribute\",\n-                                name\n-                            )\n-                        );\n+                        throw_invalid_attr!(attr, &meta)\n                     };\n+\n                     kind\n                 }\n+                _ => throw_invalid_attr!(attr, &meta),\n             };\n \n             if matches!(\n@@ -408,31 +368,11 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                     \"skip_arg\" => {\n                         return Ok(quote! {});\n                     }\n-                    other => span_err(\n-                        span,\n-                        &format!(\n-                            \"`#[{}]` is not a valid `SessionSubdiagnostic` field attribute\",\n-                            other\n-                        ),\n-                    )\n-                    .emit(),\n+                    _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                        diag.help(\"only `primary_span`, `applicability` and `skip_arg` are valid field attributes\")\n+                    }),\n                 },\n-                Meta::NameValue(_) => span_err(\n-                    span,\n-                    &format!(\n-                        \"`#[{} = ...]` is not a valid `SessionSubdiagnostic` field attribute\",\n-                        name\n-                    ),\n-                )\n-                .emit(),\n-                Meta::List(_) => span_err(\n-                    span,\n-                    &format!(\n-                        \"`#[{}(...)]` is not a valid `SessionSubdiagnostic` field attribute\",\n-                        name\n-                    ),\n-                )\n-                .emit(),\n+                _ => throw_invalid_attr!(attr, &meta),\n             }\n         }\n "}, {"sha": "5f55492edf912f07afe4924c23b2c68d6837e5fd", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -44,47 +44,47 @@ enum SessionDiagnosticOnEnum {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n #[error = \"E0123\"]\n-//~^ ERROR `#[error = ...]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n #[derive(SessionDiagnostic)]\n #[nonsense(code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[nonsense(...)]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic kind not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n struct InvalidStructAttr {}\n \n #[derive(SessionDiagnostic)]\n #[error(\"E0123\")]\n-//~^ ERROR `#[error(\"...\")]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error(\"...\")]` is not a valid attribute\n //~^^ ERROR `slug` not specified\n struct InvalidLitNestedAttr {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense)]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error(nonsense)]` is not a valid attribute\n struct InvalidNestedStructAttr {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense(...))]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error(nonsense(...))]` is not a valid attribute\n struct InvalidNestedStructAttr1 {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense = ...)]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr2 {}\n \n #[derive(SessionDiagnostic)]\n #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n-//~^ ERROR `#[error(nonsense = ...)]` is not a valid `SessionDiagnostic` struct attribute\n+//~^ ERROR `#[error(nonsense = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr3 {}\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n-    //~^ ERROR `#[suggestion = ...]` is not a valid `SessionDiagnostic` field attribute\n+    //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n@@ -130,7 +130,7 @@ struct MessageWrongType {\n #[error(code = \"E0123\", slug = \"foo\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n-    //~^ ERROR `#[nonsense]` is not a valid `SessionDiagnostic` field attribute\n+    //~^ ERROR `#[nonsense]` is not a valid attribute\n     //~^^ ERROR cannot find attribute `nonsense` in this scope\n     foo: String,\n }\n@@ -215,15 +215,15 @@ struct SuggestWithoutCode {\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n-    //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid `SessionDiagnostic` field attribute\n+    //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n-    //~^ ERROR `#[suggestion(msg = ...)]` is not a valid `SessionDiagnostic` field attribute\n+    //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n@@ -276,7 +276,7 @@ struct SuggestWithDuplicateApplicabilityAndSpan {\n #[error(code = \"E0123\", slug = \"foo\")]\n struct WrongKindOfAnnotation {\n     #[label(\"bar\")]\n-    //~^ ERROR `#[label(...)]` is not a valid `SessionDiagnostic` field attribute\n+    //~^ ERROR `#[label(...)]` is not a valid attribute\n     z: Span,\n }\n "}, {"sha": "ef4950ba3afc9540c25b47fd7105573ec09261d5", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -9,17 +9,19 @@ LL | |     Bar,\n LL | | }\n    | |_^\n \n-error: `#[error = ...]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:46:1\n    |\n LL | #[error = \"E0123\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: `#[nonsense(...)]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[nonsense(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:51:1\n    |\n LL | #[nonsense(code = \"E0123\", slug = \"foo\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: only `error` and `warning` are valid attributes\n \n error: diagnostic kind not specified\n   --> $DIR/diagnostic-derive.rs:51:1\n@@ -33,7 +35,7 @@ LL | | struct InvalidStructAttr {}\n    |\n    = help: use the `#[error(...)]` attribute to create an error\n \n-error: `#[error(\"...\")]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error(\"...\")]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:58:9\n    |\n LL | #[error(\"E0123\")]\n@@ -50,37 +52,39 @@ LL | | struct InvalidLitNestedAttr {}\n    |\n    = help: use the `#[error(slug = \"...\")]` attribute to set this diagnostic's slug\n \n-error: `#[error(nonsense)]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error(nonsense)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:64:9\n    |\n LL | #[error(nonsense, code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^\n \n-error: `#[error(nonsense(...))]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error(nonsense(...))]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:69:9\n    |\n LL | #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^\n \n-error: `#[error(nonsense = ...)]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:74:9\n    |\n LL | #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: only `slug` and `code` are valid nested attributes\n \n-error: `#[error(nonsense = ...)]` is not a valid `SessionDiagnostic` struct attribute\n+error: `#[error(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:79:9\n    |\n LL | #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^\n-   |\n-   = help: value must be a string\n \n-error: `#[suggestion = ...]` is not a valid `SessionDiagnostic` field attribute\n+error: `#[suggestion = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:86:5\n    |\n LL |     #[suggestion = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: only `label`, `note` and `help` are valid field attributes\n \n error: `error` specified multiple times\n   --> $DIR/diagnostic-derive.rs:93:1\n@@ -153,11 +157,13 @@ error: the `#[primary_span]` attribute can only be applied to fields of type `Sp\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n-error: `#[nonsense]` is not a valid `SessionDiagnostic` field attribute\n+error: `#[nonsense]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:132:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n+   |\n+   = help: only `skip_arg`, `primary_span`, `label`, `note` and `help` are valid field attributes\n \n error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n   --> $DIR/diagnostic-derive.rs:149:5\n@@ -197,17 +203,21 @@ error: the `#[label = ...]` attribute can only be applied to fields of type `Spa\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: `#[suggestion(nonsense = ...)]` is not a valid `SessionDiagnostic` field attribute\n+error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:217:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = help: only `message` and `code` are valid field attributes\n \n-error: `#[suggestion(msg = ...)]` is not a valid `SessionDiagnostic` field attribute\n+error: `#[suggestion(msg = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:225:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n+   |\n+   = help: only `message` and `code` are valid field attributes\n \n error: wrong field type for suggestion\n   --> $DIR/diagnostic-derive.rs:247:5\n@@ -235,11 +245,13 @@ LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n-error: `#[label(...)]` is not a valid `SessionDiagnostic` field attribute\n+error: `#[label(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:278:5\n    |\n LL |     #[label(\"bar\")]\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\n \n error: `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n   --> $DIR/diagnostic-derive.rs:399:1"}, {"sha": "bb406c35c0eef7f2f74ae2c80f6c3498b857de8a", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -52,7 +52,7 @@ struct C {\n \n #[derive(SessionSubdiagnostic)]\n #[label]\n-//~^ ERROR `#[label]` is not a valid `SessionSubdiagnostic` attribute \n+//~^ ERROR `#[label]` is not a valid attribute\n struct D {\n     #[primary_span]\n     span: Span,\n@@ -61,7 +61,7 @@ struct D {\n \n #[derive(SessionSubdiagnostic)]\n #[foo]\n-//~^ ERROR `#[foo]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[foo]` is not a valid attribute\n //~^^ ERROR cannot find attribute `foo` in this scope\n struct E {\n     #[primary_span]\n@@ -71,7 +71,7 @@ struct E {\n \n #[derive(SessionSubdiagnostic)]\n #[label = \"...\"]\n-//~^ ERROR `#[label = ...]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label = ...]` is not a valid attribute\n struct F {\n     #[primary_span]\n     span: Span,\n@@ -80,7 +80,7 @@ struct F {\n \n #[derive(SessionSubdiagnostic)]\n #[label(bug = \"...\")]\n-//~^ ERROR `#[label(bug = ...)]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label(bug = ...)]` is not a valid attribute\n struct G {\n     #[primary_span]\n     span: Span,\n@@ -89,7 +89,7 @@ struct G {\n \n #[derive(SessionSubdiagnostic)]\n #[label(\"...\")]\n-//~^ ERROR `#[label(\"...\")]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label(\"...\")]` is not a valid attribute\n struct H {\n     #[primary_span]\n     span: Span,\n@@ -98,7 +98,7 @@ struct H {\n \n #[derive(SessionSubdiagnostic)]\n #[label(slug = 4)]\n-//~^ ERROR `#[label(slug = ...)]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label(slug = ...)]` is not a valid attribute\n struct J {\n     #[primary_span]\n     span: Span,\n@@ -107,7 +107,7 @@ struct J {\n \n #[derive(SessionSubdiagnostic)]\n #[label(slug(\"...\"))]\n-//~^ ERROR `#[label(slug(...))]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label(slug(...))]` is not a valid attribute\n struct K {\n     #[primary_span]\n     span: Span,\n@@ -116,7 +116,7 @@ struct K {\n \n #[derive(SessionSubdiagnostic)]\n #[label(slug)]\n-//~^ ERROR `#[label(slug)]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[label(slug)]` is not a valid attribute\n struct L {\n     #[primary_span]\n     span: Span,\n@@ -157,7 +157,7 @@ enum O {\n #[derive(SessionSubdiagnostic)]\n enum P {\n     #[bar]\n-//~^ ERROR `#[bar]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[bar]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n@@ -169,7 +169,7 @@ enum P {\n #[derive(SessionSubdiagnostic)]\n enum Q {\n     #[bar = \"...\"]\n-//~^ ERROR `#[bar = ...]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n@@ -181,7 +181,7 @@ enum Q {\n #[derive(SessionSubdiagnostic)]\n enum R {\n     #[bar = 4]\n-//~^ ERROR `#[bar = ...]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n@@ -193,7 +193,7 @@ enum R {\n #[derive(SessionSubdiagnostic)]\n enum S {\n     #[bar(\"...\")]\n-//~^ ERROR `#[bar(\"...\")]` is not a valid `SessionSubdiagnostic` attribute\n+//~^ ERROR `#[bar(\"...\")]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n@@ -254,7 +254,7 @@ struct X {\n     #[primary_span]\n     span: Span,\n     #[bar]\n-    //~^ ERROR `#[bar]` is not a valid `SessionSubdiagnostic` field attribute\n+    //~^ ERROR `#[bar]` is not a valid attribute\n     //~^^ ERROR cannot find attribute `bar` in this scope\n     bar: String,\n }\n@@ -265,7 +265,7 @@ struct Y {\n     #[primary_span]\n     span: Span,\n     #[bar = \"...\"]\n-    //~^ ERROR `#[bar = ...]` is not a valid `SessionSubdiagnostic` field attribute\n+    //~^ ERROR `#[bar = ...]` is not a valid attribute\n     //~^^ ERROR cannot find attribute `bar` in this scope\n     bar: String,\n }\n@@ -276,7 +276,7 @@ struct Z {\n     #[primary_span]\n     span: Span,\n     #[bar(\"...\")]\n-    //~^ ERROR `#[bar(...)]` is not a valid `SessionSubdiagnostic` field attribute\n+    //~^ ERROR `#[bar(...)]` is not a valid attribute\n     //~^^ ERROR cannot find attribute `bar` in this scope\n     bar: String,\n }"}, {"sha": "4984cc4b3186c3b8a6b0522835baf890b59ea40e", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a396ce51391ff6b0c41898a4c21fc6d303c4a4/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=36a396ce51391ff6b0c41898a4c21fc6d303c4a4", "patch": "@@ -8,51 +8,51 @@ LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: `#[label]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:54:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n-error: `#[foo]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[foo]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:63:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n-error: `#[label = ...]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label = ...]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:73:1\n    |\n LL | #[label = \"...\"]\n    | ^^^^^^^^^^^^^^^^\n \n-error: `#[label(bug = ...)]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label(bug = ...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:82:9\n    |\n LL | #[label(bug = \"...\")]\n    |         ^^^^^^^^^^^\n+   |\n+   = help: only `code`, `slug` and `applicability` are valid nested attributes\n \n-error: `#[label(\"...\")]` is not a valid `SessionSubdiagnostic` attribute\n-  --> $DIR/subdiagnostic-derive.rs:91:1\n+error: `#[label(\"...\")]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:91:9\n    |\n LL | #[label(\"...\")]\n-   | ^^^^^^^^^^^^^^^\n+   |         ^^^^^\n \n-error: `#[label(slug = ...)]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label(slug = ...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:100:9\n    |\n LL | #[label(slug = 4)]\n    |         ^^^^^^^^\n-   |\n-   = help: value must be a string\n \n-error: `#[label(slug(...))]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label(slug(...))]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:109:9\n    |\n LL | #[label(slug(\"...\"))]\n    |         ^^^^^^^^^^^\n \n-error: `#[label(slug)]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[label(slug)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:118:9\n    |\n LL | #[label(slug)]\n@@ -76,29 +76,29 @@ error: unsupported type attribute for subdiagnostic enum\n LL | #[foo]\n    | ^^^^^^\n \n-error: `#[bar]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[bar]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:159:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n-error: `#[bar = ...]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[bar = ...]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:171:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n-error: `#[bar = ...]` is not a valid `SessionSubdiagnostic` attribute\n+error: `#[bar = ...]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:183:5\n    |\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n-error: `#[bar(\"...\")]` is not a valid `SessionSubdiagnostic` attribute\n-  --> $DIR/subdiagnostic-derive.rs:195:5\n+error: `#[bar(\"...\")]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:195:11\n    |\n LL |     #[bar(\"...\")]\n-   |     ^^^^^^^^^^^^^\n+   |           ^^^^^\n \n error: `code` is not a valid nested attribute of a `label` attribute\n   --> $DIR/subdiagnostic-derive.rs:207:5\n@@ -136,19 +136,21 @@ error: `#[applicability]` is only valid on suggestions\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: `#[bar]` is not a valid `SessionSubdiagnostic` field attribute\n+error: `#[bar]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:256:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n+   |\n+   = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n-error: `#[bar = ...]` is not a valid `SessionSubdiagnostic` field attribute\n+error: `#[bar = ...]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:267:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n-error: `#[bar(...)]` is not a valid `SessionSubdiagnostic` field attribute\n+error: `#[bar(...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:278:5\n    |\n LL |     #[bar(\"...\")]"}]}