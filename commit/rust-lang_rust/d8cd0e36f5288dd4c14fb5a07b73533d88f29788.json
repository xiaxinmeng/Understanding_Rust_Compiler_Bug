{"sha": "d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4Y2QwZTM2ZjUyODhkZDRjMTRmYjVhMDdiNzM1MzNkODhmMjk3ODg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-05T13:01:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-11T14:21:20Z"}, "message": "Handle Chalk conversion for FnDef", "tree": {"sha": "818cd580c0ae1ee5e15a122a4c0203d12e35f383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/818cd580c0ae1ee5e15a122a4c0203d12e35f383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "html_url": "https://github.com/rust-lang/rust/commit/d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b68966bf0e0d5ae5c56e2da1d6def5e0ec0925", "url": "https://api.github.com/repos/rust-lang/rust/commits/58b68966bf0e0d5ae5c56e2da1d6def5e0ec0925", "html_url": "https://github.com/rust-lang/rust/commit/58b68966bf0e0d5ae5c56e2da1d6def5e0ec0925"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "2d831f0d859b08a428f18697ed0049cd89621e2b", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "patch": "@@ -9,4 +9,5 @@ test_utils::marks!(\n     glob_across_crates\n     std_prelude\n     match_ergonomics_ref\n+    trait_resolution_on_fn_type\n );"}, {"sha": "f0793bfb493c0c551076367ce884d8847f2ad08f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "patch": "@@ -2568,6 +2568,19 @@ fn test() { S2.into()<|>; }\n     assert_eq!(t, \"S1\");\n }\n \n+#[test]\n+fn method_resolution_encountering_fn_type() {\n+    covers!(trait_resolution_on_fn_type);\n+    type_at(\n+        r#\"\n+//- /main.rs\n+fn foo() {}\n+trait FnOnce { fn call(self); }\n+fn test() { foo.call()<|>; }\n+\"#,\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id);\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "7bb6a4f4add92ff4dddf6e6c9c9745f142b1d149", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8cd0e36f5288dd4c14fb5a07b73533d88f29788/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=d8cd0e36f5288dd4c14fb5a07b73533d88f29788", "patch": "@@ -6,12 +6,13 @@ use log::debug;\n use chalk_ir::{TypeId, ImplId, TypeKindId, ProjectionTy, Parameter, Identifier, cast::Cast, PlaceholderIndex, UniverseIndex, TypeName};\n use chalk_rust_ir::{AssociatedTyDatum, TraitDatum, StructDatum, ImplDatum};\n \n+use test_utils::tested_by;\n use ra_db::salsa::{InternId, InternKey};\n \n use crate::{\n     Trait, HasGenericParams, ImplBlock,\n     db::HirDatabase,\n-    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate}, generics::GenericDef,\n+    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate}, generics::GenericDef, ty::CallableDef,\n };\n use super::ChalkContext;\n \n@@ -261,7 +262,29 @@ where\n             }\n             TypeCtor::FnPtr { num_args } => (num_args as usize + 1, vec![], true),\n             TypeCtor::Tuple { cardinality } => (cardinality as usize, vec![], true),\n-            TypeCtor::FnDef(_) => unimplemented!(),\n+            TypeCtor::FnDef(callable) => {\n+                tested_by!(trait_resolution_on_fn_type);\n+                let krate = match callable {\n+                    CallableDef::Function(f) => f.module(self.db).krate(self.db),\n+                    CallableDef::Struct(s) => s.module(self.db).krate(self.db),\n+                    CallableDef::EnumVariant(v) => {\n+                        v.parent_enum(self.db).module(self.db).krate(self.db)\n+                    }\n+                };\n+                let generic_def: GenericDef = match callable {\n+                    CallableDef::Function(f) => f.into(),\n+                    CallableDef::Struct(s) => s.into(),\n+                    CallableDef::EnumVariant(v) => v.parent_enum(self.db).into(),\n+                };\n+                let generic_params = generic_def.generic_params(self.db);\n+                let bound_vars = Substs::bound_vars(&generic_params);\n+                let where_clauses = convert_where_clauses(self.db, generic_def, &bound_vars);\n+                (\n+                    generic_params.count_params_including_parent(),\n+                    where_clauses,\n+                    krate != Some(self.krate),\n+                )\n+            }\n             TypeCtor::Adt(adt) => {\n                 let generic_params = adt.generic_params(self.db);\n                 let bound_vars = Substs::bound_vars(&generic_params);"}]}