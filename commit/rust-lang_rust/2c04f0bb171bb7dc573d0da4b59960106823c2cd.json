{"sha": "2c04f0bb171bb7dc573d0da4b59960106823c2cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDRmMGJiMTcxYmI3ZGM1NzNkMGRhNGI1OTk2MDEwNjgyM2MyY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T01:14:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T01:14:31Z"}, "message": "Auto merge of #86527 - JohnTitor:rollup-cbu78g4, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #85054 (Revert SGX inline asm syntax)\n - #85182 (Move `available_concurrency` implementation to `sys`)\n - #86037 (Add `io::Cursor::{remaining, remaining_slice, is_empty}`)\n - #86114 (Reopen #79692 (Format symbols under shared frames))\n - #86297 (Allow to pass arguments to rustdoc-gui tool)\n - #86334 (Resolve type aliases to the type they point to in intra-doc links)\n - #86367 (Fix comment about rustc_inherit_overflow_checks in abs().)\n - #86381 (Add regression test for issue #39161)\n - #86387 (Remove `#[allow(unused_lifetimes)]` which is now unnecessary)\n - #86398 (Add regression test for issue #54685)\n - #86493 (Say \"this enum variant takes\"/\"this struct takes\" instead of \"this function takes\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "17cd6d646a69fe85d3b46de682002aa7e0cfbba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17cd6d646a69fe85d3b46de682002aa7e0cfbba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c04f0bb171bb7dc573d0da4b59960106823c2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c04f0bb171bb7dc573d0da4b59960106823c2cd", "html_url": "https://github.com/rust-lang/rust/commit/2c04f0bb171bb7dc573d0da4b59960106823c2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c04f0bb171bb7dc573d0da4b59960106823c2cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4573a4a879a8e1f773944a8859e4dcd136138af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4573a4a879a8e1f773944a8859e4dcd136138af8", "html_url": "https://github.com/rust-lang/rust/commit/4573a4a879a8e1f773944a8859e4dcd136138af8"}, {"sha": "4495ce75d975136173dbd4c139f00d1f508a6994", "url": "https://api.github.com/repos/rust-lang/rust/commits/4495ce75d975136173dbd4c139f00d1f508a6994", "html_url": "https://github.com/rust-lang/rust/commit/4495ce75d975136173dbd4c139f00d1f508a6994"}], "stats": {"total": 739, "additions": 535, "deletions": 204}, "files": [{"sha": "677ccb31454ea83795fcb9b6a5db57bc771d40b0", "filename": "compiler/rustc_data_structures/src/captures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/compiler%2Frustc_data_structures%2Fsrc%2Fcaptures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/compiler%2Frustc_data_structures%2Fsrc%2Fcaptures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fcaptures.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -3,8 +3,6 @@\n /// Basically a workaround; see [this comment] for details.\n ///\n /// [this comment]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n-// FIXME(eddyb) false positive, the lifetime parameter is \"phantom\" but needed.\n-#[allow(unused_lifetimes)]\n pub trait Captures<'a> {}\n \n impl<'a, T: ?Sized> Captures<'a> for T {}"}, {"sha": "f65cc429fbd48241fdb5423ee8fa47fde73a1d38", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -11,7 +11,7 @@ use crate::check::{\n use rustc_ast as ast;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n@@ -120,8 +120,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  error_code: &str,\n                                  c_variadic: bool,\n                                  sugg_unit: bool| {\n-            let (span, start_span, args) = match &expr.kind {\n-                hir::ExprKind::Call(hir::Expr { span, .. }, args) => (*span, *span, &args[..]),\n+            let (span, start_span, args, ctor_of) = match &expr.kind {\n+                hir::ExprKind::Call(\n+                    hir::Expr {\n+                        span,\n+                        kind:\n+                            hir::ExprKind::Path(hir::QPath::Resolved(\n+                                _,\n+                                hir::Path { res: Res::Def(DefKind::Ctor(of, _), _), .. },\n+                            )),\n+                        ..\n+                    },\n+                    args,\n+                ) => (*span, *span, &args[..], Some(of)),\n+                hir::ExprKind::Call(hir::Expr { span, .. }, args) => {\n+                    (*span, *span, &args[..], None)\n+                }\n                 hir::ExprKind::MethodCall(path_segment, span, args, _) => (\n                     *span,\n                     // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n@@ -137,6 +151,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })\n                         .unwrap_or(*span),\n                     &args[1..], // Skip the receiver.\n+                    None,       // methods are never ctors\n                 ),\n                 k => span_bug!(sp, \"checking argument types on a non-call: `{:?}`\", k),\n             };\n@@ -157,7 +172,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut err = tcx.sess.struct_span_err_with_code(\n                 span,\n                 &format!(\n-                    \"this function takes {}{} but {} {} supplied\",\n+                    \"this {} takes {}{} but {} {} supplied\",\n+                    match ctor_of {\n+                        Some(CtorOf::Struct) => \"struct\",\n+                        Some(CtorOf::Variant) => \"enum variant\",\n+                        None => \"function\",\n+                    },\n                     if c_variadic { \"at least \" } else { \"\" },\n                     potentially_plural_count(expected_count, \"argument\"),\n                     potentially_plural_count(arg_count, \"argument\"),"}, {"sha": "2e466106fe553960074c807334b6e920a218b2bd", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1772,9 +1772,9 @@ macro_rules! int_impl {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn abs(self) -> Self {\n-            // Note that the #[inline] above means that the overflow\n-            // semantics of the subtraction depend on the crate we're being\n-            // inlined into.\n+            // Note that the #[rustc_inherit_overflow_checks] and #[inline]\n+            // above mean that the overflow semantics of the subtraction\n+            // depend on the crate we're being called from.\n             if self.is_negative() {\n                 -self\n             } else {"}, {"sha": "f8884523cf446a6422b2d3985285667f6958e62e", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -399,12 +399,11 @@ impl fmt::Display for Backtrace {\n         let mut f = backtrace_rs::BacktraceFmt::new(fmt, style, &mut print_path);\n         f.add_context()?;\n         for frame in frames {\n-            let mut f = f.frame();\n             if frame.symbols.is_empty() {\n-                f.print_raw(frame.frame.ip(), None, None, None)?;\n+                f.frame().print_raw(frame.frame.ip(), None, None, None)?;\n             } else {\n                 for symbol in frame.symbols.iter() {\n-                    f.print_raw_with_column(\n+                    f.frame().print_raw_with_column(\n                         frame.frame.ip(),\n                         symbol.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)),\n                         symbol.filename.as_ref().map(|b| match b {"}, {"sha": "04f13cdeb88e353f629c282ddf8bc904bf3d684b", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -205,6 +205,88 @@ impl<T> Cursor<T> {\n     }\n }\n \n+impl<T> Cursor<T>\n+where\n+    T: AsRef<[u8]>,\n+{\n+    /// Returns the remaining length.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// assert_eq!(buff.remaining(), 5);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert_eq!(buff.remaining(), 3);\n+    ///\n+    /// buff.set_position(4);\n+    /// assert_eq!(buff.remaining(), 1);\n+    ///\n+    /// buff.set_position(6);\n+    /// assert_eq!(buff.remaining(), 0);\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"86369\")]\n+    pub fn remaining(&self) -> u64 {\n+        (self.inner.as_ref().len() as u64).checked_sub(self.pos).unwrap_or(0)\n+    }\n+\n+    /// Returns the remaining slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// assert_eq!(buff.remaining_slice(), &[1, 2, 3, 4, 5]);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert_eq!(buff.remaining_slice(), &[3, 4, 5]);\n+    ///\n+    /// buff.set_position(4);\n+    /// assert_eq!(buff.remaining_slice(), &[5]);\n+    ///\n+    /// buff.set_position(6);\n+    /// assert_eq!(buff.remaining_slice(), &[]);\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"86369\")]\n+    pub fn remaining_slice(&self) -> &[u8] {\n+        let len = self.pos.min(self.inner.as_ref().len() as u64);\n+        &self.inner.as_ref()[(len as usize)..]\n+    }\n+\n+    /// Returns `true` if the remaining slice is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert!(!buff.is_empty());\n+    ///\n+    /// buff.set_position(5);\n+    /// assert!(buff.is_empty());\n+    ///\n+    /// buff.set_position(10);\n+    /// assert!(buff.is_empty());\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"86369\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.pos >= self.inner.as_ref().len() as u64\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Clone for Cursor<T>\n where\n@@ -268,7 +350,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let n = Read::read(&mut self.fill_buf()?, buf)?;\n+        let n = Read::read(&mut self.remaining_slice(), buf)?;\n         self.pos += n as u64;\n         Ok(n)\n     }\n@@ -291,7 +373,7 @@ where\n \n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         let n = buf.len();\n-        Read::read_exact(&mut self.fill_buf()?, buf)?;\n+        Read::read_exact(&mut self.remaining_slice(), buf)?;\n         self.pos += n as u64;\n         Ok(())\n     }\n@@ -308,8 +390,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-        let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);\n-        Ok(&self.inner.as_ref()[(amt as usize)..])\n+        Ok(self.remaining_slice())\n     }\n     fn consume(&mut self, amt: usize) {\n         self.pos += amt as u64;"}, {"sha": "4ce482e23cbfb98e80f1d256b08994a7b69babe1", "filename": "library/std/src/os/fortanix_sgx/arch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -33,13 +33,13 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n \n         asm!(\n             // rbx is reserved by LLVM\n-            \"xchg {0}, rbx\",\n+            \"xchg %rbx, {0}\",\n             \"enclu\",\n-            \"mov rbx, {0}\",\n+            \"mov {0}, %rbx\",\n             inout(reg) request => _,\n             inlateout(\"eax\") ENCLU_EGETKEY => error,\n             in(\"rcx\") out.as_mut_ptr(),\n-            options(nostack),\n+            options(att_syntax, nostack),\n         );\n \n         match error {\n@@ -64,14 +64,14 @@ pub fn ereport(\n \n         asm!(\n             // rbx is reserved by LLVM\n-            \"xchg {0}, rbx\",\n+            \"xchg %rbx, {0}\",\n             \"enclu\",\n-            \"mov rbx, {0}\",\n+            \"mov {0}, %rbx\",\n             inout(reg) targetinfo => _,\n             in(\"eax\") ENCLU_EREPORT,\n             in(\"rcx\") reportdata,\n             in(\"rdx\") report.as_mut_ptr(),\n-            options(preserves_flags, nostack),\n+            options(att_syntax, preserves_flags, nostack),\n         );\n \n         report.assume_init()"}, {"sha": "6da79d19f5949cd410ddb2b350b61571cf25dc06", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,8 +1,10 @@\n #![allow(dead_code)]\n \n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::thread_local_dtor::run_dtors;\n use crate::time::Duration;\n@@ -95,6 +97,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "52e8bec937c79b917e9533a9d9ff758539dfc377", "filename": "library/std/src/sys/sgx/abi/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -36,9 +36,9 @@ pub fn image_base() -> u64 {\n     let base: u64;\n     unsafe {\n         asm!(\n-            \"lea {}, qword ptr [rip + IMAGE_BASE]\",\n+            \"lea IMAGE_BASE(%rip), {}\",\n             lateout(reg) base,\n-            options(nostack, preserves_flags, nomem, pure),\n+            options(att_syntax, nostack, preserves_flags, nomem, pure),\n         )\n     };\n     base"}, {"sha": "cbb8ba964018a687d7f07c76c5e5305f82faeaa1", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,6 +1,8 @@\n #![cfg_attr(test, allow(dead_code))] // why is this necessary?\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -135,6 +137,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "df2ba0a8bc8e6289af4ce55d83f3a17c58f4d419", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -2,6 +2,7 @@ use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ptr;\n use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n@@ -198,6 +199,88 @@ impl Drop for Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    cfg_if::cfg_if! {\n+        if #[cfg(any(\n+            target_os = \"android\",\n+            target_os = \"emscripten\",\n+            target_os = \"fuchsia\",\n+            target_os = \"ios\",\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"solaris\",\n+            target_os = \"illumos\",\n+        ))] {\n+            match unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) } {\n+                -1 => Err(io::Error::last_os_error()),\n+                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n+                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) }),\n+            }\n+        } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n+            use crate::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = crate::mem::size_of_val(&cpus);\n+\n+            unsafe {\n+                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            }\n+\n+            // Fallback approach in case of errors or no hardware threads.\n+            if cpus < 1 {\n+                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+                let res = unsafe {\n+                    libc::sysctl(\n+                        mib.as_mut_ptr(),\n+                        2,\n+                        &mut cpus as *mut _ as *mut _,\n+                        &mut cpus_size as *mut _ as *mut _,\n+                        ptr::null_mut(),\n+                        0,\n+                    )\n+                };\n+\n+                // Handle errors if any.\n+                if res == -1 {\n+                    return Err(io::Error::last_os_error());\n+                } else if cpus == 0 {\n+                    return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n+                }\n+            }\n+            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else if #[cfg(target_os = \"openbsd\")] {\n+            use crate::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = crate::mem::size_of_val(&cpus);\n+            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+\n+            let res = unsafe {\n+                libc::sysctl(\n+                    mib.as_mut_ptr(),\n+                    2,\n+                    &mut cpus as *mut _ as *mut _,\n+                    &mut cpus_size as *mut _ as *mut _,\n+                    ptr::null_mut(),\n+                    0,\n+                )\n+            };\n+\n+            // Handle errors if any.\n+            if res == -1 {\n+                return Err(io::Error::last_os_error());\n+            } else if cpus == 0 {\n+                return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n+            }\n+\n+            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else {\n+            // FIXME: implement on vxWorks, Redox, Haiku, l4re\n+            Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Getting the number of hardware threads is not supported on the target platform\"))\n+        }\n+    }\n+}\n+\n #[cfg(all(\n     not(target_os = \"linux\"),\n     not(target_os = \"freebsd\"),"}, {"sha": "dc75d4ee6725ce997761e7c4b38462ae17be7fd6", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,6 +1,7 @@\n use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::time::Duration;\n \n pub struct Thread(!);\n@@ -30,6 +31,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "9ec02bbec2644f53a6a4a6f721d113b1254661f4", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -3,6 +3,7 @@\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::sys::unsupported;\n use crate::time::Duration;\n \n@@ -63,6 +64,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "0971483510495bb33f586467689164dc331aec90", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,5 +1,7 @@\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::sys::unsupported;\n use crate::time::Duration;\n \n@@ -39,6 +41,10 @@ impl Thread {\n     pub fn join(self) {}\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "193c28c7673d71e956bced47ef00e65eff272ca7", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -13,6 +13,7 @@ use libc::{c_void, size_t, wchar_t};\n pub use self::EXCEPTION_DISPOSITION::*;\n pub use self::FILE_INFO_BY_HANDLE_CLASS::*;\n \n+pub type DWORD_PTR = ULONG_PTR;\n pub type DWORD = c_ulong;\n pub type NonZeroDWORD = NonZero_c_ulong;\n pub type HANDLE = LPVOID;\n@@ -53,6 +54,7 @@ pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n+pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n pub type LPWSABUF = *mut WSABUF;\n pub type LPWSAOVERLAPPED = *mut c_void;\n pub type LPWSAOVERLAPPED_COMPLETION_ROUTINE = *mut c_void;\n@@ -533,6 +535,21 @@ pub struct FILETIME {\n     pub dwHighDateTime: DWORD,\n }\n \n+#[repr(C)]\n+pub struct SYSTEM_INFO {\n+    pub wProcessorArchitecture: WORD,\n+    pub wReserved: WORD,\n+    pub dwPageSize: DWORD,\n+    pub lpMinimumApplicationAddress: LPVOID,\n+    pub lpMaximumApplicationAddress: LPVOID,\n+    pub dwActiveProcessorMask: DWORD_PTR,\n+    pub dwNumberOfProcessors: DWORD,\n+    pub dwProcessorType: DWORD,\n+    pub dwAllocationGranularity: DWORD,\n+    pub wProcessorLevel: WORD,\n+    pub wProcessorRevision: WORD,\n+}\n+\n #[repr(C)]\n pub struct OVERLAPPED {\n     pub Internal: *mut c_ulong,\n@@ -934,6 +951,7 @@ extern \"system\" {\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n+    pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n \n     pub fn CreateEventW(\n         lpEventAttributes: LPSECURITY_ATTRIBUTES,"}, {"sha": "ef7a9733fd880e19d8eff8383fa5fe7ae654e732", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,5 +1,6 @@\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::handle::Handle;\n@@ -98,6 +99,21 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    let res = unsafe {\n+        let mut sysinfo: c::SYSTEM_INFO = crate::mem::zeroed();\n+        c::GetSystemInfo(&mut sysinfo);\n+        sysinfo.dwNumberOfProcessors as usize\n+    };\n+    match res {\n+        0 => Err(io::Error::new_const(\n+            io::ErrorKind::NotFound,\n+            &\"The number of hardware threads is not known for the target platform\",\n+        )),\n+        cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus) }),\n+    }\n+}\n+\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub type Guard = !;"}, {"sha": "e8cdde880145935c8028a193abd738300ef8bab7", "filename": "library/std/src/thread/available_concurrency.rs", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/4573a4a879a8e1f773944a8859e4dcd136138af8/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573a4a879a8e1f773944a8859e4dcd136138af8/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs?ref=4573a4a879a8e1f773944a8859e4dcd136138af8", "patch": "@@ -1,156 +0,0 @@\n-use crate::io;\n-use crate::num::NonZeroUsize;\n-\n-/// Returns the number of hardware threads available to the program.\n-///\n-/// This value should be considered only a hint.\n-///\n-/// # Platform-specific behavior\n-///\n-/// If interpreted as the number of actual hardware threads, it may undercount on\n-/// Windows systems with more than 64 hardware threads. If interpreted as the\n-/// available concurrency for that process, it may overcount on Windows systems\n-/// when limited by a process wide affinity mask or job object limitations, and\n-/// it may overcount on Linux systems when limited by a process wide affinity\n-/// mask or affected by cgroups limits.\n-///\n-/// # Errors\n-///\n-/// This function will return an error in the following situations, but is not\n-/// limited to just these cases:\n-///\n-/// - If the number of hardware threads is not known for the target platform.\n-/// - The process lacks permissions to view the number of hardware threads\n-///   available.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![allow(dead_code)]\n-/// #![feature(available_concurrency)]\n-/// use std::thread;\n-///\n-/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n-/// ```\n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n-    available_concurrency_internal()\n-}\n-\n-cfg_if::cfg_if! {\n-    if #[cfg(windows)] {\n-        #[allow(nonstandard_style)]\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            #[repr(C)]\n-            struct SYSTEM_INFO {\n-                wProcessorArchitecture: u16,\n-                wReserved: u16,\n-                dwPageSize: u32,\n-                lpMinimumApplicationAddress: *mut u8,\n-                lpMaximumApplicationAddress: *mut u8,\n-                dwActiveProcessorMask: *mut u8,\n-                dwNumberOfProcessors: u32,\n-                dwProcessorType: u32,\n-                dwAllocationGranularity: u32,\n-                wProcessorLevel: u16,\n-                wProcessorRevision: u16,\n-            }\n-            extern \"system\" {\n-                fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n-            }\n-            let res = unsafe {\n-                let mut sysinfo = crate::mem::zeroed();\n-                GetSystemInfo(&mut sysinfo);\n-                sysinfo.dwNumberOfProcessors as usize\n-            };\n-            match res {\n-                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n-                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus) }),\n-            }\n-        }\n-    } else if #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-    ))] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            match unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) } {\n-                -1 => Err(io::Error::last_os_error()),\n-                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n-                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) }),\n-            }\n-        }\n-    } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            use crate::ptr;\n-\n-            let mut cpus: libc::c_uint = 0;\n-            let mut cpus_size = crate::mem::size_of_val(&cpus);\n-\n-            unsafe {\n-                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n-            }\n-\n-            // Fallback approach in case of errors or no hardware threads.\n-            if cpus < 1 {\n-                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-                let res = unsafe {\n-                    libc::sysctl(\n-                        mib.as_mut_ptr(),\n-                        2,\n-                        &mut cpus as *mut _ as *mut _,\n-                        &mut cpus_size as *mut _ as *mut _,\n-                        ptr::null_mut(),\n-                        0,\n-                    )\n-                };\n-\n-                // Handle errors if any.\n-                if res == -1 {\n-                    return Err(io::Error::last_os_error());\n-                } else if cpus == 0 {\n-                    return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n-                }\n-            }\n-            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n-        }\n-    } else if #[cfg(target_os = \"openbsd\")] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            use crate::ptr;\n-\n-            let mut cpus: libc::c_uint = 0;\n-            let mut cpus_size = crate::mem::size_of_val(&cpus);\n-            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-\n-            let res = unsafe {\n-                libc::sysctl(\n-                    mib.as_mut_ptr(),\n-                    2,\n-                    &mut cpus as *mut _ as *mut _,\n-                    &mut cpus_size as *mut _ as *mut _,\n-                    ptr::null_mut(),\n-                    0,\n-                )\n-            };\n-\n-            // Handle errors if any.\n-            if res == -1 {\n-                return Err(io::Error::last_os_error());\n-            } else if cpus == 0 {\n-                return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n-            }\n-\n-            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n-        }\n-    } else {\n-        // FIXME: implement on vxWorks, Redox, HermitCore, Haiku, l4re\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"))\n-        }\n-    }\n-}"}, {"sha": "f7e791419038d197d42e66054f2100eaec38da07", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -155,6 +155,7 @@ use crate::fmt;\n use crate::io;\n use crate::mem;\n use crate::num::NonZeroU64;\n+use crate::num::NonZeroUsize;\n use crate::panic;\n use crate::panicking;\n use crate::str;\n@@ -174,15 +175,9 @@ use crate::time::Duration;\n #[macro_use]\n mod local;\n \n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-mod available_concurrency;\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub use available_concurrency::available_concurrency;\n-\n // The types used by the thread_local! macro to access TLS keys. Note that there\n // are two types, the \"OS\" type and the \"fast\" type. The OS thread local key\n // type is accessed via platform-specific API calls and is slow, while the fast\n@@ -1422,3 +1417,39 @@ fn _assert_sync_and_send() {\n     _assert_both::<JoinHandle<()>>();\n     _assert_both::<Thread>();\n }\n+\n+/// Returns the number of hardware threads available to the program.\n+///\n+/// This value should be considered only a hint.\n+///\n+/// # Platform-specific behavior\n+///\n+/// If interpreted as the number of actual hardware threads, it may undercount on\n+/// Windows systems with more than 64 hardware threads. If interpreted as the\n+/// available concurrency for that process, it may overcount on Windows systems\n+/// when limited by a process wide affinity mask or job object limitations, and\n+/// it may overcount on Linux systems when limited by a process wide affinity\n+/// mask or affected by cgroups limits.\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// - If the number of hardware threads is not known for the target platform.\n+/// - The process lacks permissions to view the number of hardware threads\n+///   available.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// #![feature(available_concurrency)]\n+/// use std::thread;\n+///\n+/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n+/// ```\n+#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    imp::available_concurrency()\n+}"}, {"sha": "92ac3b364f6f135ea66c5be9cacb6a4ab227b928", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -894,6 +894,9 @@ impl Step for RustdocGUI {\n                 }\n             }\n         }\n+        for test_arg in builder.config.cmd.test_args() {\n+            command.arg(test_arg);\n+        }\n         builder.run(&mut command);\n     }\n }"}, {"sha": "fb82a075de0a9f56f842238ffdd1c267bd596d28", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -544,6 +544,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })\n     }\n \n+    /// Convert a DefId to a Res, where possible.\n+    ///\n+    /// This is used for resolving type aliases.\n+    fn def_id_to_res(&self, ty_id: DefId) -> Option<Res> {\n+        use PrimitiveType::*;\n+        Some(match *self.cx.tcx.type_of(ty_id).kind() {\n+            ty::Bool => Res::Primitive(Bool),\n+            ty::Char => Res::Primitive(Char),\n+            ty::Int(ity) => Res::Primitive(ity.into()),\n+            ty::Uint(uty) => Res::Primitive(uty.into()),\n+            ty::Float(fty) => Res::Primitive(fty.into()),\n+            ty::Str => Res::Primitive(Str),\n+            ty::Tuple(ref tys) if tys.is_empty() => Res::Primitive(Unit),\n+            ty::Tuple(_) => Res::Primitive(Tuple),\n+            ty::Array(..) => Res::Primitive(Array),\n+            ty::Slice(_) => Res::Primitive(Slice),\n+            ty::RawPtr(_) => Res::Primitive(RawPointer),\n+            ty::Ref(..) => Res::Primitive(Reference),\n+            ty::FnDef(..) => panic!(\"type alias to a function definition\"),\n+            ty::FnPtr(_) => Res::Primitive(Fn),\n+            ty::Never => Res::Primitive(Never),\n+            ty::Adt(&ty::AdtDef { did, .. }, _) | ty::Foreign(did) => {\n+                Res::Def(self.cx.tcx.def_kind(did), did)\n+            }\n+            ty::Projection(_)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Opaque(..)\n+            | ty::Dynamic(..)\n+            | ty::Param(_)\n+            | ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_)\n+            | ty::Error(_) => return None,\n+        })\n+    }\n+\n     /// Returns:\n     /// - None if no associated item was found\n     /// - Some((_, _, Some(_))) if an item was found and should go through a side channel\n@@ -559,12 +597,15 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         match root_res {\n             Res::Primitive(prim) => self.resolve_primitive_associated_item(prim, ns, item_name),\n+            Res::Def(DefKind::TyAlias, did) => {\n+                // Resolve the link on the type the alias points to.\n+                // FIXME: if the associated item is defined directly on the type alias,\n+                // it will show up on its documentation page, we should link there instead.\n+                let res = self.def_id_to_res(did)?;\n+                self.resolve_associated_item(res, item_name, ns, module_id)\n+            }\n             Res::Def(\n-                DefKind::Struct\n-                | DefKind::Union\n-                | DefKind::Enum\n-                | DefKind::TyAlias\n-                | DefKind::ForeignTy,\n+                DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::ForeignTy,\n                 did,\n             ) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);"}, {"sha": "8efe7a578b8f065942641a70db551e3c317a1b31", "filename": "src/test/rustdoc-gui/README.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Frustdoc-gui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Frustdoc-gui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2FREADME.md?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -8,5 +8,17 @@ test what's being currently displayed in the web page.\n \n You can find more information and its documentation in its [repository][browser-ui-test].\n \n+If you need to have more information on the tests run, you can use `--test-args`:\n+\n+```bash\n+$ ./x.py test src/test/rustdoc-gui --stage 1 --jobs 8 --test-args --debug\n+```\n+\n+There are three options supported:\n+\n+ * `--debug`: allows to see puppeteer commands.\n+ * `--no-headless`: disable headless mode so you can see what's going on.\n+ * `--show-text`: by default, text isn't rendered because of issues with fonts, it enables it back.\n+\n [browser-ui-test]: https://github.com/GuillaumeGomez/browser-UI-test/\n [puppeteer]: https://pptr.dev/"}, {"sha": "f3609ccd0a1418e19fde32809d7e13216a03e1cb", "filename": "src/test/rustdoc/intra-doc/type-alias.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #86120.\n+\n+#![deny(broken_intra_doc_links)]\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+/// You should really try [`Self::bar`]!\n+pub type Bar = Foo;\n+\n+impl Bar {\n+    pub fn bar() {}\n+}\n+\n+/// The minimum is [`Self::MIN`].\n+pub type Int = i32;\n+\n+// @has foo/type.Bar.html '//a[@href=\"struct.Foo.html#method.bar\"]' 'Self::bar'\n+// @has foo/type.Int.html '//a[@href=\"{{channel}}/std/primitive.i32.html#associatedconstant.MIN\"]' 'Self::MIN'"}, {"sha": "a954385da41a4856eafc26e338db73da1618f1f2", "filename": "src/test/ui/consts/issue-39161-bogus-error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fconsts%2Fissue-39161-bogus-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fconsts%2Fissue-39161-bogus-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-39161-bogus-error.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+pub struct X {\n+    pub a: i32,\n+    pub b: i32,\n+}\n+\n+fn main() {\n+    const DX: X = X { a: 0, b: 0 };\n+    const _X1: X = X { a: 1, ..DX };\n+    let _x2 = X { a: 1, b: 2, ..DX };\n+    const _X3: X = X { a: 1, b: 2, ..DX };\n+}"}, {"sha": "a036d10e6390248afc0966c5a30f7ff416372a0a", "filename": "src/test/ui/function-pointer/function-pointer-comparison-issue-54685.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -0,0 +1,31 @@\n+// min-llvm-version: 12.0\n+// compile-flags: -C opt-level=3\n+// run-pass\n+\n+fn foo(_i: i32) -> i32 {\n+    1\n+}\n+fn bar(_i: i32) -> i32 {\n+    1\n+}\n+\n+fn main() {\n+    let x: fn(i32) -> i32 = foo;\n+    let y: fn(i32) -> i32 = bar;\n+\n+    let s1;\n+    if x == y {\n+        s1 = \"same\".to_string();\n+    } else {\n+        s1 = format!(\"{:?}, {:?}\", x, y);\n+    }\n+\n+    let s2;\n+    if x == y {\n+        s2 = \"same\".to_string();\n+    } else {\n+        s2 = format!(\"{:?}, {:?}\", x, y);\n+    }\n+\n+    assert_eq!(s1, s2);\n+}"}, {"sha": "5b9861da6e8544079bcb506ddc7e683f4d76788e", "filename": "src/test/ui/span/missing-unit-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -8,7 +8,7 @@ impl S {\n }\n \n fn main() {\n-    let _: Result<(), String> = Ok(); //~ ERROR this function takes\n+    let _: Result<(), String> = Ok(); //~ ERROR this enum variant takes\n     foo(); //~ ERROR this function takes\n     foo(()); //~ ERROR this function takes\n     bar(); //~ ERROR this function takes"}, {"sha": "7a24ffbd81c88d2e6edbd271dcf3e32eafa3b4a8", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:11:33\n    |\n LL |     let _: Result<(), String> = Ok();"}, {"sha": "19de4d67729fcf47bcb835328badb27e5ef94833", "filename": "src/test/ui/typeck/struct-enum-wrong-args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -0,0 +1,14 @@\n+// Regression test of #86481.\n+struct Wrapper(i32);\n+struct DoubleWrapper(i32, i32);\n+\n+fn main() {\n+    let _ = Some(3, 2); //~ ERROR this enum variant takes\n+    let _ = Ok(3, 6, 2); //~ ERROR this enum variant takes\n+    let _ = Ok(); //~ ERROR this enum variant takes\n+    let _ = Wrapper(); //~ ERROR this struct takes\n+    let _ = Wrapper(5, 2); //~ ERROR this struct takes\n+    let _ = DoubleWrapper(); //~ ERROR this struct takes\n+    let _ = DoubleWrapper(5); //~ ERROR this struct takes\n+    let _ = DoubleWrapper(5, 2, 7); //~ ERROR this struct takes\n+}"}, {"sha": "d77ef73028b0cd7ff06db0edf08506a8f4aff136", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -0,0 +1,67 @@\n+error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:6:13\n+   |\n+LL |     let _ = Some(3, 2);\n+   |             ^^^^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n+\n+error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:7:13\n+   |\n+LL |     let _ = Ok(3, 6, 2);\n+   |             ^^ -  -  - supplied 3 arguments\n+   |             |\n+   |             expected 1 argument\n+\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:8:13\n+   |\n+LL |     let _ = Ok();\n+   |             ^^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n+\n+error[E0061]: this struct takes 1 argument but 0 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:9:13\n+   |\n+LL |     let _ = Wrapper();\n+   |             ^^^^^^^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n+\n+error[E0061]: this struct takes 1 argument but 2 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:10:13\n+   |\n+LL |     let _ = Wrapper(5, 2);\n+   |             ^^^^^^^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n+\n+error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:11:13\n+   |\n+LL |     let _ = DoubleWrapper();\n+   |             ^^^^^^^^^^^^^-- supplied 0 arguments\n+   |             |\n+   |             expected 2 arguments\n+\n+error[E0061]: this struct takes 2 arguments but 1 argument was supplied\n+  --> $DIR/struct-enum-wrong-args.rs:12:13\n+   |\n+LL |     let _ = DoubleWrapper(5);\n+   |             ^^^^^^^^^^^^^ - supplied 1 argument\n+   |             |\n+   |             expected 2 arguments\n+\n+error[E0061]: this struct takes 2 arguments but 3 arguments were supplied\n+  --> $DIR/struct-enum-wrong-args.rs:13:13\n+   |\n+LL |     let _ = DoubleWrapper(5, 2, 7);\n+   |             ^^^^^^^^^^^^^ -  -  - supplied 3 arguments\n+   |             |\n+   |             expected 2 arguments\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "13da28cc2bc1b59f7af817eca36927a71edb023c", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -1 +1 @@\n-Subproject commit f0618a8f06a464840079f30b3e25bcdcca3922a3\n+Subproject commit 13da28cc2bc1b59f7af817eca36927a71edb023c"}, {"sha": "416d824c5645ef997fe9b579a4fd8c4452ba488d", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -11,6 +11,9 @@ function showHelp() {\n     console.log(\"rustdoc-js options:\");\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n     console.log(\"  --file [PATH]              : file to run (can be repeated)\");\n+    console.log(\"  --debug                    : show extra information about script run\");\n+    console.log(\"  --show-text                : render font in pages\");\n+    console.log(\"  --no-headless              : disable headless mode\");\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n }\n@@ -20,10 +23,16 @@ function parseOptions(args) {\n         \"doc_folder\": \"\",\n         \"tests_folder\": \"\",\n         \"files\": [],\n+        \"debug\": false,\n+        \"show_text\": false,\n+        \"no_headless\": false,\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n         \"--tests-folder\": \"tests_folder\",\n+        \"--debug\": \"debug\",\n+        \"--show-text\": \"show_text\",\n+        \"--no-headless\": \"no_headless\",\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n@@ -43,6 +52,8 @@ function parseOptions(args) {\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n+        } else if (correspondances[args[i]]) {\n+            opts[correspondances[args[i]]] = true;\n         } else {\n             console.log(\"Unknown option `\" + args[i] + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");\n@@ -68,17 +79,20 @@ async function main(argv) {\n     const options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n-        options.parseArguments([\n+        let args = [\n             \"--no-screenshot\",\n-            // This option shows what puppeteer \"code\" is run\n-            // \"--debug\",\n-            // This option disable the headless mode, allowing you to see what's going on.\n-            // \"--no-headless\",\n-            // The text isn't rendered by default because of a lot of small differences\n-            // between hosts.\n-            // \"--show-text\",\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n-        ]);\n+        ];\n+        if (opts[\"debug\"]) {\n+            args.push(\"--debug\");\n+        }\n+        if (opts[\"show_text\"]) {\n+            args.push(\"--show-text\");\n+        }\n+        if (opts[\"no_headless\"]) {\n+            args.push(\"--no-headless\");\n+        }\n+        options.parseArguments(args);\n     } catch (error) {\n         console.error(`invalid argument: ${error}`);\n         process.exit(1);"}, {"sha": "31cdc6865a4022c199880c2b57a693ada29ef3bc", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c04f0bb171bb7dc573d0da4b59960106823c2cd/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=2c04f0bb171bb7dc573d0da4b59960106823c2cd", "patch": "@@ -56,7 +56,6 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/std/src/f32.rs\",\n     \"library/std/src/f64.rs\",\n     \"library/std/src/path.rs\",\n-    \"library/std/src/thread/available_concurrency.rs\",\n     \"library/std/src/sys_common\", // Should only contain abstractions over platforms\n     \"library/std/src/net/test.rs\", // Utility helpers for tests\n ];"}]}