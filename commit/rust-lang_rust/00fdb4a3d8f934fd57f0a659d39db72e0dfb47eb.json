{"sha": "00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "node_id": "C_kwDOAAsO6NoAKDAwZmRiNGEzZDhmOTM0ZmQ1N2YwYTY1OWQzOWRiNzJlMGRmYjQ3ZWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T21:36:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T21:36:39Z"}, "message": "Only run completion functions if their corresponding context is active", "tree": {"sha": "e3387408f19d34b3e31dfdd85498fc4db0ae1afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3387408f19d34b3e31dfdd85498fc4db0ae1afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "html_url": "https://github.com/rust-lang/rust/commit/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97a8ee865773a78a142cddf163ec55301b88aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97a8ee865773a78a142cddf163ec55301b88aa9", "html_url": "https://github.com/rust-lang/rust/commit/d97a8ee865773a78a142cddf163ec55301b88aa9"}], "stats": {"total": 957, "additions": 561, "deletions": 396}, "files": [{"sha": "992d7eabd8aa1db4dab8c61fa757c7580700ce94", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{CompletionContext, IdentContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n@@ -34,11 +34,9 @@ pub(crate) use self::derive::complete_derive;\n pub(crate) fn complete_known_attribute_input(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n+    fake_attribute_under_caret: &ast::Attr,\n ) -> Option<()> {\n-    let attribute = match &ctx.ident_ctx {\n-        IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: Some(it) } => it,\n-        _ => return None,\n-    };\n+    let attribute = fake_attribute_under_caret;\n     let name_ref = match attribute.path() {\n         Some(p) => Some(p.as_single_name_ref()?),\n         None => None,\n@@ -71,13 +69,17 @@ pub(crate) fn complete_known_attribute_input(\n     Some(())\n }\n \n-pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualified, is_inner, annotated_item_kind) = match ctx.path_context() {\n-        Some(&PathCompletionCtx {\n+pub(crate) fn complete_attribute(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    let (qualified, is_inner, annotated_item_kind) = match path_ctx {\n+        &PathCompletionCtx {\n             kind: PathKind::Attr { kind, annotated_item_kind },\n             ref qualified,\n             ..\n-        }) => (qualified, kind == AttrKind::Inner, annotated_item_kind),\n+        } => (qualified, kind == AttrKind::Inner, annotated_item_kind),\n         _ => return,\n     };\n "}, {"sha": "0927d2f76438d2e1283f3ae2740f70d6310c29e4", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -10,11 +10,15 @@ use crate::{\n     Completions,\n };\n \n-pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualified, existing_derives) = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Derive { existing_derives }, qualified, ..\n-        }) => (qualified, existing_derives),\n+pub(crate) fn complete_derive(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    let (qualified, existing_derives) = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Derive { existing_derives }, qualified, .. } => {\n+            (qualified, existing_derives)\n+        }\n         _ => return,\n     };\n "}, {"sha": "a315d616d5580bcc9aae90cbc7c0ccdc3ac45d5f", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -4,21 +4,16 @@ use ide_db::FxHashSet;\n \n use crate::{\n     context::{\n-        CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind,\n-        PathCompletionCtx, PathKind, Qualified,\n+        CompletionContext, DotAccess, DotAccessKind, PathCompletionCtx, PathKind, Qualified,\n     },\n     CompletionItem, CompletionItemKind, Completions,\n };\n \n /// Complete dot accesses, i.e. fields or methods.\n-pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (dot_access, receiver_ty) = match ctx.nameref_ctx() {\n-        Some(NameRefContext {\n-            kind:\n-                Some(NameRefKind::DotAccess(access @ DotAccess { receiver_ty: Some(receiver_ty), .. })),\n-            ..\n-        }) => (access, &receiver_ty.original),\n-        _ => return complete_undotted_self(acc, ctx),\n+pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext, dot_access: &DotAccess) {\n+    let receiver_ty = match dot_access {\n+        DotAccess { receiver_ty: Some(receiver_ty), .. } => &receiver_ty.original,\n+        _ => return,\n     };\n \n     // Suggest .await syntax for types that implement Future trait\n@@ -43,18 +38,17 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     complete_methods(ctx, &receiver_ty, |func| acc.add_method(ctx, func, None, None));\n }\n \n-fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_undotted_self(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    match ctx.path_context() {\n-        Some(\n-            path_ctx @ PathCompletionCtx {\n-                qualified: Qualified::No,\n-                kind: PathKind::Expr { .. },\n-                ..\n-            },\n-        ) if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => {}\n+    match path_ctx {\n+        PathCompletionCtx { qualified: Qualified::No, kind: PathKind::Expr { .. }, .. }\n+            if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => {}\n         _ => return,\n     }\n "}, {"sha": "afc929d68d869c64e052fd450d428ada31af4610", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -8,7 +8,11 @@ use crate::{\n     CompletionContext, Completions,\n };\n \n-pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_expr_path(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ref_ctx: &NameRefContext,\n+) {\n     let _p = profile::span(\"complete_expr_path\");\n \n     let (\n@@ -19,8 +23,8 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         after_if_expr,\n         wants_mut_token,\n         in_condition,\n-    ) = match ctx.nameref_ctx() {\n-        Some(&NameRefContext {\n+    ) = match name_ref_ctx {\n+        &NameRefContext {\n             kind:\n                 Some(NameRefKind::Path(PathCompletionCtx {\n                     kind:\n@@ -36,7 +40,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                     ..\n                 })),\n             ..\n-        }) if ctx.qualifier_ctx.none() => (\n+        } if ctx.qualifier_ctx.none() => (\n             qualified,\n             in_block_expr,\n             in_loop_body,"}, {"sha": "3007b3c319c14550dd3f5eab28b4d95337f717ef", "filename": "crates/ide-completion/src/completions/extern_abi.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -5,9 +5,7 @@ use syntax::{\n };\n \n use crate::{\n-    completions::Completions,\n-    context::{CompletionContext, IdentContext},\n-    CompletionItem, CompletionItemKind,\n+    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n // Most of these are feature gated, we should filter/add feature gate completions once we have them.\n@@ -42,15 +40,15 @@ const SUPPORTED_CALLING_CONVENTIONS: &[&str] = &[\n     \"unadjusted\",\n ];\n \n-pub(crate) fn complete_extern_abi(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let abi_str = match &ctx.ident_ctx {\n-        IdentContext::String { expanded: Some(expanded), .. }\n-            if expanded.syntax().parent().map_or(false, |it| ast::Abi::can_cast(it.kind())) =>\n-        {\n-            expanded\n-        }\n-        _ => return None,\n-    };\n+pub(crate) fn complete_extern_abi(\n+    acc: &mut Completions,\n+    _ctx: &CompletionContext,\n+    expanded: &ast::String,\n+) -> Option<()> {\n+    if !expanded.syntax().parent().map_or(false, |it| ast::Abi::can_cast(it.kind())) {\n+        return None;\n+    }\n+    let abi_str = expanded;\n     let source_range = abi_str.text_range_between_quotes()?;\n     for &abi in SUPPORTED_CALLING_CONVENTIONS {\n         CompletionItem::new(CompletionItemKind::Keyword, source_range, abi).add_to(acc);"}, {"sha": "93263f61cf112b34db14903affc08776ffd2b3a3", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -2,16 +2,19 @@\n \n use crate::{\n     context::{\n-        IdentContext, NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx,\n-        PathKind, Qualified, TypeLocation,\n+        NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified,\n+        TypeLocation,\n     },\n     CompletionContext, Completions,\n };\n \n-pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext) {\n-    match &ctx.ident_ctx {\n-        IdentContext::Name(NameContext { kind: NameKind::RecordField, .. })\n-        | IdentContext::NameRef(NameRefContext {\n+pub(crate) fn complete_field_list_tuple_variant(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ref_ctx: &NameRefContext,\n+) {\n+    match name_ref_ctx {\n+        NameRefContext {\n             kind:\n                 Some(NameRefKind::Path(PathCompletionCtx {\n                     has_macro_bang: false,\n@@ -22,14 +25,29 @@ pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext\n                     ..\n                 })),\n             ..\n-        }) => {\n+        } => {\n             if ctx.qualifier_ctx.vis_node.is_none() {\n                 let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n                 add_keyword(\"pub(crate)\", \"pub(crate)\");\n                 add_keyword(\"pub(super)\", \"pub(super)\");\n                 add_keyword(\"pub\", \"pub\");\n             }\n         }\n-        _ => return,\n+        _ => (),\n+    }\n+}\n+\n+pub(crate) fn complete_field_list_record_variant(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ctx: &NameContext,\n+) {\n+    if let NameContext { kind: NameKind::RecordField, .. } = name_ctx {\n+        if ctx.qualifier_ctx.vis_node.is_none() {\n+            let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+            add_keyword(\"pub(crate)\", \"pub(crate)\");\n+            add_keyword(\"pub(super)\", \"pub(super)\");\n+            add_keyword(\"pub\", \"pub\");\n+        }\n     }\n }"}, {"sha": "a62b966e019823f1d7dbf726dbd32178ea63861a", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -19,9 +19,13 @@ use crate::{\n /// `spam: &mut Spam` insert text/label will be suggested.\n ///\n /// Also complete parameters for closure or local functions from the surrounding defined locals.\n-pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let (param_list, _, param_kind) = match &ctx.pattern_ctx {\n-        Some(PatternContext { param_ctx: Some(kind), .. }) => kind,\n+pub(crate) fn complete_fn_param(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    pattern_ctx: &PatternContext,\n+) -> Option<()> {\n+    let (param_list, _, param_kind) = match pattern_ctx {\n+        PatternContext { param_ctx: Some(kind), .. } => kind,\n         _ => return None,\n     };\n "}, {"sha": "f7a75b2dd58e251afe9a32cc3751dd497e9e0db8", "filename": "crates/ide-completion/src/completions/format_string.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -2,28 +2,25 @@\n \n use ide_db::syntax_helpers::format_string::is_format_string;\n use itertools::Itertools;\n-use syntax::{AstToken, TextRange, TextSize};\n+use syntax::{ast, AstToken, TextRange, TextSize};\n \n-use crate::{\n-    context::{CompletionContext, IdentContext},\n-    CompletionItem, CompletionItemKind, Completions,\n-};\n+use crate::{context::CompletionContext, CompletionItem, CompletionItemKind, Completions};\n \n /// Complete identifiers in format strings.\n-pub(crate) fn format_string(acc: &mut Completions, ctx: &CompletionContext) {\n-    let string = match &ctx.ident_ctx {\n-        IdentContext::String { expanded: Some(expanded), original }\n-            if is_format_string(&expanded) =>\n-        {\n-            original\n-        }\n-        _ => return,\n-    };\n+pub(crate) fn format_string(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    original: &ast::String,\n+    expanded: &ast::String,\n+) {\n+    if !is_format_string(&expanded) {\n+        return;\n+    }\n     let cursor = ctx.position.offset;\n     let lit_start = ctx.original_token.text_range().start();\n     let cursor_in_lit = cursor - lit_start;\n \n-    let prefix = &string.text()[..cursor_in_lit.into()];\n+    let prefix = &original.text()[..cursor_in_lit.into()];\n     let braces = prefix.char_indices().rev().skip_while(|&(_, c)| c.is_alphanumeric()).next_tuple();\n     let brace_offset = match braces {\n         // escaped brace"}, {"sha": "e613f2d25b1ccdfed9a93217d828475179e308b5", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -2,43 +2,50 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ItemListKind, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n-mod trait_impl;\n+pub(crate) mod trait_impl;\n \n-pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_item_list(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ref_ctx: &NameRefContext,\n+) {\n     let _p = profile::span(\"complete_item_list\");\n \n-    if let Some(_) = ctx.name_ctx() {\n-        trait_impl::complete_trait_impl(acc, ctx);\n-        return;\n-    }\n-\n-    let (qualified, kind, is_trivial_path) = match ctx.path_context() {\n-        Some(ctx @ PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. }) => {\n-            (qualified, Some(kind), ctx.is_trivial_path())\n-        }\n-        Some(\n-            ctx @ PathCompletionCtx {\n-                kind: PathKind::Expr { in_block_expr: true, .. },\n-                qualified,\n-                ..\n-            },\n-        ) => (qualified, None, ctx.is_trivial_path()),\n+    let (qualified, item_list_kind, is_trivial_path) = match name_ref_ctx {\n+        NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(\n+                    ctx @ PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. },\n+                )),\n+            ..\n+        } => (qualified, Some(kind), ctx.is_trivial_path()),\n+        NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(\n+                    ctx @ PathCompletionCtx {\n+                        kind: PathKind::Expr { in_block_expr: true, .. },\n+                        qualified,\n+                        ..\n+                    },\n+                )),\n+            ..\n+        } => (qualified, None, ctx.is_trivial_path()),\n         _ => return,\n     };\n \n-    if matches!(kind, Some(ItemListKind::TraitImpl)) {\n-        trait_impl::complete_trait_impl(acc, ctx);\n+    if matches!(item_list_kind, Some(ItemListKind::TraitImpl)) {\n+        trait_impl::complete_trait_impl_name_ref(acc, ctx, name_ref_ctx);\n     }\n \n     if is_trivial_path {\n-        add_keywords(acc, ctx, kind);\n+        add_keywords(acc, ctx, item_list_kind);\n     }\n \n-    if kind.is_none() {\n+    if item_list_kind.is_none() {\n         // this is already handled by expression\n         return;\n     }"}, {"sha": "701985d507d1b03ec3ad878b57884a3499fd8162", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 67, "deletions": 50, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -44,8 +44,8 @@ use text_edit::TextEdit;\n \n use crate::{\n     context::{\n-        IdentContext, ItemListKind, NameContext, NameKind, NameRefContext, NameRefKind,\n-        PathCompletionCtx, PathKind,\n+        ItemListKind, NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx,\n+        PathKind,\n     },\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n@@ -58,53 +58,41 @@ enum ImplCompletionKind {\n     Const,\n }\n \n-pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some((kind, replacement_range, impl_def)) = completion_match(ctx) {\n-        if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n-            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| {\n-                use self::ImplCompletionKind::*;\n-                match (item, kind) {\n-                    (hir::AssocItem::Function(func), All | Fn) => {\n-                        add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n-                    }\n-                    (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n-                        add_type_alias_impl(acc, ctx, replacement_range, type_alias)\n-                    }\n-                    (hir::AssocItem::Const(const_), All | Const) => {\n-                        add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n-                    }\n-                    _ => {}\n-                }\n-            });\n-        }\n-    }\n+pub(crate) fn complete_trait_impl_name(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    NameContext { name, kind, .. }: &NameContext,\n+) -> Option<()> {\n+    let kind = match kind {\n+        NameKind::Const => ImplCompletionKind::Const,\n+        NameKind::Function => ImplCompletionKind::Fn,\n+        NameKind::TypeAlias => ImplCompletionKind::TypeAlias,\n+        _ => return None,\n+    };\n+    let token = ctx.token.clone();\n+    let item = match name {\n+        Some(name) => name.syntax().parent(),\n+        None => if token.kind() == SyntaxKind::WHITESPACE { token.prev_token()? } else { token }\n+            .parent(),\n+    }?;\n+    complete_trait_impl(\n+        acc,\n+        ctx,\n+        kind,\n+        replacement_range(ctx, &item),\n+        // item -> ASSOC_ITEM_LIST -> IMPL\n+        ast::Impl::cast(item.parent()?.parent()?)?,\n+    );\n+    Some(())\n }\n \n-fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, TextRange, ast::Impl)> {\n-    match &ctx.ident_ctx {\n-        IdentContext::Name(NameContext { name, kind, .. }) => {\n-            let kind = match kind {\n-                NameKind::Const => ImplCompletionKind::Const,\n-                NameKind::Function => ImplCompletionKind::Fn,\n-                NameKind::TypeAlias => ImplCompletionKind::TypeAlias,\n-                _ => return None,\n-            };\n-            let token = ctx.token.clone();\n-            let item = match name {\n-                Some(name) => name.syntax().parent(),\n-                None => {\n-                    if token.kind() == SyntaxKind::WHITESPACE { token.prev_token()? } else { token }\n-                        .parent()\n-                }\n-            }?;\n-            Some((\n-                kind,\n-                replacement_range(ctx, &item),\n-                // item -> ASSOC_ITEM_LIST -> IMPL\n-                ast::Impl::cast(item.parent()?.parent()?)?,\n-            ))\n-        }\n-        IdentContext::NameRef(NameRefContext {\n+pub(crate) fn complete_trait_impl_name_ref(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ref_ctx: &NameRefContext,\n+) -> Option<()> {\n+    match name_ref_ctx {\n+        NameRefContext {\n             nameref,\n             kind:\n                 Some(NameRefKind::Path(\n@@ -113,15 +101,44 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Text\n                         ..\n                     },\n                 )),\n-        }) if path_ctx.is_trivial_path() => Some((\n+        } if path_ctx.is_trivial_path() => complete_trait_impl(\n+            acc,\n+            ctx,\n             ImplCompletionKind::All,\n             match nameref {\n                 Some(name) => name.syntax().text_range(),\n                 None => ctx.source_range(),\n             },\n             ctx.impl_def.clone()?,\n-        )),\n-        _ => None,\n+        ),\n+        _ => (),\n+    }\n+    Some(())\n+}\n+\n+fn complete_trait_impl(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    kind: ImplCompletionKind,\n+    replacement_range: TextRange,\n+    impl_def: ast::Impl,\n+) {\n+    if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n+        get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| {\n+            use self::ImplCompletionKind::*;\n+            match (item, kind) {\n+                (hir::AssocItem::Function(func), All | Fn) => {\n+                    add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n+                }\n+                (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n+                    add_type_alias_impl(acc, ctx, replacement_range, type_alias)\n+                }\n+                (hir::AssocItem::Const(const_), All | Const) => {\n+                    add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n+                }\n+                _ => {}\n+            }\n+        });\n     }\n }\n "}, {"sha": "57d545ab8fedd07dff72b009239ed7623d078ef3", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -1,23 +1,17 @@\n-//! Completes keywords, except:\n-//! - `self`, `super` and `crate`, as these are considered part of path completions.\n-//! - `await`, as this is a postfix completion we handle this in the postfix completions.\n+//! Completes `where` and `for` keywords.\n \n-use syntax::ast::Item;\n+use syntax::ast::{self, Item};\n \n-use crate::{\n-    context::{NameRefContext, NameRefKind},\n-    CompletionContext, Completions,\n-};\n-\n-pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    let item = match ctx.nameref_ctx() {\n-        Some(NameRefContext { kind: Some(NameRefKind::Keyword(item)), .. }) => item,\n-        _ => return,\n-    };\n+use crate::{CompletionContext, Completions};\n \n+pub(crate) fn complete_special_keywords(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    keyword_item: &ast::Item,\n+) {\n     let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n-    match item {\n+    match keyword_item {\n         Item::Impl(it) => {\n             if it.for_token().is_none() && it.trait_().is_none() && it.self_ty().is_some() {\n                 add_keyword(\"for\", \"for\");"}, {"sha": "76e1c2e510a18f6b8e5bc61f1e6a60108520213e", "filename": "crates/ide-completion/src/completions/lifetime.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -16,13 +16,17 @@ use crate::{\n };\n \n /// Completes lifetimes.\n-pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (lp, lifetime) = match ctx.lifetime_ctx() {\n-        Some(LifetimeContext { kind: LifetimeKind::Lifetime, lifetime }) => (None, lifetime),\n-        Some(LifetimeContext {\n+pub(crate) fn complete_lifetime(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    lifetime_ctx: &LifetimeContext,\n+) {\n+    let (lp, lifetime) = match lifetime_ctx {\n+        LifetimeContext { kind: LifetimeKind::Lifetime, lifetime } => (None, lifetime),\n+        LifetimeContext {\n             kind: LifetimeKind::LifetimeParam { is_decl: false, param },\n             lifetime,\n-        }) => (Some(param), lifetime),\n+        } => (Some(param), lifetime),\n         _ => return,\n     };\n     let param_lifetime = match (lifetime, lp.and_then(|lp| lp.lifetime())) {\n@@ -48,8 +52,12 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n }\n \n /// Completes labels.\n-pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !matches!(ctx.lifetime_ctx(), Some(LifetimeContext { kind: LifetimeKind::LabelRef, .. })) {\n+pub(crate) fn complete_label(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    lifetime_ctx: &LifetimeContext,\n+) {\n+    if !matches!(lifetime_ctx, LifetimeContext { kind: LifetimeKind::LabelRef, .. }) {\n         return;\n     }\n     ctx.process_all_names_raw(&mut |name, res| {"}, {"sha": "8dd1d1d8ac89a7830a281da10c6d025682a4644c", "filename": "crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -15,9 +15,13 @@ use crate::{\n };\n \n /// Complete mod declaration, i.e. `mod $0;`\n-pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let mod_under_caret = match ctx.name_ctx() {\n-        Some(NameContext { kind: NameKind::Module(mod_under_caret), .. }) => mod_under_caret,\n+pub(crate) fn complete_mod(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ctx: &NameContext,\n+) -> Option<()> {\n+    let mod_under_caret = match name_ctx {\n+        NameContext { kind: NameKind::Module(mod_under_caret), .. } => mod_under_caret,\n         _ => return None,\n     };\n     if mod_under_caret.item_list().is_some() {"}, {"sha": "1ecae1c48461f6362dac40f67a8f410f43db5ba8", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -5,22 +5,16 @@ use ide_db::FxHashSet;\n use syntax::ast::Pat;\n \n use crate::{\n-    context::{PathCompletionCtx, PatternRefutability, Qualified},\n+    context::{PathCompletionCtx, PathKind, PatternContext, PatternRefutability, Qualified},\n     CompletionContext, Completions,\n };\n \n /// Completes constants and paths in unqualified patterns.\n-pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    let patctx = match &ctx.pattern_ctx {\n-        Some(ctx) => ctx,\n-        _ => return,\n-    };\n-\n-    if let Some(path_ctx) = ctx.path_context() {\n-        pattern_path_completion(acc, ctx, path_ctx);\n-        return;\n-    }\n-\n+pub(crate) fn complete_pattern(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    patctx: &PatternContext,\n+) {\n     match patctx.parent_pat.as_ref() {\n         Some(Pat::RangePat(_) | Pat::BoxPat(_)) => (),\n         Some(Pat::RefPat(r)) => {\n@@ -108,11 +102,14 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     });\n }\n \n-fn pattern_path_completion(\n+pub(crate) fn pattern_path_completion(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, kind, .. }: &PathCompletionCtx,\n ) {\n+    if !matches!(kind, PathKind::Pat) {\n+        return;\n+    }\n     match qualified {\n         Qualified::With { resolution: Some(resolution), is_super_chain, .. } => {\n             if *is_super_chain {"}, {"sha": "5af44aa4b68ac345146bb3d0e560b11108c52e4b", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -13,27 +13,22 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::postfix::format_like::add_format_like_completions,\n-    context::{CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind},\n+    context::{CompletionContext, DotAccess, DotAccessKind},\n     item::{Builder, CompletionRelevancePostfixMatch},\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions, SnippetScope,\n };\n \n-pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_postfix(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    dot_access: &DotAccess,\n+) {\n     if !ctx.config.enable_postfix_completions {\n         return;\n     }\n \n-    let (dot_receiver, receiver_ty, receiver_is_ambiguous_float_literal) = match ctx.nameref_ctx() {\n-        Some(NameRefContext {\n-            kind:\n-                Some(NameRefKind::DotAccess(DotAccess {\n-                    receiver_ty: Some(ty),\n-                    receiver: Some(it),\n-                    kind,\n-                    ..\n-                })),\n-            ..\n-        }) => (\n+    let (dot_receiver, receiver_ty, receiver_is_ambiguous_float_literal) = match dot_access {\n+        DotAccess { receiver_ty: Some(ty), receiver: Some(it), kind, .. } => (\n             it,\n             &ty.original,\n             match *kind {"}, {"sha": "eaab4cb4eea9fef263d29c8c711ec918126f12b2", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 80, "deletions": 49, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -1,36 +1,34 @@\n //! Complete fields in record literals and patterns.\n use ide_db::SymbolKind;\n-use syntax::{ast::Expr, T};\n+use syntax::{\n+    ast::{self, Expr},\n+    T,\n+};\n \n use crate::{\n-    context::{\n-        NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PatternContext, Qualified,\n-    },\n+    context::{PathCompletionCtx, PathKind, PatternContext, Qualified},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n \n-pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let missing_fields = if let Some(PatternContext { record_pat: Some(record_pat), .. }) =\n-        &ctx.pattern_ctx\n-    {\n-        ctx.sema.record_pattern_missing_fields(record_pat)\n-    } else if let Some(NameRefContext {\n-        kind:\n-            Some(\n-                NameRefKind::RecordExpr(record_expr)\n-                | NameRefKind::Path(PathCompletionCtx {\n-                    kind: PathKind::Expr { is_func_update: Some(record_expr), .. },\n-                    qualified: Qualified::No,\n-                    ..\n-                }),\n-            ),\n-        ..\n-    }) = ctx.nameref_ctx()\n-    {\n-        let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n+pub(crate) fn complete_record_pattern_fields(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    pattern_ctx: &PatternContext,\n+) {\n+    if let PatternContext { record_pat: Some(record_pat), .. } = pattern_ctx {\n+        complete_fields(acc, ctx, ctx.sema.record_pattern_missing_fields(record_pat));\n+    }\n+}\n+pub(crate) fn complete_record_expr_fields_record_expr(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    record_expr: &ast::RecordExpr,\n+) {\n+    let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n \n-        if let Some(hir::Adt::Union(un)) = ty.as_ref().and_then(|t| t.original.as_adt()) {\n+    let missing_fields = match ty.as_ref().and_then(|t| t.original.as_adt()) {\n+        Some(hir::Adt::Union(un)) => {\n             // ctx.sema.record_literal_missing_fields will always return\n             // an empty Vec on a union literal. This is normally\n             // reasonable, but here we'd like to present the full list\n@@ -40,47 +38,80 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n             match were_fields_specified {\n                 false => un.fields(ctx.db).into_iter().map(|f| (f, f.ty(ctx.db))).collect(),\n-                true => vec![],\n+                true => return,\n             }\n-        } else {\n+        }\n+        _ => {\n             let missing_fields = ctx.sema.record_literal_missing_fields(record_expr);\n \n-            let default_trait = ctx.famous_defs().core_default_Default();\n-            let impl_default_trait =\n-                default_trait.zip(ty.as_ref()).map_or(false, |(default_trait, ty)| {\n-                    ty.original.impls_trait(ctx.db, default_trait, &[])\n-                });\n-\n-            if impl_default_trait && !missing_fields.is_empty() {\n-                let completion_text = \"..Default::default()\";\n-                let mut item =\n-                    CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);\n-                let completion_text =\n-                    completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n-                item.insert_text(completion_text).set_relevance(CompletionRelevance {\n-                    postfix_match: Some(CompletionRelevancePostfixMatch::Exact),\n-                    ..Default::default()\n-                });\n-                item.add_to(acc);\n-            }\n+            add_default_update(acc, ctx, ty, &missing_fields);\n             if ctx.previous_token_is(T![.]) {\n                 let mut item =\n                     CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), \"..\");\n                 item.insert_text(\".\");\n                 item.add_to(acc);\n-                return None;\n+                return;\n             }\n             missing_fields\n         }\n-    } else {\n-        return None;\n     };\n+    complete_fields(acc, ctx, missing_fields);\n+}\n+\n+fn add_default_update(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    ty: Option<hir::TypeInfo>,\n+    missing_fields: &[(hir::Field, hir::Type)],\n+) {\n+    let default_trait = ctx.famous_defs().core_default_Default();\n+    let impl_default_trait = default_trait\n+        .zip(ty.as_ref())\n+        .map_or(false, |(default_trait, ty)| ty.original.impls_trait(ctx.db, default_trait, &[]));\n+    if impl_default_trait && !missing_fields.is_empty() {\n+        let completion_text = \"..Default::default()\";\n+        let mut item = CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);\n+        let completion_text =\n+            completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n+        item.insert_text(completion_text).set_relevance(CompletionRelevance {\n+            postfix_match: Some(CompletionRelevancePostfixMatch::Exact),\n+            ..Default::default()\n+        });\n+        item.add_to(acc);\n+    }\n+}\n+\n+pub(crate) fn complete_record_expr_func_update(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    if let PathCompletionCtx {\n+        kind: PathKind::Expr { is_func_update: Some(record_expr), .. },\n+        qualified: Qualified::No,\n+        ..\n+    } = path_ctx\n+    {\n+        let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n \n+        match ty.as_ref().and_then(|t| t.original.as_adt()) {\n+            Some(hir::Adt::Union(_)) => (),\n+            _ => {\n+                let missing_fields = ctx.sema.record_literal_missing_fields(record_expr);\n+                add_default_update(acc, ctx, ty, &missing_fields);\n+            }\n+        };\n+    }\n+}\n+\n+fn complete_fields(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    missing_fields: Vec<(hir::Field, hir::Type)>,\n+) {\n     for (field, ty) in missing_fields {\n         acc.add_field(ctx, None, field, &ty);\n     }\n-\n-    Some(())\n }\n \n #[cfg(test)]"}, {"sha": "48366987f4026eae9866f9934e29c0282b0e73f0", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -15,13 +15,17 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n     item\n }\n \n-pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    let &can_be_stmt = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n+pub(crate) fn complete_expr_snippet(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    let &can_be_stmt = match path_ctx {\n+        PathCompletionCtx {\n             qualified: Qualified::No,\n             kind: PathKind::Expr { in_block_expr, .. },\n             ..\n-        }) => in_block_expr,\n+        } => in_block_expr,\n         _ => return,\n     };\n \n@@ -40,13 +44,17 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n     }\n }\n \n-pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    let path_kind = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n+pub(crate) fn complete_item_snippet(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    let path_kind = match path_ctx {\n+        PathCompletionCtx {\n             qualified: Qualified::No,\n             kind: kind @ (PathKind::Item { .. } | PathKind::Expr { in_block_expr: true, .. }),\n             ..\n-        }) => kind,\n+        } => kind,\n         _ => return,\n     };\n     if !ctx.qualifier_ctx.none() {"}, {"sha": "b8d172696d7771c78eed577a1777b286b3ff9793", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -10,11 +10,15 @@ use crate::{\n     CompletionContext, Completions,\n };\n \n-pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_type_path(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n     let _p = profile::span(\"complete_type_path\");\n \n-    let (location, qualified) = match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Type { location }, qualified, .. }) => {\n+    let (location, qualified) = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Type { location }, qualified, .. } => {\n             (location, qualified)\n         }\n         _ => return,\n@@ -84,7 +88,7 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n                         hir::ModuleDef::Adt(adt) => adt.ty(ctx.db),\n                         hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                         hir::ModuleDef::BuiltinType(builtin) => builtin.ty(ctx.db),\n-                        _ => unreachable!(),\n+                        _ => return,\n                     };\n \n                     // XXX: For parity with Rust bug #22519, this does not complete Ty::AssocType.\n@@ -187,14 +191,16 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n }\n \n-pub(crate) fn complete_inferred_type(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let pat = match ctx.path_context() {\n-        Some(\n-            ctx @ PathCompletionCtx {\n-                kind: PathKind::Type { location: TypeLocation::TypeAscription(ascription), .. },\n-                ..\n-            },\n-        ) if ctx.is_trivial_path() => ascription,\n+pub(crate) fn complete_inferred_type(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) -> Option<()> {\n+    let pat = match path_ctx {\n+        PathCompletionCtx {\n+            kind: PathKind::Type { location: TypeLocation::TypeAscription(ascription), .. },\n+            ..\n+        } if path_ctx.is_trivial_path() => ascription,\n         _ => return None,\n     };\n     let x = match pat {"}, {"sha": "9ffcee400d9cfbf9f004c3b12dda4d63b7e86dc1", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -12,9 +12,13 @@ use crate::{\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n-pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualified, name_ref, use_tree_parent) = match ctx.nameref_ctx() {\n-        Some(NameRefContext {\n+pub(crate) fn complete_use_tree(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name_ref_ctx: &NameRefContext,\n+) {\n+    let (qualified, name_ref, use_tree_parent) = match name_ref_ctx {\n+        NameRefContext {\n             kind:\n                 Some(NameRefKind::Path(PathCompletionCtx {\n                     kind: PathKind::Use,\n@@ -24,7 +28,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                 })),\n             nameref,\n             ..\n-        }) => (qualified, nameref, use_tree_parent),\n+        } => (qualified, nameref, use_tree_parent),\n         _ => return,\n     };\n "}, {"sha": "18513039e6747a0b74da5b6b4cb9926c1aa73963", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -7,9 +7,13 @@ use crate::{\n     Completions,\n };\n \n-pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualified, &has_in_token) = match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Vis { has_in_token }, qualified, .. }) => {\n+pub(crate) fn complete_vis_path(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx: &PathCompletionCtx,\n+) {\n+    let (qualified, &has_in_token) = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Vis { has_in_token }, qualified, .. } => {\n             (qualified, has_in_token)\n         }\n         _ => return,"}, {"sha": "825047c5cf96408a0477286a0d94a46621a68a78", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -362,27 +362,15 @@ impl<'a> CompletionContext<'a> {\n         FamousDefs(&self.sema, self.krate)\n     }\n \n+    // FIXME: This shouldn't exist\n     pub(super) fn nameref_ctx(&self) -> Option<&NameRefContext> {\n         match &self.ident_ctx {\n             IdentContext::NameRef(it) => Some(it),\n             _ => None,\n         }\n     }\n \n-    pub(super) fn name_ctx(&self) -> Option<&NameContext> {\n-        match &self.ident_ctx {\n-            IdentContext::Name(it) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    pub(super) fn lifetime_ctx(&self) -> Option<&LifetimeContext> {\n-        match &self.ident_ctx {\n-            IdentContext::Lifetime(it) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n+    // FIXME: This shouldn't exist\n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match self.nameref_ctx() {\n             Some(NameRefContext {\n@@ -393,17 +381,15 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn has_dot_receiver(&self) -> bool {\n-        self.dot_receiver().is_some()\n-    }\n-\n+    // FIXME: This shouldn't exist\n     pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n         self.nameref_ctx().and_then(|ctx| match &ctx.kind {\n             Some(NameRefKind::Path(path)) => Some(path),\n             _ => None,\n         })\n     }\n \n+    // FIXME: This shouldn't exist\n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n         self.path_context().and_then(|it| match &it.qualified {\n             Qualified::With { path, .. } => Some(path),"}, {"sha": "e0e4926463c7fabd05acc334a6184f535285654a", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 91, "deletions": 30, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -23,7 +23,14 @@ use ide_db::{\n use syntax::algo;\n use text_edit::TextEdit;\n \n-use crate::{completions::Completions, context::CompletionContext};\n+use crate::{\n+    completions::Completions,\n+    context::{\n+        CompletionContext,\n+        IdentContext::{self, NameRef},\n+        NameRefContext, NameRefKind,\n+    },\n+};\n \n pub use crate::{\n     config::{CallableSnippets, CompletionConfig},\n@@ -145,40 +152,94 @@ pub fn completions(\n     trigger_character: Option<char>,\n ) -> Option<Completions> {\n     let ctx = &CompletionContext::new(db, position, config)?;\n-    let mut acc = Completions::default();\n+    let mut completions = Completions::default();\n \n-    {\n-        let acc = &mut acc;\n+    // prevent `(` from triggering unwanted completion noise\n+    if trigger_character == Some('(') {\n+        if let NameRef(NameRefContext { kind: Some(NameRefKind::Path(path_ctx)), .. }) =\n+            &ctx.ident_ctx\n+        {\n+            completions::vis::complete_vis_path(&mut completions, ctx, path_ctx);\n+        }\n         // prevent `(` from triggering unwanted completion noise\n-        if trigger_character != Some('(') {\n-            completions::attribute::complete_attribute(acc, ctx);\n-            completions::attribute::complete_derive(acc, ctx);\n-            completions::attribute::complete_known_attribute_input(acc, ctx);\n-            completions::dot::complete_dot(acc, ctx);\n-            completions::expr::complete_expr_path(acc, ctx);\n-            completions::extern_abi::complete_extern_abi(acc, ctx);\n-            completions::field::complete_field_list(acc, ctx);\n-            completions::flyimport::import_on_the_fly(acc, ctx);\n-            completions::fn_param::complete_fn_param(acc, ctx);\n-            completions::format_string::format_string(acc, ctx);\n-            completions::item_list::complete_item_list(acc, ctx);\n-            completions::keyword::complete_expr_keyword(acc, ctx);\n-            completions::lifetime::complete_label(acc, ctx);\n-            completions::lifetime::complete_lifetime(acc, ctx);\n-            completions::mod_::complete_mod(acc, ctx);\n-            completions::pattern::complete_pattern(acc, ctx);\n-            completions::postfix::complete_postfix(acc, ctx);\n-            completions::record::complete_record(acc, ctx);\n-            completions::snippet::complete_expr_snippet(acc, ctx);\n-            completions::snippet::complete_item_snippet(acc, ctx);\n-            completions::r#type::complete_type_path(acc, ctx);\n-            completions::r#type::complete_inferred_type(acc, ctx);\n-            completions::use_::complete_use_tree(acc, ctx);\n+        return Some(completions);\n+    }\n+\n+    {\n+        let acc = &mut completions;\n+\n+        match &ctx.ident_ctx {\n+            IdentContext::Name(name_ctx) => {\n+                completions::field::complete_field_list_record_variant(acc, ctx, name_ctx);\n+                completions::mod_::complete_mod(acc, ctx, name_ctx);\n+                completions::item_list::trait_impl::complete_trait_impl_name(acc, ctx, name_ctx);\n+            }\n+            NameRef(name_ref_ctx @ NameRefContext { kind, .. }) => {\n+                completions::expr::complete_expr_path(acc, ctx, name_ref_ctx);\n+                completions::field::complete_field_list_tuple_variant(acc, ctx, name_ref_ctx);\n+                completions::use_::complete_use_tree(acc, ctx, name_ref_ctx);\n+                completions::item_list::complete_item_list(acc, ctx, name_ref_ctx);\n+                match kind {\n+                    Some(NameRefKind::Path(path_ctx)) => {\n+                        completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n+                        completions::attribute::complete_attribute(acc, ctx, path_ctx);\n+                        completions::attribute::complete_derive(acc, ctx, path_ctx);\n+                        completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n+                        completions::pattern::pattern_path_completion(acc, ctx, path_ctx);\n+                        completions::r#type::complete_inferred_type(acc, ctx, path_ctx);\n+                        completions::r#type::complete_type_path(acc, ctx, path_ctx);\n+                        completions::snippet::complete_expr_snippet(acc, ctx, path_ctx);\n+                        completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n+                        completions::vis::complete_vis_path(acc, ctx, path_ctx);\n+                    }\n+                    Some(NameRefKind::DotAccess(dot_access)) => {\n+                        completions::dot::complete_dot(acc, ctx, dot_access);\n+                        completions::postfix::complete_postfix(acc, ctx, dot_access);\n+                    }\n+                    Some(NameRefKind::Keyword(item)) => {\n+                        completions::keyword::complete_special_keywords(acc, ctx, item);\n+                    }\n+                    Some(NameRefKind::RecordExpr(record_expr)) => {\n+                        completions::record::complete_record_expr_fields_record_expr(\n+                            acc,\n+                            ctx,\n+                            record_expr,\n+                        );\n+                    }\n+                    None => (),\n+                }\n+            }\n+            IdentContext::Lifetime(lifetime_ctx) => {\n+                completions::lifetime::complete_label(acc, ctx, lifetime_ctx);\n+                completions::lifetime::complete_lifetime(acc, ctx, lifetime_ctx);\n+            }\n+            IdentContext::String { original, expanded: Some(expanded) } => {\n+                completions::extern_abi::complete_extern_abi(acc, ctx, expanded);\n+                completions::format_string::format_string(acc, ctx, original, expanded);\n+            }\n+            IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: Some(attr) } => {\n+                completions::attribute::complete_known_attribute_input(acc, ctx, attr);\n+            }\n+            IdentContext::UnexpandedAttrTT { .. } | IdentContext::String { .. } => (),\n         }\n-        completions::vis::complete_vis_path(acc, ctx);\n+\n+        if let Some(pattern_ctx) = &ctx.pattern_ctx {\n+            completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+            completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+            // FIXME: this check is odd, we shouldn't need this?\n+            if !matches!(\n+                ctx.ident_ctx,\n+                IdentContext::NameRef(NameRefContext { kind: Some(NameRefKind::Path(_)), .. })\n+            ) {\n+                completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n+            }\n+        }\n+\n+        // FIXME: This should be split\n+        completions::flyimport::import_on_the_fly(acc, ctx);\n     }\n \n-    Some(acc)\n+    Some(completions)\n }\n \n /// Resolves additional completion data at the position given."}, {"sha": "68908e330a45b5c31f61b6e3eda3af9c0aa40901", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -17,7 +17,7 @@ use ide_db::{\n use syntax::{SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind},\n+    context::{IdentContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind},\n     item::{Builder, CompletionRelevanceTypeMatch},\n     render::{function::render_fn, literal::render_variant_lit, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n@@ -75,7 +75,13 @@ impl<'a> RenderContext<'a> {\n     }\n \n     pub(crate) fn path_is_call(&self) -> bool {\n-        self.completion.path_context().map_or(false, |it| it.has_call_parens)\n+        matches!(\n+            self.completion.ident_ctx,\n+            IdentContext::NameRef(NameRefContext {\n+                kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+                ..\n+            })\n+        )\n     }\n \n     fn is_deprecated(&self, def: impl HasAttrs) -> bool {\n@@ -285,8 +291,15 @@ fn render_resolution_simple_(\n \n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n-        ctx.completion.path_context(),\n-        Some(PathCompletionCtx { kind: PathKind::Type { .. }, has_type_args: false, .. })\n+        ctx.completion.ident_ctx,\n+        IdentContext::NameRef(NameRefContext {\n+            kind: Some(NameRefKind::Path(PathCompletionCtx {\n+                kind: PathKind::Type { .. },\n+                has_type_args: false,\n+                ..\n+            })),\n+            ..\n+        })\n     ) && ctx.completion.config.callable.is_some();\n     if type_path_no_ty_args {\n         if let Some(cap) = ctx.snippet_cap() {\n@@ -937,7 +950,6 @@ fn main() -> RawIdentTable {\n \n     #[test]\n     fn no_parens_in_use_item() {\n-        cov_mark::check!(no_parens_in_use_item);\n         check_edit(\n             \"foo\",\n             r#\""}, {"sha": "ad240503c14b15a61d2885b97cac65001ef936cf", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 47, "deletions": 49, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -8,7 +8,7 @@ use syntax::SmolStr;\n \n use crate::{\n     context::{\n-        CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind,\n+        CompletionContext, DotAccess, DotAccessKind, IdentContext, NameRefContext, NameRefKind,\n         PathCompletionCtx, PathKind,\n     },\n     item::{Builder, CompletionItem, CompletionItemKind, CompletionRelevance},\n@@ -91,9 +91,10 @@ fn render(\n         .lookup_by(name.to_smol_str());\n \n     match completion.config.snippet_cap {\n-        Some(cap) if should_add_parens(completion) => {\n-            let (self_param, params) = params(completion, func, &func_kind);\n-            add_call_parens(&mut item, completion, cap, call, self_param, params);\n+        Some(cap) => {\n+            if let Some((self_param, params)) = params(completion, func, &func_kind) {\n+                add_call_parens(&mut item, completion, cap, call, self_param, params);\n+            }\n         }\n         _ => (),\n     }\n@@ -194,48 +195,6 @@ fn ref_of_param(ctx: &CompletionContext, arg: &str, ty: &hir::Type) -> &'static\n     \"\"\n }\n \n-fn should_add_parens(ctx: &CompletionContext) -> bool {\n-    if ctx.config.callable.is_none() {\n-        return false;\n-    }\n-\n-    match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }) => {\n-            return false\n-        }\n-        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }) => {\n-            cov_mark::hit!(no_parens_in_use_item);\n-            return false;\n-        }\n-        _ => {}\n-    };\n-\n-    if matches!(\n-        ctx.nameref_ctx(),\n-        Some(NameRefContext {\n-            kind: Some(NameRefKind::DotAccess(DotAccess {\n-                kind: DotAccessKind::Method { has_parens: true },\n-                ..\n-            })),\n-            ..\n-        })\n-    ) {\n-        return false;\n-    }\n-\n-    // Don't add parentheses if the expected type is some function reference.\n-    if let Some(ty) = &ctx.expected_type {\n-        // FIXME: check signature matches?\n-        if ty.is_fn() {\n-            cov_mark::hit!(no_call_parens_if_fn_ptr_needed);\n-            return false;\n-        }\n-    }\n-\n-    // Nothing prevents us from adding parentheses\n-    true\n-}\n-\n fn detail(db: &dyn HirDatabase, func: hir::Function) -> String {\n     let mut ret_ty = func.ret_type(db);\n     let mut detail = String::new();\n@@ -285,13 +244,52 @@ fn params(\n     ctx: &CompletionContext<'_>,\n     func: hir::Function,\n     func_kind: &FuncKind,\n-) -> (Option<hir::SelfParam>, Vec<hir::Param>) {\n-    let self_param = if ctx.has_dot_receiver() || matches!(func_kind, FuncKind::Method(Some(_))) {\n+) -> Option<(Option<hir::SelfParam>, Vec<hir::Param>)> {\n+    if ctx.config.callable.is_none() {\n+        return None;\n+    }\n+\n+    let has_dot_receiver = match ctx.ident_ctx {\n+        IdentContext::NameRef(NameRefContext {\n+            kind:\n+                Some(NameRefKind::DotAccess(DotAccess {\n+                    kind: DotAccessKind::Method { has_parens: true },\n+                    ..\n+                })),\n+            ..\n+        }) => return None,\n+        IdentContext::NameRef(NameRefContext {\n+            kind: Some(NameRefKind::DotAccess(DotAccess { .. })),\n+            ..\n+        }) => true,\n+        IdentContext::NameRef(NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(\n+                    PathCompletionCtx {\n+                        kind: PathKind::Expr { .. }, has_call_parens: true, ..\n+                    }\n+                    | PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. },\n+                )),\n+            ..\n+        }) => return None,\n+        _ => false,\n+    };\n+\n+    // Don't add parentheses if the expected type is some function reference.\n+    if let Some(ty) = &ctx.expected_type {\n+        // FIXME: check signature matches?\n+        if ty.is_fn() {\n+            cov_mark::hit!(no_call_parens_if_fn_ptr_needed);\n+            return None;\n+        }\n+    }\n+\n+    let self_param = if has_dot_receiver || matches!(func_kind, FuncKind::Method(Some(_))) {\n         None\n     } else {\n         func.self_param(ctx.db)\n     };\n-    (self_param, func.params_without_self(ctx.db))\n+    Some((self_param, func.params_without_self(ctx.db)))\n }\n \n #[cfg(test)]"}, {"sha": "1e03d066d1413745c2a9d409d672c892fbda43db", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -4,7 +4,9 @@ use hir::{db::HirDatabase, Documentation, HasAttrs, StructKind};\n use ide_db::SymbolKind;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind},\n+    context::{\n+        CompletionContext, IdentContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind,\n+    },\n     item::{Builder, CompletionItem},\n     render::{\n         compute_ref_match, compute_type_match,\n@@ -51,12 +53,19 @@ fn render(\n ) -> Option<Builder> {\n     let db = completion.db;\n     let mut kind = thing.kind(db);\n-    let should_add_parens = match completion.path_context() {\n-        Some(PathCompletionCtx { has_call_parens: true, .. }) => false,\n-        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }) => {\n-            cov_mark::hit!(no_parens_in_use_item);\n-            false\n-        }\n+    let should_add_parens = match &completion.ident_ctx {\n+        IdentContext::NameRef(NameRefContext {\n+            kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+            ..\n+        }) => false,\n+        IdentContext::NameRef(NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Use | PathKind::Type { .. },\n+                    ..\n+                })),\n+            ..\n+        }) => false,\n         _ => true,\n     };\n "}, {"sha": "26690d22abe92ac011ccca0abe5cf5e59b4840d6", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -5,7 +5,7 @@ use ide_db::SymbolKind;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind},\n+    context::{IdentContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind},\n     item::{Builder, CompletionItem},\n     render::RenderContext,\n };\n@@ -33,10 +33,11 @@ fn render(\n     let is_fn_like = macro_.is_fn_like(completion.db);\n     let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    let needs_bang = match completion.path_context() {\n-        Some(PathCompletionCtx { kind, has_macro_bang, .. }) => {\n-            is_fn_like && *kind != PathKind::Use && !has_macro_bang\n-        }\n+    let needs_bang = match &completion.ident_ctx {\n+        IdentContext::NameRef(NameRefContext {\n+            kind: Some(NameRefKind::Path(PathCompletionCtx { kind, has_macro_bang, .. })),\n+            ..\n+        }) => is_fn_like && *kind != PathKind::Use && !has_macro_bang,\n         _ => is_fn_like,\n     };\n "}, {"sha": "33f169c1b9b4b902443cc7241c7b58174e5d2b73", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -6,7 +6,9 @@ use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{ParamKind, PathCompletionCtx, PatternContext},\n+    context::{\n+        IdentContext, NameRefContext, NameRefKind, ParamKind, PathCompletionCtx, PatternContext,\n+    },\n     render::{variant::visible_fields, RenderContext},\n     CompletionItem, CompletionItemKind,\n };\n@@ -78,8 +80,11 @@ fn render_pat(\n     fields_omitted: bool,\n ) -> Option<String> {\n     let has_call_parens = matches!(\n-        ctx.completion.path_context(),\n-        Some(PathCompletionCtx { has_call_parens: true, .. })\n+        ctx.completion.ident_ctx,\n+        IdentContext::NameRef(NameRefContext {\n+            kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+            ..\n+        })\n     );\n     let mut pat = match kind {\n         StructKind::Tuple if !has_call_parens => {"}, {"sha": "d9b31832085c3d5527aab0d41ce44e265557de3a", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -160,8 +160,6 @@ fn main() {\n \"#,\n         expect![[r#\"\n             fd ..Default::default()\n-            fd foo1                 u32\n-            fd foo2                 u32\n             fn main()               fn()\n             lc foo                  Foo\n             lc thing                i32"}, {"sha": "3134915bdab1883127e6f4803aaefa048260fc62", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=00fdb4a3d8f934fd57f0a659d39db72e0dfb47eb", "patch": "@@ -179,7 +179,6 @@ impl Foo {\n \n #[test]\n fn enum_no_parens_in_qualified_use_tree() {\n-    cov_mark::check!(no_parens_in_use_item);\n     cov_mark::check!(enum_plain_qualified_use_tree);\n     check(\n         r#\""}]}