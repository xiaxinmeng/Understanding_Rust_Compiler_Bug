{"sha": "a791205e76fe9619f90d4869ab54e4213847b8fe", "node_id": "C_kwDOAAsO6NoAKGE3OTEyMDVlNzZmZTk2MTlmOTBkNDg2OWFiNTRlNDIxMzg0N2I4ZmU", "commit": {"author": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-11T20:16:49Z"}, "committer": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-11T20:16:49Z"}, "message": "fix clippy warning", "tree": {"sha": "9c06b37fa1dc50e6e16856bebaece1035fbaafea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c06b37fa1dc50e6e16856bebaece1035fbaafea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a791205e76fe9619f90d4869ab54e4213847b8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a791205e76fe9619f90d4869ab54e4213847b8fe", "html_url": "https://github.com/rust-lang/rust/commit/a791205e76fe9619f90d4869ab54e4213847b8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a791205e76fe9619f90d4869ab54e4213847b8fe/comments", "author": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344888a5820c2ae2d7c88ecf14bcaffb60ca2bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/344888a5820c2ae2d7c88ecf14bcaffb60ca2bc5", "html_url": "https://github.com/rust-lang/rust/commit/344888a5820c2ae2d7c88ecf14bcaffb60ca2bc5"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "ee119e8c4a4f9dcd3e3c7c0936e4829275e1a27e", "filename": "clippy_lints/src/rc_clone_in_vec_init.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a791205e76fe9619f90d4869ab54e4213847b8fe/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a791205e76fe9619f90d4869ab54e4213847b8fe/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=a791205e76fe9619f90d4869ab54e4213847b8fe", "patch": "@@ -92,6 +92,8 @@ fn construct_lint_suggestions(\n fn elem_snippet(cx: &LateContext<'_>, elem: &Expr<'_>, symbol_name: &str) -> String {\n     let elem_snippet = snippet(cx, elem.span, \"..\").to_string();\n     if elem_snippet.contains('\\n') {\n+        // This string must be found in `elem_snippet`, otherwise we won't be constructing\n+        // the snippet in the first place.\n         let reference_creation = format!(\"{symbol_name}::new\");\n         let (code_until_reference_creation, _right) = elem_snippet.split_once(&reference_creation).unwrap();\n \n@@ -132,14 +134,14 @@ fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<\n             let suggestions = construct_lint_suggestions(cx, lint_span, symbol_name, elem, len);\n \n             diag.note(format!(\"each element will point to the same `{symbol_name}` instance\"));\n-            suggestions.iter().for_each(|suggestion| {\n+            for suggestion in suggestions {\n                 diag.span_suggestion(\n                     lint_span,\n                     &suggestion.message,\n                     &suggestion.snippet,\n                     Applicability::Unspecified,\n                 );\n-            });\n+            }\n         },\n     );\n }"}]}