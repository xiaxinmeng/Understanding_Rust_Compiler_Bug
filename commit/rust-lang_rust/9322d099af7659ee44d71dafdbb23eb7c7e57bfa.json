{"sha": "9322d099af7659ee44d71dafdbb23eb7c7e57bfa", "node_id": "C_kwDOAAsO6NoAKDkzMjJkMDk5YWY3NjU5ZWU0NGQ3MWRhZmRiYjIzZWI3YzdlNTdiZmE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-11T11:06:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-11T11:06:13Z"}, "message": "Check that error code explanations are listed in error_codes.rs", "tree": {"sha": "9ceb31104bc5c0c94736985aff8c9f48c249abdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ceb31104bc5c0c94736985aff8c9f48c249abdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9322d099af7659ee44d71dafdbb23eb7c7e57bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9322d099af7659ee44d71dafdbb23eb7c7e57bfa", "html_url": "https://github.com/rust-lang/rust/commit/9322d099af7659ee44d71dafdbb23eb7c7e57bfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9322d099af7659ee44d71dafdbb23eb7c7e57bfa/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf242bb1199e25ca2274df5c4114e0c9436b74e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf242bb1199e25ca2274df5c4114e0c9436b74e9", "html_url": "https://github.com/rust-lang/rust/commit/bf242bb1199e25ca2274df5c4114e0c9436b74e9"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "2a23d72edc06409029ebc5f1d631c662f56b833b", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9322d099af7659ee44d71dafdbb23eb7c7e57bfa/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9322d099af7659ee44d71dafdbb23eb7c7e57bfa/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=9322d099af7659ee44d71dafdbb23eb7c7e57bfa", "patch": "@@ -1,7 +1,7 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n use std::path::Path;\n@@ -205,6 +205,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     let mut found_explanations = 0;\n     let mut found_tests = 0;\n     let mut error_codes: HashMap<String, ErrorCodeStatus> = HashMap::new();\n+    let mut explanations: HashSet<String> = HashSet::new();\n     // We want error codes which match the following cases:\n     //\n     // * foo(a, E0111, a)\n@@ -218,17 +219,27 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     for path in paths {\n         super::walk(path, &mut |path| super::filter_dirs(path), &mut |entry, contents| {\n             let file_name = entry.file_name();\n+            let entry_path = entry.path();\n+\n             if file_name == \"error_codes.rs\" {\n                 extract_error_codes(contents, &mut error_codes, entry.path(), &mut errors);\n                 found_explanations += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"stderr\")) {\n                 extract_error_codes_from_tests(contents, &mut error_codes);\n                 found_tests += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"rs\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"rs\")) {\n                 let path = entry.path().to_string_lossy();\n                 if PATHS_TO_IGNORE_FOR_EXTRACTION.iter().all(|c| !path.contains(c)) {\n                     extract_error_codes_from_source(contents, &mut error_codes, &regex);\n                 }\n+            } else if entry_path\n+                .parent()\n+                .and_then(|p| p.file_name())\n+                .map(|p| p == \"error_codes\")\n+                .unwrap_or(false)\n+                && entry_path.extension() == Some(OsStr::new(\"md\"))\n+            {\n+                explanations.insert(file_name.to_str().unwrap().replace(\".md\", \"\"));\n             }\n         });\n     }\n@@ -240,6 +251,10 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         eprintln!(\"No error code was found in compilation errors!\");\n         *bad = true;\n     }\n+    if explanations.is_empty() {\n+        eprintln!(\"No error code explanation was found!\");\n+        *bad = true;\n+    }\n     if errors.is_empty() {\n         println!(\"Found {} error codes\", error_codes.len());\n \n@@ -282,11 +297,21 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n             }\n         }\n     }\n+    if errors.is_empty() {\n+        for explanation in explanations {\n+            if !error_codes.contains_key(&explanation) {\n+                errors.push(format!(\n+                    \"{} error code explanation should be listed in `error_codes.rs`\",\n+                    explanation\n+                ));\n+            }\n+        }\n+    }\n     errors.sort();\n     for err in &errors {\n         eprintln!(\"{}\", err);\n     }\n-    println!(\"Found {} error codes with no tests\", errors.len());\n+    println!(\"Found {} error(s) in error codes\", errors.len());\n     if !errors.is_empty() {\n         *bad = true;\n     }"}]}