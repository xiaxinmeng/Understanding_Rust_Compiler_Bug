{"sha": "5918d9b96f4c226827cc147b119890fdafb874f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MThkOWI5NmY0YzIyNjgyN2NjMTQ3YjExOTg5MGZkYWZiODc0ZjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-01-19T00:18:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-01-29T22:08:44Z"}, "message": "Release notes for 1.6", "tree": {"sha": "2725f753b9910c4e0e57020074eb9428484b4425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2725f753b9910c4e0e57020074eb9428484b4425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5918d9b96f4c226827cc147b119890fdafb874f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5918d9b96f4c226827cc147b119890fdafb874f0", "html_url": "https://github.com/rust-lang/rust/commit/5918d9b96f4c226827cc147b119890fdafb874f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5918d9b96f4c226827cc147b119890fdafb874f0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f196bcc3b23925854e3d758c03f56c7520e9b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f196bcc3b23925854e3d758c03f56c7520e9b99", "html_url": "https://github.com/rust-lang/rust/commit/0f196bcc3b23925854e3d758c03f56c7520e9b99"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "9a8eb80aedf22c832477792e1033a3cac2501642", "filename": "RELEASES.md", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/5918d9b96f4c226827cc147b119890fdafb874f0/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5918d9b96f4c226827cc147b119890fdafb874f0/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5918d9b96f4c226827cc147b119890fdafb874f0", "patch": "@@ -1,3 +1,156 @@\n+Version 1.6.0 (2016-01-21)\n+==========================\n+\n+Language\n+--------\n+\n+* The `#![no_std]` attribute causes a crate to not be linked to the\n+  standard library, but only the [core library][1.6co], as described\n+  in [RFC 1184]. The core library defines common types and traits but\n+  has no platform dependencies whatsoever, and is the basis for Rust\n+  software in environments that cannot support a full port of the\n+  standard library, such as operating systems. Most of the core\n+  library is now stable.\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  [`Read::read_exact`], [`ErrorKind::UnexpectedEof`] (renamed from\n+  `UnexpectedEOF`), [`fs::DirBuilder`], [`fs::DirBuilder::new`],\n+  [`fs::DirBuilder::recursive`], [`fs::DirBuilder::create`],\n+  [`os::unix::fs::DirBuilderExt`],\n+  [`os::unix::fs::DirBuilderExt::mode`], [`vec::Drain`],\n+  [`vec::Vec::drain`], [`string::Drain`], [`string::String::drain`],\n+  [`vec_deque::Drain`], [`vec_deque::VecDeque::drain`],\n+  [`collections::hash_map::Drain`],\n+  [`collections::hash_map::HashMap::drain`],\n+  [`collections::hash_set::Drain`],\n+  [`collections::hash_set::HashSet::drain`],\n+  [`collections::binary_heap::Drain`],\n+  [`collections::binary_heap::BinaryHeap::drain`],\n+  [`Vec::extend_from_slice`] (renamed from `push_all`),\n+  [`Mutex::get_mut`], [`Mutex::into_inner`], [`RwLock::get_mut`],\n+  [`RwLock::into_inner`], [`Iterator::min_by_key`] (renamed from\n+  `min_by`), [`Iterator::max_by_key`] (renamed from `max_by`).\n+* The [core library][1.6co] is stable, as are most of its APIs.\n+* [The `assert_eq!` macro supports arguments that don't implement\n+  `Sized`][1.6ae], such as arrays. In this way it behaves more like\n+  `assert!`.\n+* Several timer functions that take duration in milliseconds [are\n+  deprecated in favor of those that take `Duration`][1.6ms]. These\n+  include `Condvar::wait_timeout_ms`, `thread::sleep_ms`, and\n+  `thread::park_timeout_ms`.\n+* The algorithm by which `Vec` reserves additional elements was\n+  [tweaked to not allocate excessive space][1.6a] while still growing\n+  exponentially.\n+* `From` conversions are [implemented from integers to floats][1.6f]\n+  in cases where the conversion is lossless. Thus they are not\n+  implemented for 32-bit ints to `f32`, nor for 64-bit ints to `f32`\n+  or `f64`. They are also not implemented for `isize` and `usize`\n+  because the implementations would be platform-specific. `From` is\n+  also implemented from `f32` to `f64`.\n+* `From<&Path>` and `From<PathBuf>` are implemented for `Cow<Path>`.\n+* `From<T>` is implemented for `Box<T>`, `Rc<T>` and `Arc<T>`.\n+* `IntoIterator` is implemented for `&PathBuf` and `&Path`.\n+* [`BinaryHeap` was refactored][1.6bh] for modest performance\n+  improvements.\n+* Sorting slices that are already sorted [is 50% faster in some\n+  cases][1.6s].\n+\n+Cargo\n+-----\n+\n+* Cargo will look in `$CARGO_HOME/bin` for subcommands [by default][1.6c].\n+* Cargo build scripts can specify their dependencies by emitting the\n+  [`rerun-if-changed`][1.6rr] key.\n+* crates.io will reject publication of crates with dependencies that\n+  have a wildcard version constraint. Crates with wildcard\n+  dependencies were seen to cause a variety of problems, as described\n+  in [RFC 1241]. Since 1.5 publication of such crates has emitted a\n+  warning.\n+* `cargo clean` [accepts a `--release` flag][1.6cc] to clean the\n+  release folder.  A variety of artifacts that Cargo failed to clean\n+  are now correctly deleted.\n+\n+Misc\n+----\n+\n+* The `unreachable_code` lint [warns when a function call's argument\n+  diverges][1.6dv].\n+* The parser indicates [failures that may be caused by\n+  confusingly-similar Unicode characters][1.6uc]\n+* Certain macro errors [are reported at definition time][1.6m], not\n+  expansion.\n+\n+Compatibility Notes\n+-------------------\n+\n+* The compiler no longer makes use of the [`RUST_PATH`][1.6rp]\n+  environment variable when locating crates. This was a pre-cargo\n+  feature for integrating with the package manager that was\n+  accidentally never removed.\n+* [A number of bugs were fixed in the privacy checker][1.6p] that\n+  could cause previously-accepted code to break.\n+* [Modules and unit/tuple structs may not share the same name][1.6ts].\n+* [Bugs in pattern matching unit structs were fixed][1.6us]. The tuple\n+  struct pattern syntax (`Foo(..)`) can no longer be used to match\n+  unit structs. This is a warning now, but will become an error in\n+  future releases. Patterns that share the same name as a const are\n+  now an error.\n+* A bug was fixed that causes [rustc not to apply default type\n+  parameters][1.6xc] when resolving certain method implementations of\n+  traits defined in other crates.\n+\n+[1.6a]: https://github.com/rust-lang/rust/pull/29454\n+[1.6ae]: https://github.com/rust-lang/rust/pull/29770\n+[1.6bh]: https://github.com/rust-lang/rust/pull/29811\n+[1.6c]: https://github.com/rust-lang/cargo/pull/2192\n+[1.6cc]: https://github.com/rust-lang/cargo/pull/2131\n+[1.6co]: http://doc.rust-lang.org/beta/core/index.html\n+[1.6dv]: https://github.com/rust-lang/rust/pull/30000\n+[1.6f]: https://github.com/rust-lang/rust/pull/29129\n+[1.6m]: https://github.com/rust-lang/rust/pull/29828\n+[1.6ms]: https://github.com/rust-lang/rust/pull/29604\n+[1.6p]: https://github.com/rust-lang/rust/pull/29726\n+[1.6rp]: https://github.com/rust-lang/rust/pull/30034\n+[1.6rr]: https://github.com/rust-lang/cargo/pull/2134\n+[1.6s]: https://github.com/rust-lang/rust/pull/29675\n+[1.6ts]: https://github.com/rust-lang/rust/issues/21546\n+[1.6uc]: https://github.com/rust-lang/rust/pull/29837\n+[1.6us]: https://github.com/rust-lang/rust/pull/29383\n+[1.6xc]: https://github.com/rust-lang/rust/issues/30123\n+[RFC 1184]: https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md\n+[RFC 1241]: https://github.com/rust-lang/rfcs/blob/master/text/1241-no-wildcard-deps.md\n+[`ErrorKind::UnexpectedEof`]: http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html#variant.UnexpectedEof\n+[`Iterator::max_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.max_by_key\n+[`Iterator::min_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.min_by_key\n+[`Mutex::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.get_mut\n+[`Mutex::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.into_inner\n+[`Read::read_exact`]: http://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_exact\n+[`RwLock::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.get_mut\n+[`RwLock::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.into_inner\n+[`Vec::extend_from_slice`]: http://doc.rust-lang.org/nightly/collections/vec/struct.Vec.html#method.extend_from_slice\n+[`collections::binary_heap::BinaryHeap::drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.BinaryHeap.html#method.drain\n+[`collections::binary_heap::Drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.Drain.html\n+[`collections::hash_map::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.Drain.html\n+[`collections::hash_map::HashMap::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.HashMap.html#method.drain\n+[`collections::hash_set::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.Drain.html\n+[`collections::hash_set::HashSet::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.HashSet.html#method.drain\n+[`fs::DirBuilder::create`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.create\n+[`fs::DirBuilder::new`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.new\n+[`fs::DirBuilder::recursive`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.recursive\n+[`fs::DirBuilder`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html\n+[`os::unix::fs::DirBuilderExt::mode`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html#tymethod.mode\n+[`os::unix::fs::DirBuilderExt`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html\n+[`string::Drain`]: http://doc.rust-lang.org/nightly/std/string/struct.Drain.html\n+[`string::String::drain`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.drain\n+[`vec::Drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Drain.html\n+[`vec::Vec::drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain\n+[`vec_deque::Drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.Drain.html\n+[`vec_deque::VecDeque::drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.VecDeque.html#method.drain\n+\n+\n Version 1.5.0 (2015-12-10)\n ==========================\n "}]}