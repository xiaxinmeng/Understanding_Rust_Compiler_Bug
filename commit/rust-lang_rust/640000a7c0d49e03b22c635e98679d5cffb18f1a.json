{"sha": "640000a7c0d49e03b22c635e98679d5cffb18f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDAwMGE3YzBkNDllMDNiMjJjNjM1ZTk4Njc5ZDVjZmZiMThmMWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-20T10:16:59Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:27Z"}, "message": "fix treatment of parameters and associated types", "tree": {"sha": "2b75623419f81650b81c812442e5808ee95d7687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b75623419f81650b81c812442e5808ee95d7687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640000a7c0d49e03b22c635e98679d5cffb18f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640000a7c0d49e03b22c635e98679d5cffb18f1a", "html_url": "https://github.com/rust-lang/rust/commit/640000a7c0d49e03b22c635e98679d5cffb18f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640000a7c0d49e03b22c635e98679d5cffb18f1a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc5a87c08fb1e9c6214e3370c78e3c217a0bae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc5a87c08fb1e9c6214e3370c78e3c217a0bae4", "html_url": "https://github.com/rust-lang/rust/commit/1cc5a87c08fb1e9c6214e3370c78e3c217a0bae4"}], "stats": {"total": 113, "additions": 96, "deletions": 17}, "files": [{"sha": "f824ec50dc45f892a0247d95dbef49ca9f2ccd35", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 50, "deletions": 17, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=640000a7c0d49e03b22c635e98679d5cffb18f1a", "patch": "@@ -1142,23 +1142,45 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             });\n         }\n \n-        match self_ty.sty {\n-            ty::ty_trait(..) => {},\n-            ty::ty_infer(ty::TyVar(_)) => {\n-                // the defaulted impl might apply, we don't know\n-                if ty::trait_has_default_impl(self.tcx(), def_id) {\n+        if ty::trait_has_default_impl(self.tcx(), def_id) {\n+            match self_ty.sty {\n+                ty::ty_trait(..) |\n+                ty::ty_param(..) |\n+                ty::ty_projection(..) => {\n+                    // In these cases, we don't know what the actual\n+                    // type is.  Therefore, we cannot break it down\n+                    // into its constituent types. So we don't\n+                    // consider the `..` impl but instead just add no\n+                    // candidates: this means that typeck will only\n+                    // succeed if there is another reason to believe\n+                    // that this obligation holds. That could be a\n+                    // where-clause or, in the case of an object type,\n+                    // it could be that the object type lists the\n+                    // trait (e.g. `Foo+Send : Send`). See\n+                    // `compile-fail/typeck-default-trait-impl-send-param.rs`\n+                    // for an example of a test case that exercises\n+                    // this path.\n+                }\n+                ty::ty_infer(ty::TyVar(_)) => {\n+                    // the defaulted impl might apply, we don't know\n                     candidates.ambiguous = true;\n                 }\n-            }\n-            _ => {\n-                if ty::trait_has_default_impl(self.tcx(), def_id) {\n-                    match self.constituent_types_for_ty(self_ty) {\n-                        Some(_) => {\n-                            candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n-                        }\n-                        None => {\n-                            candidates.ambiguous = true;\n-                        }\n+                _ => {\n+                    if self.constituent_types_for_ty(self_ty).is_some() {\n+                        candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+                    } else {\n+                        // We don't yet know what the constituent\n+                        // types are. So call it ambiguous for now,\n+                        // though this is a bit stronger than\n+                        // necessary: that is, we know that the\n+                        // defaulted impl applies, but we can't\n+                        // process the confirmation step without\n+                        // knowing the constituent types. (Anyway, in\n+                        // the particular case of defaulted impls, it\n+                        // doesn't really matter much either way,\n+                        // since we won't be aiding inference by\n+                        // processing the confirmation step.)\n+                        candidates.ambiguous = true;\n                     }\n                 }\n             }\n@@ -1632,6 +1654,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    /// For default impls, we need to break apart a type into its\n+    /// \"constituent types\" -- meaning, the types that it contains.\n+    ///\n+    /// Here are some (simple) examples:\n+    ///\n+    /// ```\n+    /// (i32, u32) -> [i32, u32]\n+    /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]\n+    /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]\n+    /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]\n+    /// ```\n     fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Option<Vec<Ty<'tcx>>> {\n         match t.sty {\n             ty::ty_uint(_) |\n@@ -1641,16 +1674,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_bare_fn(..) |\n             ty::ty_str |\n             ty::ty_err |\n-            ty::ty_param(..) |\n             ty::ty_infer(ty::IntVar(_)) |\n             ty::ty_infer(ty::FloatVar(_)) |\n             ty::ty_char => {\n                 Some(Vec::new())\n             }\n \n             ty::ty_trait(..) |\n+            ty::ty_param(..) |\n             ty::ty_projection(..) |\n-            ty::ty_infer(_) => {\n+            ty::ty_infer(ty::TyVar(_)) => {\n                 self.tcx().sess.bug(\n                     &format!(\n                         \"asked to assemble constituent types of unexpected type: {}\","}, {"sha": "8a9d53731c545ca3788012d12d5cdc0d3a56f59a", "filename": "src/test/compile-fail/typeck-default-trait-impl-assoc-type.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs?ref=640000a7c0d49e03b22c635e98679d5cffb18f1a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we do not consider associated types to be sendable without\n+// some applicable trait bound (and we don't ICE).\n+\n+trait Trait {\n+    type AssocType;\n+    fn dummy(&self) { }\n+}\n+fn bar<T:Trait+Send>() {\n+    is_send::<T::AssocType>(); //~ ERROR not implemented\n+}\n+\n+fn is_send<T:Send>() {\n+}\n+\n+fn main() { }"}, {"sha": "185e9dcb3bd91d32217f85f18da308216471694c", "filename": "src/test/compile-fail/typeck-default-trait-impl-send-param.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640000a7c0d49e03b22c635e98679d5cffb18f1a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs?ref=640000a7c0d49e03b22c635e98679d5cffb18f1a", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we do not consider parameter types to be sendable without\n+// an explicit trait bound.\n+\n+fn foo<T>() {\n+    is_send::<T>() //~ ERROR not implemented\n+}\n+\n+fn is_send<T:Send>() {\n+}\n+\n+fn main() { }"}]}