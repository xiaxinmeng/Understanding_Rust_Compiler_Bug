{"sha": "3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMGUyN2NjNzRkNjFlMjI5YWVhZjBhNzEwZDNhMDE4ZjcxMDRmZmM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-07T21:28:52Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-08T03:23:50Z"}, "message": "trans: handle string literal reborrows.", "tree": {"sha": "4a2738162a23d273390b0d9bc6f893424938fb86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2738162a23d273390b0d9bc6f893424938fb86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "html_url": "https://github.com/rust-lang/rust/commit/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300162659504fed4798e535791023bf0174fc81c", "url": "https://api.github.com/repos/rust-lang/rust/commits/300162659504fed4798e535791023bf0174fc81c", "html_url": "https://github.com/rust-lang/rust/commit/300162659504fed4798e535791023bf0174fc81c"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "9320617983772e180510c2995b77705d3d5009ff", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "patch": "@@ -140,6 +140,9 @@ enum Base {\n     /// A constant value without an unique address.\n     Value(ValueRef),\n \n+    /// String literal base pointer (cast from array).\n+    Str(ValueRef),\n+\n     /// The address of a static.\n     Static(ValueRef)\n }\n@@ -156,6 +159,10 @@ impl<'tcx> ConstLvalue<'tcx> {\n     fn to_const(&self, span: Span) -> Const<'tcx> {\n         match self.base {\n             Base::Value(val) => Const::new(val, self.ty),\n+            Base::Str(ptr) => {\n+                span_bug!(span, \"loading from `str` ({:?}) in constant\",\n+                          Value(ptr))\n+            }\n             Base::Static(val) => {\n                 span_bug!(span, \"loading from `static` ({:?}) in constant\",\n                           Value(val))\n@@ -375,6 +382,8 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         };\n                         if self.ccx.statics().borrow().contains_key(&base) {\n                             (Base::Static(base), extra)\n+                        } else if let ty::TyStr = projected_ty.sty {\n+                            (Base::Str(base), extra)\n                         } else {\n                             let val = consts::load_const(self.ccx, base, projected_ty);\n                             if val.is_null() {\n@@ -669,6 +678,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             consts::addr_of(self.ccx, llval, align, \"ref\")\n                         }\n                     }\n+                    Base::Str(llval) |\n                     Base::Static(llval) => llval\n                 };\n "}, {"sha": "4e9c0bce646e6f98782f4b72b85522eb7dfff927", "filename": "src/test/run-pass/mir_constval_adts.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0e27cc74d61e229aeaf0a710d3a018f7104ffc/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs?ref=3b0e27cc74d61e229aeaf0a710d3a018f7104ffc", "patch": "@@ -14,6 +14,7 @@ struct Point {\n     _x: i32,\n     _y: i32,\n }\n+\n const STRUCT: Point = Point { _x: 42, _y: 42 };\n const TUPLE1: (i32, i32) = (42, 42);\n const TUPLE2: (&'static str, &'static str) = (\"hello\",\"world\");\n@@ -26,7 +27,19 @@ fn mir() -> (Point, (i32, i32), (&'static str, &'static str)){\n     (struct1, tuple1, tuple2)\n }\n \n+#[derive(PartialEq, Eq, Debug)]\n+struct Newtype<T>(T);\n+\n+const NEWTYPE: Newtype<&'static str> = Newtype(\"foobar\");\n+\n+#[rustc_mir]\n+fn test_promoted_newtype_str_ref() {\n+    let x = &NEWTYPE;\n+    assert_eq!(x, &Newtype(\"foobar\"));\n+}\n+\n fn main(){\n     assert_eq!(mir(), (STRUCT, TUPLE1, TUPLE2));\n+    test_promoted_newtype_str_ref();\n }\n "}]}