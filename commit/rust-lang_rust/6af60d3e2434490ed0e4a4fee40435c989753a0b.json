{"sha": "6af60d3e2434490ed0e4a4fee40435c989753a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjYwZDNlMjQzNDQ5MGVkMGU0YTRmZWU0MDQzNWM5ODk3NTNhMGI=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-24T17:33:52Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-24T17:33:52Z"}, "message": "Fix nits, rework the second example of select (the one deliberately failing to compile)", "tree": {"sha": "a300bdd85e211d6e306a6d88aa0e43139f9c2a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a300bdd85e211d6e306a6d88aa0e43139f9c2a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af60d3e2434490ed0e4a4fee40435c989753a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af60d3e2434490ed0e4a4fee40435c989753a0b", "html_url": "https://github.com/rust-lang/rust/commit/6af60d3e2434490ed0e4a4fee40435c989753a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af60d3e2434490ed0e4a4fee40435c989753a0b/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "html_url": "https://github.com/rust-lang/rust/commit/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3"}], "stats": {"total": 48, "additions": 15, "deletions": 33}, "files": [{"sha": "2047659c73505e151bd2d8bae196a342ae6d809a", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6af60d3e2434490ed0e4a4fee40435c989753a0b/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af60d3e2434490ed0e4a4fee40435c989753a0b/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=6af60d3e2434490ed0e4a4fee40435c989753a0b", "patch": "@@ -1680,19 +1680,15 @@ mod use_keyword {}\n ///\n /// `where` can also be used for lifetimes.\n ///\n-/// This compiles because the lifetime of `longer` is superior to the lifetime\n-/// of `shorter`, thus the constraint is respected:\n+/// This compiles because `longer` outlives `shorter`, thus the constraint is\n+/// respected:\n ///\n /// ```rust\n-/// fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n+/// fn select<'short, 'long>(s1: &'short str, s2: &'long str, second: bool) -> &'short str\n /// where\n-///     'b: 'a,\n+///     'long: 'short,\n /// {\n-///     if second {\n-///         s2\n-///     } else {\n-///         s1\n-///     }\n+///     if second { s2 } else { s1 }\n /// }\n ///\n /// let outer = String::from(\"Long living ref\");\n@@ -1701,35 +1697,20 @@ mod use_keyword {}\n ///     let inner = String::from(\"Short living ref\");\n ///     let shorter = &inner;\n ///\n-///     assert_eq!(select_where(shorter, longer, false), shorter);\n-///     assert_eq!(select_where(shorter, longer, true), longer);\n+///     assert_eq!(select(shorter, longer, false), shorter);\n+///     assert_eq!(select(shorter, longer, true), longer);\n /// }\n /// ```\n ///\n-/// On the other hand, this will not compile: `shorter` does not have a lifetime\n-/// that respects the constraint imposed by the `select_where` functions.\n+/// On the other hand, this will not compile because the `where 'b: 'a` clause\n+/// is missing: the `'b` lifetime is not known to live at least as long as `'a`\n+/// which means this function cannot ensure it always returns a valid reference:\n ///\n-/// ```rust,compile_fail,E0597\n-/// # fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n-/// # where\n-/// #     'b: 'a,\n-/// # {\n-/// #     if second {\n-/// #         s2\n-/// #     } else {\n-/// #         s1\n-/// #     }\n-/// # }\n-/// let outer = String::from(\"Long living ref\");\n-/// let longer = &outer;\n-/// let res;\n+/// ```rust,compile_fail,E0623\n+/// fn select<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n /// {\n-///     let inner = String::from(\"Short living ref\");\n-///     let shorter = &inner;\n-///\n-///     res = select_where(longer, shorter, false);\n+///     if second { s2 } else { s1 }\n /// }\n-/// assert_eq!(res, &outer);\n /// ```\n ///\n /// `where` can also be used to express more complicated constraints that cannot\n@@ -1749,7 +1730,8 @@ mod use_keyword {}\n /// ```\n ///\n /// `where` is available anywhere generic and lifetime parameters are available,\n-/// as can be seen in the [`Cow`](crate::borrow::Cow) from the standard library:\n+/// as can be seen with the [`Cow`](crate::borrow::Cow) type from the standard\n+/// library:\n ///\n /// ```rust\n /// # #![allow(dead_code)]"}]}