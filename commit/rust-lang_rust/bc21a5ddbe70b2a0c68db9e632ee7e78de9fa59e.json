{"sha": "bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjFhNWRkYmU3MGIyYTBjNjhkYjllNjMyZWU3ZTc4ZGU5ZmE1OWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-15T23:36:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-15T23:38:08Z"}, "message": "rustc: Create self region bindings, and forbid the self region from being used in places it shouldn't be", "tree": {"sha": "6d76e90fd9280b448fe5a7a6771661e9c6d852ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d76e90fd9280b448fe5a7a6771661e9c6d852ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "html_url": "https://github.com/rust-lang/rust/commit/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041c9a0863e01f2cfa92816eaaf8ea295f851157", "url": "https://api.github.com/repos/rust-lang/rust/commits/041c9a0863e01f2cfa92816eaaf8ea295f851157", "html_url": "https://github.com/rust-lang/rust/commit/041c9a0863e01f2cfa92816eaaf8ea295f851157"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "3127005307846cc6eda146696674f78386ad0014", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -103,6 +103,9 @@ fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n         ty::re_block(nid) {\n             w.write_char('b'); w.write_int(nid); w.write_char('|');\n         }\n+        ty::re_self(did) {\n+            w.write_char('s'); w.write_str(cx.ds(did)); w.write_char('|');\n+        }\n         ty::re_inferred { w.write_char('?'); }\n     }\n }"}, {"sha": "e1b467ece01c127ae7ee6c18d03ee4b32ca0bb40", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -65,13 +65,19 @@ type ctxt = {\n     parent: parent,\n \n     /* True if we're within the pattern part of an alt, false otherwise. */\n-    in_alt: bool\n+    in_alt: bool,\n+\n+    /*\n+     * Points to the site of the current typeclass implementation, or none if\n+     * we're outside one.\n+     */\n+    self_binding: option<ast::def_id>\n };\n \n fn region_to_scope(region_map: @region_map, region: ty::region)\n         -> ast::node_id {\n     ret alt region {\n-        ty::re_caller(def_id) { def_id.node }\n+        ty::re_caller(def_id) | ty::re_self(def_id) { def_id.node }\n         ty::re_named(def_id) { region_map.region_name_to_fn.get(def_id) }\n         ty::re_block(node_id) { node_id }\n         ty::re_inferred { fail \"unresolved region in region_to_scope\" }\n@@ -115,7 +121,21 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n     alt ty.node {\n         ast::ty_rptr({id: region_id, node: node}, _) {\n             alt node {\n-                ast::re_inferred | ast::re_self { /* no-op */ }\n+                ast::re_inferred { /* no-op */ }\n+                ast::re_self {\n+                    alt cx.self_binding {\n+                        some(def_id) {\n+                            let region = ty::re_self(def_id);\n+                            let rm = cx.region_map;\n+                            rm.ast_type_to_region.insert(region_id, region);\n+                        }\n+                        none {\n+                            cx.sess.span_err(ty.span,\n+                                             \"the `self` region is not \\\n+                                              allowed here\");\n+                        }\n+                    }\n+                }\n                 ast::re_named(ident) {\n                     // If at item scope, introduce or reuse a binding. If at\n                     // block scope, require that the binding be introduced.\n@@ -281,13 +301,22 @@ fn resolve_local(local: @ast::local, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n-    let parent = alt item.node {\n-        ast::item_fn(_, _, _) | ast::item_enum(_, _) { pa_fn_item(item.id) }\n-        _ { pa_item(item.id) }\n+    let parent;\n+    let mut self_binding = cx.self_binding;\n+    alt item.node {\n+        ast::item_fn(_, _, _) | ast::item_enum(_, _) {\n+            parent = pa_fn_item(item.id);\n+        }\n+        ast::item_impl(_, _, _, _) {\n+            self_binding = some({crate: ast::local_crate, node: item.id});\n+            parent = pa_item(item.id);\n+        }\n+        _ { parent = pa_item(item.id); }\n     };\n     let new_cx: ctxt = {bindings: @list::nil,\n                         parent: parent,\n-                        in_alt: false\n+                        in_alt: false,\n+                        self_binding: self_binding\n                         with cx};\n     visit::visit_item(item, new_cx, visitor);\n }\n@@ -307,7 +336,8 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n                     mut bindings: @list::nil,\n                     mut queued_locals: [],\n                     parent: pa_crate,\n-                    in_alt: false};\n+                    in_alt: false,\n+                    self_binding: none};\n     let visitor = visit::mk_vt(@{\n         visit_block: resolve_block,\n         visit_item: resolve_item,"}, {"sha": "42d9a51dd47c26eea2a39786226b7bf24e6cae2b", "filename": "src/rustc/middle/regionck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregionck.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -28,7 +28,9 @@ fn check_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n             alt ty::get(t).struct {\n                 ty::ty_rptr(region, _) {\n                     alt region {\n-                        ty::re_named(_) | ty::re_caller(_) { /* ok */ }\n+                        ty::re_named(_) | ty::re_caller(_) | ty::re_self(_) {\n+                            /* ok */\n+                        }\n                         ty::re_block(rbi) {\n                             let referent_block_id = rbi;\n                             let enclosing_block_id = alt cx.enclosing_block {"}, {"sha": "9d581287470ec5175379ddadae1a0847e8306bf6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -233,6 +233,7 @@ type fn_ty = {proto: ast::proto,\n enum region {\n     re_named(def_id),\n     re_caller(def_id),\n+    re_self(def_id),\n     re_block(node_id),\n     re_inferred         /* currently unresolved (for typedefs) */\n }\n@@ -1152,8 +1153,9 @@ fn hash_type_structure(st: sty) -> uint {\n         alt r {\n           re_named(_)   { 1u }\n           re_caller(_)  { 2u }\n-          re_block(_)   { 3u }\n-          re_inferred   { 4u }\n+          re_self(_)    { 3u }\n+          re_block(_)   { 4u }\n+          re_inferred   { 5u }\n         }\n     }\n     alt st {"}, {"sha": "5bfca5805cec3b3fd083684ed0fb8937bb212a1b", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -254,10 +254,11 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n     fn subst_inferred_regions(tcx: ty::ctxt, use_site: ast::node_id,\n                               ty: ty::t) -> ty::t {\n         ret ty::fold_ty(tcx, ty::fm_rptr({|r|\n-            if r == ty::re_inferred {\n-                tcx.region_map.ast_type_to_inferred_region.get(use_site)\n-            } else {\n-                r\n+            alt r {\n+                ty::re_inferred | ty::re_self(_) {\n+                    tcx.region_map.ast_type_to_inferred_region.get(use_site)\n+                }\n+                _ { r }\n             }\n         }), ty);\n     }\n@@ -1462,7 +1463,9 @@ fn instantiate_self_regions(pcx: pat_ctxt, args: [ty::t]) -> [ty::t] {\n         if ty::type_has_rptrs(arg_ty) {\n             ty::fold_ty(pcx.fcx.ccx.tcx, ty::fm_rptr({|r|\n                 alt r {\n-                    ty::re_inferred | ty::re_caller(_) { pcx.pat_region }\n+                    ty::re_inferred | ty::re_caller(_) | ty::re_self(_) {\n+                        pcx.pat_region\n+                    }\n                     _ { r }\n                 }\n             }), arg_ty)"}, {"sha": "a08796d7f36eb6b998f882a42f83aa90f9010af3", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -73,6 +73,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n           re_named(_)   { \"<name>.\"   }     // TODO: include name\n           re_caller(_)  { \"<caller>.\" }\n           re_block(_)   { \"<block>.\"  }     // TODO: include line number\n+          re_self(_)    { \"self.\"     }\n           re_inferred   { \"\"          }\n         }\n     }"}]}