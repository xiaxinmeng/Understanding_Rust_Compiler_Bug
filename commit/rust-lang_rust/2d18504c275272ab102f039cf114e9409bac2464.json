{"sha": "2d18504c275272ab102f039cf114e9409bac2464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTg1MDRjMjc1MjcyYWIxMDJmMDM5Y2YxMTRlOTQwOWJhYzI0NjQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-24T18:43:40Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T11:52:07Z"}, "message": "Remove Option from resolver", "tree": {"sha": "a8302ed4f41746f61a62bdab54bb2e05b90cc7ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8302ed4f41746f61a62bdab54bb2e05b90cc7ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d18504c275272ab102f039cf114e9409bac2464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d18504c275272ab102f039cf114e9409bac2464", "html_url": "https://github.com/rust-lang/rust/commit/2d18504c275272ab102f039cf114e9409bac2464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d18504c275272ab102f039cf114e9409bac2464/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37100024de26207005a86b634d599f120309dd55", "url": "https://api.github.com/repos/rust-lang/rust/commits/37100024de26207005a86b634d599f120309dd55", "html_url": "https://github.com/rust-lang/rust/commit/37100024de26207005a86b634d599f120309dd55"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "8b0b5a5b7a2bd11e2b87c815aeb98f0dedf98283", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=2d18504c275272ab102f039cf114e9409bac2464", "patch": "@@ -58,7 +58,6 @@ use std::path::PathBuf;\n use std::sync::mpsc;\n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::mem;\n \n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     sess.diagnostic()\n@@ -204,15 +203,16 @@ impl ExpansionResult {\n \n impl BoxedResolver {\n     pub fn to_expansion_result(\n-        mut resolver: Rc<Option<RefCell<BoxedResolver>>>,\n+        resolver: Rc<RefCell<BoxedResolver>>,\n     ) -> ExpansionResult {\n-        if let Some(resolver) = Rc::get_mut(&mut resolver) {\n-            mem::replace(resolver, None).unwrap().into_inner().complete()\n-        } else {\n-            let resolver = &*resolver;\n-            resolver.as_ref().unwrap().borrow_mut().access(|resolver| {\n-                ExpansionResult::from_resolver_ref(resolver)\n-            })\n+        match Rc::try_unwrap(resolver) {\n+            Ok(resolver) => resolver.into_inner().complete(),\n+            Err(resolver) => {\n+                let resolver = &*resolver;\n+                resolver.borrow_mut().access(|resolver| {\n+                    ExpansionResult::from_resolver_ref(resolver)\n+                })\n+            }\n         }\n     }\n }"}, {"sha": "ed50dadb600993ec66a5bb79bef701bd2bcbe074", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=2d18504c275272ab102f039cf114e9409bac2464", "patch": "@@ -76,7 +76,7 @@ pub(crate) struct Queries {\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, PluginInfo)>,\n-    expansion: Query<(ast::Crate, Rc<Option<RefCell<BoxedResolver>>>)>,\n+    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>,\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n@@ -142,7 +142,7 @@ impl Compiler {\n \n     pub fn expansion(\n         &self\n-    ) -> Result<&Query<(ast::Crate, Rc<Option<RefCell<BoxedResolver>>>)>> {\n+    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>> {\n         self.queries.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, plugin_info) = self.register_plugins()?.take();\n@@ -152,7 +152,7 @@ impl Compiler {\n                 krate,\n                 &crate_name,\n                 plugin_info,\n-            ).map(|(krate, resolver)| (krate, Rc::new(Some(RefCell::new(resolver)))))\n+            ).map(|(krate, resolver)| (krate, Steal::new(Rc::new(RefCell::new(resolver)))))\n         })\n     }\n \n@@ -176,9 +176,10 @@ impl Compiler {\n     pub fn lower_to_hir(&self) -> Result<&Query<(Steal<hir::map::Forest>, ExpansionResult)>> {\n         self.queries.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n-            let (krate, resolver) = expansion_result.take();\n-            let resolver_ref = &*resolver;\n-            let hir = Steal::new(resolver_ref.as_ref().unwrap().borrow_mut().access(|resolver| {\n+            let peeked = expansion_result.peek();\n+            let krate = &peeked.0;\n+            let resolver = peeked.1.steal();\n+            let hir = Steal::new(resolver.borrow_mut().access(|resolver| {\n                 passes::lower_to_hir(\n                     self.session(),\n                     self.cstore(),\n@@ -187,7 +188,6 @@ impl Compiler {\n                     &krate\n                 )\n             })?);\n-            expansion_result.give((krate, Rc::new(None)));\n             Ok((hir, BoxedResolver::to_expansion_result(resolver)))\n         })\n     }"}, {"sha": "c2fb9fb7fb5e293ebda477d93061f320ae7ffe1b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d18504c275272ab102f039cf114e9409bac2464/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2d18504c275272ab102f039cf114e9409bac2464", "patch": "@@ -45,7 +45,7 @@ pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n pub struct DocContext<'tcx> {\n \n     pub tcx: TyCtxt<'tcx>,\n-    pub resolver: Rc<Option<RefCell<interface::BoxedResolver>>>,\n+    pub resolver: Rc<RefCell<interface::BoxedResolver>>,\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,\n     pub cstore: Lrc<CStore>,\n@@ -83,9 +83,7 @@ impl<'tcx> DocContext<'tcx> {\n \n     pub fn enter_resolver<F, R>(&self, f: F) -> R\n     where F: FnOnce(&mut resolve::Resolver<'_>) -> R {\n-        let resolver = &*self.resolver;\n-        let resolver = resolver.as_ref().unwrap();\n-        resolver.borrow_mut().access(f)\n+        self.resolver.borrow_mut().access(f)\n     }\n \n     /// Call the closure with the given parameters set as\n@@ -344,7 +342,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // We need to hold on to the complete resolver, so we cause everything to be\n         // cloned for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture.\n-        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.clone();\n+        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.borrow().clone();\n \n         if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");"}]}