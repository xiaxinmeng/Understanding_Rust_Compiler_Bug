{"sha": "262ff86138730c1eb65f3ec39dd9c93222ed77e7", "node_id": "C_kwDOAAsO6NoAKDI2MmZmODYxMzg3MzBjMWViNjVmM2VjMzlkZDljOTMyMjJlZDc3ZTc", "commit": {"author": {"name": "mejrs", "email": "", "date": "2023-01-08T22:35:43Z"}, "committer": {"name": "mejrs", "email": "", "date": "2023-01-08T22:35:43Z"}, "message": "Make translate_message return result and add tests", "tree": {"sha": "9d7f20bab8a92573aca545ef45c0e7165f6d5a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7f20bab8a92573aca545ef45c0e7165f6d5a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262ff86138730c1eb65f3ec39dd9c93222ed77e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262ff86138730c1eb65f3ec39dd9c93222ed77e7", "html_url": "https://github.com/rust-lang/rust/commit/262ff86138730c1eb65f3ec39dd9c93222ed77e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262ff86138730c1eb65f3ec39dd9c93222ed77e7/comments", "author": {}, "committer": {}, "parents": [{"sha": "0b5d6ae5dbbbe6b05a85bdcccc8aedbb96feedf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5d6ae5dbbbe6b05a85bdcccc8aedbb96feedf4", "html_url": "https://github.com/rust-lang/rust/commit/0b5d6ae5dbbbe6b05a85bdcccc8aedbb96feedf4"}], "stats": {"total": 241, "additions": 224, "deletions": 17}, "files": [{"sha": "7f01df321010bd39682d7378b980e6ea29a0e285", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -28,6 +28,7 @@ use rustc_error_messages::{FluentArgs, SpanLabel};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n+use std::error::Report;\n use std::io::prelude::*;\n use std::io::{self, IsTerminal};\n use std::iter;\n@@ -250,7 +251,7 @@ pub trait Emitter: Translate {\n         let mut primary_span = diag.span.clone();\n         let suggestions = diag.suggestions.as_deref().unwrap_or(&[]);\n         if let Some((sugg, rest)) = suggestions.split_first() {\n-            let msg = self.translate_message(&sugg.msg, fluent_args);\n+            let msg = self.translate_message(&sugg.msg, fluent_args).map_err(Report::new).unwrap();\n             if rest.is_empty() &&\n                // ^ if there is only one suggestion\n                // don't display multi-suggestions as labels\n@@ -1325,7 +1326,7 @@ impl EmitterWriter {\n         //                very *weird* formats\n         //                see?\n         for (text, style) in msg.iter() {\n-            let text = self.translate_message(text, args);\n+            let text = self.translate_message(text, args).map_err(Report::new).unwrap();\n             let lines = text.split('\\n').collect::<Vec<_>>();\n             if lines.len() > 1 {\n                 for (i, line) in lines.iter().enumerate() {\n@@ -1387,7 +1388,7 @@ impl EmitterWriter {\n                 label_width += 2;\n             }\n             for (text, _) in msg.iter() {\n-                let text = self.translate_message(text, args);\n+                let text = self.translate_message(text, args).map_err(Report::new).unwrap();\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(&text).lines().enumerate() {\n                     buffer.append(\n@@ -2301,7 +2302,9 @@ impl FileWithAnnotatedLines {\n                     hi.col_display += 1;\n                 }\n \n-                let label = label.as_ref().map(|m| emitter.translate_message(m, args).to_string());\n+                let label = label.as_ref().map(|m| {\n+                    emitter.translate_message(m, args).map_err(Report::new).unwrap().to_string()\n+                });\n \n                 if lo.line != hi.line {\n                     let ml = MultilineAnnotation {"}, {"sha": "ec0a2fe8cd8d010bf0d1fc5a4c32a88bf15aa32c", "filename": "compiler/rustc_errors/src/error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ferror.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -65,11 +65,14 @@ impl fmt::Display for TranslateError<'_> {\n \n         match self {\n             Self::One { id, args, kind } => {\n-                writeln!(f, \"\\nfailed while formatting fluent string `{id}`: \")?;\n+                writeln!(f, \"failed while formatting fluent string `{id}`: \")?;\n                 match kind {\n                     MessageMissing => writeln!(f, \"message was missing\")?,\n                     PrimaryBundleMissing => writeln!(f, \"the primary bundle was missing\")?,\n-                    AttributeMissing { attr } => writeln!(f, \"the attribute `{attr}` was missing\")?,\n+                    AttributeMissing { attr } => {\n+                        writeln!(f, \"the attribute `{attr}` was missing\")?;\n+                        writeln!(f, \"help: add `.{attr} = <message>`\")?;\n+                    }\n                     ValueMissing => writeln!(f, \"the value was missing\")?,\n                     Fluent { errs } => {\n                         for err in errs {"}, {"sha": "dc38b8725ad1e94ef2d29e94b82a0cd19a8357a2", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -24,6 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_error_messages::FluentArgs;\n use rustc_span::hygiene::ExpnData;\n use rustc_span::Span;\n+use std::error::Report;\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n@@ -321,7 +322,8 @@ impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let args = to_fluent_args(diag.args());\n         let sugg = diag.suggestions.iter().flatten().map(|sugg| {\n-            let translated_message = je.translate_message(&sugg.msg, &args);\n+            let translated_message =\n+                je.translate_message(&sugg.msg, &args).map_err(Report::new).unwrap();\n             Diagnostic {\n                 message: translated_message.to_string(),\n                 code: None,\n@@ -411,7 +413,10 @@ impl DiagnosticSpan {\n         Self::from_span_etc(\n             span.span,\n             span.is_primary,\n-            span.label.as_ref().map(|m| je.translate_message(m, args)).map(|m| m.to_string()),\n+            span.label\n+                .as_ref()\n+                .map(|m| je.translate_message(m, args).unwrap())\n+                .map(|m| m.to_string()),\n             suggestion,\n             je,\n         )"}, {"sha": "0b5bfdc8e8985e141d046390b529f0e9decf1f16", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -46,6 +46,7 @@ use rustc_span::{Loc, Span};\n \n use std::any::Any;\n use std::borrow::Cow;\n+use std::error::Report;\n use std::fmt;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n@@ -65,6 +66,8 @@ mod lock;\n pub mod registry;\n mod snippet;\n mod styled_buffer;\n+#[cfg(test)]\n+mod tests;\n pub mod translation;\n \n pub use diagnostic_builder::IntoDiagnostic;\n@@ -627,7 +630,14 @@ impl Handler {\n     ) -> SubdiagnosticMessage {\n         let inner = self.inner.borrow();\n         let args = crate::translation::to_fluent_args(args);\n-        SubdiagnosticMessage::Eager(inner.emitter.translate_message(&message, &args).to_string())\n+        SubdiagnosticMessage::Eager(\n+            inner\n+                .emitter\n+                .translate_message(&message, &args)\n+                .map_err(Report::new)\n+                .unwrap()\n+                .to_string(),\n+        )\n     }\n \n     // This is here to not allow mutation of flags;"}, {"sha": "47220b59bd447791880925acd93d3b6f4130e584", "filename": "compiler/rustc_errors/src/tests.rs", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftests.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -0,0 +1,183 @@\n+use crate::error::{TranslateError, TranslateErrorKind};\n+use crate::fluent_bundle::*;\n+use crate::translation::Translate;\n+use crate::FluentBundle;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_error_messages::fluent_bundle::resolver::errors::{ReferenceKind, ResolverError};\n+use rustc_error_messages::langid;\n+use rustc_error_messages::DiagnosticMessage;\n+\n+struct Dummy {\n+    bundle: FluentBundle,\n+}\n+\n+impl Translate for Dummy {\n+    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n+        None\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &self.bundle\n+    }\n+}\n+\n+fn make_dummy(ftl: &'static str) -> Dummy {\n+    let resource = FluentResource::try_new(ftl.into()).expect(\"Failed to parse an FTL string.\");\n+\n+    let langid_en = langid!(\"en-US\");\n+    let mut bundle = FluentBundle::new(vec![langid_en]);\n+\n+    bundle.add_resource(resource).expect(\"Failed to add FTL resources to the bundle.\");\n+\n+    Dummy { bundle }\n+}\n+\n+#[test]\n+fn wellformed_fluent() {\n+    let dummy = make_dummy(\"mir_build_borrow_of_moved_value = borrow of moved value\n+    .label = value moved into `{$name}` here\n+    .occurs_because_label = move occurs because `{$name}` has type `{$ty}` which does not implement the `Copy` trait\n+    .value_borrowed_label = value borrowed here after move\n+    .suggestion = borrow this binding in the pattern to avoid moving the value\");\n+\n+    let mut args = FluentArgs::new();\n+    args.set(\"name\", \"Foo\");\n+    args.set(\"ty\", \"std::string::String\");\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"suggestion\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"borrow this binding in the pattern to avoid moving the value\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"value_borrowed_label\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"value borrowed here after move\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"occurs_because_label\".into()),\n+        );\n+\n+        assert_eq!(\n+            dummy.translate_message(&message, &args).unwrap(),\n+            \"move occurs because `\\u{2068}Foo\\u{2069}` has type `\\u{2068}std::string::String\\u{2069}` which does not implement the `Copy` trait\"\n+        );\n+\n+        {\n+            let message = DiagnosticMessage::FluentIdentifier(\n+                \"mir_build_borrow_of_moved_value\".into(),\n+                Some(\"label\".into()),\n+            );\n+\n+            assert_eq!(\n+                dummy.translate_message(&message, &args).unwrap(),\n+                \"value moved into `\\u{2068}Foo\\u{2069}` here\"\n+            );\n+        }\n+    }\n+}\n+\n+#[test]\n+fn misformed_fluent() {\n+    let dummy = make_dummy(\"mir_build_borrow_of_moved_value = borrow of moved value\n+    .label = value moved into `{name}` here\n+    .occurs_because_label = move occurs because `{$oops}` has type `{$ty}` which does not implement the `Copy` trait\n+    .suggestion = borrow this binding in the pattern to avoid moving the value\");\n+\n+    let mut args = FluentArgs::new();\n+    args.set(\"name\", \"Foo\");\n+    args.set(\"ty\", \"std::string::String\");\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"value_borrowed_label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        assert!(\n+            matches!(\n+                &err,\n+                TranslateError::Two {\n+                    primary: box TranslateError::One {\n+                        kind: TranslateErrorKind::PrimaryBundleMissing,\n+                        ..\n+                    },\n+                    fallback: box TranslateError::One {\n+                        kind: TranslateErrorKind::AttributeMissing { attr: \"value_borrowed_label\" },\n+                        ..\n+                    }\n+                }\n+            ),\n+            \"{err:#?}\"\n+        );\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nthe attribute `value_borrowed_label` was missing\\nhelp: add `.value_borrowed_label = <message>`\\n\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        if let TranslateError::Two {\n+            primary: box TranslateError::One { kind: TranslateErrorKind::PrimaryBundleMissing, .. },\n+            fallback: box TranslateError::One { kind: TranslateErrorKind::Fluent { errs }, .. },\n+        } = &err\n+            && let [FluentError::ResolverError(ResolverError::Reference(\n+                ReferenceKind::Message { id, .. }\n+                    | ReferenceKind::Variable { id, .. },\n+            ))] = &**errs\n+            && id == \"name\"\n+        {} else {\n+            panic!(\"{err:#?}\")\n+        };\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nargument `name` exists but was not referenced correctly\\nhelp: try using `{$name}` instead\\n\"\n+        );\n+    }\n+\n+    {\n+        let message = DiagnosticMessage::FluentIdentifier(\n+            \"mir_build_borrow_of_moved_value\".into(),\n+            Some(\"occurs_because_label\".into()),\n+        );\n+\n+        let err = dummy.translate_message(&message, &args).unwrap_err();\n+        if let TranslateError::Two {\n+            primary: box TranslateError::One { kind: TranslateErrorKind::PrimaryBundleMissing, .. },\n+            fallback: box TranslateError::One { kind: TranslateErrorKind::Fluent { errs }, .. },\n+        } = &err\n+            && let [FluentError::ResolverError(ResolverError::Reference(\n+                ReferenceKind::Message { id, .. }\n+                    | ReferenceKind::Variable { id, .. },\n+            ))] = &**errs\n+            && id == \"oops\"\n+        {} else {\n+            panic!(\"{err:#?}\")\n+        };\n+        assert_eq!(\n+            format!(\"{err}\"),\n+            \"failed while formatting fluent string `mir_build_borrow_of_moved_value`: \\nthe fluent string has an argument `oops` that was not found.\\nhelp: the arguments `name` and `ty` are available\\n\"\n+        );\n+    }\n+}"}, {"sha": "addfc9726ca445372aadeeae6f2a64aa0676d05c", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -45,7 +45,10 @@ pub trait Translate {\n         args: &FluentArgs<'_>,\n     ) -> Cow<'_, str> {\n         Cow::Owned(\n-            messages.iter().map(|(m, _)| self.translate_message(m, args)).collect::<String>(),\n+            messages\n+                .iter()\n+                .map(|(m, _)| self.translate_message(m, args).map_err(Report::new).unwrap())\n+                .collect::<String>(),\n         )\n     }\n \n@@ -54,11 +57,11 @@ pub trait Translate {\n         &'a self,\n         message: &'a DiagnosticMessage,\n         args: &'a FluentArgs<'_>,\n-    ) -> Cow<'_, str> {\n+    ) -> Result<Cow<'_, str>, TranslateError<'_>> {\n         trace!(?message, ?args);\n         let (identifier, attr) = match message {\n             DiagnosticMessage::Str(msg) | DiagnosticMessage::Eager(msg) => {\n-                return Cow::Borrowed(msg);\n+                return Ok(Cow::Borrowed(msg));\n             }\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n@@ -86,7 +89,7 @@ pub trait Translate {\n                 }\n             };\n \n-        let ret: Result<Cow<'_, str>, TranslateError<'_>> = try {\n+        try {\n             match self.fluent_bundle().map(|b| translate_with_bundle(b)) {\n                 // The primary bundle was present and translation succeeded\n                 Some(Ok(t)) => t,\n@@ -104,8 +107,6 @@ pub trait Translate {\n                 None => translate_with_bundle(self.fallback_fluent_bundle())\n                     .map_err(|fallback| TranslateError::primary(identifier, args).and(fallback))?,\n             }\n-        };\n-        ret.map_err(Report::new)\n-            .expect(\"failed to find message in primary or fallback fluent bundles\")\n+        }\n     }\n }"}, {"sha": "7158355ffdacc65b06457aa5dc55882ec6967a8e", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/262ff86138730c1eb65f3ec39dd9c93222ed77e7/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262ff86138730c1eb65f3ec39dd9c93222ed77e7/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=262ff86138730c1eb65f3ec39dd9c93222ed77e7", "patch": "@@ -156,7 +156,9 @@ impl Emitter for BufferEmitter {\n         let mut buffer = self.buffer.borrow_mut();\n \n         let fluent_args = to_fluent_args(diag.args());\n-        let translated_main_message = self.translate_message(&diag.message[0].0, &fluent_args);\n+        let translated_main_message = self\n+            .translate_message(&diag.message[0].0, &fluent_args)\n+            .unwrap_or_else(|e| panic!(\"{e}\"));\n \n         buffer.messages.push(format!(\"error from rustc: {}\", translated_main_message));\n         if diag.is_error() {"}]}