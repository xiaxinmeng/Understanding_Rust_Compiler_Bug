{"sha": "cd69307aeeaa6996e782359f503666e5d7b64a25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjkzMDdhZWVhYTY5OTZlNzgyMzU5ZjUwMzY2NmU1ZDdiNjRhMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-02T18:45:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-02T18:45:00Z"}, "message": "fix: don't duplicate Progerss::Finised for cache priming", "tree": {"sha": "044a0acfd1eea1fab1de57b38b020d456264fca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/044a0acfd1eea1fab1de57b38b020d456264fca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd69307aeeaa6996e782359f503666e5d7b64a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd69307aeeaa6996e782359f503666e5d7b64a25", "html_url": "https://github.com/rust-lang/rust/commit/cd69307aeeaa6996e782359f503666e5d7b64a25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd69307aeeaa6996e782359f503666e5d7b64a25/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c18c062a9372b00b0ad0ad87bef26a6d9e82c", "html_url": "https://github.com/rust-lang/rust/commit/548c18c062a9372b00b0ad0ad87bef26a6d9e82c"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "d912a01b84ee432d7a2cd776fc5296c044ccea62", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd69307aeeaa6996e782359f503666e5d7b64a25/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd69307aeeaa6996e782359f503666e5d7b64a25/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=cd69307aeeaa6996e782359f503666e5d7b64a25", "patch": "@@ -27,6 +27,7 @@ pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress)\n     let topo = &graph.crates_in_topological_order();\n \n     cb(PrimeCachesProgress::Started);\n+    // Take care to emit the finish signal  even when the computation is canceled.\n     let _d = stdx::defer(|| cb(PrimeCachesProgress::Finished));\n \n     // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that."}, {"sha": "ce7ece559fbd0f496c9c95b851979e736df8db88", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd69307aeeaa6996e782359f503666e5d7b64a25/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd69307aeeaa6996e782359f503666e5d7b64a25/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=cd69307aeeaa6996e782359f503666e5d7b64a25", "patch": "@@ -8,8 +8,7 @@ use std::{\n \n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n-use ide::PrimeCachesProgress;\n-use ide::{Canceled, FileId};\n+use ide::{FileId, PrimeCachesProgress};\n use ide_db::base_db::VfsPath;\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n@@ -278,8 +277,6 @@ impl GlobalState {\n                     };\n                 }\n \n-                let mut finished = false;\n-\n                 for progress in prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n@@ -297,18 +294,13 @@ impl GlobalState {\n                             state = Progress::End;\n                             message = None;\n                             fraction = 1.0;\n-                            finished = true;\n+\n+                            self.prime_caches_queue.op_completed(());\n                         }\n                     };\n \n                     self.report_progress(\"Indexing\", state, message, Some(fraction));\n                 }\n-\n-                // If the task is cancelled we may observe two `PrimeCachesProgress::Finished` so we\n-                // have to make sure to only call `op_completed()` once.\n-                if finished {\n-                    self.prime_caches_queue.op_completed(());\n-                }\n             }\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n@@ -730,15 +722,13 @@ impl GlobalState {\n         self.task_pool.handle.spawn_with_sender({\n             let snap = self.snapshot();\n             move |sender| {\n-                snap.analysis\n-                    .prime_caches(|progress| {\n-                        sender.send(Task::PrimeCaches(progress)).unwrap();\n-                    })\n-                    .unwrap_or_else(|_: Canceled| {\n-                        // Pretend that we're done, so that the progress bar is removed. Otherwise\n-                        // the editor may complain about it already existing.\n-                        sender.send(Task::PrimeCaches(PrimeCachesProgress::Finished)).unwrap()\n-                    });\n+                let cb = |progress| {\n+                    sender.send(Task::PrimeCaches(progress)).unwrap();\n+                };\n+                match snap.analysis.prime_caches(cb) {\n+                    Ok(()) => (),\n+                    Err(_canceled) => (),\n+                }\n             }\n         });\n     }"}]}