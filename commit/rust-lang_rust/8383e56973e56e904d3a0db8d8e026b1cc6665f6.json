{"sha": "8383e56973e56e904d3a0db8d8e026b1cc6665f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODNlNTY5NzNlNTZlOTA0ZDNhMGRiOGQ4ZTAyNmIxY2M2NjY1ZjY=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-07-19T19:49:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T19:49:06Z"}, "message": "Merge pull request #1107 from Manishearth/setup-gh-pages\n\nSetup gh-pages", "tree": {"sha": "9fefaa8baa0b4fa69e9f4c88fc499a925ba9d706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fefaa8baa0b4fa69e9f4c88fc499a925ba9d706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8383e56973e56e904d3a0db8d8e026b1cc6665f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8383e56973e56e904d3a0db8d8e026b1cc6665f6", "html_url": "https://github.com/rust-lang/rust/commit/8383e56973e56e904d3a0db8d8e026b1cc6665f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8383e56973e56e904d3a0db8d8e026b1cc6665f6/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a371558bdbe8362ad7b94784becbb9f156caa45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a371558bdbe8362ad7b94784becbb9f156caa45f", "html_url": "https://github.com/rust-lang/rust/commit/a371558bdbe8362ad7b94784becbb9f156caa45f"}, {"sha": "01c61a714bb532efe4eff4375c5b7931570907fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c61a714bb532efe4eff4375c5b7931570907fe", "html_url": "https://github.com/rust-lang/rust/commit/01c61a714bb532efe4eff4375c5b7931570907fe"}], "stats": {"total": 416, "additions": 416, "deletions": 0}, "files": [{"sha": "3a8d3f7d8a6218b87299754b8befccfa9414cb11", "filename": ".editorconfig", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -0,0 +1,16 @@\n+# EditorConfig helps developers define and maintain consistent\n+# coding styles between different editors and IDEs\n+# editorconfig.org\n+\n+root = true\n+\n+[*]\n+end_of_line = lf\n+charset = utf-8\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+indent_style = space\n+indent_size = 4\n+\n+[*.md]\n+trim_trailing_whitespace = false"}, {"sha": "7b40371e01b1fccdcc9a931b1de42c99e310a46e", "filename": ".github/deploy.sh", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -0,0 +1,66 @@\n+#!/bin/bash\n+# Automatically deploy on gh-pages\n+\n+set -e\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Save some useful information\n+REPO=$(git config remote.origin.url)\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=$(git rev-parse --verify HEAD)\n+\n+# Clone the existing gh-pages for this repo into out/\n+(\n+    git clone \"$REPO\" out\n+    cd out\n+    git checkout $TARGET_BRANCH\n+)\n+\n+# Remove the current doc for master\n+rm -rf out/master/ || exit 0\n+\n+# Make the doc for master\n+mkdir out/master/\n+cp util/gh-pages/index.html out/master\n+./util/export.py out/master/lints.json\n+\n+# Save the doc for the current tag and point current/ to it\n+if [ -n \"$TRAVIS_TAG\" ]; then\n+    cp -r out/master \"out/$TRAVIS_TAG\"\n+    rm -f out/current\n+    ln -s \"$TRAVIS_TAG\" out/current\n+fi\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ] || [ \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Generated, won't push\"\n+    exit 0\n+fi\n+\n+# Now let's go have some fun with the cloned repo\n+cd out\n+git config user.name \"Travis CI\"\n+git config user.email \"travis@ci.invalid\"\n+\n+if [ -z \"$(git diff --exit-code)\" ]; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+fi\n+\n+git add .\n+git commit -m \"Automatic deploy to GitHub Pages: ${SHA}\"\n+\n+# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc\n+ENCRYPTED_KEY_VAR=\"encrypted_${ENCRYPTION_LABEL}_key\"\n+ENCRYPTED_IV_VAR=\"encrypted_${ENCRYPTION_LABEL}_iv\"\n+ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}\n+ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}\n+openssl aes-256-cbc -K \"$ENCRYPTED_KEY\" -iv \"$ENCRYPTED_IV\" -in deploy_key.enc -out deploy_key -d\n+chmod 600 deploy_key\n+eval $(ssh-agent -s)\n+ssh-add deploy_key\n+\n+# Now that we're all set up, we can push.\n+git push \"$SSH_REPO\" \"$TARGET_BRANCH\""}, {"sha": "48cb3f5a1276dfdacef1d54cecd1ded0911738a8", "filename": ".github/deploy_key.enc", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.github%2Fdeploy_key.enc", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.github%2Fdeploy_key.enc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy_key.enc?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6"}, {"sha": "0206d9dc963652a97305f3d6f0d572e9d8817f67", "filename": ".gitignore", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -1,3 +1,7 @@\n+# Used by Travis to be able to push:\n+/.github/deploy_key\n+out\n+\n # Compiled files\n *.o\n *.so\n@@ -16,3 +20,6 @@ Cargo.lock\n \n # Generated by dogfood\n /target_recur/\n+\n+# gh pages docs\n+util/gh-pages/lints.json"}, {"sha": "96d7915a2e8286a34a7ac150692b80be58d991f1", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -46,3 +46,11 @@ after_success:\n     else\n       echo \"Ignored\"\n     fi\n+- |\n+    if  [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ] &&\n+        [ \"$TRAVIS_REPO_SLUG\" == \"Manishearth/rust-clippy\" ] &&\n+        [ \"$TRAVIS_BRANCH\" == \"master\" ] ; then\n+    \n+        python util/export.py\n+    \n+    fi"}, {"sha": "558209eee4d3f02d9bcf22bb46563e3cd5efd858", "filename": "util/export.py", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -0,0 +1,162 @@\n+#!/usr/bin/env python\n+# Build the gh-pages\n+\n+import json\n+import os\n+import re\n+import sys\n+\n+\n+level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n+conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n+confvar_re = re.compile(r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n+lint_subheadline = re.compile(r'''^\\*\\*([\\w\\s]+?)[:?.!]?\\*\\*(.*)''')\n+\n+conf_template = \"\"\"\n+This lint has the following configuration variables:\n+\n+* `%s: %s`: %s (defaults to `%s`).\n+\"\"\"\n+\n+\n+# TODO: actual logging\n+def warn(*args):\n+    print(*args)\n+\n+\n+def debug(*args):\n+    print(*args)\n+\n+\n+def info(*args):\n+    print(*args)\n+\n+\n+def parse_path(p=\"clippy_lints/src\"):\n+    lints = []\n+    for f in os.listdir(p):\n+        if f.endswith(\".rs\"):\n+            parse_file(lints, os.path.join(p, f))\n+\n+    conf = parse_conf(p)\n+    info(conf)\n+\n+    for lint_id in conf:\n+        lint = next(l for l in lints if l['id'] == lint_id)\n+        if lint:\n+            lint['docs']['Configuration'] = (conf_template % conf[lint_id]).strip()\n+\n+    return lints\n+\n+\n+def parse_conf(p):\n+    c = {}\n+    with open(p + '/utils/conf.rs') as f:\n+        f = f.read()\n+\n+        m = re.search(conf_re, f)\n+        m = m.groups()[0]\n+\n+        m = re.findall(confvar_re, m)\n+\n+        for (lint, doc, name, default, ty) in m:\n+            c[lint.lower()] = (name, ty, doc, default)\n+\n+    return c\n+\n+\n+def parseLintDef(level, comment, name):\n+    lint = {}\n+    lint['id'] = name\n+    lint['level'] = level\n+    lint['docs'] = {}\n+\n+    last_section = None\n+\n+    for line in comment:\n+        if len(line.strip()) == 0:\n+            continue\n+\n+        match = re.match(lint_subheadline, line)\n+        if match:\n+            last_section = match.groups()[0]\n+        if match:\n+            text = match.groups()[1]\n+        else:\n+            text = line\n+\n+        if not last_section:\n+            warn(\"Skipping comment line as it was not preceded by a heading\")\n+            debug(\"in lint `%s`, line `%s`\" % name, line)\n+\n+        lint['docs'][last_section] = (lint['docs'].get(last_section, \"\") + \"\\n\" + text).strip()\n+\n+    return lint\n+\n+\n+def parse_file(d, f):\n+    last_comment = []\n+    comment = True\n+\n+    with open(f) as rs:\n+        for line in rs:\n+            if comment:\n+                if line.startswith(\"///\"):\n+                    if line.startswith(\"/// \"):\n+                        last_comment.append(line[4:])\n+                    else:\n+                        last_comment.append(line[3:])\n+                elif line.startswith(\"declare_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = False\n+                elif line.startswith(\"declare_restriction_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = True\n+                elif line.startswith(\"declare_deprecated_lint!\"):\n+                    comment = False\n+                    deprecated = True\n+                else:\n+                    last_comment = []\n+            if not comment:\n+                l = line.strip()\n+                m = re.search(r\"pub\\s+([A-Z_][A-Z_0-9]*)\", l)\n+\n+                if m:\n+                    name = m.group(1).lower()\n+\n+                    # Intentionally either a never looping or infinite loop\n+                    while not deprecated and not restriction:\n+                        m = re.search(level_re, line)\n+                        if m:\n+                            level = m.group(0)\n+                            break\n+\n+                        line = next(rs)\n+\n+                    if deprecated:\n+                        level = \"Deprecated\"\n+                    elif restriction:\n+                        level = \"Allow\"\n+\n+                    info(\"found %s with level %s in %s\" % (name, level, f))\n+                    d.append(parseLintDef(level, last_comment, name=name))\n+                    last_comment = []\n+                    comment = True\n+                if \"}\" in l:\n+                    warn(\"Warning: Missing Lint-Name in\", f)\n+                    comment = True\n+\n+\n+def main():\n+    lints = parse_path()\n+    info(\"got %s lints\" % len(lints))\n+\n+    outdir = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n+    with open(outdir, \"w\") as file:\n+        json.dump(lints, file, indent=2)\n+        info(\"wrote JSON for great justice\")\n+\n+if __name__ == \"__main__\":\n+    main()"}, {"sha": "662aabeb2e67dd1f37c1e0223bf9d05d658319fc", "filename": "util/gh-pages/index.html", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/8383e56973e56e904d3a0db8d8e026b1cc6665f6/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/8383e56973e56e904d3a0db8d8e026b1cc6665f6/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=8383e56973e56e904d3a0db8d8e026b1cc6665f6", "patch": "@@ -0,0 +1,157 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n+\n+    <title>Clippy</title>\n+\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css\"/>\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/styles/github.min.css\"/>\n+    <style>\n+        blockquote { font-size: 1em; }\n+        [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak { display: none !important; }\n+        .panel .anchor { display: none; }\n+        .panel:hover .anchor { display: inline; color: #fff; }\n+    </style>\n+</head>\n+<body>\n+    <div class=\"container\" ng-app=\"clippy\" ng-controller=\"lintList\">\n+        <div class=\"page-header\">\n+            <h1>ALL the Clippy Lints</h1>\n+        </div>\n+\n+        <noscript>\n+            <div class=\"alert alert-danger\" role=\"alert\">\n+                Sorry, this site only works with JavaScript!\n+            </div>\n+        </noscript>\n+\n+        <div ng-cloak>\n+\n+            <div class=\"alert alert-info\" role=\"alert\" ng-if=\"loading\">\n+                Loading&#x2026;\n+            </div>\n+            <div class=\"alert alert-danger\" role=\"alert\" ng-if=\"error\">\n+                Error loading lints!\n+            </div>\n+\n+            <div class=\"panel panel-default\" ng-show=\"data\">\n+                <div class=\"panel-body row\">\n+                    <div class=\"col-md-6 form-inline\">\n+                        <div class=\"form-group form-group-lg\">\n+                            <div class=\"checkbox\" ng-repeat=\"(level, enabled) in levels\" style=\"margin-right: 0.6em\">\n+                                <label>\n+                                    <input type=\"checkbox\" ng-model=\"levels[level]\" />\n+                                    {{level}}\n+                                </label>\n+                            </div>\n+                        </div>\n+                    </div>\n+                    <div class=\"col-md-6\">\n+                        <div class=\"input-group\">\n+                            <span class=\"input-group-addon\" id=\"filter-label\">Filter:</span>\n+                            <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" aria-describedby=\"filter-label\" ng-model=\"search\" />\n+                            <span class=\"input-group-btn\">\n+                                <button class=\"btn btn-default\" type=\"button\" ng-click=\"search = ''\">\n+                                    Clear\n+                                </button>\n+                            </span>\n+                        </div>\n+                    </div>\n+                </div>\n+            </div>\n+\n+            <article class=\"panel panel-default\" id=\"{{lint.id}}\" ng-repeat=\"lint in data | filter:byLevels | filter:search | orderBy:'id' track by lint.id\">\n+                <header class=\"panel-heading\" ng-click=\"open[lint.id] = !open[lint.id]\">\n+                    <button class=\"btn btn-default btn-sm pull-right\" style=\"margin-top: -6px;\">\n+                        <span ng-show=\"open[lint.id]\">&minus;</span>\n+                        <span ng-hide=\"open[lint.id]\">&plus;</span>\n+                    </button>\n+\n+                    <h2 class=\"panel-title\">\n+                        {{lint.id}}\n+\n+                        <span ng-if=\"lint.level == 'Allow'\" class=\"label label-info\">Allow</span>\n+                        <span ng-if=\"lint.level == 'Warn'\" class=\"label label-warning\">Warn</span>\n+                        <span ng-if=\"lint.level == 'Deny'\" class=\"label label-danger\">Deny</span>\n+                        <span ng-if=\"lint.level == 'Deprecated'\" class=\"label label-default\">Deprecated</span>\n+\n+                        <a href=\"#{{lint.id}}\" class=\"anchor label label-default\">&para;</a>\n+                    </h2>\n+                </header>\n+\n+                <ul class=\"list-group\" ng-if=\"lint.docs\" ng-class=\"{collapse: true, in: open[lint.id]}\">\n+                    <li class=\"list-group-item\" ng-repeat=\"(title, text) in lint.docs\">\n+                        <h4 class=\"list-group-item-heading\">\n+                            {{title}}\n+                        </h4>\n+                        <div class=\"list-group-item-text\" ng-bind-html=\"text | markdown\"></div>\n+                    </li>\n+                </ul>\n+            </article>\n+        </div>\n+    </div>\n+\n+    <a href=\"https://github.com/Manishearth/rust-clippy\">\n+        <img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"/>\n+    </a>\n+    \n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/7.0.0/markdown-it.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n+    <script>\n+    (function () {\n+        var md = window.markdownit({\n+            html: true,\n+            linkify: true,\n+            typographer: true,\n+            highlight: function (str, lang) {\n+                if (lang && hljs.getLanguage(lang)) {\n+                    try {\n+                        return '<pre class=\"hljs\"><code>' +\n+                            hljs.highlight(lang, str, true).value +\n+                            '</code></pre>';\n+                    } catch (__) {}\n+                }\n+\n+                return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n+            }\n+        });\n+\n+        angular.module(\"clippy\", [])\n+        .filter('markdown', function ($sce) {\n+            return function (text) {\n+                return $sce.trustAsHtml(\n+                    md.render(text || '')\n+                    // Oh deer, what a hack :O\n+                    .replace('<table', '<table class=\"table\"')\n+                );\n+            };\n+        })\n+        .controller(\"lintList\", function ($scope, $http) {\n+            // Level filter\n+            $scope.levels = {Allow: true, Warn: true, Deny: true, Deprecated: true};\n+            $scope.byLevels = function (lint) {\n+                return $scope.levels[lint.level];\n+            };\n+\n+            // Get data\n+            $scope.open = {};\n+            $scope.loading = true;\n+\n+            $http.get('./lints.json')\n+            .success(function (data) {\n+                $scope.data = data;\n+                $scope.loading = false;\n+            })\n+            .error(function (data) {\n+                $scope.error = data;\n+                $scope.loading = false;\n+            });\n+        })\n+    })();\n+    </script>\n+</body>\n+</html>\n\\ No newline at end of file"}]}