{"sha": "7952205bc8b8c890bca12430e75cc3173d49cb52", "node_id": "C_kwDOAAsO6NoAKDc5NTIyMDViYzhiOGM4OTBiY2ExMjQzMGU3NWNjMzE3M2Q0OWNiNTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-18T14:37:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-18T14:37:41Z"}, "message": "make btree not use &A: Allocator instance", "tree": {"sha": "da53c984b7a435b1bfcb15b4ad3b61d66049d7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da53c984b7a435b1bfcb15b4ad3b61d66049d7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7952205bc8b8c890bca12430e75cc3173d49cb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7952205bc8b8c890bca12430e75cc3173d49cb52", "html_url": "https://github.com/rust-lang/rust/commit/7952205bc8b8c890bca12430e75cc3173d49cb52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7952205bc8b8c890bca12430e75cc3173d49cb52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcc53b7dc002ea4a7a28105010c5a1126ee31b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcc53b7dc002ea4a7a28105010c5a1126ee31b7", "html_url": "https://github.com/rust-lang/rust/commit/cdcc53b7dc002ea4a7a28105010c5a1126ee31b7"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "28068a880609619c1a0d9192764c30b58a8b0e93", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7952205bc8b8c890bca12430e75cc3173d49cb52/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7952205bc8b8c890bca12430e75cc3173d49cb52/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=7952205bc8b8c890bca12430e75cc3173d49cb52", "patch": "@@ -1644,11 +1644,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_unchecked(self.alloc.clone()) })\n         }\n     }\n \n@@ -1658,11 +1658,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_back_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_back_unchecked(self.alloc.clone()) })\n         }\n     }\n }\n@@ -1849,7 +1849,7 @@ where\n     type Item = (K, V);\n \n     fn next(&mut self) -> Option<(K, V)> {\n-        self.inner.next(&mut self.pred, &self.alloc)\n+        self.inner.next(&mut self.pred, self.alloc.clone())\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "0d3fdc9019efd792668ecb166a43d065f2b15d16", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7952205bc8b8c890bca12430e75cc3173d49cb52/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7952205bc8b8c890bca12430e75cc3173d49cb52/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=7952205bc8b8c890bca12430e75cc3173d49cb52", "patch": "@@ -1320,7 +1320,7 @@ where\n     fn next(&mut self) -> Option<T> {\n         let pred = &mut self.pred;\n         let mut mapped_pred = |k: &T, _v: &mut ()| pred(k);\n-        self.inner.next(&mut mapped_pred, &self.alloc).map(|(k, _)| k)\n+        self.inner.next(&mut mapped_pred, self.alloc.clone()).map(|(k, _)| k)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}]}