{"sha": "f00179521d10357d099b419a73a22f50295220f1", "node_id": "C_kwDOAAsO6NoAKGYwMDE3OTUyMWQxMDM1N2QwOTliNDE5YTczYTIyZjUwMjk1MjIwZjE", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-06-20T17:42:58Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-06-20T17:42:58Z"}, "message": "don't alloc error string if no error emitted", "tree": {"sha": "0ae62b4c6ccd3aef78b46a3105cc7c9e512ba48e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae62b4c6ccd3aef78b46a3105cc7c9e512ba48e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00179521d10357d099b419a73a22f50295220f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00179521d10357d099b419a73a22f50295220f1", "html_url": "https://github.com/rust-lang/rust/commit/f00179521d10357d099b419a73a22f50295220f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00179521d10357d099b419a73a22f50295220f1/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6010816c37186e2bee316709f0c0197c427513", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6010816c37186e2bee316709f0c0197c427513", "html_url": "https://github.com/rust-lang/rust/commit/1d6010816c37186e2bee316709f0c0197c427513"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "1c53618dd7c30c0c4e0cfbbcf08c1fa6827992e6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f00179521d10357d099b419a73a22f50295220f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00179521d10357d099b419a73a22f50295220f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f00179521d10357d099b419a73a22f50295220f1", "patch": "@@ -2111,14 +2111,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         extend: impl Fn(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n     ) -> bool {\n         let args = segments.clone().flat_map(|segment| segment.args().args);\n-        let types_and_spans: Vec<_> = segments\n-            .clone()\n-            .flat_map(|segment| {\n-                segment.res.and_then(|res| {\n-                    if segment.args().args.is_empty() {\n-                        None\n-                    } else {\n-                        Some((\n+\n+        let (lt, ty, ct, inf) =\n+            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n+                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n+                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n+                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n+                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n+            });\n+        let mut emitted = false;\n+        if lt || ty || ct || inf {\n+            let types_and_spans: Vec<_> = segments\n+                .clone()\n+                .flat_map(|segment| {\n+                    segment.res.and_then(|res| {\n+                        if segment.args().args.is_empty() {\n+                            None\n+                        } else {\n+                            Some((\n                             match res {\n                                 Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n                                 Res::Def(_, def_id)\n@@ -2130,32 +2140,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             },\n                             segment.ident.span,\n                         ))\n-                    }\n+                        }\n+                    })\n                 })\n-            })\n-            .collect();\n-        let this_type = match &types_and_spans[..] {\n-            [.., _, (last, _)] => format!(\n-                \"{} and {last}\",\n-                types_and_spans[..types_and_spans.len() - 1]\n-                    .iter()\n-                    .map(|(x, _)| x.as_str())\n-                    .intersperse(&\", \")\n-                    .collect::<String>()\n-            ),\n-            [(only, _)] => only.to_string(),\n-            [] => \"this type\".to_string(),\n-        };\n+                .collect();\n+            let this_type = match &types_and_spans[..] {\n+                [.., _, (last, _)] => format!(\n+                    \"{} and {last}\",\n+                    types_and_spans[..types_and_spans.len() - 1]\n+                        .iter()\n+                        .map(|(x, _)| x.as_str())\n+                        .intersperse(&\", \")\n+                        .collect::<String>()\n+                ),\n+                [(only, _)] => only.to_string(),\n+                [] => \"this type\".to_string(),\n+            };\n \n-        let (lt, ty, ct, inf) =\n-            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n-                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n-                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n-                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n-                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n-            });\n-        let mut emitted = false;\n-        if lt || ty || ct || inf {\n             let arg_spans: Vec<Span> = args.map(|arg| arg.span()).collect();\n \n             let mut kinds = Vec::with_capacity(4);"}]}