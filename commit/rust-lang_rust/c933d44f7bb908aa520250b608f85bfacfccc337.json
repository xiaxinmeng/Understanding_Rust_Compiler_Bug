{"sha": "c933d44f7bb908aa520250b608f85bfacfccc337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MzNkNDRmN2JiOTA4YWE1MjAyNTBiNjA4Zjg1YmZhY2ZjY2MzMzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-10T03:04:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-12T17:23:27Z"}, "message": "std: Remove #[allow] directives in sys modules\n\nThese were suppressing lots of interesting warnings! Turns out there was also\nquite a bit of dead code.", "tree": {"sha": "82cab26f340e4cfdc5d373d621fd77713f6c6d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cab26f340e4cfdc5d373d621fd77713f6c6d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c933d44f7bb908aa520250b608f85bfacfccc337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c933d44f7bb908aa520250b608f85bfacfccc337", "html_url": "https://github.com/rust-lang/rust/commit/c933d44f7bb908aa520250b608f85bfacfccc337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c933d44f7bb908aa520250b608f85bfacfccc337/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206ee0e8533dd3e1ee324da445e02ad79c51e849", "url": "https://api.github.com/repos/rust-lang/rust/commits/206ee0e8533dd3e1ee324da445e02ad79c51e849", "html_url": "https://github.com/rust-lang/rust/commit/206ee0e8533dd3e1ee324da445e02ad79c51e849"}], "stats": {"total": 262, "additions": 86, "deletions": 176}, "files": [{"sha": "a05d6752073af4f7139445d4ab5550eab938edc6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -273,13 +273,14 @@ pub mod collections;\n pub mod thread;\n pub mod sync;\n \n+#[macro_use]\n+#[path = \"sys/common/mod.rs\"] mod sys_common;\n+\n #[cfg(unix)]\n #[path = \"sys/unix/mod.rs\"] mod sys;\n #[cfg(windows)]\n #[path = \"sys/windows/mod.rs\"] mod sys;\n \n-#[path = \"sys/common/mod.rs\"] mod sys_common;\n-\n pub mod rt;\n mod panicking;\n "}, {"sha": "90cc189b9a0f0a3f8c4e93eb4945f9e740263dbb", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -108,9 +108,7 @@ fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n         // but we just do this to name the main thread and to give it correct\n         // info about the stack bounds.\n         let thread: Thread = NewThread::new(Some(\"<main>\".to_string()));\n-        thread_info::set((my_stack_bottom, my_stack_top),\n-                         sys::thread::guard::main(),\n-                         thread);\n+        thread_info::set(sys::thread::guard::main(), thread);\n \n         // By default, some platforms will send a *signal* when a EPIPE error\n         // would otherwise be delivered. This runtime doesn't install a SIGPIPE"}, {"sha": "3b5fd5a57146010e08ed7e8a13f2d5a7bf327803", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -70,6 +70,17 @@ struct RaceBox(helper_signal::signal);\n unsafe impl Send for RaceBox {}\n unsafe impl Sync for RaceBox {}\n \n+macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n+    static $name: Helper<$m> = Helper {\n+        lock: ::sync::MUTEX_INIT,\n+        cond: ::sync::CONDVAR_INIT,\n+        chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n+        signal: ::cell::UnsafeCell { value: 0 },\n+        initialized: ::cell::UnsafeCell { value: false },\n+        shutdown: ::cell::UnsafeCell { value: false },\n+    };\n+) }\n+\n impl<M: Send> Helper<M> {\n     /// Lazily boots a helper thread, becoming a no-op if the helper has already\n     /// been spawned."}, {"sha": "328c536e18879d91e054ef209cb51c5972a34633", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![allow(dead_code)]\n \n use old_io::{self, IoError, IoResult};\n use prelude::v1::*;\n@@ -19,9 +18,10 @@ use num::Int;\n use old_path::BytesContainer;\n use collections;\n \n+#[macro_use] pub mod helper_thread;\n+\n pub mod backtrace;\n pub mod condvar;\n-pub mod helper_thread;\n pub mod mutex;\n pub mod net;\n pub mod net2;"}, {"sha": "96b72b42e5400bb20af2c494a0f3cec93c0e04ed", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -26,7 +26,9 @@ use str;\n use sys::{self, retry, c, sock_t, last_error, last_net_error, last_gai_error, close_sock,\n           wrlen, msglen_t, os, wouldblock, set_nonblocking, timer, ms_to_timeval,\n           decode_error_detailed};\n-use sync::{Arc, Mutex, MutexGuard};\n+use sync::{Arc, Mutex};\n+#[cfg(not(target_os = \"linux\"))]\n+use sync::MutexGuard;\n use sys_common::{self, keep_going, short_write, timeout};\n use cmp;\n use old_io;\n@@ -620,11 +622,13 @@ impl Drop for Inner {\n     fn drop(&mut self) { unsafe { close_sock(self.fd); } }\n }\n \n+#[cfg(not(target_os = \"linux\"))]\n pub struct Guard<'a> {\n     pub fd: sock_t,\n     pub guard: MutexGuard<'a, ()>,\n }\n \n+#[cfg(not(target_os = \"linux\"))]\n #[unsafe_destructor]\n impl<'a> Drop for Guard<'a> {\n     fn drop(&mut self) {"}, {"sha": "af5b49a42392b4a6177fa38567d4d29c4cedbee5", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -15,7 +15,6 @@ use io::{self, Error, ErrorKind};\n use libc::{self, c_int, c_char, c_void, socklen_t};\n use mem;\n use net::{IpAddr, SocketAddr, Shutdown};\n-use num::Int;\n use sys::c;\n use sys::net::{cvt, cvt_r, cvt_gai, Socket, init, wrlen_t};\n use sys_common::{AsInner, FromInner, IntoInner};\n@@ -24,9 +23,6 @@ use sys_common::{AsInner, FromInner, IntoInner};\n // sockaddr and misc bindings\n ////////////////////////////////////////////////////////////////////////////////\n \n-fn hton<I: Int>(i: I) -> I { i.to_be() }\n-fn ntoh<I: Int>(i: I) -> I { Int::from_be(i) }\n-\n fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int,\n                      payload: T) -> io::Result<()> {\n     unsafe {\n@@ -39,7 +35,7 @@ fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int,\n \n #[allow(dead_code)]\n fn getsockopt<T: Copy>(sock: &Socket, opt: c_int,\n-                           val: c_int) -> io::Result<T> {\n+                       val: c_int) -> io::Result<T> {\n     unsafe {\n         let mut slot: T = mem::zeroed();\n         let mut len = mem::size_of::<T>() as socklen_t;"}, {"sha": "8c428275ccf6d782c9a4314eaf75814beb45481a", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -121,37 +121,6 @@ pub unsafe fn record_os_managed_stack_bounds(stack_lo: uint, _stack_hi: uint) {\n     record_sp_limit(stack_lo + RED_ZONE);\n }\n \n-#[inline(always)]\n-pub unsafe fn record_rust_managed_stack_bounds(stack_lo: uint, stack_hi: uint) {\n-    // When the old runtime had segmented stacks, it used a calculation that was\n-    // \"limit + RED_ZONE + FUDGE\". The red zone was for things like dynamic\n-    // symbol resolution, llvm function calls, etc. In theory this red zone\n-    // value is 0, but it matters far less when we have gigantic stacks because\n-    // we don't need to be so exact about our stack budget. The \"fudge factor\"\n-    // was because LLVM doesn't emit a stack check for functions < 256 bytes in\n-    // size. Again though, we have giant stacks, so we round all these\n-    // calculations up to the nice round number of 20k.\n-    record_sp_limit(stack_lo + RED_ZONE);\n-\n-    return target_record_stack_bounds(stack_lo, stack_hi);\n-\n-    #[cfg(not(windows))] #[inline(always)]\n-    unsafe fn target_record_stack_bounds(_stack_lo: uint, _stack_hi: uint) {}\n-\n-    #[cfg(all(windows, target_arch = \"x86\"))] #[inline(always)]\n-    unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n-        // stack range is at TIB: %fs:0x04 (top) and %fs:0x08 (bottom)\n-        asm!(\"mov $0, %fs:0x04\" :: \"r\"(stack_hi) :: \"volatile\");\n-        asm!(\"mov $0, %fs:0x08\" :: \"r\"(stack_lo) :: \"volatile\");\n-    }\n-    #[cfg(all(windows, target_arch = \"x86_64\"))] #[inline(always)]\n-    unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n-        // stack range is at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n-        asm!(\"mov $0, %gs:0x08\" :: \"r\"(stack_hi) :: \"volatile\");\n-        asm!(\"mov $0, %gs:0x10\" :: \"r\"(stack_lo) :: \"volatile\");\n-    }\n-}\n-\n /// Records the current limit of the stack as specified by `end`.\n ///\n /// This is stored in an OS-dependent location, likely inside of the thread"}, {"sha": "e4985e703ba7645243ec3efd7e41a407eefa47c3", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(dead_code)] // stack_guard isn't used right now on all platforms\n+\n use core::prelude::*;\n \n use cell::RefCell;\n@@ -16,10 +18,6 @@ use thread::Thread;\n use thread_local::State;\n \n struct ThreadInfo {\n-    // This field holds the known bounds of the stack in (lo, hi)\n-    // form. Not all threads necessarily know their precise bounds,\n-    // hence this is optional.\n-    stack_bounds: (uint, uint),\n     stack_guard: uint,\n     thread: Thread,\n }\n@@ -36,7 +34,6 @@ impl ThreadInfo {\n         THREAD_INFO.with(move |c| {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n-                    stack_bounds: (0, 0),\n                     stack_guard: 0,\n                     thread: NewThread::new(None),\n                 })\n@@ -54,10 +51,9 @@ pub fn stack_guard() -> uint {\n     ThreadInfo::with(|info| info.stack_guard)\n }\n \n-pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n+pub fn set(stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n-        stack_bounds: stack_bounds,\n         stack_guard: stack_guard,\n         thread: thread,\n     }));"}, {"sha": "ecd047710bb96c7d3bcdf2bbb3ca698c04acbf75", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -56,6 +56,7 @@\n \n #![allow(non_camel_case_types)]\n #![unstable(feature = \"thread_local_internals\")]\n+#![allow(dead_code)] // sys isn't exported yet\n \n use prelude::v1::*;\n "}, {"sha": "6c17f9910ac88367a005cda453836905e14a2376", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -21,6 +21,10 @@\n //! nor can it decode WTF-8 from arbitrary bytes.\n //! WTF-8 strings can be obtained from UTF-8, UTF-16, or code points.\n \n+// this module is imported from @SimonSapin's repo and has tons of dead code on\n+// unix (it's mostly used on windows), so don't worry about dead code here.\n+#![allow(dead_code)]\n+\n use core::prelude::*;\n \n use core::char::{encode_utf8_raw, encode_utf16_raw};"}, {"sha": "24d709e9928b66336a694ee4be4f9fbe879e5a16", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -84,9 +84,8 @@\n /// all unix platforms we support right now, so it at least gets the job done.\n \n use prelude::v1::*;\n-use os::unix::prelude::*;\n \n-use ffi::{CStr, AsOsStr};\n+use ffi::CStr;\n use old_io::IoResult;\n use libc;\n use mem;\n@@ -151,7 +150,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n     // I/O done here is blocking I/O, not green I/O, so we don't have to\n     // worry about this being a native vs green mutex.\n     static LOCK: StaticMutex = MUTEX_INIT;\n-    let _g = unsafe { LOCK.lock() };\n+    let _g = LOCK.lock();\n \n     try!(writeln!(w, \"stack backtrace:\"));\n \n@@ -253,6 +252,8 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void,\n fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void,\n          symaddr: *mut libc::c_void) -> IoResult<()> {\n     use env;\n+    use ffi::AsOsStr;\n+    use os::unix::prelude::*;\n     use ptr;\n \n     ////////////////////////////////////////////////////////////////////////"}, {"sha": "f7c57c3f5e53747992ef77809b574dc02ae0a1a2", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use core::prelude::*;\n-use io::prelude::*;\n \n use io;\n use libc::{self, c_int, size_t, c_void};"}, {"sha": "ea74aab3331ae5e49c12b76e6f89b999de9ace63", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -13,8 +13,8 @@ use io::prelude::*;\n use os::unix::prelude::*;\n \n use ffi::{CString, CStr, OsString, AsOsStr, OsStr};\n-use io::{self, Error, Seek, SeekFrom};\n-use libc::{self, c_int, c_void, size_t, off_t, c_char, mode_t};\n+use io::{self, Error, SeekFrom};\n+use libc::{self, c_int, size_t, off_t, c_char, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n@@ -324,14 +324,6 @@ pub fn rmdir(p: &Path) -> io::Result<()> {\n     Ok(())\n }\n \n-pub fn chown(p: &Path, uid: isize, gid: isize) -> io::Result<()> {\n-    let p = try!(cstr(p));\n-    try!(cvt_r(|| unsafe {\n-        libc::chown(p.as_ptr(), uid as libc::uid_t, gid as libc::gid_t)\n-    }));\n-    Ok(())\n-}\n-\n pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n     let c_path = try!(cstr(p));\n     let p = c_path.as_ptr();"}, {"sha": "865ea9872792b7e1ff66b7dca645527b00889552", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -10,33 +10,17 @@\n \n #![allow(missing_docs)]\n #![allow(non_camel_case_types)]\n-#![allow(unused_imports)]\n-#![allow(dead_code)]\n-#![allow(unused_unsafe)]\n-#![allow(unused_mut)]\n \n use prelude::v1::*;\n \n use ffi::CStr;\n use io::{self, ErrorKind};\n use libc;\n use num::{Int, SignedInt};\n-use num;\n-use old_io::{self, IoResult, IoError};\n+use old_io::{self, IoError};\n use str;\n use sys_common::mkerr_libc;\n \n-macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n-    static $name: Helper<$m> = Helper {\n-        lock: ::sync::MUTEX_INIT,\n-        cond: ::sync::CONDVAR_INIT,\n-        chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n-        signal: ::cell::UnsafeCell { value: 0 },\n-        initialized: ::cell::UnsafeCell { value: false },\n-        shutdown: ::cell::UnsafeCell { value: false },\n-    };\n-) }\n-\n pub mod backtrace;\n pub mod c;\n pub mod condvar;"}, {"sha": "1c0ce2938040dceee727939abeff47242bda5f19", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -12,7 +12,6 @@ use prelude::v1::*;\n \n use cell::UnsafeCell;\n use sys::sync as ffi;\n-use sys_common::mutex;\n \n pub struct Mutex { inner: UnsafeCell<ffi::pthread_mutex_t> }\n \n@@ -28,6 +27,7 @@ pub const MUTEX_INIT: Mutex = Mutex {\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n+#[allow(dead_code)] // sys isn't exported yet\n impl Mutex {\n     #[inline]\n     pub unsafe fn new() -> Mutex {"}, {"sha": "3266da5eb31cb8a283a7a75e875f3bf28cedb72f", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -10,6 +10,8 @@\n \n //! Implementation of `std::os` functionality for unix systems\n \n+#![allow(unused_imports)] // lots of cfg code here\n+\n use prelude::v1::*;\n use os::unix::*;\n \n@@ -482,7 +484,7 @@ pub fn home_dir() -> Option<PathBuf> {\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"ios\")))]\n     unsafe fn fallback() -> Option<OsString> {\n-        let mut amt = match libc::sysconf(c::_SC_GETPW_R_SIZE_MAX) {\n+        let amt = match libc::sysconf(c::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,\n             n => n as usize,\n         };"}, {"sha": "89ab3e1981be4bf35da3402bcceb9fb8fcf49503", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -70,7 +70,7 @@ impl Slice {\n     }\n \n     pub fn from_str(s: &str) -> &Slice {\n-        unsafe { mem::transmute(s.as_bytes()) }\n+        Slice::from_u8_slice(s.as_bytes())\n     }\n \n     pub fn to_str(&self) -> Option<&str> {"}, {"sha": "9cddfca69cbdd048752c620cc81e64f242e87b9c", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -143,7 +143,7 @@ impl UnixStream {\n     fn lock_nonblocking<'a>(&'a self) -> Guard<'a> {\n         let ret = Guard {\n             fd: self.fd(),\n-            guard: unsafe { self.inner.lock.lock().unwrap() },\n+            guard: self.inner.lock.lock().unwrap(),\n         };\n         set_nonblocking(self.fd(), true);\n         ret"}, {"sha": "d5469eb82efd1933f93fdfcba24ff51e75525719", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -17,7 +17,7 @@ use collections::HashMap;\n use ffi::CString;\n use hash::Hash;\n use old_io::process::{ProcessExit, ExitStatus, ExitSignal};\n-use old_io::{self, IoResult, IoError, EndOfFile};\n+use old_io::{IoResult, EndOfFile};\n use libc::{self, pid_t, c_void, c_int};\n use mem;\n use os;\n@@ -33,12 +33,6 @@ pub use sys_common::ProcessConfig;\n \n helper_init! { static HELPER: Helper<Req> }\n \n-/// Unix-specific extensions to the Command builder\n-pub struct CommandExt {\n-    uid: Option<u32>,\n-    gid: Option<u32>,\n-}\n-\n /// The unique id of the process (this should never be negative).\n pub struct Process {\n     pub pid: pid_t\n@@ -332,15 +326,15 @@ impl Process {\n         // The actual communication between the helper thread and this thread is\n         // quite simple, just a channel moving data around.\n \n-        unsafe { HELPER.boot(register_sigchld, waitpid_helper) }\n+        HELPER.boot(register_sigchld, waitpid_helper);\n \n         match self.try_wait() {\n             Some(ret) => return Ok(ret),\n             None => {}\n         }\n \n         let (tx, rx) = channel();\n-        unsafe { HELPER.send(NewChild(self.pid, tx, deadline)); }\n+        HELPER.send(NewChild(self.pid, tx, deadline));\n         return match rx.recv() {\n             Ok(e) => Ok(e),\n             Err(..) => Err(timeout(\"wait timed out\")),\n@@ -424,8 +418,15 @@ impl Process {\n                             Ok(NewChild(pid, tx, deadline)) => {\n                                 active.push((pid, tx, deadline));\n                             }\n+                            // Once we've been disconnected it means the main\n+                            // thread is exiting (at_exit has run). We could\n+                            // still have active waiter for other threads, so\n+                            // we're just going to drop them all on the floor.\n+                            // This means that they won't receive a \"you're\n+                            // done\" message in which case they'll be considered\n+                            // as timed out, but more generally errors will\n+                            // start propagating.\n                             Err(TryRecvError::Disconnected) => {\n-                                assert!(active.len() == 0);\n                                 break 'outer;\n                             }\n                             Err(TryRecvError::Empty) => break,"}, {"sha": "03b77eb75d785d023d010fb302e0b7e8ac038296", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -14,18 +14,13 @@ use collections::HashMap;\n use env;\n use ffi::{OsString, OsStr, CString};\n use fmt;\n-use hash::Hash;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_void, c_int, gid_t, uid_t};\n use mem;\n-use old_io;\n-use os;\n use os::unix::OsStrExt;\n use ptr;\n-use sync::mpsc::{channel, Sender, Receiver};\n use sys::pipe2::AnonPipe;\n-use sys::{self, retry, c, wouldblock, set_nonblocking, ms_to_timeval, cvt};\n-use sys_common::AsInner;\n+use sys::{self, retry, c, cvt};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -127,10 +122,6 @@ pub struct Process {\n const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n \n impl Process {\n-    pub fn id(&self) -> pid_t {\n-        self.pid\n-    }\n-\n     pub unsafe fn kill(&self) -> io::Result<()> {\n         try!(cvt(libc::funcs::posix88::signal::kill(self.pid, libc::SIGKILL)));\n         Ok(())"}, {"sha": "adf9da2d067cd202686cecaded415165c3ce3ff7", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -23,12 +23,6 @@ unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {}\n \n impl RWLock {\n-    #[inline]\n-    pub unsafe fn new() -> RWLock {\n-        // Might be moved and address is changing it is better to avoid\n-        // initialization of potentially opaque OS data before it landed\n-        RWLOCK_INIT\n-    }\n     #[inline]\n     pub unsafe fn read(&self) {\n         let r = ffi::pthread_rwlock_rdlock(self.inner.get());"}, {"sha": "1f212ea5a61678233b5f2daab54c15537dbc9543", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -37,7 +37,6 @@ impl Drop for Handler {\n           target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n mod imp {\n-    use core::prelude::*;\n     use sys_common::stack;\n \n     use super::Handler;"}, {"sha": "2a6994824c7eb7c0f44d2fef0b211ddfc7783575", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -139,10 +139,6 @@ impl TcpAcceptor {\n         Err(sys_common::eof())\n     }\n \n-    pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        net::sockname(self.fd(), libc::getsockname)\n-    }\n-\n     pub fn set_timeout(&mut self, timeout: Option<u64>) {\n         self.deadline = timeout.map(|a| sys::timer::now() + a).unwrap_or(0);\n     }"}, {"sha": "b4002f266a18751bda61bedb871a91db4bc0b13e", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(dead_code)]\n+\n use core::prelude::*;\n \n use io;\n@@ -262,15 +264,15 @@ pub unsafe fn set_name(name: &str) {\n     // pthread_setname_np() since glibc 2.12\n     // availability autodetected via weak linkage\n     let cname = CString::new(name).unwrap();\n-    type F = unsafe extern \"C\" fn(libc::pthread_t, *const libc::c_char) -> libc::c_int;\n+    type F = unsafe extern \"C\" fn(libc::pthread_t, *const libc::c_char)\n+                                  -> libc::c_int;\n     extern {\n         #[linkage = \"extern_weak\"]\n         static pthread_setname_np: *const ();\n     }\n     if !pthread_setname_np.is_null() {\n-        unsafe {\n-            mem::transmute::<*const (), F>(pthread_setname_np)(pthread_self(), cname.as_ptr());\n-        }\n+        mem::transmute::<*const (), F>(pthread_setname_np)(pthread_self(),\n+                                                           cname.as_ptr());\n     }\n }\n \n@@ -300,6 +302,7 @@ pub unsafe fn detach(native: rust_thread) {\n }\n \n pub unsafe fn yield_now() { assert_eq!(sched_yield(), 0); }\n+\n // glibc >= 2.15 has a __pthread_get_minstack() function that returns\n // PTHREAD_STACK_MIN plus however many bytes are needed for thread-local\n // storage.  We need that information to avoid blowing up when a small stack"}, {"sha": "d2f51678d497fa737c463c0089b4729fe63b1a73", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -58,11 +58,9 @@ mod inner {\n         type Output = Duration;\n \n         fn sub(self, other: &SteadyTime) -> Duration {\n-            unsafe {\n-                let info = info();\n-                let diff = self.t as i64 - other.t as i64;\n-                Duration::nanoseconds(diff * info.numer as i64 / info.denom as i64)\n-            }\n+            let info = info();\n+            let diff = self.t as i64 - other.t as i64;\n+            Duration::nanoseconds(diff * info.numer as i64 / info.denom as i64)\n         }\n     }\n }"}, {"sha": "ce9748ede85647c9ce882f809bf34f7d0ca80642", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -100,7 +100,7 @@ pub fn now() -> u64 {\n fn helper(input: libc::c_int, messages: Receiver<Req>, _: ()) {\n     let mut set: c::fd_set = unsafe { mem::zeroed() };\n \n-    let mut fd = FileDesc::new(input, true);\n+    let fd = FileDesc::new(input, true);\n     let mut timeout: libc::timeval = unsafe { mem::zeroed() };\n \n     // active timers are those which are able to be selected upon (and it's a"}, {"sha": "1d74b36a62517d24518a13a42c1527200febd3fe", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use sys::fs::FileDesc;\n-use libc::{self, c_int, c_ulong, funcs};\n+use libc::{self, c_int, c_ulong};\n use old_io::{self, IoResult, IoError};\n use sys::c;\n use sys_common;\n@@ -86,6 +86,4 @@ impl TTY {\n     pub fn get_winsize(&mut self) -> IoResult<(int, int)> {\n         Err(sys_common::unimpl())\n     }\n-\n-    pub fn isatty(&self) -> bool { false }\n }"}, {"sha": "8de2fe1336f3a9f24ba8a2cd7f14beeb51f6d2b0", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -24,19 +24,16 @@\n \n #![allow(dead_code)]\n \n+use prelude::v1::*;\n+\n use dynamic_lib::DynamicLibrary;\n use ffi::CStr;\n use intrinsics;\n-use old_io::{IoResult, Writer};\n+use old_io::IoResult;\n use libc;\n use mem;\n-use ops::Drop;\n-use option::Option::{Some};\n-use old_path::Path;\n use ptr;\n-use result::Result::{Ok, Err};\n-use slice::SliceExt;\n-use str::{self, StrExt};\n+use str;\n use sync::{StaticMutex, MUTEX_INIT};\n \n use sys_common::backtrace::*;"}, {"sha": "5e6fcc664076bfee2d7843a7fe5bef48c74c28a0", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -18,7 +18,7 @@ use old_io;\n \n use prelude::v1::*;\n use sys;\n-use sys_common::{mkerr_libc};\n+use sys_common::{self, mkerr_libc};\n \n use old_io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use old_io::{IoResult, IoError, FileStat, SeekStyle};\n@@ -434,7 +434,7 @@ pub fn stat(p: &Path) -> IoResult<FileStat> {\n // FIXME: move this to platform-specific modules (for now)?\n pub fn lstat(_p: &Path) -> IoResult<FileStat> {\n     // FIXME: implementation is missing\n-    Err(super::unimpl())\n+    Err(sys_common::unimpl())\n }\n \n pub fn utime(p: &Path, atime: u64, mtime: u64) -> IoResult<()> {"}, {"sha": "46085826e60db09a66c35fe7c3fe2364eb20fa43", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -24,17 +24,6 @@ use os::windows::{OsStrExt, OsStringExt};\n use path::PathBuf;\n use sync::{Once, ONCE_INIT};\n \n-macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n-    static $name: Helper<$m> = Helper {\n-        lock: ::sync::MUTEX_INIT,\n-        cond: ::sync::CONDVAR_INIT,\n-        chan: ::cell::UnsafeCell { value: 0 as *mut ::sync::mpsc::Sender<$m> },\n-        signal: ::cell::UnsafeCell { value: 0 },\n-        initialized: ::cell::UnsafeCell { value: false },\n-        shutdown: ::cell::UnsafeCell { value: false },\n-    };\n-) }\n-\n pub mod backtrace;\n pub mod c;\n pub mod condvar;\n@@ -216,15 +205,7 @@ pub fn init_net() {\n     }\n }\n \n-pub fn unimpl() -> IoError {\n-    IoError {\n-        kind: old_io::IoUnavailable,\n-        desc: \"operation is not implemented\",\n-        detail: None,\n-    }\n-}\n-\n-fn to_utf16(s: Option<&str>) -> IoResult<Vec<u16>> {\n+pub fn to_utf16(s: Option<&str>) -> IoResult<Vec<u16>> {\n     match s {\n         Some(s) => Ok(to_utf16_os(OsStr::from_str(s))),\n         None => Err(IoError {"}, {"sha": "119ff3dbcc8e0175971f4e19db0365b5b5b64966", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -29,7 +29,6 @@ use ptr;\n use str;\n use sync::{StaticMutex, MUTEX_INIT};\n use sys::fs::FileDesc;\n-\n use sys::timer;\n use sys_common::{AsInner, timeout};\n \n@@ -129,8 +128,6 @@ impl Process {\n         use libc::funcs::extra::msvcrt::get_osfhandle;\n \n         use mem;\n-        use iter::IteratorExt;\n-        use str::StrExt;\n \n         if cfg.gid().is_some() || cfg.uid().is_some() {\n             return Err(IoError {"}, {"sha": "6e46bf97d1bac9cbca646e100655b2bcd5aa74dc", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -10,12 +10,13 @@\n \n #![allow(deprecated)]\n \n+use prelude::v1::*;\n+\n use old_io::net::ip;\n use old_io::IoResult;\n use libc;\n use mem;\n use ptr;\n-use prelude::v1::*;\n use super::{last_error, last_net_error, sock_t};\n use sync::Arc;\n use sync::atomic::{AtomicBool, Ordering};"}, {"sha": "a23a90a9cf8f897b03c281687fe5e46ce44dfbd2", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -20,15 +20,15 @@\n //! Other than that, the implementation is pretty straightforward in terms of\n //! the other two implementations of timers with nothing *that* new showing up.\n \n-use self::Req::*;\n use prelude::v1::*;\n+use self::Req::*;\n \n use libc;\n use ptr;\n \n use old_io::IoResult;\n-use sync::mpsc::{channel, Sender, Receiver, TryRecvError};\n use sys_common::helper_thread::Helper;\n+use sync::mpsc::{channel, TryRecvError, Sender, Receiver};\n \n helper_init! { static HELPER: Helper<Req> }\n "}, {"sha": "37dce423a687f6f38118d1ef9c53db40bbf4aacd", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -38,7 +38,7 @@ use str::from_utf8;\n use super::c::{ENABLE_ECHO_INPUT, ENABLE_EXTENDED_FLAGS};\n use super::c::{ENABLE_INSERT_MODE, ENABLE_LINE_INPUT};\n use super::c::{ENABLE_PROCESSED_INPUT, ENABLE_QUICK_EDIT_MODE};\n-use super::c::{CONSOLE_SCREEN_BUFFER_INFO};\n+use super::c::CONSOLE_SCREEN_BUFFER_INFO;\n use super::c::{ReadConsoleW, WriteConsoleW, GetConsoleMode, SetConsoleMode};\n use super::c::{GetConsoleScreenBufferInfo};\n "}, {"sha": "5c5f9f75fd9dbda818ec949e845869be9e19ee0e", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d44f7bb908aa520250b608f85bfacfccc337/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=c933d44f7bb908aa520250b608f85bfacfccc337", "patch": "@@ -281,17 +281,13 @@ impl Builder {\n             let my_stack_top = addr as usize;\n             let my_stack_bottom = my_stack_top - stack_size + 1024;\n             unsafe {\n-                stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n-            }\n-            match their_thread.name() {\n-                Some(name) => unsafe { imp::set_name(name); },\n-                None => {}\n+                if let Some(name) = their_thread.name() {\n+                    imp::set_name(name);\n+                }\n+                stack::record_os_managed_stack_bounds(my_stack_bottom,\n+                                                      my_stack_top);\n+                thread_info::set(imp::guard::current(), their_thread);\n             }\n-            thread_info::set(\n-                (my_stack_bottom, my_stack_top),\n-                unsafe { imp::guard::current() },\n-                their_thread\n-            );\n \n             let mut output = None;\n             let f: Thunk<(), T> = if stdout.is_some() || stderr.is_some() {"}]}