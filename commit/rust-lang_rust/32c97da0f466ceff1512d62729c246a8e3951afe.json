{"sha": "32c97da0f466ceff1512d62729c246a8e3951afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYzk3ZGEwZjQ2NmNlZmYxNTEyZDYyNzI5YzI0NmE4ZTM5NTFhZmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-16T19:02:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-17T17:26:40Z"}, "message": "In some limited cases, suggest `where` bounds for non-type params\n\nPartially address #81971.", "tree": {"sha": "17c475bfa7ceba642638643a3277f3ae1567aa5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c475bfa7ceba642638643a3277f3ae1567aa5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32c97da0f466ceff1512d62729c246a8e3951afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32c97da0f466ceff1512d62729c246a8e3951afe", "html_url": "https://github.com/rust-lang/rust/commit/32c97da0f466ceff1512d62729c246a8e3951afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32c97da0f466ceff1512d62729c246a8e3951afe/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe989dd768f5dfdb0fc90933f3f74fa4579fefd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe989dd768f5dfdb0fc90933f3f74fa4579fefd", "html_url": "https://github.com/rust-lang/rust/commit/8fe989dd768f5dfdb0fc90933f3f74fa4579fefd"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "f41bb7e6d6350945d172f565e6851340cb90c457", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -75,6 +75,36 @@ impl<'tcx> TyS<'tcx> {\n     }\n }\n \n+pub fn suggest_arbitrary_trait_bound(\n+    generics: &hir::Generics<'_>,\n+    err: &mut DiagnosticBuilder<'_>,\n+    param_name: &str,\n+    constraint: &str,\n+) -> bool {\n+    let param = generics.params.iter().find(|p| p.name.ident().as_str() == param_name);\n+    match (param, param_name) {\n+        (Some(_), \"Self\") => return false,\n+        _ => {}\n+    }\n+    // Suggest a where clause bound for a non-type paremeter.\n+    let (action, prefix) = if generics.where_clause.predicates.is_empty() {\n+        (\"introducing a\", \" where \")\n+    } else {\n+        (\"extending the\", \", \")\n+    };\n+    err.span_suggestion_verbose(\n+        generics.where_clause.tail_span_for_suggestion(),\n+        &format!(\n+            \"consider {} `where` bound, but there might be an alternative better way to express \\\n+             this requirement\",\n+            action,\n+        ),\n+        format!(\"{}{}: {}\", prefix, param_name, constraint),\n+        Applicability::MaybeIncorrect,\n+    );\n+    true\n+}\n+\n /// Suggest restricting a type param with a new bound.\n pub fn suggest_constraining_type_param(\n     tcx: TyCtxt<'_>,"}, {"sha": "5c97791530d9989a9a3a030534984cc47444b504", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -17,8 +17,8 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::ty::{\n-    self, suggest_constraining_type_param, AdtKind, DefIdTree, Infer, InferTy, ToPredicate, Ty,\n-    TyCtxt, TypeFoldable, WithConstness,\n+    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n+    Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let (param_ty, projection) = match self_ty.kind() {\n             ty::Param(_) => (true, None),\n             ty::Projection(projection) => (false, Some(projection)),\n-            _ => return,\n+            _ => (false, None),\n         };\n \n         // FIXME: Add check for trait bound that is already present, particularly `?Sized` so we\n@@ -453,6 +453,26 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Struct(_, generics)\n+                        | hir::ItemKind::Enum(_, generics)\n+                        | hir::ItemKind::Union(_, generics)\n+                        | hir::ItemKind::Trait(_, _, generics, ..)\n+                        | hir::ItemKind::Impl(hir::Impl { generics, .. })\n+                        | hir::ItemKind::Fn(_, generics, _)\n+                        | hir::ItemKind::TyAlias(_, generics)\n+                        | hir::ItemKind::TraitAlias(generics, _)\n+                        | hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }),\n+                    ..\n+                }) if !param_ty => {\n+                    // Missing generic type parameter bound.\n+                    let param_name = self_ty.to_string();\n+                    let constraint = trait_ref.print_only_trait_path().to_string();\n+                    if suggest_arbitrary_trait_bound(generics, &mut err, &param_name, &constraint) {\n+                        return;\n+                    }\n+                }\n                 hir::Node::Crate(..) => return,\n \n                 _ => {}"}, {"sha": "e14e17c162233ac3008ef32752b00ed9d1395b1a", "filename": "src/test/ui/partialeq_help.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpartialeq_help.stderr?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -5,6 +5,10 @@ LL |     a == b;\n    |       ^^ no implementation for `&T == T`\n    |\n    = help: the trait `PartialEq<T>` is not implemented for `&T`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn foo<T: PartialEq>(a: &T, b: T) where &T: PartialEq<T> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0e8a774bce37fde91014a3f92690b8b41f0a6ad8", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -18,6 +18,10 @@ LL |     default type U = &'static B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`\n    |\n    = help: the trait `PartialEq<B>` is not implemented for `&'static B`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | impl<B: 'static, T> X<B> for T where &'static B: PartialEq<B> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "a2bc6fd09b5663e5a8866822383338a40e9b02d0", "filename": "src/test/ui/suggestions/suggest-change-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -2,7 +2,7 @@\n \n use std::io::{BufRead, BufReader, Read, Write};\n \n-fn issue_81421<T: Read + Write>(mut stream: T) {\n+fn issue_81421<T: Read + Write>(mut stream: T) { //~ HELP consider introducing a `where` bound\n     let initial_message = format!(\"Hello world\");\n     let mut buffer: Vec<u8> = Vec::new();\n     let bytes_written = stream.write_all(initial_message.as_bytes());"}, {"sha": "9b8181647a0c15790715e665241946d0e47f7b5a", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -9,6 +9,10 @@ help: consider removing the leading `&`-reference\n    |\n LL |         let mut stream_reader = BufReader::new(stream);\n    |                                               --\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn issue_81421<T: Read + Write>(mut stream: T) where &T: std::io::Read {\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing this borrow's mutability\n    |\n LL |         let mut stream_reader = BufReader::new(&mut stream);"}, {"sha": "86d589ffa9e31f726d99384540d1b0770e5357ba", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c97da0f466ceff1512d62729c246a8e3951afe/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=32c97da0f466ceff1512d62729c246a8e3951afe", "patch": "@@ -35,6 +35,10 @@ LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n    = note: required by `from`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn check<T: Iterator, U: ?Sized>() where u64: From<T> {\n+   |                                    ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfied\n   --> $DIR/suggest-where-clause.rs:18:5\n@@ -43,6 +47,10 @@ LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n    = note: required by `from`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn check<T: Iterator, U: ?Sized>() where u64: From<<T as Iterator>::Item> {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Misc<_>: From<T>` is not satisfied\n   --> $DIR/suggest-where-clause.rs:23:5"}]}