{"sha": "e97569c998e87288fe7730e1d8bed0def6bda120", "node_id": "C_kwDOAAsO6NoAKGU5NzU2OWM5OThlODcyODhmZTc3MzBlMWQ4YmVkMGRlZjZiZGExMjA", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T06:44:23Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T07:36:55Z"}, "message": "Drop extensionUri copy", "tree": {"sha": "110af3e5172cd08ef46389a43cb5c0c05f3f6d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/110af3e5172cd08ef46389a43cb5c0c05f3f6d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97569c998e87288fe7730e1d8bed0def6bda120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97569c998e87288fe7730e1d8bed0def6bda120", "html_url": "https://github.com/rust-lang/rust/commit/e97569c998e87288fe7730e1d8bed0def6bda120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97569c998e87288fe7730e1d8bed0def6bda120/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63690c058dbffcf334e3eb67a73102b30504d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63690c058dbffcf334e3eb67a73102b30504d14", "html_url": "https://github.com/rust-lang/rust/commit/f63690c058dbffcf334e3eb67a73102b30504d14"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "cdbaa67fe22cdb65fb7752cfcb108ed6d073c8fd", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=e97569c998e87288fe7730e1d8bed0def6bda120", "patch": "@@ -30,11 +30,9 @@ export class Config {\n     } = vscode.extensions.getExtension(this.extensionId)!.packageJSON;\n \n     readonly globalStorageUri: vscode.Uri;\n-    readonly installUri: vscode.Uri;\n \n     constructor(ctx: vscode.ExtensionContext) {\n         this.globalStorageUri = ctx.globalStorageUri;\n-        this.installUri = ctx.extensionUri;\n         vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n         this.refreshLogging();\n     }"}, {"sha": "74fdc59a1ef7043b9bee18cf32dd1ce5f52978da", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=e97569c998e87288fe7730e1d8bed0def6bda120", "patch": "@@ -156,14 +156,10 @@ export async function deactivate() {\n     ctx = undefined;\n }\n \n-async function bootstrap(config: Config, state: PersistentState): Promise<string> {\n+async function bootstrap(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string> {\n     await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n-    const path = await bootstrapServer(config, state);\n-    return path;\n-}\n \n-async function bootstrapServer(config: Config, state: PersistentState): Promise<string> {\n-    const path = await getServer(config, state);\n+    const path = await getServer(context, config, state);\n     if (!path) {\n         throw new Error(\n             \"Rust Analyzer Language Server is not available. \" +\n@@ -228,7 +224,7 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n     );\n }\n \n-async function getServer(config: Config, state: PersistentState): Promise<string | undefined> {\n+async function getServer(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string | undefined> {\n     const explicitPath = serverPath(config);\n     if (explicitPath) {\n         if (explicitPath.startsWith(\"~/\")) {\n@@ -264,14 +260,14 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n     const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n     const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n-    const bundled = vscode.Uri.joinPath(config.installUri, \"server\", `rust-analyzer${ext}`);\n+    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n     const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n     const exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n     if (bundledExists) {\n         if (!await isNixOs()) {\n             return bundled.fsPath;\n         }\n-        if (!exists) {\n+        if (!exists || config.package.version !== state.serverVersion) {\n             await vscode.workspace.fs.copy(bundled, dest);\n             await patchelf(dest);\n         }"}, {"sha": "3e86ed1e32317b3adff1151917a23e434c91ca92", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e97569c998e87288fe7730e1d8bed0def6bda120/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=e97569c998e87288fe7730e1d8bed0def6bda120", "patch": "@@ -3,5 +3,18 @@ import { log } from './util';\n \n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n+        const { serverVersion } = this;\n+        log.info(\"PersistentState:\", { serverVersion });\n+    }\n+\n+    /**\n+     * Version of the extension that installed the server.\n+     * Used to check if we need to run patchelf again on NixOS.\n+     */\n+    get serverVersion(): string | undefined {\n+        return this.globalState.get(\"serverVersion\");\n+    }\n+    async updateServerVersion(value: string | undefined) {\n+        await this.globalState.update(\"serverVersion\", value);\n     }\n }"}]}