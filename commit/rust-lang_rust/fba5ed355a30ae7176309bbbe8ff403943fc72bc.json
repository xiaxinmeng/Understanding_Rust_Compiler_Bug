{"sha": "fba5ed355a30ae7176309bbbe8ff403943fc72bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTVlZDM1NWEzMGFlNzE3NjMwOWJiYmU4ZmY0MDM5NDNmYzcyYmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T16:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T16:08:19Z"}, "message": "Rollup merge of #61023 - spastorino:use-iterate-qualify-consts, r=oli-obk\n\nMigrate from recursion to iterate on qualify consts visitor impl\n\nr? @oli-obk", "tree": {"sha": "dba11b967e02547319a1760047096ab5d9ea05a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba11b967e02547319a1760047096ab5d9ea05a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba5ed355a30ae7176309bbbe8ff403943fc72bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5XPzCRBK7hj4Ov3rIwAAdHIIAKYlD0yccFVkTmXilsB7JZ0K\nEglGFYqrdJWvJIhVjx0M6TT6z2gFvn6/4xDlTv3wPPjv/efwsgi+Scca22wglfUF\nIG0QS+FNRbpZUztw0HF7znS6v7hxKtNKUcq94TAO6n/SXw95bHiEiXckog36e2gY\nxvOCmfcP/gQI2tUlYjpFwgp39M+KFIQYHQ6gmXsYRnrZo/PYGf5KzLluH81QM37g\nhDnZ0//LH8NMDO+zgGXdBz9jThApuPrHCjVu6ubZ+UHb/dPeIlZve6Sb2MMr5SwB\nR3Z9w3nTPXtd0Gu+4Z71xEINlNyFOtAFmBI2yxl/YULT++EL5WyOwOfzlg8GEEc=\n=6zph\n-----END PGP SIGNATURE-----\n", "payload": "tree dba11b967e02547319a1760047096ab5d9ea05a5\nparent 621231053cea366d038e69030f4175213b2400e8\nparent f47b87279c2d67c7822ad2c36480614e033d6277\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558541299 +0200\ncommitter GitHub <noreply@github.com> 1558541299 +0200\n\nRollup merge of #61023 - spastorino:use-iterate-qualify-consts, r=oli-obk\n\nMigrate from recursion to iterate on qualify consts visitor impl\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba5ed355a30ae7176309bbbe8ff403943fc72bc", "html_url": "https://github.com/rust-lang/rust/commit/fba5ed355a30ae7176309bbbe8ff403943fc72bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba5ed355a30ae7176309bbbe8ff403943fc72bc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621231053cea366d038e69030f4175213b2400e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/621231053cea366d038e69030f4175213b2400e8", "html_url": "https://github.com/rust-lang/rust/commit/621231053cea366d038e69030f4175213b2400e8"}, {"sha": "f47b87279c2d67c7822ad2c36480614e033d6277", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47b87279c2d67c7822ad2c36480614e033d6277", "html_url": "https://github.com/rust-lang/rust/commit/f47b87279c2d67c7822ad2c36480614e033d6277"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "12357cb10a991bfae20895b513bfa40ef7bdd0b4", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/fba5ed355a30ae7176309bbbe8ff403943fc72bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5ed355a30ae7176309bbbe8ff403943fc72bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=fba5ed355a30ae7176309bbbe8ff403943fc72bc", "patch": "@@ -930,58 +930,60 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     context: PlaceContext,\n                     location: Location) {\n         debug!(\"visit_place: place={:?} context={:?} location={:?}\", place, context, location);\n-        self.super_place(place, context, location);\n-        match *place {\n-            Place::Base(PlaceBase::Local(_)) => {}\n-            Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. })) => {\n-                unreachable!()\n-            }\n-            Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                if self.tcx\n-                       .get_attrs(def_id)\n-                       .iter()\n-                       .any(|attr| attr.check_name(sym::thread_local)) {\n-                    if self.mode != Mode::Fn {\n-                        span_err!(self.tcx.sess, self.span, E0625,\n-                                  \"thread-local statics cannot be \\\n-                                   accessed at compile-time\");\n-                    }\n-                    return;\n+        place.iterate(|place_base, place_projections| {\n+            match place_base {\n+                PlaceBase::Local(_) => {}\n+                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) => {\n+                    unreachable!()\n                 }\n+                PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+                    if self.tcx\n+                           .get_attrs(*def_id)\n+                           .iter()\n+                           .any(|attr| attr.check_name(sym::thread_local)) {\n+                        if self.mode != Mode::Fn {\n+                            span_err!(self.tcx.sess, self.span, E0625,\n+                                      \"thread-local statics cannot be \\\n+                                       accessed at compile-time\");\n+                        }\n+                        return;\n+                    }\n \n-                // Only allow statics (not consts) to refer to other statics.\n-                if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-                    if self.mode == Mode::Static && context.is_mutating_use() {\n-                        // this is not strictly necessary as miri will also bail out\n-                        // For interior mutability we can't really catch this statically as that\n-                        // goes through raw pointers and intermediate temporaries, so miri has\n-                        // to catch this anyway\n-                        self.tcx.sess.span_err(\n-                            self.span,\n-                            \"cannot mutate statics in the initializer of another static\",\n-                        );\n+                    // Only allow statics (not consts) to refer to other statics.\n+                    if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+                        if self.mode == Mode::Static && context.is_mutating_use() {\n+                            // this is not strictly necessary as miri will also bail out\n+                            // For interior mutability we can't really catch this statically as that\n+                            // goes through raw pointers and intermediate temporaries, so miri has\n+                            // to catch this anyway\n+                            self.tcx.sess.span_err(\n+                                self.span,\n+                                \"cannot mutate statics in the initializer of another static\",\n+                            );\n+                        }\n+                        return;\n                     }\n-                    return;\n-                }\n-                unleash_miri!(self);\n+                    unleash_miri!(self);\n \n-                if self.mode != Mode::Fn {\n-                    let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n-                                                   \"{}s cannot refer to statics, use \\\n-                                                    a constant instead\", self.mode);\n-                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\n-                            \"Static and const variables can refer to other const variables. But a \\\n-                             const variable cannot refer to a static variable.\"\n-                        );\n-                        err.help(\n-                            \"To fix this, the value can be extracted as a const and then used.\"\n-                        );\n+                    if self.mode != Mode::Fn {\n+                        let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n+                                                       \"{}s cannot refer to statics, use \\\n+                                                        a constant instead\", self.mode);\n+                        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                            err.note(\n+                                \"Static and const variables can refer to other const variables. \\\n+                                 But a const variable cannot refer to a static variable.\"\n+                            );\n+                            err.help(\n+                                \"To fix this, the value can be extracted as a const and then used.\"\n+                            );\n+                        }\n+                        err.emit()\n                     }\n-                    err.emit()\n                 }\n             }\n-            Place::Projection(ref proj) => {\n+\n+            for proj in place_projections {\n                 match proj.elem {\n                     ProjectionElem::Deref => {\n                         if context.is_mutating_use() {\n@@ -1041,7 +1043,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n             }\n-        }\n+        });\n     }\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {"}]}