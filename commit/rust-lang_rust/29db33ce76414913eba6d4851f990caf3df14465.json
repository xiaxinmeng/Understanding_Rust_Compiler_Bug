{"sha": "29db33ce76414913eba6d4851f990caf3df14465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZGIzM2NlNzY0MTQ5MTNlYmE2ZDQ4NTFmOTkwY2FmM2RmMTQ0NjU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-12T13:19:53Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-12T13:19:53Z"}, "message": "Address review comments", "tree": {"sha": "7966005e06d02e37032eaf0754032a63d7299b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7966005e06d02e37032eaf0754032a63d7299b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29db33ce76414913eba6d4851f990caf3df14465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29db33ce76414913eba6d4851f990caf3df14465", "html_url": "https://github.com/rust-lang/rust/commit/29db33ce76414913eba6d4851f990caf3df14465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29db33ce76414913eba6d4851f990caf3df14465/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe0ead3a2896ebd4eb47873b0ed1084258360d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe0ead3a2896ebd4eb47873b0ed1084258360d1", "html_url": "https://github.com/rust-lang/rust/commit/abe0ead3a2896ebd4eb47873b0ed1084258360d1"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "244f65579ed8578c5dbe614b505c9de5818c6eba", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29db33ce76414913eba6d4851f990caf3df14465/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29db33ce76414913eba6d4851f990caf3df14465/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=29db33ce76414913eba6d4851f990caf3df14465", "patch": "@@ -15,7 +15,7 @@ use std::{\n     ffi::OsStr,\n     io,\n     path::{Path, PathBuf},\n-    sync::Arc,\n+    sync::{Arc, Mutex},\n };\n \n use tt::{SmolStr, Subtree};\n@@ -27,7 +27,7 @@ pub use version::{read_dylib_info, RustCInfo};\n \n #[derive(Debug, Clone)]\n struct ProcMacroProcessExpander {\n-    process: Arc<ProcMacroProcessSrv>,\n+    process: Arc<Mutex<ProcMacroProcessSrv>>,\n     dylib_path: PathBuf,\n     name: SmolStr,\n }\n@@ -56,14 +56,24 @@ impl base_db::ProcMacroExpander for ProcMacroProcessExpander {\n             env: env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect(),\n         };\n \n-        let result: ExpansionResult = self.process.send_task(msg::Request::ExpansionMacro(task))?;\n+        let result: ExpansionResult = self\n+            .process\n+            .lock()\n+            .unwrap_or_else(|e| e.into_inner())\n+            .send_task(msg::Request::ExpansionMacro(task))?;\n         Ok(result.expansion)\n     }\n }\n \n #[derive(Debug)]\n pub struct ProcMacroClient {\n-    process: Arc<ProcMacroProcessSrv>,\n+    /// Currently, the proc macro process expands all procedural macros sequentially.\n+    ///\n+    /// That means that concurrent salsa requests may block each other when expanding proc macros,\n+    /// which is unfortunate, but simple and good enough for the time being.\n+    ///\n+    /// Therefore, we just wrap the `ProcMacroProcessSrv` in a mutex here.\n+    process: Arc<Mutex<ProcMacroProcessSrv>>,\n }\n \n impl ProcMacroClient {\n@@ -73,7 +83,7 @@ impl ProcMacroClient {\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let process = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient { process: Arc::new(process) })\n+        Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n@@ -93,7 +103,12 @@ impl ProcMacroClient {\n             }\n         }\n \n-        let macros = match self.process.find_proc_macros(dylib_path) {\n+        let macros = match self\n+            .process\n+            .lock()\n+            .unwrap_or_else(|e| e.into_inner())\n+            .find_proc_macros(dylib_path)\n+        {\n             Err(err) => {\n                 eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n                 return vec![];"}, {"sha": "6222dd649afe49dfabebbf5902cacb763a38b56e", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29db33ce76414913eba6d4851f990caf3df14465/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29db33ce76414913eba6d4851f990caf3df14465/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=29db33ce76414913eba6d4851f990caf3df14465", "patch": "@@ -6,7 +6,6 @@ use std::{\n     io::{self, BufRead, BufReader, Write},\n     path::{Path, PathBuf},\n     process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n-    sync::Mutex,\n };\n \n use stdx::JodChild;\n@@ -18,8 +17,9 @@ use crate::{\n \n #[derive(Debug)]\n pub(crate) struct ProcMacroProcessSrv {\n-    process: Mutex<Process>,\n-    stdio: Mutex<(ChildStdin, BufReader<ChildStdout>)>,\n+    process: Process,\n+    stdin: ChildStdin,\n+    stdout: BufReader<ChildStdout>,\n }\n \n impl ProcMacroProcessSrv {\n@@ -30,16 +30,13 @@ impl ProcMacroProcessSrv {\n         let mut process = Process::run(process_path, args)?;\n         let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n \n-        let srv = ProcMacroProcessSrv {\n-            process: Mutex::new(process),\n-            stdio: Mutex::new((stdin, stdout)),\n-        };\n+        let srv = ProcMacroProcessSrv { process, stdin, stdout };\n \n         Ok(srv)\n     }\n \n     pub(crate) fn find_proc_macros(\n-        &self,\n+        &mut self,\n         dylib_path: &Path,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n         let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n@@ -48,22 +45,18 @@ impl ProcMacroProcessSrv {\n         Ok(result.macros)\n     }\n \n-    pub(crate) fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n+    pub(crate) fn send_task<R>(&mut self, req: Request) -> Result<R, tt::ExpansionError>\n     where\n         R: TryFrom<Response, Error = &'static str>,\n     {\n-        let mut guard = self.stdio.lock().unwrap_or_else(|e| e.into_inner());\n-        let stdio = &mut *guard;\n-        let (stdin, stdout) = (&mut stdio.0, &mut stdio.1);\n-\n         let mut buf = String::new();\n-        let res = match send_request(stdin, stdout, req, &mut buf) {\n+        let res = match send_request(&mut self.stdin, &mut self.stdout, req, &mut buf) {\n             Ok(res) => res,\n             Err(err) => {\n-                let mut process = self.process.lock().unwrap_or_else(|e| e.into_inner());\n+                let result = self.process.child.try_wait();\n                 log::error!(\n                     \"proc macro server crashed, server process state: {:?}, server request error: {:?}\",\n-                    process.child.try_wait(),\n+                    result,\n                     err\n                 );\n                 let res = Response::Error(ResponseError {"}]}