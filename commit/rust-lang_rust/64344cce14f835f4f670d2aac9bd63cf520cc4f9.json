{"sha": "64344cce14f835f4f670d2aac9bd63cf520cc4f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MzQ0Y2NlMTRmODM1ZjRmNjcwZDJhYWM5YmQ2M2NmNTIwY2M0Zjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-06T14:26:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-10T08:49:42Z"}, "message": "Don't require documentation for fields in an enum tuple variant or for tuple struct fields.", "tree": {"sha": "91e66ad5a63cd5d2cb7f073c447130c312120be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e66ad5a63cd5d2cb7f073c447130c312120be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64344cce14f835f4f670d2aac9bd63cf520cc4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64344cce14f835f4f670d2aac9bd63cf520cc4f9", "html_url": "https://github.com/rust-lang/rust/commit/64344cce14f835f4f670d2aac9bd63cf520cc4f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64344cce14f835f4f670d2aac9bd63cf520cc4f9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c858ba5bf7bd06c1a970efbf77053c8380b3151", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c858ba5bf7bd06c1a970efbf77053c8380b3151", "html_url": "https://github.com/rust-lang/rust/commit/1c858ba5bf7bd06c1a970efbf77053c8380b3151"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "721af3313d27f6d33d76888b36d25f9fbcc62818", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/64344cce14f835f4f670d2aac9bd63cf520cc4f9/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64344cce14f835f4f670d2aac9bd63cf520cc4f9/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=64344cce14f835f4f670d2aac9bd63cf520cc4f9", "patch": "@@ -4,8 +4,10 @@ use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n+use rustc_hir as hir;\n use rustc_lint::builtin::MISSING_DOCS;\n use rustc_middle::lint::LintLevelSource;\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::lint;\n use rustc_span::FileName;\n use serde::Serialize;\n@@ -221,10 +223,42 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     .hir()\n                     .local_def_id_to_hir_id(i.def_id.expect_def_id().expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);\n+\n+                // In case we have:\n+                //\n+                // ```\n+                // enum Foo { Bar(u32) }\n+                // // or:\n+                // struct Bar(u32);\n+                // ```\n+                //\n+                // there is no need to require documentation on the fields of tuple variants and\n+                // tuple structs.\n+                let should_be_ignored = i\n+                    .def_id\n+                    .as_def_id()\n+                    .and_then(|def_id| self.ctx.tcx.parent(def_id))\n+                    .and_then(|def_id| self.ctx.tcx.hir().get_if_local(def_id))\n+                    .map(|node| {\n+                        matches!(\n+                            node,\n+                            hir::Node::Variant(hir::Variant {\n+                                data: hir::VariantData::Tuple(_, _),\n+                                ..\n+                            }) | hir::Node::Item(hir::Item {\n+                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _), _),\n+                                ..\n+                            })\n+                        )\n+                    })\n+                    .unwrap_or(false);\n+\n                 // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n-                // unless the user had an explicit `allow`\n-                let should_have_docs =\n-                    level != lint::Level::Allow || matches!(source, LintLevelSource::Default);\n+                // unless the user had an explicit `allow`.\n+                //\n+                let should_have_docs = !should_be_ignored\n+                    && (level != lint::Level::Allow || matches!(source, LintLevelSource::Default));\n+\n                 debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n                 self.items.entry(filename).or_default().count_item(\n                     has_docs,"}]}