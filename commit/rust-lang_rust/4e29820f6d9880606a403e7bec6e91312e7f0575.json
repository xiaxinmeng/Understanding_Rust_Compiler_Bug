{"sha": "4e29820f6d9880606a403e7bec6e91312e7f0575", "node_id": "C_kwDOAAsO6NoAKDRlMjk4MjBmNmQ5ODgwNjA2YTQwM2U3YmVjNmU5MTMxMmU3ZjA1NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T15:45:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T15:45:13Z"}, "message": "Auto merge of #14207 - tomokinat:master, r=lnicola\n\nRespect $CARGO_HOME when looking up toolchains.\n\nSome people set `$CARGO_HOME` to a location other than `~/.cargo` (`$XDG_DATA_DIR/cargo`,  in my case), and I'd be a little nicer if the rust-analyzer extension and server respect that value when looking up toolchains, instead of having us configure all of `$CARGO`, `$RUSTC` ... manually.\n\nThe new implementation still defaults to `~/.cargo` if `$CARGO_HOME` is unset, pretty much like cargo itself does (as documented in https://doc.rust-lang.org/cargo/guide/cargo-home.html), so the change is backwards compatible for most people except those who has configured `$CARGO_HOME` explicitly.\n\nI considered using https://crates.io/crates/home as suggested by https://doc.rust-lang.org/cargo/guide/cargo-home.html, but decided to put int on hold because i) we need mirror impl in node, ii) I thought the consistency matters more and iii) the new implementation shouldn't be worse than the current one (i.e. switching to `home` improvement is rather orthogonal and could be done in another PR). If you have any directions on this, please let me know.", "tree": {"sha": "50d42cf24cc6656a667022a19045089d7d3b9d25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d42cf24cc6656a667022a19045089d7d3b9d25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e29820f6d9880606a403e7bec6e91312e7f0575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e29820f6d9880606a403e7bec6e91312e7f0575", "html_url": "https://github.com/rust-lang/rust/commit/4e29820f6d9880606a403e7bec6e91312e7f0575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e29820f6d9880606a403e7bec6e91312e7f0575/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289208bc9fb08704db37c6ce0fb700bbfb3b7099", "url": "https://api.github.com/repos/rust-lang/rust/commits/289208bc9fb08704db37c6ce0fb700bbfb3b7099", "html_url": "https://github.com/rust-lang/rust/commit/289208bc9fb08704db37c6ce0fb700bbfb3b7099"}, {"sha": "e4b184a776ef20e33ff2922f583349928061a18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b184a776ef20e33ff2922f583349928061a18b", "html_url": "https://github.com/rust-lang/rust/commit/e4b184a776ef20e33ff2922f583349928061a18b"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "729f84a8150c58e2963161b56db3b8d0ef1f447c", "filename": "crates/toolchain/src/lib.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e29820f6d9880606a403e7bec6e91312e7f0575/crates%2Ftoolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e29820f6d9880606a403e7bec6e91312e7f0575/crates%2Ftoolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftoolchain%2Fsrc%2Flib.rs?ref=4e29820f6d9880606a403e7bec6e91312e7f0575", "patch": "@@ -31,8 +31,9 @@ fn get_path_for_executable(executable_name: &'static str) -> PathBuf {\n     //      example: for cargo, this checks $CARGO environment variable; for rustc, $RUSTC; etc\n     // 2) `<executable_name>`\n     //      example: for cargo, this tries just `cargo`, which will succeed if `cargo` is on the $PATH\n-    // 3) `~/.cargo/bin/<executable_name>`\n-    //      example: for cargo, this tries ~/.cargo/bin/cargo\n+    // 3) `$CARGO_HOME/bin/<executable_name>`\n+    //      where $CARGO_HOME defaults to ~/.cargo (see https://doc.rust-lang.org/cargo/guide/cargo-home.html)\n+    //      example: for cargo, this tries $CARGO_HOME/bin/cargo, or ~/.cargo/bin/cargo if $CARGO_HOME is unset.\n     //      It seems that this is a reasonable place to try for cargo, rustc, and rustup\n     let env_var = executable_name.to_ascii_uppercase();\n     if let Some(path) = env::var_os(env_var) {\n@@ -43,8 +44,7 @@ fn get_path_for_executable(executable_name: &'static str) -> PathBuf {\n         return executable_name.into();\n     }\n \n-    if let Some(mut path) = home::home_dir() {\n-        path.push(\".cargo\");\n+    if let Some(mut path) = get_cargo_home() {\n         path.push(\"bin\");\n         path.push(executable_name);\n         if let Some(path) = probe(path) {\n@@ -60,6 +60,19 @@ fn lookup_in_path(exec: &str) -> bool {\n     env::split_paths(&paths).map(|path| path.join(exec)).find_map(probe).is_some()\n }\n \n+fn get_cargo_home() -> Option<PathBuf> {\n+    if let Some(path) = env::var_os(\"CARGO_HOME\") {\n+        return Some(path.into());\n+    }\n+\n+    if let Some(mut path) = home::home_dir() {\n+        path.push(\".cargo\");\n+        return Some(path);\n+    }\n+\n+    None\n+}\n+\n fn probe(path: PathBuf) -> Option<PathBuf> {\n     let with_extension = match env::consts::EXE_EXTENSION {\n         \"\" => None,"}, {"sha": "eb70b88871e3d1c5d970540205fe1d86bc725cf9", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e29820f6d9880606a403e7bec6e91312e7f0575/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4e29820f6d9880606a403e7bec6e91312e7f0575/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=4e29820f6d9880606a403e7bec6e91312e7f0575", "patch": "@@ -156,19 +156,10 @@ export const getPathForExecutable = memoizeAsync(\n \n         if (await lookupInPath(executableName)) return executableName;\n \n-        try {\n-            // hmm, `os.homedir()` seems to be infallible\n-            // it is not mentioned in docs and cannot be inferred by the type signature...\n-            const standardPath = vscode.Uri.joinPath(\n-                vscode.Uri.file(os.homedir()),\n-                \".cargo\",\n-                \"bin\",\n-                executableName\n-            );\n-\n+        const cargoHome = getCargoHome();\n+        if (cargoHome) {\n+            const standardPath = vscode.Uri.joinPath(cargoHome, \"bin\", executableName);\n             if (await isFileAtUri(standardPath)) return standardPath.fsPath;\n-        } catch (err) {\n-            log.error(\"Failed to read the fs info\", err);\n         }\n         return executableName;\n     }\n@@ -190,6 +181,21 @@ async function lookupInPath(exec: string): Promise<boolean> {\n     return false;\n }\n \n+function getCargoHome(): vscode.Uri | null {\n+    const envVar = process.env[\"CARGO_HOME\"];\n+    if (envVar) return vscode.Uri.file(envVar);\n+\n+    try {\n+        // hmm, `os.homedir()` seems to be infallible\n+        // it is not mentioned in docs and cannot be inferred by the type signature...\n+        return vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\");\n+    } catch (err) {\n+        log.error(\"Failed to read the fs info\", err);\n+    }\n+\n+    return null;\n+}\n+\n async function isFileAtPath(path: string): Promise<boolean> {\n     return isFileAtUri(vscode.Uri.file(path));\n }"}]}