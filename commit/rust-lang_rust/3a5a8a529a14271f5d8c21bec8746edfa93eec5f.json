{"sha": "3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWE4YTUyOWExNDI3MWY1ZDhjMjFiZWM4NzQ2ZWRmYTkzZWVjNWY=", "commit": {"author": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-03-27T05:22:37Z"}, "committer": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-03-27T05:22:37Z"}, "message": "Give variant parts their own unique id\n\nand bump llvm version in test", "tree": {"sha": "e7219a5b6e7a87d96a7d55439da1399df42fdd10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7219a5b6e7a87d96a7d55439da1399df42fdd10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "html_url": "https://github.com/rust-lang/rust/commit/3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/comments", "author": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "html_url": "https://github.com/rust-lang/rust/commit/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "e7183df2ec3a5b05473bce67f5937b0a900a4363", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "patch": "@@ -188,6 +188,17 @@ impl TypeMap<'ll, 'tcx> {\n         let interner_key = self.unique_id_interner.intern(&enum_variant_type_id);\n         UniqueTypeId(interner_key)\n     }\n+\n+    // Get the unique type id string for an enum variant part.\n+    // Variant parts are not types and shouldn't really have their own id,\n+    // but it makes set_members_of_composite_type() simpler.\n+    fn get_unique_type_id_str_of_enum_variant_part<'a>(&mut self,\n+                                                       enum_type_id: UniqueTypeId) -> &str {\n+        let variant_part_type_id = format!(\"{}_variant_part\",\n+                                           self.get_unique_type_id_as_string(enum_type_id));\n+        let interner_key = self.unique_id_interner.intern(&variant_part_type_id);\n+        self.unique_id_interner.get(interner_key)\n+    }\n }\n \n // A description of some recursive type. It can either be already finished (as\n@@ -266,7 +277,6 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                 // ... and attach them to the stub to complete it.\n                 set_members_of_composite_type(cx,\n                                               unfinished_type,\n-                                              metadata_stub,\n                                               member_holding_stub,\n                                               member_descriptions);\n                 return MetadataCreationResult::new(metadata_stub, true);\n@@ -1216,7 +1226,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 set_members_of_composite_type(cx,\n                                               self.enum_type,\n                                               variant_type_metadata,\n-                                              variant_type_metadata,\n                                               member_descriptions);\n                 vec![\n                     MemberDescription {\n@@ -1258,7 +1267,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     set_members_of_composite_type(cx,\n                                                   self.enum_type,\n                                                   variant_type_metadata,\n-                                                  variant_type_metadata,\n                                                   member_descriptions);\n                     MemberDescription {\n                         name: if fallback {\n@@ -1301,7 +1309,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     set_members_of_composite_type(cx,\n                                                   self.enum_type,\n                                                   variant_type_metadata,\n-                                                  variant_type_metadata,\n                                                   variant_member_descriptions);\n \n                     // Encode the information about the null variant in the union\n@@ -1362,7 +1369,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         set_members_of_composite_type(cx,\n                                                       self.enum_type,\n                                                       variant_type_metadata,\n-                                                      variant_type_metadata,\n                                                       member_descriptions);\n \n                         let niche_value = if i == dataful_variant {\n@@ -1691,6 +1697,11 @@ fn prepare_enum_metadata(\n         },\n     };\n \n+    let variant_part_unique_type_id_str = SmallCStr::new(\n+        debug_context(cx).type_map\n+            .borrow_mut()\n+            .get_unique_type_id_str_of_enum_variant_part(unique_type_id)\n+    );\n     let empty_array = create_DIArray(DIB(cx), &[]);\n     let variant_part = unsafe {\n         llvm::LLVMRustDIBuilderCreateVariantPart(\n@@ -1703,7 +1714,8 @@ fn prepare_enum_metadata(\n             layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             discriminator_metadata,\n-            empty_array)\n+            empty_array,\n+            variant_part_unique_type_id_str.as_ptr())\n     };\n \n     // The variant part must be wrapped in a struct according to DWARF.\n@@ -1774,16 +1786,14 @@ fn composite_type_metadata(\n     set_members_of_composite_type(cx,\n                                   composite_type,\n                                   composite_type_metadata,\n-                                  composite_type_metadata,\n                                   member_descriptions);\n \n     composite_type_metadata\n }\n \n fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n                                  composite_type: Ty<'tcx>,\n-                                 metadata_stub: &'ll DICompositeType,\n-                                 member_holding_stub: &'ll DICompositeType,\n+                                 composite_type_metadata: &'ll DICompositeType,\n                                  member_descriptions: Vec<MemberDescription<'ll>>) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -1794,11 +1804,11 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n     {\n         let mut composite_types_completed =\n             debug_context(cx).composite_types_completed.borrow_mut();\n-        if composite_types_completed.contains(&metadata_stub) {\n+        if composite_types_completed.contains(&composite_type_metadata) {\n             bug!(\"debuginfo::set_members_of_composite_type() - \\\n                   Already completed forward declaration re-encountered.\");\n         } else {\n-            composite_types_completed.insert(metadata_stub);\n+            composite_types_completed.insert(composite_type_metadata);\n         }\n     }\n \n@@ -1809,7 +1819,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n             unsafe {\n                 Some(llvm::LLVMRustDIBuilderCreateVariantMemberType(\n                     DIB(cx),\n-                    member_holding_stub,\n+                    composite_type_metadata,\n                     member_name.as_ptr(),\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n@@ -1830,7 +1840,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n     unsafe {\n         let type_array = create_DIArray(DIB(cx), &member_metadata[..]);\n         llvm::LLVMRustDICompositeTypeReplaceArrays(\n-            DIB(cx), member_holding_stub, Some(type_array), type_params);\n+            DIB(cx), composite_type_metadata, Some(type_array), type_params);\n     }\n }\n "}, {"sha": "2ad6d9c053a2035575cbf0427d35ec4f006a498e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "patch": "@@ -1587,7 +1587,8 @@ extern \"C\" {\n                                               AlignInBits: u32,\n                                               Flags: DIFlags,\n                                               Discriminator: Option<&'a DIDerivedType>,\n-                                              Elements: &'a DIArray)\n+                                              Elements: &'a DIArray,\n+                                              UniqueId: *const c_char)\n                                               -> &'a DIDerivedType;\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: &Value, UnnamedAddr: Bool);"}, {"sha": "a00417a3629278d40770864d8eff18c57d78a6b7", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "patch": "@@ -723,12 +723,12 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantPart(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Discriminator,\n-    LLVMMetadataRef Elements) {\n+    LLVMMetadataRef Elements, const char *UniqueId) {\n #if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createVariantPart(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags), unwrapDI<DIDerivedType>(Discriminator),\n-      DINodeArray(unwrapDI<MDTuple>(Elements))));\n+      DINodeArray(unwrapDI<MDTuple>(Elements)), UniqueId));\n #else\n   abort();\n #endif"}, {"sha": "7f15ed90e67b37b64d752353dd7e6802a58b3d73", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5a8a529a14271f5d8c21bec8746edfa93eec5f/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=3a5a8a529a14271f5d8c21bec8746edfa93eec5f", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n \n // compile-flags:-g -Z thinlto"}]}