{"sha": "3b6440212d1608b41456ea8d8695c42f6b149bae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjQ0MDIxMmQxNjA4YjQxNDU2ZWE4ZDg2OTVjNDJmNmIxNDliYWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-25T16:37:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-25T16:37:42Z"}, "message": "Merge pull request #2673 from estk/excessive_precision\n\nExcessive precision", "tree": {"sha": "1f313c497fff413ac616313065d9e1e79538c49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f313c497fff413ac616313065d9e1e79538c49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6440212d1608b41456ea8d8695c42f6b149bae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa4K7WCRBK7hj4Ov3rIwAAdHIIAE2eBD9OVxEcykOwHM/9UzKz\nEZ7MdlkH74edN11maT6HwsLUGNSBE5JmqKCfiznkKBSuZuAPWaTjB9A/qOUtOWjb\nK0mRt1HmQ1OTLsCayjOaa4IlpUNH0NUNnQAaHKrzpq3pRri79w1k9VtX5qaWtbJ9\nhtre0SjE+iheDrxpMjrQbn7LkwmCsC/2rYAMn739yDzT599PEFeSST3oWIQMNDWS\nDUvaPpOWGcGtWrqvIlb90z5Rs8Xefb+llX6g8g7NXuLrKVSUcVULg268LTfzwZc6\n0Loicp1yZ9IR3fX/xzzLBbZJpTbXkGdy/3g+v68vmw3ralBJWFmYFoxKIJIUbXc=\n=eEX3\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f313c497fff413ac616313065d9e1e79538c49e\nparent 84385833d0c2be07a4bbd3092d1a068786c27849\nparent 9b14ad493b54a336d1b48f9caec46a4bc37bf629\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1524674262 +0200\ncommitter GitHub <noreply@github.com> 1524674262 +0200\n\nMerge pull request #2673 from estk/excessive_precision\n\nExcessive precision"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6440212d1608b41456ea8d8695c42f6b149bae", "html_url": "https://github.com/rust-lang/rust/commit/3b6440212d1608b41456ea8d8695c42f6b149bae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6440212d1608b41456ea8d8695c42f6b149bae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84385833d0c2be07a4bbd3092d1a068786c27849", "url": "https://api.github.com/repos/rust-lang/rust/commits/84385833d0c2be07a4bbd3092d1a068786c27849", "html_url": "https://github.com/rust-lang/rust/commit/84385833d0c2be07a4bbd3092d1a068786c27849"}, {"sha": "9b14ad493b54a336d1b48f9caec46a4bc37bf629", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b14ad493b54a336d1b48f9caec46a4bc37bf629", "html_url": "https://github.com/rust-lang/rust/commit/9b14ad493b54a336d1b48f9caec46a4bc37bf629"}], "stats": {"total": 303, "additions": 300, "deletions": 3}, "files": [{"sha": "b96ae18828e2f418f477c1e133073c9fa48cc90d", "filename": "clippy_lints/src/excessive_precision.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -0,0 +1,141 @@\n+use rustc::hir;\n+use rustc::lint::*;\n+use rustc::ty::TypeVariants;\n+use std::f32;\n+use std::f64;\n+use std::fmt;\n+use syntax::ast::*;\n+use syntax_pos::symbol::Symbol;\n+use utils::span_lint_and_sugg;\n+\n+/// **What it does:** Checks for float literals with a precision greater\n+/// than that supported by the underlying type\n+///\n+/// **Why is this bad?** Rust will truncate the literal silently.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// // Bad\n+/// Insert a short example of code that triggers the lint\n+///    let v: f32 = 0.123_456_789_9;\n+///    println!(\"{}\", v); //  0.123_456_789\n+///\n+/// // Good\n+/// Insert a short example of improved code that doesn't trigger the lint\n+///    let v: f64 = 0.123_456_789_9;\n+///    println!(\"{}\", v); //  0.123_456_789_9\n+/// ```\n+declare_clippy_lint! {\n+    pub EXCESSIVE_PRECISION,\n+    style,\n+    \"excessive precision for float literal\"\n+}\n+\n+pub struct ExcessivePrecision;\n+\n+impl LintPass for ExcessivePrecision {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(EXCESSIVE_PRECISION)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        if_chain! {\n+            let ty = cx.tables.expr_ty(expr);\n+            if let TypeVariants::TyFloat(ref fty) = ty.sty;\n+            if let hir::ExprLit(ref lit) = expr.node;\n+            if let LitKind::Float(ref sym, _) | LitKind::FloatUnsuffixed(ref sym) = lit.node;\n+            if let Some(sugg) = self.check(sym, fty);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXCESSIVE_PRECISION,\n+                    expr.span,\n+                    \"float has excessive precision\",\n+                    \"consider changing the type or truncating it to\",\n+                    sugg,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+impl ExcessivePrecision {\n+    // None if nothing to lint, Some(suggestion) if lint neccessary\n+    fn check(&self, sym: &Symbol, fty: &FloatTy) -> Option<String> {\n+        let max = max_digits(fty);\n+        let sym_str = sym.as_str();\n+        let formatter = FloatFormat::new(&sym_str);\n+        let digits = count_digits(&sym_str);\n+        // Try to bail out if the float is for sure fine.\n+        // If its within the 2 decimal digits of being out of precision we\n+        // check if the parsed representation is the same as the string\n+        // since we'll need the truncated string anyway.\n+        if digits > max as usize {\n+            let sr = match *fty {\n+                FloatTy::F32 => sym_str.parse::<f32>().map(|f| formatter.format(f)),\n+                FloatTy::F64 => sym_str.parse::<f64>().map(|f| formatter.format(f)),\n+            };\n+            // We know this will parse since we are in LatePass\n+            let s = sr.unwrap();\n+\n+            if sym_str == s {\n+                None\n+            } else {\n+                Some(s)\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+fn max_digits(fty: &FloatTy) -> u32 {\n+    match fty {\n+        FloatTy::F32 => f32::DIGITS,\n+        FloatTy::F64 => f64::DIGITS,\n+    }\n+}\n+\n+fn count_digits(s: &str) -> usize {\n+    s.chars()\n+        .filter(|c| *c != '-' || *c != '.')\n+        .take_while(|c| *c != 'e' || *c != 'E')\n+        .fold(0, |count, c| {\n+            // leading zeros\n+            if c == '0' && count == 0 {\n+                count\n+            } else {\n+                count + 1\n+            }\n+        })\n+}\n+\n+enum FloatFormat {\n+    LowerExp,\n+    UpperExp,\n+    Normal,\n+}\n+impl FloatFormat {\n+    fn new(s: &str) -> Self {\n+        s.chars()\n+            .find_map(|x| match x {\n+                'e' => Some(FloatFormat::LowerExp),\n+                'E' => Some(FloatFormat::UpperExp),\n+                _ => None,\n+            })\n+            .unwrap_or(FloatFormat::Normal)\n+    }\n+    fn format<T>(&self, f: T) -> String\n+    where T: fmt::UpperExp + fmt::LowerExp + fmt::Display {\n+        match self {\n+            FloatFormat::LowerExp => format!(\"{:e}\", f),\n+            FloatFormat::UpperExp => format!(\"{:E}\", f),\n+            FloatFormat::Normal => format!(\"{}\", f),\n+        }\n+    }\n+}"}, {"sha": "c2b0895942f58f24f37ec9d0bb21a3bf58628f58", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -13,6 +13,8 @@\n // FIXME(mark-i-m) remove after i128 stablization merges\n #![allow(stable_features)]\n #![feature(i128, i128_type)]\n+#![feature(iterator_find_map)]\n+\n \n #[macro_use]\n extern crate rustc;\n@@ -124,6 +126,7 @@ pub mod erasing_op;\n pub mod escape;\n pub mod eta_reduction;\n pub mod eval_order_dependence;\n+pub mod excessive_precision;\n pub mod explicit_write;\n pub mod fallible_impl_from;\n pub mod format;\n@@ -295,6 +298,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n+    reg.register_late_lint_pass(box excessive_precision::ExcessivePrecision);\n     reg.register_late_lint_pass(box bit_mask::BitMask::new(conf.verbose_bit_mask_threshold));\n     reg.register_late_lint_pass(box ptr::PointerPass);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);"}, {"sha": "d353d9075d4e0488a23cdd22d3be1ad26819529b", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     let my_ln_2 = 0.6931471805599453;\n     let no_ln_2 = 0.693;\n \n-    let my_log10_e = 0.43429448190325182;\n+    let my_log10_e = 0.4342944819032518;\n     let no_log10_e = 0.434;\n \n     let my_log2_e = 1.4426950408889634;"}, {"sha": "e5d2ba29605d6e6e4e9003be3868bd40c0d926f3", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -87,8 +87,8 @@ error: approximate value of `f{32, 64}::consts::LN_2` found. Consider using it d\n error: approximate value of `f{32, 64}::consts::LOG10_E` found. Consider using it directly\n   --> $DIR/approx_const.rs:45:22\n    |\n-45 |     let my_log10_e = 0.43429448190325182;\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+45 |     let my_log10_e = 0.4342944819032518;\n+   |                      ^^^^^^^^^^^^^^^^^^\n \n error: approximate value of `f{32, 64}::consts::LOG2_E` found. Consider using it directly\n   --> $DIR/approx_const.rs:48:21"}, {"sha": "d209367cc3b48422af20eb7bdfdc258de4e94eaa", "filename": "tests/ui/excessive_precision.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -0,0 +1,52 @@\n+#![feature(plugin, custom_attribute)]\n+#![warn(excessive_precision)]\n+#![allow(print_literal)]\n+\n+fn main() {\n+    // TODO add prefix tests\n+    // Consts\n+    const GOOD32_SUF: f32 = 0.123_456_f32;\n+    const GOOD32: f32 = 0.123_456;\n+    const GOOD32_SM: f32 = 0.000_000_000_1;\n+    const GOOD64: f64 = 0.123_456_789_012;\n+    const GOOD64_SM: f32 = 0.000_000_000_000_000_1;\n+\n+    const BAD32_1: f32 = 0.123_456_789_f32;\n+    const BAD32_2: f32 = 0.123_456_789;\n+    const BAD32_3: f32 = 0.100_000_000_000_1;\n+\n+    const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n+    const BAD64_2: f64 = 0.123_456_789_012_345_67;\n+    const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n+\n+    // Literal\n+    println!(\"{}\", 8.888_888_888_888_888_888_888);\n+\n+    // TODO add inferred type tests for f32\n+    // TODO add tests cases exactly on the edge\n+    // Locals\n+    let good32: f32 = 0.123_456_f32;\n+    let good32_2: f32 = 0.123_456;\n+\n+    let good64: f64 = 0.123_456_789_012f64;\n+    let good64: f64 = 0.123_456_789_012;\n+    let good64_2 = 0.123_456_789_012;\n+\n+    let bad32_1: f32 = 1.123_456_789_f32;\n+    let bad32_2: f32 = 1.123_456_789;\n+\n+    let bad64_1: f64 = 0.123_456_789_012_345_67f64;\n+    let bad64_2: f64 = 0.123_456_789_012_345_67;\n+    let bad64_3 = 0.123_456_789_012_345_67;\n+\n+    // TODO Vectors / nested vectors\n+    let vec32: Vec<f32> = vec![0.123_456_789];\n+    let vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n+\n+    // Exponential float notation\n+    let good_e32: f32 = 1e-10;\n+    let bad_e32: f32 = 1.123_456_788_888e-10;\n+\n+    let good_bige32: f32 = 1E-10;\n+    let bad_bige32: f32 = 1.123_456_788_888E-10;\n+}"}, {"sha": "de022afb512de61878f1a667b0438319948034c1", "filename": "tests/ui/excessive_precision.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b6440212d1608b41456ea8d8695c42f6b149bae/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=3b6440212d1608b41456ea8d8695c42f6b149bae", "patch": "@@ -0,0 +1,100 @@\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:14:26\n+   |\n+14 |     const BAD32_1: f32 = 0.123_456_789_f32;\n+   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+   |\n+   = note: `-D excessive-precision` implied by `-D warnings`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:15:26\n+   |\n+15 |     const BAD32_2: f32 = 0.123_456_789;\n+   |                          ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:16:26\n+   |\n+16 |     const BAD32_3: f32 = 0.100_000_000_000_1;\n+   |                          ^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:18:26\n+   |\n+18 |     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:19:26\n+   |\n+19 |     const BAD64_2: f64 = 0.123_456_789_012_345_67;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:20:26\n+   |\n+20 |     const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:23:20\n+   |\n+23 |     println!(\"{}\", 8.888_888_888_888_888_888_888);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `8.88888888888889`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:35:24\n+   |\n+35 |     let bad32_1: f32 = 1.123_456_789_f32;\n+   |                        ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:36:24\n+   |\n+36 |     let bad32_2: f32 = 1.123_456_789;\n+   |                        ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:38:24\n+   |\n+38 |     let bad64_1: f64 = 0.123_456_789_012_345_67f64;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:39:24\n+   |\n+39 |     let bad64_2: f64 = 0.123_456_789_012_345_67;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:40:19\n+   |\n+40 |     let bad64_3 = 0.123_456_789_012_345_67;\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:43:32\n+   |\n+43 |     let vec32: Vec<f32> = vec![0.123_456_789];\n+   |                                ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:44:32\n+   |\n+44 |     let vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678912345678`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:48:24\n+   |\n+48 |     let bad_e32: f32 = 1.123_456_788_888e-10;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568e-10`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:51:27\n+   |\n+51 |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568E-10`\n+\n+error: aborting due to 16 previous errors\n+"}]}