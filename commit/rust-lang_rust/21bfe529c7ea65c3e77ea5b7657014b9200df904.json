{"sha": "21bfe529c7ea65c3e77ea5b7657014b9200df904", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmZlNTI5YzdlYTY1YzNlNzdlYTViNzY1NzAxNGI5MjAwZGY5MDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-08T02:36:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T02:36:12Z"}, "message": "Rollup merge of #75270 - matthiaskrgr:clippy_aug_1, r=Dylan-DPC\n\nfix a couple of clippy findings", "tree": {"sha": "e62e721fb0464fbb1c6a3bdc0a1cb219964e39e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62e721fb0464fbb1c6a3bdc0a1cb219964e39e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21bfe529c7ea65c3e77ea5b7657014b9200df904", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLg+cCRBK7hj4Ov3rIwAAdHIIAJaW/NqtlUxXvtsLEoRgFZEJ\n+r1N7EPyY975c15u5IqwWpdzdnMbMQe29T6mSchEQblREHz4eO/aoA5fr1Ztxdwa\np6QsHMtLLtLmALz77b2ha71PP1cCzSL/8irtmmBPV8L2scdAVOOamQxwXzidyYjA\ndDYprdNcRf7CgxLi5TT9TtSldL4BKgQ5jQ8yd53vNNwt/SWFcJMsbwmgDDO7JTmC\nLuBAhvQXt27Pw7MG152+YUl8nDGcRBeR1/wrWTAEEtNdRuGtv8+XCnHqqDC8yvf7\naC2NsHSwjV20mc5xOfVsy50/hKfu641TJxLKCIxmBOBsWqkVeRQZMAJ5xwZBOA8=\n=m8eU\n-----END PGP SIGNATURE-----\n", "payload": "tree e62e721fb0464fbb1c6a3bdc0a1cb219964e39e4\nparent 81546de429a6a848cbca4b19e793010f92e630c2\nparent a605e510561f70cdae4592fb30b320dc6a07f603\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596854172 +0900\ncommitter GitHub <noreply@github.com> 1596854172 +0900\n\nRollup merge of #75270 - matthiaskrgr:clippy_aug_1, r=Dylan-DPC\n\nfix a couple of clippy findings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21bfe529c7ea65c3e77ea5b7657014b9200df904", "html_url": "https://github.com/rust-lang/rust/commit/21bfe529c7ea65c3e77ea5b7657014b9200df904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21bfe529c7ea65c3e77ea5b7657014b9200df904/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81546de429a6a848cbca4b19e793010f92e630c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/81546de429a6a848cbca4b19e793010f92e630c2", "html_url": "https://github.com/rust-lang/rust/commit/81546de429a6a848cbca4b19e793010f92e630c2"}, {"sha": "a605e510561f70cdae4592fb30b320dc6a07f603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a605e510561f70cdae4592fb30b320dc6a07f603", "html_url": "https://github.com/rust-lang/rust/commit/a605e510561f70cdae4592fb30b320dc6a07f603"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "7ca27bf0dc15e90eb0852ef98a0c62bab1e2ba5e", "filename": "library/test/src/helpers/concurrency.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -4,7 +4,7 @@ use std::env;\n \n #[allow(deprecated)]\n pub fn get_concurrency() -> usize {\n-    return match env::var(\"RUST_TEST_THREADS\") {\n+    match env::var(\"RUST_TEST_THREADS\") {\n         Ok(s) => {\n             let opt_n: Option<usize> = s.parse().ok();\n             match opt_n {\n@@ -13,7 +13,7 @@ pub fn get_concurrency() -> usize {\n             }\n         }\n         Err(..) => num_cpus(),\n-    };\n+    }\n }\n \n cfg_if::cfg_if! {"}, {"sha": "9d6b15ec4af8cc34f0e4a727ccdef0bc9bdf8729", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -960,15 +960,15 @@ fn pointer_type_metadata(\n fn param_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n     debug!(\"param_type_metadata: {:?}\", t);\n     let name = format!(\"{:?}\", t);\n-    return unsafe {\n+    unsafe {\n         llvm::LLVMRustDIBuilderCreateBasicType(\n             DIB(cx),\n             name.as_ptr().cast(),\n             name.len(),\n             Size::ZERO.bits(),\n             DW_ATE_unsigned,\n         )\n-    };\n+    }\n }\n \n pub fn compile_unit_metadata("}, {"sha": "ae3ec15fcd70a61c0b314e90b0e3cdb0f5b0627a", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -490,7 +490,7 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n     let _timer = sess.timer(\"copy_all_cgu_workproducts_to_incr_comp_cache_dir\");\n \n     for module in compiled_modules.modules.iter().filter(|m| m.kind == ModuleKind::Regular) {\n-        let path = module.object.as_ref().map(|path| path.clone());\n+        let path = module.object.as_ref().cloned();\n \n         if let Some((id, product)) =\n             copy_cgu_workproduct_to_incr_comp_cache_dir(sess, &module.name, &path)"}, {"sha": "89142edb2dc61dc58e738062c517b888eb78aae1", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -85,11 +85,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                 debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n                 if sub == &ty::ReStatic\n-                    && v.0\n-                        .into_iter()\n-                        .filter(|t| t.span.desugaring_kind().is_none())\n-                        .next()\n-                        .is_some()\n+                    && v.0.into_iter().find(|t| t.span.desugaring_kind().is_none()).is_some()\n                 {\n                     // If the failure is due to a `'static` requirement coming from a `dyn` or\n                     // `impl` Trait that *isn't* caused by `async fn` desugaring, handle this case"}, {"sha": "7493b8b0a9f772ec7e3fbb903ca3b6cd4ba0ece5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             param.param_ty.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n-                    } else if let Some(_) = opaque\n+                    } else if opaque\n                         .bounds\n                         .iter()\n                         .filter_map(|arg| match arg {\n@@ -269,6 +269,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             _ => None,\n                         })\n                         .next()\n+                        .is_some()\n                     {\n                     } else {\n                         err.span_suggestion_verbose("}, {"sha": "ccba904df9e002270f5e3655568ea091b5fecc35", "filename": "src/librustc_infer/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fglb.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -50,7 +50,7 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n             // FIXME(#41044) -- not correct, need test\n-            ty::Bivariant => Ok(a.clone()),\n+            ty::Bivariant => Ok(a),\n             ty::Contravariant => self.fields.lub(self.a_is_expected).relate(a, b),\n         }\n     }\n@@ -97,7 +97,7 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n         // very challenging, switch to invariance. This is obviously\n         // overly conservative but works ok in practice.\n         self.relate_with_variance(ty::Variance::Invariant, a, b)?;\n-        Ok(a.clone())\n+        Ok(a)\n     }\n }\n "}, {"sha": "3f5ed36035c1a3c38a8d27c866cffc53b1c64f85", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -719,7 +719,7 @@ where\n             self.a_scopes.pop().unwrap();\n         }\n \n-        Ok(a.clone())\n+        Ok(a)\n     }\n }\n "}, {"sha": "2d4c1e5d050baa160271b2c135b243289b3c1912", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -288,9 +288,9 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n     ) -> TypeError<'tcx> {\n         debug!(\"error: placeholder={:?}, other_region={:?}\", placeholder, other_region);\n         if self.overly_polymorphic {\n-            return TypeError::RegionsOverlyPolymorphic(placeholder.name, other_region);\n+            TypeError::RegionsOverlyPolymorphic(placeholder.name, other_region)\n         } else {\n-            return TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, other_region);\n+            TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, other_region)\n         }\n     }\n }"}, {"sha": "308f884f9a63fd59d88fd0acd9f5e1d831722ee6", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -68,7 +68,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         match variance {\n             ty::Invariant => self.fields.equate(self.a_is_expected).relate(a, b),\n             ty::Covariant => self.relate(a, b),\n-            ty::Bivariant => Ok(a.clone()),\n+            ty::Bivariant => Ok(a),\n             ty::Contravariant => self.with_expected_switched(|this| this.relate(b, a)),\n         }\n     }"}, {"sha": "d285449c69024574f53666e2dd04bb3b474b0d68", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -1074,7 +1074,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n             // If `ty` is a `repr(transparent)` newtype, and the non-zero-sized type is a generic\n             // argument, which after substitution, is `()`, then this branch can be hit.\n-            FfiResult::FfiUnsafe { ty, .. } if is_return_type && ty.is_unit() => return,\n+            FfiResult::FfiUnsafe { ty, .. } if is_return_type && ty.is_unit() => {}\n             FfiResult::FfiUnsafe { ty, reason, help } => {\n                 self.emit_ffi_unsafe_type_lint(ty, sp, &reason, help.as_deref());\n             }"}, {"sha": "c91f81a13404a148b5ad994738f5459ae5242766", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> SpecializedEncoder<ExpnId> for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self, expn: &ExpnId) -> Result<(), Self::Error> {\n         rustc_span::hygiene::raw_encode_expn_id(\n             *expn,\n-            &mut self.hygiene_ctxt,\n+            &self.hygiene_ctxt,\n             ExpnDataEncodeMode::Metadata,\n             self,\n         )"}, {"sha": "4b7663e9adec1364c8472f4ee0dd208c0596021a", "filename": "src/librustc_middle/traits/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fquery.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -128,7 +128,7 @@ pub struct DropckOutlivesResult<'tcx> {\n \n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(&self, tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n-        if let Some(overflow_ty) = self.overflows.iter().next() {\n+        if let Some(overflow_ty) = self.overflows.get(0) {\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,"}, {"sha": "ba74ffaa8d620f8536dda39b468ab48584061992", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -868,7 +868,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n         }\n-        return normal_ret;\n+        normal_ret\n     }\n \n     /// Finds the span of arguments of a closure (within `maybe_closure_span`)"}, {"sha": "02896d7de357ff40524e740a303f75264bec4232", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -361,7 +361,7 @@ fn optimization_applies<'tcx>(\n     }\n \n     trace!(\"SUCCESS: optimization applies!\");\n-    return true;\n+    true\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {"}, {"sha": "9296e2ca7008fdb4840830992c8c052576cf9063", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -115,7 +115,7 @@ pub fn equal_up_to_regions(\n             T: Relate<'tcx>,\n         {\n             self.relate(a.skip_binder(), b.skip_binder())?;\n-            Ok(a.clone())\n+            Ok(a)\n         }\n     }\n "}, {"sha": "ebb3aa3866e43641faae1f0f2e0529339b001bb5", "filename": "src/librustc_parse_format/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_parse_format%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_parse_format%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Flib.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -820,7 +820,7 @@ fn find_skips_from_snippet(\n     }\n \n     let r_start = str_style.map(|r| r + 1).unwrap_or(0);\n-    let r_end = str_style.map(|r| r).unwrap_or(0);\n+    let r_end = str_style.unwrap_or(0);\n     let s = &snippet[r_start + 1..snippet.len() - r_end - 1];\n     (find_skips(s, str_style.is_some()), true)\n }"}, {"sha": "31aa2c4035e6892b4784d5a6063af7bee084c442", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -702,7 +702,7 @@ impl<'tcx> SaveContext<'tcx> {\n             Res::Def(HirDefKind::ConstParam, def_id) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(def_id) })\n             }\n-            Res::Def(HirDefKind::Ctor(_, ..), def_id) => {\n+            Res::Def(HirDefKind::Ctor(..), def_id) => {\n                 // This is a reference to a tuple struct or an enum variant where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n                 // def, so adjust to point to the tuple struct or enum variant itself."}, {"sha": "8fe71b71caed1f92944ef66db883b4b2b6d9a30d", "filename": "src/librustc_session/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -98,7 +98,7 @@ impl<'a> FileSearch<'a> {\n         p.push(RUST_LIB_DIR);\n         p.push(&self.triple);\n         p.push(\"bin\");\n-        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p.clone()] }\n+        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n     }\n }\n "}, {"sha": "fe5370b9644fc8585cae52d04b9f9654f37cf43b", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -1030,7 +1030,7 @@ pub fn decode_expn_id<\n         drop(expns);\n         expn_id\n     });\n-    return Ok(expn_id);\n+    Ok(expn_id)\n }\n \n // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`\n@@ -1103,7 +1103,7 @@ pub fn decode_syntax_context<\n         assert_eq!(dummy.dollar_crate_name, kw::Invalid);\n     });\n \n-    return Ok(new_ctxt);\n+    Ok(new_ctxt)\n }\n \n pub fn num_syntax_ctxts() -> usize {"}, {"sha": "02eefe5622384a8e4319a99c196466b2027f7897", "filename": "src/librustc_trait_selection/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_trait_selection%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_trait_selection%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fautoderef.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n     }\n \n     pub fn span(&self) -> Span {\n-        self.span.clone()\n+        self.span\n     }\n \n     pub fn reached_recursion_limit(&self) -> bool {"}, {"sha": "e29e740f136697c58c7527ce184085e9ebd07f33", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         // Don't care about `&mut` because `DerefMut` is used less\n                         // often and user will not expect autoderef happens.\n-                        if src.starts_with(\"&\") && !src.starts_with(\"&mut \") {\n+                        if src.starts_with('&') && !src.starts_with(\"&mut \") {\n                             let derefs = \"*\".repeat(steps);\n                             err.span_suggestion(\n                                 span,"}, {"sha": "4c8be8eb610103d620c97e941f1b8befca09217e", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let predicates = self.tcx.predicates_of(adt_def.did).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n             .collect();\n@@ -174,7 +174,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 phantom_data: adt_def.is_phantom_data(),\n             },\n         });\n-        return struct_datum;\n+        struct_datum\n     }\n \n     fn fn_def_datum(\n@@ -187,7 +187,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let predicates = self.tcx.predicates_defined_on(def_id).predicates;\n         let where_clauses: Vec<_> = predicates\n-            .into_iter()\n+            .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n@@ -276,7 +276,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             parameters[0].assert_ty_ref(&self.interner).could_match(&self.interner, &lowered_ty)\n         });\n \n-        let impls = matched_impls.map(|matched_impl| chalk_ir::ImplId(matched_impl)).collect();\n+        let impls = matched_impls.map(chalk_ir::ImplId).collect();\n         impls\n     }\n \n@@ -379,7 +379,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                         ty::AdtKind::Enum => {\n                             let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n-                            if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n+                            if !constraint.0.is_empty() { unimplemented!() } else { Some(true) }\n                         }\n                     },\n                     _ => None,\n@@ -398,7 +398,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         ty::AdtKind::Struct | ty::AdtKind::Union => None,\n                         ty::AdtKind::Enum => {\n                             let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n-                            if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n+                            if !constraint.0.is_empty() { unimplemented!() } else { Some(true) }\n                         }\n                     },\n                     _ => None,\n@@ -440,7 +440,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             FnOnce => self.tcx.lang_items().fn_once_trait(),\n             Unsize => self.tcx.lang_items().unsize_trait(),\n         };\n-        def_id.map(|t| chalk_ir::TraitId(t))\n+        def_id.map(chalk_ir::TraitId)\n     }\n \n     fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {"}, {"sha": "b31f9f3c7b14f9c30f6fb91f103be0df2775f268", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -443,7 +443,7 @@ fn opaque_type_projection_predicates(\n \n     let bounds = tcx.predicates_of(def_id);\n     let predicates =\n-        util::elaborate_predicates(tcx, bounds.predicates.into_iter().map(|&(pred, _)| pred));\n+        util::elaborate_predicates(tcx, bounds.predicates.iter().map(|&(pred, _)| pred));\n \n     let filtered_predicates = predicates.filter_map(|obligation| {\n         let pred = obligation.predicate;"}, {"sha": "9ef9164191675cf6432dd918200323153b8fc085", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -368,6 +368,6 @@ impl TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n         let anon_b = self.tcx.anonymize_late_bound_regions(&b);\n         self.relate(anon_a.skip_binder(), anon_b.skip_binder())?;\n \n-        Ok(a.clone())\n+        Ok(a)\n     }\n }"}, {"sha": "84f34c0039a0a11c2c4bd90b52bd0f0457180818", "filename": "src/librustc_typeck/check/place_op.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -200,13 +200,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Gather up expressions we want to munge.\n         let mut exprs = vec![expr];\n \n-        loop {\n-            match exprs.last().unwrap().kind {\n-                hir::ExprKind::Field(ref expr, _)\n-                | hir::ExprKind::Index(ref expr, _)\n-                | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref expr) => exprs.push(&expr),\n-                _ => break,\n-            }\n+        while let hir::ExprKind::Field(ref expr, _)\n+        | hir::ExprKind::Index(ref expr, _)\n+        | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref expr) = exprs.last().unwrap().kind\n+        {\n+            exprs.push(&expr);\n         }\n \n         debug!(\"convert_place_derefs_to_mutable: exprs={:?}\", exprs);"}, {"sha": "8a6fe620af7a319758cf4d3c26960f2f908e2388", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -583,7 +583,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 self.tcx()\n                     .sess\n                     .delay_span_bug(span, \"struct or tuple struct pattern not applied to an ADT\");\n-                return Err(());\n+                Err(())\n             }\n         }\n     }\n@@ -596,7 +596,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             ty::Tuple(substs) => Ok(substs.len()),\n             _ => {\n                 self.tcx().sess.delay_span_bug(span, \"tuple pattern not applied to a tuple\");\n-                return Err(());\n+                Err(())\n             }\n         }\n     }"}, {"sha": "8b52ce710a45fd329c59d5eac30cfe5eec1b1860", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bfe529c7ea65c3e77ea5b7657014b9200df904/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=21bfe529c7ea65c3e77ea5b7657014b9200df904", "patch": "@@ -69,14 +69,14 @@ impl DocFS {\n             let sender = self.errors.clone().expect(\"can't write after closing\");\n             rayon::spawn(move || {\n                 fs::write(&path, contents).unwrap_or_else(|e| {\n-                    sender\n-                        .send(format!(\"\\\"{}\\\": {}\", path.display(), e))\n-                        .expect(&format!(\"failed to send error on \\\"{}\\\"\", path.display()));\n+                    sender.send(format!(\"\\\"{}\\\": {}\", path.display(), e)).unwrap_or_else(|_| {\n+                        panic!(\"failed to send error on \\\"{}\\\"\", path.display())\n+                    })\n                 });\n             });\n-            Ok(())\n         } else {\n-            Ok(try_err!(fs::write(&path, contents), path))\n+            try_err!(fs::write(&path, contents), path);\n         }\n+        Ok(())\n     }\n }"}]}