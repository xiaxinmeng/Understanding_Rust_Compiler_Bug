{"sha": "4695c2157c394ff00bf624adbc8ac566d4b7c791", "node_id": "C_kwDOAAsO6NoAKDQ2OTVjMjE1N2MzOTRmZjAwYmY2MjRhZGJjOGFjNTY2ZDRiN2M3OTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-06T09:43:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-06T09:43:51Z"}, "message": "Rollup merge of #93489 - Amanieu:panic_no_unwind, r=nagisa\n\nMark the panic_no_unwind lang item as nounwind\n\nThis has 2 effects:\n- It helps LLVM when inlining since it doesn't need to generate landing pads for `panic_no_unwind`.\n- It makes it sound for a panic handler to unwind even if `PanicInfo::can_unwind` returns true. This will simply cause another panic once the unwind tries to go past the `panic_no_unwind` lang item. Eventually this will cause a stack overflow, which is safe.", "tree": {"sha": "2b07baa9bc94ebb84f8f8941a6fea269e27956c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b07baa9bc94ebb84f8f8941a6fea269e27956c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4695c2157c394ff00bf624adbc8ac566d4b7c791", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/5hXCRBK7hj4Ov3rIwAAh0AIAHkkSG6dUR7aqELEp6UwfkTO\nai60AhcQFuEiGt1Qd5URLfmzOXPZuqt0gV5OV93JNQzz+ZS5o8Pf9N8GQXOUzaAA\nMXy3q5HFfEghNn7rDhMyyR6ZMS/pdfMyJlJUya7iDsHDIM3WliEg/KJtPOI2T4kX\nFZ4FlU0cb0HmFM1tXP5aLEOiSGeNBZ/1O1PZGLG1KOtGvsBHWstfONypsrzVkNK4\nYaN9tYp3VP1fxNBYxrqjRqczYv4Voh/BfhUF7Q2IXdWlorniJ5CutRdprjT7lXnc\njJoSTol1tlNdAWQa9GIEpl++obaff9m+mqtxdFEMgmreK7FjM97o8K3Hpm9xjg4=\n=OJu5\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b07baa9bc94ebb84f8f8941a6fea269e27956c6\nparent 9f4559c3452239205015a02f2695ae1ec7d5c0f2\nparent f738669b636eae466fef00f62af5d393169c676d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644140631 +0100\ncommitter GitHub <noreply@github.com> 1644140631 +0100\n\nRollup merge of #93489 - Amanieu:panic_no_unwind, r=nagisa\n\nMark the panic_no_unwind lang item as nounwind\n\nThis has 2 effects:\n- It helps LLVM when inlining since it doesn't need to generate landing pads for `panic_no_unwind`.\n- It makes it sound for a panic handler to unwind even if `PanicInfo::can_unwind` returns true. This will simply cause another panic once the unwind tries to go past the `panic_no_unwind` lang item. Eventually this will cause a stack overflow, which is safe.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4695c2157c394ff00bf624adbc8ac566d4b7c791", "html_url": "https://github.com/rust-lang/rust/commit/4695c2157c394ff00bf624adbc8ac566d4b7c791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4695c2157c394ff00bf624adbc8ac566d4b7c791/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4559c3452239205015a02f2695ae1ec7d5c0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4559c3452239205015a02f2695ae1ec7d5c0f2", "html_url": "https://github.com/rust-lang/rust/commit/9f4559c3452239205015a02f2695ae1ec7d5c0f2"}, {"sha": "f738669b636eae466fef00f62af5d393169c676d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f738669b636eae466fef00f62af5d393169c676d", "html_url": "https://github.com/rust-lang/rust/commit/f738669b636eae466fef00f62af5d393169c676d"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "7c8a47d5d65244fc13d53fe80382bce6b8c45b5e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4695c2157c394ff00bf624adbc8ac566d4b7c791/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4695c2157c394ff00bf624adbc8ac566d4b7c791/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4695c2157c394ff00bf624adbc8ac566d4b7c791", "patch": "@@ -2778,6 +2778,13 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n+    // The panic_no_unwind function called by TerminatorKind::Abort will never\n+    // unwind. If the panic handler that it invokes unwind then it will simply\n+    // call the panic handler again.\n+    if Some(id) == tcx.lang_items().panic_no_unwind() {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n+    }\n+\n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n     let mut inline_span = None;"}, {"sha": "be8598fae09d793a8859a0e9dac14e2cd9fa3dbe", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4695c2157c394ff00bf624adbc8ac566d4b7c791/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4695c2157c394ff00bf624adbc8ac566d4b7c791/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=4695c2157c394ff00bf624adbc8ac566d4b7c791", "patch": "@@ -136,6 +136,10 @@ impl<'a> PanicInfo<'a> {\n     /// This is true for most kinds of panics with the exception of panics\n     /// caused by trying to unwind out of a `Drop` implementation or a function\n     /// whose ABI does not support unwinding.\n+    ///\n+    /// It is safe for a panic handler to unwind even when this function returns\n+    /// true, however this will simply cause the panic handler to be called\n+    /// again.\n     #[must_use]\n     #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]\n     pub fn can_unwind(&self) -> bool {"}]}