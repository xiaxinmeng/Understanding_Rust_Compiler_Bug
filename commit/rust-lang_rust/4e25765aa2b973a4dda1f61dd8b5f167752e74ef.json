{"sha": "4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjU3NjVhYTJiOTczYTRkZGExZjYxZGQ4YjVmMTY3NzUyZTc0ZWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-13T02:15:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-13T04:01:49Z"}, "message": "rustdoc: Fix ICE with cross-crate default impls\n\nThis adds a special code path for impls which are listed as default impls to\nensure that they're loaded correctly.", "tree": {"sha": "6dae72860b4b9a61240a4e9e9814a905c2398c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dae72860b4b9a61240a4e9e9814a905c2398c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "html_url": "https://github.com/rust-lang/rust/commit/4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b03c24ec346e6405883032094f47805ef9c43e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b03c24ec346e6405883032094f47805ef9c43e", "html_url": "https://github.com/rust-lang/rust/commit/c9b03c24ec346e6405883032094f47805ef9c43e"}], "stats": {"total": 144, "additions": 130, "deletions": 14}, "files": [{"sha": "ca8ae83ab80a80e976ed1af1931fa5cd7ba15870", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -411,3 +411,8 @@ pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: ast::DefId) ->\n     let cdata = cstore.get_crate_data(trait_def_id.krate);\n     decoder::is_defaulted_trait(&*cdata, trait_def_id.node)\n }\n+\n+pub fn is_default_impl(cstore: &cstore::CStore, impl_did: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(impl_did.krate);\n+    decoder::is_default_impl(&*cdata, impl_did.node)\n+}"}, {"sha": "c0bad80ab594aa74dd6c505a3482745129bedf39", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -1537,13 +1537,18 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n     }\n }\n \n-pub fn is_defaulted_trait<'tcx>(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n+pub fn is_defaulted_trait(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n     let trait_doc = lookup_item(trait_id, cdata.data());\n     assert!(item_family(trait_doc) == Family::Trait);\n     let defaulted_doc = reader::get_doc(trait_doc, tag_defaulted_trait);\n     reader::doc_as_u8(defaulted_doc) != 0\n }\n \n+pub fn is_default_impl(cdata: Cmd, impl_id: ast::NodeId) -> bool {\n+    let impl_doc = lookup_item(impl_id, cdata.data());\n+    item_family(impl_doc) == Family::DefaultImpl\n+}\n+\n pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> {\n     let crate_doc = rbml::Doc::new(metadata);\n     let cm_doc = reader::get_doc(crate_doc, tag_codemap);"}, {"sha": "aa17bf20d74bbe782e0896277a93106ee2225f93", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -259,26 +259,43 @@ fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n     impls.into_iter().filter_map(|a| a).collect()\n }\n \n-fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n+fn build_impl(cx: &DocContext,\n+              tcx: &ty::ctxt,\n               did: ast::DefId) -> Option<clean::Item> {\n     if !cx.inlined.borrow_mut().as_mut().unwrap().insert(did) {\n         return None\n     }\n \n+    let attrs = load_attrs(cx, tcx, did);\n     let associated_trait = csearch::get_impl_trait(tcx, did);\n-    // If this is an impl for a #[doc(hidden)] trait, be sure to not inline it.\n-    match associated_trait {\n-        Some(ref t) => {\n-            let trait_attrs = load_attrs(cx, tcx, t.def_id);\n-            if trait_attrs.iter().any(|a| is_doc_hidden(a)) {\n-                return None\n-            }\n+    if let Some(ref t) = associated_trait {\n+        // If this is an impl for a #[doc(hidden)] trait, be sure to not inline\n+        let trait_attrs = load_attrs(cx, tcx, t.def_id);\n+        if trait_attrs.iter().any(|a| is_doc_hidden(a)) {\n+            return None\n         }\n-        None => {}\n     }\n \n-    let attrs = load_attrs(cx, tcx, did);\n-    let ty = ty::lookup_item_type(tcx, did);\n+    // If this is a defaulted impl, then bail out early here\n+    if csearch::is_default_impl(&tcx.sess.cstore, did) {\n+        return Some(clean::Item {\n+            inner: clean::DefaultImplItem(clean::DefaultImpl {\n+                // FIXME: this should be decoded\n+                unsafety: ast::Unsafety::Normal,\n+                trait_: match associated_trait.as_ref().unwrap().clean(cx) {\n+                    clean::TraitBound(polyt, _) => polyt.trait_,\n+                    clean::RegionBound(..) => unreachable!(),\n+                },\n+            }),\n+            source: clean::Span::empty(),\n+            name: None,\n+            attrs: attrs,\n+            visibility: Some(ast::Inherited),\n+            stability: stability::lookup(tcx, did).clean(cx),\n+            def_id: did,\n+        });\n+    }\n+\n     let predicates = ty::lookup_predicates(tcx, did);\n     let trait_items = csearch::get_impl_items(&tcx.sess.cstore, did)\n             .iter()\n@@ -330,8 +347,10 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n         }\n     }).collect();\n     let polarity = csearch::get_impl_polarity(tcx, did);\n+    let ty = ty::lookup_item_type(tcx, did);\n     return Some(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n+            unsafety: ast::Unsafety::Normal, // FIXME: this should be decoded\n             derived: clean::detect_derived(&attrs),\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {"}, {"sha": "421549f8b7ecb8ab838ed60dfeec7ea940299e39", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -337,6 +337,7 @@ pub enum ItemEnum {\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n+    DefaultImplItem(DefaultImpl),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -367,6 +368,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.impls.iter().map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n+        items.extend(self.def_traits.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -2079,6 +2081,7 @@ impl Clean<ImplPolarity> for ast::ImplPolarity {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Impl {\n+    pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n     pub for_: Type,\n@@ -2101,6 +2104,7 @@ impl Clean<Item> for doctree::Impl {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             inner: ImplItem(Impl {\n+                unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n                 trait_: self.trait_.clean(cx),\n                 for_: self.for_.clean(cx),\n@@ -2112,6 +2116,29 @@ impl Clean<Item> for doctree::Impl {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct DefaultImpl {\n+    pub unsafety: ast::Unsafety,\n+    pub trait_: Type,\n+}\n+\n+impl Clean<Item> for doctree::DefaultImpl {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: None,\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            def_id: ast_util::local_def(self.id),\n+            visibility: Some(ast::Public),\n+            stability: None,\n+            inner: DefaultImplItem(DefaultImpl {\n+                unsafety: self.unsafety,\n+                trait_: self.trait_.clean(cx),\n+            }),\n+        }\n+    }\n+}\n+\n impl Clean<Item> for doctree::ExternCrate {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {"}, {"sha": "c6d8b9428c5751c26a97f79c3b310c2d0fa4693f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -202,6 +202,8 @@ pub struct DefaultImpl {\n     pub unsafety: ast::Unsafety,\n     pub trait_: ast::TraitRef,\n     pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub whence: Span,\n }\n \n pub struct Macro {"}, {"sha": "1d63f01be524adcc7d228d3045b19bc388afbbe7", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -64,6 +64,7 @@ impl ItemType {\n             clean::MacroItem(..)           => ItemType::Macro,\n             clean::PrimitiveItem(..)       => ItemType::Primitive,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n+            clean::DefaultImplItem(..)     => ItemType::Impl,\n         }\n     }\n "}, {"sha": "953b442bb3ceb3d81b18a209153b6525affd5672", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -176,7 +176,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                     return None;\n                 }\n             }\n-            clean::ImplItem(..) => {}\n+            clean::DefaultImplItem(..) | clean::ImplItem(..) => {}\n \n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}"}, {"sha": "d53954b29b585422bc3305b821476fa41e8e45e8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -362,7 +362,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let i = DefaultImpl {\n                     unsafety: unsafety,\n                     trait_: trait_ref.clone(),\n-                    id: item.id\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n                 };\n                 om.def_traits.push(i);\n             }"}, {"sha": "338cf9d20531891e9928277c553b05bec7259249", "filename": "src/test/run-make/rustdoc-default-impl/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: foo.rs bar.rs\n+\t$(RUSTC) foo.rs --crate-type lib\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc bar.rs -L $(TMPDIR)"}, {"sha": "c9fae80d858297a4c441f69859724a22421509d5", "filename": "src/test/run-make/rustdoc-default-impl/bar.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+pub use foo::bar;\n+\n+pub fn wut<T: bar::Bar>() {\n+}\n+"}, {"sha": "08f3bd10e74a716c05b1699be930e7d698b3db0c", "filename": "src/test/run-make/rustdoc-default-impl/foo.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e25765aa2b973a4dda1f61dd8b5f167752e74ef/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs?ref=4e25765aa2b973a4dda1f61dd8b5f167752e74ef", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod bar {\n+    use std::marker;\n+\n+    pub trait Bar: marker::MarkerTrait + 'static {}\n+\n+    impl Bar for .. {}\n+\n+    pub trait Foo {\n+        fn foo(&self) {}\n+    }\n+\n+    impl Foo {\n+        pub fn test<T: Bar>(&self) {}\n+    }\n+\n+    pub struct TypeId;\n+\n+    impl TypeId {\n+        pub fn of<T: Bar + ?Sized>() -> TypeId {\n+            panic!()\n+        }\n+    }\n+}"}]}