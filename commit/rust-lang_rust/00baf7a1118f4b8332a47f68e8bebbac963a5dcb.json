{"sha": "00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYmFmN2ExMTE4ZjRiODMzMmE0N2Y2OGU4YmViYmFjOTYzYTVkY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-06T13:41:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-06T13:41:31Z"}, "message": "Auto merge of #3803 - felix91gr:master, r=oli-obk\n\nCognitive Complexity (step 1 out of 3+): name changes\n\nFollowing up on #3793\n\n**Overall checklist:**\n\n1. **Name changes**\n2. MVP of functionality\n3. Tests\n\nAfter this PR, we will start working on the implementation itself.", "tree": {"sha": "d7c68d5741df02cbae3fcdfd930f909173df2891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c68d5741df02cbae3fcdfd930f909173df2891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "html_url": "https://github.com/rust-lang/rust/commit/00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d1731ce8d3782ba93b0fd583307240fc814ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d1731ce8d3782ba93b0fd583307240fc814ef3", "html_url": "https://github.com/rust-lang/rust/commit/15d1731ce8d3782ba93b0fd583307240fc814ef3"}, {"sha": "ddc718087ffeb7b932da87c26fd4e75ec6a9ac02", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc718087ffeb7b932da87c26fd4e75ec6a9ac02", "html_url": "https://github.com/rust-lang/rust/commit/ddc718087ffeb7b932da87c26fd4e75ec6a9ac02"}], "stats": {"total": 295, "additions": 175, "deletions": 120}, "files": [{"sha": "b05fa25fb1b42563cdaa9538fad58a9ae93a1789", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -798,11 +798,11 @@ All notable changes to this project will be documented in this file.\n [`cmp_nan`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_nan\n [`cmp_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_null\n [`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\n+[`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n-[`cyclomatic_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cyclomatic_complexity\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const"}, {"sha": "7f8757e6cd26e994177ea66a305ff2632225e28e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -131,7 +131,7 @@ Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml\n \n ```toml\n blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n-cyclomatic-complexity-threshold = 30\n+cognitive-complexity-threshold = 30\n ```\n \n See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which lints can be configured and the"}, {"sha": "b24e0cdfced4d583c935f9467e6a27f6374a8f56", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n             },\n             hir::ExprKind::Assign(assignee, e) => {\n                 if let hir::ExprKind::Binary(op, l, r) = &e.node {\n-                    #[allow(clippy::cyclomatic_complexity)]\n+                    #[allow(clippy::cognitive_complexity)]\n                     let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n                         let ty = cx.tables.expr_ty(assignee);\n                         let rty = cx.tables.expr_ty(rhs);"}, {"sha": "d44784843e73955cc0ad4a6b3d698138e3edf445", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,4 +1,4 @@\n-//! calculate cyclomatic complexity and warn about overly complex functions\n+//! calculate cognitive complexity and warn about overly complex functions\n \n use rustc::cfg::CFG;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -12,43 +12,43 @@ use syntax::source_map::Span;\n use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for methods with high cyclomatic complexity.\n+    /// **What it does:** Checks for methods with high cognitive complexity.\n     ///\n-    /// **Why is this bad?** Methods of high cyclomatic complexity tend to be badly\n-    /// readable. Also LLVM will usually optimize small methods better.\n+    /// **Why is this bad?** Methods of high cognitive complexity tend to be hard to\n+    /// both read and maintain. Also LLVM will tend to optimize small methods better.\n     ///\n     /// **Known problems:** Sometimes it's hard to find a way to reduce the\n     /// complexity.\n     ///\n     /// **Example:** No. You'll see it when you get the warning.\n-    pub CYCLOMATIC_COMPLEXITY,\n+    pub COGNITIVE_COMPLEXITY,\n     complexity,\n     \"functions that should be split up into multiple functions\"\n }\n \n-pub struct CyclomaticComplexity {\n+pub struct CognitiveComplexity {\n     limit: LimitStack,\n }\n \n-impl CyclomaticComplexity {\n+impl CognitiveComplexity {\n     pub fn new(limit: u64) -> Self {\n         Self {\n             limit: LimitStack::new(limit),\n         }\n     }\n }\n \n-impl LintPass for CyclomaticComplexity {\n+impl LintPass for CognitiveComplexity {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(CYCLOMATIC_COMPLEXITY)\n+        lint_array!(COGNITIVE_COMPLEXITY)\n     }\n \n     fn name(&self) -> &'static str {\n-        \"CyclomaticComplexity\"\n+        \"CognitiveComplexity\"\n     }\n }\n \n-impl CyclomaticComplexity {\n+impl CognitiveComplexity {\n     fn check<'a, 'tcx: 'a>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n         if in_macro(span) {\n             return;\n@@ -105,17 +105,17 @@ impl CyclomaticComplexity {\n             if rust_cc > self.limit.limit() {\n                 span_help_and_lint(\n                     cx,\n-                    CYCLOMATIC_COMPLEXITY,\n+                    COGNITIVE_COMPLEXITY,\n                     span,\n-                    &format!(\"the function has a cyclomatic complexity of {}\", rust_cc),\n+                    &format!(\"the function has a cognitive complexity of {}\", rust_cc),\n                     \"you could split it up into multiple smaller functions\",\n                 );\n             }\n         }\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -132,10 +132,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n     }\n \n     fn enter_lint_attrs(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n-        self.limit.push_attrs(cx.sess(), attrs, \"cyclomatic_complexity\");\n+        self.limit.push_attrs(cx.sess(), attrs, \"cognitive_complexity\");\n     }\n     fn exit_lint_attrs(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n-        self.limit.pop_attrs(cx.sess(), attrs, \"cyclomatic_complexity\");\n+        self.limit.pop_attrs(cx.sess(), attrs, \"cognitive_complexity\");\n     }\n }\n \n@@ -201,7 +201,7 @@ fn report_cc_bug(\n ) {\n     span_bug!(\n         span,\n-        \"Clippy encountered a bug calculating cyclomatic complexity: cc = {}, arms = {}, \\\n+        \"Clippy encountered a bug calculating cognitive complexity: cc = {}, arms = {}, \\\n          div = {}, shorts = {}, returns = {}. Please file a bug report.\",\n         cc,\n         narms,\n@@ -222,12 +222,12 @@ fn report_cc_bug(\n     span: Span,\n     id: HirId,\n ) {\n-    if !is_allowed(cx, CYCLOMATIC_COMPLEXITY, id) {\n+    if !is_allowed(cx, COGNITIVE_COMPLEXITY, id) {\n         cx.sess().span_note_without_error(\n             span,\n             &format!(\n-                \"Clippy encountered a bug calculating cyclomatic complexity \\\n-                 (hide this message with `#[allow(cyclomatic_complexity)]`): \\\n+                \"Clippy encountered a bug calculating cognitive complexity \\\n+                 (hide this message with `#[allow(cognitive_complexity)]`): \\\n                  cc = {}, arms = {}, div = {}, shorts = {}, returns = {}. \\\n                  Please file a bug report.\",\n                 cc, narms, div, shorts, returns", "previous_filename": "clippy_lints/src/cyclomatic_complexity.rs"}, {"sha": "06d6a50870156867b56b10b0a2f135733888035a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -152,11 +152,11 @@ pub mod block_in_if_condition;\n pub mod booleans;\n pub mod bytecount;\n pub mod cargo_common_metadata;\n+pub mod cognitive_complexity;\n pub mod collapsible_if;\n pub mod const_static_lifetime;\n pub mod copies;\n pub mod copy_iterator;\n-pub mod cyclomatic_complexity;\n pub mod dbg_macro;\n pub mod default_trait_access;\n pub mod derive;\n@@ -478,7 +478,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box temporary_assignment::Pass);\n     reg.register_late_lint_pass(box transmute::Transmute);\n     reg.register_late_lint_pass(\n-        box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold)\n+        box cognitive_complexity::CognitiveComplexity::new(conf.cognitive_complexity_threshold)\n     );\n     reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n@@ -666,11 +666,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         booleans::LOGIC_BUG,\n         booleans::NONMINIMAL_BOOL,\n         bytecount::NAIVE_BYTECOUNT,\n+        cognitive_complexity::COGNITIVE_COMPLEXITY,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n         copies::IFS_SAME_COND,\n         copies::IF_SAME_THEN_ELSE,\n-        cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n@@ -962,7 +962,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         attrs::DEPRECATED_CFG_ATTR,\n         booleans::NONMINIMAL_BOOL,\n-        cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        cognitive_complexity::COGNITIVE_COMPLEXITY,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n         duration_subsec::DURATION_SUBSEC,\n@@ -1131,6 +1131,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n pub fn register_renamed(ls: &mut rustc::lint::LintStore) {\n     ls.register_renamed(\"clippy::stutter\", \"clippy::module_name_repetitions\");\n     ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n+    ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "685e83c4d70cdf73391dd28ccae9326487ab4230", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -821,7 +821,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    #[allow(clippy::cyclomatic_complexity)]\n+    #[allow(clippy::cognitive_complexity)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(expr.span) {\n             return;"}, {"sha": "fbd36ba71dec43d1ffcab2ac057f2fc14cd0cf31", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -15,7 +15,11 @@ pub enum DeprecationStatus {\n \n pub const BUILTIN_ATTRIBUTES: &[(&str, DeprecationStatus)] = &[\n     (\"author\", DeprecationStatus::None),\n-    (\"cyclomatic_complexity\", DeprecationStatus::None),\n+    (\"cognitive_complexity\", DeprecationStatus::None),\n+    (\n+        \"cyclomatic_complexity\",\n+        DeprecationStatus::Replaced(\"cognitive_complexity\"),\n+    ),\n     (\"dump\", DeprecationStatus::None),\n ];\n "}, {"sha": "9efaeeb2e37cc098855934526f80b74f1eb0c796", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -110,8 +110,10 @@ macro_rules! define_Conf {\n define_Conf! {\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about\n     (blacklisted_names, \"blacklisted_names\", [\"foo\", \"bar\", \"baz\", \"quux\"] => Vec<String>),\n-    /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n-    (cyclomatic_complexity_threshold, \"cyclomatic_complexity_threshold\", 25 => u64),\n+    /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n+    (cognitive_complexity_threshold, \"cognitive_complexity_threshold\", 25 => u64),\n+    /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead.\n+    (cyclomatic_complexity_threshold, \"cyclomatic_complexity_threshold\", None => Option<u64>),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n     (doc_valid_idents, \"doc_valid_idents\", [\n         \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n@@ -227,13 +229,24 @@ pub fn read(path: Option<&path::Path>) -> (Conf, Vec<Error>) {\n \n     assert!(ERRORS.lock().expect(\"no threading -> mutex always safe\").is_empty());\n     match toml::from_str(&file) {\n-        Ok(toml) => (\n-            toml,\n-            ERRORS.lock().expect(\"no threading -> mutex always safe\").split_off(0),\n-        ),\n+        Ok(toml) => {\n+            let mut errors = ERRORS.lock().expect(\"no threading -> mutex always safe\").split_off(0);\n+\n+            let toml_ref: &Conf = &toml;\n+\n+            let cyc_field: Option<u64> = toml_ref.cyclomatic_complexity_threshold;\n+\n+            if cyc_field.is_some() {\n+                let cyc_err = \"found deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead.\".to_string();\n+                errors.push(Error::Toml(cyc_err));\n+            }\n+\n+            (toml, errors)\n+        },\n         Err(e) => {\n             let mut errors = ERRORS.lock().expect(\"no threading -> mutex always safe\").split_off(0);\n             errors.push(Error::Toml(e.to_string()));\n+\n             default(errors)\n         },\n     }"}, {"sha": "ac47b195042ebfb3682978d7847888ef49a2f40f", "filename": "tests/ui-toml/conf_deprecated_key/clippy.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,6 @@\n+# that one is an error\n+cyclomatic-complexity-threshold = 42\n+\n+# that one is white-listed\n+[third-party]\n+clippy-feature = \"nightly\""}, {"sha": "2577c1eef92bc5b987edef4cf3aa9d91be3e81f7", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern: error reading Clippy's configuration file: found deprecated field\n+// `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead.\n+\n+fn main() {}"}, {"sha": "34267c0daf7c2cfd50fc647b6cd3f2b891e32856", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: found deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead.\n+\n+error: aborting due to previous error\n+"}, {"sha": "a1dd6b2f0819cb67361baacf14d6e51f1fcac992", "filename": "tests/ui-toml/good_toml_no_false_negatives/clippy.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fclippy.toml?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,3 @@\n+# that one is white-listed\n+[third-party]\n+clippy-feature = \"nightly\""}, {"sha": "270b9c5c43c138883d76aa4c7e4733576b6d68c7", "filename": "tests/ui-toml/good_toml_no_false_negatives/conf_no_false_negatives.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,3 @@\n+// error-pattern: should give absolutely no error\n+\n+fn main() {}"}, {"sha": "cdb1576b6776969d6780183e81814c71bbe9b51d", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `third-party`\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `third-party`\n \n error: aborting due to previous error\n "}, {"sha": "4e4016e78c2a00685cac06b72f2587b925ccf330", "filename": "tests/ui/cognitive_complexity.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n #![allow(clippy::all)]\n-#![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::cognitive_complexity)]\n #![allow(unused)]\n \n #[rustfmt::skip]\n@@ -87,7 +87,7 @@ fn main() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn kaboom() {\n     let n = 0;\n     'a: for i in 0..20 {\n@@ -133,17 +133,17 @@ fn bloo() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn lots_of_short_circuits() -> bool {\n     true && false && true && false && true && false && true\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn lots_of_short_circuits2() -> bool {\n     true || false || true || false || true || false || true\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn baa() {\n     let x = || match 99 {\n         0 => 0,\n@@ -161,7 +161,7 @@ fn baa() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn bar() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -170,8 +170,8 @@ fn bar() {\n }\n \n #[test]\n-#[clippy::cyclomatic_complexity = \"0\"]\n-/// Tests are usually complex but simple at the same time. `clippy::cyclomatic_complexity` used to\n+#[clippy::cognitive_complexity = \"0\"]\n+/// Tests are usually complex but simple at the same time. `clippy::cognitive_complexity` used to\n /// give lots of false-positives in tests.\n fn dont_warn_on_tests() {\n     match 99 {\n@@ -180,7 +180,7 @@ fn dont_warn_on_tests() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -190,7 +190,7 @@ fn barr() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -206,7 +206,7 @@ fn barr2() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -216,7 +216,7 @@ fn barrr() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -232,7 +232,7 @@ fn barrr2() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barrrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -242,7 +242,7 @@ fn barrrr() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn barrrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -258,7 +258,7 @@ fn barrrr2() {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn cake() {\n     if 4 == 5 {\n         println!(\"yea\");\n@@ -268,7 +268,7 @@ fn cake() {\n     println!(\"whee\");\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n pub fn read_file(input_path: &str) -> String {\n     use std::fs::File;\n     use std::io::{Read, Write};\n@@ -299,28 +299,28 @@ pub fn read_file(input_path: &str) -> String {\n \n enum Void {}\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn void(void: Void) {\n     if true {\n         match void {}\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn mcarton_sees_all() {\n     panic!(\"meh\");\n     panic!(\"m\u00f6h\");\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn try() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n     let _ = try!(Ok(42));\n     let _ = try!(Ok(43));\n@@ -336,7 +336,7 @@ fn try_again() -> Result<i32, &'static str> {\n     }\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn early() -> Result<i32, &'static str> {\n     return Ok(5);\n     return Ok(5);\n@@ -350,7 +350,7 @@ fn early() -> Result<i32, &'static str> {\n }\n \n #[rustfmt::skip]\n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn early_ret() -> i32 {\n     let a = if true { 42 } else { return 0; };\n     let a = if a < 99 { 42 } else { return 0; };", "previous_filename": "tests/ui/cyclomatic_complexity.rs"}, {"sha": "168653b9711640d8c126e3f9ec826ba5165d4672", "filename": "tests/ui/cognitive_complexity.stderr", "status": "renamed", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n-error: the function has a cyclomatic complexity of 28\n-  --> $DIR/cyclomatic_complexity.rs:6:1\n+error: the function has a cognitive complexity of 28\n+  --> $DIR/cognitive_complexity.rs:6:1\n    |\n LL | / fn main() {\n LL | |     if true {\n@@ -10,11 +10,11 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::cyclomatic-complexity` implied by `-D warnings`\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 7\n-  --> $DIR/cyclomatic_complexity.rs:91:1\n+error: the function has a cognitive complexity of 7\n+  --> $DIR/cognitive_complexity.rs:91:1\n    |\n LL | / fn kaboom() {\n LL | |     let n = 0;\n@@ -27,8 +27,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:137:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:137:1\n    |\n LL | / fn lots_of_short_circuits() -> bool {\n LL | |     true && false && true && false && true && false && true\n@@ -37,8 +37,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:142:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:142:1\n    |\n LL | / fn lots_of_short_circuits2() -> bool {\n LL | |     true || false || true || false || true || false || true\n@@ -47,8 +47,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:147:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:147:1\n    |\n LL | / fn baa() {\n LL | |     let x = || match 99 {\n@@ -61,8 +61,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:148:13\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:148:13\n    |\n LL |       let x = || match 99 {\n    |  _____________^\n@@ -76,8 +76,8 @@ LL | |     };\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:165:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:165:1\n    |\n LL | / fn bar() {\n LL | |     match 99 {\n@@ -89,8 +89,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:184:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:184:1\n    |\n LL | / fn barr() {\n LL | |     match 99 {\n@@ -103,8 +103,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 3\n-  --> $DIR/cyclomatic_complexity.rs:194:1\n+error: the function has a cognitive complexity of 3\n+  --> $DIR/cognitive_complexity.rs:194:1\n    |\n LL | / fn barr2() {\n LL | |     match 99 {\n@@ -117,8 +117,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:210:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:210:1\n    |\n LL | / fn barrr() {\n LL | |     match 99 {\n@@ -131,8 +131,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 3\n-  --> $DIR/cyclomatic_complexity.rs:220:1\n+error: the function has a cognitive complexity of 3\n+  --> $DIR/cognitive_complexity.rs:220:1\n    |\n LL | / fn barrr2() {\n LL | |     match 99 {\n@@ -145,8 +145,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:236:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:236:1\n    |\n LL | / fn barrrr() {\n LL | |     match 99 {\n@@ -159,8 +159,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 3\n-  --> $DIR/cyclomatic_complexity.rs:246:1\n+error: the function has a cognitive complexity of 3\n+  --> $DIR/cognitive_complexity.rs:246:1\n    |\n LL | / fn barrrr2() {\n LL | |     match 99 {\n@@ -173,8 +173,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 2\n-  --> $DIR/cyclomatic_complexity.rs:262:1\n+error: the function has a cognitive complexity of 2\n+  --> $DIR/cognitive_complexity.rs:262:1\n    |\n LL | / fn cake() {\n LL | |     if 4 == 5 {\n@@ -187,8 +187,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 4\n-  --> $DIR/cyclomatic_complexity.rs:272:1\n+error: the function has a cognitive complexity of 4\n+  --> $DIR/cognitive_complexity.rs:272:1\n    |\n LL | / pub fn read_file(input_path: &str) -> String {\n LL | |     use std::fs::File;\n@@ -201,8 +201,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:303:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:303:1\n    |\n LL | / fn void(void: Void) {\n LL | |     if true {\n@@ -213,8 +213,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:316:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:316:1\n    |\n LL | / fn try() -> Result<i32, &'static str> {\n LL | |     match 5 {\n@@ -226,8 +226,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:324:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:324:1\n    |\n LL | / fn try_again() -> Result<i32, &'static str> {\n LL | |     let _ = try!(Ok(42));\n@@ -240,8 +240,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 1\n-  --> $DIR/cyclomatic_complexity.rs:340:1\n+error: the function has a cognitive complexity of 1\n+  --> $DIR/cognitive_complexity.rs:340:1\n    |\n LL | / fn early() -> Result<i32, &'static str> {\n LL | |     return Ok(5);\n@@ -254,8 +254,8 @@ LL | | }\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: the function has a cyclomatic complexity of 8\n-  --> $DIR/cyclomatic_complexity.rs:354:1\n+error: the function has a cognitive complexity of 8\n+  --> $DIR/cognitive_complexity.rs:354:1\n    |\n LL | / fn early_ret() -> i32 {\n LL | |     let a = if true { 42 } else { return 0; };", "previous_filename": "tests/ui/cyclomatic_complexity.stderr"}, {"sha": "403eff566ed6d34d2a2ac92e58d9d94735782f62", "filename": "tests/ui/cognitive_complexity_attr_used.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity_attr_used.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,11 +1,11 @@\n-#![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::cognitive_complexity)]\n #![warn(unused)]\n \n fn main() {\n     kaboom();\n }\n \n-#[clippy::cyclomatic_complexity = \"0\"]\n+#[clippy::cognitive_complexity = \"0\"]\n fn kaboom() {\n     if 42 == 43 {\n         panic!();", "previous_filename": "tests/ui/cyclomatic_complexity_attr_used.rs"}, {"sha": "2cf41506f566c7688e750ac9549f3f9d1aafc6d5", "filename": "tests/ui/cognitive_complexity_attr_used.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity_attr_used.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n-error: the function has a cyclomatic complexity of 3\n-  --> $DIR/cyclomatic_complexity_attr_used.rs:9:1\n+error: the function has a cognitive complexity of 3\n+  --> $DIR/cognitive_complexity_attr_used.rs:9:1\n    |\n LL | / fn kaboom() {\n LL | |     if 42 == 43 {\n@@ -10,7 +10,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = note: `-D clippy::cyclomatic-complexity` implied by `-D warnings`\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n error: aborting due to previous error", "previous_filename": "tests/ui/cyclomatic_complexity_attr_used.stderr"}, {"sha": "69570c515b6baba796330550d51e10b091b2a938", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cyclomatic_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "5dac42a3dd976aaf500ca991ccbed612a79a4c2e", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::cyclomatic_complexity, clippy::assertions_on_constants)]\n+#![allow(clippy::cognitive_complexity, clippy::assertions_on_constants)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "ce8de0745773c7cf1f6cf4b223f584995233e5c8", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -29,7 +29,7 @@ impl Unrelated {\n     clippy::linkedlist,\n     clippy::shadow_unrelated,\n     clippy::unnecessary_mut_passed,\n-    clippy::cyclomatic_complexity,\n+    clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n #[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]"}, {"sha": "71f228c32bd459316d80dd46e471a77ff40c458a", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -2,7 +2,7 @@\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_if,\n-    clippy::cyclomatic_complexity,\n+    clippy::cognitive_complexity,\n     clippy::eq_op,\n     clippy::needless_return,\n     clippy::never_loop,"}, {"sha": "8a7588f2e7f73bbc4bca255c75ecf1b3b3383b15", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,7 +1,7 @@\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_if,\n-    clippy::cyclomatic_complexity,\n+    clippy::cognitive_complexity,\n     clippy::eq_op,\n     clippy::needless_continue,\n     clippy::needless_return,"}, {"sha": "b1846a1096cbdb6305197c3b44ebe7946b73bf74", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,4 +1,5 @@\n #![allow(stutter)]\n+#![warn(clippy::cyclomatic_complexity)]\n \n #[warn(clippy::stutter)]\n fn main() {}"}, {"sha": "ac850b60d9724f6042f43e90d93a14dbf248ded0", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -6,16 +6,22 @@ LL | #![allow(stutter)]\n    |\n    = note: `-D unknown-lints` implied by `-D warnings`\n \n+error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n+  --> $DIR/rename.rs:2:9\n+   |\n+LL | #![warn(clippy::cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n+\n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:3:8\n+  --> $DIR/rename.rs:4:8\n    |\n LL | #[warn(clippy::stutter)]\n    |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:6:8\n+  --> $DIR/rename.rs:7:8\n    |\n LL | #[warn(clippy::new_without_default_derive)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n@@ -26,11 +32,11 @@ error: unknown lint: `stutter`\n LL | #![allow(stutter)]\n    |          ^^^^^^^\n \n-error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:3:8\n+error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n+  --> $DIR/rename.rs:2:9\n    |\n-LL | #[warn(clippy::stutter)]\n-   |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n+LL | #![warn(clippy::cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "fdb425363e81729b17e72dc88cf7c466cf2d5f69", "filename": "tests/ui/renamed_builtin_attr.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frenamed_builtin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frenamed_builtin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,2 @@\n+#[clippy::cyclomatic_complexity = \"1\"]\n+fn main() {}"}, {"sha": "cf6cccd368848d4050d05aad49f24a07c44937e5", "filename": "tests/ui/renamed_builtin_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frenamed_builtin_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Frenamed_builtin_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.stderr?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -0,0 +1,8 @@\n+error: Usage of deprecated attribute\n+  --> $DIR/renamed_builtin_attr.rs:1:11\n+   |\n+LL | #[clippy::cyclomatic_complexity = \"1\"]\n+   |           ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `cognitive_complexity`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e993e63f8ed86534d2b2af848c51e51c0be10481", "filename": "tests/ui/unknown_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Funknown_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Funknown_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_attribute.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,3 +1,3 @@\n #[clippy::unknown]\n-#[clippy::cyclomatic_complexity = \"1\"]\n+#[clippy::cognitive_complexity = \"1\"]\n fn main() {}"}, {"sha": "d692157872148d5ccfc01f3682318d5d9a350bfc", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00baf7a1118f4b8332a47f68e8bebbac963a5dcb/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::while_let_loop, clippy::empty_loop, clippy::while_let_on_iterator)]\n-#![allow(dead_code, clippy::never_loop, unused, clippy::cyclomatic_complexity)]\n+#![allow(dead_code, clippy::never_loop, unused, clippy::cognitive_complexity)]\n \n fn main() {\n     let y = Some(true);"}]}