{"sha": "3b1399df2dbdcbe0e126e8b434536257ccf604e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTM5OWRmMmRiZGNiZTBlMTI2ZThiNDM0NTM2MjU3Y2NmNjA0ZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-08T14:08:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-01T14:37:19Z"}, "message": "Make calling def_id on a DefSelfTy an error; the previous defids that\nwere returned, either the trait or the *self type itself*, were not\nparticularly representative of what the Def is (a type parameter).\nRewrite paths to handle this case specially, just as they handle the\nprimitive case specifically. This entire `def_id` codepath is kind of a\nmess.", "tree": {"sha": "9f8c02188333be3a9b01bf7ca7e38a63359a422f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8c02188333be3a9b01bf7ca7e38a63359a422f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1399df2dbdcbe0e126e8b434536257ccf604e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1399df2dbdcbe0e126e8b434536257ccf604e1", "html_url": "https://github.com/rust-lang/rust/commit/3b1399df2dbdcbe0e126e8b434536257ccf604e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1399df2dbdcbe0e126e8b434536257ccf604e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ce1ebe7c58915c3ac35ed790301739d3a4929d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ce1ebe7c58915c3ac35ed790301739d3a4929d", "html_url": "https://github.com/rust-lang/rust/commit/95ce1ebe7c58915c3ac35ed790301739d3a4929d"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "6e31b733254bd73f90d370117d01fc62181dc19d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -99,6 +99,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 }\n                 _ if self.ignore_non_const_paths => (),\n                 def::DefPrimTy(_) => (),\n+                def::DefSelfTy(..) => (),\n                 def::DefVariant(enum_id, variant_id, _) => {\n                     self.check_def_id(enum_id);\n                     if !self.ignore_variant_stack.contains(&variant_id) {"}, {"sha": "3898d52615316c3c6e774aff07c6e80341ce8713", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -135,14 +135,12 @@ impl Def {\n             DefFn(id, _) | DefMod(id) | DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(_, id) |\n             DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n-            DefMethod(id) | DefConst(id) | DefAssociatedConst(id) |\n-            DefSelfTy(Some(id), None)=> {\n+            DefMethod(id) | DefConst(id) | DefAssociatedConst(id) => {\n                 id\n             }\n \n             DefLocal(id) |\n-            DefUpvar(id, _, _) |\n-            DefSelfTy(_, Some((_, id))) => {\n+            DefUpvar(id, _, _) => {\n                 DefId::xxx_local(id) // TODO, clearly\n             }\n "}, {"sha": "73519b8f579d569757945a19b4baf7525a741c02", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -474,6 +474,7 @@ pub fn check_path(tcx: &ty::ctxt, path: &hir::Path, id: ast::NodeId,\n                   cb: &mut FnMut(DefId, Span, &Option<&Stability>)) {\n     match tcx.def_map.borrow().get(&id).map(|d| d.full_def()) {\n         Some(def::DefPrimTy(..)) => {}\n+        Some(def::DefSelfTy(..)) => {}\n         Some(def) => {\n             maybe_do_stability_check(tcx, def.def_id(), path.span, cb);\n         }"}, {"sha": "ca5411f9c790a5e3a3c9d05da956725e71ff1322", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -263,6 +263,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     hir::TyPath(..) => {\n                         match self.tcx.def_map.borrow().get(&ty.id).unwrap().full_def() {\n                             def::DefPrimTy(..) => true,\n+                            def::DefSelfTy(..) => true,\n                             def => {\n                                 let did = def.def_id();\n                                 if let Some(node_id) = self.tcx.map.as_local_node_id(did) {\n@@ -337,7 +338,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemTy(ref ty, _) if public_first => {\n                 if let hir::TyPath(..) = ty.node {\n                     match self.tcx.def_map.borrow().get(&ty.id).unwrap().full_def() {\n-                        def::DefPrimTy(..) | def::DefTyParam(..) => {},\n+                        def::DefPrimTy(..) | def::DefSelfTy(..) | def::DefTyParam(..) => {},\n                         def => {\n                             let did = def.def_id();\n                             if let Some(node_id) = self.tcx.map.as_local_node_id(did) {\n@@ -1148,7 +1149,7 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn path_is_private_type(&self, path_id: ast::NodeId) -> bool {\n         let did = match self.tcx.def_map.borrow().get(&path_id).map(|d| d.full_def()) {\n             // `int` etc. (None doesn't seem to occur.)\n-            None | Some(def::DefPrimTy(..)) => return false,\n+            None | Some(def::DefPrimTy(..)) | Some(def::DefSelfTy(..)) => return false,\n             Some(def) => def.def_id(),\n         };\n "}, {"sha": "20cdd21ad02f6cc9d4d6df3da2c7c8970998f38d", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -235,7 +235,8 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n         let def = self.tcx.def_map.borrow().get(&ref_id).unwrap().full_def();\n         match def {\n-            def::DefPrimTy(_) => None,\n+            def::DefPrimTy(..) => None,\n+            def::DefSelfTy(..) => None,\n             _ => Some(def.def_id()),\n         }\n     }"}, {"sha": "00781bd27110a8a1633ba1b2e1f4d2b41feb8daa", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -637,7 +637,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n         let def = self.tcx.def_map.borrow().get(&ref_id).unwrap().full_def();\n         match def {\n-            def::DefPrimTy(_) => None,\n+            def::DefPrimTy(_) | def::DefSelfTy(..) => None,\n             _ => Some(def.def_id()),\n         }\n     }"}, {"sha": "2b6a8f3fe525153373682dd9f3eef0dddc61f649", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1399df2dbdcbe0e126e8b434536257ccf604e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3b1399df2dbdcbe0e126e8b434536257ccf604e1", "patch": "@@ -2570,17 +2570,19 @@ fn name_from_pat(p: &hir::Pat) -> String {\n fn resolve_type(cx: &DocContext,\n                 path: Path,\n                 id: ast::NodeId) -> Type {\n+    debug!(\"resolve_type({:?},{:?})\", path, id);\n     let tcx = match cx.tcx_opt() {\n         Some(tcx) => tcx,\n         // If we're extracting tests, this return value doesn't matter.\n         None => return Primitive(Bool),\n     };\n-    debug!(\"searching for {} in defmap\", id);\n     let def = match tcx.def_map.borrow().get(&id) {\n         Some(k) => k.full_def(),\n         None => panic!(\"unresolved id not in defmap\")\n     };\n \n+    debug!(\"resolve_type: def={:?}\", def);\n+\n     let is_generic = match def {\n         def::DefPrimTy(p) => match p {\n             hir::TyStr => return Primitive(Str),\n@@ -2610,6 +2612,8 @@ fn resolve_type(cx: &DocContext,\n }\n \n fn register_def(cx: &DocContext, def: def::Def) -> DefId {\n+    debug!(\"register_def({:?})\", def);\n+\n     let (did, kind) = match def {\n         def::DefFn(i, _) => (i, TypeFunction),\n         def::DefTy(i, false) => (i, TypeTypedef),\n@@ -2619,6 +2623,8 @@ fn register_def(cx: &DocContext, def: def::Def) -> DefId {\n         def::DefMod(i) => (i, TypeModule),\n         def::DefStatic(i, _) => (i, TypeStatic),\n         def::DefVariant(i, _, _) => (i, TypeEnum),\n+        def::DefSelfTy(Some(def_id), _) => (def_id, TypeTrait),\n+        def::DefSelfTy(_, Some((impl_id, _))) => return cx.map.local_def_id(impl_id),\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }"}]}