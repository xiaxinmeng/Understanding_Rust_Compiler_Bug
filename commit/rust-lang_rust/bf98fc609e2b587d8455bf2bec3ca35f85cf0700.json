{"sha": "bf98fc609e2b587d8455bf2bec3ca35f85cf0700", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOThmYzYwOWUyYjU4N2Q4NDU1YmYyYmVjM2NhMzVmODVjZjA3MDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T14:04:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T14:04:00Z"}, "message": "remove mutexes", "tree": {"sha": "9f92fde2cc5f6dc74fac6925bc0fc331773a0c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f92fde2cc5f6dc74fac6925bc0fc331773a0c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf98fc609e2b587d8455bf2bec3ca35f85cf0700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf98fc609e2b587d8455bf2bec3ca35f85cf0700", "html_url": "https://github.com/rust-lang/rust/commit/bf98fc609e2b587d8455bf2bec3ca35f85cf0700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf98fc609e2b587d8455bf2bec3ca35f85cf0700/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012ea3fac62df26abefa6d64b81570ed58118dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/012ea3fac62df26abefa6d64b81570ed58118dea", "html_url": "https://github.com/rust-lang/rust/commit/012ea3fac62df26abefa6d64b81570ed58118dea"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "8c719dc5d91f47280ec50a2379878c0d13404421", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf98fc609e2b587d8455bf2bec3ca35f85cf0700/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf98fc609e2b587d8455bf2bec3ca35f85cf0700/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=bf98fc609e2b587d8455bf2bec3ca35f85cf0700", "patch": "@@ -9,7 +9,6 @@ use crossbeam_channel::{Receiver, Sender, unbounded, RecvError, select};\n use relative_path::RelativePathBuf;\n use thread_worker::WorkerHandle;\n use walkdir::WalkDir;\n-use parking_lot::Mutex;\n use notify::{DebouncedEvent, RecommendedWatcher, RecursiveMode, Watcher as _Watcher};\n \n use crate::{RootConfig, Roots, VfsRoot};\n@@ -83,9 +82,9 @@ impl Worker {\n                 let watcher = notify::watcher(notify_sender, WATCHER_DELAY)\n                     .map_err(|e| log::error!(\"failed to spawn notify {}\", e))\n                     .ok();\n-                let ctx = WatcherCtx {\n+                let mut ctx = WatcherCtx {\n                     roots,\n-                    watcher: Arc::new(Mutex::new(watcher)),\n+                    watcher,\n                     sender: output_sender,\n                 };\n                 let thread = thread::spawn(move || {\n@@ -101,18 +100,18 @@ impl Worker {\n                         // closed, we should shutdown everything.\n                         recv(input_receiver) -> t => match t {\n                             Err(RecvError) => break,\n-                            Ok(Task::AddRoot { root, config }) => watch_root(&ctx, root, Arc::clone(&config)),\n+                            Ok(Task::AddRoot { root, config }) => watch_root(&mut ctx, root, Arc::clone(&config)),\n                         },\n                         // Watcher send us changes. If **this** channel is\n                         // closed, the watcher has died, which indicates a bug\n                         // -- escalate!\n                         recv(watcher_receiver) -> event => match event {\n                             Err(RecvError) => panic!(\"watcher is dead\"),\n-                            Ok((path, change)) => WatcherCtx::handle_change(&ctx, path, change).unwrap(),\n+                            Ok((path, change)) => WatcherCtx::handle_change(&mut ctx, path, change).unwrap(),\n                         },\n                     }\n                 }\n-                drop(ctx.watcher.lock().take());\n+                drop(ctx.watcher.take());\n                 drop(ctx);\n                 let res2 = thread.join();\n                 match &res2 {\n@@ -142,10 +141,9 @@ impl Worker {\n     }\n }\n \n-fn watch_root(woker: &WatcherCtx, root: VfsRoot, config: Arc<RootConfig>) {\n-    let mut guard = woker.watcher.lock();\n+fn watch_root(woker: &mut WatcherCtx, root: VfsRoot, config: Arc<RootConfig>) {\n     log::debug!(\"loading {} ...\", config.root.as_path().display());\n-    let files = watch_recursive(guard.as_mut(), config.root.as_path(), &*config)\n+    let files = watch_recursive(woker.watcher.as_mut(), config.root.as_path(), &*config)\n         .into_iter()\n         .filter_map(|path| {\n             let abs_path = path.to_path(&config.root);\n@@ -160,10 +158,9 @@ fn watch_root(woker: &WatcherCtx, root: VfsRoot, config: Arc<RootConfig>) {\n     log::debug!(\"... loaded {}\", config.root.as_path().display());\n }\n \n-#[derive(Clone)]\n struct WatcherCtx {\n     roots: Arc<Roots>,\n-    watcher: Arc<Mutex<Option<RecommendedWatcher>>>,\n+    watcher: Option<RecommendedWatcher>,\n     sender: Sender<TaskResult>,\n }\n \n@@ -198,7 +195,7 @@ fn convert_notify_event(event: DebouncedEvent, sender: &Sender<(PathBuf, ChangeK\n }\n \n impl WatcherCtx {\n-    fn handle_change(&self, path: PathBuf, kind: ChangeKind) -> Result<()> {\n+    fn handle_change(&mut self, path: PathBuf, kind: ChangeKind) -> Result<()> {\n         let (root, rel_path) = match self.roots.find(&path) {\n             None => return Ok(()),\n             Some(it) => it,\n@@ -208,8 +205,7 @@ impl WatcherCtx {\n             ChangeKind::Create => {\n                 let mut paths = Vec::new();\n                 if path.is_dir() {\n-                    let mut guard = self.watcher.lock();\n-                    paths.extend(watch_recursive(guard.as_mut(), &path, &config));\n+                    paths.extend(watch_recursive(self.watcher.as_mut(), &path, &config));\n                 } else {\n                     paths.push(rel_path);\n                 }"}]}