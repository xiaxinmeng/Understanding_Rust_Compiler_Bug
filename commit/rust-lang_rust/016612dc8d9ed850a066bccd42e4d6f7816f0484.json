{"sha": "016612dc8d9ed850a066bccd42e4d6f7816f0484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjYxMmRjOGQ5ZWQ4NTBhMDY2YmNjZDQyZTRkNmY3ODE2ZjA0ODQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-02T02:03:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T02:03:15Z"}, "message": "Rollup merge of #86183 - inquisitivecrystal:env-nul, r=m-ou-se\n\nChange environment variable getters to error recoverably\n\nThis PR changes the standard library environment variable getter functions to error recoverably (i.e. not panic) when given an invalid value.\n\nOn some platforms, it is invalid for environment variable names to contain `'\\0'` or `'='`, or for their values to contain `'\\0'`. Currently, the standard library panics when manipulating environment variables with names or values that violate these invariants. However, this behavior doesn't make a lot of sense, at least in the case of getters. If the environment variable is missing, the standard library just returns an error value, rather than panicking. It doesn't make sense to treat the case where the variable is invalid any differently from that. See the [internals thread](https://internals.rust-lang.org/t/why-should-std-var-panic/14847) for discussion. Thus, this PR changes the functions to error recoverably in this case as well.\n\nIf desired, I could change the functions that manipulate environment variables in other ways as well. I didn't do that here because it wasn't entirely clear what to change them to. Should they error silently or do something else? If someone tells me how to change them, I'm happy to implement the changes.\n\nThis fixes #86082, an ICE that arises from the current behavior. It also adds a regression test to make sure the ICE does not occur again in the future.\n\n`@rustbot` label +T-libs\nr? `@joshtriplett`", "tree": {"sha": "08d1f558348766f1b2f5a8715a80a2b0938de95b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d1f558348766f1b2f5a8715a80a2b0938de95b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016612dc8d9ed850a066bccd42e4d6f7816f0484", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB1JkCRBK7hj4Ov3rIwAAm88IAJGGF3dsl9633RpVwJuOAoIY\nfmhfrAagua1GMN/VgmIdvWSb2TXPvGz0dOosYGwKQffJVwMdx+NPkt14J4YjAPY5\nQIC5ofdS5vbVBB8rCKBRByLbfvQnF003BiSo1Xid5Unt0GIu+gSntfA5YLIdVLEj\nvAmnIy0s+S1nGCNyv0neWuzFqgHKOi/13bPJ9rDadr3EgiskQuLEbdIMEZ8izdKs\nXigKwEikaOqUy1LNSGWDbNzYZY8DZhi8Ja/ErSGoLNQ3wsWNPu0kimUMso3uQu1g\nodfVOG6dTHSe8Pqp4BUiWOi4S5vvYhUUVcSCTo7p6tyvYnHZ3KGTBZPi50euxZ0=\n=halD\n-----END PGP SIGNATURE-----\n", "payload": "tree 08d1f558348766f1b2f5a8715a80a2b0938de95b\nparent cd5a90fb14bb8cb2276d9740925c9858ea507429\nparent d9752c7d843f3f93ed7f570b072aec8eb5127a96\nauthor Yuki Okushi <jtitor@2k36.org> 1627869795 +0900\ncommitter GitHub <noreply@github.com> 1627869795 +0900\n\nRollup merge of #86183 - inquisitivecrystal:env-nul, r=m-ou-se\n\nChange environment variable getters to error recoverably\n\nThis PR changes the standard library environment variable getter functions to error recoverably (i.e. not panic) when given an invalid value.\n\nOn some platforms, it is invalid for environment variable names to contain `'\\0'` or `'='`, or for their values to contain `'\\0'`. Currently, the standard library panics when manipulating environment variables with names or values that violate these invariants. However, this behavior doesn't make a lot of sense, at least in the case of getters. If the environment variable is missing, the standard library just returns an error value, rather than panicking. It doesn't make sense to treat the case where the variable is invalid any differently from that. See the [internals thread](https://internals.rust-lang.org/t/why-should-std-var-panic/14847) for discussion. Thus, this PR changes the functions to error recoverably in this case as well.\n\nIf desired, I could change the functions that manipulate environment variables in other ways as well. I didn't do that here because it wasn't entirely clear what to change them to. Should they error silently or do something else? If someone tells me how to change them, I'm happy to implement the changes.\n\nThis fixes #86082, an ICE that arises from the current behavior. It also adds a regression test to make sure the ICE does not occur again in the future.\n\n`@rustbot` label +T-libs\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016612dc8d9ed850a066bccd42e4d6f7816f0484", "html_url": "https://github.com/rust-lang/rust/commit/016612dc8d9ed850a066bccd42e4d6f7816f0484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016612dc8d9ed850a066bccd42e4d6f7816f0484/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5a90fb14bb8cb2276d9740925c9858ea507429", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5a90fb14bb8cb2276d9740925c9858ea507429", "html_url": "https://github.com/rust-lang/rust/commit/cd5a90fb14bb8cb2276d9740925c9858ea507429"}, {"sha": "d9752c7d843f3f93ed7f570b072aec8eb5127a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9752c7d843f3f93ed7f570b072aec8eb5127a96", "html_url": "https://github.com/rust-lang/rust/commit/d9752c7d843f3f93ed7f570b072aec8eb5127a96"}], "stats": {"total": 90, "additions": 38, "deletions": 52}, "files": [{"sha": "f9f14d0dc63b468b691e58334d962857c2d0cbad", "filename": "library/std/src/env.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -185,15 +185,9 @@ impl fmt::Debug for VarsOs {\n ///\n /// # Errors\n ///\n-/// Errors if the environment variable is not present.\n-/// Errors if the environment variable is not valid Unicode. If this is not desired, consider using\n-/// [`var_os`].\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// Returns `[None]` if the environment variable isn't set.\n+/// Returns `[None]` if the environment variable is not valid Unicode. If this is not\n+/// desired, consider using [`var_os`].\n ///\n /// # Examples\n ///\n@@ -219,18 +213,17 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// [`None`] if the variable isn't set.\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// [`None`] if the variable isn't set or there's another error.\n ///\n /// Note that the method will not check if the environment variable\n /// is valid Unicode. If you want to have an error on invalid UTF-8,\n /// use the [`var`] function instead.\n ///\n+/// # Errors\n+///\n+/// Returns `[None]` if the variable isn't set.\n+/// May return `[None]` if the variable value contains the NUL character.\n+///\n /// # Examples\n ///\n /// ```\n@@ -249,7 +242,6 @@ pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n \n fn _var_os(key: &OsStr) -> Option<OsString> {\n     os_imp::getenv(key)\n-        .unwrap_or_else(|e| panic!(\"failed to get environment variable `{:?}`: {}\", key, e))\n }\n \n /// The error type for operations interacting with environment variables."}, {"sha": "8f927df85be5df754cfc041cdb693d5d7cd5b966", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -140,13 +140,8 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    unsafe {\n-        match ENV.as_ref().unwrap().lock().unwrap().get_mut(k) {\n-            Some(value) => Ok(Some(value.clone())),\n-            None => Ok(None),\n-        }\n-    }\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    unsafe { ENV.as_ref().unwrap().lock().unwrap().get_mut(k).cloned() }\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "5f8b8def7c6709522f54bbc7b6b03f9c2bd33e38", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -106,8 +106,8 @@ pub fn env() -> Env {\n     get_env_store().map(|env| clone_to_vec(&env.lock().unwrap())).unwrap_or_default().into_iter()\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned()))\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned())\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "dfbd93c90e626d7ce4db0d03a9856cdacda9f82a", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -532,19 +532,18 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n     // environment variables with a nul byte can't be set, so their value is\n     // always None as well\n-    let k = CString::new(k.as_bytes())?;\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "2886ec1180e54fab37ec126c6e0da7e0ac096092", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -76,8 +76,8 @@ pub fn env() -> Env {\n     panic!(\"not supported on this platform\")\n }\n \n-pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(None)\n+pub fn getenv(_: &OsStr) -> Option<OsString> {\n+    None\n }\n \n pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {"}, {"sha": "c5229a188342a3cb7811060c2998fdce238705f6", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -175,17 +175,16 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = CString::new(k.as_bytes())?;\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "8db97ba50a81fa75a143e3d0ddbc12dd914aaa91", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -253,22 +253,13 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(drop)\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = to_u16s(k)?;\n-    let res = super::fill_utf16_buf(\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = to_u16s(k).ok()?;\n+    super::fill_utf16_buf(\n         |buf, sz| unsafe { c::GetEnvironmentVariableW(k.as_ptr(), buf, sz) },\n         |buf| OsStringExt::from_wide(buf),\n-    );\n-    match res {\n-        Ok(value) => Ok(Some(value)),\n-        Err(e) => {\n-            if e.raw_os_error() == Some(c::ERROR_ENVVAR_NOT_FOUND as i32) {\n-                Ok(None)\n-            } else {\n-                Err(e)\n-            }\n-        }\n-    }\n+    )\n+    .ok()\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "b556b24d6aa6a3d67a503c54a447d7fd976021d2", "filename": "src/test/ui/macros/issue-86082-option-env-invalid-char.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/016612dc8d9ed850a066bccd42e4d6f7816f0484/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016612dc8d9ed850a066bccd42e4d6f7816f0484/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs?ref=016612dc8d9ed850a066bccd42e4d6f7816f0484", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+//\n+// Regression test for issue #86082\n+//\n+// Checks that option_env! does not panic on receiving an invalid\n+// environment variable name.\n+\n+fn main() {\n+    option_env!(\"\\0=\");\n+}"}]}