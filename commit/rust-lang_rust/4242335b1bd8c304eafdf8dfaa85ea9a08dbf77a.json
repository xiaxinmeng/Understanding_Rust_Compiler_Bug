{"sha": "4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a", "node_id": "C_kwDOAAsO6NoAKDQyNDIzMzViMWJkOGMzMDRlYWZkZjhkZmFhODVlYTlhMDhkYmY3N2E", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-03-25T03:56:33Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-04-02T17:48:24Z"}, "message": "Additional `*mut [T]` methods\n\nSplit out from #94247\n\nThis adds the following methods to raw slices that already exist on regular slices\n\n* `*mut [T]::is_empty`\n* `*mut [T]::split_at_mut`\n* `*mut [T]::split_at_unchecked`\n\nThese methods reduce the amount of unsafe code needed to migrate ChunksMut and related iterators\nto raw slices (#94247)\n\nCo-authored-by:: The 8472 <git@infinite-source.de>", "tree": {"sha": "773636285fac3d21d18871ad57a9719d00d590c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773636285fac3d21d18871ad57a9719d00d590c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a", "html_url": "https://github.com/rust-lang/rust/commit/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a461ad52b8485b184397b453b5436c70f9f460", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a461ad52b8485b184397b453b5436c70f9f460", "html_url": "https://github.com/rust-lang/rust/commit/07a461ad52b8485b184397b453b5436c70f9f460"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "66e7ac0d3c4622a1d1065ab676f958d497d8b77c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=4242335b1bd8c304eafdf8dfaa85ea9a08dbf77a", "patch": "@@ -1338,6 +1338,111 @@ impl<T> *mut [T] {\n         metadata(self)\n     }\n \n+    /// Returns `true` if the raw slice has a length of 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// let mut a = [1, 2, 3];\n+    /// let ptr = &mut a as *mut [_];\n+    /// assert!(!ptr.is_empty());\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    pub const fn is_empty(self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    /// Divides one mutable raw slice into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `mid > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(raw_slice_split)]\n+    /// #![feature(slice_ptr_get)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// let ptr = &mut v as *mut [_];\n+    /// let (left, right) = ptr.split_at_mut(2);\n+    /// unsafe {\n+    ///     assert_eq!(&*left, [1, 0]);\n+    ///     assert_eq!(&*right, [3, 0, 5, 6]);\n+    /// }\n+    /// ```\n+    #[inline(always)]\n+    #[track_caller]\n+    #[unstable(feature = \"raw_slice_split\", issue = \"71146\")]\n+    pub fn split_at_mut(self, mid: usize) -> (*mut [T], *mut [T]) {\n+        assert!(mid <= self.len());\n+        // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which\n+        // fulfills the requirements of `from_raw_parts_mut`.\n+        unsafe { self.split_at_mut_unchecked(mid) }\n+    }\n+\n+    /// Divides one mutable raw slice into two at an index, without doing bounds checking.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// For a safe alternative see [`split_at_mut`].\n+    ///\n+    /// [`split_at_mut`]: #method.split_at_mut\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used. The caller has to ensure that\n+    /// `0 <= mid <= self.len()`.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(raw_slice_split)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// // scoped to restrict the lifetime of the borrows\n+    /// unsafe {\n+    ///     let ptr = &mut v as *mut [_];\n+    ///     let (left, right) = ptr.split_at_mut_unchecked(2);\n+    ///     assert_eq!(&*left, [1, 0]);\n+    ///     assert_eq!(&*right, [3, 0, 5, 6]);\n+    ///     (&mut *left)[1] = 2;\n+    ///     (&mut *right)[1] = 4;\n+    /// }\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"raw_slice_split\", issue = \"71146\")]\n+    pub unsafe fn split_at_mut_unchecked(self, mid: usize) -> (*mut [T], *mut [T]) {\n+        let len = self.len();\n+        let ptr = self.as_mut_ptr();\n+\n+        // SAFETY: Caller has to check that `0 <= mid <= self.len()`.\n+        //\n+        // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference\n+        // is fine.\n+        unsafe {\n+            (\n+                crate::ptr::slice_from_raw_parts_mut(ptr, mid),\n+                crate::ptr::slice_from_raw_parts_mut(ptr.add(mid), len - mid),\n+            )\n+        }\n+    }\n+\n     /// Returns a raw pointer to the slice's buffer.\n     ///\n     /// This is equivalent to casting `self` to `*mut T`, but more type-safe."}]}