{"sha": "14b83de047595a27c4ad8dadb99a42a1b5ab0194", "node_id": "C_kwDOAAsO6NoAKDE0YjgzZGUwNDc1OTVhMjdjNGFkOGRhZGI5OWE0MmExYjVhYjAxOTQ", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2021-10-07T22:33:13Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2021-10-25T23:23:01Z"}, "message": "Add LLVM CFI support to the Rust compiler\n\nThis commit adds LLVM Control Flow Integrity (CFI) support to the Rust\ncompiler. It initially provides forward-edge control flow protection for\nRust-compiled code only by aggregating function pointers in groups\nidentified by their number of arguments.\n\nForward-edge control flow protection for C or C++ and Rust -compiled\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\nshare the same virtual address space) will be provided in later work as\npart of this project by defining and using compatible type identifiers\n(see Type metadata in the design document in the tracking issue #89653).\n\nLLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e.,\n-Clto).", "tree": {"sha": "ad1ba35595402d49315fa7a07763964c2f62d1a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1ba35595402d49315fa7a07763964c2f62d1a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b83de047595a27c4ad8dadb99a42a1b5ab0194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b83de047595a27c4ad8dadb99a42a1b5ab0194", "html_url": "https://github.com/rust-lang/rust/commit/14b83de047595a27c4ad8dadb99a42a1b5ab0194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b83de047595a27c4ad8dadb99a42a1b5ab0194/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775b6daf0f4120cf0ba8f8a6475f23e9b6fffd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/775b6daf0f4120cf0ba8f8a6475f23e9b6fffd91", "html_url": "https://github.com/rust-lang/rust/commit/775b6daf0f4120cf0ba8f8a6475f23e9b6fffd91"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "fff2aa6df7c725ab53bcd2a2c9ba5008c15b72e2", "filename": "src/builder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b83de047595a27c4ad8dadb99a42a1b5ab0194/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b83de047595a27c4ad8dadb99a42a1b5ab0194/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=14b83de047595a27c4ad8dadb99a42a1b5ab0194", "patch": "@@ -915,6 +915,16 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_metadata(&mut self, _function: RValue<'gcc>, _typeid: String) {\n+        // Unsupported.\n+    }\n+\n+    fn typeid_metadata(&mut self, _typeid: String) -> RValue<'gcc> {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n+\n     fn store(&mut self, val: RValue<'gcc>, ptr: RValue<'gcc>, align: Align) -> RValue<'gcc> {\n         self.store_with_flags(val, ptr, align, MemFlags::empty())\n     }"}, {"sha": "64bd586662d385a863a45b0bd555d340cda24721", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14b83de047595a27c4ad8dadb99a42a1b5ab0194/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b83de047595a27c4ad8dadb99a42a1b5ab0194/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=14b83de047595a27c4ad8dadb99a42a1b5ab0194", "patch": "@@ -367,6 +367,11 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n+    fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n     fn va_start(&mut self, _va_list: RValue<'gcc>) -> RValue<'gcc> {\n         unimplemented!();\n     }"}]}