{"sha": "91da29f8325021c7b512f9c07589d6c64c301150", "node_id": "C_kwDOAAsO6NoAKDkxZGEyOWY4MzI1MDIxYzdiNTEyZjljMDc1ODlkNmM2NGMzMDExNTA", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-09-28T18:00:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-28T18:00:13Z"}, "message": "Rollup merge of #89212 - Sl1mb0:xpy-toolchain-link, r=jyn514\n\nx.py: run `rustup toolchain link` in setup\n\nAddresses #89206\n\nr? ``@jyn514``", "tree": {"sha": "6003ee04fd04ec942990c134a04a834a138bcb3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6003ee04fd04ec942990c134a04a834a138bcb3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91da29f8325021c7b512f9c07589d6c64c301150", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhU1gtCRBK7hj4Ov3rIwAA7cwIAGQU9Tp5b+cgXNWt+OtlT+7r\nWXQzplWN5xFbSySc93KFqSkuNL/BfMJJ5tJ+zHK6LIlgX7dUkyYsbEe1I11IwBS9\n5kyhzqk/k6P2zAAUNoqMNM4FRYaONQ1GsMbjEuybF+dhfa2jKoQHcTPzEFWLs/zk\nxWuG8ghjG2PCjFwevRn/sQ/NcKdMb0d4bZwZ1SPvvmKwtEgdxdw8jpdkZWjBQ34c\nK99K1IsL89PuEjjg09tY5iUsqCpD9BowRonMd7SCOPol0xXcFKmGmAT6HrD3CrPD\nb9olke8mhc++OxtRG4+VWfaV32P9VuhCqUiiLtNwptMiqR1t9CIGezdsLoQx3wg=\n=MeRY\n-----END PGP SIGNATURE-----\n", "payload": "tree 6003ee04fd04ec942990c134a04a834a138bcb3a\nparent 864290472fcb1deee2a4fb09a9df2864ce3bd1a4\nparent adbb608678c618efdc823e3c7a60a0331b9c0156\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1632852013 +0200\ncommitter GitHub <noreply@github.com> 1632852013 +0200\n\nRollup merge of #89212 - Sl1mb0:xpy-toolchain-link, r=jyn514\n\nx.py: run `rustup toolchain link` in setup\n\nAddresses #89206\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91da29f8325021c7b512f9c07589d6c64c301150", "html_url": "https://github.com/rust-lang/rust/commit/91da29f8325021c7b512f9c07589d6c64c301150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91da29f8325021c7b512f9c07589d6c64c301150/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864290472fcb1deee2a4fb09a9df2864ce3bd1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/864290472fcb1deee2a4fb09a9df2864ce3bd1a4", "html_url": "https://github.com/rust-lang/rust/commit/864290472fcb1deee2a4fb09a9df2864ce3bd1a4"}, {"sha": "adbb608678c618efdc823e3c7a60a0331b9c0156", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbb608678c618efdc823e3c7a60a0331b9c0156", "html_url": "https://github.com/rust-lang/rust/commit/adbb608678c618efdc823e3c7a60a0331b9c0156"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "5bc0a505bf6954602f44fb94b872126e09c15467", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/91da29f8325021c7b512f9c07589d6c64c301150/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91da29f8325021c7b512f9c07589d6c64c301150/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=91da29f8325021c7b512f9c07589d6c64c301150", "patch": "@@ -1,3 +1,4 @@\n+use crate::TargetSelection;\n use crate::{t, VERSION};\n use std::fmt::Write as _;\n use std::path::{Path, PathBuf};\n@@ -107,6 +108,17 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     let include_path = profile.include_path(src_path);\n     println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n+    let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+    let stage_path = [\"build\", build.rustc_target_arg(), \"stage1\"].join(\"/\");\n+\n+    println!();\n+\n+    if !rustup_installed() && profile != Profile::User {\n+        println!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n+    } else if stage_dir_exists(&stage_path[..]) {\n+        attempt_toolchain_link(&stage_path[..]);\n+    }\n+\n     let suggestions = match profile {\n         Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n         Profile::Tools => &[\n@@ -139,6 +151,74 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     }\n }\n \n+fn rustup_installed() -> bool {\n+    Command::new(\"rustup\")\n+        .arg(\"--version\")\n+        .stdout(std::process::Stdio::null())\n+        .output()\n+        .map_or(false, |output| output.status.success())\n+}\n+\n+fn stage_dir_exists(stage_path: &str) -> bool {\n+    match fs::create_dir(&stage_path[..]) {\n+        Ok(_) => true,\n+        Err(_) => Path::new(&stage_path[..]).exists(),\n+    }\n+}\n+\n+fn attempt_toolchain_link(stage_path: &str) {\n+    if toolchain_is_linked() {\n+        return;\n+    }\n+\n+    if try_link_toolchain(&stage_path[..]) {\n+        println!(\n+            \"Added `stage1` rustup toolchain; try `cargo +stage1 build` on a separate rust project to run a newly-built toolchain\"\n+        );\n+    } else {\n+        println!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n+        println!(\n+            \"To manually link stage 1 build to `stage1` toolchain, run:\\n\n+            `rustup toolchain link stage1 {}`\",\n+            &stage_path[..]\n+        );\n+    }\n+}\n+\n+fn toolchain_is_linked() -> bool {\n+    match Command::new(\"rustup\")\n+        .args(&[\"toolchain\", \"list\"])\n+        .stdout(std::process::Stdio::piped())\n+        .output()\n+    {\n+        Ok(toolchain_list) => {\n+            if !String::from_utf8_lossy(&toolchain_list.stdout).contains(\"stage1\") {\n+                return false;\n+            }\n+            // The toolchain has already been linked.\n+            println!(\n+                \"`stage1` toolchain already linked; not attempting to link `stage1` toolchain\"\n+            );\n+        }\n+        Err(_) => {\n+            // In this case, we don't know if the `stage1` toolchain has been linked;\n+            // but `rustup` failed, so let's not go any further.\n+            println!(\n+                \"`rustup` failed to list current toolchains; not attempting to link `stage1` toolchain\"\n+            );\n+        }\n+    }\n+    true\n+}\n+\n+fn try_link_toolchain(stage_path: &str) -> bool {\n+    Command::new(\"rustup\")\n+        .stdout(std::process::Stdio::null())\n+        .args(&[\"toolchain\", \"link\", \"stage1\", &stage_path[..]])\n+        .output()\n+        .map_or(false, |output| output.status.success())\n+}\n+\n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n     fn abbrev_all() -> impl Iterator<Item = ((String, String), Profile)> {"}]}