{"sha": "1833036daf6d2278df99f7b66aca24b2a66d8d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzMwMzZkYWY2ZDIyNzhkZjk5ZjdiNjZhY2EyNGIyYTY2ZDhkMmE=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-27T01:32:46Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-30T08:10:24Z"}, "message": "Fix doc attr parsing, fixes links from std/core/alloc", "tree": {"sha": "62cfbcf7d8539860f8118a5c35605a63a39d136d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62cfbcf7d8539860f8118a5c35605a63a39d136d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1833036daf6d2278df99f7b66aca24b2a66d8d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1833036daf6d2278df99f7b66aca24b2a66d8d2a", "html_url": "https://github.com/rust-lang/rust/commit/1833036daf6d2278df99f7b66aca24b2a66d8d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1833036daf6d2278df99f7b66aca24b2a66d8d2a/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f98e311617f66654b7799a966fc16b272438ed00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f98e311617f66654b7799a966fc16b272438ed00", "html_url": "https://github.com/rust-lang/rust/commit/f98e311617f66654b7799a966fc16b272438ed00"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "8c972bb418bb7cbcfa5be0766f3edebbcc2b1a31", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1833036daf6d2278df99f7b66aca24b2a66d8d2a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1833036daf6d2278df99f7b66aca24b2a66d8d2a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=1833036daf6d2278df99f7b66aca24b2a66d8d2a", "patch": "@@ -19,7 +19,7 @@ use ra_ide_db::{\n use ra_syntax::{\n     ast, ast::Path, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, TokenAtOffset,\n };\n-use ra_tt::{Ident, Leaf, Literal, Punct, TokenTree};\n+use ra_tt::{Ident, Leaf, Literal, TokenTree};\n use url::Url;\n \n use crate::{\n@@ -410,6 +410,8 @@ fn map_links<'e>(\n         }\n         Event::Text(s) if in_link => {\n             link_text = s.clone();\n+            // TODO: This can unintentionally strip words from path-based links.\n+            // See std::box::Box -> std::box link as an example.\n             Event::Text(CowStr::Boxed(strip_prefixes_suffixes(&s).into()))\n         }\n         Event::Code(s) if in_link => {\n@@ -603,29 +605,33 @@ fn try_resolve_path(db: &RootDatabase, definition: &Definition, link: &str) -> O\n }\n \n /// Try to get the root URL of the documentation of a crate.\n-// FIXME: Special case standard, core, alloc libraries\n fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n     // Look for #![doc(html_root_url = \"...\")]\n     let attrs = db.attrs(AttrDef::from(krate.root_module(db)?).into());\n     let doc_attr_q = attrs.by_key(\"doc\");\n+\n+    // TODO: Tests for this parsing\n     let doc_url = if doc_attr_q.exists() {\n-        doc_attr_q.tt_values().filter_map(|tt| match tt.token_trees.as_slice() {\n-            &[\n-                TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident_text, ..})),\n-                TokenTree::Leaf(Leaf::Punct(Punct{r#char: '=', ..})),\n-                TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))\n-            ] if ident_text == \"html_root_url\" => Some(text.to_string()),\n-            _ => {\n-                None\n-            }\n-        }).next()\n+        doc_attr_q.tt_values().map(|tt| {\n+            let name = tt.token_trees.iter()\n+                .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident, ..})) if ident == \"html_root_url\"))\n+                .skip(2)\n+                .next();\n+\n+            match name {\n+                Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n+                _ => None\n+            }\n+        }).flat_map(|t| t).next().map(|s| s.to_string())\n     } else {\n         // Fallback to docs.rs\n         // FIXME: Specify an exact version here (from Cargo.lock)\n         Some(format!(\"https://docs.rs/{}/*\", krate.display_name(db)?))\n     };\n \n-    doc_url.map(|s| s.trim_matches('\"').to_owned() + \"/\").and_then(|s| Url::parse(&s).ok())\n+    doc_url\n+        .map(|s| s.trim_matches('\"').trim_end_matches(\"/\").to_owned() + \"/\")\n+        .and_then(|s| Url::parse(&s).ok())\n }\n \n /// Get the filename and extension generated for a symbol by rustdoc."}]}