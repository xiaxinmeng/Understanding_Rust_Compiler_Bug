{"sha": "7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODFjZjYyZTNkN2U1ZGVkYjRiZmY0NTVjZDRmZThmNzM0MGQ0MjI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T20:35:27Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T20:59:15Z"}, "message": "dlist: Simplify by using Option::{map, map_mut}\n\nThese methods were fixed or just added so they can now be used.", "tree": {"sha": "95d39ea476e2aba00c9dd478fca0f2ef89f2a390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d39ea476e2aba00c9dd478fca0f2ef89f2a390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "html_url": "https://github.com/rust-lang/rust/commit/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422/comments", "author": null, "committer": null, "parents": [{"sha": "9ccf443088c56bab91369c6633cfeb39de66d6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccf443088c56bab91369c6633cfeb39de66d6de", "html_url": "https://github.com/rust-lang/rust/commit/9ccf443088c56bab91369c6633cfeb39de66d6de"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "1731de2691e36fa8e2c3da22540ba21f604ee8af", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "patch": "@@ -122,31 +122,22 @@ impl<T> Mutable for DList<T> {\n impl<T> Deque<T> for DList<T> {\n     /// Provide a reference to the front element, or None if the list is empty\n     fn front<'a>(&'a self) -> Option<&'a T> {\n-        self.list_head.chain_ref(|x| Some(&x.value))\n+        self.list_head.map(|head| &head.value)\n     }\n \n     /// Provide a mutable reference to the front element, or None if the list is empty\n     fn front_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n-        match self.list_head {\n-            None => None,\n-            Some(ref mut head) => Some(&mut head.value),\n-        }\n+        self.list_head.map_mut(|head| &mut head.value)\n     }\n \n     /// Provide a reference to the back element, or None if the list is empty\n     fn back<'a>(&'a self) -> Option<&'a T> {\n-        match self.list_tail.resolve_immut() {\n-            None => None,\n-            Some(tail) => Some(&tail.value),\n-        }\n+        self.list_tail.resolve_immut().map(|tail| &tail.value)\n     }\n \n     /// Provide a mutable reference to the back element, or None if the list is empty\n     fn back_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n-        match self.list_tail.resolve() {\n-            None => None,\n-            Some(tail) => Some(&mut tail.value),\n-        }\n+        self.list_tail.resolve().map_mut(|tail| &mut tail.value)\n     }\n \n     /// Add an element last in the list"}]}