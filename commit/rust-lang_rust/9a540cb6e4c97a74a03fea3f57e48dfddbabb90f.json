{"sha": "9a540cb6e4c97a74a03fea3f57e48dfddbabb90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTQwY2I2ZTRjOTdhNzRhMDNmZWEzZjU3ZTQ4ZGZkZGJhYmI5MGY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-25T21:06:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T21:06:22Z"}, "message": "Rollup merge of #82468 - osa1:pick_by_value_method_docs, r=petrochenkov\n\nMove pick_by_value_method docs above function header\n\n- Currently style triggers #81183 so we can't add `#[instrument]` to\n  this function.\n\n- Having docs above the header is more consistent with the rest of the\n  code base.", "tree": {"sha": "e8136ba549c0c1ac9c0916827fa08cda6d96fd3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8136ba549c0c1ac9c0916827fa08cda6d96fd3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOBFOCRBK7hj4Ov3rIwAAdHIIAE6ULw9K67D34JnTSpDfc2tu\n7krhsEzzPoFAezIY2rT5grxed8LorXIGtbPSeDy+YBB+KPnt9c+XEKdEY2Npj/aJ\nAJMNI04yFniZYC8Mk8ulHIZuDTuh7z/wC31mdO+9yEqivVGh0Xq7j7HJ0c5fIGZK\nHvEjgmF1ERI7fIxeowSMEFyNNNBU7qs3yDsXuoXstwZMeN1GS3Q3dgWcsOgvXdxk\nRi60x8ihaQlFm+oSxkFA3d0yzArgLyU/lMrb0+BQj5+1OziPqbGSmERyVAhqyamx\npvU843ZNVRHd17u+t/+AcW2ojyF0MBDwbM+/Ot7m7y0hiTKr4Ma5tAL2hLyd1lk=\n=Qos/\n-----END PGP SIGNATURE-----\n", "payload": "tree e8136ba549c0c1ac9c0916827fa08cda6d96fd3f\nparent befa2dffdafe77fdd344690558f1334e721b42db\nparent 9c5f684e83018f990d067ea44d5204ca3762b722\nauthor Aaron Hill <aa1ronham@gmail.com> 1614287182 -0500\ncommitter GitHub <noreply@github.com> 1614287182 -0500\n\nRollup merge of #82468 - osa1:pick_by_value_method_docs, r=petrochenkov\n\nMove pick_by_value_method docs above function header\n\n- Currently style triggers #81183 so we can't add `#[instrument]` to\n  this function.\n\n- Having docs above the header is more consistent with the rest of the\n  code base.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f", "html_url": "https://github.com/rust-lang/rust/commit/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "befa2dffdafe77fdd344690558f1334e721b42db", "url": "https://api.github.com/repos/rust-lang/rust/commits/befa2dffdafe77fdd344690558f1334e721b42db", "html_url": "https://github.com/rust-lang/rust/commit/befa2dffdafe77fdd344690558f1334e721b42db"}, {"sha": "9c5f684e83018f990d067ea44d5204ca3762b722", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5f684e83018f990d067ea44d5204ca3762b722", "html_url": "https://github.com/rust-lang/rust/commit/9c5f684e83018f990d067ea44d5204ca3762b722"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "c25aec5b2b7e9bdd2c35813337b33185f738e577", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a540cb6e4c97a74a03fea3f57e48dfddbabb90f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=9a540cb6e4c97a74a03fea3f57e48dfddbabb90f", "patch": "@@ -160,21 +160,21 @@ pub struct Pick<'tcx> {\n     pub kind: PickKind<'tcx>,\n     pub import_ids: SmallVec<[LocalDefId; 1]>,\n \n-    // Indicates that the source expression should be autoderef'd N times\n-    //\n-    // A = expr | *expr | **expr | ...\n+    /// Indicates that the source expression should be autoderef'd N times\n+    ///\n+    ///     A = expr | *expr | **expr | ...\n     pub autoderefs: usize,\n \n-    // Indicates that an autoref is applied after the optional autoderefs\n-    //\n-    // B = A | &A | &mut A\n+    /// Indicates that an autoref is applied after the optional autoderefs\n+    ///\n+    ///     B = A | &A | &mut A\n     pub autoref: Option<hir::Mutability>,\n \n-    // Indicates that the source expression should be \"unsized\" to a\n-    // target type. This should probably eventually go away in favor\n-    // of just coercing method receivers.\n-    //\n-    // C = B | unsize(B)\n+    /// Indicates that the source expression should be \"unsized\" to a\n+    /// target type. This should probably eventually go away in favor\n+    /// of just coercing method receivers.\n+    ///\n+    ///     C = B | unsize(B)\n     pub unsize: Option<Ty<'tcx>>,\n }\n \n@@ -1091,19 +1091,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             .next()\n     }\n \n+    /// For each type `T` in the step list, this attempts to find a method where\n+    /// the (transformed) self type is exactly `T`. We do however do one\n+    /// transformation on the adjustment: if we are passing a region pointer in,\n+    /// we will potentially *reborrow* it to a shorter lifetime. This allows us\n+    /// to transparently pass `&mut` pointers, in particular, without consuming\n+    /// them for their entire lifetime.\n     fn pick_by_value_method(\n         &mut self,\n         step: &CandidateStep<'tcx>,\n         self_ty: Ty<'tcx>,\n     ) -> Option<PickResult<'tcx>> {\n-        //! For each type `T` in the step list, this attempts to find a\n-        //! method where the (transformed) self type is exactly `T`. We\n-        //! do however do one transformation on the adjustment: if we\n-        //! are passing a region pointer in, we will potentially\n-        //! *reborrow* it to a shorter lifetime. This allows us to\n-        //! transparently pass `&mut` pointers, in particular, without\n-        //! consuming them for their entire lifetime.\n-\n         if step.unsize {\n             return None;\n         }"}]}