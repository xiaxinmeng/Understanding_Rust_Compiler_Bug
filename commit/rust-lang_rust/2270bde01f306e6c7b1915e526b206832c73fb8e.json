{"sha": "2270bde01f306e6c7b1915e526b206832c73fb8e", "node_id": "C_kwDOAAsO6NoAKDIyNzBiZGUwMWYzMDZlNmM3YjE5MTVlNTI2YjIwNjgzMmM3M2ZiOGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T06:13:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T06:13:05Z"}, "message": "Rollup merge of #109495 - compiler-errors:new-solver-destruct, r=eholk,lcnr\n\nImplement non-const `Destruct` trait in new solver\n\nMakes it so that we can call stdlib methods like `Option::map` in **non-const** environments, since *many* stdlib methods have `Destruct` bounds \ud83d\ude05\n\nThis doesn't bother to implement `const Destruct` yet, but it shouldn't be too hard to do so. Just didn't bother since we already don't have much support for const traits in the new solver anyways. I'd be happy to add skeleton support for `const Destruct`, though, if the reviewer desires.", "tree": {"sha": "d08b43dce9e9e3465066481ab1e333a2dc072f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08b43dce9e9e3465066481ab1e333a2dc072f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2270bde01f306e6c7b1915e526b206832c73fb8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHT9xCRBK7hj4Ov3rIwAAnTIIAHmnP5mmBEg33U9H9cd8pTS4\nEZwNzCePI8hIdAUhP5rtPvr5MYMZ6kPgAr+c+0kq/dWi4Zlz4DYOhxgn7OYLDFd4\n6lWjI61cWmYwqT3qopBV2bgrMi327UA9ujZjOlmrRB4fR+uSW8wVaASI4qM0A6oD\nx+T7AWu8XSGvxbU59PBPRiG7D6ZhtL5BJKU6YgPU68XjCUehIRwGbXlw6xNm62iI\nL41P/uYCSYeI51RzG3KpFdXC4y2M0z71EJFoQHnnQoYI72dHleSMyJphg5xZkggj\nvk5GH/3UuWZxD1OEOXmBDDei1NnpRaAlIjrHH3vJKs2JIUH3GnbSJsdUfaMRxGM=\n=iEx5\n-----END PGP SIGNATURE-----\n", "payload": "tree d08b43dce9e9e3465066481ab1e333a2dc072f1e\nparent 98254c5cc7828370eeec18e2646d70846a826b5a\nparent 8390c61690186ddc45f97684732c8d3b6458cc44\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679638385 +0100\ncommitter GitHub <noreply@github.com> 1679638385 +0100\n\nRollup merge of #109495 - compiler-errors:new-solver-destruct, r=eholk,lcnr\n\nImplement non-const `Destruct` trait in new solver\n\nMakes it so that we can call stdlib methods like `Option::map` in **non-const** environments, since *many* stdlib methods have `Destruct` bounds \ud83d\ude05\n\nThis doesn't bother to implement `const Destruct` yet, but it shouldn't be too hard to do so. Just didn't bother since we already don't have much support for const traits in the new solver anyways. I'd be happy to add skeleton support for `const Destruct`, though, if the reviewer desires.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2270bde01f306e6c7b1915e526b206832c73fb8e", "html_url": "https://github.com/rust-lang/rust/commit/2270bde01f306e6c7b1915e526b206832c73fb8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2270bde01f306e6c7b1915e526b206832c73fb8e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98254c5cc7828370eeec18e2646d70846a826b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98254c5cc7828370eeec18e2646d70846a826b5a", "html_url": "https://github.com/rust-lang/rust/commit/98254c5cc7828370eeec18e2646d70846a826b5a"}, {"sha": "8390c61690186ddc45f97684732c8d3b6458cc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/8390c61690186ddc45f97684732c8d3b6458cc44", "html_url": "https://github.com/rust-lang/rust/commit/8390c61690186ddc45f97684732c8d3b6458cc44"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "995fec78c40763165388c7a0da5804eae05678e6", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=2270bde01f306e6c7b1915e526b206832c73fb8e", "patch": "@@ -212,6 +212,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<TyCtxt<'tcx>> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_destruct_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -340,6 +345,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_unsize_candidate(self, goal)\n         } else if lang_items.discriminant_kind_trait() == Some(trait_def_id) {\n             G::consider_builtin_discriminant_kind_candidate(self, goal)\n+        } else if lang_items.destruct_trait() == Some(trait_def_id) {\n+            G::consider_builtin_destruct_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "525b3105538d0311e3dcc01705f204db15115d08", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2270bde01f306e6c7b1915e526b206832c73fb8e", "patch": "@@ -487,6 +487,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }\n+\n+    fn consider_builtin_destruct_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`Destruct` does not have an associated type: {:?}\", goal);\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "ade45d199f05245bae67ce22f46e47ea3b988455", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270bde01f306e6c7b1915e526b206832c73fb8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=2270bde01f306e6c7b1915e526b206832c73fb8e", "patch": "@@ -534,6 +534,20 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         // `DiscriminantKind` is automatically implemented for every type.\n         ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n     }\n+\n+    fn consider_builtin_destruct_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        if !goal.param_env.is_const() {\n+            // `Destruct` is automatically implemented for every type in\n+            // non-const environments.\n+            ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+        } else {\n+            // FIXME(-Ztrait-solver=next): Implement this when we get const working in the new solver\n+            Err(NoSolution)\n+        }\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "4b013983a4a84fa3f951395058478ba3878024ff", "filename": "tests/ui/traits/new-solver/canonical-int-var-eq-in-response.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2270bde01f306e6c7b1915e526b206832c73fb8e/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270bde01f306e6c7b1915e526b206832c73fb8e/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs?ref=2270bde01f306e6c7b1915e526b206832c73fb8e", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Ztrait-solver=next\n // check-pass\n \n trait Mirror {"}, {"sha": "30d7777b78aa004bd0893cdbe5134733c4a1b2ce", "filename": "tests/ui/traits/new-solver/destruct.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2270bde01f306e6c7b1915e526b206832c73fb8e/tests%2Fui%2Ftraits%2Fnew-solver%2Fdestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270bde01f306e6c7b1915e526b206832c73fb8e/tests%2Fui%2Ftraits%2Fnew-solver%2Fdestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fdestruct.rs?ref=2270bde01f306e6c7b1915e526b206832c73fb8e", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+\n+fn foo(_: impl std::marker::Destruct) {}\n+\n+struct MyAdt;\n+\n+fn main() {\n+    foo(1);\n+    foo(MyAdt);\n+}"}]}