{"sha": "318c5d6c963d0e5d8ece89e804b4e696c6011955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOGM1ZDZjOTYzZDBlNWQ4ZWNlODllODA0YjRlNjk2YzYwMTE5NTU=", "commit": {"author": {"name": "Stephane Raux", "email": "stephaneyfx@gmail.com", "date": "2019-07-09T04:34:36Z"}, "committer": {"name": "Stephane Raux", "email": "stephaneyfx@gmail.com", "date": "2019-07-10T03:40:16Z"}, "message": "Clarify `Box<T>` representation and its use in FFI\n\nThis officializes what was only shown as a code example in [the unsafe code guidelines](https://rust-lang.github.io/unsafe-code-guidelines/layout/function-pointers.html?highlight=box#use) and follows [the discussion](https://github.com/rust-lang/unsafe-code-guidelines/issues/157) in the corresponding repository.\n\nIt is also related to [the issue](https://github.com/rust-lang/rust/issues/52976) regarding marking `Box<T>` `#[repr(transparent)]`.", "tree": {"sha": "966d9f3394e165178e25c4390deb6c538ae0e9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966d9f3394e165178e25c4390deb6c538ae0e9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/318c5d6c963d0e5d8ece89e804b4e696c6011955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/318c5d6c963d0e5d8ece89e804b4e696c6011955", "html_url": "https://github.com/rust-lang/rust/commit/318c5d6c963d0e5d8ece89e804b4e696c6011955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/318c5d6c963d0e5d8ece89e804b4e696c6011955/comments", "author": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ab31bc64f4ede9f9498440cb4225c173767c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ab31bc64f4ede9f9498440cb4225c173767c1e", "html_url": "https://github.com/rust-lang/rust/commit/09ab31bc64f4ede9f9498440cb4225c173767c1e"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "50174c3f279a238a5f05c53231e3b6841cb8ee45", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/318c5d6c963d0e5d8ece89e804b4e696c6011955/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318c5d6c963d0e5d8ece89e804b4e696c6011955/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=318c5d6c963d0e5d8ece89e804b4e696c6011955", "patch": "@@ -63,6 +63,28 @@\n //! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n //! [`Global`] allocator with `Layout::for_value(&*value)`.\n //!\n+//! `Box<T>` has the same representation as `*mut T`. In particular, when\n+//! `T: Sized`, this means that `Box<T>` has the same representation as\n+//! a C pointer, making the following code valid in FFI:\n+//!\n+//! ```c\n+//! /* C header */\n+//! struct Foo* foo(); /* Returns ownership */\n+//! void bar(struct Foo*); /* `bar` takes ownership */\n+//! ```\n+//!\n+//! ```\n+//! #[repr(C)]\n+//! pub struct Foo;\n+//!\n+//! #[no_mangle]\n+//! pub extern \"C\" fn foo() -> Box<Foo> {\n+//!     Box::new(Foo)\n+//! }\n+//!\n+//! #[no_mangle]\n+//! pub extern \"C\" fn bar(_: Option<Box<Foo>>) {}\n+//! ```\n //!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html"}]}