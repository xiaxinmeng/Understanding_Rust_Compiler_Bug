{"sha": "8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "node_id": "C_kwDOAAsO6NoAKDhiOTNlYjhhOWIzMWZjYWFkZjIyZWEwZmJhY2ZjZWE0NDUwYTU4OTQ", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-02-15T03:26:30Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-02-15T03:26:30Z"}, "message": "add some adjustment regarding review suggestion", "tree": {"sha": "a5f8dcfd04cecf28810ee51550f87aadb1ffeb32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f8dcfd04cecf28810ee51550f87aadb1ffeb32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "html_url": "https://github.com/rust-lang/rust/commit/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e96adedd56993eec0609276124ff17d4866b94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e96adedd56993eec0609276124ff17d4866b94b", "html_url": "https://github.com/rust-lang/rust/commit/8e96adedd56993eec0609276124ff17d4866b94b"}], "stats": {"total": 96, "additions": 61, "deletions": 35}, "files": [{"sha": "f0d7dd23a67860aac6435463120dc0dd6d75b422", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "patch": "@@ -14,6 +14,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{BytePos, Pos};\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -70,33 +71,39 @@ declare_clippy_lint! {\n }\n \n #[derive(PartialEq, Eq, Clone)]\n-enum RetReplacement {\n+enum RetReplacement<'tcx> {\n     Empty,\n     Block,\n     Unit,\n-    IfSequence(String),\n-    Expr(String),\n+    IfSequence(Cow<'tcx, str>, Applicability),\n+    Expr(Cow<'tcx, str>, Applicability),\n }\n \n-impl RetReplacement {\n+impl<'tcx> RetReplacement<'tcx> {\n     fn sugg_help(self) -> &'static str {\n         match self {\n-            Self::Empty | Self::Expr(_) => \"remove `return`\",\n+            Self::Empty | Self::Expr(..) => \"remove `return`\",\n             Self::Block => \"replace `return` with an empty block\",\n             Self::Unit => \"replace `return` with a unit value\",\n-            Self::IfSequence(_) => \"remove `return` and wrap the sequence with parentheses\",\n+            Self::IfSequence(..) => \"remove `return` and wrap the sequence with parentheses\",\n+        }\n+    }\n+    fn applicability(&self) -> Option<Applicability> {\n+        match self {\n+            Self::Expr(_, ap) | Self::IfSequence(_, ap) => Some(*ap),\n+            _ => None,\n         }\n     }\n }\n \n-impl ToString for RetReplacement {\n+impl<'tcx> ToString for RetReplacement<'tcx> {\n     fn to_string(&self) -> String {\n         match self {\n             Self::Empty => String::new(),\n             Self::Block => \"{}\".to_string(),\n             Self::Unit => \"()\".to_string(),\n-            Self::IfSequence(inner) => format!(\"({inner})\"),\n-            Self::Expr(inner) => inner.clone(),\n+            Self::IfSequence(inner, _) => format!(\"({inner})\"),\n+            Self::Expr(inner, _) => inner.to_string(),\n         }\n     }\n }\n@@ -208,7 +215,7 @@ fn check_final_expr<'tcx>(\n     expr: &'tcx Expr<'tcx>,\n     semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n                             * needless return */\n-    replacement: RetReplacement,\n+    replacement: RetReplacement<'tcx>,\n ) {\n     let peeled_drop_expr = expr.peel_drop_temps();\n     match &peeled_drop_expr.kind {\n@@ -229,17 +236,12 @@ fn check_final_expr<'tcx>(\n                     return;\n                 }\n \n-                let (snippet, _) = snippet_with_context(\n-                    cx,\n-                    inner_expr.span,\n-                    ret_span.ctxt(),\n-                    \"..\",\n-                    &mut Applicability::MachineApplicable,\n-                );\n-                if expr_contains_if(inner_expr) {\n-                    RetReplacement::IfSequence(snippet.to_string())\n+                let mut applicability = Applicability::MachineApplicable;\n+                let (snippet, _) = snippet_with_context(cx, inner_expr.span, ret_span.ctxt(), \"..\", &mut applicability);\n+                if expr_contains_conjunctive_ifs(inner_expr) {\n+                    RetReplacement::IfSequence(snippet, applicability)\n                 } else {\n-                    RetReplacement::Expr(snippet.to_string())\n+                    RetReplacement::Expr(snippet, applicability)\n                 }\n             } else {\n                 replacement\n@@ -275,19 +277,23 @@ fn check_final_expr<'tcx>(\n     }\n }\n \n-fn expr_contains_if<'tcx>(expr: &'tcx Expr<'tcx>) -> bool {\n-    match expr.kind {\n-        ExprKind::If(..) => true,\n-        ExprKind::Binary(_, left, right) => expr_contains_if(left) || expr_contains_if(right),\n-        _ => false,\n+fn expr_contains_conjunctive_ifs<'tcx>(expr: &'tcx Expr<'tcx>) -> bool {\n+    fn contains_if(expr: &Expr<'_>, on_if: bool) -> bool {\n+        match expr.kind {\n+            ExprKind::If(..) => on_if,\n+            ExprKind::Binary(_, left, right) => contains_if(left, true) || contains_if(right, true),\n+            _ => false,\n+        }\n     }\n+\n+    contains_if(expr, false)\n }\n \n-fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>, replacement: RetReplacement) {\n+fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>, replacement: RetReplacement<'_>) {\n     if ret_span.from_expansion() {\n         return;\n     }\n-    let applicability = Applicability::MachineApplicable;\n+    let applicability = replacement.applicability().unwrap_or(Applicability::MachineApplicable);\n     let return_replacement = replacement.to_string();\n     let sugg_help = replacement.sugg_help();\n     span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {"}, {"sha": "0f525dd294c9b6e2b8abb3e847836a7f6861f875", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "patch": "@@ -297,8 +297,14 @@ fn issue10051() -> Result<String, String> {\n     }\n }\n \n-fn issue10049(b1: bool, b2: bool, b3: bool) -> u32 {\n-    (if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 })\n+mod issue10049 {\n+    fn single() -> u32 {\n+        if true { 1 } else { 2 }\n+    }\n+\n+    fn multiple(b1: bool, b2: bool, b3: bool) -> u32 {\n+        (if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 })\n+    }\n }\n \n fn main() {}"}, {"sha": "a1db8375d95b9ac0480f407053f298bd4beca105", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "patch": "@@ -307,8 +307,14 @@ fn issue10051() -> Result<String, String> {\n     }\n }\n \n-fn issue10049(b1: bool, b2: bool, b3: bool) -> u32 {\n-    return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+mod issue10049 {\n+    fn single() -> u32 {\n+        return if true { 1 } else { 2 };\n+    }\n+\n+    fn multiple(b1: bool, b2: bool, b3: bool) -> u32 {\n+        return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+    }\n }\n \n fn main() {}"}, {"sha": "87d0cd3e14cfabb315e5ebe2c528d6bc73f5cfa6", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=8b93eb8a9b31fcaadf22ea0fbacfcea4450a5894", "patch": "@@ -419,12 +419,20 @@ LL |         return Err(format!(\"err!\"));\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:311:5\n+  --> $DIR/needless_return.rs:312:9\n    |\n-LL |     return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         return if true { 1 } else { 2 };\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:316:9\n+   |\n+LL |         return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return` and wrap the sequence with parentheses\n \n-error: aborting due to 51 previous errors\n+error: aborting due to 52 previous errors\n "}]}