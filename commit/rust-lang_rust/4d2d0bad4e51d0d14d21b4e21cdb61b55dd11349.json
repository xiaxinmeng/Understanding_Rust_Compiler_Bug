{"sha": "4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMmQwYmFkNGU1MWQwZDE0ZDIxYjRlMjFjZGI2MWI1NWRkMTEzNDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-28T17:15:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-29T20:39:56Z"}, "message": "Remove `compile-fail` test suite", "tree": {"sha": "9803bb601004e2fcb03d00009320067e439535d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9803bb601004e2fcb03d00009320067e439535d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "html_url": "https://github.com/rust-lang/rust/commit/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "html_url": "https://github.com/rust-lang/rust/commit/158f8d034b15e65ba8dc0d066358dd0632bfcd6e"}], "stats": {"total": 712, "additions": 516, "deletions": 196}, "files": [{"sha": "23999a8dca00f4a9b9b22b8bdc3f335631455bfc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -607,7 +607,7 @@ pub struct Crate<'hir> {\n     // over the ids in increasing order. In principle it should not\n     // matter what order we visit things in, but in *practice* it\n     // does, because it can affect the order in which errors are\n-    // detected, which in turn can make compile-fail tests yield\n+    // detected, which in turn can make UI tests yield\n     // slightly different results.\n     pub items: BTreeMap<HirId, Item<'hir>>,\n "}, {"sha": "9b4388c911f1bb036b813e21d084b6ee749594bb", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -12,7 +12,7 @@\n //! In this code, we report errors on each `rustc_if_this_changed`\n //! annotation. If a path exists in all cases, then we would report\n //! \"all path(s) exist\". Otherwise, we report: \"no path to `foo`\" for\n-//! each case where no path exists. `compile-fail` tests can then be\n+//! each case where no path exists. `ui` tests can then be\n //! used to check when paths exist or do not.\n //!\n //! The full form of the `rustc_if_this_changed` annotation is"}, {"sha": "461ee08592275c9eab7dda327d11446640991383", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -889,7 +889,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n     // Avoid overwhelming user with errors if borrow checking failed.\n     // I'm not sure how helpful this is, to be honest, but it avoids a\n-    // lot of annoying errors in the compile-fail tests (basically,\n+    // lot of annoying errors in the ui tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n     if sess.has_errors() {"}, {"sha": "9c49f926d417bb9e5b31656343435db0ba716b30", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> Queries<'tcx> {\n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;\n \n-                // Hook for compile-fail tests.\n+                // Hook for UI tests.\n                 Self::check_for_rustc_errors_attr(tcx);\n \n                 Ok(passes::start_codegen(&***self.codegen_backend(), tcx, &*outputs.peek()))\n@@ -289,7 +289,7 @@ impl<'tcx> Queries<'tcx> {\n     }\n \n     /// Check for the `#[rustc_error]` annotation, which forces an error in codegen. This is used\n-    /// to write compile-fail tests that actually test that compilation succeeds without reporting\n+    /// to write UI tests that actually test that compilation succeeds without reporting\n     /// an error.\n     fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n         let def_id = match tcx.entry_fn(LOCAL_CRATE) {"}, {"sha": "7598be4e4a11d8e9c51c2085f479058efe8c0da8", "filename": "compiler/rustc_mir/src/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n /// \"rustc_peek: bit not set\".\n ///\n /// The intention is that one can write unit tests for dataflow by\n-/// putting code into a compile-fail test and using `rustc_peek` to\n+/// putting code into an UI test and using `rustc_peek` to\n /// make observations about the results of dataflow static analyses.\n ///\n /// (If there are any calls to `rustc_peek` that do not match the"}, {"sha": "a5adfb27e9325dd9c7e20e3b97b48fb24d44822d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             ModuleKind::Block(..) => unreachable!(),\n                         };\n                         // HACK(eddyb) unclear how good this is, but keeping `$crate`\n-                        // in `source` breaks `src/test/compile-fail/import-crate-var.rs`,\n+                        // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,\n                         // while the current crate doesn't have a valid `crate_name`.\n                         if crate_name != kw::Invalid {\n                             // `crate_name` should not be interpreted as relative."}, {"sha": "da66fbc8587d7ac498a6d6b92ec8d27e12df07d5", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -162,7 +162,7 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n     /// 'b` (and hence, transitively, that `T: 'a`). This method would\n     /// add those assumptions into the outlives-environment.\n     ///\n-    /// Tests: `src/test/compile-fail/regions-free-region-ordering-*.rs`\n+    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n     fn add_implied_bounds(\n         &mut self,\n         infcx: &InferCtxt<'a, 'tcx>,"}, {"sha": "12029f7bc75704e317ac0bf2d5c4c710d523b919", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -558,7 +558,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // where-clause or, in the case of an object type,\n                     // it could be that the object type lists the\n                     // trait (e.g., `Foo+Send : Send`). See\n-                    // `compile-fail/typeck-default-trait-impl-send-param.rs`\n+                    // `ui/typeck/typeck-default-trait-impl-send-param.rs`\n                     // for an example of a test case that exercises\n                     // this path.\n                 }"}, {"sha": "3e40f5ba28a7eec224c92da7a071aace8f7e5564", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1767,8 +1767,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     const NO_GENERICS: &hir::Generics<'_> = &hir::Generics::empty();\n \n     // We use an `IndexSet` to preserves order of insertion.\n-    // Preserving the order of insertion is important here so as not to break\n-    // compile-fail UI tests.\n+    // Preserving the order of insertion is important here so as not to break UI tests.\n     let mut predicates: FxIndexSet<(ty::Predicate<'_>, Span)> = FxIndexSet::default();\n \n     let ast_generics = match node {"}, {"sha": "a2e596bf4e958824c112fbdc28930c4f04f9191d", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -201,7 +201,6 @@ build/\n     # Output for all compiletest-based test suites\n     test/\n       ui/\n-      compile-fail/\n       debuginfo/\n       ...\n "}, {"sha": "c271608a6b6430ada5d7f47851ceea4e51c9871a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -384,7 +384,6 @@ impl<'a> Builder<'a> {\n                 test::ExpandYamlAnchors,\n                 test::Tidy,\n                 test::Ui,\n-                test::CompileFail,\n                 test::RunPassValgrind,\n                 test::MirOpt,\n                 test::Codegen,"}, {"sha": "fd39944e176fe991405a2a01f9da9c9745e0fb85", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -66,7 +66,6 @@ check-stage2-T-x86_64-unknown-linux-musl-H-x86_64-unknown-linux-gnu:\n \n TESTS_IN_2 := \\\n \tsrc/test/ui \\\n-\tsrc/test/compile-fail \\\n \tsrc/tools/linkchecker\n \n ci-subset-1:\n@@ -75,8 +74,7 @@ ci-subset-2:\n \t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2)\n \n TESTS_IN_MINGW_2 := \\\n-\tsrc/test/ui \\\n-\tsrc/test/compile-fail\n+\tsrc/test/ui\n \n ci-mingw-subset-1:\n \t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)"}, {"sha": "859236804d3c55e86b4b68ecf0b63e994143d6e2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -869,12 +869,6 @@ default_test_with_compare_mode!(Ui {\n     compare_mode: \"nll\"\n });\n \n-default_test!(CompileFail {\n-    path: \"src/test/compile-fail\",\n-    mode: \"compile-fail\",\n-    suite: \"compile-fail\"\n-});\n-\n default_test!(RunPassValgrind {\n     path: \"src/test/run-pass-valgrind\",\n     mode: \"run-pass-valgrind\","}, {"sha": "147de5f801588450a761d691f55240ecc241e046", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -44,7 +44,6 @@ ENV WASM_TARGETS=wasm32-unknown-unknown\n ENV WASM_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $WASM_TARGETS \\\n   src/test/run-make \\\n   src/test/ui \\\n-  src/test/compile-fail \\\n   src/test/mir-opt \\\n   src/test/codegen-units \\\n   library/core"}, {"sha": "d38f5add7474dd3f1480bfb0ef2af08302da4d7c", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env python\n \n \"\"\"\n-This script creates a pile of compile-fail tests check that all the\n+This script creates a pile of UI tests check that all the\n derives have spans that point to the fields, rather than the\n #[derive(...)] line.\n "}, {"sha": "b9ef2f329414e8db0ca087e0bb5fac2c41bd87d9", "filename": "src/test/compile-fail/auxiliary/panic-runtime-lang-items.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,15 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![crate_type = \"rlib\"]\n-\n-#![no_std]\n-#![feature(lang_items)]\n-\n-use core::panic::PanicInfo;\n-\n-#[lang = \"panic_impl\"]\n-fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n-#[lang = \"eh_personality\"]\n-fn eh_personality() {}\n-#[lang = \"eh_catch_typeinfo\"]\n-static EH_CATCH_TYPEINFO: u8 = 0;"}, {"sha": "97452a342ab4d9eda649e5bcee6e737f0686c018", "filename": "src/test/compile-fail/auxiliary/panic-runtime-unwind.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,17 +0,0 @@\n-// compile-flags:-C panic=unwind\n-// no-prefer-dynamic\n-\n-#![feature(panic_runtime)]\n-#![crate_type = \"rlib\"]\n-\n-#![no_std]\n-#![panic_runtime]\n-\n-#[no_mangle]\n-pub extern fn __rust_maybe_catch_panic() {}\n-\n-#[no_mangle]\n-pub extern fn __rust_start_panic() {}\n-\n-#[no_mangle]\n-pub extern fn rust_eh_personality() {}"}, {"sha": "97452a342ab4d9eda649e5bcee6e737f0686c018", "filename": "src/test/compile-fail/auxiliary/panic-runtime-unwind2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,17 +0,0 @@\n-// compile-flags:-C panic=unwind\n-// no-prefer-dynamic\n-\n-#![feature(panic_runtime)]\n-#![crate_type = \"rlib\"]\n-\n-#![no_std]\n-#![panic_runtime]\n-\n-#[no_mangle]\n-pub extern fn __rust_maybe_catch_panic() {}\n-\n-#[no_mangle]\n-pub extern fn __rust_start_panic() {}\n-\n-#[no_mangle]\n-pub extern fn rust_eh_personality() {}"}, {"sha": "0348b3a2d760bcc969a9437ae51cb17d18d4a49f", "filename": "src/test/compile-fail/auxiliary/some-panic-impl.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fsome-panic-impl.rs?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,11 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![crate_type = \"rlib\"]\n-#![no_std]\n-\n-use core::panic::PanicInfo;\n-\n-#[panic_handler]\n-fn panic(info: &PanicInfo) -> ! {\n-    loop {}\n-}"}, {"sha": "d5f0102196f48b353956e030abc0ea611d51d7b3", "filename": "src/test/compile-fail/auxiliary/wants-panic-runtime-unwind.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,6 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![crate_type = \"rlib\"]\n-#![no_std]\n-\n-extern crate panic_runtime_unwind;"}, {"sha": "27e27dda5effe256ea9513fe3f5ac8c22c2a870a", "filename": "src/test/compile-fail/runtime-depend-on-needs-runtime.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr?ref=158f8d034b15e65ba8dc0d066358dd0632bfcd6e", "patch": "@@ -1,4 +0,0 @@\n-error: the crate `depends` cannot depend on a crate that needs a panic runtime, but it depends on `needs_panic_runtime`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e7268311b1317edcbb7e99a26f776b14ec96f9ad", "filename": "src/test/run-make-fulldeps/many-crates-but-no-match/Makefile", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Frun-make-fulldeps%2Fmany-crates-but-no-match%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Frun-make-fulldeps%2Fmany-crates-but-no-match%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmany-crates-but-no-match%2FMakefile?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,9 +1,8 @@\n -include ../tools.mk\n \n-# Modelled after compile-fail/changing-crates test, but this one puts\n+# Modelled after ui/changing-crates.rs test, but this one puts\n # more than one (mismatching) candidate crate into the search path,\n-# which did not appear directly expressible in compile-fail/aux-build\n-# infrastructure.\n+# which did not appear directly expressible in UI testing infrastructure.\n #\n # Note that we move the built libraries into target direcrtories rather than\n # use the `--out-dir` option because the `../tools.mk` file already bakes a\n@@ -33,4 +32,4 @@ all:\n \t\t'crate `crateA`:' \\\n \t\t'crate `crateB`:' \\\n \t\t< $(LOG)\n-\t# the 'crate `crateA`' will match two entries.\n\\ No newline at end of file\n+\t# the 'crate `crateA`' will match two entries."}, {"sha": "71b38a9f8ca566474d5ea68f488ed29e574422c6", "filename": "src/test/run-make-fulldeps/type-mismatch-same-crate-name/crateC.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -5,7 +5,7 @@\n // causing a type mismatch.\n \n // The test is nearly the same as the one in\n-// compile-fail/type-mismatch-same-crate-name.rs\n+// ui/type/type-mismatch-same-crate-name.rs\n // but deals with the case where one of the crates\n // is only introduced as an indirect dependency.\n // and the type is accessed via a re-export."}, {"sha": "cc97971a0ddb78fa598c32651834a049e2ecf0a5", "filename": "src/test/ui-fulldeps/dropck-tarena-cycle-checked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,8 +1,8 @@\n // Reject mixing cyclic structure and Drop when using TypedArena.\n //\n-// (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n+// (Compare against dropck-vec-cycle-checked.rs)\n //\n-// (Also compare against compile-fail/dropck_tarena_unsound_drop.rs,\n+// (Also compare against ui-fulldeps/dropck-tarena-unsound-drop.rs,\n //  which is a reduction of this code to more directly show the reason\n //  for the error message we see here.)\n "}, {"sha": "187f9a24a9075fff3ca5db4e7a1270bb38e2bb84", "filename": "src/test/ui-fulldeps/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_sound_drop.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -5,7 +5,7 @@\n // methods might access borrowed data, as long as the borrowed data\n // has lifetime that strictly outlives the arena itself.\n //\n-// Compare against compile-fail/dropck_tarena_unsound_drop.rs, which\n+// Compare against ui-fulldeps/dropck-tarena-unsound-drop.rs, which\n // shows a similar setup, but restricts `f` so that the struct `C<'a>`\n // is force-fed a lifetime equal to that of the borrowed arena.\n "}, {"sha": "c6d311148d07e4f844b78efea2b7ca922d6cf3e7", "filename": "src/test/ui/array-slice-vec/copy-out-of-array-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fcopy-out-of-array-1.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n \n // Ensure that we can copy out of a fixed-size array.\n //\n-// (Compare with compile-fail/move-out-of-array-1.rs)\n+// (Compare with ui/moves/move-out-of-array-1.rs)\n \n #[derive(Copy, Clone)]\n struct C { _x: u8 }"}, {"sha": "3b8c8c019e50b2274ea3798f3e6083b761c87592", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -3,7 +3,7 @@\n // the trait definition if there is no default method and for every impl,\n // `Self` does implement `Get`.\n //\n-// See also compile-fail tests associated-types-no-suitable-supertrait\n+// See also tests associated-types-no-suitable-supertrait\n // and associated-types-no-suitable-supertrait-2, which show how small\n // variants of the code below can fail.\n "}, {"sha": "483c205f42d6daa3a109942b1cd7e715cbcc5d3e", "filename": "src/test/ui/associated-types/issue-23595-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/issue-23595-1.rs"}, {"sha": "bb455684ee3ef63374eaabeb20da46779567c172", "filename": "src/test/ui/associated-types/issue-23595-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23595-1.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,16 @@\n+error[E0191]: the value of the associated types `ChildKey` (from trait `Hierarchy`), `Children` (from trait `Hierarchy`), `Value` (from trait `Hierarchy`) must be specified\n+  --> $DIR/issue-23595-1.rs:8:58\n+   |\n+LL |     type Value;\n+   |     ----------- `Value` defined here\n+LL |     type ChildKey;\n+   |     -------------- `ChildKey` defined here\n+LL |     type Children = dyn Index<Self::ChildKey, Output=dyn Hierarchy>;\n+   |     -----------------------------------------------------^^^^^^^^^--\n+   |     |                                                    |\n+   |     |                                                    help: specify the associated types: `Hierarchy<Value = Type, ChildKey = Type, Children = Type>`\n+   |     `Children` defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "1cfc230453120a7ea7e790e6612565c8e9dc5346", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/issue-27675-unchecked-bounds.rs"}, {"sha": "02396bd00a59dd6ca2fc7e167fa59c0241f626e2", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/issue-27675-unchecked-bounds.rs:15:31\n+   |\n+LL | fn copy<U: Setup + ?Sized>(from: &U::From) -> U::From {\n+   |            ----- required by this bound in `copy`\n+...\n+LL |     copy::<dyn Setup<From=T>>(t)\n+   |                               ^ the trait `Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | pub fn copy_any<T: Copy>(t: &T) -> T {\n+   |                  ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "36777693faba0cd54886175384087bbf0d78d476", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/coerce-unsafe-closure-to-unsafe-fn-ptr.rs"}, {"sha": "a1fb1c02e46226d7e3550dd67a00cdd0e2e73027", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:2:31\n+   |\n+LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "78bdd36f9cc3ae50621c43da8b7409c43cb6c6d5", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/coerce-unsafe-to-closure.rs"}, {"sha": "ab035d03b056d0d9dbaaf74b2aa88328e42d3e21", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+  --> $DIR/coerce-unsafe-to-closure.rs:2:44\n+   |\n+LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n+   |                                            ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |\n+   = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "68a4d414ff34eb55292b038fbfa2d86d66e1f10c", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/consts/const-fn-error.rs"}, {"sha": "86b1eebcb2c836ce19f52a4a9a788096d73f3841", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,49 @@\n+error[E0744]: `for` is not allowed in a `const fn`\n+  --> $DIR/const-fn-error.rs:7:5\n+   |\n+LL | /     for i in 0..x {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         sum += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-fn-error.rs:7:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/const-fn-error.rs:7:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-fn-error.rs:7:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-fn-error.rs:7:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+   |              |\n+   |              calling non-const function `<std::ops::Range<usize> as IntoIterator>::into_iter`\n+   |              inside `f` at $DIR/const-fn-error.rs:7:14\n+...\n+LL |     let a : [i32; f(X)];\n+   |                   ---- inside `main::{constant#0}` at $DIR/const-fn-error.rs:20:19\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0015, E0080, E0658, E0744.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "71e764620d1404d5d1db460791a62010a5457c67", "filename": "src/test/ui/consts/issue-44415.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/issue-44415.rs"}, {"sha": "38841e99a72206f85fc2b18aa32d12e4554d87b8", "filename": "src/test/ui/consts/issue-44415.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::bytes::{constant#0}`\n+  --> $DIR/issue-44415.rs:6:17\n+   |\n+LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+   |                 ^^^^^^\n+   |\n+note: ...which requires simplifying constant for the type system `Foo::bytes::{constant#0}`...\n+  --> $DIR/issue-44415.rs:6:17\n+   |\n+LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+   |                 ^^^^^^\n+note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`...\n+  --> $DIR/issue-44415.rs:6:17\n+   |\n+LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+   |                 ^^^^^^\n+   = note: ...which requires computing layout of `Foo`...\n+   = note: ...which requires normalizing `[u8; _]`...\n+   = note: ...which again requires simplifying constant for the type system `Foo::bytes::{constant#0}`, completing the cycle\n+note: cycle used when checking that `Foo` is well-formed\n+  --> $DIR/issue-44415.rs:5:1\n+   |\n+LL | struct Foo {\n+   | ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "c1c54646db8714e5d4a4896b262fc208a1392a4a", "filename": "src/test/ui/consts/issue-55878.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // normalize-stderr-64bit \"18446744073709551615\" -> \"SIZE\"\n // normalize-stderr-32bit \"4294967295\" -> \"SIZE\"\n ", "previous_filename": "src/test/compile-fail/consts/issue-55878.rs"}, {"sha": "924910e9cb6df18ae22ab75b9a1cdfd8886b31aa", "filename": "src/test/ui/consts/issue-55878.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,25 @@\n+error[E0080]: values of the type `[u8; SIZE]` are too big for the current architecture\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     inside `main` at $DIR/issue-55878.rs:7:26\n+   | \n+  ::: $DIR/issue-55878.rs:7:26\n+   |\n+LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n+   |                          ----------------------------------------------\n+\n+error: erroneous constant used\n+  --> $DIR/issue-55878.rs:7:26\n+   |\n+LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a00a19e46d519fbad8d1c876250fbedf73503b7b", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-1.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/crateresolve1-1.rs"}, {"sha": "71cc0a12ea37946301e39ceb594836edc93cec69", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-2.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/crateresolve1-2.rs"}, {"sha": "921687d4c3bffd199e3c73b0264a1c811e23eca7", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve1-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve1-3.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/crateresolve1-3.rs"}, {"sha": "49e47dacc3def9595f1b64daab1a46ef4e50ad29", "filename": "src/test/ui/crate-loading/crateresolve1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,4 @@\n+// dont-check-compiler-stderr\n // aux-build:crateresolve1-1.rs\n // aux-build:crateresolve1-2.rs\n // aux-build:crateresolve1-3.rs", "previous_filename": "src/test/compile-fail/crateresolve1.rs"}, {"sha": "be6ec3e4ed1a9d26555c165ea2915f54e0b3d3f7", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,7 +1,7 @@\n // Reject mixing cyclic structure and Drop when using trait\n // objects to hide the cross-references.\n //\n-// (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n+// (Compare against ui/span/dropck_vec_cycle_checked.rs)\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "d3cb5aaaeba89095fed6fbae4ac5cdfc7427d8ac", "filename": "src/test/ui/extern-flag/empty-extern-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/empty-extern-arg.rs"}, {"sha": "199c4fb616b53bcd9f213d02af068bbc789c929f", "filename": "src/test/ui/extern-flag/empty-extern-arg.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,4 @@\n+error: extern location for std does not exist: \n+\n+error: aborting due to previous error\n+"}, {"sha": "6a0b4ed17b96294866da32d19b3cc142f78e88fa", "filename": "src/test/ui/fsu-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffsu-moves-and-copies.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -36,7 +36,7 @@ impl Drop for DropMoveFoo { fn drop(&mut self) { } }\n fn test0() {\n     // just copy implicitly copyable fields from `f`, no moves\n     // (and thus it is okay that these are Drop; compare against\n-    // compile-fail test: borrowck-struct-update-with-dtor.rs).\n+    // test ui/borrowck/borrowck-struct-update-with-dtor.rs).\n \n     // Case 1: Nocopyable\n     let f = DropNoFoo::new(1, 2);"}, {"sha": "11d2c9b7fb7641af6fc915f3fd41e93a3f2718a5", "filename": "src/test/ui/functions-closures/closure-expected-type/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-expected-type%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-expected-type%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-expected-type%2FREADME.md?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -5,4 +5,4 @@ inputs. This investigation was kicked off by #38714, which revealed\n some pretty deep flaws in the ad-hoc way that we were doing things\n before.\n \n-See also `src/test/compile-fail/closure-expected-type`.\n+See also `src/test/ui/closure-expected-type`."}, {"sha": "84037b72a274698e44db70cfef41c9996c101854", "filename": "src/test/ui/issues/issue-26996.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-26996.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-26996.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26996.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// This test is bogus (i.e., should be compile-fail) during the period\n+// This test is bogus (i.e., should be check-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n // now: just ignore it\n //"}, {"sha": "ef3b114a5fa2a084d3b19222262cc88858540514", "filename": "src/test/ui/issues/issue-27021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-27021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-27021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27021.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// This test is bogus (i.e., should be compile-fail) during the period\n+// This test is bogus (i.e., should be check-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n // now: just ignore it\n //"}, {"sha": "43c0bfb26cd8137dd63e776cc510df4ab5cccf26", "filename": "src/test/ui/issues/issue-28498-ugeh-with-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -3,7 +3,7 @@\n // Demonstrate the use of the unguarded escape hatch with a lifetime param\n // to assert that destructor will not access any dead data.\n //\n-// Compare with compile-fail/issue28498-reject-lifetime-param.rs\n+// Compare with ui/span/issue28498-reject-lifetime-param.rs\n \n #![feature(dropck_eyepatch)]\n "}, {"sha": "23fd86a093b59fd99604ff4a636d1aed03a1d898", "filename": "src/test/ui/issues/issue-28498-ugeh-with-passed-to-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -3,7 +3,7 @@\n // Demonstrate the use of the unguarded escape hatch with a type param in negative position\n // to assert that destructor will not access any dead data.\n //\n-// Compare with compile-fail/issue28498-reject-lifetime-param.rs\n+// Compare with ui/span/issue28498-reject-lifetime-param.rs\n \n // Demonstrate that a type param in negative position causes dropck to reject code\n // that might indirectly access previously dropped value."}, {"sha": "61d11cf38347eae04c40cc1f3fc6e0b2fd1bd977", "filename": "src/test/ui/issues/issue-28498-ugeh-with-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -3,7 +3,7 @@\n // Demonstrate the use of the unguarded escape hatch with a trait bound\n // to assert that destructor will not access any dead data.\n //\n-// Compare with compile-fail/issue28498-reject-trait-bound.rs\n+// Compare with ui/span/issue28498-reject-trait-bound.rs\n \n #![feature(dropck_eyepatch)]\n "}, {"sha": "e3ffa8e7c6ef6b39c6ec099a6c05739696a053f0", "filename": "src/test/ui/issues/issue-49298.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-49298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fissues%2Fissue-49298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49298.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n #![feature(test)]\n #![allow(unused_mut)] // under NLL we get warning about `x` below: rust-lang/rust#54499\n \n-// This test is bogus (i.e., should be compile-fail) during the period\n+// This test is bogus (i.e., should be check-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n // now: just ignore it\n //"}, {"sha": "5eb1c637f09e8e98f1276cc7f698d58f71ad07c0", "filename": "src/test/ui/linkage-attr/invalid-link-args.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // ignore-msvc due to linker-flavor=ld\n // error-pattern:aFdEfSeVEEE\n // compile-flags: -C linker-flavor=ld", "previous_filename": "src/test/compile-fail/invalid-link-args.rs"}, {"sha": "5ce69bceed37a6224e5d5aa23a4a617460c21430", "filename": "src/test/ui/linkage-attr/issue-10755.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flinkage-attr%2Fissue-10755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flinkage-attr%2Fissue-10755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fissue-10755.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // compile-flags: -C linker=llllll -C linker-flavor=ld\n // error-pattern: linker `llllll` not found\n ", "previous_filename": "src/test/compile-fail/issue-10755.rs"}, {"sha": "70dddf61fb7d89a0f94273551f7ee7ee000a90cb", "filename": "src/test/ui/lint/must_use-in-stdlib-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs"}, {"sha": "76978d29dc8eec3bb23f38c60b428db1f679e5e6", "filename": "src/test/ui/lint/must_use-in-stdlib-traits.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-in-stdlib-traits.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,47 @@\n+error: unused implementer of `Iterator` that must be used\n+  --> $DIR/must_use-in-stdlib-traits.rs:42:4\n+   |\n+LL |    iterator();\n+   |    ^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/must_use-in-stdlib-traits.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: iterators are lazy and do nothing unless consumed\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/must_use-in-stdlib-traits.rs:43:4\n+   |\n+LL |    future();\n+   |    ^^^^^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused implementer of `FnOnce` that must be used\n+  --> $DIR/must_use-in-stdlib-traits.rs:44:4\n+   |\n+LL |    square_fn_once();\n+   |    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused implementer of `FnMut` that must be used\n+  --> $DIR/must_use-in-stdlib-traits.rs:45:4\n+   |\n+LL |    square_fn_mut();\n+   |    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused implementer of `Fn` that must be used\n+  --> $DIR/must_use-in-stdlib-traits.rs:46:4\n+   |\n+LL |    square_fn();\n+   |    ^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "387822d00f643172ced50df4c24392a07158acf8", "filename": "src/test/ui/llvm-asm/asm-src-loc-codegen-units.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // compile-flags: -C codegen-units=2\n // ignore-emscripten\n ", "previous_filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs"}, {"sha": "063066df11c81dee5d29ed627010e8a40249a238", "filename": "src/test/ui/llvm-asm/asm-src-loc.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // ignore-emscripten\n \n #![feature(llvm_asm)]", "previous_filename": "src/test/compile-fail/asm-src-loc.rs"}, {"sha": "c46274d59b65810cc39531ddb7b2b266972bbc33", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -8,7 +8,7 @@\n // to it being e.g., a place where the addition of an argument\n // causes it to go down a code path with subtly different behavior).\n //\n-// There is a companion test in compile-fail.\n+// There is a companion failing test.\n \n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core\n@@ -68,26 +68,26 @@ fn to_format_or_not_to_format() {\n \n     assert!(true, \"{}\",);\n \n-    // assert_eq!(1, 1, \"{}\",); // see compile-fail\n-    // assert_ne!(1, 2, \"{}\",); // see compile-fail\n+    // assert_eq!(1, 1, \"{}\",); // see check-fail\n+    // assert_ne!(1, 2, \"{}\",); // see check-fail\n \n     debug_assert!(true, \"{}\",);\n \n-    // debug_assert_eq!(1, 1, \"{}\",); // see compile-fail\n-    // debug_assert_ne!(1, 2, \"{}\",); // see compile-fail\n-    // eprint!(\"{}\",); // see compile-fail\n-    // eprintln!(\"{}\",); // see compile-fail\n-    // format!(\"{}\",); // see compile-fail\n-    // format_args!(\"{}\",); // see compile-fail\n+    // debug_assert_eq!(1, 1, \"{}\",); // see check-fail\n+    // debug_assert_ne!(1, 2, \"{}\",); // see check-fail\n+    // eprint!(\"{}\",); // see check-fail\n+    // eprintln!(\"{}\",); // see check-fail\n+    // format!(\"{}\",); // see check-fail\n+    // format_args!(\"{}\",); // see check-fail\n \n     if falsum() { panic!(\"{}\",); }\n \n-    // print!(\"{}\",); // see compile-fail\n-    // println!(\"{}\",); // see compile-fail\n-    // unimplemented!(\"{}\",); // see compile-fail\n+    // print!(\"{}\",); // see check-fail\n+    // println!(\"{}\",); // see check-fail\n+    // unimplemented!(\"{}\",); // see check-fail\n \n     if falsum() { unreachable!(\"{}\",); }\n \n-    // write!(&mut stdout, \"{}\",); // see compile-fail\n-    // writeln!(&mut stdout, \"{}\",); // see compile-fail\n+    // write!(&mut stdout, \"{}\",); // see check-fail\n+    // writeln!(&mut stdout, \"{}\",); // see check-fail\n }"}, {"sha": "ac15e9fa8ea837ac3410294d534bc0e3f2497f71", "filename": "src/test/ui/macros/macro-comma-behavior.core.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -23,22 +23,28 @@ LL |     debug_assert_ne!(1, 2, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:54:19\n+  --> $DIR/macro-comma-behavior.rs:52:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:72:21\n+  --> $DIR/macro-comma-behavior.rs:68:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:81:24\n+  --> $DIR/macro-comma-behavior.rs:77:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^\n \n-error: aborting due to 7 previous errors\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/macro-comma-behavior.rs:81:26\n+   |\n+LL |             writeln!(f, \"{}\",)?;\n+   |                          ^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "27d50ff3d57eacda6cdd1a5c650ad0d54f2cf131", "filename": "src/test/ui/macros/macro-comma-behavior.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -40,10 +40,8 @@ fn to_format_or_not_to_format() {\n     }\n \n     #[cfg(std)] {\n-        // FIXME: compile-fail says \"expected error not found\" even though\n-        //        rustc does emit an error\n-        // eprintln!(\"{}\",);\n-        // <DISABLED> [std]~^ ERROR no arguments\n+        eprintln!(\"{}\",);\n+        //[std]~^ ERROR no arguments\n     }\n \n     #[cfg(std)] {\n@@ -63,10 +61,8 @@ fn to_format_or_not_to_format() {\n     }\n \n     #[cfg(std)] {\n-        // FIXME: compile-fail says \"expected error not found\" even though\n-        //        rustc does emit an error\n-        // println!(\"{}\",);\n-        // <DISABLED> [std]~^ ERROR no arguments\n+        println!(\"{}\",);\n+        //[std]~^ ERROR no arguments\n     }\n \n     unimplemented!(\"{}\",);\n@@ -82,11 +78,9 @@ fn to_format_or_not_to_format() {\n             //[core]~^ ERROR no arguments\n             //[std]~^^ ERROR no arguments\n \n-            // FIXME: compile-fail says \"expected error not found\" even though\n-            //        rustc does emit an error\n-            // writeln!(f, \"{}\",)?;\n-            // <DISABLED> [core]~^ ERROR no arguments\n-            // <DISABLED> [std]~^^ ERROR no arguments\n+            writeln!(f, \"{}\",)?;\n+            //[core]~^ ERROR no arguments\n+            //[std]~^^ ERROR no arguments\n             Ok(())\n         }\n     }"}, {"sha": "7fd060e222498b405b7d621e23900eb32ed17beb", "filename": "src/test/ui/macros/macro-comma-behavior.std.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -29,34 +29,52 @@ LL |         eprint!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:50:18\n+  --> $DIR/macro-comma-behavior.rs:43:20\n+   |\n+LL |         eprintln!(\"{}\",);\n+   |                    ^^\n+\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/macro-comma-behavior.rs:48:18\n    |\n LL |         format!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:54:19\n+  --> $DIR/macro-comma-behavior.rs:52:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:61:17\n+  --> $DIR/macro-comma-behavior.rs:59:17\n    |\n LL |         print!(\"{}\",);\n    |                 ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:72:21\n+  --> $DIR/macro-comma-behavior.rs:64:19\n+   |\n+LL |         println!(\"{}\",);\n+   |                   ^^\n+\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/macro-comma-behavior.rs:68:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:81:24\n+  --> $DIR/macro-comma-behavior.rs:77:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^\n \n-error: aborting due to 10 previous errors\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/macro-comma-behavior.rs:81:26\n+   |\n+LL |             writeln!(f, \"{}\",)?;\n+   |                          ^^\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "f6c4f896d67c1ea4b6987e10f80d6f83a204fca3", "filename": "src/test/ui/macros/macro-comma-support-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -68,7 +68,7 @@ fn column() {\n     let _ = column!();\n }\n \n-// compile_error! is in a companion to this test in compile-fail\n+// compile_error! is in a check-fail companion to this test\n \n #[test]\n fn concat() {"}, {"sha": "4148e5b88fe6369c7056f9659bb48902fefa19c6", "filename": "src/test/ui/macros/not-utf8.bin", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.bin", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.bin", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.bin?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/not-utf8.bin"}, {"sha": "1cb1fdcb8c96d4328feab9bd91943c8403880902", "filename": "src/test/ui/macros/not-utf8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/not-utf8.rs"}, {"sha": "f47be14fae3bc9ed0c492804987a57928fe673b8", "filename": "src/test/ui/macros/not-utf8.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,10 @@\n+error: couldn't read $DIR/not-utf8.bin: stream did not contain valid UTF-8\n+  --> $DIR/not-utf8.rs:4:5\n+   |\n+LL |     include!(\"not-utf8.bin\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "583b2c4cfe039f77f8dba570468c5470ab402bc6", "filename": "src/test/ui/meta/meta-expected-error-wrong-rev.a.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.a.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/meta-expected-error-wrong-rev.rs:13:18\n+   |\n+LL |     let x: u32 = 22_usize;\n+   |            ---   ^^^^^^^^ expected `u32`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+help: change the type of the numeric literal from `usize` to `u32`\n+   |\n+LL |     let x: u32 = 22_u32;\n+   |                  ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7e49434142bcb89c284efb39c7db7a65f3a2ddd1", "filename": "src/test/ui/meta/meta-expected-error-wrong-rev.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Fmeta-expected-error-wrong-rev.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/meta-expected-error-wrong-rev.rs"}, {"sha": "4519833b864867f106ff167242eb73fe9c436331", "filename": "src/test/ui/never_type/issue-52443.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/issue-52443.rs"}, {"sha": "051896cb89c8fe6691479c62f3c44b9ec92ef379", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,57 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/issue-52443.rs:6:11\n+   |\n+LL |     [(); {while true {break}; 0}];\n+   |           ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: `#[warn(while_true)]` on by default\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/issue-52443.rs:9:12\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:2:10\n+   |\n+LL |     [(); & { loop { continue } } ];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected `usize`, found reference\n+   |          help: consider removing the borrow: `{ loop { continue } }`\n+   |\n+   = note:   expected type `usize`\n+           found reference `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:4:17\n+   |\n+LL |     [(); loop { break }];\n+   |                 ^^^^^\n+   |                 |\n+   |                 expected `usize`, found `()`\n+   |                 help: give it a value of the expected type: `break 42`\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-52443.rs:9:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^\n+\n+error[E0764]: mutable references are not allowed in constants\n+  --> $DIR/issue-52443.rs:9:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^ `&mut` is only allowed in `const fn`\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-52443.rs:9:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0015, E0308, E0744, E0764.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "b61083078ccdbc0d4d58561aa9c489c45cc33825", "filename": "src/test/ui/object-lifetime-default-from-rptr-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fobject-lifetime-default-from-rptr-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fobject-lifetime-default-from-rptr-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime-default-from-rptr-box.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -23,7 +23,7 @@ fn b<'a>(t: &'a Box<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-// see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n+// see also ui/object-lifetime/object-lifetime-default-from-rptr-box-error.rs\n \n fn d<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;"}, {"sha": "7a698cf76ae517b01dc5234aca067045017dbca0", "filename": "src/test/ui/panic-handler/auxiliary/weak-lang-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fauxiliary%2Fweak-lang-items.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/weak-lang-items.rs"}, {"sha": "6bb062ba657a157b62f1bcd2205da178416a5640", "filename": "src/test/ui/panic-handler/panic-handler-missing.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-missing.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,4 @@\n+// dont-check-compiler-stderr\n // error-pattern: `#[panic_handler]` function required, but not found\n \n #![feature(lang_items)]", "previous_filename": "src/test/compile-fail/panic-handler-missing.rs"}, {"sha": "05bef66d849a630c7ea27aa090801dc7e39322bd", "filename": "src/test/ui/panic-handler/panic-handler-twice.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-twice.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,4 @@\n+// dont-check-compiler-stderr\n // aux-build:some-panic-impl.rs\n \n #![feature(lang_items)]", "previous_filename": "src/test/compile-fail/panic-handler-twice.rs"}, {"sha": "3fa3822831b5275b54d7e43df427a68f04a2d825", "filename": "src/test/ui/panic-handler/weak-lang-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/weak-lang-item.rs"}, {"sha": "b7c040c7a850be8bb646d88caca43a3f29b61e3b", "filename": "src/test/ui/panic-handler/weak-lang-item.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,19 @@\n+error[E0259]: the name `core` is defined multiple times\n+  --> $DIR/weak-lang-item.rs:8:1\n+   |\n+LL | extern crate core;\n+   | ^^^^^^^^^^^^^^^^^^ `core` reimported here\n+   |\n+   = note: `core` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | extern crate core as other_core;\n+   |\n+\n+error: `#[panic_handler]` function required, but not found\n+\n+error: language item required, but not found: `eh_personality`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0259`."}, {"sha": "e9bc2f4893e3d2fda882be8afeec3bd4b4a39f6c", "filename": "src/test/ui/panic-runtime/auxiliary/depends.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fdepends.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fdepends.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fdepends.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/depends.rs"}, {"sha": "3f030c169f6410ddfa4413756170ffb09a6cc3c2", "filename": "src/test/ui/panic-runtime/auxiliary/needs-panic-runtime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-panic-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-panic-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-panic-runtime.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/auxiliary/needs-panic-runtime.rs"}, {"sha": "d57f1643e98a38564383564c084a2f7997d862a3", "filename": "src/test/ui/panic-runtime/runtime-depend-on-needs-runtime.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,4 @@\n+// dont-check-compiler-stderr\n // aux-build:needs-panic-runtime.rs\n // aux-build:depends.rs\n // error-pattern:cannot depend on a crate that needs a panic runtime", "previous_filename": "src/test/compile-fail/runtime-depend-on-needs-runtime.rs"}, {"sha": "c968b5ea1e1864ed0e913cf3fbb6e14c114cb23c", "filename": "src/test/ui/panic-runtime/two-panic-runtimes.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Ftwo-panic-runtimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Ftwo-panic-runtimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftwo-panic-runtimes.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // error-pattern:cannot link together two panic runtimes: panic_runtime_unwind and panic_runtime_unwind2\n // ignore-tidy-linelength\n // aux-build:panic-runtime-unwind.rs", "previous_filename": "src/test/compile-fail/two-panic-runtimes.rs"}, {"sha": "6393a27046b8aa77f0c78f298802fe97ee20c682", "filename": "src/test/ui/panic-runtime/unwind-tables-panic-required.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-panic-required.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,6 +1,7 @@\n // Tests that the compiler errors if the user tries to turn off unwind tables\n // when they are required.\n //\n+// dont-check-compiler-stderr\n // compile-flags: -C panic=unwind -C force-unwind-tables=no\n // ignore-tidy-linelength\n //", "previous_filename": "src/test/compile-fail/unwind-tables-panic-required.rs"}, {"sha": "14c17893764145d49df5ceec4b9e0939cdaec524", "filename": "src/test/ui/panic-runtime/unwind-tables-target-required.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-target-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-target-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Funwind-tables-target-required.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/unwind-tables-target-required.rs"}, {"sha": "e33c3bcc3f0246645b14a0342629d6495b80d84c", "filename": "src/test/ui/panic-runtime/want-abort-got-unwind.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // error-pattern:is not compiled with this crate's panic strategy `abort`\n // aux-build:panic-runtime-unwind.rs\n // compile-flags:-C panic=abort", "previous_filename": "src/test/compile-fail/want-abort-got-unwind.rs"}, {"sha": "438f1d85a28114ccfe8fa2af33f50543c3f47d24", "filename": "src/test/ui/panic-runtime/want-abort-got-unwind2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-abort-got-unwind2.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+// dont-check-compiler-stderr\n // error-pattern:is not compiled with this crate's panic strategy `abort`\n // aux-build:panic-runtime-unwind.rs\n // aux-build:wants-panic-runtime-unwind.rs", "previous_filename": "src/test/compile-fail/want-abort-got-unwind2.rs"}, {"sha": "d54c993147938b565ce7769496794df5d9fd2abf", "filename": "src/test/ui/privacy/issue-46209-private-enum-variant-reexport.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs"}, {"sha": "b876bab6c542f574aa7b52c8e17bd404fd5ec0d7", "filename": "src/test/ui/privacy/issue-46209-private-enum-variant-reexport.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,44 @@\n+error: variant `JuniorGrade` is private and cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:6:32\n+   |\n+LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n+   |                                ^^^^^^^^^^^\n+...\n+LL |     enum Lieutenant {\n+   |     --------------- help: consider making the enum public: `pub enum Lieutenant`\n+\n+error: variant `Full` is private and cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:6:45\n+   |\n+LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n+   |                                             ^^^^\n+\n+error: enum is private and its variants cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:4:13\n+   |\n+LL |     pub use self::Professor::*;\n+   |             ^^^^^^^^^^^^^^^^^^\n+...\n+LL |     enum Professor {\n+   |     -------------- help: consider making the enum public: `pub enum Professor`\n+\n+error: enum is private and its variants cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:9:13\n+   |\n+LL |     pub use self::PettyOfficer::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     pub(in rank) enum PettyOfficer {\n+   |     ------------------------------ help: consider making the enum public: `pub enum PettyOfficer`\n+\n+error: enum is private and its variants cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:11:13\n+   |\n+LL |     pub use self::Crewman::*;\n+   |             ^^^^^^^^^^^^^^^^\n+...\n+LL |     crate enum Crewman {\n+   |     ------------------ help: consider making the enum public: `pub enum Crewman`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "276a64b8e9a7bb537ddf85549d93d2815f706a64", "filename": "src/test/ui/regions/regions-early-bound-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-trait-param.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -117,7 +117,7 @@ pub fn main() {\n     let m : Box<dyn Trait> = make_val();\n     // assert_eq!(object_invoke1(&*m), (4,5));\n     //            ~~~~~~~~~~~~~~~~~~~\n-    // this call yields a compilation error; see compile-fail/dropck-object-cycle.rs\n+    // this call yields a compilation error; see ui/span/dropck-object-cycle.rs\n     // for details.\n     assert_eq!(object_invoke2(&*m), 5);\n "}, {"sha": "e6377867018c067ec426b13ed86bf5252bc60e8a", "filename": "src/test/ui/regions/regions-variance-contravariant-use-contravariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-contravariant.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -4,7 +4,7 @@\n // Test that a type which is contravariant with respect to its region\n // parameter compiles successfully when used in a contravariant way.\n //\n-// Note: see compile-fail/variance-regions-*.rs for the tests that check that the\n+// Note: see ui/variance/variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n // pretty-expanded FIXME #23616"}, {"sha": "c5c80ce54f12fde453c5128d452ded1866cab767", "filename": "src/test/ui/regions/regions-variance-covariant-use-covariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-covariant.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -3,7 +3,7 @@\n // Test that a type which is covariant with respect to its region\n // parameter is successful when used in a covariant way.\n //\n-// Note: see compile-fail/variance-regions-*.rs for the tests that\n+// Note: see ui/variance/variance-regions-*.rs for the tests that\n // check that the variance inference works in the first place.\n \n // This is covariant with respect to 'a, meaning that"}, {"sha": "a14db5ff08966f86e8fb1ea2f66adf74194dbd32", "filename": "src/test/ui/span/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,7 +1,7 @@\n // Reject mixing cyclic structure and Drop when using fixed length\n // arrays.\n //\n-// (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n+// (Compare against ui/span/dropck_vec_cycle_checked.rs)\n \n \n "}, {"sha": "c5d21507d76ce09c3cfeca8ddf98baa64a55dae0", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,6 +1,6 @@\n // Reject mixing cyclic structure and Drop when using Vec.\n //\n-// (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n+// (Compare against ui/span/dropck_arr_cycle_checked.rs)\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "f19c55b043b4b7779c29e237f56d658b8b8f1da8", "filename": "src/test/ui/specialization/defaultimpl/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -4,7 +4,7 @@\n #![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n-// cf compile-fail/specialization-default-projection.rs\n+// cf ui/specialization/specialization-default-projection.rs\n \n // First, do so without any use of specialization\n "}, {"sha": "fe21e9b6ede586f7e77763d9811ad28762467161", "filename": "src/test/ui/specialization/issue-50452-fail.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n #![feature(specialization)]\n //~^ WARN the feature `specialization` is incomplete\n ", "previous_filename": "src/test/compile-fail/specialization/issue-50452.rs"}, {"sha": "8e7c5037eff8fd1e3e938d8e798e1d822a8bf9c8", "filename": "src/test/ui/specialization/issue-50452-fail.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452-fail.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-50452-fail.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n+\n+error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/issue-50452-fail.rs:10:5\n+   |\n+LL |       fn foo() {}\n+   |       ^^^^^^^^^^^ cannot specialize default item `foo`\n+...\n+LL | / impl<T> Foo for T {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_- parent `impl` is here\n+   |\n+   = note: to specialize, `foo` in the parent `impl` must be marked `default`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0520`."}, {"sha": "78afe7a949547148f22730c0491e1d8c214fda83", "filename": "src/test/ui/specialization/specialization-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -4,7 +4,7 @@\n #![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n-// cf compile-fail/specialization-default-projection.rs\n+// cf ui/specialization/specialization-default-projection.rs\n \n // First, do so without any use of specialization\n "}, {"sha": "e17025e9e88ccadbf2e0c1019f63ed9a2c409a08", "filename": "src/test/ui/structs-enums/discrim-explicit-23030.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n // Issue 23030: Workaround overflowing discriminant\n // with explicit assignments.\n \n-// See also compile-fail/overflow-discrim.rs, which shows what\n+// See also ui/discrim/discrim-overflow.rs, which shows what\n // happens if you leave the OhNo explicit cases out here.\n \n fn f_i8() {"}, {"sha": "d3e92e1624696199884548d13e400d9d61b64399", "filename": "src/test/ui/structs-enums/object-lifetime-default-from-rptr-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -27,7 +27,7 @@ fn b<'a>(t: &'a MyBox<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-// see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n+// see also ui/object-lifetime/object-lifetime-default-from-rptr-box-error.rs\n \n fn d<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;"}, {"sha": "221a096e08312b19175d54f6b6e46f2cf68fc3e0", "filename": "src/test/ui/svh/auxiliary/svh-uta-base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-base.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,4 +1,4 @@\n-//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! \"svh-uta-trait.rs\" is checking that we detect a\n //! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n //! (SVH) computation (#14132), since that will affect method\n //! resolution."}, {"sha": "823d29571aa88d42ccaf15b39d62e57b8de1176f", "filename": "src/test/ui/svh/auxiliary/svh-uta-change-use-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-uta-change-use-trait.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,4 +1,4 @@\n-//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! \"svh-uta-trait.rs\" is checking that we detect a\n //! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n //! (SVH) computation (#14132), since that will affect method\n //! resolution."}, {"sha": "a03e29dcedc422773a75a3089b672e2d5188a1d4", "filename": "src/test/ui/svh/auxiliary/svh-utb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-utb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-utb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fauxiliary%2Fsvh-utb.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,4 +1,4 @@\n-//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! \"svh-uta-trait.rs\" is checking that we detect a\n //! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n //! (SVH) computation (#14132), since that will affect method\n //! resolution."}, {"sha": "e5c427e096a724b72576ee8089658a611046dac9", "filename": "src/test/ui/svh/svh-use-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -6,7 +6,7 @@\n // aux-build:svh-uta-change-use-trait.rs\n // normalize-stderr-test: \"(crate `(\\w+)`:) .*\" -> \"$1 $$PATH_$2\"\n \n-//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! \"svh-uta-trait.rs\" is checking that we detect a\n //! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n //! (SVH) computation (#14132), since that will affect method\n //! resolution."}, {"sha": "21ea8e9a2098251e1c17c81bd247592c67df996f", "filename": "src/test/ui/threads-sendsync/issue-43733-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -1,3 +1,5 @@\n+// dont-check-compiler-stderr\n+\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use", "previous_filename": "src/test/compile-fail/issue-43733-2.rs"}, {"sha": "a602d7667c48dd2201f643590f87d8e122075efe", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/ui/issues/issue-43733.rs"}, {"sha": "ee6a3b065d6eef292e7c55e41d1ffd938e3bcac1", "filename": "src/test/ui/threads-sendsync/issue-43733.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "previous_filename": "src/test/ui/issues/issue-43733.stderr"}, {"sha": "339f9c37eeae8ada2c476a2046f1c3a366e9b717", "filename": "src/test/ui/traits/traits-repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n // Test a case of a trait which extends the same supertrait twice, but\n // with difference type parameters. Test that we can invoke the\n // various methods in various ways successfully.\n-// See also `compile-fail/trait-repeated-supertrait-ambig.rs`.\n+// See also `ui/traits/trait-repeated-supertrait-ambig.rs`.\n \n \n trait CompareTo<T> {"}, {"sha": "3713a7065f5e5bd057bf8333c6c5cfab5db75759", "filename": "src/test/ui/unsafe-fn-called-from-unsafe-blk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-blk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-blk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-blk.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(dead_code)]\n //\n-// See also: compile-fail/unsafe-fn-called-from-safe.rs\n+// See also: ui/unsafe/unsafe-fn-called-from-safe.rs\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5e953107686f2ce6ce8c0240d8dbc0217fd0d9ed", "filename": "src/test/ui/unsafe-fn-called-from-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe-fn-called-from-unsafe-fn.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(dead_code)]\n //\n-// See also: compile-fail/unsafe-fn-called-from-safe.rs\n+// See also: ui/unsafe/unsafe-fn-called-from-safe.rs\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "43dbaeb46555cf8b3a495a7db80adaf107227520", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -10,8 +10,6 @@ use test::ColorConfig;\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n-    CompileFail,\n-    RunFail,\n     RunPassValgrind,\n     Pretty,\n     DebugInfo,\n@@ -42,8 +40,6 @@ impl FromStr for Mode {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Mode, ()> {\n         match s {\n-            \"compile-fail\" => Ok(CompileFail),\n-            \"run-fail\" => Ok(RunFail),\n             \"run-pass-valgrind\" => Ok(RunPassValgrind),\n             \"pretty\" => Ok(Pretty),\n             \"debuginfo\" => Ok(DebugInfo),\n@@ -65,8 +61,6 @@ impl FromStr for Mode {\n impl fmt::Display for Mode {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let s = match *self {\n-            CompileFail => \"compile-fail\",\n-            RunFail => \"run-fail\",\n             RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n             DebugInfo => \"debuginfo\",\n@@ -230,7 +224,7 @@ pub struct Config {\n     /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n \n-    /// The test mode, compile-fail, run-fail, ui\n+    /// The test mode, e.g. ui or debuginfo.\n     pub mode: Mode,\n \n     /// The test suite (essentially which directory is running, but without the"}, {"sha": "2eba91fd1f4cf6ef72e191d78398db2c66105212", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -542,10 +542,7 @@ impl TestProps {\n         }\n \n         if self.failure_status == -1 {\n-            self.failure_status = match config.mode {\n-                Mode::RunFail => 101,\n-                _ => 1,\n-            };\n+            self.failure_status = 1;\n         }\n         if self.should_ice {\n             self.failure_status = 101;"}, {"sha": "aefcfe222e509b63a132bad75a46c6655723b3b1", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -71,7 +71,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"\",\n             \"mode\",\n             \"which sort of compile tests to run\",\n-            \"compile-fail | run-fail | run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n+            \"run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n             | rustdoc-json | codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n         )\n         .reqopt("}, {"sha": "9f31b3ae1b1a6d154f18ca910e8961907cb9a50c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -5,8 +5,8 @@ use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Assembly, Incremental, JsDocTest, MirOpt, RunMake, RustdocJson, Ui};\n use crate::common::{Codegen, CodegenUnits, DebugInfo, Debugger, Rustdoc};\n use crate::common::{CompareMode, FailMode, PassMode};\n-use crate::common::{CompileFail, Pretty, RunFail, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n+use crate::common::{Pretty, RunPassValgrind};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n@@ -330,13 +330,11 @@ impl<'test> TestCx<'test> {\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n         if self.props.should_ice {\n-            if self.config.mode != CompileFail && self.config.mode != Incremental {\n+            if self.config.mode != Incremental {\n                 self.fatal(\"cannot use should-ice in a test that is not cfail\");\n             }\n         }\n         match self.config.mode {\n-            CompileFail => self.run_cfail_test(),\n-            RunFail => self.run_rfail_test(),\n             RunPassValgrind => self.run_valgrind_test(),\n             Pretty => self.run_pretty_test(),\n             DebugInfo => self.run_debuginfo_test(),\n@@ -377,7 +375,6 @@ impl<'test> TestCx<'test> {\n \n     fn should_compile_successfully(&self, pm: Option<PassMode>) -> bool {\n         match self.config.mode {\n-            CompileFail => false,\n             JsDocTest => true,\n             Ui => pm.is_some() || self.props.fail_mode > Some(FailMode::Build),\n             Incremental => {\n@@ -1537,8 +1534,8 @@ impl<'test> TestCx<'test> {\n         };\n \n         let allow_unused = match self.config.mode {\n-            CompileFail | Ui => {\n-                // compile-fail and ui tests tend to have tons of unused code as\n+            Ui => {\n+                // UI tests tend to have tons of unused code as\n                 // it's just testing various pieces of the compile, but we don't\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n@@ -1940,7 +1937,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         match self.config.mode {\n-            CompileFail | Incremental => {\n+            Incremental => {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output.\n@@ -1975,8 +1972,8 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            RunFail | RunPassValgrind | Pretty | DebugInfo | Codegen | Rustdoc | RustdocJson\n-            | RunMake | CodegenUnits | JsDocTest | Assembly => {\n+            RunPassValgrind | Pretty | DebugInfo | Codegen | Rustdoc | RustdocJson | RunMake\n+            | CodegenUnits | JsDocTest | Assembly => {\n                 // do not use JSON output\n             }\n         }"}, {"sha": "384a291a777cd3292c805edf107d7d63927e9bf5", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=4d2d0bad4e51d0d14d21b4e21cdb61b55dd11349", "patch": "@@ -85,11 +85,7 @@ pub fn check(\n     assert!(!lib_features.is_empty());\n \n     super::walk_many(\n-        &[\n-            &src_path.join(\"test/ui\"),\n-            &src_path.join(\"test/ui-fulldeps\"),\n-            &src_path.join(\"test/compile-fail\"),\n-        ],\n+        &[&src_path.join(\"test/ui\"), &src_path.join(\"test/ui-fulldeps\")],\n         &mut |path| super::filter_dirs(path),\n         &mut |entry, contents| {\n             let file = entry.path();"}]}