{"sha": "3434f1dd2c47fff3df159b9d62115c2df3fd6401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzRmMWRkMmM0N2ZmZjNkZjE1OWI5ZDYyMTE1YzJkZjNmZDY0MDE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T11:30:29Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T15:17:52Z"}, "message": "Add Run|Debug hover actions", "tree": {"sha": "f821cbd28bc82b00e9c01727baeca65d8ef357ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f821cbd28bc82b00e9c01727baeca65d8ef357ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3434f1dd2c47fff3df159b9d62115c2df3fd6401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3434f1dd2c47fff3df159b9d62115c2df3fd6401", "html_url": "https://github.com/rust-lang/rust/commit/3434f1dd2c47fff3df159b9d62115c2df3fd6401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3434f1dd2c47fff3df159b9d62115c2df3fd6401/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de74c0dcab2efd50d68f70d15de3fced718e8c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de74c0dcab2efd50d68f70d15de3fced718e8c7a", "html_url": "https://github.com/rust-lang/rust/commit/de74c0dcab2efd50d68f70d15de3fced718e8c7a"}], "stats": {"total": 208, "additions": 184, "deletions": 24}, "files": [{"sha": "138a7a7a9cb282cd5999fc10452ef1696b9aa4fc", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 125, "deletions": 4, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -14,34 +14,42 @@ use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffs\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav},\n-    FilePosition, NavigationTarget, RangeInfo,\n+    runnables::runnable,\n+    FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n     pub implementations: bool,\n+    pub run: bool,\n+    pub debug: bool,\n }\n \n impl Default for HoverConfig {\n     fn default() -> Self {\n-        Self { implementations: true }\n+        Self { implementations: true, run: true, debug: true }\n     }\n }\n \n impl HoverConfig {\n-    pub const NO_ACTIONS: Self = Self { implementations: false };\n+    pub const NO_ACTIONS: Self = Self { implementations: false, run: false, debug: false };\n \n     pub fn any(&self) -> bool {\n-        self.implementations\n+        self.implementations || self.runnable()\n     }\n \n     pub fn none(&self) -> bool {\n         !self.any()\n     }\n+\n+    pub fn runnable(&self) -> bool {\n+        self.run || self.debug\n+    }\n }\n \n #[derive(Debug, Clone)]\n pub enum HoverAction {\n+    Runnable(Runnable),\n     Implementaion(FilePosition),\n }\n \n@@ -125,6 +133,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 res.push_action(action);\n             }\n \n+            if let Some(action) = runnable_action(&sema, name_kind, position.file_id) {\n+                res.push_action(action);\n+            }\n+\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -175,6 +187,28 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n     }\n }\n \n+fn runnable_action(\n+    sema: &Semantics<RootDatabase>,\n+    def: Definition,\n+    file_id: FileId,\n+) -> Option<HoverAction> {\n+    match def {\n+        Definition::ModuleDef(it) => match it {\n+            ModuleDef::Module(it) => match it.definition_source(sema.db).value {\n+                ModuleSource::Module(it) => runnable(&sema, it.syntax().clone(), file_id)\n+                    .map(|it| HoverAction::Runnable(it)),\n+                _ => None,\n+            },\n+            ModuleDef::Function(it) => {\n+                runnable(&sema, it.source(sema.db).value.syntax().clone(), file_id)\n+                    .map(|it| HoverAction::Runnable(it))\n+            }\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n fn hover_text(\n     docs: Option<String>,\n     desc: Option<String>,\n@@ -292,6 +326,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use insta::assert_debug_snapshot;\n \n     use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n@@ -309,6 +344,7 @@ mod tests {\n     fn assert_impl_action(action: &HoverAction, position: u32) {\n         let offset = match action {\n             HoverAction::Implementaion(pos) => pos.offset,\n+            it => panic!(\"Unexpected hover action: {:#?}\", it),\n         };\n         assert_eq!(offset, position.into());\n     }\n@@ -1176,4 +1212,89 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         assert_impl_action(&actions[0], 5);\n     }\n+\n+    #[test]\n+    fn test_hover_test_has_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            #[test]\n+            fn foo_<|>test() {}\n+            \",\n+            &[\"fn foo_test()\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                Runnable(\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..24,\n+                            name: \"foo_test\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                11..19,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_test_mod_has_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            mod tests<|> {\n+                #[test]\n+                fn foo_test() {}\n+            }\n+            \",\n+            &[\"mod tests\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                Runnable(\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..46,\n+                            name: \"tests\",\n+                            kind: MODULE,\n+                            focus_range: Some(\n+                                4..9,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"tests\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ),\n+            ]\n+            \"###);\n+    }\n }"}, {"sha": "fc57dc33d78d7af0bd6b1bba2f9b9f048e96b004", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -11,14 +11,14 @@ use ra_syntax::{\n \n use crate::{display::ToNav, FileId, NavigationTarget};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct Runnable {\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg_exprs: Vec<CfgExpr>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum TestId {\n     Name(String),\n     Path(String),\n@@ -33,7 +33,7 @@ impl fmt::Display for TestId {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n@@ -95,7 +95,11 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     source_file.syntax().descendants().filter_map(|i| runnable(&sema, i, file_id)).collect()\n }\n \n-fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode, file_id: FileId) -> Option<Runnable> {\n+pub(crate) fn runnable(\n+    sema: &Semantics<RootDatabase>,\n+    item: SyntaxNode,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n     match_ast! {\n         match item {\n             ast::FnDef(it) => runnable_fn(sema, it, file_id),\n@@ -171,7 +175,7 @@ fn runnable_fn(\n     Some(Runnable { nav, kind, cfg_exprs })\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Copy, Clone)]\n pub struct TestAttr {\n     pub ignore: bool,\n }"}, {"sha": "17671f89ee415db0bef17dff04d848e75e846906", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -285,6 +285,8 @@ impl Config {\n         set(value, \"/hoverActions/enable\", &mut use_hover_actions);\n         if use_hover_actions {\n             set(value, \"/hoverActions/implementations\", &mut self.hover.implementations);\n+            set(value, \"/hoverActions/run\", &mut self.hover.run);\n+            set(value, \"/hoverActions/debug\", &mut self.hover.debug);\n         } else {\n             self.hover = HoverConfig::NO_ACTIONS;\n         }"}, {"sha": "cae447eea8721ee838c0a7af4a2e588d41f94c51", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -18,8 +18,8 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n-    TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind,\n+    SearchScope, TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -403,12 +403,12 @@ pub fn handle_runnables(\n             if !runnable.nav.full_range().contains_inclusive(offset) {\n                 continue;\n             }\n-        }        \n+        }\n         if is_lib_target(&runnable, cargo_spec.as_ref()) {\n             continue;\n         }\n \n-        res.push(to_proto::runnable(&snap, file_id, runnable)?);\n+        res.push(to_proto::runnable(&snap, file_id, &runnable)?);\n     }\n \n     // Add `cargo check` and `cargo test` for the whole package\n@@ -550,7 +550,7 @@ pub fn handle_hover(\n             }),\n             range: Some(range),\n         },\n-        actions: prepare_hover_actions(&snap, info.info.actions()),\n+        actions: prepare_hover_actions(&snap, position.file_id, info.info.actions()),\n     };\n \n     Ok(Some(hover))\n@@ -818,7 +818,7 @@ pub fn handle_code_lens(\n \n             let action = runnable.action();\n             let range = to_proto::range(&line_index, runnable.nav.range());\n-            let r = to_proto::runnable(&snap, file_id, runnable)?;\n+            let r = to_proto::runnable(&snap, file_id, &runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {\n                     range,\n@@ -829,11 +829,8 @@ pub fn handle_code_lens(\n             }\n \n             if action.debugee && snap.config.lens.debug {\n-                let debug_lens = CodeLens {\n-                    range,\n-                    command: Some(debug_single_command(r)),\n-                    data: None,\n-                };\n+                let debug_lens =\n+                    CodeLens { range, command: Some(debug_single_command(r)), data: None };\n                 lenses.push(debug_lens);\n             }\n         }\n@@ -1183,8 +1180,33 @@ fn show_impl_command_link(\n     None\n }\n \n+fn to_runnable_action(\n+    snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n+    runnable: &Runnable,\n+) -> Option<lsp_ext::CommandLinkGroup> {\n+    to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n+        let mut group = lsp_ext::CommandLinkGroup::default();\n+\n+        let action = runnable.action();\n+        if snap.config.hover.run {\n+            let run_command = run_single_command(&r, action.run_title);\n+            group.commands.push(to_command_link(run_command, r.label.clone()));\n+        }\n+\n+        if snap.config.hover.debug {\n+            let hint = r.label.clone();\n+            let dbg_command = debug_single_command(r);\n+            group.commands.push(to_command_link(dbg_command, hint));\n+        }\n+\n+        group\n+    })\n+}\n+\n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover.none() || !snap.config.client_caps.hover_actions {\n@@ -1195,6 +1217,7 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n+            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r),\n         })\n         .collect()\n }\n@@ -1205,10 +1228,10 @@ fn is_lib_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>) -> b\n         if let Some(spec) = cargo_spec {\n             match spec.target_kind {\n                 TargetKind::Bin => return true,\n-                _ => ()\n+                _ => (),\n             }\n         }\n     }\n \n     false\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5daf037dabf38402be85fe8840238bb3cab9204b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -656,14 +656,14 @@ pub(crate) fn resolved_code_action(\n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n-    runnable: Runnable,\n+    runnable: &Runnable,\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(snap, file_id)?;\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n         CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.cfg_exprs)?;\n     let label = runnable.label(target);\n-    let location = location_link(snap, None, runnable.nav)?;\n+    let location = location_link(snap, None, runnable.nav.clone())?;\n \n     Ok(lsp_ext::Runnable {\n         label,"}, {"sha": "7fdb5c27d9d1f12a20e70f85bc9d8c92ad5be08e", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3434f1dd2c47fff3df159b9d62115c2df3fd6401/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3434f1dd2c47fff3df159b9d62115c2df3fd6401/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3434f1dd2c47fff3df159b9d62115c2df3fd6401", "patch": "@@ -486,6 +486,16 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.hoverActions.run\": {\n+                    \"markdownDescription\": \"Whether to show `Run` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.hoverActions.debug\": {\n+                    \"markdownDescription\": \"Whether to show `Debug` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n                 \"rust-analyzer.linkedProjects\": {\n                     \"markdownDescription\": [\n                         \"Disable project auto-discovery in favor of explicitly specified set of projects.\","}]}