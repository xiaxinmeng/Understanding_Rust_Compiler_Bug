{"sha": "7499cb543dbf111b1d92b808a91be730e761849f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTljYjU0M2RiZjExMWIxZDkyYjgwOGE5MWJlNzMwZTc2MTg0OWY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-10-10T05:52:58Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-10-10T05:52:58Z"}, "message": "Fix #2937", "tree": {"sha": "4c501e7070f73bea7ef99fcbe1f4fef6848988fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c501e7070f73bea7ef99fcbe1f4fef6848988fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7499cb543dbf111b1d92b808a91be730e761849f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7499cb543dbf111b1d92b808a91be730e761849f", "html_url": "https://github.com/rust-lang/rust/commit/7499cb543dbf111b1d92b808a91be730e761849f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7499cb543dbf111b1d92b808a91be730e761849f/comments", "author": null, "committer": null, "parents": [{"sha": "f6882ede4dc32684e000d256644c9e192ea8c738", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6882ede4dc32684e000d256644c9e192ea8c738", "html_url": "https://github.com/rust-lang/rust/commit/f6882ede4dc32684e000d256644c9e192ea8c738"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "7c15eb677cc6f74d14b2a7da6e1a357116d02e82", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7499cb543dbf111b1d92b808a91be730e761849f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7499cb543dbf111b1d92b808a91be730e761849f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7499cb543dbf111b1d92b808a91be730e761849f", "patch": "@@ -1069,12 +1069,19 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n /// Checks for the `EXPECT_FUN_CALL` lint.\n fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     fn extract_format_args(arg: &hir::Expr) -> Option<&hir::HirVec<hir::Expr>> {\n-        if let hir::ExprKind::AddrOf(_, ref addr_of) = arg.node {\n-            if let hir::ExprKind::Call(ref inner_fun, ref inner_args) = addr_of.node {\n-                if is_expn_of(inner_fun.span, \"format\").is_some() && inner_args.len() == 1 {\n-                    if let hir::ExprKind::Call(_, ref format_args) = inner_args[0].node {\n-                        return Some(format_args);\n-                    }\n+        let arg  = match &arg.node {\n+            hir::ExprKind::AddrOf(_, expr)=> expr,\n+            hir::ExprKind::MethodCall(method_name, _, args)\n+                if method_name.ident.name == \"as_str\" ||\n+                   method_name.ident.name == \"as_ref\"\n+                => &args[0],\n+            _ => arg,\n+        };\n+\n+        if let hir::ExprKind::Call(ref inner_fun, ref inner_args) = arg.node {\n+            if is_expn_of(inner_fun.span, \"format\").is_some() && inner_args.len() == 1 {\n+                if let hir::ExprKind::Call(_, ref format_args) = inner_args[0].node {\n+                    return Some(format_args);\n                 }\n             }\n         }\n@@ -1111,7 +1118,8 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n                 | hir::ExprKind::MethodCall(..)\n                 // These variants are debatable or require further examination\n                 | hir::ExprKind::If(..)\n-                | hir::ExprKind::Match(..) => true,\n+                | hir::ExprKind::Match(..)\n+                | hir::ExprKind::Block{ .. } => true,\n                 _ => false,\n             }\n         }\n@@ -1165,7 +1173,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             span_replace_word,\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n-            format!(\"unwrap_or_else({} panic!({}))\", closure, sugg),\n+            format!(\"unwrap_or_else({} {{ let msg = {}; panic!(msg) }}))\", closure, sugg),\n         );\n     }\n "}, {"sha": "e247a3d64501b30e39f6fe31c062f89c0bb14a59", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7499cb543dbf111b1d92b808a91be730e761849f/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7499cb543dbf111b1d92b808a91be730e761849f/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=7499cb543dbf111b1d92b808a91be730e761849f", "patch": "@@ -14,7 +14,7 @@\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(clippy::blacklisted_name, unused, clippy::print_stdout, clippy::non_ascii_literal, clippy::new_without_default,\n     clippy::new_without_default_derive, clippy::missing_docs_in_private_items, clippy::needless_pass_by_value,\n-    clippy::default_trait_access, clippy::use_self)]\n+    clippy::default_trait_access, clippy::use_self, clippy::useless_format)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -403,6 +403,9 @@ fn expect_fun_call() {\n     //Issue #2979 - this should not lint\n     let msg = \"bar\";\n     Some(\"foo\").expect(msg);\n+\n+    Some(\"foo\").expect({ &format!(\"error\") });\n+    Some(\"foo\").expect(format!(\"error\").as_ref());\n }\n \n /// Checks implementation of `ITER_NTH` lint"}, {"sha": "124edee6a5297a39e401c316742b265410e9a76c", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7499cb543dbf111b1d92b808a91be730e761849f/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7499cb543dbf111b1d92b808a91be730e761849f/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=7499cb543dbf111b1d92b808a91be730e761849f", "patch": "@@ -361,7 +361,7 @@ error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:379:26\n     |\n 379 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:389:25\n@@ -373,85 +373,97 @@ error: use of `expect` followed by a function call\n    --> $DIR/methods.rs:392:25\n     |\n 392 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n+    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+   --> $DIR/methods.rs:407:17\n+    |\n+407 |     Some(\"foo\").expect({ &format!(\"error\") });\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { let msg = { &format!(\"error\") }; panic!(msg) }))`\n+\n+error: use of `expect` followed by a function call\n+   --> $DIR/methods.rs:408:17\n+    |\n+408 |     Some(\"foo\").expect(format!(\"error\").as_ref());\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:416:23\n+   --> $DIR/methods.rs:419:23\n     |\n-416 |         let bad_vec = some_vec.iter().nth(3);\n+419 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:417:26\n+   --> $DIR/methods.rs:420:26\n     |\n-417 |         let bad_slice = &some_vec[..].iter().nth(3);\n+420 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:418:31\n+   --> $DIR/methods.rs:421:31\n     |\n-418 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+421 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:419:29\n+   --> $DIR/methods.rs:422:29\n     |\n-419 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+422 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:424:23\n+   --> $DIR/methods.rs:427:23\n     |\n-424 |         let bad_vec = some_vec.iter_mut().nth(3);\n+427 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:427:26\n+   --> $DIR/methods.rs:430:26\n     |\n-427 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+430 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:430:29\n+   --> $DIR/methods.rs:433:29\n     |\n-430 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+433 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:442:13\n+   --> $DIR/methods.rs:445:13\n     |\n-442 |     let _ = some_vec.iter().skip(42).next();\n+445 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:443:13\n+   --> $DIR/methods.rs:446:13\n     |\n-443 |     let _ = some_vec.iter().cycle().skip(42).next();\n+446 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:444:13\n+   --> $DIR/methods.rs:447:13\n     |\n-444 |     let _ = (1..10).skip(10).next();\n+447 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:445:14\n+   --> $DIR/methods.rs:448:14\n     |\n-445 |     let _ = &some_vec[..].iter().skip(3).next();\n+448 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:454:13\n+   --> $DIR/methods.rs:457:13\n     |\n-454 |     let _ = opt.unwrap();\n+457 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 56 previous errors\n+error: aborting due to 58 previous errors\n "}]}