{"sha": "a368898de758e1b8def6c9060044a5b40eb79e84", "node_id": "C_kwDOAAsO6NoAKGEzNjg4OThkZTc1OGUxYjhkZWY2YzkwNjAwNDRhNWI0MGViNzllODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T17:49:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T17:49:39Z"}, "message": "Auto merge of #111028 - compiler-errors:attr-query-no-caching, r=cjgillot\n\nMake some simple queries no longer cache on disk\n\nI don't think we need to cache queries with really simple local providers, like loading hir and accessing an attr\n\nr? `@ghost`", "tree": {"sha": "1768f6473983ad9f96fc467ace860e3498b71f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1768f6473983ad9f96fc467ace860e3498b71f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a368898de758e1b8def6c9060044a5b40eb79e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a368898de758e1b8def6c9060044a5b40eb79e84", "html_url": "https://github.com/rust-lang/rust/commit/a368898de758e1b8def6c9060044a5b40eb79e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a368898de758e1b8def6c9060044a5b40eb79e84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d795a6e6e19d56b235d1dbd4f5941404cf5918c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d795a6e6e19d56b235d1dbd4f5941404cf5918c", "html_url": "https://github.com/rust-lang/rust/commit/9d795a6e6e19d56b235d1dbd4f5941404cf5918c"}, {"sha": "37f7db87b06bc8de7af3249cb7fbc90736ddf3d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f7db87b06bc8de7af3249cb7fbc90736ddf3d0", "html_url": "https://github.com/rust-lang/rust/commit/37f7db87b06bc8de7af3249cb7fbc90736ddf3d0"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "be2657d25a6947edee5d4f538e1fe1fce020d50e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a368898de758e1b8def6c9060044a5b40eb79e84/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368898de758e1b8def6c9060044a5b40eb79e84/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a368898de758e1b8def6c9060044a5b40eb79e84", "patch": "@@ -617,13 +617,11 @@ rustc_queries! {\n     /// `is_const_fn` function. Consider using `is_const_fn` or `is_const_fn_raw` instead.\n     query constness(key: DefId) -> hir::Constness {\n         desc { |tcx| \"checking if item is const: `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -641,14 +639,12 @@ rustc_queries! {\n     /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n     query is_foreign_item(key: DefId) -> bool {\n         desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -747,7 +743,6 @@ rustc_queries! {\n     }\n     query impl_polarity(impl_id: DefId) -> ty::ImplPolarity {\n         desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(impl_id) }\n-        cache_on_disk_if { impl_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -879,7 +874,6 @@ rustc_queries! {\n     }\n     query diagnostic_only_typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { true }\n     }\n \n     query used_trait_imports(key: LocalDefId) -> &'tcx UnordSet<LocalDefId> {\n@@ -1144,20 +1138,17 @@ rustc_queries! {\n \n     query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n         desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     /// Gets the rendered value of the specified constant or associated constant.\n     /// Used by rustdoc.\n     query rendered_const(def_id: DefId) -> &'tcx String {\n         arena_cache\n         desc { |tcx| \"rendering constant initializer of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     query impl_parent(def_id: DefId) -> Option<DefId> {\n         desc { |tcx| \"computing specialization parent impl of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1410,7 +1401,6 @@ rustc_queries! {\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n         feedable\n     }"}]}