{"sha": "1dd9801fa53bf77aa903d2b705959738b70729fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDk4MDFmYTUzYmY3N2FhOTAzZDJiNzA1OTU5NzM4YjcwNzI5ZmM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-04-12T12:45:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-12T12:45:47Z"}, "message": "Rollup merge of #41232 - arielb1:mir-rvalues, r=eddyb\n\nmove rvalue checking to MIR", "tree": {"sha": "9f685511a6ac5bcf506730a3d5cabe38554ab9af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f685511a6ac5bcf506730a3d5cabe38554ab9af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd9801fa53bf77aa903d2b705959738b70729fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd9801fa53bf77aa903d2b705959738b70729fc", "html_url": "https://github.com/rust-lang/rust/commit/1dd9801fa53bf77aa903d2b705959738b70729fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd9801fa53bf77aa903d2b705959738b70729fc/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092f19ac99c244236e31ea34eea9acdd557a79ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/092f19ac99c244236e31ea34eea9acdd557a79ae", "html_url": "https://github.com/rust-lang/rust/commit/092f19ac99c244236e31ea34eea9acdd557a79ae"}, {"sha": "540a069761c1184ee2998f23a24b76c97c274043", "url": "https://api.github.com/repos/rust-lang/rust/commits/540a069761c1184ee2998f23a24b76c97c274043", "html_url": "https://github.com/rust-lang/rust/commit/540a069761c1184ee2998f23a24b76c97c274043"}], "stats": {"total": 421, "additions": 197, "deletions": 224}, "files": [{"sha": "3ff8ffb35054ad4be9764f6c80ea5b4f8b1481a1", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -22,7 +22,8 @@ impl_stable_hash_for!(struct mir::SourceInfo { span, scope });\n impl_stable_hash_for!(enum mir::Mutability { Mut, Not });\n impl_stable_hash_for!(enum mir::BorrowKind { Shared, Unique, Mut });\n impl_stable_hash_for!(enum mir::LocalKind { Var, Temp, Arg, ReturnPointer });\n-impl_stable_hash_for!(struct mir::LocalDecl<'tcx> { mutability, ty, name, source_info });\n+impl_stable_hash_for!(struct mir::LocalDecl<'tcx> { mutability, ty, name, source_info,\n+is_user_variable});\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n impl_stable_hash_for!(struct mir::Terminator<'tcx> { source_info, kind });"}, {"sha": "9ff64b295b765ee8a5f67026f15312c2938cadc0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -197,10 +197,10 @@ impl<'tcx> Mir<'tcx> {\n     pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n         (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n-            if self.local_decls[local].source_info.is_none() {\n-                Some(local)\n-            } else {\n+            if self.local_decls[local].is_user_variable {\n                 None\n+            } else {\n+                Some(local)\n             }\n         })\n     }\n@@ -210,10 +210,10 @@ impl<'tcx> Mir<'tcx> {\n     pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n         (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n-            if self.local_decls[local].source_info.is_none() {\n-                None\n-            } else {\n+            if self.local_decls[local].is_user_variable {\n                 Some(local)\n+            } else {\n+                None\n             }\n         })\n     }\n@@ -370,6 +370,9 @@ pub struct LocalDecl<'tcx> {\n     /// Temporaries and the return pointer are always mutable.\n     pub mutability: Mutability,\n \n+    /// True if this corresponds to a user-declared local variable.\n+    pub is_user_variable: bool,\n+\n     /// Type of this local.\n     pub ty: Ty<'tcx>,\n \n@@ -379,37 +382,40 @@ pub struct LocalDecl<'tcx> {\n     /// to generate better debuginfo.\n     pub name: Option<Name>,\n \n-    /// For user-declared variables, stores their source information.\n-    ///\n-    /// For temporaries, this is `None`.\n-    ///\n-    /// This is the primary way to differentiate between user-declared\n-    /// variables and compiler-generated temporaries.\n-    pub source_info: Option<SourceInfo>,\n+    /// Source info of the local.\n+    pub source_info: SourceInfo,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n     /// Create a new `LocalDecl` for a temporary.\n     #[inline]\n-    pub fn new_temp(ty: Ty<'tcx>) -> Self {\n+    pub fn new_temp(ty: Ty<'tcx>, span: Span) -> Self {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: ty,\n             name: None,\n-            source_info: None,\n+            source_info: SourceInfo {\n+                span: span,\n+                scope: ARGUMENT_VISIBILITY_SCOPE\n+            },\n+            is_user_variable: false\n         }\n     }\n \n     /// Builds a `LocalDecl` for the return pointer.\n     ///\n     /// This must be inserted into the `local_decls` list as the first local.\n     #[inline]\n-    pub fn new_return_pointer(return_ty: Ty) -> LocalDecl {\n+    pub fn new_return_pointer(return_ty: Ty, span: Span) -> LocalDecl {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n-            source_info: None,\n+            source_info: SourceInfo {\n+                span: span,\n+                scope: ARGUMENT_VISIBILITY_SCOPE\n+            },\n             name: None,     // FIXME maybe we do want some name here?\n+            is_user_variable: false\n         }\n     }\n }"}, {"sha": "83963de8b0014e69df865ebad04a3db22be49328", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -630,12 +630,11 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                     name: _,\n                     ref $($mutability)* source_info,\n+                    is_user_variable: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty);\n-                if let Some(ref $($mutability)* info) = *source_info {\n-                    self.visit_source_info(info);\n-                }\n+                self.visit_source_info(source_info);\n             }\n \n             fn super_visibility_scope(&mut self,"}, {"sha": "ca313622a3afd1928e5f2ffd1210d6a119f0fbc0", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -307,12 +307,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         data\n     }\n \n-    fn create_drop_flag(&mut self, index: MovePathIndex) {\n+    fn create_drop_flag(&mut self, index: MovePathIndex, span: Span) {\n         let tcx = self.tcx;\n         let patch = &mut self.patch;\n         debug!(\"create_drop_flag({:?})\", self.mir.span);\n         self.drop_flags.entry(index).or_insert_with(|| {\n-            patch.new_temp(tcx.types.bool)\n+            patch.new_temp(tcx.types.bool, span)\n         });\n     }\n \n@@ -374,7 +374,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\"collect_drop_flags: collecting {:?} from {:?}@{:?} - {:?}\",\n                        child, location, path, (maybe_live, maybe_dead));\n                 if maybe_live && maybe_dead {\n-                    self.create_drop_flag(child)\n+                    self.create_drop_flag(child, terminator.source_info.span)\n                 }\n             });\n         }"}, {"sha": "20ae561431b5491151c7fca1236cd61334b14b3a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -35,7 +35,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{ast_validation, no_asm, loops, consts, rvalues,\n+use rustc_passes::{ast_validation, no_asm, loops, consts,\n                    static_recursion, hir_stats, mir_stats};\n use rustc_const_eval::check_match;\n use super::Compilation;\n@@ -958,10 +958,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"liveness checking\",\n              || middle::liveness::check_crate(tcx));\n \n-        time(time_passes,\n-             \"rvalue checking\",\n-             || rvalues::check_crate(tcx));\n-\n         time(time_passes,\n              \"MIR dump\",\n              || mir::mir_map::build_mir_for_crate(tcx));\n@@ -977,8 +973,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             // in stage 4 below.\n             passes.push_hook(box mir::transform::dump_mir::DumpMir);\n             passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n-            passes.push_pass(box mir::transform::qualify_consts::QualifyAndPromoteConstants);\n             passes.push_pass(box mir::transform::type_check::TypeckMir);\n+            passes.push_pass(box mir::transform::qualify_consts::QualifyAndPromoteConstants);\n             passes.push_pass(\n                 box mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n             passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));"}, {"sha": "df2841a66826980d6cd1ae96739c3ed4cba53b05", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -62,7 +62,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let idx = unpack!(block = this.as_operand(block, None, index));\n \n                 // bounds check:\n-                let (len, lt) = (this.temp(usize_ty.clone()), this.temp(bool_ty));\n+                let (len, lt) = (this.temp(usize_ty.clone(), expr_span),\n+                                 this.temp(bool_ty, expr_span));\n                 this.cfg.push_assign(block, source_info, // len = len(slice)\n                                      &len, Rvalue::Len(slice.clone()));\n                 this.cfg.push_assign(block, source_info, // lt = idx < len"}, {"sha": "fb547332c5f58b79bffe08dd478bdcc26d9c4a32", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let bool_ty = this.hir.bool_ty();\n \n                     let minval = this.minval_literal(expr_span, expr.ty);\n-                    let is_min = this.temp(bool_ty);\n+                    let is_min = this.temp(bool_ty, expr_span);\n \n                     this.cfg.push_assign(block, source_info, &is_min,\n                                          Rvalue::BinaryOp(BinOp::Eq, arg.clone(), minval));\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Box { value, value_extents } => {\n                 let value = this.hir.mirror(value);\n-                let result = this.temp(expr.ty);\n+                let result = this.temp(expr.ty, expr_span);\n                 // to start, malloc some memory of suitable type (thus far, uninitialized):\n                 this.cfg.push_assign(block, source_info, &result, Rvalue::Box(value.ty));\n                 this.in_scope(value_extents, block, |this| {\n@@ -260,7 +260,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n             let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty], false);\n-            let result_value = self.temp(result_tup);\n+            let result_value = self.temp(result_tup, span);\n \n             self.cfg.push_assign(block, source_info,\n                                  &result_value, Rvalue::CheckedBinaryOp(op,\n@@ -301,7 +301,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n \n                 // Check for / 0\n-                let is_zero = self.temp(bool_ty);\n+                let is_zero = self.temp(bool_ty, span);\n                 let zero = self.zero_literal(span, ty);\n                 self.cfg.push_assign(block, source_info, &is_zero,\n                                      Rvalue::BinaryOp(BinOp::Eq, rhs.clone(), zero));\n@@ -315,9 +315,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let neg_1 = self.neg_1_literal(span, ty);\n                     let min = self.minval_literal(span, ty);\n \n-                    let is_neg_1 = self.temp(bool_ty);\n-                    let is_min   = self.temp(bool_ty);\n-                    let of       = self.temp(bool_ty);\n+                    let is_neg_1 = self.temp(bool_ty, span);\n+                    let is_min   = self.temp(bool_ty, span);\n+                    let of       = self.temp(bool_ty, span);\n \n                     // this does (rhs == -1) & (lhs == MIN). It could short-circuit instead\n "}, {"sha": "e4598b4143871e2bc3a6f059ab7188f61d8c2b83", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -44,8 +44,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n \n         let expr_ty = expr.ty.clone();\n-        let temp = this.temp(expr_ty.clone());\n         let expr_span = expr.span;\n+        let temp = this.temp(expr_ty.clone(), expr_span);\n         let source_info = this.source_info(expr_span);\n \n         if expr.temp_lifetime_was_shrunk && this.hir.needs_drop(expr_ty) {"}, {"sha": "c03432312b0ab6c4adc235e2a3036603c6f3854b", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             _ => {\n                 let expr_ty = expr.ty;\n-                let temp = this.temp(expr.ty.clone());\n+                let temp = this.temp(expr.ty.clone(), expr_span);\n                 unpack!(block = this.into(&temp, block, expr));\n                 unpack!(block = this.build_drop(block, expr_span, temp, expr_ty));\n                 block.unit()"}, {"sha": "ddeec1fe6d0bae009c53f07e9896dd31da33f93c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -710,7 +710,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             mutability: mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n-            source_info: Some(source_info),\n+            source_info: source_info,\n+            is_user_variable: true,\n         });\n         self.var_indices.insert(var_id, var);\n "}, {"sha": "5fece4d6a5d2387aae043ceb46cd070b98ea66e5", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);\n                 let discr_ty = adt_def.repr.discr_type().to_ty(tcx);\n-                let discr = self.temp(discr_ty);\n+                let discr = self.temp(discr_ty, test.span);\n                 self.cfg.push_assign(block, source_info, &discr,\n                                      Rvalue::Discriminant(lvalue.clone()));\n                 assert_eq!(values.len() + 1, targets.len());\n@@ -270,7 +270,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     if let ty::TyRef(region, mt) = ty.sty {\n                         if let ty::TyArray(_, _) = mt.ty.sty {\n                             ty = tcx.mk_imm_ref(region, tcx.mk_slice(tcx.types.u8));\n-                            let val_slice = self.temp(ty);\n+                            let val_slice = self.temp(ty, test.span);\n                             self.cfg.push_assign(block, source_info, &val_slice,\n                                                  Rvalue::Cast(CastKind::Unsize, val, ty));\n                             val = Operand::Consume(val_slice);\n@@ -285,7 +285,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         value: value.clone()\n                     });\n \n-                    let slice = self.temp(ty);\n+                    let slice = self.temp(ty, test.span);\n                     self.cfg.push_assign(block, source_info, &slice,\n                                          Rvalue::Cast(CastKind::Unsize, array, ty));\n                     Operand::Consume(slice)\n@@ -304,7 +304,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty]);\n \n                     let bool_ty = self.hir.bool_ty();\n-                    let eq_result = self.temp(bool_ty);\n+                    let eq_result = self.temp(bool_ty, test.span);\n                     let eq_block = self.cfg.start_new_block();\n                     let cleanup = self.diverge_cleanup();\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n@@ -349,7 +349,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             TestKind::Len { len, op } => {\n                 let (usize_ty, bool_ty) = (self.hir.usize_ty(), self.hir.bool_ty());\n-                let (actual, result) = (self.temp(usize_ty), self.temp(bool_ty));\n+                let (actual, result) = (self.temp(usize_ty, test.span),\n+                                        self.temp(bool_ty, test.span));\n \n                 // actual = len(lvalue)\n                 self.cfg.push_assign(block, source_info,\n@@ -383,7 +384,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                left: Operand<'tcx>,\n                right: Operand<'tcx>) -> BasicBlock {\n         let bool_ty = self.hir.bool_ty();\n-        let result = self.temp(bool_ty);\n+        let result = self.temp(bool_ty, span);\n \n         // result = op(left, right)\n         let source_info = self.source_info(span);"}, {"sha": "35a8b245f2bb64203a7e19e14d8c891015e02821", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -27,8 +27,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     ///\n     /// NB: **No cleanup is scheduled for this temporary.** You should\n     /// call `schedule_drop` once the temporary is initialized.\n-    pub fn temp(&mut self, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n-        let temp = self.local_decls.push(LocalDecl::new_temp(ty));\n+    pub fn temp(&mut self, ty: Ty<'tcx>, span: Span) -> Lvalue<'tcx> {\n+        let temp = self.local_decls.push(LocalDecl::new_temp(ty, span));\n         let lvalue = Lvalue::Local(temp);\n         debug!(\"temp: created temp {:?} with type {:?}\",\n                lvalue, self.local_decls[temp].ty);\n@@ -106,7 +106,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                       value: u64)\n                       -> Lvalue<'tcx> {\n         let usize_ty = self.hir.usize_ty();\n-        let temp = self.temp(usize_ty);\n+        let temp = self.temp(usize_ty, source_info.span);\n         self.cfg.push_assign_constant(\n             block, source_info, &temp,\n             Constant {"}, {"sha": "ef3fa23500b34395b9f79ce79fc841beac3d75ad", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -249,7 +249,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             visibility_scopes: IndexVec::new(),\n             visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n             breakable_scopes: vec![],\n-            local_decls: IndexVec::from_elem_n(LocalDecl::new_return_pointer(return_ty), 1),\n+            local_decls: IndexVec::from_elem_n(LocalDecl::new_return_pointer(return_ty,\n+                                                                             span), 1),\n             var_indices: NodeMap(),\n             unit_temp: None,\n             cached_resume_block: None,\n@@ -304,8 +305,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Not,\n                 ty: ty,\n-                source_info: None,\n+                source_info: SourceInfo {\n+                    scope: ARGUMENT_VISIBILITY_SCOPE,\n+                    span: pattern.map_or(self.fn_span, |pat| pat.span)\n+                },\n                 name: name,\n+                is_user_variable: false,\n             });\n         }\n \n@@ -341,7 +346,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Some(ref tmp) => tmp.clone(),\n             None => {\n                 let ty = self.hir.unit_ty();\n-                let tmp = self.temp(ty);\n+                let fn_span = self.fn_span;\n+                let tmp = self.temp(ty, fn_span);\n                 self.unit_temp = Some(tmp.clone());\n                 tmp\n             }"}, {"sha": "bb07081fe433b74dab3ccf6ae1fbce3480616218", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -244,6 +244,39 @@ let baz: bool = { (&FOO as *const i32) == (&BAR as *const i32) };\n ```\n \"##,\n \n+E0161: r##\"\n+A value was moved. However, its size was not known at compile time, and only\n+values of a known size can be moved.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<[isize]> = box *array;\n+    // error: cannot move a value of type [isize]: the size of [isize] cannot\n+    //        be statically determined\n+}\n+```\n+\n+In Rust, you can only move a value when its size is known at compile time.\n+\n+To work around this restriction, consider \"hiding\" the value behind a reference:\n+either `&x` or `&mut x`. Since a reference has a fixed size, this lets you move\n+it around as usual. Example:\n+\n+```\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<&[isize]> = box array; // ok!\n+}\n+```\n+\"##,\n+\n E0396: r##\"\n The value behind a raw pointer can't be determined at compile-time\n (or even link-time), which means it can't be used in a constant"}, {"sha": "0cec84d16a81c44740e5b0399c73351c28f01cd7", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -137,16 +137,20 @@ enum CallKind {\n     Direct(DefId),\n }\n \n-fn temp_decl(mutability: Mutability, ty: Ty) -> LocalDecl {\n-    LocalDecl { mutability, ty, name: None, source_info: None }\n+fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n+    LocalDecl {\n+        mutability, ty, name: None,\n+        source_info: SourceInfo { scope: ARGUMENT_VISIBILITY_SCOPE, span },\n+        is_user_variable: false\n+    }\n }\n \n-fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>)\n+fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n     -> IndexVec<Local, LocalDecl<'tcx>>\n {\n-    iter::once(temp_decl(Mutability::Mut, sig.output()))\n+    iter::once(temp_decl(Mutability::Mut, sig.output(), span))\n         .chain(sig.inputs().iter().map(\n-            |ity| temp_decl(Mutability::Not, ity)))\n+            |ity| temp_decl(Mutability::Not, ity, span)))\n         .collect()\n }\n \n@@ -188,7 +192,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         ),\n         IndexVec::new(),\n         sig.output(),\n-        local_decls_for_sig(&sig),\n+        local_decls_for_sig(&sig, span),\n         sig.inputs().len(),\n         vec![],\n         span\n@@ -297,7 +301,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n \n     debug!(\"build_call_shim: sig={:?}\", sig);\n \n-    let mut local_decls = local_decls_for_sig(&sig);\n+    let mut local_decls = local_decls_for_sig(&sig, span);\n     let source_info = SourceInfo { span, scope: ARGUMENT_VISIBILITY_SCOPE };\n \n     let rcvr_arg = Local::new(1+0);\n@@ -317,7 +321,8 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                 tcx.mk_ref(re_erased, ty::TypeAndMut {\n                     ty: sig.inputs()[0],\n                     mutbl: hir::Mutability::MutMutable\n-                })\n+                }),\n+                span\n             ));\n             statements.push(Statement {\n                 source_info: source_info,\n@@ -442,7 +447,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n \n     debug!(\"build_ctor: def_id={:?} sig={:?} fields={:?}\", def_id, sig, fields);\n \n-    let local_decls = local_decls_for_sig(&sig);\n+    let local_decls = local_decls_for_sig(&sig, span);\n \n     let source_info = SourceInfo {\n         span: span,"}, {"sha": "ac2bdaad24f766a397d2f5c53da0b3bc0bf877f1", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -461,11 +461,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 for loc in callee_mir.vars_and_temps_iter() {\n                     let mut local = callee_mir.local_decls[loc].clone();\n \n-                    if let Some(ref mut source_info) = local.source_info {\n-                        source_info.scope = scope_map[source_info.scope];\n-\n-                        source_info.span = callsite.location.span;\n-                    }\n+                    local.source_info.scope = scope_map[local.source_info.scope];\n+                    local.source_info.span = callsite.location.span;\n \n                     let idx = caller_mir.local_decls.push(local);\n                     local_map.push(idx);\n@@ -506,7 +503,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n                     let ty = dest.ty(caller_mir, self.tcx);\n \n-                    let temp = LocalDecl::new_temp(ty);\n+                    let temp = LocalDecl::new_temp(ty, callsite.location.span);\n \n                     let tmp = caller_mir.local_decls.push(temp);\n                     let tmp = Lvalue::Local(tmp);\n@@ -590,7 +587,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             arg.deref());\n \n         let ty = arg.ty(caller_mir, self.tcx);\n-        let ref_tmp = LocalDecl::new_temp(ty);\n+        let ref_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n         let ref_tmp = caller_mir.local_decls.push(ref_tmp);\n         let ref_tmp = Lvalue::Local(ref_tmp);\n \n@@ -611,7 +608,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let raw_ptr = Rvalue::Cast(CastKind::Misc, Operand::Consume(ref_tmp), ptr_ty);\n \n-        let cast_tmp = LocalDecl::new_temp(ptr_ty);\n+        let cast_tmp = LocalDecl::new_temp(ptr_ty, callsite.location.span);\n         let cast_tmp = caller_mir.local_decls.push(cast_tmp);\n         let cast_tmp = Lvalue::Local(cast_tmp);\n \n@@ -645,7 +642,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n             let ty = arg.ty(caller_mir, tcx);\n \n-            let arg_tmp = LocalDecl::new_temp(ty);\n+            let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n             let arg_tmp = caller_mir.local_decls.push(arg_tmp);\n             let arg_tmp = Lvalue::Local(arg_tmp);\n "}, {"sha": "ed9a0d3809f245886e0aa6e41bee1c7f76ba3d7f", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -208,7 +208,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n         let no_stmts = self.source[loc.block].statements.len();\n         let new_temp = self.promoted.local_decls.push(\n-            LocalDecl::new_temp(self.source.local_decls[temp].ty));\n+            LocalDecl::new_temp(self.source.local_decls[temp].ty,\n+                                self.source.local_decls[temp].source_info.span));\n \n         debug!(\"promote({:?} @ {:?}/{:?}, {:?})\",\n                temp, loc, no_stmts, self.keep_original);\n@@ -379,7 +380,8 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         };\n \n         // Declare return pointer local\n-        let initial_locals = iter::once(LocalDecl::new_return_pointer(ty)).collect();\n+        let initial_locals = iter::once(LocalDecl::new_return_pointer(ty, span))\n+            .collect();\n \n         let mut promoter = Promoter {\n             promoted: Mir::new("}, {"sha": "1313b24fa74f5eecc5311586c9f12e10f406b51c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -881,7 +881,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // Avoid a generic error for other uses of arguments.\n                 if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n-                    span_err!(self.tcx.sess, decl.source_info.unwrap().span, E0022,\n+                    span_err!(self.tcx.sess, decl.source_info.span, E0022,\n                               \"arguments of constant functions can only \\\n                                be immutable by-value bindings\");\n                     return;"}, {"sha": "bfb08de56d8bb899b15509b8f4d849992851bd62", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -24,6 +24,7 @@ use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n \n fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n@@ -87,6 +88,11 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.sanitize_type(rvalue, rval_ty);\n     }\n \n+    fn visit_local_decl(&mut self, local_decl: &LocalDecl<'tcx>) {\n+        self.super_local_decl(local_decl);\n+        self.sanitize_type(local_decl, local_decl.ty);\n+    }\n+\n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n         self.sanitize_type(&\"return type\", mir.return_ty);\n         for local_decl in &mir.local_decls {\n@@ -317,6 +323,7 @@ pub struct TypeChecker<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fulfillment_cx: traits::FulfillmentContext<'tcx>,\n     last_span: Span,\n     body_id: ast::NodeId,\n+    reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n }\n \n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n@@ -326,6 +333,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             fulfillment_cx: traits::FulfillmentContext::new(),\n             last_span: DUMMY_SP,\n             body_id: body_id,\n+            reported_errors: FxHashSet(),\n         }\n     }\n \n@@ -641,9 +649,43 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n+    fn check_local(&mut self, mir: &Mir<'gcx>, local: Local, local_decl: &LocalDecl<'gcx>) {\n+        match mir.local_kind(local) {\n+            LocalKind::ReturnPointer | LocalKind::Arg => {\n+                // return values of normal functions are required to be\n+                // sized by typeck, but return values of ADT constructors are\n+                // not because we don't include a `Self: Sized` bounds on them.\n+                //\n+                // Unbound parts of arguments were never required to be Sized\n+                // - maybe we should make that a warning.\n+                return\n+            }\n+            LocalKind::Var | LocalKind::Temp => {}\n+        }\n+\n+        let span = local_decl.source_info.span;\n+        let ty = local_decl.ty;\n+        if !ty.is_sized(self.tcx().global_tcx(), self.infcx.param_env(), span) {\n+            // in current MIR construction, all non-control-flow rvalue\n+            // expressions evaluate through `as_temp` or `into` a return\n+            // slot or local, so to find all unsized rvalues it is enough\n+            // to check all temps, return slots and locals.\n+            if let None = self.reported_errors.replace((ty, span)) {\n+                span_err!(self.tcx().sess, span, E0161,\n+                          \"cannot move a value of type {0}: the size of {0} \\\n+                           cannot be statically determined\", ty);\n+            }\n+        }\n+    }\n+\n+    fn typeck_mir(&mut self, mir: &Mir<'gcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n+\n+        for (local, local_decl) in mir.local_decls.iter_enumerated() {\n+            self.check_local(mir, local, local_decl);\n+        }\n+\n         for block in mir.basic_blocks() {\n             for stmt in &block.statements {\n                 if stmt.source_info.span != DUMMY_SP {\n@@ -698,16 +740,18 @@ impl TypeckMir {\n impl<'tcx> MirPass<'tcx> for TypeckMir {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>) {\n-        debug!(\"run_pass: {}\", tcx.node_path_str(src.item_id()));\n+        let item_id = src.item_id();\n+        let def_id = tcx.hir.local_def_id(item_id);\n+        debug!(\"run_pass: {}\", tcx.item_path_str(def_id));\n \n         if tcx.sess.err_count() > 0 {\n             // compiling a broken program can obviously result in a\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n-        let param_env = ty::ParameterEnvironment::for_item(tcx, src.item_id());\n+        let param_env = ty::ParameterEnvironment::for_item(tcx, item_id);\n         tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n-            let mut checker = TypeChecker::new(&infcx, src.item_id());\n+            let mut checker = TypeChecker::new(&infcx, item_id);\n             {\n                 let mut verifier = TypeVerifier::new(&mut checker, mir);\n                 verifier.visit_mir(mir);"}, {"sha": "04a1fc891cf1e582e2ef50d2b4271bf8df16bd6c", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -686,7 +686,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     }\n \n     fn new_temp(&mut self, ty: Ty<'tcx>) -> Local {\n-        self.elaborator.patch().new_temp(ty)\n+        self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n     fn terminator_loc(&mut self, bb: BasicBlock) -> Location {"}, {"sha": "7898d93c22e3b7cec2b167b0a06afa5f30d592fd", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -11,6 +11,7 @@\n use rustc::ty::Ty;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use syntax_pos::Span;\n \n /// This struct represents a patch to MIR, which can add\n /// new statements and basic blocks and patch over block\n@@ -92,10 +93,10 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n     }\n \n-    pub fn new_temp(&mut self, ty: Ty<'tcx>) -> Local {\n+    pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n-        self.new_locals.push(LocalDecl::new_temp(ty));\n+        self.new_locals.push(LocalDecl::new_temp(ty, span));\n         Local::new(index as usize)\n     }\n "}, {"sha": "b202e1495104e52f82973fe2015940e2d4e8340a", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -196,8 +196,8 @@ fn write_scope_tree(tcx: TyCtxt,\n         // User variable types (including the user's name in a comment).\n         for local in mir.vars_iter() {\n             let var = &mir.local_decls[local];\n-            let (name, source_info) = if var.source_info.unwrap().scope == child {\n-                (var.name.unwrap(), var.source_info.unwrap())\n+            let (name, source_info) = if var.source_info.scope == child {\n+                (var.name.unwrap(), var.source_info)\n             } else {\n                 // Not a variable or not declared in this scope.\n                 continue;"}, {"sha": "036a52d5a3db3491e4ff8a8f1e52bd18b5d200b6", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -82,39 +82,6 @@ extern {\n ```\n \"##,\n \n-E0161: r##\"\n-A value was moved. However, its size was not known at compile time, and only\n-values of a known size can be moved.\n-\n-Erroneous code example:\n-\n-```compile_fail\n-#![feature(box_syntax)]\n-\n-fn main() {\n-    let array: &[isize] = &[1, 2, 3];\n-    let _x: Box<[isize]> = box *array;\n-    // error: cannot move a value of type [isize]: the size of [isize] cannot\n-    //        be statically determined\n-}\n-```\n-\n-In Rust, you can only move a value when its size is known at compile time.\n-\n-To work around this restriction, consider \"hiding\" the value behind a reference:\n-either `&x` or `&mut x`. Since a reference has a fixed size, this lets you move\n-it around as usual. Example:\n-\n-```\n-#![feature(box_syntax)]\n-\n-fn main() {\n-    let array: &[isize] = &[1, 2, 3];\n-    let _x: Box<&[isize]> = box array; // ok!\n-}\n-```\n-\"##,\n-\n E0265: r##\"\n This error indicates that a static or constant references itself.\n All statics and constants need to resolve to a value in an acyclic manner."}, {"sha": "22566c813d86ae4da36bd7ed0994e989a566277a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -47,5 +47,4 @@ pub mod hir_stats;\n pub mod loops;\n pub mod mir_stats;\n pub mod no_asm;\n-pub mod rvalues;\n pub mod static_recursion;"}, {"sha": "c367e71fcd24619417dd41e20e2077739503b535", "filename": "src/librustc_passes/rvalues.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=092f19ac99c244236e31ea34eea9acdd557a79ae", "patch": "@@ -1,103 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Checks that all rvalues in a crate have statically known size. check_crate\n-// is the public starting point.\n-\n-use rustc::dep_graph::DepNode;\n-use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::mem_categorization as mc;\n-use rustc::ty::{self, TyCtxt};\n-use rustc::traits::Reveal;\n-\n-use rustc::hir;\n-use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n-use syntax::ast;\n-use syntax_pos::Span;\n-\n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut rvcx = RvalueContext { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::RvalueCheck, &mut rvcx.as_deep_visitor());\n-}\n-\n-struct RvalueContext<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for RvalueContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n-        let body = self.tcx.hir.body(body_id);\n-        self.tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n-            let mut delegate = RvalueContextDelegate {\n-                tcx: infcx.tcx,\n-                param_env: &infcx.parameter_environment\n-            };\n-            euv::ExprUseVisitor::new(&mut delegate, &infcx).consume_body(body);\n-        });\n-        self.visit_body(body);\n-    }\n-}\n-\n-struct RvalueContextDelegate<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    param_env: &'a ty::ParameterEnvironment<'gcx>,\n-}\n-\n-impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'gcx, 'tcx> {\n-    fn consume(&mut self,\n-               _: ast::NodeId,\n-               span: Span,\n-               cmt: mc::cmt<'tcx>,\n-               _: euv::ConsumeMode) {\n-        debug!(\"consume; cmt: {:?}; type: {:?}\", *cmt, cmt.ty);\n-        let ty = self.tcx.lift_to_global(&cmt.ty).unwrap();\n-        if !ty.is_sized(self.tcx.global_tcx(), self.param_env, span) {\n-            span_err!(self.tcx.sess, span, E0161,\n-                \"cannot move a value of type {0}: the size of {0} cannot be statically determined\",\n-                ty);\n-        }\n-    }\n-\n-    fn matched_pat(&mut self,\n-                   _matched_pat: &hir::Pat,\n-                   _cmt: mc::cmt,\n-                   _mode: euv::MatchMode) {}\n-\n-    fn consume_pat(&mut self,\n-                   _consume_pat: &hir::Pat,\n-                   _cmt: mc::cmt,\n-                   _mode: euv::ConsumeMode) {\n-    }\n-\n-    fn borrow(&mut self,\n-              _borrow_id: ast::NodeId,\n-              _borrow_span: Span,\n-              _cmt: mc::cmt,\n-              _loan_region: &'tcx ty::Region,\n-              _bk: ty::BorrowKind,\n-              _loan_cause: euv::LoanCause) {\n-    }\n-\n-    fn decl_without_init(&mut self,\n-                         _id: ast::NodeId,\n-                         _span: Span) {\n-    }\n-\n-    fn mutate(&mut self,\n-              _assignment_id: ast::NodeId,\n-              _assignment_span: Span,\n-              _assignee_cmt: mc::cmt,\n-              _mode: euv::MutateMode) {\n-    }\n-}"}, {"sha": "3d074c31c8a32f23c215dbb061b25330083272e3", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -65,7 +65,7 @@ pub fn create_mir_scopes(ccx: &CrateContext, mir: &Mir, debug_context: &Function\n     let mut has_variables = BitVector::new(mir.visibility_scopes.len());\n     for var in mir.vars_iter() {\n         let decl = &mir.local_decls[var];\n-        has_variables.insert(decl.source_info.unwrap().scope.index());\n+        has_variables.insert(decl.source_info.scope.index());\n     }\n \n     // Instantiate all scopes."}, {"sha": "c51e1fb0028038862d935281435eaf6c857a8819", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -255,8 +255,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n \n             if let Some(name) = decl.name {\n                 // User variable\n-                let source_info = decl.source_info.unwrap();\n-                let debug_scope = mircx.scopes[source_info.scope];\n+                let debug_scope = mircx.scopes[decl.source_info.scope];\n                 let dbg = debug_scope.is_valid() && bcx.sess().opts.debuginfo == FullDebugInfo;\n \n                 if !lvalue_locals.contains(local.index()) && !dbg {\n@@ -268,7 +267,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n                 assert!(!ty.has_erasable_regions());\n                 let lvalue = LvalueRef::alloca(&bcx, ty, &name.as_str());\n                 if dbg {\n-                    let (scope, span) = mircx.debug_loc(source_info);\n+                    let (scope, span) = mircx.debug_loc(decl.source_info);\n                     declare_local(&bcx, &mircx.debug_context, name, ty, scope,\n                         VariableAccess::DirectVariable { alloca: lvalue.llval },\n                         VariableKind::LocalVariable, span);"}, {"sha": "15ca151c49a79b5079763d6b8029af21c17d88f8", "filename": "src/test/compile-fail/issue-41139.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9801fa53bf77aa903d2b705959738b70729fc/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs?ref=1dd9801fa53bf77aa903d2b705959738b70729fc", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {}\n+\n+fn get_function<'a>() -> &'a Fn() -> Trait { panic!(\"\") }\n+\n+fn main() {\n+    let t : &Trait = &get_function()();\n+    //~^ ERROR cannot move a value of type Trait + 'static\n+}"}]}