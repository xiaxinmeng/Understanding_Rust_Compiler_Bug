{"sha": "f984ef26528eca686abbb946b3b363dfe6d74822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODRlZjI2NTI4ZWNhNjg2YWJiYjk0NmIzYjM2M2RmZTZkNzQ4MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T02:33:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T02:33:00Z"}, "message": "Switch impure functional style to pure imperative", "tree": {"sha": "75d70fd728114cf3bee0bea997c9fa6c518ba3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d70fd728114cf3bee0bea997c9fa6c518ba3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f984ef26528eca686abbb946b3b363dfe6d74822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f984ef26528eca686abbb946b3b363dfe6d74822", "html_url": "https://github.com/rust-lang/rust/commit/f984ef26528eca686abbb946b3b363dfe6d74822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f984ef26528eca686abbb946b3b363dfe6d74822/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb086592995a54828f23734a260d387db9ea926", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb086592995a54828f23734a260d387db9ea926", "html_url": "https://github.com/rust-lang/rust/commit/cfb086592995a54828f23734a260d387db9ea926"}], "stats": {"total": 162, "additions": 67, "deletions": 95}, "files": [{"sha": "f63d1ddceaa3fea02869a6efb64745dc7d79adc1", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f984ef26528eca686abbb946b3b363dfe6d74822", "patch": "@@ -1,5 +1,4 @@\n import * as vscode from 'vscode';\n-import * as scopes from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -60,7 +59,6 @@ export class Config {\n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n             if (this.highlightingOn) {\n-                scopes.load();\n                 scopesMapper.load();\n             }\n         }"}, {"sha": "5e9cbe0de7612f1015cb8bd076e648e8eebddb49", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=f984ef26528eca686abbb946b3b363dfe6d74822", "patch": "@@ -3,7 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as seedrandom_ from 'seedrandom';\n const seedrandom = seedrandom_; // https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207\n \n-import * as scopes from './scopes';\n+import { loadThemeColors, TextMateRuleSettings } from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n import { Ctx } from './ctx';\n@@ -172,11 +172,13 @@ function initDecorations(): Map<\n     string,\n     vscode.TextEditorDecorationType\n > {\n+    const themeColors = loadThemeColors();\n+\n     const decoration = (\n         tag: string,\n         textDecoration?: string,\n     ): [string, vscode.TextEditorDecorationType] => {\n-        const rule = scopesMapper.toRule(tag, scopes.find);\n+        const rule = scopesMapper.toRule(tag, it => themeColors.get(it));\n \n         if (rule) {\n             const decor = createDecorationFromTextmate(rule);\n@@ -232,7 +234,7 @@ function initDecorations(): Map<\n }\n \n function createDecorationFromTextmate(\n-    themeStyle: scopes.TextMateRuleSettings,\n+    themeStyle: TextMateRuleSettings,\n ): vscode.TextEditorDecorationType {\n     const decorationOptions: vscode.DecorationRenderOptions = {};\n     decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;"}, {"sha": "73fabbf549adb2fa154a27d86d7eafaff70421f9", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 61, "deletions": 89, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=f984ef26528eca686abbb946b3b363dfe6d74822", "patch": "@@ -3,49 +3,27 @@ import * as jsonc from 'jsonc-parser';\n import * as path from 'path';\n import * as vscode from 'vscode';\n \n-export interface TextMateRule {\n-    scope: string | string[];\n-    settings: TextMateRuleSettings;\n-}\n-\n export interface TextMateRuleSettings {\n     foreground?: string;\n     background?: string;\n     fontStyle?: string;\n }\n \n-// Current theme colors\n-const rules = new Map<string, TextMateRuleSettings>();\n-\n-export function find(scope: string): TextMateRuleSettings | undefined {\n-    return rules.get(scope);\n-}\n-\n // Load all textmate scopes in the currently active theme\n-export function load() {\n-    // Remove any previous theme\n-    rules.clear();\n+export function loadThemeColors(): Map<string, TextMateRuleSettings> {\n     // Find out current color theme\n     const themeName = vscode.workspace\n         .getConfiguration('workbench')\n         .get('colorTheme');\n \n     if (typeof themeName !== 'string') {\n         // console.warn('workbench.colorTheme is', themeName)\n-        return;\n-    }\n-    // Try to load colors from that theme\n-    try {\n-        loadThemeNamed(themeName);\n-    } catch (e) {\n-        // console.warn('failed to load theme', themeName, e)\n+        return new Map();\n     }\n+    return loadThemeNamed(themeName);\n }\n \n-\n-\n-// Find current theme on disk\n-function loadThemeNamed(themeName: string) {\n+function loadThemeNamed(themeName: string): Map<string, TextMateRuleSettings> {\n     function isTheme(extension: vscode.Extension<any>): boolean {\n         return (\n             extension.extensionKind === vscode.ExtensionKind.UI &&\n@@ -54,83 +32,77 @@ function loadThemeNamed(themeName: string) {\n         );\n     }\n \n-    const themePaths = vscode.extensions.all\n+    let themePaths = vscode.extensions.all\n         .filter(isTheme)\n-        .reduce((list, extension) => {\n-            return extension.packageJSON.contributes.themes\n-                .filter(\n-                    (element: any) =>\n-                        (element.id || element.label) === themeName,\n-                )\n-                .map((element: any) =>\n-                    path.join(extension.extensionPath, element.path),\n-                )\n-                .concat(list);\n-        }, Array<string>());\n-\n-    themePaths.forEach(loadThemeFile);\n+        .flatMap(ext => {\n+            return ext.packageJSON.contributes.themes\n+                .filter((it: any) => (it.id || it.label) === themeName)\n+                .map((it: any) => path.join(ext.extensionPath, it.path));\n+        })\n+\n+    const res = new Map();\n+    for (const themePath of themePaths) {\n+        mergeInto(res, loadThemeFile(themePath))\n+    }\n \n-    const tokenColorCustomizations: [any] = [\n-        vscode.workspace\n-            .getConfiguration('editor')\n-            .get('tokenColorCustomizations'),\n-    ];\n+    const customizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n+    mergeInto(res, loadColors(customizations?.textMateRules ?? []))\n \n-    tokenColorCustomizations\n-        .filter(custom => custom && custom.textMateRules)\n-        .map(custom => custom.textMateRules)\n-        .forEach(loadColors);\n+    return res;\n }\n \n-function loadThemeFile(themePath: string) {\n-    const themeContent = [themePath]\n-        .filter(it => fs.statSync(it).isFile())\n-        .map(it => fs.readFileSync(it, 'utf8'))\n-        .map(it => jsonc.parse(it))\n-        .filter(theme => theme);\n+function loadThemeFile(themePath: string): Map<string, TextMateRuleSettings> {\n+    let text;\n+    try {\n+        text = fs.readFileSync(themePath, 'utf8')\n+    } catch {\n+        return new Map();\n+    }\n+    const obj = jsonc.parse(text);\n+    const tokenColors = obj?.tokenColors ?? [];\n+    const res = loadColors(tokenColors);\n+\n+    for (const include in obj?.include ?? []) {\n+        const includePath = path.join(path.dirname(themePath), include);\n+        const tmp = loadThemeFile(includePath);\n+        mergeInto(res, tmp);\n+    }\n+\n+    return res;\n+}\n \n-    themeContent\n-        .filter(theme => theme.tokenColors)\n-        .map(theme => theme.tokenColors)\n-        .forEach(loadColors);\n+interface TextMateRule {\n+    scope: string | string[];\n+    settings: TextMateRuleSettings;\n+}\n \n-    themeContent\n-        .filter(theme => theme.include)\n-        .map(theme => path.join(path.dirname(themePath), theme.include))\n-        .forEach(loadThemeFile);\n+function loadColors(textMateRules: TextMateRule[]): Map<string, TextMateRuleSettings> {\n+    const res = new Map();\n+    for (const rule of textMateRules) {\n+        const scopes = typeof rule.scope === 'string'\n+            ? [rule.scope]\n+            : rule.scope;\n+        for (const scope of scopes) {\n+            res.set(scope, rule.settings)\n+        }\n+    }\n+    return res\n }\n \n function mergeRuleSettings(\n     defaultSetting: TextMateRuleSettings | undefined,\n     override: TextMateRuleSettings,\n ): TextMateRuleSettings {\n-    if (defaultSetting === undefined) {\n-        return override;\n+    return {\n+        foreground: defaultSetting?.foreground ?? override.foreground,\n+        background: defaultSetting?.background ?? override.background,\n+        fontStyle: defaultSetting?.fontStyle ?? override.fontStyle,\n     }\n-    const mergedRule = defaultSetting;\n-\n-    mergedRule.background = override.background || defaultSetting.background;\n-    mergedRule.foreground = override.foreground || defaultSetting.foreground;\n-    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n-\n-    return mergedRule;\n }\n \n-function updateRules(\n-    scope: string,\n-    updatedSettings: TextMateRuleSettings,\n-): void {\n-    [rules.get(scope)]\n-        .map(settings => mergeRuleSettings(settings, updatedSettings))\n-        .forEach(settings => rules.set(scope, settings));\n-}\n-\n-function loadColors(textMateRules: TextMateRule[]): void {\n-    textMateRules.forEach(rule => {\n-        if (typeof rule.scope === 'string') {\n-            updateRules(rule.scope, rule.settings);\n-        } else if (rule.scope instanceof Array) {\n-            rule.scope.forEach(scope => updateRules(scope, rule.settings));\n-        }\n-    });\n+function mergeInto(dst: Map<string, TextMateRuleSettings>, addition: Map<string, TextMateRuleSettings>) {\n+    addition.forEach((value, key) => {\n+        const merged = mergeRuleSettings(dst.get(key), value)\n+        dst.set(key, merged)\n+    })\n }"}, {"sha": "e60eb8e5e5b74d5601a232cc7767a435946871b6", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/f984ef26528eca686abbb946b3b363dfe6d74822/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=f984ef26528eca686abbb946b3b363dfe6d74822", "patch": "@@ -4,7 +4,7 @@\n         \"target\": \"es2018\",\n         \"outDir\": \"out\",\n         \"lib\": [\n-            \"es2018\"\n+            \"es2019\"\n         ],\n         \"sourceMap\": true,\n         \"rootDir\": \"src\","}]}