{"sha": "02cf3751dff06700504f7980e13155884e64289e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyY2YzNzUxZGZmMDY3MDA1MDRmNzk4MGUxMzE1NTg4NGU2NDI4OWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-27T22:10:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:35Z"}, "message": "rand: Switch field privacy as necessary", "tree": {"sha": "58aa3161156f8243c1d04fdfd664721126a51f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58aa3161156f8243c1d04fdfd664721126a51f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02cf3751dff06700504f7980e13155884e64289e", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02cf3751dff06700504f7980e13155884e64289e", "html_url": "https://github.com/rust-lang/rust/commit/02cf3751dff06700504f7980e13155884e64289e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02cf3751dff06700504f7980e13155884e64289e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14587f88cac89af655e04d573ead2eb5ab4f37a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14587f88cac89af655e04d573ead2eb5ab4f37a5", "html_url": "https://github.com/rust-lang/rust/commit/14587f88cac89af655e04d573ead2eb5ab4f37a5"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "5a6b925c53fdb442884a7e47eeb689f974323011", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -66,7 +66,7 @@ impl Rand for Exp1 {\n /// ```\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n-    priv lambda_inverse: f64\n+    lambda_inverse: f64\n }\n \n impl Exp {"}, {"sha": "1e9b5cbe99eac596b684a123b846872641f41967", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -236,11 +236,11 @@ impl IndependentSample<f64> for ChiSquared {\n /// println!(\"{} is from an F(2, 32) distribution\", v)\n /// ```\n pub struct FisherF {\n-    priv numer: ChiSquared,\n-    priv denom: ChiSquared,\n+    numer: ChiSquared,\n+    denom: ChiSquared,\n     // denom_dof / numer_dof so that this can just be a straight\n     // multiplication, rather than a division.\n-    priv dof_ratio: f64,\n+    dof_ratio: f64,\n }\n \n impl FisherF {\n@@ -279,8 +279,8 @@ impl IndependentSample<f64> for FisherF {\n /// println!(\"{} is from a t(11) distribution\", v)\n /// ```\n pub struct StudentT {\n-    priv chi: ChiSquared,\n-    priv dof: f64\n+    chi: ChiSquared,\n+    dof: f64\n }\n \n impl StudentT {"}, {"sha": "2323088027860faf0e1298d168a5abad6a2b103e", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -71,9 +71,9 @@ impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> {\n /// A value with a particular weight for use with `WeightedChoice`.\n pub struct Weighted<T> {\n     /// The numerical weight of this item\n-    weight: uint,\n+    pub weight: uint,\n     /// The actual item which is being weighted\n-    item: T,\n+    pub item: T,\n }\n \n /// A distribution that selects from a finite collection of weighted items.\n@@ -101,8 +101,8 @@ pub struct Weighted<T> {\n /// }\n /// ```\n pub struct WeightedChoice<T> {\n-    priv items: ~[Weighted<T>],\n-    priv weight_range: Range<uint>\n+    pub items: ~[Weighted<T>],\n+    pub weight_range: Range<uint>\n }\n \n impl<T: Clone> WeightedChoice<T> {"}, {"sha": "42fb76ad4eb48975e44cc0c58f1179fc4f756b06", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -82,8 +82,8 @@ impl Rand for StandardNormal {\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n pub struct Normal {\n-    priv mean: f64,\n-    priv std_dev: f64\n+    mean: f64,\n+    std_dev: f64,\n }\n \n impl Normal {\n@@ -124,7 +124,7 @@ impl IndependentSample<f64> for Normal {\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n pub struct LogNormal {\n-    priv norm: Normal\n+    norm: Normal\n }\n \n impl LogNormal {"}, {"sha": "cee80b62e3dec45b5358c158e8a82e1e11c4f035", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -46,9 +46,9 @@ use distributions::{Sample, IndependentSample};\n /// }\n /// ```\n pub struct Range<X> {\n-    priv low: X,\n-    priv range: X,\n-    priv accept_zone: X\n+    low: X,\n+    range: X,\n+    accept_zone: X\n }\n \n impl<X: SampleRange + Ord> Range<X> {"}, {"sha": "5c14d2c9f5bae76856d0f5fb626bf070e748052c", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -28,12 +28,12 @@ static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct IsaacRng {\n-    priv cnt: u32,\n-    priv rsl: [u32, .. RAND_SIZE],\n-    priv mem: [u32, .. RAND_SIZE],\n-    priv a: u32,\n-    priv b: u32,\n-    priv c: u32\n+    cnt: u32,\n+    rsl: [u32, .. RAND_SIZE],\n+    mem: [u32, .. RAND_SIZE],\n+    a: u32,\n+    b: u32,\n+    c: u32\n }\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n@@ -231,12 +231,12 @@ static RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct Isaac64Rng {\n-    priv cnt: uint,\n-    priv rsl: [u64, .. RAND_SIZE_64],\n-    priv mem: [u64, .. RAND_SIZE_64],\n-    priv a: u64,\n-    priv b: u64,\n-    priv c: u64,\n+    cnt: uint,\n+    rsl: [u64, .. RAND_SIZE_64],\n+    mem: [u64, .. RAND_SIZE_64],\n+    a: u64,\n+    b: u64,\n+    c: u64,\n }\n \n static EMPTY_64: Isaac64Rng = Isaac64Rng {"}, {"sha": "d9920501ab07138e6d10e72ed24c696f377595be", "filename": "src/librand/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -72,6 +72,8 @@ println!(\"{:?}\", tuple_ptr)\n \n #![feature(macro_rules, managed_boxes, phase)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;\n \n@@ -407,12 +409,12 @@ pub fn rng() -> StdRng {\n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(not(target_word_size=\"64\"))]\n-pub struct StdRng { priv rng: IsaacRng }\n+pub struct StdRng { rng: IsaacRng }\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(target_word_size=\"64\")]\n-pub struct StdRng { priv rng: Isaac64Rng }\n+pub struct StdRng { rng: Isaac64Rng }\n \n impl StdRng {\n     /// Create a randomly seeded instance of `StdRng`.\n@@ -489,10 +491,10 @@ pub fn weak_rng() -> XorShiftRng {\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n pub struct XorShiftRng {\n-    priv x: u32,\n-    priv y: u32,\n-    priv z: u32,\n-    priv w: u32,\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+    w: u32,\n }\n \n impl Rng for XorShiftRng {\n@@ -573,8 +575,8 @@ pub struct TaskRng {\n     // The use of unsafe code here is OK if the invariants above are\n     // satisfied; and it allows us to avoid (unnecessarily) using a\n     // GC'd or RC'd pointer.\n-    priv rng: *mut TaskRngInner,\n-    priv marker: marker::NoSend,\n+    rng: *mut TaskRngInner,\n+    marker: marker::NoSend,\n }\n \n // used to make space in TLS for a random number generator"}, {"sha": "6ba919a7e65fa668759cd7b471af9d045f921de1", "filename": "src/librand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -30,7 +30,7 @@ mod imp {\n     /// This does not block.\n     #[cfg(unix)]\n     pub struct OSRng {\n-        priv inner: ReaderRng<File>\n+        inner: ReaderRng<File>\n     }\n \n     impl OSRng {\n@@ -77,7 +77,7 @@ mod imp {\n     ///\n     /// This does not block.\n     pub struct OSRng {\n-        priv hcryptprov: HCRYPTPROV\n+        hcryptprov: HCRYPTPROV\n     }\n \n     static PROV_RSA_FULL: DWORD = 1;"}, {"sha": "76a0efc92a99994022e45878c84791b05734d4dc", "filename": "src/librand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freader.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -27,7 +27,7 @@ use Rng;\n /// println!(\"{:x}\", rng.gen::<uint>());\n /// ```\n pub struct ReaderRng<R> {\n-    priv reader: R\n+    reader: R\n }\n \n impl<R: Reader> ReaderRng<R> {"}, {"sha": "70108d76b5644dec017de8412a10b82c6176eabc", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cf3751dff06700504f7980e13155884e64289e/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=02cf3751dff06700504f7980e13155884e64289e", "patch": "@@ -21,11 +21,11 @@ static DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n /// A wrapper around any RNG which reseeds the underlying RNG after it\n /// has generated a certain number of random bytes.\n pub struct ReseedingRng<R, Rsdr> {\n-    priv rng: R,\n-    priv generation_threshold: uint,\n-    priv bytes_generated: uint,\n+    rng: R,\n+    generation_threshold: uint,\n+    bytes_generated: uint,\n     /// Controls the behaviour when reseeding the RNG.\n-    reseeder: Rsdr\n+    pub reseeder: Rsdr,\n }\n \n impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {"}]}