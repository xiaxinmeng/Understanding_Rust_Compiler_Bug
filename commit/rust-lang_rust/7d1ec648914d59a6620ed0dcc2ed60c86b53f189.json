{"sha": "7d1ec648914d59a6620ed0dcc2ed60c86b53f189", "node_id": "C_kwDOAAsO6NoAKDdkMWVjNjQ4OTE0ZDU5YTY2MjBlZDBkY2MyZWQ2MGM4NmI1M2YxODk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T03:28:05Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T21:23:37Z"}, "message": "Remove unused parameter", "tree": {"sha": "23137793decc24ba7880a398fec697f742b17bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23137793decc24ba7880a398fec697f742b17bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1ec648914d59a6620ed0dcc2ed60c86b53f189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1ec648914d59a6620ed0dcc2ed60c86b53f189", "html_url": "https://github.com/rust-lang/rust/commit/7d1ec648914d59a6620ed0dcc2ed60c86b53f189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1ec648914d59a6620ed0dcc2ed60c86b53f189/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8e8e565d854f72691031262fcf945bcf1f24f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8e8e565d854f72691031262fcf945bcf1f24f9", "html_url": "https://github.com/rust-lang/rust/commit/5c8e8e565d854f72691031262fcf945bcf1f24f9"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "038ee351545f665f4d30fee7e63e642a768d203e", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d1ec648914d59a6620ed0dcc2ed60c86b53f189/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1ec648914d59a6620ed0dcc2ed60c86b53f189/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=7d1ec648914d59a6620ed0dcc2ed60c86b53f189", "patch": "@@ -200,12 +200,12 @@ crate fn get_function_type_for_search<'tcx>(\n \n fn get_index_type(clean_type: &clean::Type, generics: Vec<TypeWithKind>) -> RenderType {\n     RenderType {\n-        name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n+        name: get_index_type_name(clean_type).map(|s| s.as_str().to_ascii_lowercase()),\n         generics: if generics.is_empty() { None } else { Some(generics) },\n     }\n }\n \n-fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<Symbol> {\n+fn get_index_type_name(clean_type: &clean::Type) -> Option<Symbol> {\n     match *clean_type {\n         clean::Type::Path { ref path, .. } => {\n             let path_segment = path.segments.last().unwrap();\n@@ -215,11 +215,10 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n             let path = &bounds[0].trait_;\n             Some(path.segments.last().unwrap().name)\n         }\n-        clean::Generic(s) if accept_generic => Some(s),\n+        clean::Generic(s) => Some(s),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n-        clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),\n-        clean::Generic(_)\n-        | clean::BareFunction(_)\n+        clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_),\n+        clean::BareFunction(_)\n         | clean::Tuple(_)\n         | clean::Slice(_)\n         | clean::Array(_, _)"}]}