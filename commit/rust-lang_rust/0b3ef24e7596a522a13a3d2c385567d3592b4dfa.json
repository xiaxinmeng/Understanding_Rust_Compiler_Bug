{"sha": "0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiM2VmMjRlNzU5NmE1MjJhMTNhM2QyYzM4NTU2N2QzNTkyYjRkZmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T23:22:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T23:22:11Z"}, "message": "Rollup merge of #67979 - Centril:hir-cleanup, r=Zoxc\n\nMove `intravisit` => `rustc_hir` + misc cleanup\n\nWorking towards https://github.com/rust-lang/rust/issues/65031.\nThis should eventually enable getting rid of rustc as a dependency in various passes (e.g. lints).\n\ncc https://github.com/rust-lang/rust/pull/67806 (this also facilitates liberating lints from tcx)\ncc https://github.com/rust-lang/rust/pull/67922 (some other dep reductions)\n\nr? @Zoxc", "tree": {"sha": "09e9e849b0332c8578cba679311e3bff2eafdcc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e9e849b0332c8578cba679311e3bff2eafdcc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFmQjCRBK7hj4Ov3rIwAAdHIIAI4erlp2JXKloYlEpMAGp3ej\n6slEGGUU+o/H0KTBCDiJkpWXibHZvp9qEnGTLStjYoc4gAfrnf0IekiSDnWAaJ70\n3kBr/OgbODNjW4NliOXYzEDotgjvCtnrwFycD6kF9I4krMxVJLwzSrplh4bk+NbJ\n8LRhnmGCgwhQdzM2w/aa6UTDwRo/9BJxtzEImuDXvgSEJWoP0BSaEVty1+1t8gqb\n6MX8iZkWhcGgFr8mebPe4VqehGn5fPrwrZLCam7qPykxUdHOayQ0eFAwO3xwKdIU\nBeV4fNVk3F+xRt7sCXFAhANcg38uAr0vl6oNM12weWGY3anMqp0tJKToM+tjAGQ=\n=Z5TJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 09e9e849b0332c8578cba679311e3bff2eafdcc8\nparent 5ea69781f46a556b3d6f7e8e52d5641d61d12131\nparent 0997388b8719cda70c73758056496ab210726572\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578525731 +0100\ncommitter GitHub <noreply@github.com> 1578525731 +0100\n\nRollup merge of #67979 - Centril:hir-cleanup, r=Zoxc\n\nMove `intravisit` => `rustc_hir` + misc cleanup\n\nWorking towards https://github.com/rust-lang/rust/issues/65031.\nThis should eventually enable getting rid of rustc as a dependency in various passes (e.g. lints).\n\ncc https://github.com/rust-lang/rust/pull/67806 (this also facilitates liberating lints from tcx)\ncc https://github.com/rust-lang/rust/pull/67922 (some other dep reductions)\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "html_url": "https://github.com/rust-lang/rust/commit/0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea69781f46a556b3d6f7e8e52d5641d61d12131", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea69781f46a556b3d6f7e8e52d5641d61d12131", "html_url": "https://github.com/rust-lang/rust/commit/5ea69781f46a556b3d6f7e8e52d5641d61d12131"}, {"sha": "0997388b8719cda70c73758056496ab210726572", "url": "https://api.github.com/repos/rust-lang/rust/commits/0997388b8719cda70c73758056496ab210726572", "html_url": "https://github.com/rust-lang/rust/commit/0997388b8719cda70c73758056496ab210726572"}], "stats": {"total": 683, "additions": 421, "deletions": 262}, "files": [{"sha": "06b7b3194defd020fea99afe3f6041f79674dfd4", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n@@ -13,6 +13,7 @@ use errors::struct_span_err;\n use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n use rustc_span::symbol::sym;\n@@ -519,7 +520,9 @@ impl CheckAttrVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "016fc939a7a172bfb17d2230b9368efd46704879", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -11,9 +11,9 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-use crate::hir::intravisit::FnKind;\n-use crate::hir::map;\n-use rustc_hir as ast;\n+use crate::hir::map::Map;\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Expr, FnDecl, Node};\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident};\n@@ -39,37 +39,37 @@ trait MaybeFnLike {\n     fn is_fn_like(&self) -> bool;\n }\n \n-impl MaybeFnLike for ast::Item<'_> {\n+impl MaybeFnLike for hir::Item<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ItemKind::Fn(..) => true,\n+            hir::ItemKind::Fn(..) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::ImplItem<'_> {\n+impl MaybeFnLike for hir::ImplItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ImplItemKind::Method(..) => true,\n+            hir::ImplItemKind::Method(..) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::TraitItem<'_> {\n+impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::TraitItemKind::Method(_, ast::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::Expr<'_> {\n+impl MaybeFnLike for hir::Expr<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ExprKind::Closure(..) => true,\n+            hir::ExprKind::Closure(..) => true,\n             _ => false,\n         }\n     }\n@@ -85,21 +85,21 @@ pub enum Code<'a> {\n }\n \n impl<'a> Code<'a> {\n-    pub fn id(&self) -> ast::HirId {\n+    pub fn id(&self) -> hir::HirId {\n         match *self {\n             Code::FnLike(node) => node.id(),\n             Code::Expr(block) => block.hir_id,\n         }\n     }\n \n     /// Attempts to construct a Code from presumed FnLike or Expr node input.\n-    pub fn from_node(map: &map::Map<'a>, id: ast::HirId) -> Option<Code<'a>> {\n+    pub fn from_node(map: &Map<'a>, id: hir::HirId) -> Option<Code<'a>> {\n         match map.get(id) {\n-            map::Node::Block(_) => {\n+            Node::Block(_) => {\n                 //  Use the parent, hopefully an expression node.\n                 Code::from_node(map, map.get_parent_node(id))\n             }\n-            map::Node::Expr(expr) => Some(Code::Expr(expr)),\n+            Node::Expr(expr) => Some(Code::Expr(expr)),\n             node => FnLikeNode::from_node(node).map(Code::FnLike),\n         }\n     }\n@@ -109,12 +109,12 @@ impl<'a> Code<'a> {\n /// use when implementing FnLikeNode operations.\n struct ItemFnParts<'a> {\n     ident: Ident,\n-    decl: &'a ast::FnDecl<'a>,\n-    header: ast::FnHeader,\n-    vis: &'a ast::Visibility<'a>,\n-    generics: &'a ast::Generics<'a>,\n-    body: ast::BodyId,\n-    id: ast::HirId,\n+    decl: &'a hir::FnDecl<'a>,\n+    header: hir::FnHeader,\n+    vis: &'a hir::Visibility<'a>,\n+    generics: &'a hir::Generics<'a>,\n+    body: hir::BodyId,\n+    id: hir::HirId,\n     span: Span,\n     attrs: &'a [Attribute],\n }\n@@ -123,17 +123,17 @@ struct ItemFnParts<'a> {\n /// for use when implementing FnLikeNode operations.\n struct ClosureParts<'a> {\n     decl: &'a FnDecl<'a>,\n-    body: ast::BodyId,\n-    id: ast::HirId,\n+    body: hir::BodyId,\n+    id: hir::HirId,\n     span: Span,\n     attrs: &'a [Attribute],\n }\n \n impl<'a> ClosureParts<'a> {\n     fn new(\n         d: &'a FnDecl<'a>,\n-        b: ast::BodyId,\n-        id: ast::HirId,\n+        b: hir::BodyId,\n+        id: hir::HirId,\n         s: Span,\n         attrs: &'a [Attribute],\n     ) -> Self {\n@@ -145,65 +145,65 @@ impl<'a> FnLikeNode<'a> {\n     /// Attempts to construct a FnLikeNode from presumed FnLike node input.\n     pub fn from_node(node: Node<'_>) -> Option<FnLikeNode<'_>> {\n         let fn_like = match node {\n-            map::Node::Item(item) => item.is_fn_like(),\n-            map::Node::TraitItem(tm) => tm.is_fn_like(),\n-            map::Node::ImplItem(it) => it.is_fn_like(),\n-            map::Node::Expr(e) => e.is_fn_like(),\n+            Node::Item(item) => item.is_fn_like(),\n+            Node::TraitItem(tm) => tm.is_fn_like(),\n+            Node::ImplItem(it) => it.is_fn_like(),\n+            Node::Expr(e) => e.is_fn_like(),\n             _ => false,\n         };\n         fn_like.then_some(FnLikeNode { node })\n     }\n \n-    pub fn body(self) -> ast::BodyId {\n+    pub fn body(self) -> hir::BodyId {\n         self.handle(\n             |i: ItemFnParts<'a>| i.body,\n-            |_, _, _: &'a ast::FnSig<'a>, _, body: ast::BodyId, _, _| body,\n+            |_, _, _: &'a hir::FnSig<'a>, _, body: hir::BodyId, _, _| body,\n             |c: ClosureParts<'a>| c.body,\n         )\n     }\n \n     pub fn decl(self) -> &'a FnDecl<'a> {\n         self.handle(\n             |i: ItemFnParts<'a>| &*i.decl,\n-            |_, _, sig: &'a ast::FnSig<'a>, _, _, _, _| &sig.decl,\n+            |_, _, sig: &'a hir::FnSig<'a>, _, _, _, _| &sig.decl,\n             |c: ClosureParts<'a>| c.decl,\n         )\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(\n             |i: ItemFnParts<'_>| i.span,\n-            |_, _, _: &'a ast::FnSig<'a>, _, _, span, _| span,\n+            |_, _, _: &'a hir::FnSig<'a>, _, _, span, _| span,\n             |c: ClosureParts<'_>| c.span,\n         )\n     }\n \n-    pub fn id(self) -> ast::HirId {\n+    pub fn id(self) -> hir::HirId {\n         self.handle(\n             |i: ItemFnParts<'_>| i.id,\n-            |id, _, _: &'a ast::FnSig<'a>, _, _, _, _| id,\n+            |id, _, _: &'a hir::FnSig<'a>, _, _, _, _| id,\n             |c: ClosureParts<'_>| c.id,\n         )\n     }\n \n-    pub fn constness(self) -> ast::Constness {\n-        self.kind().header().map_or(ast::Constness::NotConst, |header| header.constness)\n+    pub fn constness(self) -> hir::Constness {\n+        self.kind().header().map_or(hir::Constness::NotConst, |header| header.constness)\n     }\n \n-    pub fn asyncness(self) -> ast::IsAsync {\n-        self.kind().header().map_or(ast::IsAsync::NotAsync, |header| header.asyncness)\n+    pub fn asyncness(self) -> hir::IsAsync {\n+        self.kind().header().map_or(hir::IsAsync::NotAsync, |header| header.asyncness)\n     }\n \n-    pub fn unsafety(self) -> ast::Unsafety {\n-        self.kind().header().map_or(ast::Unsafety::Normal, |header| header.unsafety)\n+    pub fn unsafety(self) -> hir::Unsafety {\n+        self.kind().header().map_or(hir::Unsafety::Normal, |header| header.unsafety)\n     }\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n             FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| FnKind::Closure(c.attrs);\n-        let method = |_, ident: Ident, sig: &'a ast::FnSig<'a>, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a hir::FnSig<'a>, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -213,19 +213,19 @@ impl<'a> FnLikeNode<'a> {\n     where\n         I: FnOnce(ItemFnParts<'a>) -> A,\n         M: FnOnce(\n-            ast::HirId,\n+            hir::HirId,\n             Ident,\n-            &'a ast::FnSig<'a>,\n-            Option<&'a ast::Visibility<'a>>,\n-            ast::BodyId,\n+            &'a hir::FnSig<'a>,\n+            Option<&'a hir::Visibility<'a>>,\n+            hir::BodyId,\n             Span,\n             &'a [Attribute],\n         ) -> A,\n         C: FnOnce(ClosureParts<'a>) -> A,\n     {\n         match self.node {\n-            map::Node::Item(i) => match i.kind {\n-                ast::ItemKind::Fn(ref sig, ref generics, block) => item_fn(ItemFnParts {\n+            Node::Item(i) => match i.kind {\n+                hir::ItemKind::Fn(ref sig, ref generics, block) => item_fn(ItemFnParts {\n                     id: i.hir_id,\n                     ident: i.ident,\n                     decl: &sig.decl,\n@@ -238,20 +238,20 @@ impl<'a> FnLikeNode<'a> {\n                 }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::TraitItem(ti) => match ti.kind {\n-                ast::TraitItemKind::Method(ref sig, ast::TraitMethod::Provided(body)) => {\n+            Node::TraitItem(ti) => match ti.kind {\n+                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::ImplItem(ii) => match ii.kind {\n-                ast::ImplItemKind::Method(ref sig, body) => {\n+            Node::ImplItem(ii) => match ii.kind {\n+                hir::ImplItemKind::Method(ref sig, body) => {\n                     method(ii.hir_id, ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n                 }\n                 _ => bug!(\"impl method FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::Expr(e) => match e.kind {\n-                ast::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n+            Node::Expr(e) => match e.kind {\n+                hir::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n                     closure(ClosureParts::new(&decl, block, e.hir_id, e.span, &e.attrs))\n                 }\n                 _ => bug!(\"expr FnLikeNode that is not fn-like\"),"}, {"sha": "b6be4bb00199656f8948306b21d37a200f56271b", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,22 +1,24 @@\n-use super::*;\n-use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::hir::map::HirEntryMap;\n-use crate::ich::Fingerprint;\n+use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n+use crate::hir::map::definitions::{self, DefPathHash};\n+use crate::hir::map::{Entry, HirEntryMap, Map};\n+use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n-use rustc_span::Span;\n-use std::iter::repeat;\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n use syntax::ast::NodeId;\n \n-use crate::ich::StableHashingContext;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use std::iter::repeat;\n \n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n@@ -49,15 +51,12 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n-fn input_dep_node_and_hash<I>(\n+fn input_dep_node_and_hash(\n     dep_graph: &DepGraph,\n     hcx: &mut StableHashingContext<'_>,\n     dep_node: DepNode,\n-    input: I,\n-) -> (DepNodeIndex, Fingerprint)\n-where\n-    I: for<'a> HashStable<StableHashingContext<'a>>,\n-{\n+    input: impl for<'a> HashStable<StableHashingContext<'a>>,\n+) -> (DepNodeIndex, Fingerprint) {\n     let dep_node_index = dep_graph.input_task(dep_node, &mut *hcx, &input).1;\n \n     let hash = if dep_graph.is_fully_enabled() {\n@@ -71,16 +70,13 @@ where\n     (dep_node_index, hash)\n }\n \n-fn alloc_hir_dep_nodes<I>(\n+fn alloc_hir_dep_nodes(\n     dep_graph: &DepGraph,\n     hcx: &mut StableHashingContext<'_>,\n     def_path_hash: DefPathHash,\n-    item_like: I,\n+    item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n     hir_body_nodes: &mut Vec<(DefPathHash, Fingerprint)>,\n-) -> (DepNodeIndex, DepNodeIndex)\n-where\n-    I: for<'a> HashStable<StableHashingContext<'a>>,\n-{\n+) -> (DepNodeIndex, DepNodeIndex) {\n     let sig = dep_graph\n         .input_task(\n             def_path_hash.to_dep_node(DepKind::Hir),\n@@ -98,6 +94,21 @@ where\n     (sig, full)\n }\n \n+fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n+    let mut upstream_crates: Vec<_> = cstore\n+        .crates_untracked()\n+        .iter()\n+        .map(|&cnum| {\n+            let name = cstore.crate_name_untracked(cnum);\n+            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n+            let hash = cstore.crate_hash_untracked(cnum);\n+            (name, disambiguator, hash)\n+        })\n+        .collect();\n+    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+    upstream_crates\n+}\n+\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n@@ -190,18 +201,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             },\n         );\n \n-        let mut upstream_crates: Vec<_> = cstore\n-            .crates_untracked()\n-            .iter()\n-            .map(|&cnum| {\n-                let name = cstore.crate_name_untracked(cnum);\n-                let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n-                let hash = cstore.crate_hash_untracked(cnum);\n-                (name, disambiguator, hash)\n-            })\n-            .collect();\n-\n-        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+        let upstream_crates = upstream_crates(cstore);\n \n         // We hash the final, remapped names of all local source files so we\n         // don't have to include the path prefix remapping commandline args.\n@@ -336,11 +336,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n+    type Map = Map<'hir>;\n+\n     /// Because we want to track parent items and so forth, enable\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "ac2d7a9a8dc2a953dd1a9c3b75be09068739e55e", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,7 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use crate::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n@@ -15,10 +15,11 @@ use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n+use syntax::ast;\n+\n use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n-use syntax::ast;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`"}, {"sha": "76e42b8af2874a674a2a4fbd8af6abfd9f6c8a24", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir::intravisit;\n use crate::hir::map::Map;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n \n@@ -133,7 +133,9 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "e18ab7848feaae9c3707b3031fa1903721288b95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,21 +4,21 @@ pub use self::definitions::{\n };\n \n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n-use crate::hir::intravisit;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::kw;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n \n@@ -186,12 +186,12 @@ struct ParentHirIterator<'map, 'hir> {\n }\n \n impl<'map, 'hir> ParentHirIterator<'map, 'hir> {\n-    fn new(current_id: HirId, map: &'map Map<'hir>) -> ParentHirIterator<'map, 'hir> {\n-        ParentHirIterator { current_id, map }\n+    fn new(current_id: HirId, map: &'map Map<'hir>) -> Self {\n+        Self { current_id, map }\n     }\n }\n \n-impl<'map, 'hir> Iterator for ParentHirIterator<'map, 'hir> {\n+impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n     type Item = (HirId, Node<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -405,6 +405,14 @@ impl<'hir> Map<'hir> {\n         self.forest.krate()\n     }\n \n+    pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.read(id);\n+\n+        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // do not trigger a read of the whole krate here\n+        self.forest.krate.item(id)\n+    }\n+\n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n         self.read(id.hir_id);\n \n@@ -1085,6 +1093,24 @@ impl<'hir> Map<'hir> {\n     }\n }\n \n+impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.body(id)\n+    }\n+\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.item(id)\n+    }\n+\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.trait_item(id)\n+    }\n+\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.impl_item(id)\n+    }\n+}\n+\n pub struct NodesMatchingSuffix<'a> {\n     map: &'a Map<'a>,\n     item_name: &'a String,"}, {"sha": "97c14dd7e00541f180cbc407dc07d0ed11eca243", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,6 @@\n \n pub mod check_attr;\n pub mod exports;\n-pub mod intravisit;\n pub mod map;\n pub mod upvars;\n "}, {"sha": "4ca294f48615536a01498979d659079c165fe092", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,11 +1,12 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{self, HirId};\n use rustc_span::Span;\n \n@@ -43,7 +44,9 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -70,7 +73,9 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "16cfaec5ee91b852480cd5029fc5fd4d835ed2cb", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::map::Map;\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n@@ -7,6 +6,7 @@ use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n@@ -66,7 +66,9 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "8e2592b5318855a9ac70ad62c69a1ac12828cc30", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,8 +1,9 @@\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::middle::resolve_lifetime as rl;\n use crate::ty::{self, Region, TyCtxt};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -90,7 +91,9 @@ struct FindNestedTypeVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -207,7 +210,9 @@ struct TyPathVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'tcx>> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "3f43800590353dea0c72e619a27a73707c16e376", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -21,11 +21,10 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n-use rustc_data_structures::sync;\n-\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};\n@@ -109,13 +108,13 @@ macro_rules! late_lint_methods {\n             fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n-                a: $crate::hir::intravisit::FnKind<$hir>,\n+                a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n             fn check_fn_post(\n-                a: $crate::hir::intravisit::FnKind<$hir>,\n+                a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,"}, {"sha": "89f385a51bc6a186339efa84650430854f57b700", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -3,13 +3,13 @@\n use crate::middle::lang_items;\n use crate::session::config;\n \n-use crate::hir::intravisit;\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::TyCtxt;\n use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::PanicStrategy;\n@@ -136,7 +136,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'v>> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "385153b62ce8296082bb2119f9749f89ee273f1f", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -36,8 +36,8 @@\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::intravisit;\n-use rustc::hir::map::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use rustc::middle::cstore::CrateStore;\n@@ -51,6 +51,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n@@ -1484,7 +1485,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "4664340b15fb7d6222ebd74f7942f324adbe2671", "filename": "src/librustc_hir/intravisit.rs", "status": "renamed", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -31,21 +31,18 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use crate::hir::map::Map;\n-\n-use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n-use rustc_hir::*;\n+use crate::hir::*;\n+use crate::hir_id::CRATE_HIR_ID;\n+use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident, Label, Name};\n+use syntax::walk_list;\n \n pub struct DeepVisitor<'v, V> {\n     visitor: &'v mut V,\n }\n \n-impl<'v, 'hir, V> DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir> + 'v,\n-{\n+impl<'v, V> DeepVisitor<'v, V> {\n     pub fn new(base: &'v mut V) -> Self {\n         DeepVisitor { visitor: base }\n     }\n@@ -122,14 +119,22 @@ impl<'a> FnKind<'a> {\n     }\n }\n \n+/// An abstract representation of the HIR `rustc::hir::map::Map`.\n+pub trait Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir>;\n+    fn item(&self, id: HirId) -> &'hir Item<'hir>;\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested\n /// item-like things.\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, 'tcx> {\n+pub enum NestedVisitorMap<'this, M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n@@ -146,20 +151,20 @@ pub enum NestedVisitorMap<'this, 'tcx> {\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n-    OnlyBodies(&'this Map<'tcx>),\n+    OnlyBodies(&'this M),\n \n     /// Visits all nested things, including item-likes.\n     ///\n     /// **This is an unusual choice.** It is used when you want to\n     /// process everything within their lexical context. Typically you\n     /// kick off the visit by doing `walk_krate()`.\n-    All(&'this Map<'tcx>),\n+    All(&'this M),\n }\n \n-impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n+impl<'this, M> NestedVisitorMap<'this, M> {\n     /// Returns the map to use for an \"intra item-like\" thing (if any).\n     /// E.g., function body.\n-    pub fn intra(self) -> Option<&'this Map<'tcx>> {\n+    fn intra(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(map) => Some(map),\n@@ -169,7 +174,7 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n \n     /// Returns the map to use for an \"item-like\" thing (if any).\n     /// E.g., item, impl-item.\n-    pub fn inter(self) -> Option<&'this Map<'tcx>> {\n+    fn inter(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(_) => None,\n@@ -195,6 +200,8 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'v>: Sized {\n+    type Map: Map<'v>;\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n \n@@ -214,7 +221,7 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than\n@@ -226,10 +233,8 @@ pub trait Visitor<'v>: Sized {\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.expect_item(id.id));\n-        if let Some(item) = opt_item {\n-            self.visit_item(item);\n-        }\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.item(id.id));\n+        walk_list!(self, visit_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for trait items. See\n@@ -238,9 +243,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_trait_item(item);\n-        }\n+        walk_list!(self, visit_trait_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for impl items. See\n@@ -249,9 +252,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_impl_item(item);\n-        }\n+        walk_list!(self, visit_impl_item, opt_item);\n     }\n \n     /// Invoked to visit the body of a function, method or closure. Like\n@@ -260,9 +261,7 @@ pub trait Visitor<'v>: Sized {\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n         let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));\n-        if let Some(body) = opt_body {\n-            self.visit_body(body);\n-        }\n+        walk_list!(self, visit_body, opt_body);\n     }\n \n     fn visit_param(&mut self, param: &'v Param<'v>) {\n@@ -496,21 +495,16 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n     }\n }\n \n-pub fn walk_poly_trait_ref<'v, V>(\n+pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     trait_ref: &'v PolyTraitRef<'v>,\n     _modifier: TraitBoundModifier,\n-) where\n-    V: Visitor<'v>,\n-{\n+) {\n     walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n-pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef<'v>)\n-where\n-    V: Visitor<'v>,\n-{\n+pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef<'v>) {\n     visitor.visit_id(trait_ref.hir_ref_id);\n     visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)\n }\n@@ -688,9 +682,7 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(\n ) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n-            if let Some(ref qself) = *maybe_qself {\n-                visitor.visit_ty(qself);\n-            }\n+            walk_list!(visitor, visit_ty, maybe_qself);\n             visitor.visit_path(path, id)\n         }\n         QPath::TypeRelative(ref qself, ref segment) => {\n@@ -712,9 +704,7 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(\n     segment: &'v PathSegment<'v>,\n ) {\n     visitor.visit_ident(segment.ident);\n-    if let Some(id) = segment.hir_id {\n-        visitor.visit_id(id);\n-    }\n+    walk_list!(visitor, visit_id, segment.hir_id);\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }\n@@ -1003,9 +993,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     struct_definition: &'v VariantData<'v>,\n ) {\n-    if let Some(ctor_hir_id) = struct_definition.ctor_hir_id() {\n-        visitor.visit_id(ctor_hir_id);\n-    }\n+    walk_list!(visitor, visit_id, struct_definition.ctor_hir_id());\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n@@ -1125,15 +1113,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n         }\n         ExprKind::Break(ref destination, ref opt_expr) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n         ExprKind::Continue(ref destination) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n         }\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);", "previous_filename": "src/librustc/hir/intravisit.rs"}, {"sha": "66494d0fa736c9839508f251866a45de94a8c841", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -15,6 +15,7 @@ pub mod def;\n pub mod def_id;\n mod hir;\n pub mod hir_id;\n+pub mod intravisit;\n pub mod itemlikevisit;\n pub mod pat_util;\n pub mod print;"}, {"sha": "9490128e32d6a3e6eed9edcb46c2e0dc2f89a939", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -36,12 +36,13 @@\n use graphviz as dot;\n use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::dep_graph::{DepGraphQuery, DepKind, DepNode};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n@@ -159,7 +160,9 @@ impl IfThisChanged<'tcx> {\n }\n \n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "ddfed53fa33491895e08504ae7727129af63ad74", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -14,12 +14,13 @@\n //! the required condition is not met.\n \n use rustc::dep_graph::{label_strs, DepNode};\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node as HirNode;\n use rustc_hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n@@ -547,7 +548,9 @@ impl FindAllAttrs<'tcx> {\n }\n \n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "23740af525971e98d34e0b8b5cd1811cce7bc462", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -25,6 +25,7 @@ use std::fmt::Write;\n \n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::traits::misc::can_type_implement_copy;\n@@ -1088,12 +1089,14 @@ impl TypeAliasBounds {\n         // bound.  Let's see if this type does that.\n \n         // We use a HIR visitor to walk the type.\n-        use rustc::hir::intravisit::{self, Visitor};\n+        use rustc_hir::intravisit::{self, Visitor};\n         struct WalkAssocTypes<'a, 'db> {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "a37e3be9ced92fedc4a0074dc2bea6e3dd9bde86", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -14,15 +14,16 @@\n //! upon. As the ast is traversed, this keeps track of the current lint level\n //! for all lint attributes.\n \n-use rustc::hir::intravisit as hir_visit;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit as hir_visit;\n+use rustc_hir::intravisit::Visitor;\n use rustc_span::Span;\n use std::slice;\n use syntax::ast;\n@@ -86,10 +87,12 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {\n impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     for LateContextAndPass<'a, 'tcx, T>\n {\n+    type Map = Map<'tcx>;\n+\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, Self::Map> {\n         hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n     }\n "}, {"sha": "3d3e57fe2bae30bcd14038c660dbb544821fab67", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,9 +1,10 @@\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::intravisit;\n use syntax::ast;\n \n pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n@@ -50,7 +51,9 @@ impl LintLevelMapBuilder<'_, '_> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "13e57ecf1469c4a59de3437b786bd90b903ae92a", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,10 +1,10 @@\n use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint;\n use rustc::ty;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, BytePos, Span};"}, {"sha": "952d3bb8582768bc87249424d773b4a402b28100", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -2,6 +2,7 @@ use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::Map;\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n@@ -35,9 +36,8 @@ use syntax::ast;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n \n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n \n struct EncodeContext<'tcx> {\n@@ -1520,7 +1520,9 @@ impl EncodeContext<'tcx> {\n \n // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.\n impl Visitor<'tcx> for EncodeContext<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {"}, {"sha": "ce0c081bc160863d90f00acbd04e3048ac62201e", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,7 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -14,6 +14,7 @@ use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span};\n@@ -49,7 +50,9 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -730,7 +733,9 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "a58d17569ef7181060d08335a57bc7900e8aae49", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::FnKind;\n use rustc_index::bit_set::BitSet;\n \n pub fn check(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {"}, {"sha": "02c54803842f0c7d815792fb4d737c92e7d6b7de", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n@@ -9,6 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit;\n use rustc_hir::Node;\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -476,7 +477,9 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "a2f76042ea72b965e06ac2b0f7cf64d852a8d6ce", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,11 +1,12 @@\n use crate::{build, shim};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -85,7 +86,8 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> {\n+        type Map = Map<'tcx>;\n+        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "47e6e5ccc24fe2cc6666c419a8cb6da4b352c2f5", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -8,14 +8,14 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n@@ -200,7 +200,9 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "f626a5f8cb0d1bd3c31f111c9a269275c991514a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -2,7 +2,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n@@ -11,6 +11,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n \n@@ -210,7 +211,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -563,11 +566,13 @@ impl DeadVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for DeadVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Walk nested items in place so that we don't report dead-code\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "b6ca2b3a595db4d052557ad7af0f6e882bb7d907", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -2,10 +2,11 @@\n // pieces of AST and HIR. The resulting numbers are good approximations but not\n // completely accurate (some things might be counted twice, others missed).\n \n-use rustc::hir::intravisit as hir_visit;\n+use rustc::hir::map::Map;\n use rustc::util::common::to_readable_str;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::intravisit as hir_visit;\n use rustc_hir::HirId;\n use rustc_span::Span;\n use syntax::ast::{self, AttrId, NodeId};\n@@ -92,7 +93,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param(self, param)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "ae8ac2e2c2e358ea601797ecc2799d5454ad24d2", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,12 +1,12 @@\n use errors::struct_span_err;\n+use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n@@ -124,7 +124,9 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -139,7 +141,9 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "e7d490d6d8ddbe332f811d4a067f802d443a3f1b", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -5,11 +5,12 @@\n // (unlike lang features), which means we need to collect them instead.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n@@ -113,7 +114,9 @@ impl LibFeatureCollector<'tcx> {\n }\n \n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "5c1bc4d1eaa87f1d5babe8111e741579547bd9fa", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -97,14 +97,15 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use errors::Applicability;\n-use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -153,7 +154,9 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -1348,7 +1351,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "333b39c3bb30277027d2d26260bd5cdfe41e2d58", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -3,12 +3,12 @@ use Context::*;\n use rustc::session::Session;\n \n use errors::{struct_span_err, Applicability};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_span::Span;\n \n@@ -44,7 +44,9 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n }\n \n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "5ce677f52cea670a016596344af2f270a0aad1ce", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -5,8 +5,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n@@ -18,6 +17,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::intravisit;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n use rustc_target::spec::abi::Abi;\n@@ -82,7 +83,9 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "e79ca5c78d6d64bd5e8dc31961e2b40db38d82d8", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -6,13 +6,14 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n@@ -695,7 +696,9 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "be098543a2ff2cb837c2e500b66f7b029465de8d", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -2,7 +2,7 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n@@ -14,6 +14,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -204,7 +205,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -293,7 +296,9 @@ impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -429,10 +434,12 @@ struct Checker<'tcx> {\n }\n \n impl Visitor<'tcx> for Checker<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "a96d59340237defd64630410ca9053e9962321a2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,7 @@\n #![recursion_limit = \"256\"]\n \n use rustc::bug;\n-use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n@@ -16,6 +16,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n@@ -372,7 +373,9 @@ struct PubRestrictedVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n@@ -670,9 +673,11 @@ impl EmbargoVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1039,9 +1044,11 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1179,9 +1186,11 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1437,7 +1446,9 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -1463,9 +1474,11 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1906,7 +1919,9 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "469e1b9aa62077e3c2be9a32eb03b8afb930b765", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -6,7 +6,6 @@\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n@@ -17,6 +16,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc_span::symbol::{kw, sym};\n@@ -361,7 +361,9 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1086,7 +1088,9 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2129,7 +2133,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+                type Map = Map<'a>;\n+\n+                fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                     NestedVisitorMap::None\n                 }\n \n@@ -2217,7 +2223,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                 NestedVisitorMap::None\n             }\n \n@@ -2802,7 +2810,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2843,7 +2853,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "4b4fa4b7147fc0a780109ab8c2a57c4b3e440e99", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,7 +1,7 @@\n mod environment;\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::map::Map;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, FromEnv, GoalKind, PolyDomainGoal, ProgramClause,\n     ProgramClauseCategory, WellFormed, WhereClause,\n@@ -12,6 +12,7 @@ use rustc::ty::{self, List, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use syntax::ast;\n \n@@ -600,7 +601,9 @@ impl ClauseDumper<'tcx> {\n }\n \n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "0233b68a7ce21c30cac8aa7eb3ea01178806cf25", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -10,7 +10,6 @@ use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use errors::{struct_span_err, Applicability, DiagnosticId};\n-use rustc::hir::intravisit::Visitor;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n@@ -23,6 +22,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n use rustc_hir::{ExprKind, GenericArg, GenericArgs};\n use rustc_span::symbol::sym;"}, {"sha": "449c2e90ff202cb1d224f51f03eb6d6288eeb5c0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,5 +1,5 @@\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -9,6 +9,7 @@ use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_span::Span;\n \n@@ -890,9 +891,10 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            fn nested_visit_map<'this>(\n-                                &'this mut self,\n-                            ) -> intravisit::NestedVisitorMap<'this, 'v>\n+                            type Map = Map<'v>;\n+                            fn nested_visit_map(\n+                                &mut self,\n+                            ) -> intravisit::NestedVisitorMap<'_, Self::Map>\n                             {\n                                 intravisit::NestedVisitorMap::None\n                             }"}, {"sha": "9d8805f225d7e1452816d10dddd764d83d7da4e5", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,13 +4,14 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n use rustc_span::Span;\n \n@@ -193,7 +194,9 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "4f55d9ab70edee3eee10a547bc359668de00b5f8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -5,8 +5,8 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n+use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n@@ -15,6 +15,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_span::{source_map, FileName, Span};\n use syntax::ast;\n@@ -1124,7 +1125,9 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "f10edc1a468b40cd60a68c091ac278ecdaa23f0c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -91,7 +91,7 @@ use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -118,6 +118,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::vec::Idx;\n@@ -1170,7 +1171,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "967741092febe41b6b277a382d2bd506e0739a86", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -76,14 +76,15 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_span::Span;\n use std::mem;\n@@ -414,7 +415,9 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "9b4bd6d78ff28896aacc23bdacec4444b8eac70a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -35,13 +35,14 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::UpvarRegion;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -59,7 +60,9 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "b4798fb67f80f42ae99ade0af70c0cd4ba44f71b", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -4,7 +4,7 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n@@ -13,6 +13,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, DefIndex};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -242,7 +243,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "84f2e186eaa356fb90adc8c0ecde323020873097", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -21,7 +21,7 @@ use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n use errors::{struct_span_err, Applicability, StashKey};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n use rustc::traits;\n@@ -37,6 +37,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, Node, Unsafety};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -104,7 +105,9 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n@@ -185,7 +188,9 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -885,7 +890,9 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -1715,7 +1722,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {"}, {"sha": "94e31108901eae8f12ef2a53f2103aad2997c8f6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::intravisit;\n use rustc::hir::map::Map;\n use rustc::session::{self, config, DiagnosticOutput};\n use rustc::util::common::ErrorReported;\n use rustc_data_structures::sync::Lrc;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n+use rustc_hir::intravisit;\n use rustc_interface::interface;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n@@ -899,7 +899,9 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.map)\n     }\n "}, {"sha": "abb2e93757ed395777406a1ed94805c49b6ec5de", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ef24e7596a522a13a3d2c385567d3592b4dfa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=0b3ef24e7596a522a13a3d2c385567d3592b4dfa", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_hir;\n extern crate rustc_span;\n extern crate syntax;\n \n-use rustc::hir::intravisit;\n+use rustc_hir::intravisit;\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};"}]}