{"sha": "62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZjE4NDAzMGFiOWRhMmMzYWNkOTVkM2Y3Zjk0YzRiYzE4MjBiMDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-14T16:21:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T16:21:55Z"}, "message": "Rollup merge of #72170 - lcnr:lang_item, r=oli-obk\n\nuse `require_lang_item` over `unwrap`.\n\nDoes not yet replace all uses of `lang_items\\(\\)\\.*\\.unwrap\\(\\)`, as there are more\nthan I expected :sweat_smile:\n\nFixes #72099\n\nr? @RalfJung\n\n*edit: The goal of this this PR is to change ICE from missing lang items to a fatal error.*", "tree": {"sha": "00f74410a9d1506a092db329922cd3eaebb75351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f74410a9d1506a092db329922cd3eaebb75351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevXAjCRBK7hj4Ov3rIwAAdHIIADQ7sRkp3Gk/ftaZLs/9qpd7\nv0/YFXpNtMAzr0red4NQ5qe/XXIgmJGNSOgdsBYbq8I3cnHTPT/YKMKgh7KPegdO\nYqu+PstWOicb14t14CgOUeTo9fjXueGwLAtweRtGjh4D0cD9zlyyp0yl+aAqMMke\nKEnhWun7Mr3/NCRRZG9CyzW7ezbEpXwFsND2haEWjdWTnIKAYJLWIfYU2z8LFDHi\nh0+jzMJJT8SXtUslqS6covM820d+P4ehEgWA5NbIDr56esGesn0q0qo7bV4aXJva\ndZ9N55e5XnsCxSY8IJU4t0y0OmsgdtsnuNOvrQ+WbumxxeTVVig51eUjkQtcvXc=\n=xEWV\n-----END PGP SIGNATURE-----\n", "payload": "tree 00f74410a9d1506a092db329922cd3eaebb75351\nparent d732aeff914b9c3bf53ba1857ead33745c00c88a\nparent 9001a6429969be2732f0f0b650f193faeade89e7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589473315 +0200\ncommitter GitHub <noreply@github.com> 1589473315 +0200\n\nRollup merge of #72170 - lcnr:lang_item, r=oli-obk\n\nuse `require_lang_item` over `unwrap`.\n\nDoes not yet replace all uses of `lang_items\\(\\)\\.*\\.unwrap\\(\\)`, as there are more\nthan I expected :sweat_smile:\n\nFixes #72099\n\nr? @RalfJung\n\n*edit: The goal of this this PR is to change ICE from missing lang items to a fatal error.*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "html_url": "https://github.com/rust-lang/rust/commit/62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d732aeff914b9c3bf53ba1857ead33745c00c88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d732aeff914b9c3bf53ba1857ead33745c00c88a", "html_url": "https://github.com/rust-lang/rust/commit/d732aeff914b9c3bf53ba1857ead33745c00c88a"}, {"sha": "9001a6429969be2732f0f0b650f193faeade89e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9001a6429969be2732f0f0b650f193faeade89e7", "html_url": "https://github.com/rust-lang/rust/commit/9001a6429969be2732f0f0b650f193faeade89e7"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "52ebcd63e7cda40a5e807cfee3529551ed11d9de", "filename": "src/librustc_middle/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fadjustment.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -2,6 +2,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{DerefMutTraitLangItem, DerefTraitLangItem};\n use rustc_macros::HashStable;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n@@ -117,11 +118,11 @@ pub struct OverloadedDeref<'tcx> {\n impl<'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n-            hir::Mutability::Not => tcx.lang_items().deref_trait(),\n-            hir::Mutability::Mut => tcx.lang_items().deref_mut_trait(),\n+            hir::Mutability::Not => tcx.require_lang_item(DerefTraitLangItem, None),\n+            hir::Mutability::Mut => tcx.require_lang_item(DerefMutTraitLangItem, None),\n         };\n         let method_def_id = tcx\n-            .associated_items(trait_def_id.unwrap())\n+            .associated_items(trait_def_id)\n             .in_definition_order()\n             .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()"}, {"sha": "1ce079821a22e52665609836777f986e2654a681", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -4,7 +4,7 @@ use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::lang_items::DropInPlaceFnLangItem;\n+use rustc_hir::lang_items::{DropInPlaceFnLangItem, FnOnceTraitLangItem};\n use rustc_macros::HashStable;\n \n use std::fmt;\n@@ -375,7 +375,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: ty::SubstsRef<'tcx>,\n     ) -> Instance<'tcx> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n-        let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n+        let fn_once = tcx.require_lang_item(FnOnceTraitLangItem, None);\n         let call_once = tcx\n             .associated_items(fn_once)\n             .in_definition_order()"}, {"sha": "2d49d85c4df54a36107d37b2114a54d26bc692cf", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::ast::{self, IntTy, UintTy};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n+use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n@@ -2314,13 +2315,13 @@ impl<'tcx> ty::Instance<'tcx> {\n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n-                let pin_did = tcx.lang_items().pin_type().unwrap();\n+                let pin_did = tcx.require_lang_item(PinTypeLangItem, None);\n                 let pin_adt_ref = tcx.adt_def(pin_did);\n                 let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n                 let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n                 sig.map_bound(|sig| {\n-                    let state_did = tcx.lang_items().gen_state().unwrap();\n+                    let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n                     let state_adt_ref = tcx.adt_def(state_did);\n                     let state_substs = tcx.intern_substs(&[\n                         sig.yield_ty.into(),"}, {"sha": "bad176c603f35c8833b7dc11ef3ed696b2d29f8a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -10,6 +10,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::lang_items::{CoerceUnsizedTraitLangItem, CopyTraitLangItem, SizedTraitLangItem};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n@@ -502,7 +503,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n             let trait_ref = ty::TraitRef {\n-                def_id: tcx.lang_items().copy_trait().unwrap(),\n+                def_id: tcx.require_lang_item(CopyTraitLangItem, Some(self.last_span)),\n                 substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n             };\n \n@@ -1468,7 +1469,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.tcx().features().unsized_locals {\n                     let trait_ref = ty::TraitRef {\n-                        def_id: tcx.lang_items().sized_trait().unwrap(),\n+                        def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n                     };\n                     self.prove_trait_ref(\n@@ -2013,7 +2014,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     ty::Predicate::Trait(\n                                         ty::Binder::bind(ty::TraitPredicate {\n                                             trait_ref: ty::TraitRef::new(\n-                                                self.tcx().lang_items().copy_trait().unwrap(),\n+                                                self.tcx().require_lang_item(\n+                                                    CopyTraitLangItem,\n+                                                    Some(self.last_span),\n+                                                ),\n                                                 tcx.mk_substs_trait(ty, &[]),\n                                             ),\n                                         }),\n@@ -2037,7 +2041,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 let trait_ref = ty::TraitRef {\n-                    def_id: tcx.lang_items().sized_trait().unwrap(),\n+                    def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n                 };\n \n@@ -2135,7 +2139,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n-                            def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n+                            def_id: tcx.require_lang_item(\n+                                CoerceUnsizedTraitLangItem,\n+                                Some(self.last_span),\n+                            ),\n                             substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n                         };\n "}, {"sha": "a8094990594f3ae83f98795ebe5092c7b35ba138", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -580,10 +580,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             }\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n                 let tcx = self.tcx;\n-                let exchange_malloc_fn_def_id = tcx\n-                    .lang_items()\n-                    .require(ExchangeMallocFnLangItem)\n-                    .unwrap_or_else(|e| tcx.sess.fatal(&e));\n+                let exchange_malloc_fn_def_id =\n+                    tcx.require_lang_item(ExchangeMallocFnLangItem, None);\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n                 if should_monomorphize_locally(tcx, &instance) {\n                     self.output.push(create_fn_mono_item(instance));"}, {"sha": "d025468d28bf302b5d1c9050caa6865cd0595d2c", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -1,5 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::FnMutTraitLangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -70,7 +71,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             build_call_shim(tcx, instance, None, CallKind::Direct(def_id), None)\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n-            let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n+            let fn_mut = tcx.require_lang_item(FnMutTraitLangItem, None);\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n                 .in_definition_order()"}, {"sha": "14faa5be02f4ee9f3f4cec734049b157278615f3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -61,6 +61,7 @@ use crate::util::storage;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext};\n@@ -381,7 +382,7 @@ fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Bo\n fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n-    let pin_did = tcx.lang_items().pin_type().unwrap();\n+    let pin_did = tcx.require_lang_item(PinTypeLangItem, Some(body.span));\n     let pin_adt_ref = tcx.adt_def(pin_did);\n     let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n     let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);\n@@ -1207,7 +1208,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         };\n \n         // Compute GeneratorState<yield_ty, return_ty>\n-        let state_did = tcx.lang_items().gen_state().unwrap();\n+        let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n         let state_adt_ref = tcx.adt_def(state_did);\n         let state_substs = tcx.intern_substs(&[yield_ty.into(), body.return_ty().into()]);\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);"}, {"sha": "af7c88b178d32c83fdba6b182e6b70a272efae0e", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -1,6 +1,6 @@\n use crate::util::patch::MirPatch;\n use rustc_hir as hir;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::{BoxFreeFnLangItem, DropTraitLangItem};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n@@ -535,7 +535,7 @@ where\n     fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind)) -> BasicBlock {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n-        let drop_trait = tcx.lang_items().drop_trait().unwrap();\n+        let drop_trait = tcx.require_lang_item(DropTraitLangItem, None);\n         let drop_fn = tcx.associated_items(drop_trait).in_definition_order().next().unwrap();\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n@@ -877,8 +877,7 @@ where\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n-        let free_func =\n-            tcx.require_lang_item(lang_items::BoxFreeFnLangItem, Some(self.source_info.span));\n+        let free_func = tcx.require_lang_item(BoxFreeFnLangItem, Some(self.source_info.span));\n         let args = adt.variants[VariantIdx::new(0)]\n             .fields\n             .iter()"}, {"sha": "d3129751586af1fb9a142144be4154083a452c26", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -1,4 +1,5 @@\n use rustc_hir as hir;\n+use rustc_hir::lang_items::EqTraitLangItem;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::Field;\n@@ -140,7 +141,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // code at the moment, because types like `for <'a> fn(&'a ())` do\n                 // not *yet* implement `PartialEq`. So for now we leave this here.\n                 let ty_is_partial_eq: bool = {\n-                    let partial_eq_trait_id = self.tcx().lang_items().eq_trait().unwrap();\n+                    let partial_eq_trait_id = self.tcx().require_lang_item(EqTraitLangItem, None);\n                     let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n                         self.tcx(),\n                         self.param_env,"}, {"sha": "0779882b6dd58145f6d0ce552b09ea13213f732f", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -20,6 +20,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n@@ -1222,7 +1223,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n \n     let tcx = selcx.tcx();\n \n-    let gen_def_id = tcx.lang_items().gen_trait().unwrap();\n+    let gen_def_id = tcx.require_lang_item(GeneratorTraitLangItem, None);\n \n     let predicate = super::util::generator_trait_ref_and_outputs(\n         tcx,\n@@ -1309,7 +1310,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n     debug!(\"confirm_callable_candidate({:?},{:?})\", obligation, fn_sig);\n \n     // the `Output` associated type is declared on `FnOnce`\n-    let fn_once_def_id = tcx.lang_items().fn_once_trait().unwrap();\n+    let fn_once_def_id = tcx.require_lang_item(FnOnceTraitLangItem, None);\n \n     let predicate = super::util::closure_trait_ref_and_return_type(\n         tcx,"}, {"sha": "64de94ea58cf4e3c3ce06470122ce30558f2540c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f184030ab9da2c3acd95d3f7f94c4bc1820b07/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=62f184030ab9da2c3acd95d3f7f94c4bc1820b07", "patch": "@@ -7,6 +7,7 @@ use rustc_trait_selection::traits::{self, ObligationCause};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::lang_items::DerefTraitLangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n@@ -634,7 +635,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ if sp == expr.span && !is_macro => {\n                 // Check for `Deref` implementations by constructing a predicate to\n                 // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.lang_items().deref_trait().unwrap();\n+                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(expr.span));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(deref_trait)"}]}