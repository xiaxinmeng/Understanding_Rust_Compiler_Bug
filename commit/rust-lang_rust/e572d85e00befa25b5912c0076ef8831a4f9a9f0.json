{"sha": "e572d85e00befa25b5912c0076ef8831a4f9a9f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzJkODVlMDBiZWZhMjViNTkxMmMwMDc2ZWY4ODMxYTRmOWE5ZjA=", "commit": {"author": {"name": "Mark", "email": "MarkMcCaskey@users.noreply.github.com", "date": "2017-08-31T16:49:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-31T16:49:48Z"}, "message": "Merge branch 'master' into master", "tree": {"sha": "9dc00bb5150d55b456da8ac57251e8354f3d740e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc00bb5150d55b456da8ac57251e8354f3d740e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e572d85e00befa25b5912c0076ef8831a4f9a9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e572d85e00befa25b5912c0076ef8831a4f9a9f0", "html_url": "https://github.com/rust-lang/rust/commit/e572d85e00befa25b5912c0076ef8831a4f9a9f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e572d85e00befa25b5912c0076ef8831a4f9a9f0/comments", "author": {"login": "MarkMcCaskey", "id": 5770194, "node_id": "MDQ6VXNlcjU3NzAxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5770194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkMcCaskey", "html_url": "https://github.com/MarkMcCaskey", "followers_url": "https://api.github.com/users/MarkMcCaskey/followers", "following_url": "https://api.github.com/users/MarkMcCaskey/following{/other_user}", "gists_url": "https://api.github.com/users/MarkMcCaskey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkMcCaskey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkMcCaskey/subscriptions", "organizations_url": "https://api.github.com/users/MarkMcCaskey/orgs", "repos_url": "https://api.github.com/users/MarkMcCaskey/repos", "events_url": "https://api.github.com/users/MarkMcCaskey/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkMcCaskey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d69c985be6a196e4a30f6deb0d8347aaad62662", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d69c985be6a196e4a30f6deb0d8347aaad62662", "html_url": "https://github.com/rust-lang/rust/commit/1d69c985be6a196e4a30f6deb0d8347aaad62662"}, {"sha": "97b01abf3d222523d0db4f79c13ed45e7fef27e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b01abf3d222523d0db4f79c13ed45e7fef27e3", "html_url": "https://github.com/rust-lang/rust/commit/97b01abf3d222523d0db4f79c13ed45e7fef27e3"}], "stats": {"total": 1581, "additions": 1267, "deletions": 314}, "files": [{"sha": "d21bb62b742b0dc7472402e7ee6579a2b5f07937", "filename": "src/Cargo.lock", "status": "modified", "additions": 291, "deletions": 15, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -176,7 +176,7 @@ dependencies = [\n [[package]]\n name = \"cargo\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/rust-lang/cargo#bcf3997b1fa177afc5b6c632a6fbbf6cc75df427\"\n+source = \"git+https://github.com/rust-lang/cargo#3d3f2c05d742e5f907e951aa8849b03f0bc1a895\"\n replace = \"cargo 0.22.0\"\n \n [[package]]\n@@ -312,6 +312,14 @@ dependencies = [\n name = \"completion\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"conv\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n@@ -353,6 +361,30 @@ name = \"crossbeam\"\n version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"cssparser\"\n+version = \"0.13.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cssparser-macros 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"procedural-masquerade 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cssparser-macros\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"procedural-masquerade 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"curl\"\n version = \"0.4.8\"\n@@ -380,6 +412,11 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"custom_derive\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"dbghelp-sys\"\n version = \"0.2.0\"\n@@ -389,6 +426,14 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"debug_unreachable\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"derive-new\"\n version = \"0.3.0\"\n@@ -417,7 +462,7 @@ dependencies = [\n \n [[package]]\n name = \"dtoa\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -522,9 +567,18 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"futf\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"futures\"\n-version = \"0.1.14\"\n+version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -634,6 +688,26 @@ dependencies = [\n name = \"hover\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"html-diff\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"html5ever\"\n+version = \"0.18.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"markup5ever 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"idna\"\n version = \"0.1.4\"\n@@ -688,7 +762,7 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -697,15 +771,15 @@ version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"jsonrpc-core\"\n version = \"7.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"futures 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -721,6 +795,17 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"kuchiki\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"html5ever 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"languageserver-types\"\n version = \"0.12.0\"\n@@ -808,6 +893,41 @@ dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"mac\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"magenta\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"magenta-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"magenta-sys\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"markup5ever\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tendril 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"matches\"\n version = \"0.1.6\"\n@@ -902,7 +1022,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1029,19 +1149,64 @@ name = \"pest\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"phf\"\n+version = \"0.7.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"phf_codegen\"\n+version = \"0.7.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"phf_generator\"\n+version = \"0.7.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"phf_shared\"\n+version = \"0.7.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pkg-config\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"precomputed-hash\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"procedural-masquerade\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n@@ -1106,10 +1271,11 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.3.15\"\n+version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1634,6 +1800,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"html-diff 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1686,6 +1853,21 @@ name = \"scopeguard\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"selectors\"\n+version = \"0.18.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"precomputed-hash 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"semver\"\n version = \"0.7.0\"\n@@ -1737,8 +1919,8 @@ name = \"serde_json\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1752,6 +1934,16 @@ name = \"shell-escape\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"siphasher\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"smallvec\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"socket2\"\n version = \"0.2.2\"\n@@ -1801,6 +1993,36 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"string_cache\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"precomputed-hash 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"string_cache_codegen\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"string_cache_shared\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"strings\"\n version = \"0.1.0\"\n@@ -1923,7 +2145,17 @@ name = \"tempdir\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"tendril\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf-8 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2058,6 +2290,14 @@ name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unreachable\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"unreachable\"\n version = \"1.0.0\"\n@@ -2101,6 +2341,14 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"utf-8\"\n+version = \"0.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"0.1.3\"\n@@ -2202,16 +2450,21 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2267a8fdd4dce6956ba6649e130f62fb279026e5e84b92aa939ac8f85ce3f9f0\"\n \"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n+\"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n \"checksum core-foundation 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5909502e547762013619f4c4e01cc7393c20fe2d52d7fa471c1210adb2320dc7\"\n \"checksum core-foundation-sys 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc9fb3d6cb663e6fd7cf1c63f9b144ee2b1e4a78595a0451dd34bff85b9a3387\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n+\"checksum cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef6124306e5ebc5ab11891d063aeafdd0cdc308079b708c8b566125f3680292b\"\n+\"checksum cssparser-macros 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"079adec4af52bb5275eadd004292028c79eb3c5f5b4ee8086a36d4197032f6df\"\n \"checksum curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7034c534a1d7d22f7971d6088aa9d281d219ef724026c3428092500f41ae9c2c\"\n \"checksum curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5481162dc4f424d088581db2f979fa7d4c238fe9794595de61d8d7522e277de\"\n+\"checksum custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef8ae57c4978a2acd8b869ce6b9ca1dfe817bff704c220209fdef2c0b75a01b9\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n+\"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41be6ca3b99e0c0483fb2389685448f650459c3ecbe4e18d7705d8010ec4ab8e\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b5b93718f8b3e5544fcc914c43de828ca6c6ace23e0332c6080a2977b49787a\"\n-\"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n+\"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n@@ -2222,7 +2475,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fnv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cc484842f1e2884faf56f529f960cc12ad8c71ce96cc7abba0a067c98fee344\"\n \"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n \"checksum fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ab76cfd2aaa59b7bf6688ad9ba15bbae64bff97f04ea02144cfd3443e5c2866\"\n-\"checksum futures 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b63a4792d4f8f686defe3b39b92127fea6344de5d38202b2ee5a11bbbf29d6a\"\n+\"checksum futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51f93f3de6ba1794dcd5810b3546d004600a59a98266487c8407bc4b24e398f3\"\n+\"checksum futures 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a82bdc62350ca9d7974c760e9665102fc9d740992a528c2254aa930e53b783c4\"\n \"checksum gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\" = \"120d07f202dcc3f72859422563522b66fe6463a4c513df062874daad05f85f0a\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa01936ac96555c083c0e8553f672616274408d9d3fc5b8696603fbf63ff43ee\"\n@@ -2233,12 +2487,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum handlebars 0.26.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fbba80e74e9591a5f6a4ffff6b7f9d645759a896e431cfbdc853e9184370294a\"\n \"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa\"\n \"checksum home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f25ae61099d8f3fee8b483df0bd4ecccf4b2731897aad40d50eca1b641fe6db\"\n+\"checksum html-diff 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17dbc64943cae56925cf9ff22e8c76ccdb8010f6675a1a56660ec7e597ffa7c7\"\n+\"checksum html5ever 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a49d5001dd1bddf042ea41ed4e0a671d50b1bf187e66b349d7ec613bdce4ad90\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n-\"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n+\"checksum itoa 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f74cf6ca1bdbc28496a2b9798ab7fccc2ca5a42cace95bb2b219577216a5fb90\"\n \"checksum jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133\"\n \"checksum jsonrpc-core 7.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"903e5eee845f3d83c1436d12848d97b1247cf850ff06a8e1db2f1ce3543af2cf\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+\"checksum kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef2ea4f2f7883cd7c6772b06c14abca01a2cc1f75c426cebffcf6b3b925ef9fc\"\n \"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a014d9226c2cc402676fbe9ea2e15dd5222cd1dd57f576b5b283178c944a264\"\n@@ -2247,6 +2504,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd64ef8ee652185674455c1d450b83cbc8ad895625d543b5324d923f82e4d8\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum lzma-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66b2e318eb97ab84f05725471f90c52a09c964053a5899a13fd0165acc26d00b\"\n+\"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n+\"checksum magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf0336886480e671965f794bc9b6fce88503563013d1bfb7a502c81fe3ac527\"\n+\"checksum magenta-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40d014c7011ac470ae28e2f76a02bfea4a8480f73e701353b49ad7a8d75f4699\"\n+\"checksum markup5ever 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff834ac7123c6a37826747e5ca09db41fd7a83126792021c2e636ad174bb77d3\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum mdbook 0.0.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22911d86cde6f80fa9f0fb2a68bbbde85d97af4fe0ce267141c83a4187d28700\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n@@ -2269,14 +2530,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb325642290f28ee14d8c6201159949a872f220c62af6e110a56ea914fbe42fc\"\n+\"checksum phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d62594c0bb54c464f633175d502038177e90309daf2e0158be42ed5f023ce88f\"\n+\"checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03\"\n+\"checksum phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e24b0ca9643bdecd0632f2b3da6b1b89bbb0030e0b992afc1113b23a7bc2f2\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n+\"checksum precomputed-hash 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf1fc3616b3ef726a847f2cd2388c646ef6a1f1ba4835c2629004da48184150\"\n+\"checksum procedural-masquerade 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c93cdc1fb30af9ddf3debc4afbdb0f35126cbd99daa229dd76cdd5349b41d989\"\n \"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c36987d4978eb1be2e422b1e0423a557923a5c3e7e6f31d5699e9aafaefa469\"\n \"checksum quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c5cf478fe1006dbcc72567121d23dbdae5f1632386068c5c86ff4f645628504\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f120c7510ef7aff254aeb06067fb6fac573ec96a1660e194787cf9dced412bf0\"\n-\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n+\"checksum rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb250fd207a4729c976794d03db689c9be1d634ab5a1c9da9492a13d8fecbcdf\"\n \"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n@@ -2291,6 +2558,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n+\"checksum selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3c89b1c6a3c029c82263f7dd2d44d0005ee7374eb09e254ab59dede4353a8c0\"\n \"checksum semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd61b85a0fa777f7fb7c454b9189b2941b110d1385ce84d7f76efdf1606a85\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7726f29ddf9731b17ff113c461e362c381d9d69433f79de4f3dd572488823e9\"\n@@ -2299,8 +2567,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c10e798e4405d7dcec3658989e35ee6706f730a9ed7c1184d5ebd84317e82f46\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n+\"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n+\"checksum smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f8266519bc1d17d0b5b16f6c21295625d562841c708f6376f49028a43e9c11e\"\n \"checksum socket2 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4daf80fcf54186fac4fe049e0b39d36a5cfde69a11a06413e61e77f553cccf9a\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n+\"checksum string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"413fc7852aeeb5472f1986ef755f561ddf0c789d3d796e65f0b6fe293ecd4ef8\"\n+\"checksum string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"479cde50c3539481f33906a387f2bd17c8e87cb848c35b6021d41fb81ff9b4d7\"\n+\"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n@@ -2311,6 +2584,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n \"checksum tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"281285b717926caa919ad905ef89c63d75805c7d89437fb873100925a53f2b1b\"\n \"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n+\"checksum tendril 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1b72f8e2f5b73b65c315b1a70c730f24b9d7a25f39e98de8acbe2bb795caea\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2b6b55df3198cc93372e85dd2ed817f0e38ce8cc0f22eb32391bfad9c4bf209\"\n \"checksum termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a5193a56b8d82014662c4b933dea6bec851daf018a2b01722e007daaf5f9dca\"\n@@ -2327,10 +2601,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n+\"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eeb819346883532a271eb626deb43c4a1bb4c4dd47c519bd78137c3e72a4fe27\"\n \"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n \"checksum userenv-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71d28ea36bbd9192d75bd9fa9b39f96ddb986eaee824adae5d53b6e51919b2f3\"\n+\"checksum utf-8 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6f923c601c7ac48ef1d66f7d5b5b2d9a7ba9c51333ab75a3ddf8d0309185a56\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e0a7d8bed3178a8fb112199d466eeca9ed09a14ba8ad67718179b4fd5487d0b\""}, {"sha": "7a559a7bec86662dbdd3aa06850e8ffa24e7b862", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -2,7 +2,7 @@\n \n The tracking issue for this feature is: [#43122]\n \n-[#34511]: https://github.com/rust-lang/rust/issues/43122\n+[#43122]: https://github.com/rust-lang/rust/issues/43122\n \n ------------------------\n "}, {"sha": "dae4475257a02988aafad92413e0eeb97f02c21d", "filename": "src/doc/unstable-book/src/library-features/splice.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -18,7 +18,6 @@ let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n \n // Replace the range up until the \u03b2 from the string\n-let t: String = s.splice(..beta_offset, \"\u0391 is capital alpha; \").collect();\n-assert_eq!(t, \"\u03b1 is alpha, \");\n+s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n ```\n\\ No newline at end of file"}, {"sha": "43ebaa4fbdb3f17a0024a61c81abdf2b1bc4ae6b", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// Creates a `Vec` containing the arguments.\n+/// Creates a [`Vec`] containing the arguments.\n ///\n /// `vec!` allows `Vec`s to be defined with the same syntax as array expressions.\n /// There are two forms of this macro:\n ///\n-/// - Create a `Vec` containing a given list of elements:\n+/// - Create a [`Vec`] containing a given list of elements:\n ///\n /// ```\n /// let v = vec![1, 2, 3];\n@@ -22,22 +22,25 @@\n /// assert_eq!(v[2], 3);\n /// ```\n ///\n-/// - Create a `Vec` from a given element and size:\n+/// - Create a [`Vec`] from a given element and size:\n ///\n /// ```\n /// let v = vec![1; 3];\n /// assert_eq!(v, [1, 1, 1]);\n /// ```\n ///\n /// Note that unlike array expressions this syntax supports all elements\n-/// which implement `Clone` and the number of elements doesn't have to be\n+/// which implement [`Clone`] and the number of elements doesn't have to be\n /// a constant.\n ///\n-/// This will use `clone()` to duplicate an expression, so one should be careful\n+/// This will use `clone` to duplicate an expression, so one should be careful\n /// using this with types having a nonstandard `Clone` implementation. For\n /// example, `vec![Rc::new(1); 5]` will create a vector of five references\n /// to the same boxed integer value, not five references pointing to independently\n /// boxed integers.\n+///\n+/// [`Vec`]: ../std/vec/struct.Vec.html\n+/// [`Clone`]: ../std/clone/trait.Clone.html\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -67,10 +70,22 @@ macro_rules! vec {\n     ($($x:expr,)*) => (vec![$($x),*])\n }\n \n-/// Use the syntax described in `std::fmt` to create a value of type `String`.\n-/// See [`std::fmt`][fmt] for more information.\n+/// Creates a `String` using interpolation of runtime expressions.\n+///\n+/// The first argument `format!` recieves is a format string.  This must be a string\n+/// literal.  The power of the formatting string is in the `{}`s contained.\n+///\n+/// Additional parameters passed to `format!` replace the `{}`s within the\n+/// formatting string in the order given unless named or positional parameters\n+/// are used, see [`std::fmt`][fmt] for more information.\n+///\n+/// A common use for `format!` is concatenation and interpolation of strings.\n+/// The same convention is used with [`print!`] and [`write!`] macros,\n+/// depending on the intended destination of the string.\n ///\n /// [fmt]: ../std/fmt/index.html\n+/// [`print!`]: ../std/macro.print.html\n+/// [`write!`]: ../std/macro.write.html\n ///\n /// # Panics\n ///"}, {"sha": "ddb23b2ef37bf0898d72db4e213d96b4fa70e5a5", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 19, "deletions": 90, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -1392,19 +1392,19 @@ impl String {\n     }\n \n     /// Creates a splicing iterator that removes the specified range in the string,\n-    /// replaces with the given string, and yields the removed chars.\n-    /// The given string doesn\u2019t need to be the same length as the range.\n+    /// and replaces it with the given string.\n+    /// The given string doesn't need to be the same length as the range.\n     ///\n-    /// Note: The element range is removed when the [`Splice`] is dropped,\n-    /// even if the iterator is not consumed until the end.\n+    /// Note: Unlike [`Vec::splice`], the replacement happens eagerly, and this\n+    /// method does not return the removed chars.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n     /// [`char`]: ../../std/primitive.char.html\n-    /// [`Splice`]: ../../std/string/struct.Splice.html\n+    /// [`Vec::splice`]: ../../std/vec/struct.Vec.html#method.splice\n     ///\n     /// # Examples\n     ///\n@@ -1416,45 +1416,32 @@ impl String {\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n     ///\n     /// // Replace the range up until the \u03b2 from the string\n-    /// let t: String = s.splice(..beta_offset, \"\u0391 is capital alpha; \").collect();\n-    /// assert_eq!(t, \"\u03b1 is alpha, \");\n+    /// s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n     /// assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n     /// ```\n     #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-    pub fn splice<'a, 'b, R>(&'a mut self, range: R, replace_with: &'b str) -> Splice<'a, 'b>\n+    pub fn splice<R>(&mut self, range: R, replace_with: &str)\n         where R: RangeArgument<usize>\n     {\n         // Memory safety\n         //\n         // The String version of Splice does not have the memory safety issues\n         // of the vector version. The data is just plain bytes.\n-        // Because the range removal happens in Drop, if the Splice iterator is leaked,\n-        // the removal will not happen.\n-        let len = self.len();\n-        let start = match range.start() {\n-             Included(&n) => n,\n-             Excluded(&n) => n + 1,\n-             Unbounded => 0,\n+\n+        match range.start() {\n+             Included(&n) => assert!(self.is_char_boundary(n)),\n+             Excluded(&n) => assert!(self.is_char_boundary(n + 1)),\n+             Unbounded => {},\n         };\n-        let end = match range.end() {\n-             Included(&n) => n + 1,\n-             Excluded(&n) => n,\n-             Unbounded => len,\n+        match range.end() {\n+             Included(&n) => assert!(self.is_char_boundary(n + 1)),\n+             Excluded(&n) => assert!(self.is_char_boundary(n)),\n+             Unbounded => {},\n         };\n \n-        // Take out two simultaneous borrows. The &mut String won't be accessed\n-        // until iteration is over, in Drop.\n-        let self_ptr = self as *mut _;\n-        // slicing does the appropriate bounds checks\n-        let chars_iter = self[start..end].chars();\n-\n-        Splice {\n-            start,\n-            end,\n-            iter: chars_iter,\n-            string: self_ptr,\n-            replace_with,\n-        }\n+        unsafe {\n+            self.as_mut_vec()\n+        }.splice(range, replace_with.bytes());\n     }\n \n     /// Converts this `String` into a [`Box`]`<`[`str`]`>`.\n@@ -2241,61 +2228,3 @@ impl<'a> DoubleEndedIterator for Drain<'a> {\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a> FusedIterator for Drain<'a> {}\n-\n-/// A splicing iterator for `String`.\n-///\n-/// This struct is created by the [`splice()`] method on [`String`]. See its\n-/// documentation for more.\n-///\n-/// [`splice()`]: struct.String.html#method.splice\n-/// [`String`]: struct.String.html\n-#[derive(Debug)]\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-pub struct Splice<'a, 'b> {\n-    /// Will be used as &'a mut String in the destructor\n-    string: *mut String,\n-    /// Start of part to remove\n-    start: usize,\n-    /// End of part to remove\n-    end: usize,\n-    /// Current remaining range to remove\n-    iter: Chars<'a>,\n-    replace_with: &'b str,\n-}\n-\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-unsafe impl<'a, 'b> Sync for Splice<'a, 'b> {}\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-unsafe impl<'a, 'b> Send for Splice<'a, 'b> {}\n-\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-impl<'a, 'b> Drop for Splice<'a, 'b> {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let vec = (*self.string).as_mut_vec();\n-            vec.splice(self.start..self.end, self.replace_with.bytes());\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-impl<'a, 'b> Iterator for Splice<'a, 'b> {\n-    type Item = char;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<char> {\n-        self.iter.next()\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-}\n-\n-#[unstable(feature = \"splice\", reason = \"recently added\", issue = \"32310\")]\n-impl<'a, 'b> DoubleEndedIterator for Splice<'a, 'b> {\n-    #[inline]\n-    fn next_back(&mut self) -> Option<char> {\n-        self.iter.next_back()\n-    }\n-}"}, {"sha": "6aba18ddf49ffe072f63a3641fa91140070d3f47", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -442,9 +442,8 @@ fn test_drain() {\n #[test]\n fn test_splice() {\n     let mut s = \"Hello, world!\".to_owned();\n-    let t: String = s.splice(7..12, \"\u4e16\u754c\").collect();\n+    s.splice(7..12, \"\u4e16\u754c\");\n     assert_eq!(s, \"Hello, \u4e16\u754c!\");\n-    assert_eq!(t, \"world\");\n }\n \n #[test]\n@@ -457,12 +456,10 @@ fn test_splice_char_boundary() {\n #[test]\n fn test_splice_inclusive_range() {\n     let mut v = String::from(\"12345\");\n-    let t: String = v.splice(2...3, \"789\").collect();\n+    v.splice(2...3, \"789\");\n     assert_eq!(v, \"127895\");\n-    assert_eq!(t, \"34\");\n-    let t2: String = v.splice(1...2, \"A\").collect();\n+    v.splice(1...2, \"A\");\n     assert_eq!(v, \"1A895\");\n-    assert_eq!(t2, \"27\");\n }\n \n #[test]\n@@ -482,24 +479,15 @@ fn test_splice_inclusive_out_of_bounds() {\n #[test]\n fn test_splice_empty() {\n     let mut s = String::from(\"12345\");\n-    let t: String = s.splice(1..2, \"\").collect();\n+    s.splice(1..2, \"\");\n     assert_eq!(s, \"1345\");\n-    assert_eq!(t, \"2\");\n }\n \n #[test]\n fn test_splice_unbounded() {\n     let mut s = String::from(\"12345\");\n-    let t: String = s.splice(.., \"\").collect();\n+    s.splice(.., \"\");\n     assert_eq!(s, \"\");\n-    assert_eq!(t, \"12345\");\n-}\n-\n-#[test]\n-fn test_splice_forget() {\n-    let mut s = String::from(\"12345\");\n-    ::std::mem::forget(s.splice(2..4, \"789\"));\n-    assert_eq!(s, \"12345\");\n }\n \n #[test]"}, {"sha": "2cd049ac1538d034737eebe7b1c6e79c707df79e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -62,11 +62,13 @@ macro_rules! panic {\n /// # Custom Messages\n ///\n /// This macro has a second form, where a custom panic message can\n-/// be provided with or without arguments for formatting.\n+/// be provided with or without arguments for formatting.  See [`std::fmt`]\n+/// for syntax for this form.\n ///\n /// [`panic!`]: macro.panic.html\n /// [`debug_assert!`]: macro.debug_assert.html\n-/// [testing]: ../book/first-edition/testing.html\n+/// [testing]: ../book/second-edition/ch11-01-writing-tests.html#checking-results-with-the-assert-macro\n+/// [`std::fmt`]: ../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -252,13 +254,15 @@ macro_rules! debug_assert {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Unlike `assert_eq!`, `debug_assert_eq!` statements are only enabled in non\n+/// Unlike [`assert_eq!`], `debug_assert_eq!` statements are only enabled in non\n /// optimized builds by default. An optimized build will omit all\n /// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_eq!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n /// development.\n ///\n+/// [`assert_eq!`]: ../std/macro.assert_eq.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -277,13 +281,15 @@ macro_rules! debug_assert_eq {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Unlike `assert_ne!`, `debug_assert_ne!` statements are only enabled in non\n+/// Unlike [`assert_ne!`], `debug_assert_ne!` statements are only enabled in non\n /// optimized builds by default. An optimized build will omit all\n /// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_ne!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n /// development.\n ///\n+/// [`assert_ne!`]: ../std/macro.assert_ne.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -300,10 +306,9 @@ macro_rules! debug_assert_ne {\n /// Helper macro for reducing boilerplate code for matching `Result` together\n /// with converting downstream errors.\n ///\n-/// Prefer using `?` syntax to `try!`. `?` is built in to the language and is\n-/// more succinct than `try!`. It is the standard method for error propagation.\n+/// The `?` operator was added to replace `try!` and should be used instead.\n ///\n-/// `try!` matches the given `Result`. In case of the `Ok` variant, the\n+/// `try!` matches the given [`Result`]. In case of the `Ok` variant, the\n /// expression has the value of the wrapped value.\n ///\n /// In case of the `Err` variant, it retrieves the inner error. `try!` then\n@@ -312,7 +317,9 @@ macro_rules! debug_assert_ne {\n /// error is then immediately returned.\n ///\n /// Because of the early return, `try!` can only be used in functions that\n-/// return `Result`.\n+/// return [`Result`].\n+///\n+/// [`Result`]: ../std/result/enum.Result.html\n ///\n /// # Examples\n ///\n@@ -331,20 +338,26 @@ macro_rules! debug_assert_ne {\n ///     }\n /// }\n ///\n+/// // The prefered method of quick returning Errors\n+/// fn write_to_file_question() -> Result<(), MyError> {\n+///     let mut file = File::create(\"my_best_friends.txt\")?;\n+///     Ok(())\n+/// }\n+///\n+/// // The previous method of quick returning Errors\n /// fn write_to_file_using_try() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     try!(file.write_all(b\"This is a list of my best friends.\"));\n-///     println!(\"I wrote to the file\");\n ///     Ok(())\n /// }\n+///\n /// // This is equivalent to:\n /// fn write_to_file_using_match() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n ///         Err(e) => return Err(From::from(e)),\n ///     }\n-///     println!(\"I wrote to the file\");\n ///     Ok(())\n /// }\n /// ```\n@@ -365,7 +378,7 @@ macro_rules! try {\n /// formatted according to the specified format string and the result will be passed to the writer.\n /// The writer may be any value with a `write_fmt` method; generally this comes from an\n /// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n-/// returns whatever the 'write_fmt' method returns; commonly a [`std::fmt::Result`], or an\n+/// returns whatever the `write_fmt` method returns; commonly a [`std::fmt::Result`], or an\n /// [`io::Result`].\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n@@ -470,10 +483,20 @@ macro_rules! writeln {\n /// * Loops that dynamically terminate.\n /// * Iterators that dynamically terminate.\n ///\n+/// If the determination that the code is unreachable proves incorrect, the\n+/// program immediately terminates with a [`panic!`].  The function [`unreachable`],\n+/// which belongs to the [`std::intrinsics`] module, informs the compilier to\n+/// optimize the code out of the release version entirely.\n+///\n+/// [`panic!`]:  ../std/macro.panic.html\n+/// [`unreachable`]: ../std/intrinsics/fn.unreachable.html\n+/// [`std::intrinsics`]: ../std/intrinsics/index.html\n+///\n /// # Panics\n ///\n-/// This will always [panic!](macro.panic.html)\n+/// This will always [`panic!`]\n ///\n+/// [`panic!`]: ../std/macro.panic.html\n /// # Examples\n ///\n /// Match arms:"}, {"sha": "04a5e75c99dc92afab490c38fcbbeac9b4bc8104", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -1 +1 @@\n-Subproject commit 2a5b50b7f7f539a0fd201331d6c1e0534aa332f5\n+Subproject commit 04a5e75c99dc92afab490c38fcbbeac9b4bc8104"}, {"sha": "cfd83e348a8e2e62e2a229f3616578f29f186b31", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -10,3 +10,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "c39aec896e6b4d4c091a582e8342febb64ded67a", "filename": "src/libproc_macro/diagnostic.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,134 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use Span;\n+\n+use rustc_errors as rustc;\n+\n+/// An enum representing a diagnostic level.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Copy, Clone, Debug)]\n+pub enum Level {\n+    /// An error.\n+    Error,\n+    /// A warning.\n+    Warning,\n+    /// A note.\n+    Note,\n+    /// A help message.\n+    Help,\n+    #[doc(hidden)]\n+    __Nonexhaustive,\n+}\n+\n+/// A structure representing a diagnostic message and associated children\n+/// messages.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Clone, Debug)]\n+pub struct Diagnostic {\n+    level: Level,\n+    message: String,\n+    span: Option<Span>,\n+    children: Vec<Diagnostic>\n+}\n+\n+macro_rules! diagnostic_child_methods {\n+    ($spanned:ident, $regular:ident, $level:expr) => (\n+        /// Add a new child diagnostic message to `self` with the level\n+        /// identified by this methods name with the given `span` and `message`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $spanned<T: Into<String>>(mut self, span: Span, message: T) -> Diagnostic {\n+            self.children.push(Diagnostic::spanned(span, $level, message));\n+            self\n+        }\n+\n+        /// Add a new child diagnostic message to `self` with the level\n+        /// identified by this method's name with the given `message`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $regular<T: Into<String>>(mut self, message: T) -> Diagnostic {\n+            self.children.push(Diagnostic::new($level, message));\n+            self\n+        }\n+    )\n+}\n+\n+impl Diagnostic {\n+    /// Create a new diagnostic with the given `level` and `message`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n+        Diagnostic {\n+            level: level,\n+            message: message.into(),\n+            span: None,\n+            children: vec![]\n+        }\n+    }\n+\n+    /// Create a new diagnostic with the given `level` and `message` pointing to\n+    /// the given `span`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn spanned<T: Into<String>>(span: Span, level: Level, message: T) -> Diagnostic {\n+        Diagnostic {\n+            level: level,\n+            message: message.into(),\n+            span: Some(span),\n+            children: vec![]\n+        }\n+    }\n+\n+    diagnostic_child_methods!(span_error, error, Level::Error);\n+    diagnostic_child_methods!(span_warning, warning, Level::Warning);\n+    diagnostic_child_methods!(span_note, note, Level::Note);\n+    diagnostic_child_methods!(span_help, help, Level::Help);\n+\n+    /// Returns the diagnostic `level` for `self`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn level(&self) -> Level {\n+        self.level\n+    }\n+\n+    /// Emit the diagnostic.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn emit(self) {\n+        ::__internal::with_sess(move |(sess, _)| {\n+            let handler = &sess.span_diagnostic;\n+            let level = __internal::level_to_internal_level(self.level);\n+            let mut diag = rustc::DiagnosticBuilder::new(handler, level, &*self.message);\n+\n+            if let Some(span) = self.span {\n+                diag.set_span(span.0);\n+            }\n+\n+            for child in self.children {\n+                let span = child.span.map(|s| s.0);\n+                let level = __internal::level_to_internal_level(child.level);\n+                diag.sub(level, &*child.message, span);\n+            }\n+\n+            diag.emit();\n+        });\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n+#[doc(hidden)]\n+pub mod __internal {\n+    use super::{Level, rustc};\n+\n+    pub fn level_to_internal_level(level: Level) -> rustc::Level {\n+        match level {\n+            Level::Error => rustc::Level::Error,\n+            Level::Warning => rustc::Level::Warning,\n+            Level::Note => rustc::Level::Note,\n+            Level::Help => rustc::Level::Help,\n+            Level::__Nonexhaustive => unreachable!(\"Level::__Nonexhaustive\")\n+        }\n+    }\n+}"}, {"sha": "e403e2a00c9e3bdc020b7d7ff65462fbb62401dc", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -42,6 +42,12 @@\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n+extern crate rustc_errors;\n+\n+mod diagnostic;\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+pub use diagnostic::{Diagnostic, Level};\n \n use std::{ascii, fmt, iter};\n use std::str::FromStr;\n@@ -188,12 +194,28 @@ pub fn quote_span(span: Span) -> TokenStream {\n     TokenStream(quote::Quote::quote(&span.0))\n }\n \n+macro_rules! diagnostic_method {\n+    ($name:ident, $level:expr) => (\n+        /// Create a new `Diagnostic` with the given `message` at the span\n+        /// `self`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $name<T: Into<String>>(self, message: T) -> Diagnostic {\n+            Diagnostic::spanned(self, $level, message)\n+        }\n+    )\n+}\n+\n impl Span {\n     /// The span of the invocation of the current procedural macro.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn call_site() -> Span {\n         ::__internal::with_sess(|(_, mark)| Span(mark.expn_info().unwrap().call_site))\n     }\n+\n+    diagnostic_method!(error, Level::Error);\n+    diagnostic_method!(warning, Level::Warning);\n+    diagnostic_method!(note, Level::Note);\n+    diagnostic_method!(help, Level::Help);\n }\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`)."}, {"sha": "ea827fb3139a86a21dede30a567cb030dbd79903", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -62,6 +62,7 @@\n \n use hir::def_id::{CrateNum, DefId};\n use hir::map::DefPathHash;\n+use hir::HirId;\n \n use ich::Fingerprint;\n use ty::{TyCtxt, Instance, InstanceDef};\n@@ -527,6 +528,9 @@ define_dep_nodes!( <'tcx>\n     [] HasGlobalAllocator(DefId),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n+    [] Specializes { impl1: DefId, impl2: DefId },\n+    [] InScopeTraits(HirId),\n+    [] ModuleExports(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "9c841022fcb8225df851b314d6473c3f702d393c", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -205,13 +205,15 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::N\n                 // corresponding entry in the `trait_map` we need to hash that.\n                 // Make sure we don't ignore too much by checking that there is\n                 // no entry in a debug_assert!().\n-                debug_assert!(hcx.tcx.trait_map.get(self).is_none());\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                debug_assert!(hcx.tcx.in_scope_traits(hir_id).is_none());\n             }\n             NodeIdHashingMode::HashDefPath => {\n                 hcx.tcx.hir.definitions().node_to_hir_id(*self).hash_stable(hcx, hasher);\n             }\n             NodeIdHashingMode::HashTraitsInScope => {\n-                if let Some(traits) = hcx.tcx.trait_map.get(self) {\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                if let Some(traits) = hcx.tcx.in_scope_traits(hir_id) {\n                     // The ordering of the candidates is not fixed. So we hash\n                     // the def-ids and then sort them and hash the collection.\n                     let mut candidates: AccumulateVec<[_; 8]> ="}, {"sha": "8b01d5045c6b06b39f2e3d3634e9cc29a890482f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -223,7 +223,9 @@ pub struct RegionMaps {\n     /// table, the appropriate cleanup scope is the innermost\n     /// enclosing statement, conditional expression, or repeating\n     /// block (see `terminating_scopes`).\n-    rvalue_scopes: NodeMap<CodeExtent>,\n+    /// In constants, None is used to indicate that certain expressions\n+    /// escape into 'static and should have no local cleanup scope.\n+    rvalue_scopes: NodeMap<Option<CodeExtent>>,\n \n     /// Encodes the hierarchy of fn bodies. Every fn body (including\n     /// closures) forms its own distinct region hierarchy, rooted in\n@@ -358,9 +360,11 @@ impl<'tcx> RegionMaps {\n         self.var_map.insert(var, lifetime);\n     }\n \n-    fn record_rvalue_scope(&mut self, var: ast::NodeId, lifetime: CodeExtent) {\n+    fn record_rvalue_scope(&mut self, var: ast::NodeId, lifetime: Option<CodeExtent>) {\n         debug!(\"record_rvalue_scope(sub={:?}, sup={:?})\", var, lifetime);\n-        assert!(var != lifetime.node_id());\n+        if let Some(lifetime) = lifetime {\n+            assert!(var != lifetime.node_id());\n+        }\n         self.rvalue_scopes.insert(var, lifetime);\n     }\n \n@@ -389,7 +393,7 @@ impl<'tcx> RegionMaps {\n         // check for a designated rvalue scope\n         if let Some(&s) = self.rvalue_scopes.get(&expr_id) {\n             debug!(\"temporary_scope({:?}) = {:?} [custom]\", expr_id, s);\n-            return Some(s);\n+            return s;\n         }\n \n         // else, locate the innermost terminating scope\n@@ -803,16 +807,11 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n }\n \n fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n-                           local: &'tcx hir::Local) {\n-    debug!(\"resolve_local(local.id={:?},local.init={:?})\",\n-           local.id,local.init.is_some());\n+                           pat: Option<&'tcx hir::Pat>,\n+                           init: Option<&'tcx hir::Expr>) {\n+    debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n \n-    // For convenience in trans, associate with the local-id the var\n-    // scope that will be used for any bindings declared in this\n-    // pattern.\n     let blk_scope = visitor.cx.var_parent;\n-    let blk_scope = blk_scope.expect(\"locals must be within a block\");\n-    visitor.region_maps.record_var_scope(local.id, blk_scope);\n \n     // As an exception to the normal rules governing temporary\n     // lifetimes, initializers in a let have a temporary lifetime\n@@ -872,15 +871,22 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     //\n     // FIXME(#6308) -- Note that `[]` patterns work more smoothly post-DST.\n \n-    if let Some(ref expr) = local.init {\n+    if let Some(expr) = init {\n         record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);\n \n-        if is_binding_pat(&local.pat) {\n-            record_rvalue_scope(visitor, &expr, blk_scope);\n+        if let Some(pat) = pat {\n+            if is_binding_pat(pat) {\n+                record_rvalue_scope(visitor, &expr, blk_scope);\n+            }\n         }\n     }\n \n-    intravisit::walk_local(visitor, local);\n+    if let Some(pat) = pat {\n+        visitor.visit_pat(pat);\n+    }\n+    if let Some(expr) = init {\n+        visitor.visit_expr(expr);\n+    }\n \n     /// True if `pat` match the `P&` nonterminal:\n     ///\n@@ -954,7 +960,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     fn record_rvalue_scope_if_borrow_expr<'a, 'tcx>(\n         visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n         expr: &hir::Expr,\n-        blk_id: CodeExtent)\n+        blk_id: Option<CodeExtent>)\n     {\n         match expr.node {\n             hir::ExprAddrOf(_, ref subexpr) => {\n@@ -1004,7 +1010,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     /// Note: ET is intended to match \"rvalues or lvalues based on rvalues\".\n     fn record_rvalue_scope<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n                                      expr: &hir::Expr,\n-                                     blk_scope: CodeExtent) {\n+                                     blk_scope: Option<CodeExtent>) {\n         let mut expr = expr;\n         loop {\n             // Note: give all the expressions matching `ET` with the\n@@ -1077,12 +1083,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         let outer_cx = self.cx;\n         let outer_ts = mem::replace(&mut self.terminating_scopes, NodeSet());\n-\n-        // Only functions have an outer terminating (drop) scope,\n-        // while temporaries in constant initializers are 'static.\n-        if let MirSource::Fn(_) = MirSource::from_node(self.tcx, owner_id) {\n-            self.terminating_scopes.insert(body_id.node_id);\n-        }\n+        self.terminating_scopes.insert(body_id.node_id);\n \n         if let Some(root_id) = self.cx.root_id {\n             self.region_maps.record_fn_parent(body_id.node_id, root_id);\n@@ -1100,7 +1101,30 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        self.visit_expr(&body.value);\n+        if let MirSource::Fn(_) = MirSource::from_node(self.tcx, owner_id) {\n+            self.visit_expr(&body.value);\n+        } else {\n+            // Only functions have an outer terminating (drop) scope, while\n+            // temporaries in constant initializers may be 'static, but only\n+            // according to rvalue lifetime semantics, using the same\n+            // syntactical rules used for let initializers.\n+            //\n+            // E.g. in `let x = &f();`, the temporary holding the result from\n+            // the `f()` call lives for the entirety of the surrounding block.\n+            //\n+            // Similarly, `const X: ... = &f();` would have the result of `f()`\n+            // live for `'static`, implying (if Drop restrictions on constants\n+            // ever get lifted) that the value *could* have a destructor, but\n+            // it'd get leaked instead of the destructor running during the\n+            // evaluation of `X` (if at all allowed by CTFE).\n+            //\n+            // However, `const Y: ... = g(&f());`, like `let y = g(&f());`,\n+            // would *not* let the `f()` temporary escape into an outer scope\n+            // (i.e. `'static`), which means that after `g` returns, it drops,\n+            // and all the associated destruction scope rules apply.\n+            self.cx.var_parent = None;\n+            resolve_local(self, None, Some(&body.value));\n+        }\n \n         // Restore context we had at the start.\n         self.cx = outer_cx;\n@@ -1120,7 +1144,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n         resolve_expr(self, ex);\n     }\n     fn visit_local(&mut self, l: &'tcx Local) {\n-        resolve_local(self, l);\n+        resolve_local(self, Some(&l.pat), l.init.as_ref().map(|e| &**e));\n     }\n }\n "}, {"sha": "019f0a709116c7622167bad613d6dca6ac164a40", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -38,7 +38,7 @@ pub use self::project::{ProjectionCache, ProjectionCacheSnapshot, Reveal};\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n-pub use self::specialize::{OverlapError, specialization_graph, specializes, translate_substs};\n+pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;\n@@ -831,6 +831,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n+        specializes: specialize::specializes,\n         ..*providers\n     };\n }\n@@ -839,6 +840,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n+        specializes: specialize::specializes,\n         ..*providers\n     };\n }"}, {"sha": "726e5d83428ca0807d0281b1e6aa3128d0c803fe", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -36,7 +36,6 @@ use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener};\n use ty::subst::{Kind, Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n-use traits;\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n use middle::lang_items;\n@@ -1865,7 +1864,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if other.evaluation == EvaluatedToOk {\n                     if let ImplCandidate(victim_def) = victim.candidate {\n                         let tcx = self.tcx().global_tcx();\n-                        return traits::specializes(tcx, other_def, victim_def) ||\n+                        return tcx.specializes((other_def, victim_def)) ||\n                             tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n                     }\n                 }"}, {"sha": "2dd6ca4b5a92853964c67d81921b0178f2ef920d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -150,15 +150,12 @@ pub fn find_associated_item<'a, 'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// impl1 specializes impl2 if it applies to a subset of the types impl2 applies\n /// to.\n-pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             impl1_def_id: DefId,\n-                             impl2_def_id: DefId) -> bool {\n+pub(super) fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    (impl1_def_id, impl2_def_id): (DefId, DefId))\n+    -> bool\n+{\n     debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n \n-    if let Some(r) = tcx.specializes_cache.borrow().check(impl1_def_id, impl2_def_id) {\n-        return r;\n-    }\n-\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&\n@@ -188,7 +185,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap();\n \n     // Create a infcx, taking the predicates of impl1 as assumptions:\n-    let result = tcx.infer_ctxt().enter(|infcx| {\n+    tcx.infer_ctxt().enter(|infcx| {\n         // Normalize the trait reference. The WF rules ought to ensure\n         // that this always succeeds.\n         let impl1_trait_ref =\n@@ -204,10 +201,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Attempt to prove that impl2 applies, given all of the above.\n         fulfill_implication(&infcx, penv, impl1_trait_ref, impl2_def_id).is_ok()\n-    });\n-\n-    tcx.specializes_cache.borrow_mut().insert(impl1_def_id, impl2_def_id, result);\n-    result\n+    })\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with"}, {"sha": "5242accceabb3418d3f9b11746861c8a4604de23", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{OverlapError, specializes};\n+use super::OverlapError;\n \n use hir::def_id::DefId;\n use traits;\n@@ -118,8 +118,8 @@ impl<'a, 'gcx, 'tcx> Children {\n                         return Ok((false, false));\n                     }\n \n-                    let le = specializes(tcx, impl_def_id, possible_sibling);\n-                    let ge = specializes(tcx, possible_sibling, impl_def_id);\n+                    let le = tcx.specializes((impl_def_id, possible_sibling));\n+                    let ge = tcx.specializes((possible_sibling, impl_def_id));\n \n                     if le == ge {\n                         // overlap, but no specialization; error out"}, {"sha": "14d47d5d195e3f400a53d9b50cee6aa2324a012d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -14,8 +14,8 @@ use dep_graph::DepGraph;\n use errors::DiagnosticBuilder;\n use session::Session;\n use middle;\n-use hir::{TraitMap};\n-use hir::def::{Def, ExportMap};\n+use hir::{TraitCandidate, HirId};\n+use hir::def::{Def, Export};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DefPathHash;\n@@ -808,8 +808,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n-    pub specializes_cache: RefCell<traits::SpecializesCache>,\n-\n     pub trans_trait_caches: traits::trans::TransTraitCaches<'tcx>,\n \n     pub dep_graph: DepGraph,\n@@ -819,10 +817,10 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    pub trait_map: TraitMap,\n+    trait_map: FxHashMap<HirId, Rc<Vec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    pub export_map: ExportMap,\n+    export_map: FxHashMap<HirId, Rc<Vec<Export>>>,\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n@@ -1072,14 +1070,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n-            specializes_cache: RefCell::new(traits::SpecializesCache::new()),\n             global_arenas: arenas,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map,\n-            trait_map: resolutions.trait_map,\n-            export_map: resolutions.export_map,\n+            trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n+            export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n@@ -1997,3 +1998,20 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n         Ok(f(&iter.collect::<Result<AccumulateVec<[_; 8]>, _>>()?))\n     }\n }\n+\n+fn in_scope_traits<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<TraitCandidate>>>\n+{\n+    tcx.gcx.trait_map.get(&id).cloned()\n+}\n+\n+fn module_exports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<Export>>>\n+{\n+    tcx.gcx.export_map.get(&id).cloned()\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    providers.in_scope_traits = in_scope_traits;\n+    providers.module_exports = module_exports;\n+}"}, {"sha": "da81bfbb0dc4f21643d0cd99356d1f9270108d73", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -11,8 +11,8 @@\n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use hir::def::Def;\n-use hir;\n+use hir::def::{Def, Export};\n+use hir::{self, TraitCandidate, HirId};\n use lint;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference};\n@@ -80,6 +80,15 @@ impl Key for CrateNum {\n     }\n }\n \n+impl Key for HirId {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl Key for DefId {\n     fn map_crate(&self) -> CrateNum {\n         self.krate\n@@ -540,6 +549,24 @@ impl<'tcx> QueryDescription for queries::lint_levels<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::specializes<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: (DefId, DefId)) -> String {\n+        format!(\"computing whether impls specialize one another\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::in_scope_traits<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the traits in scope at a particular ast node\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::module_exports<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the exported items for a module\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1108,6 +1135,10 @@ define_maps! { <'tcx>\n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n \n     [] lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n+\n+    [] specializes: specializes_node((DefId, DefId)) -> bool,\n+    [] in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n+    [] module_exports: ModuleExports(HirId) -> Option<Rc<Vec<Export>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1183,3 +1214,7 @@ fn layout_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'\n fn lint_levels<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LintLevels\n }\n+\n+fn specializes_node<'tcx>((a, b): (DefId, DefId)) -> DepConstructor<'tcx> {\n+    DepConstructor::Specializes { impl1: a, impl2: b }\n+}"}, {"sha": "ca735599a0da64c4f8641723541540772994a3b3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -2517,6 +2517,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n+    context::provide(providers);\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,"}, {"sha": "9aae188f9ecdfdf4b7644ed5c0f3a78ca01d241b", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -288,7 +288,7 @@ impl Diagnostic {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n-    fn sub(&mut self,\n+    pub(crate) fn sub(&mut self,\n            level: Level,\n            message: &str,\n            span: MultiSpan,"}, {"sha": "2cd433bfe3aeef5c2cbd45766d790718de4c56c3", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -110,6 +110,19 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n+    /// Convenience function for internal use, clients should use one of the\n+    /// span_* methods instead.\n+    pub fn sub<S: Into<MultiSpan>>(\n+        &mut self,\n+        level: Level,\n+        message: &str,\n+        span: Option<S>,\n+    ) -> &mut Self {\n+        let span = span.map(|s| s.into()).unwrap_or(MultiSpan::new());\n+        self.diagnostic.sub(level, message, span, None);\n+        self\n+    }\n+\n     /// Delay emission of this diagnostic as a bug.\n     ///\n     /// This can be useful in contexts where an error indicates a bug but"}, {"sha": "62aa86995d0aff6d43e422426acdfc0b6f74bc05", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -548,12 +548,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                                                                  &hir::Visibility)>)\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n+        let hir_id = tcx.hir.node_to_hir_id(id);\n         let def_id = tcx.hir.local_def_id(id);\n         debug!(\"IsolatedEncoder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n-            reexports: match tcx.export_map.get(&id) {\n-                Some(exports) if *vis == hir::Public => {\n+            reexports: match tcx.module_exports(hir_id) {\n+                Some(ref exports) if *vis == hir::Public => {\n                     self.lazy_seq_from_slice(exports.as_slice())\n                 }\n                 _ => LazySeq::empty(),"}, {"sha": "2198b533ea07a753b5241400ccfc1d73b0b2abbd", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -120,6 +120,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     return_qualif: Option<Qualif>,\n     qualif: Qualif,\n     const_fn_arg_vars: BitVector,\n+    local_needs_drop: IndexVec<Local, Option<Span>>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -146,6 +147,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return_qualif: None,\n             qualif: Qualif::empty(),\n             const_fn_arg_vars: BitVector::new(mir.local_decls.len()),\n+            local_needs_drop: IndexVec::from_elem(None, &mir.local_decls),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -193,16 +195,26 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         self.add(original);\n     }\n \n+    /// Check for NEEDS_DROP (from an ADT or const fn call) and\n+    /// error, unless we're in a function.\n+    fn always_deny_drop(&self) {\n+        self.deny_drop_with_feature_gate_override(false);\n+    }\n+\n     /// Check for NEEDS_DROP (from an ADT or const fn call) and\n     /// error, unless we're in a function, or the feature-gate\n     /// for globals with destructors is enabled.\n     fn deny_drop(&self) {\n+        self.deny_drop_with_feature_gate_override(true);\n+    }\n+\n+    fn deny_drop_with_feature_gate_override(&self, allow_gate: bool) {\n         if self.mode == Mode::Fn || !self.qualif.intersects(Qualif::NEEDS_DROP) {\n             return;\n         }\n \n         // Static and const fn's allow destructors, but they're feature-gated.\n-        let msg = if self.mode != Mode::Const {\n+        let msg = if allow_gate && self.mode != Mode::Const {\n             // Feature-gate for globals with destructors is enabled.\n             if self.tcx.sess.features.borrow().drop_types_in_const {\n                 return;\n@@ -223,15 +235,16 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         let mut err =\n             struct_span_err!(self.tcx.sess, self.span, E0493, \"{}\", msg);\n \n-        if self.mode != Mode::Const {\n+        if allow_gate && self.mode != Mode::Const {\n             help!(&mut err,\n                   \"in Nightly builds, add `#![feature(drop_types_in_const)]` \\\n                    to the crate attributes to enable\");\n         } else {\n             self.find_drop_implementation_method_span()\n                 .map(|span| err.span_label(span, \"destructor defined here\"));\n \n-            err.span_label(self.span, \"constants cannot have destructors\");\n+            err.span_label(self.span,\n+                format!(\"{}s cannot have destructors\", self.mode));\n         }\n \n         err.emit();\n@@ -314,6 +327,15 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n+        // When initializing a local, record whether the *value* being\n+        // stored in it needs dropping, which it may not, even if its\n+        // type does, e.g. `None::<String>`.\n+        if let Lvalue::Local(local) = *dest {\n+            if qualif.intersects(Qualif::NEEDS_DROP) {\n+                self.local_needs_drop[local] = Some(self.span);\n+            }\n+        }\n+\n         match *dest {\n             Lvalue::Local(index) if self.mir.local_kind(index) == LocalKind::Temp => {\n                 debug!(\"store to temp {:?}\", index);\n@@ -360,7 +382,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n             let target = match mir[bb].terminator().kind {\n                 TerminatorKind::Goto { target } |\n-                // Drops are considered noops.\n                 TerminatorKind::Drop { target, .. } |\n                 TerminatorKind::Assert { target, .. } |\n                 TerminatorKind::Call { destination: Some((_, target)), .. } => {\n@@ -560,22 +581,32 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         match *operand {\n-            Operand::Consume(_) => {\n+            Operand::Consume(ref lvalue) => {\n                 self.nest(|this| {\n                     this.super_operand(operand, location);\n                     this.try_consume();\n                 });\n+\n+                // Mark the consumed locals to indicate later drops are noops.\n+                if let Lvalue::Local(local) = *lvalue {\n+                    self.local_needs_drop[local] = None;\n+                }\n             }\n             Operand::Constant(ref constant) => {\n-                if let Literal::Item { def_id, substs } = constant.literal {\n-                    // Don't peek inside generic (associated) constants.\n-                    if substs.types().next().is_some() {\n+                if let Literal::Item { def_id, substs: _ } = constant.literal {\n+                    // Don't peek inside trait associated constants.\n+                    if self.tcx.trait_of_item(def_id).is_some() {\n                         self.add_type(constant.ty);\n                     } else {\n                         let bits = self.tcx.at(constant.span).mir_const_qualif(def_id);\n \n                         let qualif = Qualif::from_bits(bits).expect(\"invalid mir_const_qualif\");\n                         self.add(qualif);\n+\n+                        // Just in case the type is more specific than\n+                        // the definition, e.g. impl associated const\n+                        // with type parameters, take it into account.\n+                        self.qualif.restrict(constant.ty, self.tcx, self.param_env);\n                     }\n \n                     // Let `const fn` transitively have destructors,\n@@ -866,6 +897,30 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n                 self.assign(dest, location);\n             }\n+        } else if let TerminatorKind::Drop { location: ref lvalue, .. } = *kind {\n+            self.super_terminator_kind(bb, kind, location);\n+\n+            // Deny *any* live drops anywhere other than functions.\n+            if self.mode != Mode::Fn {\n+                // HACK(eddyb) Emulate a bit of dataflow analysis,\n+                // conservatively, that drop elaboration will do.\n+                let needs_drop = if let Lvalue::Local(local) = *lvalue {\n+                    self.local_needs_drop[local]\n+                } else {\n+                    None\n+                };\n+\n+                if let Some(span) = needs_drop {\n+                    let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n+                    self.add_type(ty);\n+\n+                    // Use the original assignment span to be more precise.\n+                    let old_span = self.span;\n+                    self.span = span;\n+                    self.always_deny_drop();\n+                    self.span = old_span;\n+                }\n+            }\n         } else {\n             // Qualify any operands inside other terminators.\n             self.super_terminator_kind(bb, kind, location);"}, {"sha": "41ba7d678e88a34b9930d078be09ab0827f9f24f", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -87,19 +87,14 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n     }\n \n-    // Adds the worst effect out of all the values of one type.\n-    fn add_type(&mut self, ty: Ty<'gcx>) {\n-        if !ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n-            self.promotable = false;\n-        }\n-\n-        if ty.needs_drop(self.tcx, self.param_env) {\n-            self.promotable = false;\n-        }\n+    // Returns true iff all the values of the type are promotable.\n+    fn type_has_only_promotable_values(&mut self, ty: Ty<'gcx>) -> bool {\n+        ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) &&\n+        !ty.needs_drop(self.tcx, self.param_env)\n     }\n \n     fn handle_const_fn_call(&mut self, def_id: DefId, ret_ty: Ty<'gcx>) {\n-        self.add_type(ret_ty);\n+        self.promotable &= self.type_has_only_promotable_values(ret_ty);\n \n         self.promotable &= if let Some(fn_id) = self.tcx.hir.as_local_node_id(def_id) {\n             FnLikeNode::from_node(self.tcx.hir.get(fn_id)).map_or(false, |fn_like| {\n@@ -333,20 +328,30 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             match def {\n                 Def::VariantCtor(..) | Def::StructCtor(..) |\n                 Def::Fn(..) | Def::Method(..) => {}\n-                Def::AssociatedConst(_) => v.add_type(node_ty),\n-                Def::Const(did) => {\n-                    v.promotable &= if let Some(node_id) = v.tcx.hir.as_local_node_id(did) {\n-                        match v.tcx.hir.expect_item(node_id).node {\n-                            hir::ItemConst(_, body) => {\n+\n+                Def::Const(did) |\n+                Def::AssociatedConst(did) => {\n+                    let promotable = if v.tcx.trait_of_item(did).is_some() {\n+                        // Don't peek inside trait associated constants.\n+                        false\n+                    } else if let Some(node_id) = v.tcx.hir.as_local_node_id(did) {\n+                        match v.tcx.hir.maybe_body_owned_by(node_id) {\n+                            Some(body) => {\n                                 v.visit_nested_body(body);\n                                 v.tcx.rvalue_promotable_to_static.borrow()[&body.node_id]\n                             }\n-                            _ => false\n+                            None => false\n                         }\n                     } else {\n                         v.tcx.const_is_rvalue_promotable_to_static(did)\n                     };\n+\n+                    // Just in case the type is more specific than the definition,\n+                    // e.g. impl associated const with type parameters, check it.\n+                    // Also, trait associated consts are relaxed by this.\n+                    v.promotable &= promotable || v.type_has_only_promotable_values(node_ty);\n                 }\n+\n                 _ => {\n                     v.promotable = false;\n                 }"}, {"sha": "8dc078984193b7008f7f582e272cdec5c65103c4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -325,8 +325,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            if let Some(exports) = self.tcx.export_map.get(&id) {\n-                for export in exports {\n+            let hir_id = self.tcx.hir.node_to_hir_id(id);\n+            if let Some(exports) = self.tcx.module_exports(hir_id) {\n+                for export in exports.iter() {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));\n                     }"}, {"sha": "9531c8baa0bc158df27abb984cfdda6f0c1c07ea", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -402,7 +402,8 @@ impl<'a> Resolver<'a> {\n         let ast::Path { ref segments, span } = *path;\n         let path: Vec<_> = segments.iter().map(|seg| respan(seg.span, seg.identifier)).collect();\n         let invocation = self.invocations[&scope];\n-        self.current_module = invocation.module.get();\n+        let module = invocation.module.get();\n+        self.current_module = if module.is_trait() { module.parent.unwrap() } else { module };\n \n         if path.len() > 1 {\n             if !self.use_extern_macros && self.gated_errors.insert(span) {"}, {"sha": "ba74c902f55e0fa403f167759c816f61ed6ab860", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -639,10 +639,14 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn assemble_extension_candidates_for_traits_in_scope(&mut self,\n                                                          expr_id: ast::NodeId)\n                                                          -> Result<(), MethodError<'tcx>> {\n+        if expr_id == ast::DUMMY_NODE_ID {\n+            return Ok(())\n+        }\n         let mut duplicates = FxHashSet();\n-        let opt_applicable_traits = self.tcx.trait_map.get(&expr_id);\n+        let expr_hir_id = self.tcx.hir.node_to_hir_id(expr_id);\n+        let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n-            for trait_candidate in applicable_traits {\n+            for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n                     let import_id = trait_candidate.import_id;"}, {"sha": "08359bc3f197611293c131788e02814c4bbbb399", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n pulldown-cmark = { version = \"0.0.14\", default-features = false }\n+html-diff = \"0.0.3\"\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "dec0fe599e7dd66c6cc3f4263994f8ce99d46a40", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -75,6 +75,8 @@ use html::item_type::ItemType;\n use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine, RenderType};\n use html::{highlight, layout};\n \n+use html_diff;\n+\n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n \n@@ -1643,6 +1645,33 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     Ok(())\n }\n \n+fn get_html_diff(w: &mut fmt::Formatter, md_text: &str, render_type: RenderType,\n+                 prefix: &str) -> fmt::Result {\n+    let output = format!(\"{}\", Markdown(md_text, render_type));\n+    let old = format!(\"{}\", Markdown(md_text, match render_type {\n+                                                  RenderType::Hoedown => RenderType::Pulldown,\n+                                                  RenderType::Pulldown => RenderType::Hoedown,\n+                                              }));\n+    let differences = html_diff::get_differences(&output, &old);\n+    if !differences.is_empty() {\n+        println!(\"Differences spotted in {:?}:\\n{}\",\n+                 md_text,\n+                 differences.iter()\n+                            .filter_map(|s| {\n+                                match *s {\n+                                    html_diff::Difference::NodeText { ref elem_text,\n+                                                                      ref opposite_elem_text,\n+                                                                      .. }\n+                                        if elem_text.trim() == opposite_elem_text.trim() => None,\n+                                    _ => Some(format!(\"=> {}\", s.to_string())),\n+                                }\n+                            })\n+                            .collect::<Vec<String>>()\n+                            .join(\"\\n\"));\n+    }\n+    write!(w, \"<div class='docblock'>{}{}</div>\", prefix, output)\n+}\n+\n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n                   render_type: RenderType, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n@@ -1652,7 +1681,7 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(&markdown, render_type))?;\n+        get_html_diff(w, &markdown, render_type, prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1676,7 +1705,7 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  render_type: RenderType, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(s, render_type))?;\n+        get_html_diff(w, s, render_type, prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }"}, {"sha": "d04b6d3417a5af723e82fc8294021e7fac040e49", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -28,6 +28,7 @@\n extern crate arena;\n extern crate getopts;\n extern crate env_logger;\n+extern crate html_diff;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_data_structures;"}, {"sha": "1f33cd7765164460d5e53692db597bb27e61d7e3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -199,8 +199,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n-            for export in exports {\n+        let hir_id = self.cx.tcx.hir.node_to_hir_id(id);\n+        if let Some(exports) = self.cx.tcx.module_exports(hir_id) {\n+            for export in exports.iter() {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`."}, {"sha": "181b8726e483284749d99c6578012f8bd5789216", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -212,7 +212,7 @@\n //! # }\n //! ```\n //!\n-//! [functions-list]: #functions-1\n+//! [functions-list]: #functions-2\n //!\n //! ## io::Result\n //!"}, {"sha": "0330ff5950b01774087f36d375de139c888085a9", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 101, "deletions": 21, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -26,13 +26,33 @@ macro_rules! __rust_unstable_column {\n \n /// The entry point for panic of Rust threads.\n ///\n+/// This allows a program to to terminate immediately and provide feedback\n+/// to the caller of the program. `panic!` should be used when a program reaches\n+/// an unrecoverable problem.\n+///\n+/// This macro is the perfect way to assert conditions in example code and in\n+/// tests.  `panic!` is closely tied with the `unwrap` method of both [`Option`]\n+/// and [`Result`][runwrap] enums.  Both implementations call `panic!` when they are set\n+/// to None or Err variants.\n+///\n /// This macro is used to inject panic into a Rust thread, causing the thread to\n /// panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n /// and the single-argument form of the `panic!` macro will be the value which\n /// is transmitted.\n ///\n+/// [`Result`] enum is often a better solution for recovering from errors than\n+/// using the `panic!` macro.  This macro should be used to avoid proceeding using\n+/// incorrect values, such as from external sources.  Detailed information about\n+/// error handling is found in the [book].\n+///\n /// The multi-argument form of this macro panics with a string and has the\n-/// `format!` syntax for building a string.\n+/// [`format!`] syntax for building a string.\n+///\n+/// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n+/// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n+/// [`Result`]: ../std/result/enum.Result.html\n+/// [`format!`]: ../std/macro.format.html\n+/// [book]: ../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html\n ///\n /// # Current implementation\n ///\n@@ -78,15 +98,19 @@ macro_rules! panic {\n \n /// Macro for printing to the standard output.\n ///\n-/// Equivalent to the `println!` macro except that a newline is not printed at\n+/// Equivalent to the [`println!`] macro except that a newline is not printed at\n /// the end of the message.\n ///\n /// Note that stdout is frequently line-buffered by default so it may be\n-/// necessary to use `io::stdout().flush()` to ensure the output is emitted\n+/// necessary to use [`io::stdout().flush()`][flush] to ensure the output is emitted\n /// immediately.\n ///\n /// Use `print!` only for the primary output of your program.  Use\n-/// `eprint!` instead to print error and progress messages.\n+/// [`eprint!`] instead to print error and progress messages.\n+///\n+/// [`println!`]: ../std/macro.println.html\n+/// [flush]: ../std/io/trait.Write.html#tymethod.flush\n+/// [`eprint!`]: ../std/macro.eprint.html\n ///\n /// # Panics\n ///\n@@ -118,16 +142,20 @@ macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n \n-/// Macro for printing to the standard output, with a newline. On all\n-/// platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n+/// Macro for printing to the standard output, with a newline.\n+///\n+/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// Use the `format!` syntax to write data to the standard output.\n-/// See `std::fmt` for more information.\n+/// Use the [`format!`] syntax to write data to the standard output.\n+/// See [`std::fmt`] for more information.\n ///\n /// Use `println!` only for the primary output of your program.  Use\n-/// `eprintln!` instead to print error and progress messages.\n+/// [`eprintln!`] instead to print error and progress messages.\n ///\n+/// [`format!`]: ../std/macro.format.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n+/// [`eprintln!`]: ../std/macro.eprint.html\n /// # Panics\n ///\n /// Panics if writing to `io::stdout` fails.\n@@ -149,16 +177,25 @@ macro_rules! println {\n \n /// Macro for printing to the standard error.\n ///\n-/// Equivalent to the `print!` macro, except that output goes to\n-/// `io::stderr` instead of `io::stdout`.  See `print!` for\n+/// Equivalent to the [`print!`] macro, except that output goes to\n+/// [`io::stderr`] instead of `io::stdout`.  See [`print!`] for\n /// example usage.\n ///\n /// Use `eprint!` only for error and progress messages.  Use `print!`\n /// instead for the primary output of your program.\n ///\n+/// [`io::stderr`]: ../std/io/struct.Stderr.html\n+/// [`print!`]: ../std/macro.print.html\n+///\n /// # Panics\n ///\n /// Panics if writing to `io::stderr` fails.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// eprint!(\"Error: Could not complete task\");\n+/// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable]\n@@ -168,16 +205,25 @@ macro_rules! eprint {\n \n /// Macro for printing to the standard error, with a newline.\n ///\n-/// Equivalent to the `println!` macro, except that output goes to\n-/// `io::stderr` instead of `io::stdout`.  See `println!` for\n+/// Equivalent to the [`println!`] macro, except that output goes to\n+/// [`io::stderr`] instead of `io::stdout`.  See [`println!`] for\n /// example usage.\n ///\n /// Use `eprintln!` only for error and progress messages.  Use `println!`\n /// instead for the primary output of your program.\n ///\n+/// [`io::stderr`]: ../std/io/struct.Stderr.html\n+/// [`println!`]: ../std/macro.println.html\n+///\n /// # Panics\n ///\n /// Panics if writing to `io::stderr` fails.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// eprintln!(\"Error: Could not complete task\");\n+/// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n macro_rules! eprintln {\n@@ -267,13 +313,23 @@ pub mod builtin {\n \n     /// The core macro for formatted string creation & output.\n     ///\n+    /// This macro functions by taking a formatting string literal containing\n+    /// `{}` for each additional argument passed.  `format_args!` prepares the\n+    /// additional parameters to ensure the output can be interpreted as a string\n+    /// and canonicalizes the arguments into a single type.  Any value that implements\n+    /// the [`Display`] trait can be passed to `format_args!`, as can any\n+    /// [`Debug`] implementation be passed to a `{:?}` within the formatting string.\n+    ///\n     /// This macro produces a value of type [`fmt::Arguments`]. This value can be\n-    /// passed to the functions in [`std::fmt`] for performing useful functions.\n+    /// passed to the macros within [`std::fmt`] for performing useful redirection.\n     /// All other formatting macros ([`format!`], [`write!`], [`println!`], etc) are\n-    /// proxied through this one.\n+    /// proxied through this one.  `format_args!`, unlike its derived macros, avoids\n+    /// heap allocations.\n     ///\n     /// For more information, see the documentation in [`std::fmt`].\n     ///\n+    /// [`Display`]: ../std/fmt/trait.Display.html\n+    /// [`Debug`]: ../std/fmt/trait.Debug.html\n     /// [`fmt::Arguments`]: ../std/fmt/struct.Arguments.html\n     /// [`std::fmt`]: ../std/fmt/index.html\n     /// [`format!`]: ../std/macro.format.html\n@@ -301,9 +357,11 @@ pub mod builtin {\n     /// compile time, yielding an expression of type `&'static str`.\n     ///\n     /// If the environment variable is not defined, then a compilation error\n-    /// will be emitted.  To not emit a compile error, use the `option_env!`\n+    /// will be emitted.  To not emit a compile error, use the [`option_env!`]\n     /// macro instead.\n     ///\n+    /// [`option_env!`]: ../std/macro.option_env.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -319,11 +377,14 @@ pub mod builtin {\n     /// If the named environment variable is present at compile time, this will\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n-    /// variable is not present, then this will expand to `None`.\n+    /// variable is not present, then this will expand to `None`.  See\n+    /// [`Option<T>`][option] for more information on this type.\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not.\n     ///\n+    /// [option]: ../std/option/enum.Option.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -385,10 +446,16 @@ pub mod builtin {\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///\n+    /// With [`column!`] and [`file!`], these macros provide debugging information for\n+    /// developers about the location within the source.\n+    ///\n     /// The expanded expression has type `u32`, and the returned line is not\n     /// the invocation of the `line!()` macro itself, but rather the first macro\n     /// invocation leading up to the invocation of the `line!()` macro.\n     ///\n+    /// [`column!`]: macro.column.html\n+    /// [`file!`]: macro.file.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -401,9 +468,15 @@ pub mod builtin {\n \n     /// A macro which expands to the column number on which it was invoked.\n     ///\n+    /// With [`line!`] and [`file!`], these macros provide debugging information for\n+    /// developers about the location within the source.\n+    ///\n     /// The expanded expression has type `u32`, and the returned column is not\n-    /// the invocation of the `column!()` macro itself, but rather the first macro\n-    /// invocation leading up to the invocation of the `column!()` macro.\n+    /// the invocation of the `column!` macro itself, but rather the first macro\n+    /// invocation leading up to the invocation of the `column!` macro.\n+    ///\n+    /// [`line!`]: macro.line.html\n+    /// [`file!`]: macro.file.html\n     ///\n     /// # Examples\n     ///\n@@ -417,11 +490,18 @@ pub mod builtin {\n \n     /// A macro which expands to the file name from which it was invoked.\n     ///\n+    /// With [`line!`] and [`column!`], these macros provide debugging information for\n+    /// developers about the location within the source.\n+    ///\n+    ///\n     /// The expanded expression has type `&'static str`, and the returned file\n-    /// is not the invocation of the `file!()` macro itself, but rather the\n-    /// first macro invocation leading up to the invocation of the `file!()`\n+    /// is not the invocation of the `file!` macro itself, but rather the\n+    /// first macro invocation leading up to the invocation of the `file!`\n     /// macro.\n     ///\n+    /// [`line!`]: macro.line.html\n+    /// [`column!`]: macro.column.html\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "fe0427d4e5f9c0c86325450db4dc344e04e059c1", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -14,8 +14,7 @@\n \n use fmt;\n \n-#[cfg(any(target_os = \"emscripten\",\n-          all(target_os = \"linux\", any(target_arch = \"aarch64\",\n+#[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\",\n@@ -24,8 +23,7 @@ use fmt;\n                                          target_arch = \"arm\")),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n-#[cfg(not(any(target_os = \"emscripten\",\n-              all(target_os = \"linux\", any(target_arch = \"aarch64\",\n+#[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n                                            target_arch = \"powerpc64\","}, {"sha": "f50b093acc8482c068bdcd768463c1a61cfe83d2", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -71,13 +71,21 @@ impl FileDesc {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pread64;\n \n-        #[cfg(not(target_os = \"android\"))]\n+        #[cfg(target_os = \"emscripten\")]\n         unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n             use libc::pread64;\n-            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            cvt(pread64(fd, buf, count, offset as i32))\n+        }\n+\n+        #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]\n+        unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            #[cfg(target_os = \"linux\")]\n+            use libc::pread64;\n+            #[cfg(not(target_os = \"linux\"))]\n             use libc::pread as pread64;\n             cvt(pread64(fd, buf, count, offset))\n         }\n@@ -104,13 +112,21 @@ impl FileDesc {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pwrite64;\n \n-        #[cfg(not(target_os = \"android\"))]\n+        #[cfg(target_os = \"emscripten\")]\n+        unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            use libc::pwrite64;\n+            cvt(pwrite64(fd, buf, count, offset as i32))\n+        }\n+\n+        #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]\n         unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+            #[cfg(target_os = \"linux\")]\n             use libc::pwrite64;\n-            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            #[cfg(not(target_os = \"linux\"))]\n             use libc::pwrite as pwrite64;\n             cvt(pwrite64(fd, buf, count, offset))\n         }"}, {"sha": "f94af4913324ff7e7b68c26230f712d640f799fa", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -514,6 +514,8 @@ impl File {\n             SeekFrom::End(off) => (libc::SEEK_END, off),\n             SeekFrom::Current(off) => (libc::SEEK_CUR, off),\n         };\n+        #[cfg(target_os = \"emscripten\")]\n+        let pos = pos as i32;\n         let n = cvt(unsafe { lseek64(self.0.raw(), pos, whence) })?;\n         Ok(n as u64)\n     }"}, {"sha": "ae24021fb6c3a55ffd164def3156b96bc9721bd0", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -10,7 +10,6 @@\n \n use io::{self, Error, ErrorKind};\n use libc::{self, c_int, gid_t, pid_t, uid_t};\n-use mem;\n use ptr;\n \n use sys::cvt;\n@@ -184,7 +183,9 @@ impl Command {\n         }\n \n         // NaCl has no signal support.\n-        if cfg!(not(any(target_os = \"nacl\", target_os = \"emscripten\"))) {\n+        #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n+        {\n+            use mem;\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored"}, {"sha": "c349aababd6c01e2448d2c759e15cf8b64eaa515", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -86,8 +86,9 @@ static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n // This example should fail because field1 in the base struct is not safe\n static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n                                         ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n+//~^ ERROR destructors in statics are an unstable feature\n+//~| ERROR statics are not allowed to have destructors\n                                                      field2: SafeEnum::Variant1}};\n-//~^^ ERROR destructors in statics are an unstable feature\n \n struct UnsafeStruct;\n "}, {"sha": "e5f10b65ceed7ef0d001130fa3ea54d01bb92428", "filename": "src/test/compile-fail/static-drop-scope.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(drop_types_in_const)]\n+\n+struct WithDtor;\n+\n+impl Drop for WithDtor {\n+    fn drop(&mut self) {}\n+}\n+\n+static FOO: Option<&'static WithDtor> = Some(&WithDtor);\n+//~^ ERROR statics are not allowed to have destructors\n+//~| ERROR borrowed value does not live long enoug\n+\n+static BAR: i32 = (WithDtor, 0).1;\n+//~^ ERROR statics are not allowed to have destructors\n+\n+fn main () {}"}, {"sha": "a35174b3c2ac44ee122d939fef3b3055efafa89f", "filename": "src/test/run-make/sysroot-crates-are-unstable/Makefile", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -1,35 +1,2 @@\n--include ../tools.mk\n-\n-# This is a whitelist of files which are stable crates or simply are not crates,\n-# we don't check for the instability of these crates as they're all stable!\n-STABLE_CRATES := \\\n-\tstd \\\n-\tcore \\\n-\tproc_macro \\\n-\trsbegin.o \\\n-\trsend.o \\\n-\tdllcrt2.o \\\n-\tcrt2.o \\\n-\tclang_rt.%_dynamic.dylib\n-\n-# Generate a list of all crates in the sysroot. To do this we list all files in\n-# rustc's sysroot, look at the filename, strip everything after the `-`, and\n-# strip the leading `lib` (if present)\n-SYSROOT := $(shell $(RUSTC) --print sysroot)\n-LIBS := $(wildcard $(SYSROOT)/lib/rustlib/$(TARGET)/lib/*)\n-LIBS := $(foreach lib,$(LIBS),$(notdir $(lib)))\n-LIBS := $(foreach lib,$(LIBS),$(word 1,$(subst -, ,$(lib))))\n-LIBS := $(foreach lib,$(LIBS),$(patsubst lib%,%,$(lib)))\n-LIBS := $(filter-out $(STABLE_CRATES),$(LIBS))\n-\n-all: $(foreach lib,$(LIBS),check-crate-$(lib)-is-unstable)\n-\n-check-crate-%-is-unstable:\n-\t@echo verifying $* is an unstable crate\n-\t@echo 'extern crate $*;' | \\\n-\t\t$(RUSTC) - --crate-type rlib 2>&1 | cat > $(TMPDIR)/$*; \\\n-\t\ttrue\n-\t@grep -q 'use of unstable library feature' $(TMPDIR)/$* || \\\n-\t\t(echo crate $* is not unstable && \\\n-\t\tcat $(TMPDIR)/$* && \\\n-\t\tfalse)\n+all:\n+\tpython2.7 test.py"}, {"sha": "210059e1010df795411396c9eec8351827017840", "filename": "src/test/run-make/sysroot-crates-are-unstable/test.py", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2Ftest.py", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2Ftest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2Ftest.py?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,71 @@\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import sys\n+import os\n+from os import listdir\n+from os.path import isfile, join\n+from subprocess import PIPE, Popen\n+\n+\n+# This is a whitelist of files which are stable crates or simply are not crates,\n+# we don't check for the instability of these crates as they're all stable!\n+STABLE_CRATES = ['std', 'core', 'proc_macro', 'rsbegin.o', 'rsend.o', 'dllcrt2.o', 'crt2.o',\n+                 'clang_rt']\n+\n+\n+def convert_to_string(s):\n+    if s.__class__.__name__ == 'bytes':\n+        return s.decode('utf-8')\n+    return s\n+\n+\n+def exec_command(command, to_input=None):\n+    child = None\n+    if to_input is None:\n+        child = Popen(command, stdout=PIPE, stderr=PIPE)\n+    else:\n+        child = Popen(command, stdout=PIPE, stderr=PIPE, stdin=PIPE)\n+    stdout, stderr = child.communicate(input=to_input)\n+    return (convert_to_string(stdout), convert_to_string(stderr))\n+\n+\n+def check_lib(lib):\n+    if lib['name'] in STABLE_CRATES:\n+        return True\n+    print('verifying if {} is an unstable crate'.format(lib['name']))\n+    stdout, stderr = exec_command([os.environ['RUSTC'], '-', '--crate-type', 'rlib',\n+                                   '--extern', '{}={}'.format(lib['name'], lib['path'])],\n+                                  to_input='extern crate {};'.format(lib['name']))\n+    if not 'use of unstable library feature' in '{}{}'.format(stdout, stderr):\n+        print('crate {} \"{}\" is not unstable'.format(lib['name'], lib['path']))\n+        print('{}{}'.format(stdout, stderr))\n+        print('')\n+        return False\n+    return True\n+\n+# Generate a list of all crates in the sysroot. To do this we list all files in\n+# rustc's sysroot, look at the filename, strip everything after the `-`, and\n+# strip the leading `lib` (if present)\n+def get_all_libs(dir_path):\n+    return [{ 'path': join(dir_path, f), 'name': f[3:].split('-')[0] }\n+            for f in listdir(dir_path)\n+            if isfile(join(dir_path, f)) and f.endswith('.rlib') and f not in STABLE_CRATES]\n+\n+\n+sysroot = exec_command([os.environ['RUSTC'], '--print', 'sysroot'])[0].replace('\\n', '')\n+libs = get_all_libs(join(sysroot, 'lib/rustlib/{}/lib'.format(os.environ['TARGET'])))\n+\n+ret = 0\n+for lib in libs:\n+    if not check_lib(lib):\n+        # We continue so users can see all the not unstable crates.\n+        ret = 1\n+sys.exit(ret)"}, {"sha": "8ba38875eff5bd8448fbde42830e6cba65481c81", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-on-trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-on-trait.rs\n+\n+#![feature(proc_macro)]\n+\n+extern crate attr_on_trait;\n+\n+trait Foo {\n+    #[attr_on_trait::foo]\n+    fn foo() {}\n+}\n+\n+impl Foo for i32 {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    3i32.foo();\n+}"}, {"sha": "8e9770340276be0495b44b6478a6a0eaf944a93f", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-on-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn foo(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    drop(attr);\n+    assert_eq!(item.to_string(), \"fn foo() { }\");\n+    \"fn foo(&self);\".parse().unwrap()\n+}"}, {"sha": "acf96b566df840165a7023244ae8f9c21dd17d29", "filename": "src/test/run-pass/rvalue-static-promotion.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -8,8 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_variables)]\n+use std::cell::Cell;\n+\n+const NONE_CELL_STRING: Option<Cell<String>> = None;\n+\n+struct Foo<T>(T);\n+impl<T> Foo<T> {\n+    const FOO: Option<Box<T>> = None;\n+}\n+\n fn main() {\n-    let x: &'static u32 = &42;\n-    let y: &'static Option<u32> = &None;\n+    let _: &'static u32 = &42;\n+    let _: &'static Option<u32> = &None;\n+\n+    // We should be able to peek at consts and see they're None.\n+    let _: &'static Option<Cell<String>> = &NONE_CELL_STRING;\n+    let _: &'static Option<Box<()>> = &Foo::FOO;\n }"}, {"sha": "29b89d689707597d3312238e1de3ea1cf541b0b5", "filename": "src/test/rustdoc/issue-29449.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frustdoc%2Fissue-29449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Frustdoc%2Fissue-29449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29449.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -18,12 +18,12 @@ impl Foo {\n     /// # Panics\n     pub fn bar() {}\n \n-    // @has - '//*[@id=\"examples-1\"]//a' 'Examples'\n+    // @has - '//*[@id=\"examples-2\"]//a' 'Examples'\n     /// # Examples\n     pub fn bar_1() {}\n \n-    // @has - '//*[@id=\"examples-2\"]//a' 'Examples'\n-    // @has - '//*[@id=\"panics-1\"]//a' 'Panics'\n+    // @has - '//*[@id=\"examples-4\"]//a' 'Examples'\n+    // @has - '//*[@id=\"panics-2\"]//a' 'Panics'\n     /// # Examples\n     /// # Panics\n     pub fn bar_2() {}"}, {"sha": "6fca32fece1d4e0f1bfb6fdc81d30dc592602c5d", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{TokenStream, TokenNode, Span, Diagnostic};\n+\n+fn parse(input: TokenStream) -> Result<(), Diagnostic> {\n+    let mut count = 0;\n+    let mut last_span = Span::default();\n+    for tree in input {\n+        let span = tree.span;\n+        if count >= 3 {\n+            return Err(span.error(format!(\"expected EOF, found `{}`.\", tree))\n+                           .span_note(last_span, \"last good input was here\")\n+                           .help(\"input must be: `===`\"))\n+        }\n+\n+        if let TokenNode::Op('=', _) = tree.kind {\n+            count += 1;\n+        } else {\n+            return Err(span.error(format!(\"expected `=`, found `{}`.\", tree)));\n+        }\n+\n+        last_span = span;\n+    }\n+\n+    if count < 3 {\n+        return Err(Span::default()\n+                       .error(format!(\"found {} equal signs, need exactly 3\", count))\n+                       .help(\"input must be: `===`\"))\n+    }\n+\n+    Ok(())\n+}\n+\n+#[proc_macro]\n+pub fn three_equals(input: TokenStream) -> TokenStream {\n+    if let Err(diag) = parse(input) {\n+        diag.emit();\n+        return TokenStream::empty();\n+    }\n+\n+    \"3\".parse().unwrap()\n+}"}, {"sha": "016e05c51f5079abf9614a496e269cc7190b038d", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:three-equals.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate three_equals;\n+\n+use three_equals::three_equals;\n+\n+fn main() {\n+    // This one is okay.\n+    three_equals!(===);\n+\n+    // Need exactly three equals.\n+    three_equals!(==);\n+\n+    // Need exactly three equals.\n+    three_equals!(=====);\n+\n+    // Only equals accepted.\n+    three_equals!(abc);\n+\n+    // Only equals accepted.\n+    three_equals!(!!);\n+\n+    // Only three characters expected.\n+    three_equals!(===a);\n+}"}, {"sha": "1afe0be28000987ad5c1b6dcc15810f461579aa4", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -0,0 +1,48 @@\n+error: found 2 equal signs, need exactly 3\n+  --> $DIR/three-equals.rs:25:5\n+   |\n+25 |     three_equals!(==);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: input must be: `===`\n+\n+error: expected EOF, found `=`.\n+  --> $DIR/three-equals.rs:28:21\n+   |\n+28 |     three_equals!(=====);\n+   |                     ^^\n+   |\n+note: last good input was here\n+  --> $DIR/three-equals.rs:28:21\n+   |\n+28 |     three_equals!(=====);\n+   |                     ^^\n+   = help: input must be: `===`\n+\n+error: expected `=`, found `abc`.\n+  --> $DIR/three-equals.rs:31:19\n+   |\n+31 |     three_equals!(abc);\n+   |                   ^^^\n+\n+error: expected `=`, found `!`.\n+  --> $DIR/three-equals.rs:34:19\n+   |\n+34 |     three_equals!(!!);\n+   |                   ^\n+\n+error: expected EOF, found `a`.\n+  --> $DIR/three-equals.rs:37:22\n+   |\n+37 |     three_equals!(===a);\n+   |                      ^\n+   |\n+note: last good input was here\n+  --> $DIR/three-equals.rs:37:21\n+   |\n+37 |     three_equals!(===a);\n+   |                     ^\n+   = help: input must be: `===`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "e9e4b55402c47bfab24da493f59658b65df6e43b", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572d85e00befa25b5912c0076ef8831a4f9a9f0/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=e572d85e00befa25b5912c0076ef8831a4f9a9f0", "patch": "@@ -33,6 +33,12 @@ static EXCEPTIONS: &'static [&'static str] = &[\n     \"openssl\", // BSD+advertising clause, cargo, mdbook\n     \"pest\", // MPL2, mdbook via handlebars\n     \"thread-id\", // Apache-2.0, mdbook\n+    \"cssparser\", // MPL-2.0, rustdoc\n+    \"smallvec\", // MPL-2.0, rustdoc\n+    \"magenta-sys\", // BSD-3-Clause, rustdoc\n+    \"magenta\", // BSD-3-Clause, rustdoc\n+    \"cssparser-macros\", // MPL-2.0, rustdoc\n+    \"selectors\", // MPL-2.0, rustdoc\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {"}]}