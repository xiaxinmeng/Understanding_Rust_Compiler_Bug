{"sha": "29ef41215c2ffe3105ea8cc1621dda00542f65ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZWY0MTIxNWMyZmZlMzEwNWVhOGNjMTYyMWRkYTAwNTQyZjY1ZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-11T23:51:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-11T23:51:04Z"}, "message": "Auto merge of #42585 - GuillaumeGomez:E0609, r=Susurrus\n\nAdd E0609\n\nPart of #42229.\n\ncc @Susurrus", "tree": {"sha": "e62470fb75e29975d23e1749d56df1e70238bc7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62470fb75e29975d23e1749d56df1e70238bc7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ef41215c2ffe3105ea8cc1621dda00542f65ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ef41215c2ffe3105ea8cc1621dda00542f65ee", "html_url": "https://github.com/rust-lang/rust/commit/29ef41215c2ffe3105ea8cc1621dda00542f65ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ef41215c2ffe3105ea8cc1621dda00542f65ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2eaef8497bd212694840515a568d592b17d0e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2eaef8497bd212694840515a568d592b17d0e07", "html_url": "https://github.com/rust-lang/rust/commit/e2eaef8497bd212694840515a568d592b17d0e07"}, {"sha": "2f3789474042e16f0fb35d1a03d1acfce151774e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3789474042e16f0fb35d1a03d1acfce151774e", "html_url": "https://github.com/rust-lang/rust/commit/2f3789474042e16f0fb35d1a03d1acfce151774e"}], "stats": {"total": 186, "additions": 154, "deletions": 32}, "files": [{"sha": "eea767cd868a4cfd57a513ecc3b45f63f84d878c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -465,6 +465,24 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n+impl<'tcx> TyS<'tcx> {\n+    pub fn is_primitive_ty(&self) -> bool {\n+        match self.sty {\n+            TypeVariants::TyBool |\n+                TypeVariants::TyChar |\n+                TypeVariants::TyInt(_) |\n+                TypeVariants::TyUint(_) |\n+                TypeVariants::TyFloat(_) |\n+                TypeVariants::TyInfer(InferTy::IntVar(_)) |\n+                TypeVariants::TyInfer(InferTy::FloatVar(_)) |\n+                TypeVariants::TyInfer(InferTy::FreshIntTy(_)) |\n+                TypeVariants::TyInfer(InferTy::FreshFloatTy(_)) => true,\n+            TypeVariants::TyRef(_, x) => x.ty.is_primitive_ty(),\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::TyS<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,"}, {"sha": "880137f7c71b1c44682bf997fd92a70fe009dbe8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -2952,30 +2952,34 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .emit();\n             self.tcx().types.err\n         } else {\n-            let mut err = self.type_error_struct(field.span, |actual| {\n-                format!(\"no field `{}` on type `{}`\",\n-                        field.node, actual)\n-            }, expr_t);\n-            match expr_t.sty {\n-                ty::TyAdt(def, _) if !def.is_enum() => {\n-                    if let Some(suggested_field_name) =\n-                        Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n-                            err.span_label(field.span,\n-                                           format!(\"did you mean `{}`?\", suggested_field_name));\n-                        } else {\n-                            err.span_label(field.span,\n-                                           \"unknown field\");\n-                        };\n-                }\n-                ty::TyRawPtr(..) => {\n-                    err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n-                                      `(*{0}).{1}`\",\n-                                      self.tcx.hir.node_to_pretty_string(base.id),\n-                                      field.node));\n+            if !expr_t.is_primitive_ty() {\n+                let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0609,\n+                                                 \"no field `{}` on type `{}`\",\n+                                                 field.node, expr_t);\n+                match expr_t.sty {\n+                    ty::TyAdt(def, _) if !def.is_enum() => {\n+                        if let Some(suggested_field_name) =\n+                            Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n+                                err.span_label(field.span,\n+                                               format!(\"did you mean `{}`?\", suggested_field_name));\n+                            } else {\n+                                err.span_label(field.span, \"unknown field\");\n+                            };\n+                    }\n+                    ty::TyRawPtr(..) => {\n+                        err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref \\\n+                                           with `(*{0}).{1}`\",\n+                                          self.tcx.hir.node_to_pretty_string(base.id),\n+                                          field.node));\n+                    }\n+                    _ => {}\n                 }\n-                _ => {}\n-            }\n-            err.emit();\n+                err\n+            } else {\n+                type_error_struct!(self.tcx().sess, field.span, expr_t, E0610,\n+                                   \"`{}` is a primitive type and therefore doesn't have fields\",\n+                                   expr_t)\n+            }.emit();\n             self.tcx().types.err\n         }\n     }"}, {"sha": "6ccfab0a324b67b70cc0870bf877ccdb07db0120", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -4095,6 +4095,63 @@ assert_eq!(!Question::No, true);\n ```\n \"##,\n \n+E0609: r##\"\n+Attempted to access a non-existent field in a struct.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0609\n+struct StructWithFields {\n+    x: u32,\n+}\n+\n+let s = StructWithFields { x: 0 };\n+println!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n+```\n+\n+To fix this error, check that you didn't misspell the field's name or that the\n+field actually exists. Example:\n+\n+```\n+struct StructWithFields {\n+    x: u32,\n+}\n+\n+let s = StructWithFields { x: 0 };\n+println!(\"{}\", s.x); // ok!\n+```\n+\"##,\n+\n+E0610: r##\"\n+Attempted to access a field on a primitive type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0610\n+let x: u32 = 0;\n+println!(\"{}\", x.foo); // error: `{integer}` is a primitive type, therefore\n+                       //        doesn't have fields\n+```\n+\n+Primitive types are the most basic types available in Rust and don't have\n+fields. To access data via named fields, struct types are used. Example:\n+\n+```\n+// We declare struct called `Foo` containing two fields:\n+struct Foo {\n+    x: u32,\n+    y: i64,\n+}\n+\n+// We create an instance of this struct:\n+let variable = Foo { x: 0, y: -12 };\n+// And we can now access its fields:\n+println!(\"x: {}, y: {}\", variable.x, variable.y);\n+```\n+\n+For more information see The Rust Book: https://doc.rust-lang.org/book/\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "e8ecf58072a6988007148e277ddf40ca7b5a0a97", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -74,6 +74,17 @@ macro_rules! struct_span_err {\n     })\n }\n \n+#[macro_export]\n+macro_rules! type_error_struct {\n+    ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({\n+        if $typ.references_error() {\n+            $session.diagnostic().struct_dummy()\n+        } else {\n+            struct_span_err!($session, $span, $code, $($message)*)\n+        }\n+    })\n+}\n+\n #[macro_export]\n macro_rules! struct_span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({"}, {"sha": "f76c97274bdeaaa6109c8e4093c8302992b6bd31", "filename": "src/test/compile-fail/E0609.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2FE0609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2FE0609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0609.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: u32,\n+}\n+\n+fn main() {\n+    let x = Foo { x: 0 };\n+    let _ = x.foo; //~ ERROR E0609\n+}"}, {"sha": "522d8b0b9438f2ebf3d4e297b34b549066bfa921", "filename": "src/test/compile-fail/E0610.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2FE0610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2FE0610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0610.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 0;\n+    let _ = x.foo; //~ ERROR E0610\n+}"}, {"sha": "3d6c46f5ce3e15f1c27244c5502ade6e97de5d12", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -11,6 +11,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    let _ = x.foo; //~ no field `foo` on type `{integer}`\n-    let _ = x.bar; //~ no field `bar` on type `{integer}`\n+    let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n }"}, {"sha": "619ad74ad00e238df082a12296aa2e18eea53788", "filename": "src/test/compile-fail/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    1.create_a_type_error[ //~ no field `create_a_type_error` on type `{integer}`\n+    1.create_a_type_error[ //~ `{integer}` is a primitive type and therefore doesn't have fields\n         ()+() //~ ERROR binary operation `+` cannot be applied\n               //   ^ ensure that we typeck the inner expression ^\n     ];"}, {"sha": "7dedfcf27275bf7d9832e02241ac4d494a73bae8", "filename": "src/test/compile-fail/parse-error-correct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     let y = 42;\n     let x = y.;  //~ ERROR unexpected token\n     let x = y.();  //~ ERROR unexpected token\n-    let x = y.foo; //~ ERROR no field\n+    let x = y.foo; //~ ERROR `{integer}` is a primitive type and therefore doesn't have fields [E061\n }"}, {"sha": "a8d978d55140b93cf19f4715cfabd0fe866f0321", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -1,4 +1,4 @@\n-error: no field `baz` on type `Foo`\n+error[E0609]: no field `baz` on type `Foo`\n   --> $DIR/issue-36798.rs:17:7\n    |\n 17 |     f.baz;"}, {"sha": "8228f9f3face95e36023fdd1fbb45d1d9e663cca", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -1,4 +1,4 @@\n-error: no field `zz` on type `Foo`\n+error[E0609]: no field `zz` on type `Foo`\n   --> $DIR/issue-36798_unknown_field.rs:17:7\n    |\n 17 |     f.zz;"}, {"sha": "95db694a0c61f7c607f282f20fc572023fd0f569", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -7,7 +7,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 50 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n-error: no field `fake` on type `{integer}`\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:21:13\n    |\n 21 |           1.fake\n@@ -34,7 +34,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 54 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n-error: no field `fake` on type `{integer}`\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:39:13\n    |\n 39 |           1.fake"}, {"sha": "58cd130dcc2534d52f3f827e44b4953b83f15824", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29ef41215c2ffe3105ea8cc1621dda00542f65ee/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=29ef41215c2ffe3105ea8cc1621dda00542f65ee", "patch": "@@ -14,7 +14,7 @@ error: casting `*const U` as `*const str` is invalid\n    |\n    = note: vtable kinds may not match\n \n-error: no field `f` on type `fn() {main}`\n+error[E0609]: no field `f` on type `fn() {main}`\n   --> $DIR/cast-rfc0401.rs:75:18\n    |\n 75 |     let _ = main.f as *const u32;"}]}