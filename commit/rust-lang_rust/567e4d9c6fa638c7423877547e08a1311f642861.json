{"sha": "567e4d9c6fa638c7423877547e08a1311f642861", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2N2U0ZDljNmZhNjM4Yzc0MjM4Nzc1NDdlMDhhMTMxMWY2NDI4NjE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-15T21:56:27Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-18T22:36:14Z"}, "message": "Minor infer/typeck cleanups", "tree": {"sha": "e8dbb1b8f951b979d975391737116bf2a4132668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8dbb1b8f951b979d975391737116bf2a4132668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567e4d9c6fa638c7423877547e08a1311f642861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567e4d9c6fa638c7423877547e08a1311f642861", "html_url": "https://github.com/rust-lang/rust/commit/567e4d9c6fa638c7423877547e08a1311f642861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567e4d9c6fa638c7423877547e08a1311f642861/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff536f3fa59dc5d232724200e24af5eeae6f4b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff536f3fa59dc5d232724200e24af5eeae6f4b54", "html_url": "https://github.com/rust-lang/rust/commit/ff536f3fa59dc5d232724200e24af5eeae6f4b54"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "f547fb5d50cce5f6254fa8070456b3a584f4df19", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/567e4d9c6fa638c7423877547e08a1311f642861/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567e4d9c6fa638c7423877547e08a1311f642861/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=567e4d9c6fa638c7423877547e08a1311f642861", "patch": "@@ -73,8 +73,7 @@ import middle::ty::{tv_vid, vid};\n import regionmanip::{replace_bound_regions_in_fn_ty, region_of};\n import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n import rscope::{in_binding_rscope, region_scope, type_rscope};\n-import syntax::ast::{ty_char, ty_i};\n-import typeck::infer::{root, to_str};\n+import syntax::ast::ty_i;\n import typeck::infer::{unify_methods}; // infcx.set()\n import typeck::infer::{force_level, force_none, force_non_region_vars_only,\n                        force_all};\n@@ -624,7 +623,7 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n       ast::lit_str(_) { ty::mk_str(tcx) }\n       ast::lit_int(_, t) { ty::mk_mach_int(tcx, t) }\n       ast::lit_uint(_, t) { ty::mk_mach_uint(tcx, t) }\n-      ast::lit_int_unsuffixed(v) {\n+      ast::lit_int_unsuffixed(_) {\n         // An unsuffixed integer literal could have any integral type,\n         // so we create an integral type variable for it.\n         ty::mk_var_integral(tcx, fcx.infcx.next_ty_var_integral_id());"}, {"sha": "33c1728ff1157958d536aa5f8751b86ac5a2c000", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/567e4d9c6fa638c7423877547e08a1311f642861/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567e4d9c6fa638c7423877547e08a1311f642861/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=567e4d9c6fa638c7423877547e08a1311f642861", "patch": "@@ -209,7 +209,7 @@ fn intersection(a: int_ty_set, b: int_ty_set) -> int_ty_set {\n \n fn single_type_contained_in(tcx: ty::ctxt, a: int_ty_set) ->\n     option<ty::t> {\n-    #debug[\"type_contained_in(a=%s)\", uint::to_str(*a, 10u)];\n+    #debug[\"single_type_contained_in(a=%s)\", uint::to_str(*a, 10u)];\n \n     if *a == INT_TY_SET_i8    { ret some(ty::mk_i8(tcx)); }\n     if *a == INT_TY_SET_u8    { ret some(ty::mk_u8(tcx)); }\n@@ -219,15 +219,11 @@ fn single_type_contained_in(tcx: ty::ctxt, a: int_ty_set) ->\n     if *a == INT_TY_SET_u32   { ret some(ty::mk_u32(tcx)); }\n     if *a == INT_TY_SET_i64   { ret some(ty::mk_i64(tcx)); }\n     if *a == INT_TY_SET_u64   { ret some(ty::mk_u64(tcx)); }\n-    if *a == INT_TY_SET_i     { ret(some(ty::mk_int(tcx))); }\n-    if *a == INT_TY_SET_u     { ret(some(ty::mk_uint(tcx))); }\n+    if *a == INT_TY_SET_i     { ret some(ty::mk_int(tcx)); }\n+    if *a == INT_TY_SET_u     { ret some(ty::mk_uint(tcx)); }\n     ret none;\n }\n \n-fn is_subset_of(a: int_ty_set, b: int_ty_set) -> bool {\n-    (*a & *b) == *a\n-}\n-\n fn convert_integral_ty_to_int_ty_set(tcx: ty::ctxt, t: ty::t)\n     -> int_ty_set {\n \n@@ -1647,11 +1643,13 @@ fn super_tys<C:combine>(\n         self.infcx().vars_integral(self.infcx().tvib, a_id, b_id).then {||\n             ok(a) }\n       }\n-      (ty::ty_var_integral(a_id), _) {\n+      (ty::ty_var_integral(a_id), ty::ty_int(_)) |\n+      (ty::ty_var_integral(a_id), ty::ty_uint(_)) {\n         self.infcx().vart_integral(self.infcx().tvib, a_id, b).then {||\n             ok(a) }\n       }\n-      (_, ty::ty_var_integral(b_id)) {\n+      (ty::ty_int(_), ty::ty_var_integral(b_id)) |\n+      (ty::ty_uint(_), ty::ty_var_integral(b_id)) {\n         self.infcx().tvar_integral(self.infcx().tvib, a, b_id).then {||\n             ok(a) }\n       }"}]}