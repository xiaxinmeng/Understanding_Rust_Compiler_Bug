{"sha": "0e1880d8fe123354910a42f8046240dee6c6a668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTg4MGQ4ZmUxMjMzNTQ5MTBhNDJmODA0NjI0MGRlZTZjNmE2Njg=", "commit": {"author": {"name": "root", "email": "root@localhost", "date": "2014-07-20T14:31:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:35Z"}, "message": "syntax: Join consecutive string literals in format strings together\n\nEmit a single rt::Piece per consecutive string literals. String literals\nare split on {{ or }} escapes.\n\nSaves a small amount of static storage and emitted code size.", "tree": {"sha": "2b9a3e1453dc2f7fd51ddd0ba4814dc6f259ad09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9a3e1453dc2f7fd51ddd0ba4814dc6f259ad09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1880d8fe123354910a42f8046240dee6c6a668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1880d8fe123354910a42f8046240dee6c6a668", "html_url": "https://github.com/rust-lang/rust/commit/0e1880d8fe123354910a42f8046240dee6c6a668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1880d8fe123354910a42f8046240dee6c6a668/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "html_url": "https://github.com/rust-lang/rust/commit/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "2e86d1c005d1cb416fbfe78b44cdac833821c48c", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0e1880d8fe123354910a42f8046240dee6c6a668/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1880d8fe123354910a42f8046240dee6c6a668/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=0e1880d8fe123354910a42f8046240dee6c6a668", "patch": "@@ -49,6 +49,9 @@ struct Context<'a, 'b> {\n     name_types: HashMap<String, ArgumentType>,\n     name_ordering: Vec<String>,\n \n+    /// The latest consecutive literal strings\n+    literal: Option<String>,\n+\n     /// Collection of the compiled `rt::Piece` structures\n     pieces: Vec<Gc<ast::Expr>>,\n     name_positions: HashMap<String, uint>,\n@@ -362,17 +365,29 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n+    /// Translate the accumulated string literals to a static `rt::Piece`\n+    fn trans_literal_string(&mut self) -> Option<Gc<ast::Expr>> {\n+        let sp = self.fmtsp;\n+        self.literal.take().map(|s| {\n+            let s = token::intern_and_get_ident(s.as_slice());\n+            self.ecx.expr_call_global(sp,\n+                                      self.rtpath(\"String\"),\n+                                      vec!(\n+                self.ecx.expr_str(sp, s)\n+            ))\n+        })\n+    }\n+\n     /// Translate a `parse::Piece` to a static `rt::Piece`\n-    fn trans_piece(&mut self, piece: &parse::Piece) -> Gc<ast::Expr> {\n+    fn trans_piece(&mut self, piece: &parse::Piece) -> Option<Gc<ast::Expr>> {\n         let sp = self.fmtsp;\n         match *piece {\n             parse::String(s) => {\n-                let s = token::intern_and_get_ident(s);\n-                self.ecx.expr_call_global(sp,\n-                                          self.rtpath(\"String\"),\n-                                          vec!(\n-                    self.ecx.expr_str(sp, s)\n-                ))\n+                match self.literal {\n+                    Some(ref mut sb) => sb.push_str(s),\n+                    ref mut empty => *empty = Some(String::from_str(s)),\n+                }\n+                None\n             }\n             parse::Argument(ref arg) => {\n                 // Translate the position\n@@ -430,7 +445,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 let s = self.ecx.expr_struct(sp, path, vec!(\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"position\"), pos),\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"format\"), fmt)));\n-                self.ecx.expr_call_global(sp, self.rtpath(\"Argument\"), vec!(s))\n+                Some(self.ecx.expr_call_global(sp, self.rtpath(\"Argument\"), vec!(s)))\n             }\n         }\n     }\n@@ -694,6 +709,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         name_ordering: name_ordering,\n         nest_level: 0,\n         next_arg: 0,\n+        literal: None,\n         pieces: Vec::new(),\n         method_statics: Vec::new(),\n         fmtsp: sp,\n@@ -712,8 +728,14 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n             Some(piece) => {\n                 if parser.errors.len() > 0 { break }\n                 cx.verify_piece(&piece);\n-                let piece = cx.trans_piece(&piece);\n-                cx.pieces.push(piece);\n+                match cx.trans_piece(&piece) {\n+                    Some(piece) => {\n+                        cx.trans_literal_string().map(|piece|\n+                                                      cx.pieces.push(piece));\n+                        cx.pieces.push(piece);\n+                    }\n+                    None => {}\n+                }\n             }\n             None => break\n         }\n@@ -727,6 +749,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         }\n         None => {}\n     }\n+    cx.trans_literal_string().map(|piece| cx.pieces.push(piece));\n \n     // Make sure that all arguments were used and all arguments have types.\n     for (i, ty) in cx.arg_types.iter().enumerate() {"}]}