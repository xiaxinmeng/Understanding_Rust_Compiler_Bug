{"sha": "904f27a2ea7b13161cefc0a359b51a0e49f878b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNGYyN2EyZWE3YjEzMTYxY2VmYzBhMzU5YjUxYTBlNDlmODc4YjM=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-12-01T19:25:43Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-12-01T19:25:43Z"}, "message": "Do raise a same-arms warning when the two arms are separated by an arm with a guard, fix #1996.", "tree": {"sha": "0f83550248a9f5136125b15477a2301e80111633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f83550248a9f5136125b15477a2301e80111633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904f27a2ea7b13161cefc0a359b51a0e49f878b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904f27a2ea7b13161cefc0a359b51a0e49f878b3", "html_url": "https://github.com/rust-lang/rust/commit/904f27a2ea7b13161cefc0a359b51a0e49f878b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904f27a2ea7b13161cefc0a359b51a0e49f878b3/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876d6d8c43b675bfb7875d772ff247807524efec", "url": "https://api.github.com/repos/rust-lang/rust/commits/876d6d8c43b675bfb7875d772ff247807524efec", "html_url": "https://github.com/rust-lang/rust/commit/876d6d8c43b675bfb7875d772ff247807524efec"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "140b895526dbbc7510b65e2072dc87e55cbf00ce", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/904f27a2ea7b13161cefc0a359b51a0e49f878b3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904f27a2ea7b13161cefc0a359b51a0e49f878b3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=904f27a2ea7b13161cefc0a359b51a0e49f878b3", "patch": "@@ -178,22 +178,26 @@ fn lint_same_cond(cx: &LateContext, conds: &[&Expr]) {\n \n /// Implementation if `MATCH_SAME_ARMS`.\n fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n-    let hash = |arm: &Arm| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_expr(&arm.body);\n-        h.finish()\n-    };\n+    if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n+        let hash = |&(_, arm): &(usize, &Arm)| -> u64 {\n+            let mut h = SpanlessHash::new(cx);\n+            h.hash_expr(&arm.body);\n+            h.finish()\n+        };\n \n-    let eq = |lhs: &Arm, rhs: &Arm| -> bool {\n-        // Arms with a guard are ignored, those can\u2019t always be merged together\n-        lhs.guard.is_none() && rhs.guard.is_none() &&\n-            SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n-            // all patterns should have the same bindings\n-            bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n-    };\n+        let eq = |&(lindex, lhs): &(usize, &Arm), &(rindex, rhs): &(usize, &Arm)| -> bool {\n+            let min_index = usize::min(lindex, rindex);\n+            let max_index = usize::max(rindex, rindex);\n+            // Arms with a guard are ignored, those can\u2019t always be merged together\n+            // This is also the case for arms in-between each there is an arm with a guard\n+            (min_index..=max_index).all(|index| arms[index].guard.is_none()) &&\n+                SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n+                // all patterns should have the same bindings\n+                bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n+        };\n \n-    if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n-        if let Some((i, j)) = search_same(arms, hash, eq) {\n+        let indexed_arms: Vec<(usize, &Arm)> = arms.iter().enumerate().collect();\n+        if let Some((&(_, i), &(_, j))) = search_same(&indexed_arms, hash, eq) {\n             span_lint_and_then(\n                 cx,\n                 MATCH_SAME_ARMS,"}, {"sha": "8130436d485d9f2ccd72cd78404d69f266076af0", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=904f27a2ea7b13161cefc0a359b51a0e49f878b3", "patch": "@@ -285,7 +285,7 @@ fn match_wild_err_arm() {\n         Err(_) => println!(\"err\")\n     }\n \n-    // this is a current false positive, see #1996\n+    // this used to be a false positive, see #1996\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(x) if x*x == 64 => println!(\"ok 64\"),"}, {"sha": "8c0ec49e626bce386ca905076754887dc108112c", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=904f27a2ea7b13161cefc0a359b51a0e49f878b3", "patch": "@@ -390,24 +390,6 @@ note: consider refactoring into `Ok(3) | Ok(_)`\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:292:18\n-    |\n-292 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n-note: same as this\n-   --> $DIR/matches.rs:290:18\n-    |\n-290 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:290:18\n-    |\n-290 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:298:29\n     |"}, {"sha": "1c244c1df127e57511d1d82794256726ce4e4301", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/904f27a2ea7b13161cefc0a359b51a0e49f878b3/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=904f27a2ea7b13161cefc0a359b51a0e49f878b3", "patch": "@@ -112,7 +112,7 @@ error: trivial regex\n error: trivial regex\n   --> $DIR/regex.rs:62:40\n    |\n-62 |     let trivial_backslash = Regex::new(\"a/.b\");\n+62 |     let trivial_backslash = Regex::new(\"a//.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using consider using `str::contains`"}]}