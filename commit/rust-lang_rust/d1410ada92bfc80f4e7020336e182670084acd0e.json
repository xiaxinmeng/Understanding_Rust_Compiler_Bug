{"sha": "d1410ada92bfc80f4e7020336e182670084acd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDEwYWRhOTJiZmM4MGY0ZTcwMjAzMzZlMTgyNjcwMDg0YWNkMGU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T11:39:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T13:08:18Z"}, "message": "[eddyb] rustc_codegen_ssa: avoid a `Clone` bound on `TargetMachine`.", "tree": {"sha": "415da9e0a10162e91a854e00b50621ea8bedda30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415da9e0a10162e91a854e00b50621ea8bedda30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1410ada92bfc80f4e7020336e182670084acd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1410ada92bfc80f4e7020336e182670084acd0e", "html_url": "https://github.com/rust-lang/rust/commit/d1410ada92bfc80f4e7020336e182670084acd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1410ada92bfc80f4e7020336e182670084acd0e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c84c4234a6e3ee24888bd94daeec13df7dd20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c84c4234a6e3ee24888bd94daeec13df7dd20d", "html_url": "https://github.com/rust-lang/rust/commit/47c84c4234a6e3ee24888bd94daeec13df7dd20d"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "2fc8deeec8a256f3e963e41143cd1ccbe4a820fe", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=d1410ada92bfc80f4e7020336e182670084acd0e", "patch": "@@ -649,7 +649,7 @@ pub unsafe fn optimize_thin_module(\n     timeline: &mut Timeline\n ) -> Result<ModuleCodegen<ModuleLlvm>, FatalError> {\n     let diag_handler = cgcx.create_diag_handler();\n-    let tm = (cgcx.tm_factory)().map_err(|e| {\n+    let tm = (cgcx.tm_factory.0)().map_err(|e| {\n         write::llvm_err(&diag_handler, &e)\n     })?;\n "}, {"sha": "9d569a4e28c45ba9725ab085e3eb4080df73c57c", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=d1410ada92bfc80f4e7020336e182670084acd0e", "patch": "@@ -165,17 +165,6 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     }\n }\n \n-impl Clone for &'static mut llvm::TargetMachine {\n-    fn clone(&self) -> Self {\n-        // This method should never be called. It is put here because in\n-        // rustc_codegen_ssa::back::write::CodegenContext, the TargetMachine is contained in a\n-        // closure returned by a function under an Arc. The clone-deriving algorithm works when the\n-        // struct contains the original LLVM TargetMachine type but not any more when supplied with\n-        // a generic type. Hence this dummy Clone implementation.\n-        panic!()\n-    }\n-}\n-\n impl WriteBackendMethods for LlvmCodegenBackend {\n     type Module = ModuleLlvm;\n     type ModuleBuffer = back::lto::ModuleBuffer;"}, {"sha": "e8cf9e7f40ae332c6b8344c71825514f54007e44", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=d1410ada92bfc80f4e7020336e182670084acd0e", "patch": "@@ -178,6 +178,17 @@ pub struct AssemblerCommand {\n     cmd: Command,\n }\n \n+// HACK(eddyb) work around `#[derive]` producing wrong bounds for `Clone`.\n+pub struct TargetMachineFactory<B: WriteBackendMethods>(\n+    pub Arc<dyn Fn() -> Result<B::TargetMachine, String> + Send + Sync>,\n+);\n+\n+impl<B: WriteBackendMethods> Clone for TargetMachineFactory<B> {\n+    fn clone(&self) -> Self {\n+        TargetMachineFactory(self.0.clone())\n+    }\n+}\n+\n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]\n pub struct CodegenContext<B: WriteBackendMethods> {\n@@ -196,8 +207,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub regular_module_config: Arc<ModuleConfig>,\n     pub metadata_module_config: Arc<ModuleConfig>,\n     pub allocator_module_config: Arc<ModuleConfig>,\n-    pub tm_factory: Arc<dyn Fn()\n-        -> Result<B::TargetMachine, String> + Send + Sync>,\n+    pub tm_factory: TargetMachineFactory<B>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n     pub debuginfo: config::DebugInfo,\n@@ -962,7 +972,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: modules_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: backend.target_machine_factory(tcx.sess, false),\n+        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, false)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),"}, {"sha": "72522e19af21083aa13dadf365ea53c6f486c073", "filename": "src/librustc_codegen_ssa/interfaces/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1410ada92bfc80f4e7020336e182670084acd0e/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fwrite.rs?ref=d1410ada92bfc80f4e7020336e182670084acd0e", "patch": "@@ -18,7 +18,7 @@ use rustc_errors::{FatalError, Handler};\n \n pub trait WriteBackendMethods: 'static + Sized + Clone {\n     type Module: Send + Sync;\n-    type TargetMachine: Clone;\n+    type TargetMachine;\n     type ModuleBuffer: ModuleBufferMethods;\n     type Context: ?Sized;\n     type ThinData: Send + Sync;"}]}