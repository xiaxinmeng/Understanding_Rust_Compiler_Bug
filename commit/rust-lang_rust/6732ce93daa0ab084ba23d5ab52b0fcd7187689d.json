{"sha": "6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzJjZTkzZGFhMGFiMDg0YmEyM2Q1YWI1MmIwZmNkNzE4NzY4OWQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-29T20:51:27Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-29T21:01:43Z"}, "message": "build-manifest: add instructions to test the tool locally", "tree": {"sha": "ead07ea7300f12f097cfa4b902ed2e412840d3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead07ea7300f12f097cfa4b902ed2e412840d3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAABAgAGBQJbhwm3AAoJEOjBBC3RYkUZxBwIAIsY7J2Y4Xmr/Yw8gv7zoBvs\nlHUsUeH99P/s25cf45JWVWkEQMfKMTuY/SgZ8klCo4p77rZeUYDpctIga3X+3SVw\n5SXidnaCZv9a3bM/sc9kAQf+S6yWzVih6ppg/g/XURqi/X9TI8dwuGuwV7J+arXg\nDwY+x1t8LTF8d8ypIs8NDH7+Kmlv8DWlBteLECmZpMHrmQBogcfqrxmCioRPjJOi\n3INIhd6waK6uhGYQAMi6s/AQVsGpburVCyZ41bW7T3c7XO93ymjZykQJqzKEVfP6\nNrk3YZgp5eqcQT7AXa3OYoHlw8LtAabDVfsCmKUk9G3WL5qjVar2090Y3QgmhsQ=\n=Q49J\n-----END PGP SIGNATURE-----", "payload": "tree ead07ea7300f12f097cfa4b902ed2e412840d3d2\nparent e6b35b0e1115f008796e8313574e4a4739b6d39d\nauthor Pietro Albini <pietro@pietroalbini.org> 1535575887 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1535576503 +0200\n\nbuild-manifest: add instructions to test the tool locally\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "html_url": "https://github.com/rust-lang/rust/commit/6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6732ce93daa0ab084ba23d5ab52b0fcd7187689d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b35b0e1115f008796e8313574e4a4739b6d39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b35b0e1115f008796e8313574e4a4739b6d39d", "html_url": "https://github.com/rust-lang/rust/commit/e6b35b0e1115f008796e8313574e4a4739b6d39d"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "6834f56efe7dbb7f26841a64a6015be884bcd450", "filename": "src/tools/build-manifest/README.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6732ce93daa0ab084ba23d5ab52b0fcd7187689d/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6732ce93daa0ab084ba23d5ab52b0fcd7187689d/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "patch": "@@ -0,0 +1,30 @@\n+# build-manifest\n+\n+This tool generates the manifests uploaded to static.rust-lang.org and used by\n+rustup. The tool is invoked by the bootstrap tool.\n+\n+## Testing changes locally\n+\n+In order to test the changes locally you need to have a valid dist directory\n+available locally. If you don't want to build all the compiler, you can easily\n+create one from the nightly artifacts with:\n+\n+```\n+#!/bin/bash\n+for cmpn in rust rustc rust-std rust-docs cargo; do\n+    wget https://static.rust-lang.org/dist/${cmpn}-nightly-x86_64-unknown-linux-gnu.tar.gz\n+done\n+```\n+\n+Then, you can generate the manifest and all the packages from `path/to/dist` to\n+`path/to/output` with:\n+\n+```\n+$ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n+    path/to/dist path/to/output 1970-01-01 \\\n+    nightly nightly nightly nightly nightly nightly nightly \\\n+    http://example.com\n+```\n+\n+In the future, if the tool complains about missing arguments just add more\n+`nightly`s in the middle."}, {"sha": "2bf6fa401d0d2438c8c421477760ad21108f202b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6732ce93daa0ab084ba23d5ab52b0fcd7187689d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6732ce93daa0ab084ba23d5ab52b0fcd7187689d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6732ce93daa0ab084ba23d5ab52b0fcd7187689d", "patch": "@@ -216,9 +216,23 @@ struct Builder {\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n     lldb_git_commit_hash: Option<String>,\n+\n+    should_sign: bool,\n }\n \n fn main() {\n+    // Avoid signing packages while manually testing\n+    // Do NOT set this envvar in CI\n+    let should_sign = env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err();\n+\n+    // Safety check to ensure signing is always enabled on CI\n+    // The CI environment variable is set by both Travis and AppVeyor\n+    if !should_sign && env::var(\"CI\").is_ok() {\n+        println!(\"The 'BUILD_MANIFEST_DISABLE_SIGNING' env var can't be enabled on CI.\");\n+        println!(\"If you're not running this on CI, unset the 'CI' env var.\");\n+        panic!();\n+    }\n+\n     let mut args = env::args().skip(1);\n     let input = PathBuf::from(args.next().unwrap());\n     let output = PathBuf::from(args.next().unwrap());\n@@ -231,8 +245,12 @@ fn main() {\n     let llvm_tools_release = args.next().unwrap();\n     let lldb_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n+\n+    // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n-    t!(io::stdin().read_to_string(&mut passphrase));\n+    if should_sign {\n+        t!(io::stdin().read_to_string(&mut passphrase));\n+    }\n \n     Builder {\n         rust_release,\n@@ -265,6 +283,8 @@ fn main() {\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n         lldb_git_commit_hash: None,\n+\n+        should_sign,\n     }.build();\n }\n \n@@ -588,6 +608,10 @@ impl Builder {\n     }\n \n     fn sign(&self, path: &Path) {\n+        if !self.should_sign {\n+            return;\n+        }\n+\n         let filename = path.file_name().unwrap().to_str().unwrap();\n         let asc = self.output.join(format!(\"{}.asc\", filename));\n         println!(\"signing: {:?}\", path);"}]}