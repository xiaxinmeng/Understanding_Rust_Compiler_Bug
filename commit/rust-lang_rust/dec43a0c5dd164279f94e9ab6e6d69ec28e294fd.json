{"sha": "dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzQzYTBjNWRkMTY0Mjc5Zjk0ZTlhYjZlNmQ2OWVjMjhlMjk0ZmQ=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-05T08:20:36Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-05T10:50:04Z"}, "message": "Consider prelude to be `macro_use`", "tree": {"sha": "ed324f13437c6137e335aecf572e4b189d131e5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed324f13437c6137e335aecf572e4b189d131e5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1w6FwACgkQztOS3gxI\nPQB0MQ//UEKrz7/DlGeKlFxSCCf86YPVK5pmandFxWujevIh0DJViyWVDzqtOAme\n6iIQyqRRjPZpWXjelU5RYtoESyL6h42f9Kk5r57royfjCjRJHB+Jl40RKk7s8FvT\npMBoBv1IEXTE0teKeIbQZNCVOUOhv7y52ieDBB3u8qIYXuILBL63y4DsqM1N8V5d\npS7NI6DNV+m3evSt45vxInvuYOltR989WeBZj+UwCLS0oEatVtAcbloBK0nNDVgv\njEfz++tVIEhgoibHiw9f/QRn7AKZGHOAqp9QOBWSoiuQLollmSBDnXBsC/Dikqh8\nIzE5ZA0lINojbpQvlKJhJUUgazQy9+rySL25D0+QK8tovxdbCIstjzwLeYPND3fe\nNw+cErWh0it3FTlvXvpAeY9iB4rFRuLH7l6kUlqS1oPIMkhr7f7VxqKUGsGVCowZ\nqPvT3ArwPnHZAyl3AuC/NNdTOIWlXbt4UdrGf+pnIKY/99yrUb73zSRUiM3DLml3\nOBovUV36rUbwh+mbcPv1YsYbPFtT4MnFwedwKUrgct5hrjZy9RPVPRuV/VCIutFM\n16yKbuIRVmLpQ1EcgfekAj3ckZ5pCeFD2kJNACC7sGoXxA+gjeG4xM4ofwkrlAE+\nnBhcp7afAcDDjI6iTXEDggbs+2DEj7iozUNf8eysGCCiSrkgIYk=\n=wR06\n-----END PGP SIGNATURE-----", "payload": "tree ed324f13437c6137e335aecf572e4b189d131e5b\nparent 6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567671636 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567680604 +0800\n\nConsider prelude to be `macro_use`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "html_url": "https://github.com/rust-lang/rust/commit/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/comments", "author": null, "committer": null, "parents": [{"sha": "6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "html_url": "https://github.com/rust-lang/rust/commit/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "fe119b97c54b6f11102718777d386ce6cea270bd", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "patch": "@@ -12,4 +12,5 @@ test_utils::marks!(\n     trait_resolution_on_fn_type\n     infer_while_let\n     macro_rules_from_other_crates_are_visible_with_macro_use\n+    prelude_is_macro_use\n );"}, {"sha": "3e689e3601689de8cc5473c9c0a11fe4e31fad83", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "patch": "@@ -185,11 +185,14 @@ where\n \n         if let Some(ModuleDef::Module(m)) = res.take_types() {\n             tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+            self.import_all_macros_exported(m);\n+        }\n+    }\n \n-            let item_map = self.db.crate_def_map(m.krate);\n-            for (name, &macro_id) in &item_map.exported_macros {\n-                self.global_macro_scope.insert(name.clone(), macro_id);\n-            }\n+    fn import_all_macros_exported(&mut self, module: Module) {\n+        let item_map = self.db.crate_def_map(module.krate);\n+        for (name, &macro_id) in &item_map.exported_macros {\n+            self.global_macro_scope.insert(name.clone(), macro_id);\n         }\n     }\n \n@@ -522,6 +525,12 @@ where\n     DB: DefDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n+        // Prelude module is always considered to be `#[macro_use]`.\n+        if let Some(prelude_module) = self.def_collector.def_map.prelude {\n+            tested_by!(prelude_is_macro_use);\n+            self.def_collector.import_all_macros_exported(prelude_module);\n+        }\n+\n         for item in items {\n             match *item {\n                 raw::RawItem::Module(m) => self.collect_module(&self.raw_items[m]),"}, {"sha": "8fcd86bfeb1bd57a3f1d29e1c65f72f0fb2d0339", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec43a0c5dd164279f94e9ab6e6d69ec28e294fd/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=dec43a0c5dd164279f94e9ab6e6d69ec28e294fd", "patch": "@@ -191,3 +191,60 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n    \u22eeBaz: t v\n     \"###);\n }\n+\n+#[test]\n+fn prelude_is_macro_use() {\n+    covers!(prelude_is_macro_use);\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        structs!(Foo);\n+        structs_priv!(Bar);\n+        structs_outside!(Out);\n+        crate::structs!(MacroNotResolved2);\n+\n+        mod bar;\n+\n+        //- /bar.rs\n+        structs!(Baz);\n+        crate::structs!(MacroNotResolved3);\n+\n+        //- /lib.rs\n+        #[prelude_import]\n+        use self::prelude::*;\n+\n+        mod prelude {\n+            #[macro_export]\n+            macro_rules! structs {\n+                ($i:ident) => { struct $i; }\n+            }\n+\n+            mod priv_mod {\n+                #[macro_export]\n+                macro_rules! structs_priv {\n+                    ($i:ident) => { struct $i; }\n+                }\n+            }\n+        }\n+\n+        #[macro_export]\n+        macro_rules! structs_outside {\n+            ($i:ident) => { struct $i; }\n+        }\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"foo\"]),\n+            \"foo\": (\"/lib.rs\", []),\n+        },\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eeOut: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBaz: t v\n+    \"###);\n+}"}]}