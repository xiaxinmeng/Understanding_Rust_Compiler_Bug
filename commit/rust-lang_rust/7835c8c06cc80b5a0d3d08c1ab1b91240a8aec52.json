{"sha": "7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MzVjOGMwNmNjODBiNWEwZDNkMDhjMWFiMWI5MTI0MGE4YWVjNTI=", "commit": {"author": {"name": "Jan Riemer", "email": "janriemer@users.noreply.github.com", "date": "2020-08-02T12:57:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T12:57:19Z"}, "message": "docs(marker/copy): clarify that `&T` is also `Copy`\n\nIn the current documentation about the `Copy` marker trait, there is a section\r\nabout \"additional implementors\", which list additional implementors of the `Copy` trait.\r\nThe fact that shared references are also `Copy` is mixed with another point,\r\nwhich makes it hard to recognize and make it seem not as important.\r\n\r\nThis clarifies the fact that shared references are also `Copy`, by mentioning it as a\r\nseparate item in the list of \"additional implementors\".", "tree": {"sha": "6f60453b159a96d4f134d696365cb47994871ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f60453b159a96d4f134d696365cb47994871ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJrgvCRBK7hj4Ov3rIwAAdHIIABk8+calxjRmcMs9sDBvtQJ4\nTyysDMt0p+Yf1pRztUqyRN8SaEYh6lXkj7aLi3ypjtr1NTG1dw04YLyj1eCRlHf/\n8thmvehgOgyRJSJQylJ94hvu+sa8IfR+bynwCLBXmuLPsbMCYg0WMz5wHUrZmNde\nDNtxxQbIAc6pfb2U609G77u5fQ99mavlxDMVccwCQhXcp5AGr3WR9+uk29GidLUu\nv3PHGMkDE/aW2oVOprYS2d7N0fQdPbYJ/Vahy9uKx20qIfnWfjV/sENI99aHdJKS\nKY09JvQk/Jw8fOmFEqXGAyaBlSYf+kUTWw7FPLsN9S8ul+bb0ekycRh6Qbglu7U=\n=OT2l\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f60453b159a96d4f134d696365cb47994871ab5\nparent 1e9913807841153729f92e438e6189184cbf561f\nauthor Jan Riemer <janriemer@users.noreply.github.com> 1596373039 +0200\ncommitter GitHub <noreply@github.com> 1596373039 +0200\n\ndocs(marker/copy): clarify that `&T` is also `Copy`\n\nIn the current documentation about the `Copy` marker trait, there is a section\r\nabout \"additional implementors\", which list additional implementors of the `Copy` trait.\r\nThe fact that shared references are also `Copy` is mixed with another point,\r\nwhich makes it hard to recognize and make it seem not as important.\r\n\r\nThis clarifies the fact that shared references are also `Copy`, by mentioning it as a\r\nseparate item in the list of \"additional implementors\"."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "html_url": "https://github.com/rust-lang/rust/commit/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52/comments", "author": {"login": "janriemer", "id": 8432168, "node_id": "MDQ6VXNlcjg0MzIxNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/8432168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janriemer", "html_url": "https://github.com/janriemer", "followers_url": "https://api.github.com/users/janriemer/followers", "following_url": "https://api.github.com/users/janriemer/following{/other_user}", "gists_url": "https://api.github.com/users/janriemer/gists{/gist_id}", "starred_url": "https://api.github.com/users/janriemer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janriemer/subscriptions", "organizations_url": "https://api.github.com/users/janriemer/orgs", "repos_url": "https://api.github.com/users/janriemer/repos", "events_url": "https://api.github.com/users/janriemer/events{/privacy}", "received_events_url": "https://api.github.com/users/janriemer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9913807841153729f92e438e6189184cbf561f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9913807841153729f92e438e6189184cbf561f", "html_url": "https://github.com/rust-lang/rust/commit/1e9913807841153729f92e438e6189184cbf561f"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "255f4474ea07ddc575060a2c5da77fae889ff846", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "patch": "@@ -347,9 +347,8 @@ pub trait StructuralEq {\n /// * Tuple types, if each component also implements `Copy` (e.g., `()`, `(i32, bool)`)\n /// * Closure types, if they capture no value from the environment\n ///   or if all such captured values implement `Copy` themselves.\n-///   Note that variables captured by shared reference always implement `Copy`\n-///   (even if the referent doesn't),\n-///   while variables captured by mutable reference never implement `Copy`.\n+/// * Variables captured by shared reference (e.g. `&T`) implement `Copy`, even if the referent (`T`) doesn't,\n+///   while variables captured by mutable reference (e.g. `&mut T`) never implement `Copy`.\n ///\n /// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n /// [`String`]: ../../std/string/struct.String.html"}]}