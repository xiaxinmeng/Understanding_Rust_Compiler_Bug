{"sha": "ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "node_id": "C_kwDOAAsO6NoAKGVhN2RlMGQ0ODUzMGIzNGNmN2Y4YWUxODQzNWU2ODQ2M2U1N2M2Yjc", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-24T00:40:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-24T00:45:16Z"}, "message": "Do not use `hir_ty_to_ty`", "tree": {"sha": "23921708b7a4d9f2420a362656e01121485a0d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23921708b7a4d9f2420a362656e01121485a0d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "html_url": "https://github.com/rust-lang/rust/commit/ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12fd9011b82c508420cd19b6b50d8626f07430cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/12fd9011b82c508420cd19b6b50d8626f07430cf", "html_url": "https://github.com/rust-lang/rust/commit/12fd9011b82c508420cd19b6b50d8626f07430cf"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "5d05a09f038938cf4e26241a3883989ee8e4dc22", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "patch": "@@ -3447,7 +3447,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n- \"rustc_hir_analysis\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_lexer\","}, {"sha": "87c113f3e30b7399c9d1b050c469e9237b87f223", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "patch": "@@ -15,7 +15,6 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n-rustc_hir_analysis = { path = \"../rustc_hir_analysis\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }"}, {"sha": "989fbb066f768abc8b3c0e2102065e433bd7546c", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7de0d48530b34cf7f8ae18435e68463e57c6b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n-use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n@@ -1137,7 +1136,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             && Some(def.did()) == self.infcx.tcx.lang_items().pin_type()\n                             && let ty::Ref(_, _, hir::Mutability::Mut) = substs.type_at(0).kind()\n                             // FIXME: this is a hack because we can't call `can_eq`\n-                            && ty.to_string() ==    \n+                            && ty.to_string() ==\n                                 tcx.fn_sig(method_did).input(0).skip_binder().to_string()\n                         {\n                             err.span_suggestion_verbose(\n@@ -1155,22 +1154,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 if let Some(def_id) = impl_def_id.as_local()\n                                     && let hir_id = tcx.hir().local_def_id_to_hir_id(def_id)\n                                     && let hir::Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Impl(hir::Impl {\n-                                            self_ty,\n-                                            ..\n-                                        }),\n+                                        kind: hir::ItemKind::Impl(_),\n                                         ..\n                                     }) = tcx.hir().get(hir_id)\n+                                    && tcx.type_of(impl_def_id) == ty\n                                 {\n-                                    if ty == hir_ty_to_ty(tcx, self_ty) {\n-                                        err.span_suggestion_verbose(\n-                                            fn_call_span.shrink_to_lo(),\n-                                            \"you can `clone` the value and consume it, but this \\\n-                                             might not be your desired behavior\",\n-                                            \"clone().\".to_string(),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n+                                    err.span_suggestion_verbose(\n+                                        fn_call_span.shrink_to_lo(),\n+                                        \"you can `clone` the value and consume it, but this might \\\n+                                         not be your desired behavior\",\n+                                        \"clone().\".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n                                 }\n                             }\n                         }"}]}