{"sha": "e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjQzYjcyZWIyNTk2ZjM2MDAwNGY2Y2RmOWNkZGU0YjllNzg5ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T22:02:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T22:02:41Z"}, "message": "Auto merge of #66189 - Centril:rollup-3bsf45s, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #63793 (Have tidy ensure that we document all `unsafe` blocks in libcore)\n - #64696 ([rustdoc] add sub settings)\n - #65916 (syntax: move stuff around)\n - #66087 (Update some build-pass ui tests to use check-pass where applicable)\n - #66182 (invalid_value lint: fix help text)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4e437fd2ceb9b0c236f649563c15e016816853ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e437fd2ceb9b0c236f649563c15e016816853ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "html_url": "https://github.com/rust-lang/rust/commit/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f8aadd746ebc929a752e5ffb133936ee75c52f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f8aadd746ebc929a752e5ffb133936ee75c52f", "html_url": "https://github.com/rust-lang/rust/commit/50f8aadd746ebc929a752e5ffb133936ee75c52f"}, {"sha": "333899a736cc5a4c8cb5cd6585fea7395c9b160c", "url": "https://api.github.com/repos/rust-lang/rust/commits/333899a736cc5a4c8cb5cd6585fea7395c9b160c", "html_url": "https://github.com/rust-lang/rust/commit/333899a736cc5a4c8cb5cd6585fea7395c9b160c"}], "stats": {"total": 1417, "additions": 837, "deletions": 580}, "files": [{"sha": "1b06baeb711c2293b863c390e62d3298afc0ee8d", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,7 @@\n //! Memory allocation APIs\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n use crate::cmp;"}, {"sha": "39a5dd7263ccfcbdcb8ad9fdda0446a649ea5d03", "filename": "src/libcore/any.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -182,6 +182,7 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n+            // SAFETY: just checked whether we are pointing to the correct type\n             unsafe {\n                 Some(&*(self as *const dyn Any as *const T))\n             }\n@@ -217,6 +218,7 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n+            // SAFETY: just checked whether we are pointing to the correct type\n             unsafe {\n                 Some(&mut *(self as *mut dyn Any as *mut T))\n             }\n@@ -424,7 +426,11 @@ impl TypeId {\n     #[rustc_const_unstable(feature=\"const_type_id\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId {\n+            #[cfg(bootstrap)]\n+            // SAFETY: going away soon\n             t: unsafe { intrinsics::type_id::<T>() },\n+            #[cfg(not(bootstrap))]\n+            t: intrinsics::type_id::<T>(),\n         }\n     }\n }"}, {"sha": "307e9b90ee2c0cfe1f62e6f875867796453534ea", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -51,7 +51,7 @@ where\n     /// iterator (either via `IntoIterator` for arrays or via another way).\n     #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n     pub fn new(array: [T; N]) -> Self {\n-        // The transmute here is actually safe. The docs of `MaybeUninit`\n+        // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`\n         // promise:\n         //\n         // > `MaybeUninit<T>` is guaranteed to have the same size and alignment\n@@ -84,10 +84,10 @@ where\n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n     fn as_slice(&self) -> &[T] {\n-        // This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n+        let slice = &self.data[self.alive.clone()];\n+        // SAFETY: This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n         // the size and alignment of `T`. Furthermore, we know that all\n         // elements within `alive` are properly initialized.\n-        let slice = &self.data[self.alive.clone()];\n         unsafe {\n             mem::transmute::<&[MaybeUninit<T>], &[T]>(slice)\n         }\n@@ -117,7 +117,8 @@ where\n         let idx = self.alive.start;\n         self.alive.start += 1;\n \n-        // Read the element from the array. This is safe: `idx` is an index\n+        // Read the element from the array.\n+        // SAFETY: This is safe: `idx` is an index\n         // into the \"alive\" region of the array. Reading this element means\n         // that `data[idx]` is regarded as dead now (i.e. do not touch). As\n         // `idx` was the start of the alive-zone, the alive zone is now\n@@ -163,7 +164,8 @@ where\n         // + 1]`.\n         self.alive.end -= 1;\n \n-        // Read the element from the array. This is safe: `alive.end` is an\n+        // Read the element from the array.\n+        // SAFETY: This is safe: `alive.end` is an\n         // index into the \"alive\" region of the array. Compare the previous\n         // comment that states that the alive region is\n         // `data[alive.start..alive.end + 1]`. Reading this element means that\n@@ -226,6 +228,7 @@ where\n     [T; N]: LengthAtMost32,\n {\n     fn clone(&self) -> Self {\n+        // SAFETY: each point of unsafety is documented inside the unsafe block\n         unsafe {\n             // This creates a new uninitialized array. Note that the `assume_init`\n             // refers to the array, not the individual elements. And it is Ok if"}, {"sha": "74a7d062d3f4afe37dede82858bdd864c05671da", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -156,6 +156,7 @@ where\n     fn try_from(slice: &[T]) -> Result<&[T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_ptr() as *const [T; N];\n+            // SAFETY: ok because we just checked that the length fits\n             unsafe { Ok(&*ptr) }\n         } else {\n             Err(TryFromSliceError(()))\n@@ -173,6 +174,7 @@ where\n     fn try_from(slice: &mut [T]) -> Result<&mut [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_mut_ptr() as *mut [T; N];\n+            // SAFETY: ok because we just checked that the length fits\n             unsafe { Ok(&mut *ptr) }\n         } else {\n             Err(TryFromSliceError(()))"}, {"sha": "9b588525bd6982775644f7035e3641141388ebe6", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -135,6 +135,7 @@ impl FusedIterator for EscapeDefault {}\n #[stable(feature = \"ascii_escape_display\", since = \"1.39.0\")]\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // SAFETY: ok because `escape_default` created only valid utf-8 data\n         f.write_str(unsafe { from_utf8_unchecked(&self.data[self.range.clone()]) })\n     }\n }"}, {"sha": "e921dd1ba0636bec010bacdd41ed3cece7f457ec", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -118,6 +118,7 @@ benches! {\n     }\n \n     fn case07_fake_simd_u32(bytes: &mut [u8]) {\n+        // SAFETY: transmuting a sequence of `u8` to `u32` is always fine\n         let (before, aligned, after) = unsafe {\n             bytes.align_to_mut::<u32>()\n         };\n@@ -142,6 +143,7 @@ benches! {\n     }\n \n     fn case08_fake_simd_u64(bytes: &mut [u8]) {\n+        // SAFETY: transmuting a sequence of `u8` to `u64` is always fine\n         let (before, aligned, after) = unsafe {\n             bytes.align_to_mut::<u64>()\n         };"}, {"sha": "87d8e7aff058dc284c4a4da4ae22e2d858262047", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -187,6 +187,8 @@\n //! ```\n //!\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cmp::Ordering;"}, {"sha": "28f520744956135539159da9449d148c0833d0b6", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -224,6 +224,7 @@ impl TryFrom<u32> for char {\n         if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n             Err(CharTryFromError(()))\n         } else {\n+            // SAFETY: checked that it's a legal unicode value\n             Ok(unsafe { from_u32_unchecked(i) })\n         }\n     }"}, {"sha": "ae09251c776de4e9d2b352054b6aec9b255b5773", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -87,7 +87,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n         };\n \n         if u < 0xD800 || 0xDFFF < u {\n-            // not a surrogate\n+            // SAFETY: not a surrogate\n             Some(Ok(unsafe { from_u32_unchecked(u as u32) }))\n         } else if u >= 0xDC00 {\n             // a trailing surrogate\n@@ -107,6 +107,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n \n             // all ok, so lets decode it.\n             let c = (((u - 0xD800) as u32) << 10 | (u2 - 0xDC00) as u32) + 0x1_0000;\n+            // SAFETY: we checked that it's a legal unicode value\n             Some(Ok(unsafe { from_u32_unchecked(c) }))\n         }\n     }"}, {"sha": "c048bab287dd2aa0408f639689ce19fb4622f105", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -438,6 +438,7 @@ impl char {\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n         let code = self as u32;\n+        // SAFETY: each arm checks the size of the slice and only uses `get_unchecked` unsafe ops\n         unsafe {\n             let len = if code < MAX_ONE_B && !dst.is_empty() {\n                 *dst.get_unchecked_mut(0) = code as u8;\n@@ -507,6 +508,7 @@ impl char {\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n         let mut code = self as u32;\n+        // SAFETY: each arm checks whether there are enough bits to write into\n         unsafe {\n             if (code & 0xFFFF) == code && !dst.is_empty() {\n                 // The BMP falls through (assuming non-surrogate, as it should)"}, {"sha": "499dd0facd38c6ba47948122a1ddc3313b29585c", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -315,6 +315,7 @@ impl<'f> Clone for VaListImpl<'f> {\n     #[inline]\n     fn clone(&self) -> Self {\n         let mut dest = crate::mem::MaybeUninit::uninit();\n+        // SAFETY: we write to the `MaybeUninit`, thus it is initialized and `assume_init` is legal\n         unsafe {\n             va_copy(dest.as_mut_ptr(), self);\n             dest.assume_init()"}, {"sha": "b52b56b1bdbc28f7cb0d5d5dfcbbe67e0108d668", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,6 +2,8 @@ use crate::fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n \n+// ignore-tidy-undocumented-unsafe\n+\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]"}, {"sha": "5a039144f667fe7ec20cabacfa4cd1f8cf1afca3", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,7 @@\n //! Utilities for formatting and printing strings.\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};"}, {"sha": "3c7aefc090f8ede41a3478f17f17b675912ffa3a", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,7 @@\n //! Integer and floating-point number formatting\n \n+// ignore-tidy-undocumented-unsafe\n+\n \n use crate::fmt;\n use crate::ops::{Div, Rem, Sub};"}, {"sha": "0082363692df67572c8c9e86d806e1d2e7a71a0d", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -79,6 +79,8 @@\n //! }\n //! ```\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;"}, {"sha": "194d9e6e2f8ad498da7873b60a7a0ec90cab0e0f", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,7 @@\n //! An implementation of SipHash.\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![allow(deprecated)] // the types in this module are deprecated\n \n use crate::marker::PhantomData;"}, {"sha": "f68a3e5a76fd74b0e5324444bb76165387847dbc", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,6 +2,8 @@\n \n //! Hints to compiler that affects how code should be emitted or optimized.\n \n+// ignore-tidy-undocumented-unsafe\n+\n use crate::intrinsics;\n \n /// Informs the compiler that this point in the code is not reachable, enabling"}, {"sha": "39d571006e66a154fc7a6dad0a69bd6f27e5b2a3", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -517,8 +517,18 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n         // overflow handling\n         loop {\n             let mul = n.checked_mul(step);\n-            if unsafe { intrinsics::likely(mul.is_some()) } {\n-                return self.iter.nth(mul.unwrap() - 1);\n+            #[cfg(bootstrap)]\n+            {\n+                // SAFETY: going away soon\n+                if unsafe { intrinsics::likely(mul.is_some()) } {\n+                    return self.iter.nth(mul.unwrap() - 1);\n+                }\n+            }\n+            #[cfg(not(bootstrap))]\n+            {\n+                if intrinsics::likely(mul.is_some()) {\n+                    return self.iter.nth(mul.unwrap() - 1);\n+                }\n             }\n             let div_n = usize::MAX / n;\n             let div_step = usize::MAX / step;"}, {"sha": "14d9d5499b88033010c7d8944ee83ff22911d672", "filename": "src/libcore/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fzip.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-undocumented-unsafe\n+\n use crate::cmp;\n \n use super::super::{Iterator, DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen};"}, {"sha": "4b3dc1c83c41dab3ecea4afeb4778810ac0ceec4", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,6 +1,8 @@\n use crate::intrinsics;\n use crate::mem::ManuallyDrop;\n \n+// ignore-tidy-undocumented-unsafe\n+\n /// A wrapper type to construct uninitialized instances of `T`.\n ///\n /// # Initialization invariant"}, {"sha": "26909be9496645458c37519a3817360d3c2d7f2e", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -93,6 +93,8 @@ pub fn forget<T>(t: T) {\n #[inline]\n #[unstable(feature = \"forget_unsized\", issue = \"0\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n+    // SAFETY: the forget intrinsic could be safe, but there's no point in making it safe since\n+    // we'll be implementing this function soon via `ManuallyDrop`\n     unsafe { intrinsics::forget(t) }\n }\n \n@@ -266,7 +268,11 @@ pub const fn size_of<T>() -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n+    #[cfg(bootstrap)]\n+    // SAFETY: going away soon\n     unsafe { intrinsics::size_of_val(val) }\n+    #[cfg(not(bootstrap))]\n+    intrinsics::size_of_val(val)\n }\n \n /// Returns the [ABI]-required minimum alignment of a type.\n@@ -310,7 +316,11 @@ pub fn min_align_of<T>() -> usize {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n+    #[cfg(bootstrap)]\n+    // SAFETY: going away soon\n     unsafe { intrinsics::min_align_of_val(val) }\n+    #[cfg(not(bootstrap))]\n+    intrinsics::min_align_of_val(val)\n }\n \n /// Returns the [ABI]-required minimum alignment of a type.\n@@ -350,8 +360,9 @@ pub const fn align_of<T>() -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n-    unsafe { intrinsics::min_align_of_val(val) }\n+    min_align_of_val(val)\n }\n \n /// Returns `true` if dropping values of type `T` matters.\n@@ -508,6 +519,8 @@ pub unsafe fn uninitialized<T>() -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n+    // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n+    // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n         ptr::swap_nonoverlapping_one(x, y);\n     }\n@@ -822,7 +835,11 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n+    #[cfg(bootstrap)]\n+    // SAFETY: going away soon\n     unsafe {\n         Discriminant(intrinsics::discriminant_value(v), PhantomData)\n     }\n+    #[cfg(not(bootstrap))]\n+    Discriminant(intrinsics::discriminant_value(v), PhantomData)\n }"}, {"sha": "641463026261d9525264f2c3324473b74ad53d30", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -58,6 +58,8 @@ mod fpu_precision {\n     pub struct FPUControlWord(u16);\n \n     fn set_cw(cw: u16) {\n+        // SAFETY: the `fldcw` instruction has been audited to be able to work correctly with\n+        // any `u16`\n         unsafe { asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n     }\n \n@@ -74,6 +76,8 @@ mod fpu_precision {\n \n         // Get the original value of the control word to restore it later, when the\n         // `FPUControlWord` structure is dropped\n+        // SAFETY: the `fnstcw` instruction has been audited to be able to work correctly with\n+        // any `u16`\n         unsafe { asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n \n         // Set the control word to the desired precision. This is achieved by masking away the old"}, {"sha": "7662bba6b5e139deaf01f225fce4a2eb5d8b6181", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -414,6 +414,7 @@ impl f32 {\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u32 {\n+        // SAFETY: `u32` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n \n@@ -456,6 +457,7 @@ impl f32 {\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn from_bits(v: u32) -> Self {\n+        // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n     }"}, {"sha": "4a2a35dfb099928ef79a262b8e3b1f779eea845e", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -427,6 +427,7 @@ impl f64 {\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u64 {\n+        // SAFETY: `u64` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n \n@@ -469,6 +470,7 @@ impl f64 {\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn from_bits(v: u64) -> Self {\n+        // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n     }"}, {"sha": "4b9e82c7cfee9abd16cc4f0a99d8c1ad2187ec28", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -71,6 +71,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n+                        // SAFETY: we just checked that there's no `0`\n                         Some(unsafe { $Ty(n) })\n                     } else {\n                         None\n@@ -703,6 +704,7 @@ $EndFeature, \"\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n+                    // SAFETY: div by zero and by INT_MIN have been checked above\n                     Some(unsafe { intrinsics::unchecked_div(self, rhs) })\n                 }\n             }\n@@ -759,6 +761,7 @@ $EndFeature, \"\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n+                    // SAFETY: div by zero and by INT_MIN have been checked above\n                     Some(unsafe { intrinsics::unchecked_rem(self, rhs) })\n                 }\n             }\n@@ -1329,6 +1332,8 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n+                // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n+                // out of bounds\n                 unsafe {\n                     intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n@@ -1358,6 +1363,8 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n+                // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n+                // out of bounds\n                 unsafe {\n                     intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n@@ -2113,6 +2120,8 @@ assert_eq!(\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                // SAFETY: integers are plain old datatypes so we can always transmute them to\n+                // arrays of bytes\n                 unsafe { mem::transmute(self) }\n             }\n         }\n@@ -2221,6 +2230,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                // SAFETY: integers are plain old datatypes so we can always transmute to them\n                 unsafe { mem::transmute(bytes) }\n             }\n         }\n@@ -2748,6 +2758,8 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n             pub fn checked_div(self, rhs: Self) -> Option<Self> {\n                 match rhs {\n                     0 => None,\n+                    // SAFETY: div by zero has been checked above and unsigned types have no other\n+                    // failure modes for division\n                     rhs => Some(unsafe { intrinsics::unchecked_div(self, rhs) }),\n                 }\n             }\n@@ -2799,6 +2811,8 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n                 if rhs == 0 {\n                     None\n                 } else {\n+                    // SAFETY: div by zero has been checked above and unsigned types have no other\n+                    // failure modes for division\n                     Some(unsafe { intrinsics::unchecked_rem(self, rhs) })\n                 }\n             }\n@@ -3248,6 +3262,8 @@ assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n+                // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n+                // out of bounds\n                 unsafe {\n                     intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n@@ -3279,6 +3295,8 @@ assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n+                // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n+                // out of bounds\n                 unsafe {\n                     intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n@@ -3775,11 +3793,11 @@ assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n         fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n-            // Because `p > 0`, it cannot consist entirely of leading zeros.\n+            let p = self - 1;\n+            // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.\n             // That means the shift is always in-bounds, and some processors\n             // (such as intel pre-haswell) have more efficient ctlz\n             // intrinsics when the argument is non-zero.\n-            let p = self - 1;\n             let z = unsafe { intrinsics::ctlz_nonzero(p) };\n             <$SelfT>::max_value() >> z\n         }\n@@ -3925,6 +3943,8 @@ assert_eq!(\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                // SAFETY: integers are plain old datatypes so we can always transmute them to\n+                // arrays of bytes\n                 unsafe { mem::transmute(self) }\n             }\n         }\n@@ -4033,6 +4053,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                // SAFETY: integers are plain old datatypes so we can always transmute to them\n                 unsafe { mem::transmute(bytes) }\n             }\n         }"}, {"sha": "958f31c0fd22a824c39252b106906945c6288056", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -133,6 +133,8 @@\n //! [`Box<T>`]: ../../std/boxed/struct.Box.html\n //! [`i32`]: ../../std/primitive.i32.html\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};"}, {"sha": "b88dc336097f33ce5739aac3d5811b90b3264ba3", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -20,6 +20,8 @@\n //! one function. Currently, the actual symbol is declared in the standard\n //! library, but the location of this may change over time.\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![allow(dead_code, missing_docs)]\n #![unstable(feature = \"core_panic\",\n             reason = \"internal details of the implementation of the `panic!` \\"}, {"sha": "1219fd09a9dfafda837a6fd27a1481cbc2070b74", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -552,6 +552,7 @@ impl<P: Deref> Pin<P> {\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_ref(&self) -> Pin<&P::Target> {\n+        // SAFETY: see documentation on this function\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n     }\n \n@@ -610,6 +611,7 @@ impl<P: DerefMut> Pin<P> {\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_mut(&mut self) -> Pin<&mut P::Target> {\n+        // SAFETY: see documentation on this function\n         unsafe { Pin::new_unchecked(&mut *self.pointer) }\n     }\n "}, {"sha": "5a75730cf2bd4e14e43834e13835ba8ffda8f647", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -65,6 +65,8 @@\n //! [`write_volatile`]: ./fn.write_volatile.html\n //! [`NonNull::dangling`]: ./struct.NonNull.html#method.dangling\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::intrinsics;"}, {"sha": "7599991f0f15a78a49dd66c5bfc521cebdfc0d22", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -7,6 +7,8 @@ use crate::mem;\n use crate::ptr::Unique;\n use crate::cmp::Ordering;\n \n+// ignore-tidy-undocumented-unsafe\n+\n /// `*mut T` but non-zero and covariant.\n ///\n /// This is often the correct thing to use when building data structures using"}, {"sha": "11a3aed1ab41b945f51be27de8498be21d2c055d", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -5,6 +5,8 @@ use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n use crate::ptr::NonNull;\n \n+// ignore-tidy-undocumented-unsafe\n+\n /// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. Useful for building abstractions like\n /// `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`."}, {"sha": "2a2169dd348c211ec14edac3e33e5f5c886ac54e", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,6 +1,8 @@\n // Original implementation taken from rust-memchr.\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n+// ignore-tidy-undocumented-unsafe\n+\n use crate::cmp;\n use crate::mem;\n "}, {"sha": "c8fe9f98613150f2bf31d03e25b5d97d3d575e5d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-filelength\n+// ignore-tidy-undocumented-unsafe\n \n //! Slice management and manipulation.\n //!"}, {"sha": "a719a51b61605b2c194c3894d6309c8056ba151b", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -6,6 +6,8 @@\n //! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n //! stable sorting implementation.\n \n+// ignore-tidy-undocumented-unsafe\n+\n use crate::cmp;\n use crate::mem::{self, MaybeUninit};\n use crate::ptr;"}, {"sha": "762de0489a9756e36e129cac371e370e0a786b21", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -3,6 +3,8 @@ use crate::str as core_str;\n use crate::fmt::{self, Write};\n use crate::mem;\n \n+// ignore-tidy-undocumented-unsafe\n+\n /// Lossy UTF-8 string.\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n pub struct Utf8Lossy {"}, {"sha": "25b7eec5b33432ab5cb5689e0cf48d202d4e8999", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-filelength\n+// ignore-tidy-undocumented-unsafe\n \n //! String manipulation.\n //!"}, {"sha": "a494274118a74171dfbf50da47664bcb2ff3628e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -3,6 +3,8 @@\n //! For more details, see the traits [`Pattern`], [`Searcher`],\n //! [`ReverseSearcher`], and [`DoubleEndedSearcher`].\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![unstable(feature = \"pattern\",\n             reason = \"API not fully fleshed out and ready to be stabilized\",\n             issue = \"27721\")]"}, {"sha": "d311cb16b64d37250f66d9bbd56b2a83a3dd87db", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -112,6 +112,8 @@\n //! println!(\"live threads: {}\", old_thread_count + 1);\n //! ```\n \n+// ignore-tidy-undocumented-unsafe\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(dead_code))]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(unused_imports))]"}, {"sha": "a35897e9bc1ac4899bc9263fb432229549d52df1", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -85,6 +85,8 @@ fn ldexp_f64(a: f64, b: i32) -> f64 {\n     extern {\n         fn ldexp(x: f64, n: i32) -> f64;\n     }\n+    // SAFETY: assuming a correct `ldexp` has been supplied, the given arguments cannot possibly\n+    // cause undefined behavior\n     unsafe { ldexp(a, b) }\n }\n "}, {"sha": "57fc1a7b76075f35f283f761fc96c5eb6d9ba010", "filename": "src/libcore/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -920,7 +920,7 @@ impl fmt::Debug for Duration {\n             if end == 0 {\n                 write!(f, \"{}\", integer_part)\n             } else {\n-                // We are only writing ASCII digits into the buffer and it was\n+                // SAFETY: We are only writing ASCII digits into the buffer and it was\n                 // initialized with '0's, so it contains valid UTF8.\n                 let s = unsafe {\n                     crate::str::from_utf8_unchecked(&buf[..end])"}, {"sha": "87ad4ace592386126c576547737e6f1ccbecc30b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -66,7 +66,7 @@ use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::print::pprust;\n-use syntax::parse::token::{self, Nonterminal, Token};\n+use syntax::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::sess::ParseSess;\n use syntax::source_map::{respan, ExpnData, ExpnKind, DesugaringKind, Spanned};"}, {"sha": "57c1421bde6cd23ccb7e5a1f9c1fcc3af69d4d55", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefIndex;\n use syntax::ast::*;\n use syntax::visit;\n use syntax::symbol::{kw, sym};\n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax_pos::hygiene::ExpnId;\n use syntax_pos::Span;\n "}, {"sha": "c401bd17dd4172b2fbb6057958f841891aafe21d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -8,9 +8,9 @@ use std::mem;\n \n use syntax::ast;\n use syntax::feature_gate;\n-use syntax::parse::token;\n-use syntax::symbol::SymbolStr;\n+use syntax::token;\n use syntax::tokenstream;\n+use syntax_pos::symbol::SymbolStr;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};"}, {"sha": "b3ef3217ec6a091a19a67b82ffe0e773a0111c78", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -76,7 +76,10 @@ pub fn encode_with_shorthand<E, T, M>(encoder: &mut E,\n \n     // The shorthand encoding uses the same usize as the\n     // discriminant, with an offset so they can't conflict.\n+    #[cfg(bootstrap)]\n     let discriminant = unsafe { intrinsics::discriminant_value(variant) };\n+    #[cfg(not(bootstrap))]\n+    let discriminant = intrinsics::discriminant_value(variant);\n     assert!(discriminant < SHORTHAND_OFFSET as u64);\n     let shorthand = start + SHORTHAND_OFFSET;\n "}, {"sha": "611b891d99abf5b0ceb941e917b60ca8db34505d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -42,6 +42,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use errors::PResult;\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n@@ -64,7 +65,7 @@ use std::time::Instant;\n use syntax::ast;\n use syntax::source_map::FileLoader;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::parse::{self, PResult};\n+use syntax::parse;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, FileName};\n "}, {"sha": "fb5cccf61a7a9877719138bdacedd12d061e834c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -15,7 +15,8 @@ use Level::*;\n \n use emitter::{Emitter, EmitterWriter, is_case_difference};\n use registry::Registry;\n-\n+#[cfg(target_arch = \"x86_64\")]\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -48,6 +49,13 @@ use syntax_pos::{\n     SpanSnippetError,\n };\n \n+pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n+\n+// `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n+// (See also the comment on `DiagnosticBuilderInner`.)\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PResult<'_, bool>, 16);\n+\n /// Indicates the confidence in the correctness of a suggestion.\n ///\n /// All suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion"}, {"sha": "034e861b2123cd9b70c990e8d96c8c36e4d675e4", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -16,7 +16,7 @@ use std::result;\n use std::sync::{Arc, Mutex};\n use syntax::{self, parse};\n use syntax::ast::{self, MetaItemKind};\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::source_map::{FileName, FileLoader, SourceMap};\n use syntax::sess::ParseSess;\n use syntax_pos::edition;"}, {"sha": "ce34caee6fab3f385078dff5bd55cf75ee800ea4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -22,6 +22,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::filename_for_metadata;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n+use rustc_errors::PResult;\n use rustc_incremental;\n use rustc_metadata::cstore;\n use rustc_mir as mir;\n@@ -36,7 +37,7 @@ use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax_expand::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n-use syntax::parse::{self, PResult};\n+use syntax::parse;\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n use syntax_pos::FileName;"}, {"sha": "c6fd1256a8e6491a4dd8733b760de52430602367", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2052,7 +2052,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                 );\n                 err.span_label(expr.span,\n                     \"this code causes undefined behavior when executed\");\n-                err.span_label(expr.span, \"help: use `MaybeUninit<T>` instead\");\n+                err.span_label(expr.span, \"help: use `MaybeUninit<T>` instead, \\\n+                    and only call `assume_init` after initialization is done\");\n                 if let Some(span) = span {\n                     err.span_note(span, &msg);\n                 } else {"}, {"sha": "4239518b879e3b5a247fcdd6e2381f598d472941", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -33,7 +33,7 @@ use syntax::attr;\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n use syntax::feature_gate::is_builtin_attr;\n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax::print::pprust;\n use syntax::{span_err, struct_span_err};\n use syntax::source_map::{respan, Spanned};"}, {"sha": "5c5fbcc07de4c9db39ca1c0c651f4e55ee5d5292", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -24,7 +24,7 @@ use std::path::Path;\n use std::env;\n \n use syntax::ast::{self, Attribute, NodeId, PatKind};\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{\n     bounds_to_string,"}, {"sha": "a2f8837c581347ec05a859f6e472978932cd50ec", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -29,7 +29,7 @@ use std::path::{Path, PathBuf};\n \n use syntax::ast::{self, Attribute, DUMMY_NODE_ID, NodeId, PatKind};\n use syntax::source_map::Spanned;\n-use syntax::parse::lexer::comments::strip_doc_comment_decoration;\n+use syntax::util::comments::strip_doc_comment_decoration;\n use syntax::print::pprust;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{param_to_string, ty_to_string};"}, {"sha": "4d0780cf94df002ed4eeb2ddc8e0d6ca0005db7a", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -3,7 +3,7 @@ use rustc::session::Session;\n use crate::generated_code;\n \n use syntax::parse::lexer::{self, StringReader};\n-use syntax::parse::token::{self, TokenKind};\n+use syntax::token::{self, TokenKind};\n use syntax_pos::*;\n \n #[derive(Clone)]"}, {"sha": "693f6f05fab2847914218ca76fb862faaa7ab824", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -67,11 +67,13 @@ fn equate_intrinsic_type<'tcx>(\n pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" | \"caller_location\" |\n+        \"size_of_val\" | \"min_align_of_val\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n         \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\" |\n+        \"discriminant_value\" | \"type_id\" | \"likely\" | \"unlikely\" |\n         \"minnumf32\" | \"minnumf64\" | \"maxnumf32\" | \"maxnumf64\" | \"type_name\"\n         => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,"}, {"sha": "f6cac8ca48d5c0d5fcc31e4d0381917332811a48", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -28,7 +28,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, Attribute, AttrStyle, AttrKind, Ident};\n use syntax::attr;\n-use syntax::parse::lexer::comments;\n+use syntax::util::comments;\n use syntax::source_map::DUMMY_SP;\n use syntax_pos::symbol::{Symbol, kw, sym};\n use syntax_pos::hygiene::MacroKind;"}, {"sha": "4bd72f7e61ccc581c6739b7ed3ea3dbd0a403a42", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -13,7 +13,7 @@ use std::io::prelude::*;\n \n use syntax::source_map::SourceMap;\n use syntax::parse::lexer;\n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n use syntax_pos::{Span, FileName};"}, {"sha": "9a87bcc10db8e1b8fc9240b32b3076ad27d39914", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 79, "deletions": 20, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1230,36 +1230,95 @@ impl AllTypes {\n     }\n }\n \n+#[derive(Debug)]\n+enum Setting {\n+    Section {\n+        description: &'static str,\n+        sub_settings: Vec<Setting>,\n+    },\n+    Entry {\n+        js_data_name: &'static str,\n+        description: &'static str,\n+        default_value: bool,\n+    }\n+}\n+\n+impl Setting {\n+    fn display(&self) -> String {\n+        match *self {\n+            Setting::Section { ref description, ref sub_settings } => {\n+                format!(\n+                    \"<div class='setting-line'>\\\n+                        <div class='title'>{}</div>\\\n+                        <div class='sub-settings'>{}</div>\n+                    </div>\",\n+                    description,\n+                    sub_settings.iter().map(|s| s.display()).collect::<String>()\n+                )\n+            }\n+            Setting::Entry { ref js_data_name, ref description, ref default_value } => {\n+                format!(\n+                    \"<div class='setting-line'>\\\n+                        <label class='toggle'>\\\n+                        <input type='checkbox' id='{}' {}>\\\n+                        <span class='slider'></span>\\\n+                        </label>\\\n+                        <div>{}</div>\\\n+                    </div>\",\n+                    js_data_name,\n+                    if *default_value { \" checked\" } else { \"\" },\n+                    description,\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+impl From<(&'static str, &'static str, bool)> for Setting {\n+    fn from(values: (&'static str, &'static str, bool)) -> Setting {\n+        Setting::Entry {\n+            js_data_name: values.0,\n+            description: values.1,\n+            default_value: values.2,\n+        }\n+    }\n+}\n+\n+impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n+    fn from(values: (&'static str, Vec<T>)) -> Setting {\n+        Setting::Section {\n+            description: values.0,\n+            sub_settings: values.1.into_iter().map(|v| v.into()).collect::<Vec<_>>(),\n+        }\n+    }\n+}\n+\n fn settings(root_path: &str, suffix: &str) -> String {\n     // (id, explanation, default value)\n-    let settings = [\n-        (\"item-declarations\", \"Auto-hide item declarations.\", true),\n-        (\"item-attributes\", \"Auto-hide item attributes.\", true),\n-        (\"trait-implementations\", \"Auto-hide trait implementations documentation\",\n-            true),\n-        (\"method-docs\", \"Auto-hide item methods' documentation\", false),\n+    let settings: &[Setting] = &[\n+        (\"Auto-hide item declarations\", vec![\n+            (\"auto-hide-struct\", \"Auto-hide structs declaration\", true),\n+            (\"auto-hide-enum\", \"Auto-hide enums declaration\", false),\n+            (\"auto-hide-union\", \"Auto-hide unions declaration\", true),\n+            (\"auto-hide-trait\", \"Auto-hide traits declaration\", true),\n+            (\"auto-hide-macro\", \"Auto-hide macros declaration\", false),\n+        ]).into(),\n+        (\"auto-hide-attributes\", \"Auto-hide item attributes.\", true).into(),\n+        (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n+        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementations documentation\",\n+            true).into(),\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\",\n-            false),\n-        (\"line-numbers\", \"Show line numbers on code examples\", false),\n-        (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false),\n+            false).into(),\n+        (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n+        (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false).into(),\n     ];\n     format!(\n \"<h1 class='fqn'>\\\n     <span class='in-band'>Rustdoc settings</span>\\\n </h1>\\\n <div class='settings'>{}</div>\\\n <script src='{}settings{}.js'></script>\",\n-            settings.iter()\n-                        .map(|(id, text, enabled)| {\n-                            format!(\"<div class='setting-line'>\\\n-                                            <label class='toggle'>\\\n-                                            <input type='checkbox' id='{}' {}>\\\n-                                            <span class='slider'></span>\\\n-                                            </label>\\\n-                                            <div>{}</div>\\\n-                                        </div>\", id, if *enabled { \" checked\" } else { \"\" }, text)\n-                        })\n-                        .collect::<String>(),\n+            settings.iter().map(|s| s.display()).collect::<String>(),\n             root_path,\n             suffix)\n }"}, {"sha": "87eb36aba13709e45de2a42818ec01a8bf756dd1", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2118,7 +2118,7 @@ function getSearchElement() {\n     function autoCollapse(pageId, collapse) {\n         if (collapse) {\n             toggleAllDocs(pageId, true);\n-        } else if (getCurrentValue(\"rustdoc-trait-implementations\") !== \"false\") {\n+        } else if (getCurrentValue(\"rustdoc-auto-hide-trait-implementations\") !== \"false\") {\n             var impl_list = document.getElementById(\"implementations-list\");\n \n             if (impl_list !== null) {\n@@ -2156,7 +2156,7 @@ function getSearchElement() {\n     }\n \n     var toggle = createSimpleToggle(false);\n-    var hideMethodDocs = getCurrentValue(\"rustdoc-method-docs\") === \"true\";\n+    var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n     var pageId = getPageId();\n \n     var func = function(e) {\n@@ -2286,7 +2286,31 @@ function getSearchElement() {\n         return wrapper;\n     }\n \n-    var showItemDeclarations = getCurrentValue(\"rustdoc-item-declarations\") === \"false\";\n+    var currentType = document.getElementsByClassName(\"type-decl\")[0];\n+    var className = null;\n+    if (currentType) {\n+        currentType = currentType.getElementsByClassName(\"rust\")[0];\n+        if (currentType) {\n+            currentType.classList.forEach(function(item) {\n+                if (item !== \"main\") {\n+                    className = item;\n+                    return true;\n+                }\n+            });\n+        }\n+    }\n+    var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n+    if (showItemDeclarations === null) {\n+        if (className === \"enum\" || className === \"macro\") {\n+            showItemDeclarations = \"false\";\n+        } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n+            showItemDeclarations = \"true\";\n+        } else {\n+            // In case we found an unknown type, we just use the \"parent\" value.\n+            showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+        }\n+    }\n+    showItemDeclarations = showItemDeclarations === \"false\";\n     function buildToggleWrapper(e) {\n         if (hasClass(e, \"autohide\")) {\n             var wrap = e.previousElementSibling;\n@@ -2369,7 +2393,7 @@ function getSearchElement() {\n \n     // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n     var itemAttributesFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-item-attributes\") !== \"false\") {\n+    if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n         itemAttributesFunc = function(x) {\n             collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n         };"}, {"sha": "d03cf7fcc459eaa12fa66c0d96419ad6ccdbc768", "filename": "src/librustdoc/html/static/settings.css", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,6 @@\n .setting-line {\n \tpadding: 5px;\n+\tposition: relative;\n }\n \n .setting-line > div {\n@@ -10,6 +11,13 @@\n \tpadding-top: 2px;\n }\n \n+.setting-line > .title {\n+\tfont-size: 19px;\n+\twidth: 100%;\n+\tmax-width: none;\n+\tborder-bottom: 1px solid;\n+}\n+\n .toggle {\n \tposition: relative;\n \tdisplay: inline-block;\n@@ -59,3 +67,9 @@ input:checked + .slider:before {\n \t-ms-transform: translateX(19px);\n \ttransform: translateX(19px);\n }\n+\n+.setting-line > .sub-settings {\n+\tpadding-left: 42px;\n+\twidth: 100%;\n+\tdisplay: block;\n+}"}, {"sha": "a60d543a539369728d635d2a10814b056dc1f830", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -425,3 +425,6 @@ div.files > a:hover, div.name:hover {\n div.files > .selected {\n \tbackground-color: #333;\n }\n+.setting-line > .title {\n+\tborder-bottom-color: #ddd;\n+}"}, {"sha": "351f027b942ff1868b21ba7ab17019fd765560cf", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -419,3 +419,6 @@ div.files > a:hover, div.name:hover {\n div.files > .selected {\n \tbackground-color: #fff;\n }\n+.setting-line > .title {\n+\tborder-bottom-color: #D5D5D5;\n+}"}, {"sha": "4603e77b0fda83647c18ca1b96b0d093b164b9e3", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,6 +1,6 @@\n use errors::Applicability;\n use syntax::parse::lexer::{StringReader as Lexer};\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n use syntax_pos::{InnerSpan, FileName};"}, {"sha": "18151a1586c932eefd3ec57bdbf18f42b5733e2e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -24,9 +24,9 @@ pub use crate::util::parser::ExprPrecedence;\n \n pub use syntax_pos::symbol::{Ident, Symbol as Name};\n \n-use crate::parse::token::{self, DelimToken};\n use crate::ptr::P;\n use crate::source_map::{dummy_spanned, respan, Spanned};\n+use crate::token::{self, DelimToken};\n use crate::tokenstream::TokenStream;\n \n use syntax_pos::symbol::{kw, sym, Symbol};"}, {"sha": "c639431794c500d070706f662999e1975d657b23", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -14,17 +14,17 @@ use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n-use crate::parse::lexer::comments::doc_comment_style;\n use crate::parse;\n-use crate::parse::PResult;\n-use crate::parse::token::{self, Token};\n+use crate::token::{self, Token};\n use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n+use errors::PResult;\n+\n use log::debug;\n use syntax_pos::Span;\n \n@@ -400,11 +400,11 @@ pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n     mk_attr(AttrStyle::Outer, item.path, item.kind.tokens(item.span), item.span)\n }\n \n-pub fn mk_doc_comment(comment: Symbol, span: Span) -> Attribute {\n+pub fn mk_doc_comment(style: AttrStyle, comment: Symbol, span: Span) -> Attribute {\n     Attribute {\n         kind: AttrKind::DocComment(comment),\n         id: mk_attr_id(),\n-        style: doc_comment_style(&comment.as_str()),\n+        style,\n         span,\n     }\n }"}, {"sha": "ecff89ad59bd94dbe22d08752ad2b4868ba93528", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -11,7 +11,7 @@ use crate::attr::{self, check_builtin_attribute};\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n-use crate::parse::token;\n+use crate::token;\n use crate::sess::ParseSess;\n use crate::symbol::{Symbol, sym};\n use crate::tokenstream::TokenTree;"}, {"sha": "1b17de529c415814690f0a672e595098a668cc30", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -85,7 +85,10 @@ pub mod diagnostics {\n pub mod error_codes;\n \n pub mod util {\n+    crate mod classify;\n+    pub mod comments;\n     pub mod lev_distance;\n+    crate mod literal;\n     pub mod node_count;\n     pub mod parser;\n     pub mod map_in_place;\n@@ -107,6 +110,7 @@ pub mod show_span;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n pub mod sess;\n+pub mod token;\n pub mod tokenstream;\n pub mod visit;\n "}, {"sha": "0c90652526d8078131aa3f3f06382b59cf234c52", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -9,7 +9,7 @@\n \n use crate::ast::*;\n use crate::source_map::{Spanned, respan};\n-use crate::parse::token::{self, Token};\n+use crate::token::{self, Token};\n use crate::ptr::P;\n use crate::ThinVec;\n use crate::tokenstream::*;"}, {"sha": "b1b7b08c78a3b63dddd77ce41e88c809198bde52", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,7 +1,7 @@\n-use crate::parse::token::{self, Token, TokenKind};\n+use crate::token::{self, Token, TokenKind};\n use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n-use crate::parse::unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n+use crate::util::comments;\n \n use errors::{FatalError, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span};\n@@ -16,9 +16,10 @@ use log::debug;\n #[cfg(test)]\n mod tests;\n \n-pub mod comments;\n mod tokentrees;\n mod unicode_chars;\n+mod unescape_error_reporting;\n+use unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n #[derive(Clone, Debug)]\n pub struct UnmatchedBrace {\n@@ -178,7 +179,7 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::LineComment => {\n                 let string = self.str_from(start);\n                 // comments with only more \"/\"s are not doc comments\n-                let tok = if is_doc_comment(string) {\n+                let tok = if comments::is_line_doc_comment(string) {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in doc-comment\");\n                     token::DocComment(Symbol::intern(string))\n                 } else {\n@@ -191,7 +192,7 @@ impl<'a> StringReader<'a> {\n                 let string = self.str_from(start);\n                 // block comments starting with \"/**\" or \"/*!\" are doc-comments\n                 // but comments with only \"*\"s between two \"/\"s are not\n-                let is_doc_comment = is_block_doc_comment(string);\n+                let is_doc_comment = comments::is_block_doc_comment(string);\n \n                 if !terminated {\n                     let msg = if is_doc_comment {\n@@ -642,18 +643,3 @@ impl<'a> StringReader<'a> {\n         }\n     }\n }\n-\n-fn is_doc_comment(s: &str) -> bool {\n-    let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/') ||\n-              s.starts_with(\"//!\");\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}\n-\n-fn is_block_doc_comment(s: &str) -> bool {\n-    // Prevent `/**/` from being parsed as a doc comment\n-    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*') ||\n-               s.starts_with(\"/*!\")) && s.len() >= 5;\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}"}, {"sha": "baa6fb59537e3af35a08255f1b074a901a664813", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,7 +2,8 @@ use super::*;\n \n use crate::symbol::Symbol;\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::parse::token;\n+use crate::token;\n+use crate::util::comments::is_doc_comment;\n use crate::with_default_globals;\n \n use errors::{Handler, emitter::EmitterWriter};"}, {"sha": "2b056434d4dcbface7bd2bc0e3cd7aebc7a71c0c", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,10 +4,11 @@ use syntax_pos::Span;\n use super::{StringReader, UnmatchedBrace};\n \n use crate::print::pprust::token_to_string;\n-use crate::parse::token::{self, Token};\n-use crate::parse::PResult;\n+use crate::token::{self, Token};\n use crate::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n \n+use errors::PResult;\n+\n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n         let mut tt_reader = TokenTreesReader {"}, {"sha": "5565015179c2d5949a9291f72b5b1431b38b21c0", "filename": "src/libsyntax/parse/lexer/unescape_error_reporting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funescape_error_reporting.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "previous_filename": "src/libsyntax/parse/unescape_error_reporting.rs"}, {"sha": "6eb995b61d3feeeb062f7388e61900d8e20f6f4c", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,7 +4,7 @@\n use super::StringReader;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span, symbol::kw};\n-use crate::parse::token;\n+use crate::token;\n \n #[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &["}, {"sha": "18550762017951622c4e0e63eb410b112e41ea34", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,14 +2,12 @@\n \n use crate::ast;\n use crate::parse::parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n-use crate::parse::token::Nonterminal;\n+use crate::token::{self, Nonterminal};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n-use errors::{FatalError, Level, Diagnostic, DiagnosticBuilder};\n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n+use errors::{PResult, FatalError, Level, Diagnostic};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, SourceFile, FileName};\n \n@@ -25,18 +23,6 @@ mod tests;\n #[macro_use]\n pub mod parser;\n pub mod lexer;\n-pub mod token;\n-\n-crate mod classify;\n-crate mod literal;\n-crate mod unescape_error_reporting;\n-\n-pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n-\n-// `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilderInner`.)\n-#[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PResult<'_, bool>, 16);\n \n #[derive(Clone)]\n pub struct Directory<'a> {"}, {"sha": "31f0a02a483bdaed3e65ee8804a6091e5da7af3a", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,10 +1,14 @@\n-use super::{SeqSep, PResult, Parser, TokenType, PathStyle};\n+use super::{SeqSep, Parser, TokenType, PathStyle};\n use crate::attr;\n use crate::ast;\n-use crate::parse::token::{self, Nonterminal, DelimToken};\n+use crate::util::comments;\n+use crate::token::{self, Nonterminal, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::source_map::Span;\n \n+use syntax_pos::Symbol;\n+use errors::PResult;\n+\n use log::debug;\n \n #[derive(Debug)]\n@@ -43,7 +47,7 @@ impl<'a> Parser<'a> {\n                     just_parsed_doc_comment = false;\n                 }\n                 token::DocComment(s) => {\n-                    let attr = attr::mk_doc_comment(s, self.token.span);\n+                    let attr = self.mk_doc_comment(s);\n                     if attr.style != ast::AttrStyle::Outer {\n                         let mut err = self.fatal(\"expected outer doc comment\");\n                         err.note(\"inner doc comments like this (starting with \\\n@@ -60,6 +64,11 @@ impl<'a> Parser<'a> {\n         Ok(attrs)\n     }\n \n+    fn mk_doc_comment(&self, s: Symbol) -> ast::Attribute {\n+        let style = comments::doc_comment_style(&s.as_str());\n+        attr::mk_doc_comment(style, s, self.token.span)\n+    }\n+\n     /// Matches `attribute = # ! [ meta_item ]`.\n     ///\n     /// If `permit_inner` is `true`, then a leading `!` indicates an inner\n@@ -228,7 +237,7 @@ impl<'a> Parser<'a> {\n                 }\n                 token::DocComment(s) => {\n                     // We need to get the position of this token before we bump.\n-                    let attr = attr::mk_doc_comment(s, self.token.span);\n+                    let attr = self.mk_doc_comment(s);\n                     if attr.style == ast::AttrStyle::Inner {\n                         attrs.push(attr);\n                         self.bump();"}, {"sha": "26d7f48025eda11b319146f817a5e0f86116d70e", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,18 +1,16 @@\n-use super::{\n-    BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType,\n-    SeqSep, PResult, Parser\n-};\n+use super::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType, SeqSep, Parser};\n use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::parse::token::{self, TokenKind, token_can_begin_expr};\n+use crate::token::{self, TokenKind, token_can_begin_expr};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n+\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};"}, {"sha": "800074035ce8b8744727b39b34a83459613cf810", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,24 +1,23 @@\n-use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle, BlockMode};\n+use super::{Parser, Restrictions, PrevTokenKind, TokenType, PathStyle, BlockMode};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use super::pat::{GateOr, PARAM_EXPECTED};\n use super::diagnostics::Error;\n \n-use crate::parse::literal::LitError;\n-\n use crate::ast::{\n     self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode,\n     Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind,\n     FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit,\n };\n use crate::maybe_recover_from_interpolated_ty_qpath;\n-use crate::parse::classify;\n-use crate::parse::token::{self, Token, TokenKind};\n+use crate::token::{self, Token, TokenKind};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::source_map::{self, Span};\n+use crate::util::classify;\n+use crate::util::literal::LitError;\n use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n \n-use errors::Applicability;\n+use errors::{PResult, Applicability};\n use syntax_pos::symbol::{kw, sym};\n use syntax_pos::Symbol;\n use std::mem;"}, {"sha": "ae9ecd8fe392281a6b97179916734fdf6e11873e", "filename": "src/libsyntax/parse/parser/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,11 +1,13 @@\n-use super::{Parser, PResult};\n+use super::Parser;\n \n use crate::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n-use crate::parse::token;\n+use crate::token;\n use crate::source_map::DUMMY_SP;\n \n use syntax_pos::symbol::{kw, sym};\n \n+use errors::PResult;\n+\n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     ///"}, {"sha": "3c618d75d348fdcf67bd06f21b65cb7d543fc7c0", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, PathStyle};\n+use super::{Parser, PathStyle};\n use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n@@ -17,7 +17,7 @@ use crate::ThinVec;\n \n use log::debug;\n use std::mem;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n use syntax_pos::BytePos;\n \n /// Whether the type alias or associated type is a concrete type or an opaque type."}, {"sha": "455f4172f5fba7129643de3c803854e57b4a96f4", "filename": "src/libsyntax/parse/parser/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmod.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -15,10 +15,10 @@ use crate::ast::{\n     self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n-use crate::parse::{PResult, Directory, DirectoryOwnership};\n+use crate::parse::{Directory, DirectoryOwnership};\n use crate::parse::lexer::UnmatchedBrace;\n-use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use crate::parse::token::{self, Token, TokenKind, DelimToken};\n+use crate::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use crate::token::{self, Token, TokenKind, DelimToken};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::sess::ParseSess;\n@@ -27,7 +27,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n+use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n ", "previous_filename": "src/libsyntax/parse/parser.rs"}, {"sha": "72049daaed30965fb0b72526f51afa7c4b7c7806", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,14 +1,16 @@\n-use super::{Parser, PResult};\n+use super::Parser;\n use super::item::ItemInfo;\n use super::diagnostics::Error;\n \n use crate::attr;\n use crate::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n use crate::parse::{new_sub_parser_from_file, DirectoryOwnership};\n-use crate::parse::token::{self, TokenKind};\n+use crate::token::{self, TokenKind};\n use crate::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n use crate::symbol::sym;\n \n+use errors::PResult;\n+\n use std::path::{self, Path, PathBuf};\n \n /// Information about the path to a module."}, {"sha": "f347300da716f34a7f3d6508fec5107a275bb6df", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,16 +1,16 @@\n-use super::{Parser, PResult, PathStyle};\n+use super::{Parser, PathStyle};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use crate::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n-use crate::parse::token::{self};\n+use crate::token;\n use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n use crate::ThinVec;\n use syntax_pos::symbol::{kw, sym};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{PResult, Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "9ceb3ba1eb4919a0577a3a6a3a94ad7b3fe46589", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,15 +1,15 @@\n-use super::{Parser, PResult, TokenType};\n+use super::{Parser, TokenType};\n \n use crate::{maybe_whole, ThinVec};\n use crate::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n use crate::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n-use crate::parse::token::{self, Token};\n+use crate::token::{self, Token};\n use crate::source_map::{Span, BytePos};\n use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability, pluralize};\n+use errors::{PResult, Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "30e47b7a0b24d0f98d50d0fe403e1edabdbd5f51", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PResult, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n+use super::{Parser, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n use super::expr::LhsExpr;\n use super::path::PathStyle;\n use super::pat::GateOr;\n@@ -8,13 +8,14 @@ use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n use crate::ast::{self, DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n-use crate::parse::{classify, DirectoryOwnership};\n-use crate::parse::token;\n+use crate::parse::DirectoryOwnership;\n+use crate::util::classify;\n+use crate::token;\n use crate::source_map::{respan, Span};\n use crate::symbol::{kw, sym};\n \n use std::mem;\n-use errors::Applicability;\n+use errors::{PResult, Applicability};\n \n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items."}, {"sha": "a891634e611da93659453eaa64c482e911696e4b", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,16 +1,16 @@\n-use super::{Parser, PResult, PathStyle, PrevTokenKind, TokenType};\n+use super::{Parser, PathStyle, PrevTokenKind, TokenType};\n use super::item::ParamCfg;\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n use crate::ptr::P;\n use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use crate::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n use crate::ast::{Mutability, AnonConst, Mac};\n-use crate::parse::token::{self, Token};\n+use crate::token::{self, Token};\n use crate::source_map::Span;\n use crate::symbol::{kw};\n \n-use errors::{Applicability, pluralize};\n+use errors::{PResult, Applicability, pluralize};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`."}, {"sha": "27ca2b6472f0c75240bf276893bcb23d68d357c5", "filename": "src/libsyntax/parse/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftests.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,9 +2,9 @@ use super::*;\n \n use crate::ast::{self, Name, PatKind};\n use crate::attr::first_attr_value_str_by_name;\n-use crate::parse::{ParseSess, PResult};\n-use crate::parse::new_parser_from_source_str;\n-use crate::parse::token::Token;\n+use crate::sess::ParseSess;\n+use crate::parse::{PResult, new_parser_from_source_str};\n+use crate::token::Token;\n use crate::print::pprust::item_to_string;\n use crate::ptr::P;\n use crate::source_map::FilePathMapping;"}, {"sha": "4ca4bdeb046546353afddcbfd9bff098325b733d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,14 +2,14 @@ use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use crate::ast::{SelfKind, GenericBound, TraitBoundModifier};\n use crate::ast::{Attribute, MacDelimiter, GenericArg};\n use crate::util::parser::{self, AssocOp, Fixity};\n+use crate::util::comments;\n use crate::attr;\n use crate::source_map::{self, SourceMap, Spanned};\n-use crate::parse::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n-use crate::parse::lexer::comments;\n-use crate::parse;\n+use crate::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n use crate::print::pp::{self, Breaks};\n use crate::print::pp::Breaks::{Consistent, Inconsistent};\n use crate::ptr::P;\n+use crate::util::classify;\n use crate::sess::ParseSess;\n use crate::symbol::{kw, sym};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n@@ -1659,7 +1659,7 @@ impl<'a> State<'a> {\n             ast::StmtKind::Expr(ref expr) => {\n                 self.space_if_not_bol();\n                 self.print_expr_outer_attr_style(expr, false);\n-                if parse::classify::expr_requires_semi_to_be_stmt(expr) {\n+                if classify::expr_requires_semi_to_be_stmt(expr) {\n                     self.s.word(\";\");\n                 }\n             }"}, {"sha": "ed457c3627f42e59af8248a96549b7f08cde4fcd", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,5 @@\n use crate::ast;\n-use crate::parse::{PResult, source_file_to_stream};\n+use crate::parse::source_file_to_stream;\n use crate::parse::new_parser_from_source_str;\n use crate::parse::parser::Parser;\n use crate::sess::ParseSess;\n@@ -8,7 +8,7 @@ use crate::tokenstream::TokenStream;\n use crate::with_default_globals;\n \n use errors::emitter::EmitterWriter;\n-use errors::Handler;\n+use errors::{PResult, Handler};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, Span, MultiSpan};\n "}, {"sha": "6f3da344ccf88e6cc7a5857d809dcef8a3fcda56", "filename": "src/libsyntax/token.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "previous_filename": "src/libsyntax/parse/token.rs"}, {"sha": "6e1bb85ce1ac13cda27246e7fefe0c5b25e49366", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -13,7 +13,7 @@\n //! and a borrowed `TokenStream` is sufficient to build an owned `TokenStream` without taking\n //! ownership of the original.\n \n-use crate::parse::token::{self, DelimToken, Token, TokenKind};\n+use crate::token::{self, DelimToken, Token, TokenKind};\n \n use syntax_pos::{Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "4456068875019fd347260ce8c7b4f7abc412be23", "filename": "src/libsyntax/util/classify.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fclassify.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "previous_filename": "src/libsyntax/parse/classify.rs"}, {"sha": "448b4f3b8256c0a00c773c8a710cf97e27a9f471", "filename": "src/libsyntax/util/comments.rs", "status": "renamed", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,13 +2,14 @@ pub use CommentStyle::*;\n \n use crate::ast;\n use crate::source_map::SourceMap;\n-use crate::parse::lexer::is_block_doc_comment;\n-use crate::parse::lexer::ParseSess;\n+use crate::sess::ParseSess;\n \n use syntax_pos::{BytePos, CharPos, Pos, FileName};\n \n use std::usize;\n \n+use log::debug;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -31,8 +32,23 @@ pub struct Comment {\n     pub pos: BytePos,\n }\n \n-fn is_doc_comment(s: &str) -> bool {\n-    (s.starts_with(\"///\") && super::is_doc_comment(s)) || s.starts_with(\"//!\") ||\n+crate fn is_line_doc_comment(s: &str) -> bool {\n+    let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/') ||\n+              s.starts_with(\"//!\");\n+    debug!(\"is {:?} a doc comment? {}\", s, res);\n+    res\n+}\n+\n+crate fn is_block_doc_comment(s: &str) -> bool {\n+    // Prevent `/**/` from being parsed as a doc comment\n+    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*') ||\n+               s.starts_with(\"/*!\")) && s.len() >= 5;\n+    debug!(\"is {:?} a doc comment? {}\", s, res);\n+    res\n+}\n+\n+crate fn is_doc_comment(s: &str) -> bool {\n+    (s.starts_with(\"///\") && is_line_doc_comment(s)) || s.starts_with(\"//!\") ||\n     (s.starts_with(\"/**\") && is_block_doc_comment(s)) || s.starts_with(\"/*!\")\n }\n ", "previous_filename": "src/libsyntax/parse/lexer/comments.rs"}, {"sha": "f9cd69fb50d7472c9b3044c9c5f2fc3be279cdb2", "filename": "src/libsyntax/util/comments/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments%2Ftests.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "previous_filename": "src/libsyntax/parse/lexer/comments/tests.rs"}, {"sha": "d4c9b7850c5c9256959769424b85c1e4d89078e0", "filename": "src/libsyntax/util/literal.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fliteral.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,8 +1,8 @@\n //! Code related to parsing literals.\n \n use crate::ast::{self, Lit, LitKind};\n-use crate::parse::token::{self, Token};\n use crate::symbol::{kw, sym, Symbol};\n+use crate::token::{self, Token};\n use crate::tokenstream::TokenTree;\n \n use log::debug;", "previous_filename": "src/libsyntax/parse/literal.rs"}, {"sha": "edb708d7e97b20012b54a58bacadfe862eac8605", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-use crate::parse::token::{self, Token, BinOpToken};\n+use crate::token::{self, Token, BinOpToken};\n use crate::symbol::kw;\n use crate::ast::{self, BinOpKind};\n "}, {"sha": "cfd160fd57751d01b3a4080e88730bec14066b62", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -14,7 +14,7 @@\n //! those that are created by the expansion of a macro.\n \n use crate::ast::*;\n-use crate::parse::token::Token;\n+use crate::token::Token;\n use crate::tokenstream::{TokenTree, TokenStream};\n \n use syntax_pos::Span;"}, {"sha": "47835c9265967268e339a050fc71bc996d7e066a", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -6,11 +6,11 @@ use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n use syntax::mut_visit::{self, MutVisitor};\n use syntax::parse::{self, parser, DirectoryOwnership};\n-use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ThinVec, MACRO_ARGUMENTS};\n+use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n "}, {"sha": "e91dd2aba1537f3e354a463f1ee000c126eea0dc", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -12,18 +12,18 @@ use syntax::configure;\n use syntax::config::StripUnconfigured;\n use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use syntax::mut_visit::*;\n-use syntax::parse::{DirectoryOwnership, PResult};\n-use syntax::parse::token;\n+use syntax::parse::DirectoryOwnership;\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{sym, Symbol};\n+use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::{self, Visitor};\n use syntax::util::map_in_place::MapInPlace;\n \n-use errors::{Applicability, FatalError};\n+use errors::{PResult, Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n "}, {"sha": "6964d01b719c945168e092c1f3ae54e64cdda139", "filename": "src/libsyntax_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -10,7 +10,7 @@ crate mod macro_rules;\n crate mod quoted;\n \n use syntax::ast;\n-use syntax::parse::token::{self, Token, TokenKind};\n+use syntax::token::{self, Token, TokenKind};\n use syntax::tokenstream::{DelimSpan};\n \n use syntax_pos::Span;"}, {"sha": "25754ed42177fd5ed18c94d1f8ae3d88059284cb", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -108,7 +108,7 @@ use crate::mbe::{KleeneToken, TokenTree};\n \n use syntax::ast::NodeId;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::parse::token::{DelimToken, Token, TokenKind};\n+use syntax::token::{DelimToken, Token, TokenKind};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n "}, {"sha": "80bf27e1a941e6f3e038e4b689ff87671383dcec", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -77,15 +77,15 @@ use TokenTreeOrTokenTreeSlice::*;\n use crate::mbe::{self, TokenTree};\n \n use syntax::ast::{Ident, Name};\n-use syntax::parse::{Directory, PResult};\n+use syntax::parse::Directory;\n use syntax::parse::parser::{Parser, PathStyle};\n-use syntax::parse::token::{self, DocComment, Nonterminal, Token};\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n+use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n \n-use errors::FatalError;\n+use errors::{PResult, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::Span;\n "}, {"sha": "a5fc301fbf67b59b3c951ae9c79dc07e4168340c", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -13,12 +13,11 @@ use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n use syntax::feature_gate::Features;\n use syntax::parse::parser::Parser;\n-use syntax::parse::token::TokenKind::*;\n-use syntax::parse::token::{self, NtTT, Token};\n use syntax::parse::Directory;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n+use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n \n use errors::{DiagnosticBuilder, FatalError};"}, {"sha": "dec504c0d97452830d8e3d320c13e0752a294ea0", "filename": "src/libsyntax_expand/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,10 +2,10 @@ use crate::mbe::macro_parser;\n use crate::mbe::{TokenTree, KleeneOp, KleeneToken, SequenceRepetition, Delimited};\n \n use syntax::ast;\n-use syntax::parse::token::{self, Token};\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::kw;\n+use syntax::token::{self, Token};\n use syntax::tokenstream;\n \n use syntax_pos::Span;"}, {"sha": "4092d4b97de04965a40821a9a01c4a353681e6fa", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,7 +4,7 @@ use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n use syntax::ast::{Ident, Mac};\n use syntax::mut_visit::{self, MutVisitor};\n-use syntax::parse::token::{self, NtTT, Token};\n+use syntax::token::{self, NtTT, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};"}, {"sha": "51c368bbaa6067693a13bdff17fa4e30da4a6111", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,8 +4,9 @@ use crate::proc_macro_server;\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n use syntax::errors::{Applicability, FatalError};\n-use syntax::parse::{self, token};\n+use syntax::parse;\n use syntax::symbol::sym;\n+use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n "}, {"sha": "e96b60927873bf27dfad0f5db71ba4916ca76696", "filename": "src/libsyntax_expand/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro_server.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,10 +1,11 @@\n use crate::base::ExtCtxt;\n \n use syntax::ast;\n-use syntax::parse::{self, token};\n-use syntax::parse::lexer::comments;\n+use syntax::parse;\n+use syntax::util::comments;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n+use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n \n use errors::Diagnostic;\n@@ -52,7 +53,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n {\n     fn from_internal(((tree, is_joint), sess, stack): (TreeAndJoint, &ParseSess, &mut Vec<Self>))\n                     -> Self {\n-        use syntax::parse::token::*;\n+        use syntax::token::*;\n \n         let joint = is_joint == Joint;\n         let Token { kind, span } = match tree {\n@@ -193,7 +194,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n \n impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     fn to_internal(self) -> TokenStream {\n-        use syntax::parse::token::*;\n+        use syntax::token::*;\n \n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),"}, {"sha": "539d777105d7466d0215a4ed8a7c2f4e2dfa0727", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -8,7 +8,7 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax_expand::base::{self, *};\n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::ast::AsmDialect;"}, {"sha": "a15423b7ad85a5e91e74bb5b0b0b737c9c80cc37", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,7 +2,7 @@ use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n use syntax_expand::base::*;\n-use syntax::parse::token::{self, TokenKind};\n+use syntax::token::{self, TokenKind};\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;"}, {"sha": "583236d97546df82024e372afde80d91a8543832", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -8,7 +8,7 @@ use syntax::ast;\n use syntax_expand::base::{self, *};\n use syntax::attr;\n use syntax::tokenstream::TokenStream;\n-use syntax::parse::token;\n+use syntax::token;\n use syntax_pos::Span;\n \n pub fn expand_cfg("}, {"sha": "171f2405573c016064f90a6f3479728a7e30ac62", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,7 +2,8 @@\n \n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n-use syntax::parse::{self, token};\n+use syntax::parse;\n+use syntax::token;\n use syntax::sess::ParseSess;\n use syntax_expand::panictry;\n use syntax_pos::FileName;"}, {"sha": "8a1bc56cf1ced956340405f4440afcadd8d1ddba", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast;\n use syntax_expand::base::{self, *};\n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;"}, {"sha": "e25ba7b17837190a3469d943fb8290a3862fca97", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -9,7 +9,7 @@ use errors::pluralize;\n \n use syntax::ast;\n use syntax_expand::base::{self, *};\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n use syntax::tokenstream::TokenStream;"}, {"sha": "8a8ce9a7f14b5e268e9208cdfca5226acd08aca9", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -13,7 +13,7 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax_expand::base::{self, *};\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax::tokenstream::TokenStream;"}, {"sha": "cee1b97af55b21489a5966a63111c03c1caa2368", "filename": "src/libsyntax_ext/plugin_macro_defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -4,12 +4,12 @@\n use syntax::ast::*;\n use syntax::attr;\n use syntax::edition::Edition;\n-use syntax_expand::base::{Resolver, NamedSyntaxExtension};\n-use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::source_map::respan;\n use syntax::symbol::sym;\n+use syntax::token;\n use syntax::tokenstream::*;\n+use syntax_expand::base::{Resolver, NamedSyntaxExtension};\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::hygiene::{ExpnData, ExpnKind, AstPass};\n "}, {"sha": "7e47b40714da0505e1451580db57b25e9d4f2ce1", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,10 +1,11 @@\n use syntax_expand::panictry;\n use syntax_expand::base::{self, *};\n use syntax::ast;\n-use syntax::parse::{self, token, DirectoryOwnership};\n+use syntax::parse::{self, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n+use syntax::token;\n use syntax::tokenstream::TokenStream;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n "}, {"sha": "ac864e767848fdc88465de4dc471d4ad8000fa33", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -6,17 +6,18 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate rustc_errors;\n \n+use rustc_errors::PResult;\n use syntax::ast::*;\n use syntax::attr::*;\n use syntax::ast;\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, FileName};\n use syntax::parse;\n-use syntax::parse::PResult;\n use syntax::parse::new_parser_from_source_str;\n use syntax::parse::parser::Parser;\n-use syntax::parse::token;\n+use syntax::token;\n use syntax::ptr::P;\n use syntax::parse::parser::attr::*;\n use syntax::print::pprust;"}, {"sha": "520347faa15aa8e13e8a6357e593954b0351dca7", "filename": "src/test/ui-fulldeps/auxiliary/roman-numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -15,7 +15,7 @@ extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_driver;\n \n-use syntax::parse::token::{self, Token};\n+use syntax::token::{self, Token};\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax_expand::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;"}, {"sha": "9180e1d811aa3c9349d5409e029412b51787321a", "filename": "src/test/ui/async-await/issue-61793.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -3,7 +3,7 @@\n // while those two fields were at the same offset (which is impossible).\n // That is, memory ordering of `(X, ())`, but offsets of `((), X)`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // edition:2018\n \n async fn foo<F>(_: &(), _: F) {}"}, {"sha": "e9079bfdd853b780ee22bdeb9a4e5dfb7ccc5e7c", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n #![feature(arbitrary_self_types)]"}, {"sha": "b602ef153e621fb22940e76f5b15710e978a9c67", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n use std::sync::Arc;"}, {"sha": "69bbdd0e83a5d0a1765b42680d636704c27e895a", "filename": "src/test/ui/async-await/issues/issue-60518.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n // This is a regression test to ensure that simple bindings (where replacement arguments aren't"}, {"sha": "b87ef3baa4aa71a5124690bb07b3512215245bc6", "filename": "src/test/ui/borrowck/issue-55552-ascribe-wildcard-to-structured-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // rust-lang/rust#55552: The strategy pnkfelix landed in PR #55274\n // (for ensuring that NLL respects user-provided lifetime annotations)"}, {"sha": "2e104b599bd75bd53ba60c7c2ce792a1e20ede44", "filename": "src/test/ui/closure-expected-type/issue-24421.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn test<F: Fn(&u64, &u64)>(f: F) {}\n "}, {"sha": "5abed374a6d61111202cf16ed3b94c723d0a5321", "filename": "src/test/ui/consts/issue-62045.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     assert_eq!(&mut [0; 1][..], &mut []);"}, {"sha": "4cb9bd1975a7f5a5e6741e29960158843987cf90", "filename": "src/test/ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // rust-lang/rust#56327: Some occurrences of `dyn` within a macro are\n // not instances of identifiers, and thus should *not* be caught by the"}, {"sha": "32d2d40241c8222becc670a21099cab67622f2a1", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -51,34 +51,31 @@ enum Mixed {\n }\n \n pub fn main() {\n-    unsafe {\n+    assert_eq!(discriminant_value(&CLike1::A), 0);\n+    assert_eq!(discriminant_value(&CLike1::B), 1);\n+    assert_eq!(discriminant_value(&CLike1::C), 2);\n+    assert_eq!(discriminant_value(&CLike1::D), 3);\n \n-        assert_eq!(discriminant_value(&CLike1::A), 0);\n-        assert_eq!(discriminant_value(&CLike1::B), 1);\n-        assert_eq!(discriminant_value(&CLike1::C), 2);\n-        assert_eq!(discriminant_value(&CLike1::D), 3);\n+    assert_eq!(discriminant_value(&CLike2::A), 5);\n+    assert_eq!(discriminant_value(&CLike2::B), 2);\n+    assert_eq!(discriminant_value(&CLike2::C), 19);\n+    assert_eq!(discriminant_value(&CLike2::D), 20);\n \n-        assert_eq!(discriminant_value(&CLike2::A), 5);\n-        assert_eq!(discriminant_value(&CLike2::B), 2);\n-        assert_eq!(discriminant_value(&CLike2::C), 19);\n-        assert_eq!(discriminant_value(&CLike2::D), 20);\n+    assert_eq!(discriminant_value(&CLike3::A), 5);\n+    assert_eq!(discriminant_value(&CLike3::B), 6);\n+    assert_eq!(discriminant_value(&CLike3::C), -1_i8 as u64);\n+    assert_eq!(discriminant_value(&CLike3::D), 0);\n \n-        assert_eq!(discriminant_value(&CLike3::A), 5);\n-        assert_eq!(discriminant_value(&CLike3::B), 6);\n-        assert_eq!(discriminant_value(&CLike3::C), -1_i8 as u64);\n-        assert_eq!(discriminant_value(&CLike3::D), 0);\n+    assert_eq!(discriminant_value(&ADT::First(0,0)), 0);\n+    assert_eq!(discriminant_value(&ADT::Second(5)), 1);\n \n-        assert_eq!(discriminant_value(&ADT::First(0,0)), 0);\n-        assert_eq!(discriminant_value(&ADT::Second(5)), 1);\n+    assert_eq!(discriminant_value(&NullablePointer::Nothing), 1);\n+    assert_eq!(discriminant_value(&NullablePointer::Something(&CONST)), 0);\n \n-        assert_eq!(discriminant_value(&NullablePointer::Nothing), 1);\n-        assert_eq!(discriminant_value(&NullablePointer::Something(&CONST)), 0);\n+    assert_eq!(discriminant_value(&10), 0);\n+    assert_eq!(discriminant_value(&\"test\"), 0);\n \n-        assert_eq!(discriminant_value(&10), 0);\n-        assert_eq!(discriminant_value(&\"test\"), 0);\n-\n-        assert_eq!(3, discriminant_value(&Mixed::Unit));\n-        assert_eq!(2, discriminant_value(&Mixed::Tuple(5)));\n-        assert_eq!(1, discriminant_value(&Mixed::Struct{a: 7, b: 11}));\n-    }\n+    assert_eq!(3, discriminant_value(&Mixed::Unit));\n+    assert_eq!(2, discriminant_value(&Mixed::Tuple(5)));\n+    assert_eq!(1, discriminant_value(&Mixed::Struct{a: 7, b: 11}));\n }"}, {"sha": "75a3d9124ebae42ab5bd494bd9d0a223787bcde2", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -3,7 +3,7 @@\n // `#![macro_escape]` is incompatible with crate-level `#![macro_use]`\n // already present in issue-43106-gating-of-builtin-attrs.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![macro_escape]\n //~^ WARN macro_escape is a deprecated synonym for macro_use"}, {"sha": "173ae3c6fb6b786e356f94961616fd11f807fbaf", "filename": "src/test/ui/generator/issue-53548-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -2,7 +2,7 @@\n // but which encountered the same ICE/error. See `issue-53548.rs`\n // for details.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "3ebabb914622cf0dc972eb8a43bd0f1a051b91f8", "filename": "src/test/ui/generator/issue-53548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -15,7 +15,7 @@\n // also analogous to what we would do for higher-ranked regions\n // appearing within the trait in other positions).\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(generators)]\n "}, {"sha": "efc1f975d16ed5d7fc30375ec98fca4a0b625f82", "filename": "src/test/ui/impl-trait/issues/issue-42479.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-42479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-42479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-42479.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n use std::iter::once;\n "}, {"sha": "e4472fcc16097e4d1f686e15d8c7e42bef0c2bde", "filename": "src/test/ui/impl-trait/issues/issue-49376.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-49376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-49376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-49376.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Tests for nested self-reference which caused a stack overflow.\n "}, {"sha": "5afd380dd4f2e742254090651ac4b40579447071", "filename": "src/test/ui/impl-trait/issues/issue-52128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-52128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-52128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-52128.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(warnings)]\n "}, {"sha": "0c34c97e2584fced0964e822b72a422330114d5a", "filename": "src/test/ui/impl-trait/issues/issue-55608-captures-empty-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-55608-captures-empty-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-55608-captures-empty-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-55608-captures-empty-region.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,7 +1,7 @@\n // This used to ICE because it creates an `impl Trait` that captures a\n // hidden empty region.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn server() -> impl FilterBase2 {\n     segment2(|| { loop { } }).map2(|| \"\")"}, {"sha": "c4f738a34b6f31f9449943522da28113878c31e4", "filename": "src/test/ui/impl-trait/issues/issue-57464-unexpected-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57464-unexpected-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57464-unexpected-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57464-unexpected-regions.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -5,7 +5,7 @@\n // opaque type. As all regions are now required to outlive the bound in an\n // opaque type we avoid the issue here.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n struct A<F>(F);\n "}, {"sha": "7b4cc176806aafe96fe554cf97ed579a28a552f0", "filename": "src/test/ui/imports/issue-53140.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-53140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-53140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-53140.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n mod m {\n     pub struct S(u8);"}, {"sha": "2df328cca8933ac5cd8b221c109d105f525ad1f9", "filename": "src/test/ui/imports/issue-55811.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-55811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-55811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55811.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // aux-build:issue-55811.rs\n \n extern crate issue_55811;"}, {"sha": "363781f2daffe8657a05edbdcccc892e865ef698", "filename": "src/test/ui/imports/issue-56263.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-56263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fimports%2Fissue-56263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56263.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n use ::std;"}, {"sha": "d16ea3dc344c108a01e5b3d0ba40d9c67e214cb4", "filename": "src/test/ui/issues/issue-10396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10396.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n enum Foo<'s> {"}, {"sha": "9f8d259552085be2c9a0a80212c64d2b9e99e23f", "filename": "src/test/ui/issues/issue-10456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10456.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n pub struct Foo;"}, {"sha": "627a8c2384ca9c22e7c196f1a7faaf909bf0b11e", "filename": "src/test/ui/issues/issue-10763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10763.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "3dcabf9b165361058e6a1fa0e7ec1af5573ee03f", "filename": "src/test/ui/issues/issue-10853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10853.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #![deny(missing_docs)]"}, {"sha": "162482d49abd5abf3bbd346656d92f6078e9bc32", "filename": "src/test/ui/issues/issue-10902.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "0105b4d223e4dd174226b3f626b80e0c74736c30", "filename": "src/test/ui/issues/issue-11384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11384.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Common { fn dummy(&self) { } }"}, {"sha": "a4611f2f90ecbc1573660bb46c8df439ea712f21", "filename": "src/test/ui/issues/issue-11592.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11592.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n //! Ensure the private trait Bar isn't complained about.\n \n #![deny(missing_docs)]"}, {"sha": "9f7f1cc6fc7dbaf53160963a9976c8e947c52550", "filename": "src/test/ui/issues/issue-11612.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // #11612\n // We weren't updating the auto adjustments with all the resolved"}, {"sha": "b300f4593a7c68999d07ba3b73d8105185dde3eb", "filename": "src/test/ui/issues/issue-11869.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11869.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "7f25c9a787ed9977180be2d0632f46a0f2785108", "filename": "src/test/ui/issues/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(unused_attributes)]\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616"}, {"sha": "aa0b04af28e2525db7fb9d51e5967139feb98f21", "filename": "src/test/ui/issues/issue-12729.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12729.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "15a98c779833afbefb04d4920f686ce23a5beb8f", "filename": "src/test/ui/issues/issue-13105.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13105.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Foo {"}, {"sha": "8584c98decf4e9ae1f7683d7934c292f48249d12", "filename": "src/test/ui/issues/issue-13167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13167.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n use std::slice;"}, {"sha": "0cf8d0675e6abffa844953a5bd39ed932fb5db0b", "filename": "src/test/ui/issues/issue-13214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13214.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n // defining static with struct that contains enum\n // with &'static str variant used to cause ICE"}, {"sha": "732172b23ed1983f55bcac89945687506f0f44fe", "filename": "src/test/ui/issues/issue-13405.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13405.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n // pretty-expanded FIXME #23616"}, {"sha": "424c99974b3eb0f47ade02ce9e95be1c6886e59b", "filename": "src/test/ui/issues/issue-13703.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13703.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n pub struct Foo<'a, 'b: 'a> { foo: &'a &'b isize }"}, {"sha": "f5977effc40934e8f2d2e56e72bef7d061a97940", "filename": "src/test/ui/issues/issue-13775.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13775.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Foo {"}, {"sha": "645b1c0eb8741557c32793ad7f29a98782356b1f", "filename": "src/test/ui/issues/issue-13837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13837.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "52b8c86802f0687f5ef9339f22f1e1c7833b92f7", "filename": "src/test/ui/issues/issue-14082.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14082.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #![allow(unused_imports, dead_code)]"}, {"sha": "6f9308376415d20cd78decdf03d400cf8da20e74", "filename": "src/test/ui/issues/issue-14254.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14254.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Foo: Sized {"}, {"sha": "0844fc72045e1c0b271d6fe804b8e33129082d12", "filename": "src/test/ui/issues/issue-14330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14330.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "a83bc4150021fd366b2b7bc79df2ad5b115182b1", "filename": "src/test/ui/issues/issue-14837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14837.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #[deny(dead_code)]"}, {"sha": "5319abbdf0e5c262a841a7677fc75e29bbc1fb6a", "filename": "src/test/ui/issues/issue-14901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Reader {}\n \n enum Wrapper<'a> {"}, {"sha": "bd95332cabaedc26915ff65ffd32dc0fbfafcc76", "filename": "src/test/ui/issues/issue-14933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14933.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n pub type BigRat<T = isize> = T;"}, {"sha": "33532855fcd7e395be864f541b96d36ff7d398d5", "filename": "src/test/ui/issues/issue-14936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(unused_macros)]\n #![allow(dead_code)]\n #![feature(asm)]"}, {"sha": "e31a9431558f6964d2e620d9f5a69ecd573063a0", "filename": "src/test/ui/issues/issue-14959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #![feature(fn_traits, unboxed_closures)]"}, {"sha": "b8231ad4e8326ba0f698cc4a1ff074844df60b84", "filename": "src/test/ui/issues/issue-15108.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50f8aadd746ebc929a752e5ffb133936ee75c52f/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8aadd746ebc929a752e5ffb133936ee75c52f/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15108.rs?ref=50f8aadd746ebc929a752e5ffb133936ee75c52f", "patch": "@@ -1,4 +0,0 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-// pretty-expanded FIXME #23616\n-\n-fn main() {}"}, {"sha": "ec413f6d1d2be527e86b69938d84699128c7e165", "filename": "src/test/ui/issues/issue-15261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15261.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "83dcb1406f89f589a447e32ef6f8504c7a7e7443", "filename": "src/test/ui/issues/issue-15689-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15689-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "f9ba34405f69829cf129838f2b50b84a81fb2021", "filename": "src/test/ui/issues/issue-15735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15735.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n struct A<'a> {\n     a: &'a i32,"}, {"sha": "e7a0963025117acd83f3daaa88d9955dfb331eeb", "filename": "src/test/ui/issues/issue-16596.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16596.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait MatrixRow { fn dummy(&self) { }}"}, {"sha": "92efb42fe30917b658d01e79aa0ed51bae6d0ef4", "filename": "src/test/ui/issues/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n struct Parser<'a, I, O> {\n     parse: Box<dyn FnMut(I) -> Result<O, String> + 'a>"}, {"sha": "34b1e2099be3f6d9c786c9773ca9b2a364f4650f", "filename": "src/test/ui/issues/issue-17121.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n // ignore-cloudabi no std::fs"}, {"sha": "7e9ff68548225edf9bcd28f809296e964ba97df1", "filename": "src/test/ui/issues/issue-17263.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(box_syntax)]\n "}, {"sha": "89ce59b11f25953614b7fc29924944539e79bd52", "filename": "src/test/ui/issues/issue-17336.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17336.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(unused_must_use)]\n #[allow(dead_code)]\n fn check(a: &str) {"}, {"sha": "1ac0af1754ba494e4ab4b357b26403b4242b82ad", "filename": "src/test/ui/issues/issue-17450.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17450.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code, warnings)]\n \n static mut x: isize = 3;"}, {"sha": "c9a729c7b2071d3aa44bce0ecc36eb85ad584c46", "filename": "src/test/ui/issues/issue-17718-const-destructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-destructors.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n struct A;\n impl Drop for A {"}, {"sha": "5e11fc4fcfb58c9384ae85e69e43a928c81b0139", "filename": "src/test/ui/issues/issue-17732.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "bab64a4b5ae089eb2b1fbee1f164eb7a2b5991e1", "filename": "src/test/ui/issues/issue-17746.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17746.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Regression test for #17746\n "}, {"sha": "c3f504ac1b9d72257720db04c818ccef514bed8a", "filename": "src/test/ui/issues/issue-17904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Test that we can parse where clauses on various forms of tuple\n // structs."}, {"sha": "36420ec142ea5b44f5f01064c9f10e68614f6395", "filename": "src/test/ui/issues/issue-18083.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18083.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_imports)]\n // These crossed imports should resolve fine, and not block on"}, {"sha": "c557b5a6512b997c132bc9666b7db132ad777c71", "filename": "src/test/ui/issues/issue-18088.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18088.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub trait Indexable<T>: std::ops::Index<usize, Output = T> {\n     fn index2(&self, i: usize) -> &T {"}, {"sha": "ce166724affe79dc9282b42989fef98e29479a89", "filename": "src/test/ui/issues/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n pub trait Promisable: Send + Sync {}"}, {"sha": "76ee9c3edb0c2c115f5eaa53bf55e944ddcfe939", "filename": "src/test/ui/issues/issue-1821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1821.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "85422d4d2611a8b0fd98269f556a24eb00033b20", "filename": "src/test/ui/issues/issue-18446-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Test that methods in trait impls should override default methods.\n "}, {"sha": "e4fe26800eff347c9b148be74474cc8a2c3cee6c", "filename": "src/test/ui/issues/issue-1866.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "bcc1ec03f2625b4f494bf02d9c9f7d2ef1d999e1", "filename": "src/test/ui/issues/issue-18738.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18738.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #[derive(Eq, PartialEq, PartialOrd, Ord)]\n enum Test<'a> {"}, {"sha": "cc5b4a64c6d26a2f388d5107a0d360e4a1799371", "filename": "src/test/ui/issues/issue-18809.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18809.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n trait Tup {\n     type T0;\n     type T1;"}, {"sha": "976a9f49b9d0e5c60558703ef19536a63a3035c0", "filename": "src/test/ui/issues/issue-18906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18906.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "708965d81d8d654b8fcd1c2700055baa480233e2", "filename": "src/test/ui/issues/issue-18988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n pub trait Foo : Send { }\n "}, {"sha": "74623da145470e958922253e60f192fd75584d1e", "filename": "src/test/ui/issues/issue-19037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19037.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "fbfe4c6f839117a6063d02e4460845af14435de2", "filename": "src/test/ui/issues/issue-19081.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19081.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Hasher {\n     type State;\n "}, {"sha": "2f4b0d575bb3c9e6607f97160c743c51d41ee2b1", "filename": "src/test/ui/issues/issue-19097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19097.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // regression test for #19097\n "}, {"sha": "3d05f11b69712fa4cba8fd6b1b98da040864819c", "filename": "src/test/ui/issues/issue-19098.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19098.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Handler {\n     fn handle(&self, _: &mut String);\n }"}, {"sha": "1f32d10b644ab80dc8e4e08000d31dd852afce29", "filename": "src/test/ui/issues/issue-19102.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19102.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_imports)]\n #![deny(unused_qualifications)]\n "}, {"sha": "03a9691018ae1180349e8e78618435e561476790", "filename": "src/test/ui/issues/issue-19129-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19129-1.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Trait<Input> {"}, {"sha": "991d79d4159431bda4e607e5a9e7afed4e21c145", "filename": "src/test/ui/issues/issue-19129-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19129-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "a9d0acaa26f4d84fe2f98c35298ad730e14ffb44", "filename": "src/test/ui/issues/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19398.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait T {"}, {"sha": "f1cf1feb00542b7b94021a5d96c89c3e924b7ddf", "filename": "src/test/ui/issues/issue-19404.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n use std::any::TypeId;"}, {"sha": "70bfe7213f2ca3f38a17720b9ef930f98e7db6f7", "filename": "src/test/ui/issues/issue-19479.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19479.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Base {"}, {"sha": "694e6dcd15a9e67d787e55feffa94bfdb9c46f8e", "filename": "src/test/ui/issues/issue-19631.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19631.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "203976079fb888867b0c388f98e54ee6f1456264", "filename": "src/test/ui/issues/issue-19632.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19632.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "4a578c398a826ef80ed3fd1663217d48fc844253", "filename": "src/test/ui/issues/issue-19850.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19850.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_variables)]\n // Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n // bindings"}, {"sha": "12419c109c5d4f1dddffc198b99473423cebcf24", "filename": "src/test/ui/issues/issue-19982.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19982.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(fn_traits, unboxed_closures)]\n "}, {"sha": "f289e58c50e684821245ade7d1f44e4970772966", "filename": "src/test/ui/issues/issue-20009.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20009.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // Check that associated types are `Sized`\n \n // pretty-expanded FIXME #23616"}, {"sha": "90db44fa02d42c4f3e1967623381fabf7ac7fdce", "filename": "src/test/ui/issues/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n #![allow(stable_features)]\n \n // ignore-cloudabi no processes"}, {"sha": "54d68f100521d1395cf1ff48946d7cdad4066a60", "filename": "src/test/ui/issues/issue-20186.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20186.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n struct Foo;"}, {"sha": "4a34f8b385f0fa336fafc802db616da7fc2190ed", "filename": "src/test/ui/issues/issue-20396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #![allow(dead_code)]"}, {"sha": "2496e342a2fb1ace4025df075297cbbc487ea62a", "filename": "src/test/ui/issues/issue-20414.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20414.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "46cae33f102ec7b539df976ccf0eb7922c4988da", "filename": "src/test/ui/issues/issue-20454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20454.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_must_use)]\n use std::thread;\n "}, {"sha": "1d0527447ba51296833d4a44c89c12269ce88a45", "filename": "src/test/ui/issues/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2063-resource.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances"}, {"sha": "36eac3824966462381ba23e6029c901c9bdd49f2", "filename": "src/test/ui/issues/issue-20644.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(unused_imports)]\n #![allow(stable_features)]"}, {"sha": "858d313fc3235989fd261694258ea5aa8d2b336a", "filename": "src/test/ui/issues/issue-20763-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20763-1.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "aa5bed209eed1385e4641e848468605434103f31", "filename": "src/test/ui/issues/issue-20763-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20763-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "5d82592e5ea57569be23da47b402e48fc29bfec9", "filename": "src/test/ui/issues/issue-20797.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-cloudabi no std::fs\n \n // Regression test for #20797."}, {"sha": "b79a2973082791fd96eb6c021381437f738590be", "filename": "src/test/ui/issues/issue-20825-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20825-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Subscriber {\n     type Input;\n }"}, {"sha": "01de901112ecf50c9462fa28ab7247c161daacb0", "filename": "src/test/ui/issues/issue-21140.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21140.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Trait where Self::Out: std::fmt::Display {\n     type Out;\n }"}, {"sha": "c90f91f6a699a2012918aa74c10bebc4ad39f932", "filename": "src/test/ui/issues/issue-21174-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21174-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n trait Trait<'a> {"}, {"sha": "c8e55a0cc20a59b74375abf59cf17dc1eb7caf03", "filename": "src/test/ui/issues/issue-21245.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21245.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Regression test for issue #21245. Check that we are able to infer\n // the types in these examples correctly. It used to be that"}, {"sha": "acc28cb430b273bb0dbcc75be44e23b0dacf4579", "filename": "src/test/ui/issues/issue-21363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n #![no_implicit_prelude]"}, {"sha": "d140b6162ceec808c057eff691e6a3346d4c79e2", "filename": "src/test/ui/issues/issue-21402.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21402.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "ab4ac7237c787271aa2313671de6a424fcdcc310", "filename": "src/test/ui/issues/issue-21520.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21520.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Test that the requirement (in `Bar`) that `T::Bar : 'static` does\n // not wind up propagating to `T`."}, {"sha": "a47d739c6be94744be2171b310c9095c515cbb09", "filename": "src/test/ui/issues/issue-21562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21562.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "2d4cddac9117fdb0d8f66ed541a5d1434f37899b", "filename": "src/test/ui/issues/issue-21622.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21622.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "2731bfd767f3e4822057790f852b2128c918ece4", "filename": "src/test/ui/issues/issue-21634.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21634.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n #![allow(stable_features)]\n \n #![feature(cfg_target_feature)]"}, {"sha": "b98cf216695879b557bd3afbadb898c9e85d7ae7", "filename": "src/test/ui/issues/issue-21726.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21726.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Regression test for #21726: an issue arose around the rules for\n // subtyping of projection types that resulted in an unconstrained"}, {"sha": "576f0253e63e03569c5f4b636af6fd431de403eb", "filename": "src/test/ui/issues/issue-21891.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21891.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "8e8ba5dc46c9a29b7e17e589dc8cf93b153c220e", "filename": "src/test/ui/issues/issue-22066.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22066.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait LineFormatter<'a> {\n     type Iter: Iterator<Item=&'a str> + 'a;\n     fn iter(&'a self, line: &'a str) -> Self::Iter;"}, {"sha": "47fad3bb909e5d15673c17495a12ba960a8a5434", "filename": "src/test/ui/issues/issue-22356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22356.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(type_alias_bounds)]\n \n // pretty-expanded FIXME #23616"}, {"sha": "21a1a4c83800a09d4571b7ad322ad49ce34762ed", "filename": "src/test/ui/issues/issue-22375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22375.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n trait A<T: A<T>> {}\n \n fn main() {}"}, {"sha": "69879ab7fdf1bad833f0850ce65cd8232b5da22f", "filename": "src/test/ui/issues/issue-22471.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22471.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(type_alias_bounds)]\n "}, {"sha": "a31f059408ff3ad6151d23e4d988ca7a03caf69c", "filename": "src/test/ui/issues/issue-22777.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22777.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // This test is reduced from libsyntax.  It is just checking that we\n // can successfully deal with a \"deep\" structure, which the drop-check\n // was hitting a recursion limit on at one point."}, {"sha": "d644cec4d56662c8992e0b01f2263b47daf067bc", "filename": "src/test/ui/issues/issue-22781.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_variables)]\n use std::collections::HashMap;\n use std::collections::hash_map::Entry::Vacant;"}, {"sha": "4079adfc8b62dc208fa07514a5279327bc8e053e", "filename": "src/test/ui/issues/issue-22814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n trait Test {}\n \n macro_rules! test {"}, {"sha": "93c1db914ea4413f0788b03e586ddb95658265ef", "filename": "src/test/ui/issues/issue-22894.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22894.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #[allow(dead_code)]\n static X: &'static str = &*\"\";\n fn main() {}"}, {"sha": "760d4edaa98d8f1e4ff6a236362aae6e9b1bfc2c", "filename": "src/test/ui/issues/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2311-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "21ff19f7f0316df01d47029bd5a3494f00caf5d8", "filename": "src/test/ui/issues/issue-2311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2311.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616"}, {"sha": "8a94bcbd4cc181133e5aad4c3b6f3bbff30000e5", "filename": "src/test/ui/issues/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2312.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "d00d5d6f944e64ebb096b9e809784344721292d9", "filename": "src/test/ui/issues/issue-23406.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23406.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n trait Inner {\n     type T;"}, {"sha": "d1e4317e5b469a97fde822f169f4093c2ac9e07c", "filename": "src/test/ui/issues/issue-23442.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23442.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n use std::marker::PhantomData;\n "}, {"sha": "9cce9a0a98b630a36273aa04eae3c1a8fec9fc9a", "filename": "src/test/ui/issues/issue-23550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23550.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![feature(core_intrinsics)]\n #![allow(warnings)]\n "}, {"sha": "8f61c71d6eb7c8a27c510908ea9e8a8b954c7006", "filename": "src/test/ui/issues/issue-23649-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23649-3.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #[derive(PartialEq)]\n struct Slice { slice: [u8] }\n "}, {"sha": "86e94beb7e2556204f821f8d89531fd17e06618c", "filename": "src/test/ui/issues/issue-24085.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24085.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Regression test for #24085. Errors were occurring in region\n // inference due to the requirement that `'a:b'`, which was getting"}, {"sha": "f4cdd982ac641da2c1d28ad04cee09ae0b23f1d5", "filename": "src/test/ui/issues/issue-24161.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24161.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #[derive(Copy,Clone)]\n struct Functions {"}, {"sha": "12816c235f8d812683c5593ca5daf965d0ae4109", "filename": "src/test/ui/issues/issue-24227.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24227.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // This resulted in an ICE. Test for future-proofing\n // Issue #24227\n "}, {"sha": "3a2c790f85203183ee697f49a93dc93e71ace427", "filename": "src/test/ui/issues/issue-24338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24338.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,5 @@\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait DictLike<'a> {\n     type ItemsIterator: Iterator<Item=u8>;"}, {"sha": "7cc7611769ad43f9502410d19e34905ce2da34a4", "filename": "src/test/ui/issues/issue-24389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24389.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n struct Foo;"}, {"sha": "4c1bfc03c9a2be739c903859765d8ca87ba68167", "filename": "src/test/ui/issues/issue-24434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags:--cfg set1\n \n #![cfg_attr(set1, feature(rustc_attrs))]"}, {"sha": "fe12dad74f53fd85d4cdfdeb46990c50f68cf93f", "filename": "src/test/ui/issues/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2487-a.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "63151002438c389274ae8ea3dd96840c7732c6de", "filename": "src/test/ui/issues/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2502.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "29dc07f491427224a0442a87a97bc45a633911f3", "filename": "src/test/ui/issues/issue-25180.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "2f0ae19fcb15f3d7789a46a943de4fe7eb7225e5", "filename": "src/test/ui/issues/issue-25394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25394.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n struct Row<T>([T]);"}, {"sha": "5f5a0f4d2671c996c8985438009582c80c08eaba", "filename": "src/test/ui/issues/issue-25579.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25579.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n enum Sexpression {\n     Num(()),"}, {"sha": "638f8f5718760a80805784e9b5ca6cc79eec70a0", "filename": "src/test/ui/issues/issue-26095.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26095.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "a95a748e091a2264c9a7f2e9e94e6b01eed0b7a4", "filename": "src/test/ui/issues/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2611-3.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Tests that impls are allowed to have looser, more permissive bounds\n // than the traits require."}, {"sha": "f5f39ded021ef9fb1a4056a9e62fcd0a7605e533", "filename": "src/test/ui/issues/issue-26205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26205.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n use std::ops::{Deref, DerefMut};\n "}, {"sha": "86e4bd7e8f8f07e305c6bcaf6e7332dc27f60280", "filename": "src/test/ui/issues/issue-26646.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26646.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![deny(unused_attributes)]\n \n #[repr(C)]"}, {"sha": "9e7e47117ac290cb6ea856f7e20e96f6b0263d2d", "filename": "src/test/ui/issues/issue-26997.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n pub struct Foo {\n     x: isize,"}, {"sha": "3339af364a0058b95e5c8abfc24478c5041fa2c4", "filename": "src/test/ui/issues/issue-27105.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "717d8b2c2aa372261afae6520033aba570cd9f75", "filename": "src/test/ui/issues/issue-27281.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27281.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub trait Trait<'a> {\n     type T;\n     type U;"}, {"sha": "cbb9bcc28ac8b21f37be7296bc39e96116d51aa9", "filename": "src/test/ui/issues/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2748-a.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n "}, {"sha": "84c94c7c90580da422c83d84ca405684210a0656", "filename": "src/test/ui/issues/issue-27583.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27583.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // Regression test for issue #27583. Unclear how useful this will be\n // going forward, since the issue in question was EXTREMELY sensitive\n // to compiler internals (like the precise numbering of nodes), but"}, {"sha": "623416a5d0032e12b9697ef1b2fcf1af13d9f17d", "filename": "src/test/ui/issues/issue-27889.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27889.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n // Test that a field can have the same name in different variants"}, {"sha": "d02725505ac1965483a54a4865f1adf3bfc31c47", "filename": "src/test/ui/issues/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2804-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr"}, {"sha": "bab5df122c87f0ffdd5dfb19a1ba4d3d5e31a4b8", "filename": "src/test/ui/issues/issue-28279.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n use std::rc::Rc;\n "}, {"sha": "1241fb0b1f85f88bee59636c155911ea3e0fd0f5", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],"}, {"sha": "170c0a07125e69b51362caac3c80d341734a3ba4", "filename": "src/test/ui/issues/issue-28600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // #28600 ICE: pub extern fn with parameter type &str inside struct impl\n \n struct Test;"}, {"sha": "10e5d1dd0ac157caf207d9a8bd97ab9af6657f5a", "filename": "src/test/ui/issues/issue-28822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n fn main() {}"}, {"sha": "210c783de79feb5f6fce089e94d23db877666ebc", "filename": "src/test/ui/issues/issue-28871.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28871.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // Regression test for #28871. The problem is that rustc encountered\n // two ways to project, one from a where clause and one from the where\n // clauses on the trait definition. (In fact, in this case, the where"}, {"sha": "da9e92c0c8043bbbea843866a425f1c083fc909f", "filename": "src/test/ui/issues/issue-28936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28936.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub type Session = i32;\n pub struct StreamParser<'a, T> {\n     _tokens: T,"}, {"sha": "cec3e25da868c5038f385d1b9d76bde830650bff", "filename": "src/test/ui/issues/issue-28999.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28999.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub struct Xyz<'a, V> {\n     pub v: (V, &'a u32),\n }"}, {"sha": "723e358407f6644dda38ba24b095cc456bb263c0", "filename": "src/test/ui/issues/issue-29030.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29030.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #[derive(Debug)]\n struct Message<'a, P: 'a = &'a [u8]> {"}, {"sha": "155ed144b3a363e160c067d152f7498d16fcc0bb", "filename": "src/test/ui/issues/issue-29037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29037.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // This test ensures that each pointer type `P<X>` is covariant in `X`.\n "}, {"sha": "73aa78f09b9ea114945eadfb188cbb50a3fddf31", "filename": "src/test/ui/issues/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_mut)]"}, {"sha": "039f072f107b2d925fadaebf3ebefad32bb92f92", "filename": "src/test/ui/issues/issue-29048.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29048.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n pub struct Chan;\n pub struct ChanSelect<'c, T> {\n     chans: Vec<(&'c Chan, T)>,"}, {"sha": "8bdacf2cebb2c57b41c034ca9961f0ce8ceb6394", "filename": "src/test/ui/issues/issue-29071.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29071.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "02b69565953cbcca5d459ef49e7a6c64844840cc", "filename": "src/test/ui/issues/issue-29276.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29276.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n struct S([u8; { struct Z; 0 }]);\n "}, {"sha": "d43367e34529b3a259f6bbc266f0babb2b2be08b", "filename": "src/test/ui/issues/issue-29516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![feature(optin_builtin_traits)]\n \n auto trait NotSame {}"}, {"sha": "2a4d50f613cdc2e742a809cf418cfa66c6229acd", "filename": "src/test/ui/issues/issue-29540.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29540.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #[derive(Debug)]\n pub struct Config {\n     pub name: String,"}, {"sha": "bc98d389c6e1506aed510c7644154e60b7bbace5", "filename": "src/test/ui/issues/issue-29710.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29710.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![deny(unused_results)]\n #![allow(dead_code)]\n "}, {"sha": "20398890baf74c9bbc48c91e34f10578938ac084", "filename": "src/test/ui/issues/issue-29740.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29740.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Regression test for #29740. Inefficient MIR matching algorithms\n // generated way too much code for this sort of case, leading to OOM."}, {"sha": "250cd7e1b25e90f1522af81644ffc8ab0c085698", "filename": "src/test/ui/issues/issue-29743.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-29743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29743.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,5 +1,4 @@\n-//\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     let mut i = [1, 2, 3];"}, {"sha": "4db7445b025e54fc3be98a77d06ef18d44b75eba", "filename": "src/test/ui/issues/issue-31260.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31260.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n pub struct Struct<K: 'static> {\n     pub field: K,"}, {"sha": "6ab3bc846a3e3bf3229adc9f94932b6b4d4fd674", "filename": "src/test/ui/issues/issue-3149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3149.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n // pretty-expanded FIXME #23616"}, {"sha": "2872be6d6c855637d35bcac467640560a4aba35d", "filename": "src/test/ui/issues/issue-31597.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31597.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n trait Make {\n     type Out;"}, {"sha": "2df547b2e0c92b974f80f8e33ca7bed5390276f3", "filename": "src/test/ui/issues/issue-32324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32324.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait Resources {"}, {"sha": "5f6996c6f521839d86263d16587472bef1295bd8", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(order_dependent_trait_objects)]\n "}, {"sha": "31638b004391f5a6af1d26bfdec136dbfa52a569", "filename": "src/test/ui/issues/issue-33264.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // only-x86_64\n \n #![allow(dead_code, non_upper_case_globals)]"}, {"sha": "770eb7c02bbae7d9c7c20a0352afbeab8448abfe", "filename": "src/test/ui/issues/issue-33287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33287.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n const A: [u32; 1] = [0];"}, {"sha": "613aa121a47bf5394c9a640c5bb1ab114e61280a", "filename": "src/test/ui/issues/issue-33903.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33903.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // Issue 33903:\n // Built-in indexing should be used even when the index is not"}, {"sha": "6dce556e9e3849c0488e5e03bf88cac052d9c4ca", "filename": "src/test/ui/issues/issue-34194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34194.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n \n struct A {"}, {"sha": "43d75a6525f9cd30bdbea5a063c657f725baa837", "filename": "src/test/ui/issues/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n // rustc --test ignores2.rs && ./ignores2"}, {"sha": "6309c0a0257238a1f213218e878d53a585b9c18a", "filename": "src/test/ui/issues/issue-34751.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34751.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n // #34751 ICE: 'rustc' panicked at 'assertion failed: !substs.has_regions_escaping_depth(0)'\n "}, {"sha": "fbedad35b864a70718207c41a462e61b43eadd33", "filename": "src/test/ui/issues/issue-34780.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34780.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(stable_features)]\n #![feature(associated_consts)]\n "}, {"sha": "eb139ec4d7f433f9b48f5372bdef3c97d6cf3931", "filename": "src/test/ui/issues/issue-35376.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![feature(specialization)]\n \n fn main() {}"}, {"sha": "004679a6240b165388585e6577fad243ff3d0a8d", "filename": "src/test/ui/issues/issue-35546.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n // Regression test for #35546. Check that we are able to codegen\n // this. Before we had problems because of the drop glue signature"}, {"sha": "88a449b85b86a5a37abfa348e958f01c09e9be95", "filename": "src/test/ui/issues/issue-3563-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3563-2.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // pretty-expanded FIXME #23616\n \n trait Canvas {"}, {"sha": "bc5bdc3ff9ef74c5834e39a68524dacdcdd47354", "filename": "src/test/ui/issues/issue-36075.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36075.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n trait DeclarationParser {\n     type Declaration;"}, {"sha": "57ff12a08ce3cb35fcdba4fad35f2538c323dbb0", "filename": "src/test/ui/issues/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_mut)]"}, {"sha": "dc5dc4f13c0b81007ba2afd5810463d1b715afc0", "filename": "src/test/ui/issues/issue-36744-without-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36744-without-calls.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // Tests for an LLVM abort when storing a lifetime-parametric fn into\n // context that is expecting one that is not lifetime-parametric\n // (i.e., has no `for <'_>`)."}, {"sha": "55f5c5a9581b12fb21982446dfb20baf062d4f35", "filename": "src/test/ui/issues/issue-37323.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,5 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n+// compile-flags: -Zsave-analysis\n \n #![feature(rustc_attrs)]\n #![allow(warnings)]"}, {"sha": "416854d66f38bad3af9edc34bbb5f6b02d0f3bca", "filename": "src/test/ui/issues/issue-37655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37655.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // Regression test for #37655. The problem was a false edge created by\n // coercion that wound up requiring that `'a` (in `split()`) outlive\n // `'b`, which shouldn't be necessary."}, {"sha": "965ecde6f3c044d27e89dd9140d7968386565132", "filename": "src/test/ui/issues/issue-37725.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n trait Foo {\n     fn foo(&self);"}, {"sha": "e211e2c3336e5bc7128ea65182338b50a2262cc6", "filename": "src/test/ui/issues/issue-37733.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37733.rs?ref=e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n #![allow(dead_code)]\n type A = for<> fn();\n "}]}