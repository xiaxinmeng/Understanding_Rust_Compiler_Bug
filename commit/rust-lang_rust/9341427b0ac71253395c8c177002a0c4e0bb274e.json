{"sha": "9341427b0ac71253395c8c177002a0c4e0bb274e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDE0MjdiMGFjNzEyNTMzOTVjOGMxNzcwMDJhMGM0ZTBiYjI3NGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-19T09:02:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-19T09:02:47Z"}, "message": "docs", "tree": {"sha": "6e95b99627fc5ccb3c2d20578399d90400556afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e95b99627fc5ccb3c2d20578399d90400556afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9341427b0ac71253395c8c177002a0c4e0bb274e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9341427b0ac71253395c8c177002a0c4e0bb274e", "html_url": "https://github.com/rust-lang/rust/commit/9341427b0ac71253395c8c177002a0c4e0bb274e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9341427b0ac71253395c8c177002a0c4e0bb274e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f13d823138ce3a22acef0db7818627ad5dee27", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f13d823138ce3a22acef0db7818627ad5dee27", "html_url": "https://github.com/rust-lang/rust/commit/92f13d823138ce3a22acef0db7818627ad5dee27"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "930223de77092ec7e91ce2d4601f2f38e32718e9", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9341427b0ac71253395c8c177002a0c4e0bb274e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9341427b0ac71253395c8c177002a0c4e0bb274e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9341427b0ac71253395c8c177002a0c4e0bb274e", "patch": "@@ -6,13 +6,13 @@ use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use syntax::codemap::Span;\n \n-\n+/// Handles all the linting of funky types\n pub struct TypePass;\n \n declare_lint!(CLIPPY_BOX_VEC, Warn,\n               \"Warn on usage of Box<Vec<T>>\")\n \n-\n+/// Matches a type with a provided string, and returns its type parameters if successful\n pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]> {\n     match ty.node {\n         TyPath(Path {segments: ref seg, ..}, _, _) => {\n@@ -35,13 +35,14 @@ pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]>\n     }\n }\n \n-\n-fn span_note_and_lint(cx: &Context, lint: &'static Lint, span: Span, msg: &str, note: &str) {\n+/// Lets me span a note only if the lint is shown\n+pub fn span_note_and_lint(cx: &Context, lint: &'static Lint, span: Span, msg: &str, note: &str) {\n     cx.span_lint(lint, span, msg);\n     if cx.current_level(lint) != Level::Allow {\n         cx.sess().span_note(span, note);\n     }\n }\n+\n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CLIPPY_BOX_VEC)"}]}