{"sha": "0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNjlkMjNkMmY5ZmMyM2Y1Mzk2MGVjYTYwY2RhZWExYTdlMjI4MWY=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-29T17:27:14Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-29T17:27:14Z"}, "message": "Lowercase drive letters when getting paths from cargo check", "tree": {"sha": "bad6309a987281855dcf0d1be073f7cc084926bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad6309a987281855dcf0d1be073f7cc084926bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "html_url": "https://github.com/rust-lang/rust/commit/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523b4cbc602447b14202dd2520f84241bb07c4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/523b4cbc602447b14202dd2520f84241bb07c4e2", "html_url": "https://github.com/rust-lang/rust/commit/523b4cbc602447b14202dd2520f84241bb07c4e2"}], "stats": {"total": 134, "additions": 71, "deletions": 63}, "files": [{"sha": "dedb0751ea5699925f319936acb7a390b2f43bed", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "patch": "@@ -8,7 +8,11 @@ use lsp_types::{\n     Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n     NumberOrString, Position, Range, Url,\n };\n-use std::{fmt::Write, path::PathBuf};\n+use std::{\n+    fmt::Write,\n+    path::{Component, Path, PathBuf, Prefix},\n+    str::FromStr,\n+};\n \n #[cfg(test)]\n mod test;\n@@ -57,7 +61,7 @@ fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Loca\n \n     let mut file_name = workspace_root.clone();\n     file_name.push(&span.file_name);\n-    let uri = Url::from_file_path(file_name).unwrap();\n+    let uri = url_from_path_with_drive_lowercasing(file_name).unwrap();\n \n     let range = Range::new(\n         Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n@@ -278,3 +282,63 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n     Some(MappedRustDiagnostic { location, diagnostic, suggested_fixes })\n }\n+\n+/// Returns a `Url` object from a given path, will lowercase drive letters if present.\n+/// This will only happen when processing windows paths.\n+///\n+/// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n+pub fn url_from_path_with_drive_lowercasing(\n+    path: impl AsRef<Path>,\n+) -> Result<Url, Box<dyn std::error::Error + Send + Sync>> {\n+    let component_has_windows_drive = path.as_ref().components().any(|comp| {\n+        if let Component::Prefix(c) = comp {\n+            match c.kind() {\n+                Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n+                _ => return false,\n+            }\n+        }\n+        false\n+    });\n+\n+    // VSCode expects drive letters to be lowercased, where rust will uppercase the drive letters.\n+    if component_has_windows_drive {\n+        let url_original = Url::from_file_path(&path)\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?;\n+\n+        let drive_partition: Vec<&str> = url_original.as_str().rsplitn(2, ':').collect();\n+\n+        // There is a drive partition, but we never found a colon.\n+        // This should not happen, but in this case we just pass it through.\n+        if drive_partition.len() == 1 {\n+            return Ok(url_original);\n+        }\n+\n+        let joined = drive_partition[1].to_ascii_lowercase() + \":\" + drive_partition[0];\n+        let url = Url::from_str(&joined).expect(\"This came from a valid `Url`\");\n+\n+        Ok(url)\n+    } else {\n+        Ok(Url::from_file_path(&path)\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?)\n+    }\n+}\n+\n+// `Url` is not able to parse windows paths on unix machines.\n+#[cfg(target_os = \"windows\")]\n+#[cfg(test)]\n+mod path_conversion_windows_tests {\n+    use super::url_from_path_with_drive_lowercasing;\n+    #[test]\n+    fn test_lowercase_drive_letter_with_drive() {\n+        let url = url_from_path_with_drive_lowercasing(\"C:\\\\Test\").unwrap();\n+\n+        assert_eq!(url.to_string(), \"file:///c:/Test\");\n+    }\n+\n+    #[test]\n+    fn test_drive_without_colon_passthrough() {\n+        let url = url_from_path_with_drive_lowercasing(r#\"\\\\localhost\\C$\\my_dir\"#).unwrap();\n+\n+        assert_eq!(url.to_string(), \"file://localhost/C$/my_dir\");\n+    }\n+}"}, {"sha": "9bc0fd405dbf4cf634a7fe40403a809478f59b67", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "patch": "@@ -21,6 +21,8 @@ mod conv;\n \n use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic, SuggestedFix};\n \n+pub use crate::conv::url_from_path_with_drive_lowercasing;\n+\n #[derive(Clone, Debug)]\n pub struct CheckOptions {\n     pub enable: bool,"}, {"sha": "121ddfd1f70737811d287db933cfa2166ed84fc8", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 3, "deletions": 61, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d69d23d2f9fc23f53960eca60cdaea1a7e2281f/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=0d69d23d2f9fc23f53960eca60cdaea1a7e2281f", "patch": "@@ -12,7 +12,9 @@ use crossbeam_channel::{unbounded, Receiver};\n use lsp_server::ErrorCode;\n use lsp_types::Url;\n use parking_lot::RwLock;\n-use ra_cargo_watch::{CheckOptions, CheckWatcher, CheckWatcherSharedState};\n+use ra_cargo_watch::{\n+    url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher, CheckWatcherSharedState,\n+};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n     SourceRootId,\n@@ -21,13 +23,11 @@ use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n-use std::path::{Component, Prefix};\n \n use crate::{\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     LspError, Result,\n };\n-use std::str::FromStr;\n \n #[derive(Debug, Clone)]\n pub struct Options {\n@@ -294,61 +294,3 @@ impl WorldSnapshot {\n         self.analysis.feature_flags()\n     }\n }\n-\n-/// Returns a `Url` object from a given path, will lowercase drive letters if present.\n-/// This will only happen when processing windows paths.\n-///\n-/// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n-fn url_from_path_with_drive_lowercasing(path: impl AsRef<Path>) -> Result<Url> {\n-    let component_has_windows_drive = path.as_ref().components().any(|comp| {\n-        if let Component::Prefix(c) = comp {\n-            match c.kind() {\n-                Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n-                _ => return false,\n-            }\n-        }\n-        false\n-    });\n-\n-    // VSCode expects drive letters to be lowercased, where rust will uppercase the drive letters.\n-    if component_has_windows_drive {\n-        let url_original = Url::from_file_path(&path)\n-            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?;\n-\n-        let drive_partition: Vec<&str> = url_original.as_str().rsplitn(2, ':').collect();\n-\n-        // There is a drive partition, but we never found a colon.\n-        // This should not happen, but in this case we just pass it through.\n-        if drive_partition.len() == 1 {\n-            return Ok(url_original);\n-        }\n-\n-        let joined = drive_partition[1].to_ascii_lowercase() + \":\" + drive_partition[0];\n-        let url = Url::from_str(&joined).expect(\"This came from a valid `Url`\");\n-\n-        Ok(url)\n-    } else {\n-        Ok(Url::from_file_path(&path)\n-            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?)\n-    }\n-}\n-\n-// `Url` is not able to parse windows paths on unix machines.\n-#[cfg(target_os = \"windows\")]\n-#[cfg(test)]\n-mod path_conversion_windows_tests {\n-    use super::url_from_path_with_drive_lowercasing;\n-    #[test]\n-    fn test_lowercase_drive_letter_with_drive() {\n-        let url = url_from_path_with_drive_lowercasing(\"C:\\\\Test\").unwrap();\n-\n-        assert_eq!(url.to_string(), \"file:///c:/Test\");\n-    }\n-\n-    #[test]\n-    fn test_drive_without_colon_passthrough() {\n-        let url = url_from_path_with_drive_lowercasing(r#\"\\\\localhost\\C$\\my_dir\"#).unwrap();\n-\n-        assert_eq!(url.to_string(), \"file://localhost/C$/my_dir\");\n-    }\n-}"}]}