{"sha": "4920721f6c25e5e5e5330617e75be4be046e144b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjA3MjFmNmMyNWU1ZTVlNTMzMDYxN2U3NWJlNGJlMDQ2ZTE0NGI=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-27T15:37:36Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:52Z"}, "message": "update docs with new syntax", "tree": {"sha": "49ca3524d9e907c355895452825a499d4883cd03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ca3524d9e907c355895452825a499d4883cd03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4920721f6c25e5e5e5330617e75be4be046e144b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4920721f6c25e5e5e5330617e75be4be046e144b", "html_url": "https://github.com/rust-lang/rust/commit/4920721f6c25e5e5e5330617e75be4be046e144b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4920721f6c25e5e5e5330617e75be4be046e144b/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "html_url": "https://github.com/rust-lang/rust/commit/60bab567daefdf8de8de8b36d5dbe3da8dce95f6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "782a5e31d2ded8f3d0268cdcae7c505f770dfbf9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4920721f6c25e5e5e5330617e75be4be046e144b/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4920721f6c25e5e5e5330617e75be4be046e144b/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=4920721f6c25e5e5e5330617e75be4be046e144b", "patch": "@@ -656,11 +656,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n-    /// yield the whole collection.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n-    /// range.\n+    /// range from 4 to 10.\n     ///\n     /// # Examples\n     ///\n@@ -748,11 +748,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n-    /// yield the whole collection.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n-    /// range.\n+    /// range from 4 to 10.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f472b593b67acf8d54c0c558e97238708804657a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4920721f6c25e5e5e5330617e75be4be046e144b/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4920721f6c25e5e5e5330617e75be4be046e144b/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=4920721f6c25e5e5e5330617e75be4be046e144b", "patch": "@@ -208,11 +208,11 @@ impl<T> BTreeSet<T> {\n \n impl<T: Ord> BTreeSet<T> {\n     /// Constructs a double-ended iterator over a sub-range of elements in the set.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n-    /// yield the whole collection.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n-    /// range.\n+    /// range from 4 to 10.\n     ///\n     /// # Examples\n     ///"}]}