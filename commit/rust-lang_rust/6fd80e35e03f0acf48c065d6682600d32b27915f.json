{"sha": "6fd80e35e03f0acf48c065d6682600d32b27915f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDgwZTM1ZTAzZjBhY2Y0OGMwNjVkNjY4MjYwMGQzMmIyNzkxNWY=", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-19T08:09:45Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-21T01:48:31Z"}, "message": "Moved another struct and used pub(super) to be explicit", "tree": {"sha": "d8cf3fdd359c667dbaafb41fe093a2c10ec97cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8cf3fdd359c667dbaafb41fe093a2c10ec97cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd80e35e03f0acf48c065d6682600d32b27915f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd80e35e03f0acf48c065d6682600d32b27915f", "html_url": "https://github.com/rust-lang/rust/commit/6fd80e35e03f0acf48c065d6682600d32b27915f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd80e35e03f0acf48c065d6682600d32b27915f/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe5bc9cb93445c7e2818db684de2bf1d84a06c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe5bc9cb93445c7e2818db684de2bf1d84a06c7", "html_url": "https://github.com/rust-lang/rust/commit/bfe5bc9cb93445c7e2818db684de2bf1d84a06c7"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "560248480cfe6f07b17bdf9d4bcba66100225fd4", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6fd80e35e03f0acf48c065d6682600d32b27915f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd80e35e03f0acf48c065d6682600d32b27915f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=6fd80e35e03f0acf48c065d6682600d32b27915f", "patch": "@@ -87,6 +87,7 @@ pub mod writeback;\n use crate::astconv::{\n     AstConv, ExplicitLateBound, GenericArgCountMismatch, GenericArgCountResult, PathSeg,\n };\n+use crate::check::util::MaybeInProgressTables;\n use rustc_ast as ast;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_attr as attr;\n@@ -141,7 +142,7 @@ use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt,\n };\n \n-use std::cell::{Cell, Ref, RefCell, RefMut};\n+use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::collections::hash_map::Entry;\n use std::iter;\n@@ -177,32 +178,6 @@ pub struct LocalTy<'tcx> {\n     revealed_ty: Ty<'tcx>,\n }\n \n-/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n-#[derive(Copy, Clone)]\n-struct MaybeInProgressTables<'a, 'tcx> {\n-    maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n-}\n-\n-impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n-    fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n-            ),\n-        }\n-    }\n-\n-    fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow_mut(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n-            ),\n-        }\n-    }\n-}\n-\n /// Closures defined within the function. For example:\n ///\n ///     fn foo() {"}, {"sha": "9a948c949ece32c9c0562bbc18027ea53ea9ef61", "filename": "compiler/rustc_typeck/src/check/util.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6fd80e35e03f0acf48c065d6682600d32b27915f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd80e35e03f0acf48c065d6682600d32b27915f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs?ref=6fd80e35e03f0acf48c065d6682600d32b27915f", "patch": "@@ -1,26 +1,54 @@\n use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n \n+use std::cell::{Ref, RefCell, RefMut};\n+\n use super::wfcheck;\n use crate::check::CheckItemTypesVisitor;\n-use crate::TyCtxt;\n+use crate::{ty, TyCtxt};\n+\n+/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n+#[derive(Copy, Clone)]\n+pub(super) struct MaybeInProgressTables<'a, 'tcx> {\n+    pub(super) maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n+}\n+\n+impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n+    pub(super) fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n+        match self.maybe_typeck_results {\n+            Some(typeck_results) => typeck_results.borrow(),\n+            None => bug!(\n+                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n+            ),\n+        }\n+    }\n+\n+    pub(super) fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n+        match self.maybe_typeck_results {\n+            Some(typeck_results) => typeck_results.borrow_mut(),\n+            None => bug!(\n+                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n+            ),\n+        }\n+    }\n+}\n \n-pub fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n+pub(super) fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+pub(super) fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-pub fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+pub(super) fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-pub fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+pub(super) fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n-pub fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n+pub(super) fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck(body_owner_def_id);"}]}