{"sha": "a3789eabc9281d29dce3c4199c971f0490074dfe", "node_id": "C_kwDOAAsO6NoAKGEzNzg5ZWFiYzkyODFkMjlkY2UzYzQxOTljOTcxZjA0OTAwNzRkZmU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T10:39:49Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T10:39:49Z"}, "message": "Minor refactorings\n\n- use `DefWithBodyId::as_generic_def_id()`\n- add comments on `InferenceResult` invariant\n- move local helper function to bottom to comply with style guide", "tree": {"sha": "eca28ed4249ed212d208e88644c0cabc5fa05d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca28ed4249ed212d208e88644c0cabc5fa05d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3789eabc9281d29dce3c4199c971f0490074dfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR8au0ACgkQ4laYqTBY\nYXFvhA//YqxhSAPjLDfen6KCQL2A/b9gKNp1WbPS7RLX6cS7QGH/Jq2mwwMFxZ+8\naUMIS7lwdC/EdvdLgEI3jhgIVjAemhVbaZQToAN8u1jgY6rkJgxYDiCJKWdTaJag\nYrmfuRe+huHcQu/LXYkH6vrDbMbP6nh4BNOAIsIvbLxlHPlUWc+BDJw2n8ZxhNxV\nBMI44qDkYZjJKIgB9WkYLjFH4kuDIZh2VHphQjDjTUcAEHUwryGNra4e+1W51cz5\nL2dEgPmBd3u01R3BgTjeBGxcYOMEIFjPWgZVFFOl5AI7MFL41slnbKGu+KeUoHRt\nJLuL7Gwv53ETguDMX0DlU7orn35+aBmZqUGKG6xbGHIhyPnafWvzoeT3Z3hAwt0X\nnmIo16ST+cj6MFxYDvgidEb83QKEcVvOyFfoTBBJhh10SzDQlwjSESJ3ITMmsQy+\nHJj47UEXnHRTsgvTzUa1DbzB9o0az+tnXTZFISj7ISvvbB/b7WRXZ7UqiVpd14Kv\n8EEQUeZyqMIBI9pdJQs43Gf43IWFFCHX+EkErd4bTNpyJaUHInrG+MLlfQD9BCcx\nPBcwUGo+F+8n6x+nwMwhYe7ZdYvz4Lk+mLSd/baC0Y3PciNAhD3JP0sywfnATyHK\nq+VGGO9dA0ibv6VhazrdgdGiNIZEvemGUAMid6dDlHkLjehjYYc=\n=9jsT\n-----END PGP SIGNATURE-----", "payload": "tree eca28ed4249ed212d208e88644c0cabc5fa05d81\nparent 275afd6e79f4e23d870a8017c805f786e400af72\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685875189 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685875189 +0900\n\nMinor refactorings\n\n- use `DefWithBodyId::as_generic_def_id()`\n- add comments on `InferenceResult` invariant\n- move local helper function to bottom to comply with style guide\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3789eabc9281d29dce3c4199c971f0490074dfe", "html_url": "https://github.com/rust-lang/rust/commit/a3789eabc9281d29dce3c4199c971f0490074dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3789eabc9281d29dce3c4199c971f0490074dfe/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275afd6e79f4e23d870a8017c805f786e400af72", "url": "https://api.github.com/repos/rust-lang/rust/commits/275afd6e79f4e23d870a8017c805f786e400af72", "html_url": "https://github.com/rust-lang/rust/commit/275afd6e79f4e23d870a8017c805f786e400af72"}], "stats": {"total": 75, "additions": 29, "deletions": 46}, "files": [{"sha": "ccfa626b5fdbc93648d47af4c7164c0669142bb9", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=a3789eabc9281d29dce3c4199c971f0490074dfe", "patch": "@@ -367,6 +367,10 @@ pub enum PointerCast {\n }\n \n /// The result of type inference: A mapping from expressions and patterns to types.\n+///\n+/// When you add a field that stores types (including `Substitution` and the like), don't forget\n+/// `resolve_completely()`'ing  them in `InferenceContext::resolve_all()`. Inference variables must\n+/// not appear in the final inference result.\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct InferenceResult {\n     /// For each method call expr, records the function it resolves to.\n@@ -575,6 +579,8 @@ impl<'a> InferenceContext<'a> {\n     // used this function for another workaround, mention it here. If you really need this function and believe that\n     // there is no problem in it being `pub(crate)`, remove this comment.\n     pub(crate) fn resolve_all(self) -> InferenceResult {\n+        // NOTE: `InferenceResult::closure_info` is `resolve_completely()`'d during\n+        // `InferenceContext::infer_closures()` (in `HirPlace::ty()` specifically).\n         let InferenceContext { mut table, mut result, .. } = self;\n \n         table.fallback_if_possible();"}, {"sha": "23189f383e0e6ff8aff13f819af2011a81e505ad", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=a3789eabc9281d29dce3c4199c971f0490074dfe", "patch": "@@ -236,6 +236,24 @@ pub(crate) struct CapturedItemWithoutTy {\n \n impl CapturedItemWithoutTy {\n     fn with_ty(self, ctx: &mut InferenceContext<'_>) -> CapturedItem {\n+        let ty = self.place.ty(ctx).clone();\n+        let ty = match &self.kind {\n+            CaptureKind::ByValue => ty,\n+            CaptureKind::ByRef(bk) => {\n+                let m = match bk {\n+                    BorrowKind::Mut { .. } => Mutability::Mut,\n+                    _ => Mutability::Not,\n+                };\n+                TyKind::Ref(m, static_lifetime(), ty).intern(Interner)\n+            }\n+        };\n+        return CapturedItem {\n+            place: self.place,\n+            kind: self.kind,\n+            span: self.span,\n+            ty: replace_placeholder_with_binder(ctx.db, ctx.owner, ty),\n+        };\n+\n         fn replace_placeholder_with_binder(\n             db: &dyn HirDatabase,\n             owner: DefWithBodyId,\n@@ -281,36 +299,13 @@ impl CapturedItemWithoutTy {\n                     Ok(BoundVar::new(outer_binder, idx).to_ty(Interner))\n                 }\n             }\n-            let g_def = match owner {\n-                DefWithBodyId::FunctionId(f) => Some(f.into()),\n-                DefWithBodyId::StaticId(_) => None,\n-                DefWithBodyId::ConstId(f) => Some(f.into()),\n-                DefWithBodyId::VariantId(f) => Some(f.into()),\n-            };\n-            let Some(generics) = g_def.map(|g_def| generics(db.upcast(), g_def)) else {\n+            let Some(generic_def) = owner.as_generic_def_id() else {\n                 return Binders::empty(Interner, ty);\n             };\n-            let filler = &mut Filler { db, generics };\n+            let filler = &mut Filler { db, generics: generics(db.upcast(), generic_def) };\n             let result = ty.clone().try_fold_with(filler, DebruijnIndex::INNERMOST).unwrap_or(ty);\n             make_binders(db, &filler.generics, result)\n         }\n-        let ty = self.place.ty(ctx).clone();\n-        let ty = match &self.kind {\n-            CaptureKind::ByValue => ty,\n-            CaptureKind::ByRef(bk) => {\n-                let m = match bk {\n-                    BorrowKind::Mut { .. } => Mutability::Mut,\n-                    _ => Mutability::Not,\n-                };\n-                TyKind::Ref(m, static_lifetime(), ty).intern(Interner)\n-            }\n-        };\n-        CapturedItem {\n-            place: self.place,\n-            kind: self.kind,\n-            span: self.span,\n-            ty: replace_placeholder_with_binder(ctx.db, ctx.owner, ty),\n-        }\n     }\n }\n "}, {"sha": "ce3f7a8e510264aab566ef6068f41bbed19d765f", "filename": "crates/hir-ty/src/mir/monomorphization.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Fmir%2Fmonomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3789eabc9281d29dce3c4199c971f0490074dfe/crates%2Fhir-ty%2Fsrc%2Fmir%2Fmonomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fmonomorphization.rs?ref=a3789eabc9281d29dce3c4199c971f0490074dfe", "patch": "@@ -303,13 +303,7 @@ pub fn monomorphized_mir_body_query(\n     subst: Substitution,\n     trait_env: Arc<crate::TraitEnvironment>,\n ) -> Result<Arc<MirBody>, MirLowerError> {\n-    let g_def = match owner {\n-        DefWithBodyId::FunctionId(f) => Some(f.into()),\n-        DefWithBodyId::StaticId(_) => None,\n-        DefWithBodyId::ConstId(f) => Some(f.into()),\n-        DefWithBodyId::VariantId(f) => Some(f.into()),\n-    };\n-    let generics = g_def.map(|g_def| generics(db.upcast(), g_def));\n+    let generics = owner.as_generic_def_id().map(|g_def| generics(db.upcast(), g_def));\n     let filler = &mut Filler { db, subst: &subst, trait_env, generics, owner };\n     let body = db.mir_body(owner)?;\n     let mut body = (*body).clone();\n@@ -334,13 +328,7 @@ pub fn monomorphized_mir_body_for_closure_query(\n     trait_env: Arc<crate::TraitEnvironment>,\n ) -> Result<Arc<MirBody>, MirLowerError> {\n     let (owner, _) = db.lookup_intern_closure(closure.into());\n-    let g_def = match owner {\n-        DefWithBodyId::FunctionId(f) => Some(f.into()),\n-        DefWithBodyId::StaticId(_) => None,\n-        DefWithBodyId::ConstId(f) => Some(f.into()),\n-        DefWithBodyId::VariantId(f) => Some(f.into()),\n-    };\n-    let generics = g_def.map(|g_def| generics(db.upcast(), g_def));\n+    let generics = owner.as_generic_def_id().map(|g_def| generics(db.upcast(), g_def));\n     let filler = &mut Filler { db, subst: &subst, trait_env, generics, owner };\n     let body = db.mir_body_for_closure(closure)?;\n     let mut body = (*body).clone();\n@@ -356,13 +344,7 @@ pub fn monomorphize_mir_body_bad(\n     trait_env: Arc<crate::TraitEnvironment>,\n ) -> Result<MirBody, MirLowerError> {\n     let owner = body.owner;\n-    let g_def = match owner {\n-        DefWithBodyId::FunctionId(f) => Some(f.into()),\n-        DefWithBodyId::StaticId(_) => None,\n-        DefWithBodyId::ConstId(f) => Some(f.into()),\n-        DefWithBodyId::VariantId(f) => Some(f.into()),\n-    };\n-    let generics = g_def.map(|g_def| generics(db.upcast(), g_def));\n+    let generics = owner.as_generic_def_id().map(|g_def| generics(db.upcast(), g_def));\n     let filler = &mut Filler { db, subst: &subst, trait_env, generics, owner };\n     filler.fill_body(&mut body)?;\n     Ok(body)"}]}