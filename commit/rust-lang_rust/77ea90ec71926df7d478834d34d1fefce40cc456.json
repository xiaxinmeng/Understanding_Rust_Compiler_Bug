{"sha": "77ea90ec71926df7d478834d34d1fefce40cc456", "node_id": "C_kwDOAAsO6NoAKDc3ZWE5MGVjNzE5MjZkZjdkNDc4ODM0ZDM0ZDFmZWZjZTQwY2M0NTY", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-17T17:42:47Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:35Z"}, "message": "Fix substitution bug", "tree": {"sha": "31795f434ac3b85765e696bf6202d0a574f00411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31795f434ac3b85765e696bf6202d0a574f00411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ea90ec71926df7d478834d34d1fefce40cc456", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXecACgkQ0XoHIV9o\n5xMwLw/+KjQh6PjEKJK/2qtXakSND2hC+xtLqo0moyLQKnzMRxvHCM+b89PPz3u/\ncyaCGLJ4LDVsrhNpjEs13mFkPxzRsbo0SnQQ+Mu8Xwx4mi49cEImGs5RigzYyYpT\nIOvCEvKf75/1RxzN0D6m8aSJNZVfUWkYvAwXlkqpsudFb+Az8+REoyL9zqmYHwxN\n4vFxkGo16Trjta2PnMuJmT0EJEwRJu+Ieuz7gzpE5PX0Oxv4ut8KXK3TLNpidBoU\nBPzBXoJbMefwMUXT+OyJpXCPcC2HfmJK7J8JNjvAu3EvhlSJeijFS21fm67BnoK1\nykU2pTBcHEFXE4IX+0RoaYbR+zVzo0/M7mlwjhepENcgUyQ2Va7Op1NIA2WfDxb0\n+BFytjtXEESULPPFYwHSSZzTeDLUpIF2rCeBb1DJGu/VF0bKw1Z+8FeC1t7i8dFg\n02d3KYPDDFSo6rPSn77Lb4Jnar3f/YdDj/RMbP/QmgtvUPiFs6kFO5YlVvm5hmiP\nbVYEaMK9mKZH/jzEEjC9+QbcaiM/8Fvbea7wF3lPj9VQtXJJPCWl9e7qEaznF7mZ\nY0zUgwrsgwKRX1exBnllAb5YP6CtaxRrFeVfAUbXvjy8VxUANRilZgFlWd/tmGvM\nim6ooRb5Sc+045o6JQHhMCe2rymzOiM5nJccveJ2K9/0taKeiPk=\n=HWQ0\n-----END PGP SIGNATURE-----", "payload": "tree 31795f434ac3b85765e696bf6202d0a574f00411\nparent 6065867a7e4379a12e495912a41318f871104270\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676655767 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828135 +0100\n\nFix substitution bug\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ea90ec71926df7d478834d34d1fefce40cc456", "html_url": "https://github.com/rust-lang/rust/commit/77ea90ec71926df7d478834d34d1fefce40cc456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ea90ec71926df7d478834d34d1fefce40cc456/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6065867a7e4379a12e495912a41318f871104270", "url": "https://api.github.com/repos/rust-lang/rust/commits/6065867a7e4379a12e495912a41318f871104270", "html_url": "https://github.com/rust-lang/rust/commit/6065867a7e4379a12e495912a41318f871104270"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "b039e654fd0060397132057a36e3bbb5af43430c", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -225,7 +225,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub(crate) fn complain_about_ambiguous_inherent_assoc_type(\n         &self,\n         name: Ident,\n-        candidates: Vec<(DefId, DefId)>,\n+        candidates: Vec<DefId>,\n         span: Span,\n     ) -> ErrorGuaranteed {\n         let mut err = struct_span_err!(\n@@ -243,19 +243,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn note_ambiguous_inherent_assoc_type(\n         &self,\n         err: &mut Diagnostic,\n-        candidates: Vec<(DefId, DefId)>,\n+        candidates: Vec<DefId>,\n         span: Span,\n     ) {\n         let tcx = self.tcx();\n \n         // Dynamic limit to avoid hiding just one candidate, which is silly.\n         let limit = if candidates.len() == 5 { 5 } else { 4 };\n \n-        for (index, &(assoc_item, _)) in candidates.iter().take(limit).enumerate() {\n-            let impl_ = tcx.impl_of_method(assoc_item).unwrap();\n+        for (index, &item) in candidates.iter().take(limit).enumerate() {\n+            let impl_ = tcx.impl_of_method(item).unwrap();\n \n-            let note_span = if assoc_item.is_local() {\n-                Some(tcx.def_span(assoc_item))\n+            let note_span = if item.is_local() {\n+                Some(tcx.def_span(item))\n             } else if impl_.is_local() {\n                 Some(tcx.def_span(impl_))\n             } else {"}, {"sha": "f43b92254eb039f63a3dce81146116b4556ac640", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -2267,31 +2267,28 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         return None;\n                     }\n \n-                    Some((assoc_item, def_scope))\n+                    // FIXME(fmease): Unsolved vars can escape this InferCtxt snapshot.\n+                    Some((assoc_item, def_scope, infcx.resolve_vars_if_possible(impl_substs)))\n                 })\n             })\n             .collect();\n \n         if applicable_candidates.len() > 1 {\n             return Err(self.complain_about_ambiguous_inherent_assoc_type(\n                 name,\n-                applicable_candidates,\n+                applicable_candidates.into_iter().map(|(candidate, ..)| candidate).collect(),\n                 span,\n             ));\n         }\n \n-        if let Some((assoc_item, def_scope)) = applicable_candidates.pop() {\n+        if let Some((assoc_item, def_scope, impl_substs)) = applicable_candidates.pop() {\n             self.check_assoc_ty(assoc_item, name, def_scope, block, span);\n \n-            let ty::Adt(_, adt_substs) = self_ty.kind() else {\n-                bug!(\"unreachable: `lookup_inherent_assoc_ty` is only called on ADTs\");\n-            };\n+            // FIXME(inherent_associated_types): To fully *confirm* the *probed* candidate,\n+            // we still need to register region obligations for regionck to prove/disprove.\n \n-            let item_substs = self.create_substs_for_associated_item(\n-                span, assoc_item, segment,\n-                // FIXME(fmease, #107468, #105305): Don't use `adt_substs` here but `impl_substs`.\n-                adt_substs,\n-            );\n+            let item_substs =\n+                self.create_substs_for_associated_item(span, assoc_item, segment, impl_substs);\n \n             // FIXME(fmease, #106722): Check if the bounds on the parameters of the\n             // associated type hold, if any."}, {"sha": "f846bfa4168acdb9959ba7d7d8a6684b9a801070", "filename": "tests/ui/associated-inherent-types/dispatch-on-self-type-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -31,7 +31,7 @@ fn main() {\n     let _: Select<u8>::Projection = ();\n \n     let _: Choose<NonCopy>::Result = ();\n-    let _: Choose<&str>::Result = vec![\"...\"];\n+    let _: Choose<bool>::Result = vec![true];\n }\n \n // Test if we use the correct `ParamEnv` when proving obligations."}, {"sha": "c9a48872af40e1c4bc1410dc1f208bc40598101e", "filename": "tests/ui/associated-inherent-types/dispatch-on-self-type-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-2.stderr?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/dispatch-on-self-type-2.rs:16:47\n    |\n LL |     let _: Parameterized<bool, u32>::Result = ();\n-   |            --------------------------------   ^^ expected `bool`, found `()`\n+   |            --------------------------------   ^^ expected `u32`, found `()`\n    |            |\n    |            expected due to this\n "}, {"sha": "00eb1a14da47ae77604011b87f35b5951b38e3e2", "filename": "tests/ui/associated-inherent-types/substitute-params-bad.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.rs?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for issue #105305 and for\n+// https://github.com/rust-lang/rust/issues/107468#issuecomment-1409096700\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct S<T>(T);\n+\n+impl<T, 'a> S<T> { //~ ERROR lifetime parameters must be declared prior to type and const parameters\n+    type P = T;\n+}\n+\n+struct Subj<T>(T);\n+\n+impl<T, S> Subj<(T, S)> {\n+    type Un = (T, S);\n+}\n+\n+fn main() {\n+    type A = S<()>::P;\n+\n+    let _: Subj<(i32, i32)>::Un = 0i32; //~ ERROR mismatched types\n+}"}, {"sha": "7a7808ba67b14d3ee6ecb5c5ddcffef17b70ca26", "filename": "tests/ui/associated-inherent-types/substitute-params-bad.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params-bad.stderr?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime parameters must be declared prior to type and const parameters\n+  --> $DIR/substitute-params-bad.rs:9:9\n+   |\n+LL | impl<T, 'a> S<T> {\n+   |     ----^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/substitute-params-bad.rs:22:35\n+   |\n+LL |     let _: Subj<(i32, i32)>::Un = 0i32;\n+   |            --------------------   ^^^^ expected `(i32, i32)`, found `i32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected tuple `(i32, i32)`\n+               found type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e94d683315903c9c84babf8089a367717896e79b", "filename": "tests/ui/associated-inherent-types/substitute-params.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ea90ec71926df7d478834d34d1fefce40cc456/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fsubstitute-params.rs?ref=77ea90ec71926df7d478834d34d1fefce40cc456", "patch": "@@ -9,7 +9,15 @@ impl<T> S<T> {\n     type P = T;\n }\n \n+impl<T> S<(T,)> {\n+    type Un = T;\n+}\n+\n fn main() {\n+    // Regression test for issue #104240.\n     type A = S<()>::P;\n     let _: A = ();\n+\n+    // Regression test for issue #107468.\n+    let _: S<(i32,)>::Un = 0i32;\n }", "previous_filename": "tests/ui/associated-inherent-types/struct-generics.rs"}]}