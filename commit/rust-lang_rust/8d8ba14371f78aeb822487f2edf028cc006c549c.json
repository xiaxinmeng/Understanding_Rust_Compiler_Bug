{"sha": "8d8ba14371f78aeb822487f2edf028cc006c549c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOGJhMTQzNzFmNzhhZWI4MjI0ODdmMmVkZjAyOGNjMDA2YzU0OWM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-09-27T16:01:04Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-09-27T16:01:04Z"}, "message": "Fix author lint", "tree": {"sha": "07041b1fa6e9895dcdaf4f761f7d6b4ae97e80c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07041b1fa6e9895dcdaf4f761f7d6b4ae97e80c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d8ba14371f78aeb822487f2edf028cc006c549c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2OMkAACgkQaTCGhp1Q\nZjffhg/5Ad1LH0vamz7kzleZoyKIMq+NzXKVMM1wxB31iAV4qnnMHb2lhDrO1zJD\nzTWJDmi0re9bOXA5jDK/dM2cqDAyR0vvqv+k1H/obfe+LrK1cC4g3otc1CwbEq++\njjlykl1AB10Wbc6SibrF2mLNZzIu2hpkH4dzpZ5sNHeUf1QKS/YAbQndsUbwSL0R\neZPCju8geVk4MH9a2PFlyvjs5Zf3olZLbwK/Ix/LZzkZYI7Kn63ndw9rnSmYm9Ts\nPBgWPdBSYz2x9Iri7YQUUs8ObnyMo3QJHd+6BjYGB5Db251W0gIXXEBywNREhO2Z\nMuTvTtHBRACTv6/20QYH3k889L4HAdjx7mN5cdr6JHR3VnHHeJO1efm5jO8gubTp\nebz8VgiTmI5BgakGli8bEgZbUJh6vycIENwQxi2vXg9uJKMK+eEB0Slni3UwmiHR\nhU2knmL2ilSTcjmXJzkm7RpFeL8XXsgdk3jvL//oolpqXPHoAmfIW29eYseexKbF\nJr4tV2P+zVY4hRfAZc1JnDjCGHW9i3KGhsVu+T9RXMmKsTUZi5ERSrc59ZNhLWtq\nDt+kjA3KLobIO+55NZ8zU2ilC+ingVXtjSD9Eg8UgmDIXJ0RoKL/LNXZ41j4CY17\nE2tL/gkPeeQ1i82xvsG9MS9ZT/4A6bee4iN2wv27SGyPHj8Twx0=\n=/DUq\n-----END PGP SIGNATURE-----", "payload": "tree 07041b1fa6e9895dcdaf4f761f7d6b4ae97e80c6\nparent 4bbd10a585616dd9d7027d16d7f8e6b8ece9e325\nauthor flip1995 <hello@philkrones.com> 1569600064 +0200\ncommitter flip1995 <hello@philkrones.com> 1569600064 +0200\n\nFix author lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8ba14371f78aeb822487f2edf028cc006c549c", "html_url": "https://github.com/rust-lang/rust/commit/8d8ba14371f78aeb822487f2edf028cc006c549c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d8ba14371f78aeb822487f2edf028cc006c549c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbd10a585616dd9d7027d16d7f8e6b8ece9e325", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325", "html_url": "https://github.com/rust-lang/rust/commit/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325"}], "stats": {"total": 124, "additions": 43, "deletions": 81}, "files": [{"sha": "f36570904c0d1440952945e215eb69eaa3f455a4", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     ///     if let ExprKind::Binary(BinOp::Eq, ref left, ref right) = cond.kind,\n     ///     if let ExprKind::Path(ref path) = left.kind,\n     ///     if let ExprKind::Lit(ref lit) = right.kind,\n-    ///     if let LitKind::Int(42, _) = lit.kind,\n+    ///     if let LitKind::Int(42, _) = lit.node,\n     ///     then {\n     ///         // report your lint here\n     ///     }\n@@ -401,7 +401,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let obj_pat = self.next(\"object\");\n                 let field_name_pat = self.next(\"field_name\");\n                 println!(\"Field(ref {}, ref {}) = {};\", obj_pat, field_name_pat, current);\n-                println!(\"    if {}.kind.as_str() == {:?}\", field_name_pat, field_ident.as_str());\n+                println!(\"    if {}.as_str() == {:?}\", field_name_pat, field_ident.as_str());\n                 self.current = obj_pat;\n                 self.visit_expr(object);\n             },\n@@ -532,7 +532,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 } else {\n                     println!(\"Binding({}, _, {}, None) = {};\", anno_pat, name_pat, current);\n                 }\n-                println!(\"    if {}.kind.as_str() == \\\"{}\\\";\", name_pat, ident.as_str());\n+                println!(\"    if {}.as_str() == \\\"{}\\\";\", name_pat, ident.as_str());\n             },\n             PatKind::Struct(ref path, ref fields, ignore) => {\n                 let path_pat = self.next(\"path\");"}, {"sha": "211d11c7c1aa33ba9c8f4342c4ecad5d50fda8f7", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -7,7 +7,7 @@ if_chain! {\n     if let ExprKind::Lit(ref lit) = expr.kind;\n     if let LitKind::Int(69, _) = lit.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n-    if name.kind.as_str() == \"x\";\n+    if name.as_str() == \"x\";\n     then {\n         // report your lint here\n     }"}, {"sha": "6034762d130aee6dc0ab2f932e7b290bedb71bea", "filename": "tests/ui/author/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.rs?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -1,5 +1,5 @@\n #![feature(stmt_expr_attributes)]\n-#![allow(redundant_semicolon)]\n+#![allow(redundant_semicolon, clippy::no_effect)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "1766663344c4bc91d899817f9513677998a6a380", "filename": "tests/ui/author/blocks.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fblocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fblocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stderr?ref=4bbd10a585616dd9d7027d16d7f8e6b8ece9e325", "patch": "@@ -1,16 +0,0 @@\n-error: statement with no effect\n-  --> $DIR/blocks.rs:8:9\n-   |\n-LL |         ;;;;\n-   |         ^^^^\n-   |\n-   = note: `-D clippy::no-effect` implied by `-D warnings`\n-\n-error: statement with no effect\n-  --> $DIR/blocks.rs:15:5\n-   |\n-LL |     -x;\n-   |     ^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "0ad5834cd90e74306d13d00b01924860df4ecfb0", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -15,7 +15,7 @@ if_chain! {\n     if body.stmts.len() == 4;\n     if let StmtKind::Local(ref local) = body.stmts[0].kind;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local.pat.kind;\n-    if name.kind.as_str() == \"__next\";\n+    if name.as_str() == \"__next\";\n     if let StmtKind::Expr(ref e, _) = body.stmts[1].kind\n     if let ExprKind::Match(ref expr2, ref arms1, MatchSource::ForLoopDesugar) = e.kind;\n     if let ExprKind::Call(ref func1, ref args1) = expr2.kind;\n@@ -43,7 +43,7 @@ if_chain! {\n     if let ExprKind::Path(ref path8) = init.kind;\n     if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.kind;\n-    if name1.kind.as_str() == \"y\";\n+    if name1.as_str() == \"y\";\n     if let StmtKind::Expr(ref e1, _) = body.stmts[3].kind\n     if let ExprKind::Block(ref block) = e1.kind;\n     if let Some(trailing_expr1) = &block.expr;\n@@ -53,9 +53,9 @@ if_chain! {\n     if let ExprKind::Path(ref path9) = init1.kind;\n     if match_qpath(path9, &[\"y\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local2.pat.kind;\n-    if name2.kind.as_str() == \"z\";\n+    if name2.as_str() == \"z\";\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name3, None) = arms[0].pat.kind;\n-    if name3.kind.as_str() == \"iter\";\n+    if name3.as_str() == \"iter\";\n     then {\n         // report your lint here\n     }"}, {"sha": "674e07ec2d3da960a33079c121652875c3f4a1b8", "filename": "tests/ui/author/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.rs?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(tool_attributes)]\n+#![allow(clippy::let_and_return)]\n \n fn main() {\n     #[clippy::author]"}, {"sha": "74d070dc4b28a663e085acf9f409503a0bffee54", "filename": "tests/ui/author/matches.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stderr?ref=4bbd10a585616dd9d7027d16d7f8e6b8ece9e325", "patch": "@@ -1,17 +0,0 @@\n-error: returning the result of a let binding from a block\n-  --> $DIR/matches.rs:9:13\n-   |\n-LL |             let x = 3;\n-   |             ---------- unnecessary let binding\n-LL |             x\n-   |             ^\n-   |\n-   = note: `-D clippy::let-and-return` implied by `-D warnings`\n-help: return the expression directly\n-   |\n-LL |             \n-LL |             3\n-   |\n-\n-error: aborting due to previous error\n-"}, {"sha": "2e8f8227dca12e551905dd9be112ff5daad18320", "filename": "tests/ui/author/matches.stdout", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8d8ba14371f78aeb822487f2edf028cc006c549c/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=8d8ba14371f78aeb822487f2edf028cc006c549c", "patch": "@@ -0,0 +1,33 @@\n+if_chain! {\n+    if let StmtKind::Local(ref local) = stmt.kind;\n+    if let Some(ref init) = local.init;\n+    if let ExprKind::Match(ref expr, ref arms, MatchSource::Normal) = init.kind;\n+    if let ExprKind::Lit(ref lit) = expr.kind;\n+    if let LitKind::Int(42, _) = lit.node;\n+    if arms.len() == 3;\n+    if let ExprKind::Lit(ref lit1) = arms[0].body.kind;\n+    if let LitKind::Int(5, _) = lit1.node;\n+    if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind\n+    if let ExprKind::Lit(ref lit2) = lit_expr.kind;\n+    if let LitKind::Int(16, _) = lit2.node;\n+    if let ExprKind::Block(ref block) = arms[1].body.kind;\n+    if let Some(trailing_expr) = &block.expr;\n+    if block.stmts.len() == 1;\n+    if let StmtKind::Local(ref local1) = block.stmts[0].kind;\n+    if let Some(ref init1) = local1.init;\n+    if let ExprKind::Lit(ref lit3) = init1.kind;\n+    if let LitKind::Int(3, _) = lit3.node;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n+    if name.as_str() == \"x\";\n+    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind\n+    if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n+    if let LitKind::Int(17, _) = lit4.node;\n+    if let ExprKind::Lit(ref lit5) = arms[2].body.kind;\n+    if let LitKind::Int(1, _) = lit5.node;\n+    if let PatKind::Wild = arms[2].pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n+    if name1.as_str() == \"a\";\n+    then {\n+        // report your lint here\n+    }\n+}"}, {"sha": "a83754125fb5b85a8c8e334d3c50ea6084dc5c19", "filename": "tests/ui/author/matches.stout", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fmatches.stout", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd10a585616dd9d7027d16d7f8e6b8ece9e325/tests%2Fui%2Fauthor%2Fmatches.stout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stout?ref=4bbd10a585616dd9d7027d16d7f8e6b8ece9e325", "patch": "@@ -1,38 +0,0 @@\n-if_chain! {\n-    if let StmtKind::Decl(ref decl, _) = stmt.kind\n-    if let DeclKind::Local(ref local) = decl.kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Match(ref expr, ref arms, MatchSource::Normal) = init.kind;\n-    if let ExprKind::Lit(ref lit) = expr.kind;\n-    if let LitKind::Int(42, _) = lit.kind;\n-    if arms.len() == 3;\n-    if let ExprKind::Lit(ref lit1) = arms[0].body.kind;\n-    if let LitKind::Int(5, _) = lit1.kind;\n-    if arms[0].pats.len() == 1;\n-    if let PatKind::Lit(ref lit_expr) = arms[0].pats[0].kind\n-    if let ExprKind::Lit(ref lit2) = lit_expr.kind;\n-    if let LitKind::Int(16, _) = lit2.kind;\n-    if let ExprKind::Block(ref block) = arms[1].body.kind;\n-    if let StmtKind::Decl(ref decl1, _) = block.kind\n-    if let DeclKind::Local(ref local1) = decl1.kind;\n-    if let Some(ref init1) = local1.init\n-    if let ExprKind::Lit(ref lit3) = init1.kind;\n-    if let LitKind::Int(3, _) = lit3.kind;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n-    if name.kind.as_str() == \"x\";\n-    if let ExprKind::Path(ref path) = local1.pat.kind;\n-    if match_qpath(path, &[\"x\"]);\n-    if arms[1].pats.len() == 1;\n-    if let PatKind::Lit(ref lit_expr1) = arms[1].pats[0].kind\n-    if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n-    if let LitKind::Int(17, _) = lit4.kind;\n-    if let ExprKind::Lit(ref lit5) = arms[2].body.kind;\n-    if let LitKind::Int(1, _) = lit5.kind;\n-    if arms[2].pats.len() == 1;\n-    if let PatKind::Wild = arms[2].pats[0].kind;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n-    if name1.kind.as_str() == \"a\";\n-    then {\n-        // report your lint here\n-    }\n-}"}]}