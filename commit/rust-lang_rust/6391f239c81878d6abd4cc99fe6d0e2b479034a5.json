{"sha": "6391f239c81878d6abd4cc99fe6d0e2b479034a5", "node_id": "C_kwDOAAsO6NoAKDYzOTFmMjM5YzgxODc4ZDZhYmQ0Y2M5OWZlNmQwZTJiNDc5MDM0YTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T20:35:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T20:35:07Z"}, "message": "Rollup merge of #98506 - compiler-errors:object-safety-suggestions, r=oli-obk\n\nFix span issues in object safety suggestions\n\nFixes #98500", "tree": {"sha": "c8b68d2c7ff71eb49024136543be060678b91130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b68d2c7ff71eb49024136543be060678b91130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6391f239c81878d6abd4cc99fe6d0e2b479034a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuhR8CRBK7hj4Ov3rIwAA1a0IAAGzZ+sbgk1qkpWDChrS/wwe\nfRv5IOrVWtzDu8eYk4Bg+D9Szwf3etl5Y9eniPMM4epQixSA1rFma0N7597TfX6c\nru7QNJxxQIpaR2edFx6dR87JFlQxbKispwPfUnYdf0cmUh6DJiJSkfjgfK9I5qOI\nWgeb5hFDkyTmrr5yD0V6Z5mv2PL2rYSgOrZlrtj1d1y/TAtZhh5oSTZ6UfKuwTyi\n+0WuYOUxCXcko3Eg8EFMuW3ja1dWGgprEl6cb3d44HlzpBgnVxTl+4JEs4faUYkU\ntfnUKsxN0C6Kusl+mRX8KCFSy3Dkc0y5EgQWtxnXGw9pOalc3fSeZFKwCOx5v1o=\n=38IQ\n-----END PGP SIGNATURE-----\n", "payload": "tree c8b68d2c7ff71eb49024136543be060678b91130\nparent 38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80\nparent eff865ca7605c0c1297aea51b377b53dbda48b3f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656362107 +0200\ncommitter GitHub <noreply@github.com> 1656362107 +0200\n\nRollup merge of #98506 - compiler-errors:object-safety-suggestions, r=oli-obk\n\nFix span issues in object safety suggestions\n\nFixes #98500\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6391f239c81878d6abd4cc99fe6d0e2b479034a5", "html_url": "https://github.com/rust-lang/rust/commit/6391f239c81878d6abd4cc99fe6d0e2b479034a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6391f239c81878d6abd4cc99fe6d0e2b479034a5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "html_url": "https://github.com/rust-lang/rust/commit/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80"}, {"sha": "eff865ca7605c0c1297aea51b377b53dbda48b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff865ca7605c0c1297aea51b377b53dbda48b3f", "html_url": "https://github.com/rust-lang/rust/commit/eff865ca7605c0c1297aea51b377b53dbda48b3f"}], "stats": {"total": 195, "additions": 121, "deletions": 74}, "files": [{"sha": "ed8de24a65eefbf3b93d90746d9575d072c484f4", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -863,7 +863,7 @@ pub enum ObjectSafetyViolation {\n \n impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n-        match *self {\n+        match self {\n             ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n                 if spans.iter().any(|sp| *sp != DUMMY_SP) {\n@@ -873,7 +873,7 @@ impl ObjectSafetyViolation {\n                         .into()\n                 }\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_, _, _), _) => {\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n             ObjectSafetyViolation::Method(\n@@ -897,9 +897,11 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n                 format!(\"method `{}` has generic type parameters\", name).into()\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n-                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n-            }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::UndispatchableReceiver(_),\n+                _,\n+            ) => format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n             ObjectSafetyViolation::AssocConst(name, DUMMY_SP) => {\n                 format!(\"it contains associated `const` `{}`\", name).into()\n             }\n@@ -911,51 +913,40 @@ impl ObjectSafetyViolation {\n     }\n \n     pub fn solution(&self, err: &mut Diagnostic) {\n-        match *self {\n+        match self {\n             ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {}\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::StaticMethod(sugg, self_span, has_args),\n+                MethodViolationCode::StaticMethod(Some((add_self_sugg, make_sized_sugg))),\n                 _,\n             ) => {\n                 err.span_suggestion(\n-                    self_span,\n-                    &format!(\n+                    add_self_sugg.1,\n+                    format!(\n                         \"consider turning `{}` into a method by giving it a `&self` argument\",\n                         name\n                     ),\n-                    format!(\"&self{}\", if has_args { \", \" } else { \"\" }),\n+                    add_self_sugg.0.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.span_suggestion(\n+                    make_sized_sugg.1,\n+                    format!(\n+                        \"alternatively, consider constraining `{}` so it does not apply to \\\n+                             trait objects\",\n+                        name\n+                    ),\n+                    make_sized_sugg.0.to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-                match sugg {\n-                    Some((sugg, span)) => {\n-                        err.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"alternatively, consider constraining `{}` so it does not apply to \\\n-                                 trait objects\",\n-                                name\n-                            ),\n-                            sugg,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    None => {\n-                        err.help(&format!(\n-                            \"consider turning `{}` into a method by giving it a `&self` \\\n-                             argument or constraining it so it does not apply to trait objects\",\n-                            name\n-                        ));\n-                    }\n-                }\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::UndispatchableReceiver,\n-                span,\n+                MethodViolationCode::UndispatchableReceiver(Some(span)),\n+                _,\n             ) => {\n                 err.span_suggestion(\n-                    span,\n+                    *span,\n                     &format!(\n                         \"consider changing method `{}`'s `self` parameter to be `&self`\",\n                         name\n@@ -991,13 +982,13 @@ impl ObjectSafetyViolation {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n-    StaticMethod(Option<(&'static str, Span)>, Span, bool /* has args */),\n+    StaticMethod(Option<(/* add &self */ (String, Span), /* add Self: Sized */ (String, Span))>),\n \n     /// e.g., `fn foo(&self, x: Self)`\n-    ReferencesSelfInput(usize),\n+    ReferencesSelfInput(Option<Span>),\n \n     /// e.g., `fn foo(&self) -> Self`\n     ReferencesSelfOutput,\n@@ -1009,7 +1000,7 @@ pub enum MethodViolationCode {\n     Generic,\n \n     /// the method's receiver (`self` argument) can't be dispatched on\n-    UndispatchableReceiver,\n+    UndispatchableReceiver(Option<Span>),\n }\n \n /// These are the error cases for `codegen_fulfill_obligation`."}, {"sha": "8d3445919156fd0c77d4c82f46971b1b81b93e26", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -366,15 +366,9 @@ fn object_safety_violation_for_method(\n     // Get an accurate span depending on the violation.\n     violation.map(|v| {\n         let node = tcx.hir().get_if_local(method.def_id);\n-        let span = match (v, node) {\n-            (MethodViolationCode::ReferencesSelfInput(arg), Some(node)) => node\n-                .fn_decl()\n-                .and_then(|decl| decl.inputs.get(arg + 1))\n-                .map_or(method.ident(tcx).span, |arg| arg.span),\n-            (MethodViolationCode::UndispatchableReceiver, Some(node)) => node\n-                .fn_decl()\n-                .and_then(|decl| decl.inputs.get(0))\n-                .map_or(method.ident(tcx).span, |arg| arg.span),\n+        let span = match (&v, node) {\n+            (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n+            (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -397,32 +391,41 @@ fn virtual_call_violation_for_method<'tcx>(\n \n     // The method's first parameter must be named `self`\n     if !method.fn_has_self_parameter {\n-        // We'll attempt to provide a structured suggestion for `Self: Sized`.\n-        let sugg =\n-            tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map(\n-                |generics| match generics.predicates {\n-                    [] => (\" where Self: Sized\", generics.where_clause_span),\n-                    [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n-                },\n-            );\n-        // Get the span pointing at where the `self` receiver should be.\n-        let sm = tcx.sess.source_map();\n-        let self_span = method.ident(tcx).span.to(tcx\n-            .hir()\n-            .span_if_local(method.def_id)\n-            .unwrap_or_else(|| sm.next_point(method.ident(tcx).span))\n-            .shrink_to_hi());\n-        let self_span = sm.span_through_char(self_span, '(').shrink_to_hi();\n-        return Some(MethodViolationCode::StaticMethod(\n-            sugg,\n-            self_span,\n-            !sig.inputs().skip_binder().is_empty(),\n-        ));\n+        let sugg = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+            generics,\n+            kind: hir::TraitItemKind::Fn(sig, _),\n+            ..\n+        })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+        {\n+            let sm = tcx.sess.source_map();\n+            Some((\n+                (\n+                    format!(\"&self{}\", if sig.decl.inputs.is_empty() { \"\" } else { \", \" }),\n+                    sm.span_through_char(sig.span, '(').shrink_to_hi(),\n+                ),\n+                (\n+                    format!(\"{} Self: Sized\", generics.add_where_or_trailing_comma()),\n+                    generics.tail_span_for_predicate_suggestion(),\n+                ),\n+            ))\n+        } else {\n+            None\n+        };\n+        return Some(MethodViolationCode::StaticMethod(sugg));\n     }\n \n-    for (i, &input_ty) in sig.skip_binder().inputs()[1..].iter().enumerate() {\n+    for (i, &input_ty) in sig.skip_binder().inputs().iter().enumerate().skip(1) {\n         if contains_illegal_self_type_reference(tcx, trait_def_id, sig.rebind(input_ty)) {\n-            return Some(MethodViolationCode::ReferencesSelfInput(i));\n+            let span = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(sig, _),\n+                ..\n+            })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+            {\n+                Some(sig.decl.inputs[i].span)\n+            } else {\n+                None\n+            };\n+            return Some(MethodViolationCode::ReferencesSelfInput(span));\n         }\n     }\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n@@ -456,7 +459,16 @@ fn virtual_call_violation_for_method<'tcx>(\n     // `Receiver: Unsize<Receiver[Self => dyn Trait]>`.\n     if receiver_ty != tcx.types.self_param {\n         if !receiver_is_dispatchable(tcx, method, receiver_ty) {\n-            return Some(MethodViolationCode::UndispatchableReceiver);\n+            let span = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(sig, _),\n+                ..\n+            })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+            {\n+                Some(sig.decl.inputs[0].span)\n+            } else {\n+                None\n+            };\n+            return Some(MethodViolationCode::UndispatchableReceiver(span));\n         } else {\n             // Do sanity check to make sure the receiver actually has the layout of a pointer.\n "}, {"sha": "7c9829b823ede6510af1368a6282776ee4662d4f", "filename": "src/test/ui/suggestions/auxiliary/not-object-safe.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -0,0 +1,6 @@\n+use std::sync::Arc;\n+\n+pub trait A {\n+    fn f();\n+    fn f2(self: &Arc<Self>);\n+}"}, {"sha": "a2717fd9206d10d128d9cdd1ab97d7e10d018d8a", "filename": "src/test/ui/suggestions/issue-98500.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:not-object-safe.rs\n+\n+extern crate not_object_safe;\n+\n+pub trait B where\n+    Self: not_object_safe::A,\n+{\n+    fn f2(&self);\n+}\n+\n+struct S(Box<dyn B>);\n+//~^ ERROR the trait `B` cannot be made into an object\n+\n+fn main() {}"}, {"sha": "e7251d735e38e6e9dc8dc01ee5edb6041a43b71a", "filename": "src/test/ui/suggestions/issue-98500.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -0,0 +1,24 @@\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/issue-98500.rs:11:14\n+   |\n+LL | struct S(Box<dyn B>);\n+   |              ^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/auxiliary/not-object-safe.rs:4:8\n+   |\n+LL |     fn f();\n+   |        ^ ...because associated function `f` has no `self` parameter\n+LL |     fn f2(self: &Arc<Self>);\n+   |        ^^ ...because method `f2`'s `self` parameter cannot be dispatched on\n+   |\n+  ::: $DIR/issue-98500.rs:5:11\n+   |\n+LL | pub trait B where\n+   |           - this trait cannot be made into an object...\n+   = help: consider moving `f` to another trait\n+   = help: consider moving `f2` to another trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "69487c565c933e00e1d77beddaaec98c6bf3714f", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_variables, dead_code)]\n \n trait Trait {\n-    fn foo(&self) where Self: Other, Self: Sized, { }\n+    fn foo(&self) where Self: Other, Self: Sized { }\n     fn bar(self: &Self) {} //~ ERROR invalid `self` parameter type\n }\n "}, {"sha": "66969c170665421031a884ec3797a89adea89746", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6391f239c81878d6abd4cc99fe6d0e2b479034a5/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=6391f239c81878d6abd4cc99fe6d0e2b479034a5", "patch": "@@ -28,8 +28,8 @@ LL |     fn foo(&self) where Self: Other, { }\n    |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n-LL |     fn foo() where Self: Other, Self: Sized, { }\n-   |                               +++++++++++++\n+LL |     fn foo() where Self: Other, Self: Sized { }\n+   |                               ~~~~~~~~~~~~~\n help: consider changing method `bar`'s `self` parameter to be `&self`\n    |\n LL |     fn bar(self: &Self) {}"}]}