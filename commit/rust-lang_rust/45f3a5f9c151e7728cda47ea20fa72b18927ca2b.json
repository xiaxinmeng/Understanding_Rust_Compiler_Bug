{"sha": "45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjNhNWY5YzE1MWU3NzI4Y2RhNDdlYTIwZmE3MmIxODkyN2NhMmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-23T10:09:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T10:09:58Z"}, "message": "Merge #4992 #4993 #4994 #4997 #4998\n\n4992: Never disable error logging on the frontend r=matklad a=Veetaha\n\n\n\n4993: Make bootstrap error message more informative and better-fitting r=matklad a=Veetaha\n\nNow this better fits standard vscode extension activation failure message and suggests enabling verbose logs.\r\n\r\n![image](https://user-images.githubusercontent.com/36276403/85321828-ffbb9400-b4cd-11ea-8adf-4032b1f62dfd.png)\r\n\n\n4994: Decouple http file stream logic from temp dir logic r=matklad a=Veetaha\n\nFollowup for #4989 \n\n4997: Update manual.adoc r=matklad a=gwutz\n\nGNOME Builder (Nightly) supports now rust-analyzer\n\n4998: Disrecommend trace.server: \"verbose\" for regular users r=matklad a=Veetaha\n\nThis option has never been useful for me, I wonder if anyone finds regular users can use this for sending logs\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\nCo-authored-by: G\u00fcnther Wagner <info@gunibert.de>", "tree": {"sha": "56eea6ae1a634c7e132f979c7b75ddeb5cd4a2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56eea6ae1a634c7e132f979c7b75ddeb5cd4a2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8dT2CRBK7hj4Ov3rIwAAdHIIAHBq1A/mMlCiws12Zqd72J1T\nligio27l0uOTgWSUNjLOnhFvpddZCbZ6KM6DVydOCJ/mmq+60featQEJfqERvPc4\nksLMGBAj5DYc4ShwVlw8QQ7xn0fSSLZjLacjKPUTdRNvdUS/hdveW+vgMi2ojF/y\nTf+rAD83dpSLBqWFhWJBb2EN4MzzfVah7YDMXWK1B+9TEWRa6J9qHJ/le4BJRT31\nJpPVlsXOMxKPRvbkdFiiI6SVmeVFkHBLjxfuk84ItMbEmR++Mw7hQdYJ0/i0Sx1N\nhmkXaDX7xl3ECgLhqjGElvAsdNBtW/7QjtRAoeKDcI7Yin2otFQVnpm8n5ltNIg=\n=UV3H\n-----END PGP SIGNATURE-----\n", "payload": "tree 56eea6ae1a634c7e132f979c7b75ddeb5cd4a2dd\nparent 338b229b79a7389a3a12e95f5d383f9c55ac43c7\nparent c2221ff7e8d60e666474e60bb3258137019952fb\nparent 3fd49d8b94c604cf672fe4dae5962b075a486475\nparent 0514d817db84c683aaf250b823edc8b08bfee3da\nparent 837d6013b50bc8db7234d0a8b155e5710cb0b2b4\nparent 426122ffc0e924f64cd35628250dfd307c632bb9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592906998 +0000\ncommitter GitHub <noreply@github.com> 1592906998 +0000\n\nMerge #4992 #4993 #4994 #4997 #4998\n\n4992: Never disable error logging on the frontend r=matklad a=Veetaha\n\n\n\n4993: Make bootstrap error message more informative and better-fitting r=matklad a=Veetaha\n\nNow this better fits standard vscode extension activation failure message and suggests enabling verbose logs.\r\n\r\n![image](https://user-images.githubusercontent.com/36276403/85321828-ffbb9400-b4cd-11ea-8adf-4032b1f62dfd.png)\r\n\n\n4994: Decouple http file stream logic from temp dir logic r=matklad a=Veetaha\n\nFollowup for #4989 \n\n4997: Update manual.adoc r=matklad a=gwutz\n\nGNOME Builder (Nightly) supports now rust-analyzer\n\n4998: Disrecommend trace.server: \"verbose\" for regular users r=matklad a=Veetaha\n\nThis option has never been useful for me, I wonder if anyone finds regular users can use this for sending logs\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\nCo-authored-by: G\u00fcnther Wagner <info@gunibert.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "html_url": "https://github.com/rust-lang/rust/commit/45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338b229b79a7389a3a12e95f5d383f9c55ac43c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/338b229b79a7389a3a12e95f5d383f9c55ac43c7", "html_url": "https://github.com/rust-lang/rust/commit/338b229b79a7389a3a12e95f5d383f9c55ac43c7"}, {"sha": "c2221ff7e8d60e666474e60bb3258137019952fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2221ff7e8d60e666474e60bb3258137019952fb", "html_url": "https://github.com/rust-lang/rust/commit/c2221ff7e8d60e666474e60bb3258137019952fb"}, {"sha": "3fd49d8b94c604cf672fe4dae5962b075a486475", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd49d8b94c604cf672fe4dae5962b075a486475", "html_url": "https://github.com/rust-lang/rust/commit/3fd49d8b94c604cf672fe4dae5962b075a486475"}, {"sha": "0514d817db84c683aaf250b823edc8b08bfee3da", "url": "https://api.github.com/repos/rust-lang/rust/commits/0514d817db84c683aaf250b823edc8b08bfee3da", "html_url": "https://github.com/rust-lang/rust/commit/0514d817db84c683aaf250b823edc8b08bfee3da"}, {"sha": "837d6013b50bc8db7234d0a8b155e5710cb0b2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/837d6013b50bc8db7234d0a8b155e5710cb0b2b4", "html_url": "https://github.com/rust-lang/rust/commit/837d6013b50bc8db7234d0a8b155e5710cb0b2b4"}, {"sha": "426122ffc0e924f64cd35628250dfd307c632bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/426122ffc0e924f64cd35628250dfd307c632bb9", "html_url": "https://github.com/rust-lang/rust/commit/426122ffc0e924f64cd35628250dfd307c632bb9"}], "stats": {"total": 120, "additions": 70, "deletions": 50}, "files": [{"sha": "f1b7ed7fc86dd36d5419aa98fa8635f576172606", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "patch": "@@ -269,6 +269,10 @@ Gnome Builder currently has support for RLS, and there's no way to configure the\n 1. Rename, symlink or copy the `rust-analyzer` binary to `rls` and place it somewhere Builder can find (in `PATH`, or under `~/.cargo/bin`).\n 2. Enable the Rust Builder plugin.\n \n+==== GNOME Builder (Nightly)\n+\n+https://nightly.gnome.org/repo/appstream/org.gnome.Builder.flatpakref[GNOME Builder (Nightly)] has now native support for `rust-analyzer` out of the box. If the `rust-analyzer` binary is not available, GNOME Builder can install it when opening a Rust source file.\n+\n == Non-Cargo Based Projects\n \n rust-analyzer does not require Cargo."}, {"sha": "68484a370b00a4c78452d1d69ebcb2dcb800a80f", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "patch": "@@ -426,7 +426,7 @@\n                         \"Full log\"\n                     ],\n                     \"default\": \"off\",\n-                    \"description\": \"Trace requests to the rust-analyzer\"\n+                    \"description\": \"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users)\"\n                 },\n                 \"rust-analyzer.trace.extension\": {\n                     \"description\": \"Enable logging of VS Code extensions itself\","}, {"sha": "12b4d051088ed40cd102b41c13a2c1a71e7436ad", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "patch": "@@ -43,12 +43,16 @@ export async function activate(context: vscode.ExtensionContext) {\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(config, state).catch(err => {\n-        let message = \"Failed to bootstrap rust-analyzer.\";\n+        let message = \"bootstrap error. \";\n+\n         if (err.code === \"EBUSY\" || err.code === \"ETXTBSY\") {\n-            message += \" Other vscode windows might be using rust-analyzer, \" +\n-                \"you should close them and reload this window to retry.\";\n+            message += \"Other vscode windows might be using rust-analyzer, \";\n+            message += \"you should close them and reload this window to retry. \";\n         }\n-        message += \" Open \\\"Help > Toggle Developer Tools > Console\\\" to see the logs\";\n+\n+        message += 'Open \"Help > Toggle Developer Tools > Console\" to see the logs ';\n+        message += '(enable verbose logs with \"rust-analyzer.trace.extension\")';\n+\n         log.error(\"Bootstrap error\", err);\n         throw new Error(message);\n     });\n@@ -178,7 +182,11 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n-    await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer extension\");\n+    await download({\n+        url: artifact.browser_download_url,\n+        dest,\n+        progressTitle: \"Downloading rust-analyzer extension\",\n+    });\n \n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n     await fs.unlink(dest);\n@@ -299,7 +307,12 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         if (err.code !== \"ENOENT\") throw err;\n     });\n \n-    await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer server\", { mode: 0o755 });\n+    await download({\n+        url: artifact.browser_download_url,\n+        dest,\n+        progressTitle: \"Downloading rust-analyzer server\",\n+        mode: 0o755\n+    });\n \n     // Patching executable if that's NixOS.\n     if (await fs.stat(\"/etc/nixos\").then(_ => true).catch(_ => false)) {"}, {"sha": "e02fd6d4f47fb949a76994c4b48c71beddfc8595", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "patch": "@@ -60,32 +60,40 @@ export interface GithubRelease {\n     }>;\n }\n \n+interface DownloadOpts {\n+    progressTitle: string;\n+    url: string;\n+    dest: string;\n+    mode?: number;\n+}\n \n-export async function download(\n-    downloadUrl: string,\n-    destinationPath: string,\n-    progressTitle: string,\n-    { mode }: { mode?: number } = {},\n-) {\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false,\n-            title: progressTitle\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPercentage = 0;\n-            await downloadFile(downloadUrl, destinationPath, mode, (readBytes, totalBytes) => {\n-                const newPercentage = (readBytes / totalBytes) * 100;\n-                progress.report({\n-                    message: newPercentage.toFixed(0) + \"%\",\n-                    increment: newPercentage - lastPercentage\n+export async function download(opts: DownloadOpts) {\n+    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n+    await withTempDir(async tempDir => {\n+        const tempFile = path.join(tempDir, path.basename(opts.dest));\n+\n+        await vscode.window.withProgress(\n+            {\n+                location: vscode.ProgressLocation.Notification,\n+                cancellable: false,\n+                title: opts.progressTitle\n+            },\n+            async (progress, _cancellationToken) => {\n+                let lastPercentage = 0;\n+                await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+                    const newPercentage = (readBytes / totalBytes) * 100;\n+                    progress.report({\n+                        message: newPercentage.toFixed(0) + \"%\",\n+                        increment: newPercentage - lastPercentage\n+                    });\n+\n+                    lastPercentage = newPercentage;\n                 });\n+            }\n+        );\n \n-                lastPercentage = newPercentage;\n-            });\n-        }\n-    );\n+        await moveFile(tempFile, opts.dest);\n+    });\n }\n \n /**\n@@ -114,28 +122,23 @@ async function downloadFile(\n \n     log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", url, \"to\", destFilePath);\n \n-    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n-    await withTempFile(async tempFilePath => {\n-        const destFileStream = fs.createWriteStream(tempFilePath, { mode });\n-\n-        let readBytes = 0;\n-        res.body.on(\"data\", (chunk: Buffer) => {\n-            readBytes += chunk.length;\n-            onProgress(readBytes, totalBytes);\n-        });\n+    let readBytes = 0;\n+    res.body.on(\"data\", (chunk: Buffer) => {\n+        readBytes += chunk.length;\n+        onProgress(readBytes, totalBytes);\n+    });\n \n-        await pipeline(res.body, destFileStream);\n-        await new Promise<void>(resolve => {\n-            destFileStream.on(\"close\", resolve);\n-            destFileStream.destroy();\n-            // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n-            // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n-        });\n-        await moveFile(tempFilePath, destFilePath);\n+    const destFileStream = fs.createWriteStream(destFilePath, { mode });\n+    await pipeline(res.body, destFileStream);\n+    await new Promise<void>(resolve => {\n+        destFileStream.on(\"close\", resolve);\n+        destFileStream.destroy();\n+        // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n+        // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n     });\n }\n \n-async function withTempFile(scope: (tempFilePath: string) => Promise<void>) {\n+async function withTempDir(scope: (tempDirPath: string) => Promise<void>) {\n     // Based on the great article: https://advancedweb.hu/secure-tempfiles-in-nodejs-without-dependencies/\n \n     // `.realpath()` should handle the cases where os.tmpdir() contains symlinks\n@@ -144,7 +147,7 @@ async function withTempFile(scope: (tempFilePath: string) => Promise<void>) {\n     const tempDir = await fs.promises.mkdtemp(path.join(osTempDir, \"rust-analyzer\"));\n \n     try {\n-        return await scope(path.join(tempDir, \"file\"));\n+        return await scope(tempDir);\n     } finally {\n         // We are good citizens :D\n         void fs.promises.rmdir(tempDir, { recursive: true }).catch(log.error);\n@@ -161,6 +164,7 @@ async function moveFile(src: fs.PathLike, dest: fs.PathLike) {\n             await fs.promises.unlink(src);\n         } else {\n             log.error(`Failed to rename the file ${src} -> ${dest}`, err);\n+            throw err;\n         }\n     }\n }"}, {"sha": "fec4c3295e0468a55a492d3fac338da58de5ac35", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/45f3a5f9c151e7728cda47ea20fa72b18927ca2b/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=45f3a5f9c151e7728cda47ea20fa72b18927ca2b", "patch": "@@ -26,7 +26,6 @@ export const log = new class {\n     }\n \n     error(message?: any, ...optionalParams: any[]): void {\n-        if (!log.enabled) return;\n         debugger;\n         // eslint-disable-next-line no-console\n         console.error(message, ...optionalParams);"}]}