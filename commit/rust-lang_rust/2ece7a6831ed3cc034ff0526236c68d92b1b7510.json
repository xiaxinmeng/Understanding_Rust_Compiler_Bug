{"sha": "2ece7a6831ed3cc034ff0526236c68d92b1b7510", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlY2U3YTY4MzFlZDNjYzAzNGZmMDUyNjIzNmM2OGQ5MmIxYjc1MTA=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2015-02-05T19:34:59Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2015-02-11T22:49:10Z"}, "message": "PR review fixes", "tree": {"sha": "212a371fe4a21da5bb0e03c0272bfbed2dd86e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212a371fe4a21da5bb0e03c0272bfbed2dd86e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ece7a6831ed3cc034ff0526236c68d92b1b7510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ece7a6831ed3cc034ff0526236c68d92b1b7510", "html_url": "https://github.com/rust-lang/rust/commit/2ece7a6831ed3cc034ff0526236c68d92b1b7510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ece7a6831ed3cc034ff0526236c68d92b1b7510/comments", "author": null, "committer": null, "parents": [{"sha": "34590d6def06c5799c7f1f58b4097075a0c995bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/34590d6def06c5799c7f1f58b4097075a0c995bd", "html_url": "https://github.com/rust-lang/rust/commit/34590d6def06c5799c7f1f58b4097075a0c995bd"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "ed50585822ed432448079d431c9f28442f35896a", "filename": "mk/platform.mk", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ece7a6831ed3cc034ff0526236c68d92b1b7510/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2ece7a6831ed3cc034ff0526236c68d92b1b7510/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=2ece7a6831ed3cc034ff0526236c68d92b1b7510", "patch": "@@ -144,14 +144,14 @@ FIND_COMPILER = $(word 1,$(1:ccache=))\n define CFG_MAKE_TOOLCHAIN\n   # Prepend the tools with their prefix if cross compiling\n   ifneq ($(CFG_BUILD),$(1))\n-  CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n-  CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n-  CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n-  AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n-  RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n-      -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n-\n-  RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n+       CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n+       CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n+       CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n+       AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n+       RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n+           -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n+\n+       RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n   endif\n \n   CFG_COMPILE_C_$(1) = $$(CC_$(1)) \\\n@@ -200,7 +200,7 @@ define CFG_MAKE_TOOLCHAIN\n   # For the ARM, AARCH64, MIPS and POWER crosses, use the toolchain assembler\n   # FIXME: We should be able to use the LLVM assembler\n   CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n+                   $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n \n   endif\n "}, {"sha": "5ebc851e194efa28da8fc669fa4ebb4ebc1d5211", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ece7a6831ed3cc034ff0526236c68d92b1b7510/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ece7a6831ed3cc034ff0526236c68d92b1b7510/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=2ece7a6831ed3cc034ff0526236c68d92b1b7510", "patch": "@@ -195,12 +195,6 @@ pub unsafe fn record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n     }\n \n-    #[cfg(target_os = \"bitrig\")]\n-    #[inline(always)]\n-    unsafe fn target_record_sp_limit(_: uint) {\n-        // segmented stacks are disabled\n-    }\n-\n     // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n@@ -240,6 +234,7 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n@@ -290,12 +285,6 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movq %fs:32, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_os = \"bitrig\")]\n-    #[inline(always)]\n-    unsafe fn target_get_sp_limit() -> uint {\n-      return 2048;\n-    }\n-\n \n     // x86\n     #[cfg(all(target_arch = \"x86\",\n@@ -344,6 +333,7 @@ pub unsafe fn get_sp_limit() -> uint {\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {"}]}