{"sha": "05954f37b76e6357fe8c162008176b3477e7b5a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTU0ZjM3Yjc2ZTYzNTdmZThjMTYyMDA4MTc2YjM0NzdlN2I1YTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-02T01:05:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T19:05:18Z"}, "message": "rustc: Use an interior vector for ty::count_ty_params", "tree": {"sha": "9b605fdc9027a0d56f35d4c2df1a48c61d04d56d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b605fdc9027a0d56f35d4c2df1a48c61d04d56d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05954f37b76e6357fe8c162008176b3477e7b5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05954f37b76e6357fe8c162008176b3477e7b5a8", "html_url": "https://github.com/rust-lang/rust/commit/05954f37b76e6357fe8c162008176b3477e7b5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05954f37b76e6357fe8c162008176b3477e7b5a8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e066bae56e850b5885cc9b73d44131a27ad68b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e066bae56e850b5885cc9b73d44131a27ad68b1d", "html_url": "https://github.com/rust-lang/rust/commit/e066bae56e850b5885cc9b73d44131a27ad68b1d"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "a05f20b9b1337c7169b7501f3ab6f3f0dbab1dd6", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05954f37b76e6357fe8c162008176b3477e7b5a8/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05954f37b76e6357fe8c162008176b3477e7b5a8/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=05954f37b76e6357fe8c162008176b3477e7b5a8", "patch": "@@ -1788,24 +1788,22 @@ fn node_id_to_monotype(&ctxt cx, ast::node_id id) -> t {\n \n // Returns the number of distinct type parameters in the given type.\n fn count_ty_params(&ctxt cx, t ty) -> uint {\n-    fn counter(&ctxt cx, @mutable vec[uint] param_indices, t ty) {\n+    fn counter(&ctxt cx, @mutable (uint[]) param_indices, t ty) {\n         alt (struct(cx, ty)) {\n             case (ty_param(?param_idx)) {\n                 auto seen = false;\n                 for (uint other_param_idx in *param_indices) {\n                     if (param_idx == other_param_idx) { seen = true; }\n                 }\n-                if (!seen) { *param_indices += [param_idx]; }\n+                if (!seen) { *param_indices += ~[param_idx]; }\n             }\n             case (_) {/* fall through */ }\n         }\n     }\n-    let vec[uint] v = []; // FIXME: typechecker botch\n-\n-    let @mutable vec[uint] param_indices = @mutable v;\n+    let @mutable (uint[]) param_indices = @mutable ~[];\n     auto f = bind counter(cx, param_indices, _);\n     walk_ty(cx, f, ty);\n-    ret vec::len[uint](*param_indices);\n+    ret ivec::len[uint](*param_indices);\n }\n \n fn type_contains_vars(&ctxt cx, &t typ) -> bool {"}]}