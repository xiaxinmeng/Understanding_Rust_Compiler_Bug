{"sha": "84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "node_id": "C_kwDOAAsO6NoAKDg0YmEyMjg5ZmRkM2M0MWViYmVmNTNkZTNmZGI1MDM1ZjJlNzNlNjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-06T00:17:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-14T20:23:52Z"}, "message": "Suggest as_ref or as_mut", "tree": {"sha": "dad04ef206f6cfe16012ddf5a1eba369ff30108e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad04ef206f6cfe16012ddf5a1eba369ff30108e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "html_url": "https://github.com/rust-lang/rust/commit/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "cc5a3e16c963eccf0baf4f6608ef56da353460f2", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "patch": "@@ -1089,7 +1089,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if is_option_or_result && maybe_reinitialized_locations_is_empty {\n                         err.span_suggestion_verbose(\n                             fn_call_span.shrink_to_lo(),\n-                            \"consider calling `.as_ref()` to borrow the type's contents\",\n+                            \"consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\",\n                             \"as_ref().\",\n                             Applicability::MachineApplicable,\n                         );"}, {"sha": "17546f73836cf28b2805e5c8de83d16b51a968a3", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "patch": "@@ -12,7 +12,7 @@ note: this function takes ownership of the receiver `self`, which moves `*cb`\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n+help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |\n LL |     cb.as_ref().map(|cb| cb());\n    |        +++++++++"}, {"sha": "08b9fb1abd79659baf6a10ee7e7721a3cdfb7858", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "patch": "@@ -13,7 +13,7 @@ note: this function takes ownership of the receiver `self`, which moves `foo`\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n+help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |\n LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n    |                                  +++++++++"}, {"sha": "d008971e4384e8b55df79fe2969d8b14d5b8c9fa", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84ba2289fdd3c41ebbef53de3fdb5035f2e73e60/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=84ba2289fdd3c41ebbef53de3fdb5035f2e73e60", "patch": "@@ -11,7 +11,7 @@ note: this function takes ownership of the receiver `self`, which moves `selecti\n    |\n LL |     pub const fn unwrap(self) -> T {\n    |                         ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n+help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n    |                                +++++++++\n@@ -29,7 +29,7 @@ note: this function takes ownership of the receiver `self`, which moves `selecti\n    |\n LL |     pub fn unwrap(self) -> T\n    |                   ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n+help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n    |                                +++++++++"}]}