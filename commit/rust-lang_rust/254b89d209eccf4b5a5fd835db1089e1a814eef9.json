{"sha": "254b89d209eccf4b5a5fd835db1089e1a814eef9", "node_id": "C_kwDOAAsO6NoAKDI1NGI4OWQyMDllY2NmNGI1YTVmZDgzNWRiMTA4OWUxYTgxNGVlZjk", "commit": {"author": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2022-07-26T23:07:07Z"}, "committer": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2022-07-29T10:56:54Z"}, "message": "Recover from c++ style `enum struct`\n\nnew error message: `enum` and `struct` are mutually exclusive\nnew suggestion: replace `enum struct` with `enum`", "tree": {"sha": "5656eb10974fee34b7a1d6d16d103e0fdf42cfb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5656eb10974fee34b7a1d6d16d103e0fdf42cfb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/254b89d209eccf4b5a5fd835db1089e1a814eef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/254b89d209eccf4b5a5fd835db1089e1a814eef9", "html_url": "https://github.com/rust-lang/rust/commit/254b89d209eccf4b5a5fd835db1089e1a814eef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/254b89d209eccf4b5a5fd835db1089e1a814eef9/comments", "author": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11207ec89b856164bba03b8ecfe07b0b234ed21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21", "html_url": "https://github.com/rust-lang/rust/commit/c11207ec89b856164bba03b8ecfe07b0b234ed21"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "58203a6fbe33654b339f2d0707befbbe9a874a15", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/254b89d209eccf4b5a5fd835db1089e1a814eef9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254b89d209eccf4b5a5fd835db1089e1a814eef9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=254b89d209eccf4b5a5fd835db1089e1a814eef9", "patch": "@@ -1216,6 +1216,25 @@ impl<'a> Parser<'a> {\n \n     /// Parses an enum declaration.\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n+        if self.token.is_keyword(kw::Struct) {\n+            let mut err = self.struct_span_err(\n+                self.prev_token.span.to(self.token.span),\n+                \"`enum` and `struct` are mutually exclusive\",\n+            );\n+            err.span_suggestion(\n+                self.prev_token.span.to(self.token.span),\n+                \"replace `enum struct` with\",\n+                \"enum\",\n+                Applicability::MachineApplicable,\n+            );\n+            if self.look_ahead(1, |t| t.is_ident()) {\n+                self.bump();\n+                err.emit();\n+            } else {\n+                return Err(err);\n+            }\n+        }\n+\n         let id = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;"}]}