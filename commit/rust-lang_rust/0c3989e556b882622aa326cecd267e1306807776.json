{"sha": "0c3989e556b882622aa326cecd267e1306807776", "node_id": "C_kwDOAAsO6NoAKDBjMzk4OWU1NTZiODgyNjIyYWEzMjZjZWNkMjY3ZTEzMDY4MDc3NzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-31T21:39:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-31T21:39:43Z"}, "message": "Rollup merge of #99980 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nThis time as well it allowed to remove a function.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`", "tree": {"sha": "ca713b775c201c73729a96465378b14bc5709b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca713b775c201c73729a96465378b14bc5709b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3989e556b882622aa326cecd267e1306807776", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5vafCRBK7hj4Ov3rIwAAbJoIAEjJr7gjMnoNN7VFRBEVzn1A\nc95eoa52dS2KJ+L0Kiu9up26p8m6k/n/uR+MzN5uXsvELfzarsUler/SQwL044NP\nmiUh/LZ4ZM99pjTR9VIUEoniyuS3Xi1jY0xXtNGhKNZytvrsub4nHBDOeuGxrjmu\n7Pb9q0L83cKm5ZAehpC3EFuksPM3N+El+uKO9Jz2LKwIs0OdwAvlWqVXJn5sG0+c\nsKBtDzxdDdWjPjhmuLVq2SoEwC+jGALXDk3YSqH9QFgQFJU+TZ2BTEzu2n2dMHzV\nN/PnA0CYKM92JS6I8w2a/sl6hP6Vd2rbJWJy7FQb2WY7LykMxbQsMwH63dOUMTM=\n=ycAu\n-----END PGP SIGNATURE-----\n", "payload": "tree ca713b775c201c73729a96465378b14bc5709b31\nparent 549463f11427bcec19465e6f37f97d6dc686fb2e\nparent fc1c858a48c212c657d59d09a604481c17369e6b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659303583 +0200\ncommitter GitHub <noreply@github.com> 1659303583 +0200\n\nRollup merge of #99980 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nThis time as well it allowed to remove a function.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3989e556b882622aa326cecd267e1306807776", "html_url": "https://github.com/rust-lang/rust/commit/0c3989e556b882622aa326cecd267e1306807776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3989e556b882622aa326cecd267e1306807776/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549463f11427bcec19465e6f37f97d6dc686fb2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/549463f11427bcec19465e6f37f97d6dc686fb2e", "html_url": "https://github.com/rust-lang/rust/commit/549463f11427bcec19465e6f37f97d6dc686fb2e"}, {"sha": "fc1c858a48c212c657d59d09a604481c17369e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1c858a48c212c657d59d09a604481c17369e6b", "html_url": "https://github.com/rust-lang/rust/commit/fc1c858a48c212c657d59d09a604481c17369e6b"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "5071581e5dc43306f1f61317b8f990ef99acf6b2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0c3989e556b882622aa326cecd267e1306807776/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3989e556b882622aa326cecd267e1306807776/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0c3989e556b882622aa326cecd267e1306807776", "patch": "@@ -1019,7 +1019,7 @@ impl<'tcx> Clean<'tcx, bool> for hir::IsAuto {\n \n impl<'tcx> Clean<'tcx, Path> for hir::TraitRef<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        let path = self.path.clean(cx);\n+        let path = clean_path(self.path, cx);\n         register_res(cx, path.res);\n         path\n     }\n@@ -1344,7 +1344,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             if let Some(expanded) = maybe_expand_private_type_alias(cx, path) {\n                 expanded\n             } else {\n-                let path = path.clean(cx);\n+                let path = clean_path(path, cx);\n                 resolve_type(cx, path)\n             }\n         }\n@@ -1380,7 +1380,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 ty::Error(_) => return Type::Infer,\n                 _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n             };\n-            let trait_ = hir::Path { span, res, segments: &[] }.clean(cx);\n+            let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);\n             let self_def_id = res.opt_def_id();\n             let self_type = clean_ty(qself, cx);\n@@ -1857,10 +1857,8 @@ fn clean_variant_data<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Path> for hir::Path<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        Path { res: self.res, segments: self.segments.iter().map(|x| x.clean(cx)).collect() }\n-    }\n+fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {\n+    Path { res: path.res, segments: path.segments.iter().map(|x| x.clean(cx)).collect() }\n }\n \n impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n@@ -1886,7 +1884,8 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                 })\n                 .collect::<Vec<_>>()\n                 .into();\n-            let bindings = self.bindings.iter().map(|x| x.clean(cx)).collect::<Vec<_>>().into();\n+            let bindings =\n+                self.bindings.iter().map(|x| clean_type_binding(x, cx)).collect::<Vec<_>>().into();\n             GenericArgs::AngleBracketed { args, bindings }\n         }\n     }\n@@ -2172,7 +2171,7 @@ fn clean_use_statement<'tcx>(\n \n     // Also check whether imports were asked to be inlined, in case we're trying to re-export a\n     // crate in Rust 2018+\n-    let path = path.clean(cx);\n+    let path = clean_path(path, cx);\n     let inner = if kind == hir::UseKind::Glob {\n         if !denied {\n             let mut visited = FxHashSet::default();\n@@ -2252,24 +2251,19 @@ fn clean_maybe_renamed_foreign_item<'tcx>(\n     })\n }\n \n-impl<'tcx> Clean<'tcx, TypeBinding> for hir::TypeBinding<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> TypeBinding {\n-        TypeBinding {\n-            assoc: PathSegment { name: self.ident.name, args: self.gen_args.clean(cx) },\n-            kind: self.kind.clean(cx),\n-        }\n-    }\n-}\n-\n-impl<'tcx> Clean<'tcx, TypeBindingKind> for hir::TypeBindingKind<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> TypeBindingKind {\n-        match *self {\n+fn clean_type_binding<'tcx>(\n+    type_binding: &hir::TypeBinding<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> TypeBinding {\n+    TypeBinding {\n+        assoc: PathSegment { name: type_binding.ident.name, args: type_binding.gen_args.clean(cx) },\n+        kind: match type_binding.kind {\n             hir::TypeBindingKind::Equality { ref term } => {\n                 TypeBindingKind::Equality { term: clean_hir_term(term, cx) }\n             }\n             hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n                 bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n             },\n-        }\n+        },\n     }\n }"}]}