{"sha": "deff2f50a97342c8b2f92a124ded2d2ead7b2996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZmYyZjUwYTk3MzQyYzhiMmY5MmExMjRkZWQyZDJlYWQ3YjI5OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T16:33:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T16:33:53Z"}, "message": "Auto merge of #26212 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26181, #26184, #26189, #26191, #26195, #26202\n- Failed merges:", "tree": {"sha": "9309584436728300c3bea072656c65c7f0ad5054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9309584436728300c3bea072656c65c7f0ad5054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deff2f50a97342c8b2f92a124ded2d2ead7b2996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deff2f50a97342c8b2f92a124ded2d2ead7b2996", "html_url": "https://github.com/rust-lang/rust/commit/deff2f50a97342c8b2f92a124ded2d2ead7b2996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deff2f50a97342c8b2f92a124ded2d2ead7b2996/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c85f30736913cf42549d8e0fd40049b346b4cec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c85f30736913cf42549d8e0fd40049b346b4cec4", "html_url": "https://github.com/rust-lang/rust/commit/c85f30736913cf42549d8e0fd40049b346b4cec4"}, {"sha": "e50675d549edfcb49f712ee3915155cf1cc8f1a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50675d549edfcb49f712ee3915155cf1cc8f1a2", "html_url": "https://github.com/rust-lang/rust/commit/e50675d549edfcb49f712ee3915155cf1cc8f1a2"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "7a3d1940858625772e3b7f9e7ad002ca8c4c63b2", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -30,15 +30,13 @@ You may also be interested in browsing [trending Rust repositories][github-rust]\n \n ## Is anyone using Rust in production?\n \n-Currently, Rust is still pre-1.0, and so we don't recommend that you use Rust\n-in production unless you know exactly what you're getting into.\n-\n-That said, there are two production deployments of Rust that we're aware of:\n+Yes. For example (incomplete):\n \n * [OpenDNS](http://labs.opendns.com/2013/10/04/zeromq-helping-us-block-malicious-domains/)\n * [Skylight](http://skylight.io)\n-\n-Let the fact that this is an easily countable number be a warning.\n+* [wit.ai](https://github.com/wit-ai/witd)\n+* [Codius](https://codius.org/blog/codius-rust/)\n+* [MaidSafe](http://maidsafe.net/)\n \n ## Does it run on Windows?\n "}, {"sha": "428897821cfcce2f2768c30928ecee9e0bebcf1b", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -324,37 +324,34 @@ first, it may seem strange, but we\u2019ll figure it out. Here\u2019s how you\u2019d prob\n try to return a closure from a function:\n \n ```rust,ignore\n-fn factory() -> (Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> (Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n This gives us these long, related errors:\n \n ```text\n error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-f = factory();\n-^\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a\n-constant size known at compile-time\n-f = factory();\n-^\n-error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a constant size known at compile-time\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-\n+`core::ops::Fn(i32) -> i32` [E0277]\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32) -> i32` [E0277]\n+let f = factory();\n+    ^\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+let f = factory();\n+    ^\n ```\n \n In order to return something from a function, Rust needs to know what\n@@ -364,16 +361,16 @@ way to give something a size is to take a reference to it, as references\n have a known size. So we\u2019d write this:\n \n ```rust,ignore\n-fn factory() -> &(Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> &(Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n But we get another error:\n@@ -448,7 +445,8 @@ assert_eq!(6, answer);\n We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n \n ```text\n-error: `num` does not live long enough\n+error: closure may outlive the current function, but it borrows `num`,\n+which is owned by the current function [E0373]\n Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```"}, {"sha": "abee61ea9d615dc5fa9e8575b5b94a8e03064a77", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -3077,6 +3077,7 @@ pub fn empty<T>() -> Empty<T> {\n }\n \n /// An iterator that yields an element exactly once.\n+#[derive(Clone)]\n #[unstable(feature=\"iter_once\", reason = \"new addition\")]\n pub struct Once<T> {\n     inner: ::option::IntoIter<T>"}, {"sha": "30ca64028e783c6fca8e89ebc719896a255fafdd", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -865,6 +865,7 @@ impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n /// An iterator over the item contained inside an Option.\n+#[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<A> { inner: Item<A> }\n "}, {"sha": "d89174295a8927db8c9f8db4f416a59863b9145d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -586,11 +586,9 @@ struct ListNode {\n This type cannot have a well-defined size, because it needs to be arbitrarily\n large (since we would be able to nest `ListNode`s to any depth). Specifically,\n \n-```\n-size of ListNode = 1 byte for head\n-                 + 1 byte for the discriminant of the Option\n-                 + size of ListNode\n-```\n+    size of `ListNode` = 1 byte for `head`\n+                       + 1 byte for the discriminant of the `Option`\n+                       + size of `ListNode`\n \n One way to fix this is by wrapping `ListNode` in a `Box`, like so:\n "}, {"sha": "946a833b3f86416a00f506b73d624780b02c8ff0", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deff2f50a97342c8b2f92a124ded2d2ead7b2996/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=deff2f50a97342c8b2f92a124ded2d2ead7b2996", "patch": "@@ -486,7 +486,7 @@ impl char {\n     /// # Return value\n     ///\n     /// Returns an iterator which yields the characters corresponding to the\n-    /// lowercase equivalent of the character. If no conversion is possible then\n+    /// titlecase equivalent of the character. If no conversion is possible then\n     /// an iterator with just the input character is returned.\n     #[unstable(feature = \"unicode\", reason = \"recently added\")]\n     #[inline]"}]}