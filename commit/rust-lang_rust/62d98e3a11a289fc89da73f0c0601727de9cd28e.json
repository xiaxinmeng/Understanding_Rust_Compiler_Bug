{"sha": "62d98e3a11a289fc89da73f0c0601727de9cd28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZDk4ZTNhMTFhMjg5ZmM4OWRhNzNmMGMwNjAxNzI3ZGU5Y2QyOGU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:34:32Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:34:32Z"}, "message": "Remove obsolete macros", "tree": {"sha": "02d34d008bad8d28172bcba795f1a701d636c531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d34d008bad8d28172bcba795f1a701d636c531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62d98e3a11a289fc89da73f0c0601727de9cd28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62d98e3a11a289fc89da73f0c0601727de9cd28e", "html_url": "https://github.com/rust-lang/rust/commit/62d98e3a11a289fc89da73f0c0601727de9cd28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62d98e3a11a289fc89da73f0c0601727de9cd28e/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2720ccc5a78b4cbad1687aff59bb8631d59109c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2720ccc5a78b4cbad1687aff59bb8631d59109c3", "html_url": "https://github.com/rust-lang/rust/commit/2720ccc5a78b4cbad1687aff59bb8631d59109c3"}], "stats": {"total": 125, "additions": 1, "deletions": 124}, "files": [{"sha": "c8f8e222da19e6b531be16d75a7d2aae3473a60e", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=62d98e3a11a289fc89da73f0c0601727de9cd28e", "patch": "@@ -26,115 +26,6 @@ macro_rules! from_transmute_x86 {\n     }\n }\n \n-/// Calls a the macro `$mac` with the provided `$args` followed by `$repeat` repeated the specified\n-/// number of times.\n-macro_rules! call_repeat {\n-    { 1 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)*\n-        }\n-    };\n-    { 2 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)*\n-        }\n-    };\n-    { 4 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-        }\n-    };\n-    { 8 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-        }\n-    };\n-    { 16 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-        }\n-    };\n-    { 32 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-        }\n-    };\n-    { 64 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n-        }\n-    };\n-}\n-\n-/// Calls the macro `$mac` with the specified `$args` followed by the specified number of unique\n-/// identifiers.\n-macro_rules! call_counting_args {\n-    { 1 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            value\n-        }\n-    };\n-    { 2 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0 v1\n-        }\n-    };\n-    { 4 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0 v1 v2 v3\n-        }\n-    };\n-    { 8 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0 v1 v2 v3 v4 v5 v6 v7\n-        }\n-    };\n-    { 16 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15\n-        }\n-    };\n-    { 32 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n-            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n-        }\n-    };\n-    { 64 => $mac:path => $($args:tt)* } => {\n-        $mac! {\n-            $($args)*\n-            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n-            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n-            v32 v33 v34 v35 v36 v37 v38 v39 v40 v41 v42 v43 v44 v45 v46 v47\n-            v48 v49 v50 v51 v52 v53 v54 v55 v56 v57 v58 v59 v60 v61 v62 v63\n-        }\n-    };\n-}\n-\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {"}, {"sha": "a075040affe72b45297b2bdb6f104543811be1c3", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=62d98e3a11a289fc89da73f0c0601727de9cd28e", "patch": "@@ -1,6 +1,7 @@\n //! Types and traits associated with masking lanes of vectors.\n #![allow(non_camel_case_types)]\n \n+/// Implements bitwise ops on mask types by delegating the operators to the inner type.\n macro_rules! delegate_ops_to_inner {\n     { $name:ident } => {\n         impl<const LANES: usize> core::ops::BitAnd for $name<LANES> {"}, {"sha": "a21e9ab5bf1e02362da3ef718ef19ca38ce8fafd", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d98e3a11a289fc89da73f0c0601727de9cd28e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=62d98e3a11a289fc89da73f0c0601727de9cd28e", "patch": "@@ -262,21 +262,6 @@ macro_rules! impl_float_ops {\n     };\n }\n \n-/// Implements mask operators for the provided types.\n-macro_rules! impl_mask_ops {\n-    { $($scalar:ty => $($vector:ident),*;)* } => {\n-        $( // scalar\n-            $( // vector\n-                impl_op! { impl BitAnd for $vector, $scalar }\n-                impl_op! { impl BitOr  for $vector, $scalar }\n-                impl_op! { impl BitXor for $vector, $scalar }\n-                impl_op! { impl Not for $vector, $scalar }\n-                impl_op! { impl Index for $vector, $scalar }\n-            )*\n-        )*\n-    };\n-}\n-\n /// Implements unsigned integer operators for the provided types.\n macro_rules! impl_unsigned_int_ops {\n     { $($scalar:ty => $($vector:ident),*;)* } => {"}]}