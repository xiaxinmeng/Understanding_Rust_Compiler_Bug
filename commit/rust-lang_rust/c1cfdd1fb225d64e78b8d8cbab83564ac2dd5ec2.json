{"sha": "c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2", "node_id": "C_kwDOAAsO6NoAKGMxY2ZkZDFmYjIyNWQ2NGU3OGI4ZDhjYmFiODM1NjRhYzJkZDVlYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T23:01:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T23:01:28Z"}, "message": "Auto merge of #96713 - petrochenkov:doclink8, r=notriddle\n\nrustdoc: Resolve some more doc links early 2\n\nThe subset of https://github.com/rust-lang/rust/pull/94857 that shouldn't be too expensive.", "tree": {"sha": "4a5671f14e6eac915b80a7c53354b9e082408c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a5671f14e6eac915b80a7c53354b9e082408c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2", "html_url": "https://github.com/rust-lang/rust/commit/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52b9c10bfb5164015eb977ff498e0597ae63eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52b9c10bfb5164015eb977ff498e0597ae63eb1", "html_url": "https://github.com/rust-lang/rust/commit/c52b9c10bfb5164015eb977ff498e0597ae63eb1"}, {"sha": "159b56f2881ad6cf4b675852746553ff7fa84374", "url": "https://api.github.com/repos/rust-lang/rust/commits/159b56f2881ad6cf4b675852746553ff7fa84374", "html_url": "https://github.com/rust-lang/rust/commit/159b56f2881ad6cf4b675852746553ff7fa84374"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "6f9912e71c506ec06f1232be667573e06e3bcb3c", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=c1cfdd1fb225d64e78b8d8cbab83564ac2dd5ec2", "patch": "@@ -172,34 +172,50 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n     }\n \n     fn resolve_doc_links_extern_impl(&mut self, def_id: DefId, is_inherent: bool) {\n-        self.resolve_doc_links_extern_outer(def_id, def_id);\n+        self.resolve_doc_links_extern_outer_fixme(def_id, def_id);\n         let assoc_item_def_ids = Vec::from_iter(\n             self.resolver.cstore().associated_item_def_ids_untracked(def_id, self.sess),\n         );\n         for assoc_def_id in assoc_item_def_ids {\n             if !is_inherent || self.resolver.cstore().visibility_untracked(assoc_def_id).is_public()\n             {\n-                self.resolve_doc_links_extern_outer(assoc_def_id, def_id);\n+                self.resolve_doc_links_extern_outer_fixme(assoc_def_id, def_id);\n             }\n         }\n     }\n \n-    fn resolve_doc_links_extern_outer(&mut self, def_id: DefId, scope_id: DefId) {\n+    // FIXME: replace all uses with `resolve_doc_links_extern_outer` to actually resolve links, not\n+    // just add traits in scope. This may be expensive and require benchmarking and optimization.\n+    fn resolve_doc_links_extern_outer_fixme(&mut self, def_id: DefId, scope_id: DefId) {\n         if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n             return;\n         }\n-        // FIXME: actually resolve links, not just add traits in scope.\n         if let Some(parent_id) = self.resolver.opt_parent(scope_id) {\n             self.add_traits_in_scope(parent_id);\n         }\n     }\n \n+    fn resolve_doc_links_extern_outer(&mut self, def_id: DefId, scope_id: DefId) {\n+        if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n+            return;\n+        }\n+        let attrs = Vec::from_iter(self.resolver.cstore().item_attrs_untracked(def_id, self.sess));\n+        let parent_scope = ParentScope::module(\n+            self.resolver.get_nearest_non_block_module(\n+                self.resolver.opt_parent(scope_id).unwrap_or(scope_id),\n+            ),\n+            self.resolver,\n+        );\n+        self.resolve_doc_links(doc_attrs(attrs.iter()), parent_scope);\n+    }\n+\n     fn resolve_doc_links_extern_inner(&mut self, def_id: DefId) {\n         if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n             return;\n         }\n-        // FIXME: actually resolve links, not just add traits in scope.\n-        self.add_traits_in_scope(def_id);\n+        let attrs = Vec::from_iter(self.resolver.cstore().item_attrs_untracked(def_id, self.sess));\n+        let parent_scope = ParentScope::module(self.resolver.expect_module(def_id), self.resolver);\n+        self.resolve_doc_links(doc_attrs(attrs.iter()), parent_scope);\n     }\n \n     fn resolve_doc_links_local(&mut self, attrs: &[ast::Attribute]) {\n@@ -253,9 +269,16 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n                         }\n                     }\n \n-                    // FIXME: Resolve all prefixes for type-relative resolution or for diagnostics.\n-                    if (need_assoc || !any_resolved) && pinfo.path_str.contains(\"::\") {\n-                        need_traits_in_scope = true;\n+                    // Resolve all prefixes for type-relative resolution or for diagnostics.\n+                    if need_assoc || !any_resolved {\n+                        let mut path = &pinfo.path_str[..];\n+                        while let Some(idx) = path.rfind(\"::\") {\n+                            path = &path[..idx];\n+                            need_traits_in_scope = true;\n+                            for ns in [TypeNS, ValueNS, MacroNS] {\n+                                self.resolve_and_cache(path, ns, &parent_scope);\n+                            }\n+                        }\n                     }\n                 }\n             }"}]}