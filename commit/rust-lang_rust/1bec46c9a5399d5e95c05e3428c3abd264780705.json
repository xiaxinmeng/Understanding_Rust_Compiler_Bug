{"sha": "1bec46c9a5399d5e95c05e3428c3abd264780705", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZWM0NmM5YTUzOTlkNWU5NWMwNWUzNDI4YzNhYmQyNjQ3ODA3MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-06T01:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-06T01:04:14Z"}, "message": "Auto merge of #59331 - varkor:TypeVariableOrigin-refactor, r=eddyb\n\nRefactor `TypeVariableOrigin`\n\nRemoves some unused variants and extracts the common `Span` field.\n\nAs suggested in https://github.com/rust-lang/rust/pull/59008#discussion_r265031209.\n\nr? @eddyb", "tree": {"sha": "191761c4852bc51208b575e6e9df50cdb8cb3b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191761c4852bc51208b575e6e9df50cdb8cb3b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bec46c9a5399d5e95c05e3428c3abd264780705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bec46c9a5399d5e95c05e3428c3abd264780705", "html_url": "https://github.com/rust-lang/rust/commit/1bec46c9a5399d5e95c05e3428c3abd264780705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bec46c9a5399d5e95c05e3428c3abd264780705/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cdaffd7962c4aae0cadd82baa241901b03f9458", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaffd7962c4aae0cadd82baa241901b03f9458", "html_url": "https://github.com/rust-lang/rust/commit/7cdaffd7962c4aae0cadd82baa241901b03f9458"}, {"sha": "66b840c2408190206fc018a63de8d5b0a7ee9870", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b840c2408190206fc018a63de8d5b0a7ee9870", "html_url": "https://github.com/rust-lang/rust/commit/66b840c2408190206fc018a63de8d5b0a7ee9870"}], "stats": {"total": 350, "additions": 251, "deletions": 99}, "files": [{"sha": "42f53bf1e95e8176cd3e7d4e3ff82bb35ac1d742", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -21,7 +21,8 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, ConstVariableOrigin};\n+use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};\n+use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n@@ -365,7 +366,10 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 let ty = match ty_kind {\n                     CanonicalTyVarKind::General(ui) => {\n                         self.next_ty_var_in_universe(\n-                            TypeVariableOrigin::MiscVariable(span),\n+                            TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::MiscVariable,\n+                                span,\n+                            },\n                             universe_map(ui)\n                         )\n                     }\n@@ -403,10 +407,16 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             CanonicalVarKind::Const(ui) => {\n                 self.next_const_var_in_universe(\n                     self.next_ty_var_in_universe(\n-                        TypeVariableOrigin::MiscVariable(span),\n+                        TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span,\n+                        },\n                         universe_map(ui),\n                     ),\n-                    ConstVariableOrigin::MiscVariable(span),\n+                    ConstVariableOrigin {\n+                        kind: ConstVariableOriginKind::MiscVariable,\n+                        span,\n+                    },\n                     universe_map(ui),\n                 ).into()\n             }"}, {"sha": "4e6d534b940c19643caae6b54feed7188007e3ad", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -28,7 +28,8 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n-use super::unify_key::{ConstVarValue, ConstVariableValue, ConstVariableOrigin};\n+use super::unify_key::{ConstVarValue, ConstVariableValue};\n+use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n \n use crate::hir::def_id::DefId;\n use crate::mir::interpret::ConstValue;\n@@ -165,7 +166,10 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.const_unification_table\n             .borrow_mut()\n             .unify_var_value(vid, ConstVarValue {\n-                origin: ConstVariableOrigin::ConstInference(DUMMY_SP),\n+                origin: ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstInference,\n+                    span: DUMMY_SP,\n+                },\n                 val: ConstVariableValue::Known { value },\n             })\n             .map_err(|e| const_unification_error(vid_is_expected, e))?;"}, {"sha": "16b6792fde48fa525a4cca1d6b897fa565c317b3", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -2,7 +2,7 @@ use crate::hir::def::Namespace;\n use crate::hir::{self, Local, Pat, Body, HirId};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::infer::InferCtxt;\n-use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::ty::{self, Ty, Infer, TyVar};\n use crate::ty::print::Print;\n use syntax::source_map::CompilerDesugaringKind;\n@@ -83,8 +83,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> String {\n         if let ty::Infer(ty::TyVar(ty_vid)) = ty.sty {\n             let ty_vars = self.type_variables.borrow();\n-            if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n-                *ty_vars.var_origin(ty_vid) {\n+            if let TypeVariableOriginKind::TypeParameterDefinition(name) =\n+                ty_vars.var_origin(ty_vid).kind {\n                 return name.to_string();\n             }\n         }\n@@ -122,8 +122,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n             let ty_vars = self.type_variables.borrow();\n             let getter = move |ty_vid| {\n-                if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n-                    *ty_vars.var_origin(ty_vid) {\n+                if let TypeVariableOriginKind::TypeParameterDefinition(name) =\n+                    ty_vars.var_origin(ty_vid).kind {\n                     return Some(name.to_string());\n                 }\n                 None"}, {"sha": "0053b4c762118dafa9d2aefd2dc29a370b4fc1fc", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -20,7 +20,7 @@\n //! a lattice.\n \n use super::InferCtxt;\n-use super::type_variable::TypeVariableOrigin;\n+use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n \n use crate::traits::ObligationCause;\n use crate::ty::TyVar;\n@@ -79,12 +79,18 @@ pub fn super_lattice_tys<'a, 'gcx, 'tcx, L>(this: &mut L,\n         // iterate on the subtype obligations that are returned, but I\n         // think this suffices. -nmatsakis\n         (&ty::Infer(TyVar(..)), _) => {\n-            let v = infcx.next_ty_var(TypeVariableOrigin::LatticeVariable(this.cause().span));\n+            let v = infcx.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::LatticeVariable,\n+                span: this.cause().span,\n+            });\n             this.relate_bound(v, b, a)?;\n             Ok(v)\n         }\n         (_, &ty::Infer(TyVar(..))) => {\n-            let v = infcx.next_ty_var(TypeVariableOrigin::LatticeVariable(this.cause().span));\n+            let v = infcx.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::LatticeVariable,\n+                span: this.cause().span,\n+            });\n             this.relate_bound(v, a, b)?;\n             Ok(v)\n         }"}, {"sha": "0a422c66433977588520b7ec0e4339ab5daf496e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -39,8 +39,8 @@ use self::lexical_region_resolve::LexicalRegionResolutions;\n use self::outlives::env::OutlivesEnvironment;\n use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, VerifyBound};\n use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n-use self::type_variable::TypeVariableOrigin;\n-use self::unify_key::{ToType, ConstVariableOrigin};\n+use self::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use self::unify_key::{ToType, ConstVariableOrigin, ConstVariableOriginKind};\n \n pub mod at;\n pub mod canonical;\n@@ -1110,13 +1110,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let ty_var_id = self.type_variables.borrow_mut().new_var(\n                     self.universe(),\n                     false,\n-                    TypeVariableOrigin::TypeParameterDefinition(span, param.name),\n+                    TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeParameterDefinition(param.name),\n+                        span,\n+                    },\n                 );\n \n                 self.tcx.mk_ty_var(ty_var_id).into()\n             }\n             GenericParamDefKind::Const { .. } => {\n-                let origin = ConstVariableOrigin::ConstParameterDefinition(span, param.name);\n+                let origin = ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstParameterDefinition(param.name),\n+                    span,\n+                };\n                 let const_var_id =\n                     self.const_unification_table\n                         .borrow_mut()\n@@ -1412,8 +1418,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         T: TypeFoldable<'tcx>\n     {\n         let fld_r = |br| self.next_region_var(LateBoundRegion(span, br, lbrct));\n-        let fld_t = |_| self.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n-        let fld_c = |_, ty| self.next_const_var(ty, ConstVariableOrigin::MiscVariable(span));\n+        let fld_t = |_| {\n+            self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::MiscVariable,\n+                span,\n+            })\n+        };\n+        let fld_c = |_, ty| self.next_const_var(ty, ConstVariableOrigin {\n+            kind: ConstVariableOriginKind:: MiscVariable,\n+            span,\n+        });\n         self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)\n     }\n "}, {"sha": "c00fa9b1b09b376a159f76b7ae1494f0be886687", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -270,15 +270,16 @@ where\n         projection_ty: ty::ProjectionTy<'tcx>,\n         value_ty: Ty<'tcx>,\n     ) -> Ty<'tcx> {\n-        use crate::infer::type_variable::TypeVariableOrigin;\n+        use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n         use crate::traits::WhereClause;\n         use syntax_pos::DUMMY_SP;\n \n         match value_ty.sty {\n             ty::Projection(other_projection_ty) => {\n-                let var = self\n-                    .infcx\n-                    .next_ty_var(TypeVariableOrigin::MiscVariable(DUMMY_SP));\n+                let var = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span: DUMMY_SP,\n+                });\n                 self.relate_projection_ty(projection_ty, var);\n                 self.relate_projection_ty(other_projection_ty, var);\n                 var"}, {"sha": "f90dc6ead41c706e97fec85c78dfcc5881a032e0", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -4,7 +4,7 @@ use syntax_pos::Span;\n use crate::hir::def_id::DefId;\n use crate::hir;\n use crate::hir::Node;\n-use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin};\n+use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use crate::traits::{self, PredicateObligation};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n@@ -864,7 +864,10 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n             return opaque_defn.concrete_ty;\n         }\n         let span = tcx.def_span(def_id);\n-        let ty_var = infcx.next_ty_var(TypeVariableOrigin::TypeInference(span));\n+        let ty_var = infcx.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::TypeInference,\n+            span,\n+        });\n \n         let predicates_of = tcx.predicates_of(def_id);\n         debug!("}, {"sha": "f487e7c8def0c56ba68fec2f60e3912f22300792", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -1,4 +1,5 @@\n-use super::{InferCtxt, FixupError, FixupResult, Span, type_variable::TypeVariableOrigin};\n+use super::{InferCtxt, FixupError, FixupResult, Span};\n+use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst, TypeFlags};\n use crate::ty::fold::{TypeFolder, TypeVisitor};\n@@ -123,8 +124,10 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'gcx, 'tcx>\n                 let ty_var_span =\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     let ty_vars = self.infcx.type_variables.borrow();\n-                    if let TypeVariableOrigin::TypeParameterDefinition(span, _name)\n-                        = *ty_vars.var_origin(ty_vid)\n+                    if let TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeParameterDefinition(_),\n+                        span,\n+                    } = *ty_vars.var_origin(ty_vid)\n                     {\n                         Some(span)\n                     } else {"}, {"sha": "dcafb0f3976ff639de1e6ac69b64569bd02bacf0", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -37,25 +37,28 @@ pub struct TypeVariableTable<'tcx> {\n     sub_relations: ut::UnificationTable<ut::InPlace<ty::TyVid>>,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct TypeVariableOrigin {\n+    pub kind: TypeVariableOriginKind,\n+    pub span: Span,\n+}\n+\n /// Reasons to create a type inference variable\n #[derive(Copy, Clone, Debug)]\n-pub enum TypeVariableOrigin {\n-    MiscVariable(Span),\n-    NormalizeProjectionType(Span),\n-    TypeInference(Span),\n-    TypeParameterDefinition(Span, InternedString),\n-\n-    /// one of the upvars or closure kind parameters in a `ClosureSubsts`\n-    /// (before it has been determined)\n-    ClosureSynthetic(Span),\n-    SubstitutionPlaceholder(Span),\n-    AutoDeref(Span),\n-    AdjustmentType(Span),\n-    DivergingStmt(Span),\n-    DivergingBlockExpr(Span),\n-    DivergingFn(Span),\n-    LatticeVariable(Span),\n-    Generalized(ty::TyVid),\n+pub enum TypeVariableOriginKind {\n+    MiscVariable,\n+    NormalizeProjectionType,\n+    TypeInference,\n+    TypeParameterDefinition(InternedString),\n+\n+    /// One of the upvars or closure kind parameters in a `ClosureSubsts`\n+    /// (before it has been determined).\n+    ClosureSynthetic,\n+    SubstitutionPlaceholder,\n+    AutoDeref,\n+    AdjustmentType,\n+    DivergingFn,\n+    LatticeVariable,\n }\n \n struct TypeVariableData {"}, {"sha": "287a666fc804382237f05efd4beb0299797ab250", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -79,13 +79,19 @@ impl ToType for FloatVarValue {\n \n // Generic consts.\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct ConstVariableOrigin {\n+    pub kind: ConstVariableOriginKind,\n+    pub span: Span,\n+}\n+\n /// Reasons to create a const inference variable\n #[derive(Copy, Clone, Debug)]\n-pub enum ConstVariableOrigin {\n-    MiscVariable(Span),\n-    ConstInference(Span),\n-    ConstParameterDefinition(Span, InternedString),\n-    SubstitutionPlaceholder(Span),\n+pub enum ConstVariableOriginKind {\n+    MiscVariable,\n+    ConstInference,\n+    ConstParameterDefinition(InternedString),\n+    SubstitutionPlaceholder,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -159,7 +165,10 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n         }?;\n \n         Ok(ConstVarValue {\n-            origin: ConstVariableOrigin::ConstInference(DUMMY_SP),\n+            origin: ConstVariableOrigin {\n+                kind: ConstVariableOriginKind::ConstInference,\n+                span: DUMMY_SP,\n+            },\n             val,\n         })\n     }"}, {"sha": "7cb7947ae412a94c4735a16fe982eb5f9570494a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -21,7 +21,7 @@ use crate::hir;\n use crate::hir::Node;\n use crate::hir::def_id::DefId;\n use crate::infer::{self, InferCtxt};\n-use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::session::DiagnosticMessageId;\n use crate::ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use crate::ty::GenericParamDefKind;\n@@ -1464,7 +1464,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let infcx = self.infcx;\n                     self.var_map.entry(ty).or_insert_with(||\n                         infcx.next_ty_var(\n-                            TypeVariableOrigin::TypeParameterDefinition(DUMMY_SP, name)))\n+                            TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::TypeParameterDefinition(name),\n+                                span: DUMMY_SP,\n+                            }\n+                        )\n+                    )\n                 } else {\n                     ty.super_fold_with(self)\n                 }"}, {"sha": "3ee6d0cc67b45537b042af643b5056fa8bbada52", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -14,7 +14,7 @@ use super::util;\n \n use crate::hir::def_id::DefId;\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n-use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::mir::interpret::{GlobalId, ConstValue};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_macros::HashStable;\n@@ -475,7 +475,11 @@ pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n             let tcx = selcx.infcx().tcx;\n             let def_id = projection_ty.item_def_id;\n             let ty_var = selcx.infcx().next_ty_var(\n-                TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n+                TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::NormalizeProjectionType,\n+                    span: tcx.def_span(def_id),\n+                },\n+            );\n             let projection = ty::Binder::dummy(ty::ProjectionPredicate {\n                 projection_ty,\n                 ty: ty_var\n@@ -810,7 +814,11 @@ fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tc\n     let tcx = selcx.infcx().tcx;\n     let def_id = projection_ty.item_def_id;\n     let new_value = selcx.infcx().next_ty_var(\n-        TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n+        TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::NormalizeProjectionType,\n+            span: tcx.def_span(def_id),\n+        },\n+    );\n     Normalized {\n         value: new_value,\n         obligations: vec![trait_obligation]"}, {"sha": "6a6ec8679018f7fd06dbe801155ff4718de5057f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::mir::interpret::{InterpError::BoundsCheck, ConstValue};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n@@ -2209,7 +2209,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.sty {\n                     let ty_right = right.ty(mir, tcx);\n                     let common_ty = self.infcx.next_ty_var(\n-                        TypeVariableOrigin::MiscVariable(mir.source_info(location).span),\n+                        TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: mir.source_info(location).span,\n+                        }\n                     );\n                     self.sub_types(\n                         common_ty,"}, {"sha": "3fea080f299e5c1f76ef0c61484aeb776a944c6c", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -6,7 +6,7 @@ use rustc::hir::{self, PatKind, Pat, ExprKind};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::infer;\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Kind;\n@@ -311,9 +311,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let max_len = cmp::max(expected_len, elements.len());\n \n                 let element_tys_iter = (0..max_len).map(|_| {\n-                    // FIXME: `MiscVariable` for now -- obtaining the span and name information\n-                    // from all tuple elements isn't trivial.\n-                    Kind::from(self.next_ty_var(TypeVariableOrigin::TypeInference(pat.span)))\n+                    Kind::from(self.next_ty_var(\n+                        // FIXME: `MiscVariable` for now -- obtaining the span and name information\n+                        // from all tuple elements isn't trivial.\n+                        TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::TypeInference,\n+                            span: pat.span,\n+                        },\n+                    ))\n                 });\n                 let element_tys = tcx.mk_substs(element_tys_iter);\n                 let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n@@ -339,7 +344,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n             PatKind::Box(ref inner) => {\n-                let inner_ty = self.next_ty_var(TypeVariableOrigin::TypeInference(inner.span));\n+                let inner_ty = self.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::TypeInference,\n+                    span: inner.span,\n+                });\n                 let uniq_ty = tcx.mk_box(inner_ty);\n \n                 if self.check_dereferencable(pat.span, expected, &inner) {\n@@ -372,7 +380,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                         _ => {\n                             let inner_ty = self.next_ty_var(\n-                                TypeVariableOrigin::TypeInference(inner.span));\n+                                TypeVariableOrigin {\n+                                    kind: TypeVariableOriginKind::TypeInference,\n+                                    span: inner.span,\n+                                }\n+                            );\n                             let mt = ty::TypeAndMut { ty: inner_ty, mutbl: mutbl };\n                             let region = self.next_region_var(infer::PatternRegion(pat.span));\n                             let rptr_ty = tcx.mk_ref(region, mt);\n@@ -685,7 +697,10 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 // arm for inconsistent arms or to the whole match when a `()` type\n                 // is required).\n                 Expectation::ExpectHasType(ety) if ety != self.tcx.mk_unit() => ety,\n-                _ => self.next_ty_var(TypeVariableOrigin::MiscVariable(expr.span)),\n+                _ => self.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span: expr.span,\n+                }),\n             };\n             CoerceMany::with_coercion_sites(coerce_first, arms)\n         };\n@@ -994,7 +1009,10 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             // ...but otherwise we want to use any supertype of the\n             // discriminant. This is sort of a workaround, see note (*) in\n             // `check_pat` for some details.\n-            let discrim_ty = self.next_ty_var(TypeVariableOrigin::TypeInference(discrim.span));\n+            let discrim_ty = self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::TypeInference,\n+                span: discrim.span,\n+            });\n             self.check_expr_has_type_or_error(discrim, discrim_ty);\n             discrim_ty\n         }"}, {"sha": "8d32583da4b22b00de6720d53aa4a74756109a52", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -8,7 +8,7 @@ use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::{infer, traits};\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_target::spec::abi;\n use syntax::ast::Ident;\n use syntax_pos::Span;\n@@ -193,9 +193,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let opt_input_types = opt_arg_exprs.map(|arg_exprs| [self.tcx.mk_tup(\n                 arg_exprs\n                 .iter()\n-                .map(|e| self.next_ty_var(\n-                    TypeVariableOrigin::TypeInference(e.span)\n-                ))\n+                .map(|e| {\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: e.span,\n+                    })\n+                })\n             )]);\n             let opt_input_types = opt_input_types.as_ref().map(AsRef::as_ref);\n "}, {"sha": "4427a83562e9ed50f7b993d78f9a9be3a8f4f0b9", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -7,7 +7,7 @@ use crate::middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{InferOk, InferResult};\n use rustc::infer::LateBoundRegionConversionTime;\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n@@ -102,7 +102,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     span_bug!(expr.span, \"closure has lifetime param\")\n                 }\n                 GenericParamDefKind::Type { .. } => {\n-                    self.infcx.next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n+                    self.infcx.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::ClosureSynthetic,\n+                        span: expr.span,\n+                    }).into()\n                 }\n                 GenericParamDefKind::Const => {\n                     span_bug!(expr.span, \"closure has const param\")"}, {"sha": "c35b43a5daeb5796e5aac44d90ece307ba2cc763", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -55,7 +55,7 @@ use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n@@ -176,7 +176,11 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 // micro-optimization: no need for this if `b` is\n                 // already resolved in some way.\n                 let diverging_ty = self.next_diverging_ty_var(\n-                    TypeVariableOrigin::AdjustmentType(self.cause.span));\n+                    TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::AdjustmentType,\n+                        span: self.cause.span,\n+                    },\n+                );\n                 self.unify_and(&b, &diverging_ty, simple(Adjust::NeverToAny))\n             } else {\n                 success(simple(Adjust::NeverToAny)(b), b, vec![])\n@@ -511,7 +515,10 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         // the `CoerceUnsized` target type and the expected type.\n         // We only have the latter, so we use an inference variable\n         // for the former and let type inference do the rest.\n-        let origin = TypeVariableOrigin::MiscVariable(self.cause.span);\n+        let origin = TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::MiscVariable,\n+            span: self.cause.span,\n+        };\n         let coerce_target = self.next_ty_var(origin);\n         let mut coercion = self.unify_and(coerce_target, target, |target| {\n             let unsize = Adjustment {"}, {"sha": "e55da40a4c21c89ddf6e60a0ffb186d5b16df86c", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -20,8 +20,8 @@ use rustc::traits::query::method_autoderef::{CandidateStep, MethodAutoderefSteps\n use rustc::traits::query::method_autoderef::{MethodAutoderefBadTy};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n-use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::infer::unify_key::ConstVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::util::nodemap::FxHashSet;\n use rustc::infer::{self, InferOk};\n use rustc::infer::canonical::{Canonical, QueryResponse};\n@@ -1573,12 +1573,17 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n                 GenericParamDefKind::Type { .. } => {\n-                    self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n-                        self.tcx.def_span(def_id))).into()\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n+                        span: self.tcx.def_span(def_id),\n+                    }).into()\n                 }\n                 GenericParamDefKind::Const { .. } => {\n                     let span = self.tcx.def_span(def_id);\n-                    let origin = ConstVariableOrigin::SubstitutionPlaceholder(span);\n+                    let origin = ConstVariableOrigin {\n+                        kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n+                        span,\n+                    };\n                     self.next_const_var(self.tcx.type_of(param.def_id), origin).into()\n                 }\n             }"}, {"sha": "82ccd3a866248ef64e6fac8876cf4bd55acf50eb", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::map as hir_map;\n use rustc::hir::print;\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use rustc::ty::print::with_crate_prefix;\n@@ -43,7 +43,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     self.probe(|_| {\n                         let fn_once_substs = tcx.mk_substs_trait(ty, &[\n-                            self.next_ty_var(TypeVariableOrigin::MiscVariable(span)).into()\n+                            self.next_ty_var(TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::MiscVariable,\n+                                span,\n+                            }).into()\n                         ]);\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = trait_ref.to_poly_trait_ref();"}, {"sha": "3286336c0f50160280db26e521665f91c129871d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -99,7 +99,7 @@ use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n-use rustc::infer::type_variable::{TypeVariableOrigin};\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n@@ -365,7 +365,12 @@ impl<'a, 'gcx, 'tcx> Expectation<'tcx> {\n     /// hard constraint exists, creates a fresh type variable.\n     fn coercion_target_type(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, span: Span) -> Ty<'tcx> {\n         self.only_has_type(fcx)\n-            .unwrap_or_else(|| fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span)))\n+            .unwrap_or_else(|| {\n+                fcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span,\n+                })\n+            })\n     }\n }\n \n@@ -930,7 +935,10 @@ impl<'a, 'gcx, 'tcx> GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n         match ty_opt {\n             None => {\n                 // infer the variable's type\n-                let var_ty = self.fcx.next_ty_var(TypeVariableOrigin::TypeInference(span));\n+                let var_ty = self.fcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::TypeInference,\n+                    span,\n+                });\n                 self.fcx.locals.borrow_mut().insert(nid, LocalTy {\n                     decl_ty: var_ty,\n                     revealed_ty: var_ty\n@@ -1064,7 +1072,10 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let span = body.value.span;\n \n     if body.is_generator && can_be_generator.is_some() {\n-        let yield_ty = fcx.next_ty_var(TypeVariableOrigin::TypeInference(span));\n+        let yield_ty = fcx.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::TypeInference,\n+            span,\n+        });\n         fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n         fcx.yield_ty = Some(yield_ty);\n     }\n@@ -1098,7 +1109,10 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     // This ensures that all nested generators appear before the entry of this generator.\n     // resolve_generator_interiors relies on this property.\n     let gen_ty = if can_be_generator.is_some() && body.is_generator {\n-        let interior = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n+        let interior = fcx.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::MiscVariable,\n+            span,\n+        });\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior));\n         Some(GeneratorTypes {\n             yield_ty: fcx.yield_ty.unwrap(),\n@@ -1136,7 +1150,11 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let mut actual_return_ty = coercion.complete(&fcx);\n     if actual_return_ty.is_never() {\n         actual_return_ty = fcx.next_diverging_ty_var(\n-            TypeVariableOrigin::DivergingFn(span));\n+            TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::DivergingFn,\n+                span,\n+            },\n+        );\n     }\n     fcx.demand_suptype(span, revealed_ret_ty, actual_return_ty);\n \n@@ -1930,7 +1948,10 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n-        self.next_ty_var(TypeVariableOrigin::TypeInference(span))\n+        self.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::TypeInference,\n+            span,\n+        })\n     }\n \n     fn ty_infer_for_def(&self,\n@@ -2638,7 +2659,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // If some lookup succeeds, write callee into table and extract index/element\n             // type from the method signature.\n             // If some lookup succeeded, install method in table\n-            let input_ty = self.next_ty_var(TypeVariableOrigin::AutoDeref(base_expr.span));\n+            let input_ty = self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::AutoDeref,\n+                span: base_expr.span,\n+            });\n             let method = self.try_overloaded_place_op(\n                 expr.span, self_ty, &[input_ty], needs, PlaceOp::Index);\n \n@@ -3136,7 +3160,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             assert!(!self.tables.borrow().adjustments().contains_key(expr.hir_id),\n                     \"expression with never type wound up being adjusted\");\n             let adj_ty = self.next_diverging_ty_var(\n-                TypeVariableOrigin::AdjustmentType(expr.span));\n+                TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::AdjustmentType,\n+                    span: expr.span,\n+                },\n+            );\n             self.apply_adjustments(expr, vec![Adjustment {\n                 kind: Adjust::NeverToAny,\n                 target: adj_ty\n@@ -4362,8 +4390,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 });\n \n                 let element_ty = if !args.is_empty() {\n-                    let coerce_to = uty.unwrap_or_else(\n-                        || self.next_ty_var(TypeVariableOrigin::TypeInference(expr.span)));\n+                    let coerce_to = uty.unwrap_or_else(|| {\n+                        self.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::TypeInference,\n+                            span: expr.span,\n+                        })\n+                    });\n                     let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n                     assert_eq!(self.diverges.get(), Diverges::Maybe);\n                     for e in args {\n@@ -4373,7 +4405,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     coerce.complete(self)\n                 } else {\n-                    self.next_ty_var(TypeVariableOrigin::TypeInference(expr.span))\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: expr.span,\n+                    })\n                 };\n                 tcx.mk_array(element_ty, args.len() as u64)\n             }\n@@ -4409,7 +4444,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         (uty, uty)\n                     }\n                     None => {\n-                        let ty = self.next_ty_var(TypeVariableOrigin::MiscVariable(element.span));\n+                        let ty = self.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: element.span,\n+                        });\n                         let element_ty = self.check_expr_has_type_or_error(&element, ty);\n                         (element_ty, ty)\n                     }"}, {"sha": "51a9103f73d8b55013a8f2698d682df2d109fca0", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec46c9a5399d5e95c05e3428c3abd264780705/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=1bec46c9a5399d5e95c05e3428c3abd264780705", "patch": "@@ -5,7 +5,7 @@ use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::TyKind::{Ref, Adt, FnDef, Str, Uint, Never, Tuple, Char, Array};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n-use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use errors::{self,Applicability};\n use syntax_pos::Span;\n use syntax::ast::Ident;\n@@ -163,7 +163,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // e.g., adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n                 // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n                 let lhs_ty = self.check_expr_with_needs(lhs_expr, Needs::None);\n-                let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n+                let fresh_var = self.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span: lhs_expr.span,\n+                });\n                 self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No)\n             }\n             IsAssign::Yes => {\n@@ -182,7 +185,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // using this variable as the expected type, which sometimes lets\n         // us do better coercions than we would be able to do otherwise,\n         // particularly for things like `String + &String`.\n-        let rhs_ty_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(rhs_expr.span));\n+        let rhs_ty_var = self.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::MiscVariable,\n+            span: rhs_expr.span,\n+        });\n \n         let result = self.lookup_op_method(lhs_ty, &[rhs_ty_var], Op::Binary(op, is_assign));\n "}]}