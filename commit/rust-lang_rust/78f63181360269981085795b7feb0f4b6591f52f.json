{"sha": "78f63181360269981085795b7feb0f4b6591f52f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjYzMTgxMzYwMjY5OTgxMDg1Nzk1YjdmZWIwZjRiNjU5MWY1MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T05:25:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T05:25:47Z"}, "message": "Auto merge of #41643 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #41449, #41509, #41608, #41613, #41636, #41637\n- Failed merges:", "tree": {"sha": "ce6da75badf5c520f59a05fc1bcea8b4db35521e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6da75badf5c520f59a05fc1bcea8b4db35521e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f63181360269981085795b7feb0f4b6591f52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f63181360269981085795b7feb0f4b6591f52f", "html_url": "https://github.com/rust-lang/rust/commit/78f63181360269981085795b7feb0f4b6591f52f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f63181360269981085795b7feb0f4b6591f52f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5b91134073349cd343253399d1beb901186f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5b91134073349cd343253399d1beb901186f9a", "html_url": "https://github.com/rust-lang/rust/commit/ba5b91134073349cd343253399d1beb901186f9a"}, {"sha": "43cb7c4212cde808475caeb440ee7436c2120acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cb7c4212cde808475caeb440ee7436c2120acc", "html_url": "https://github.com/rust-lang/rust/commit/43cb7c4212cde808475caeb440ee7436c2120acc"}], "stats": {"total": 961, "additions": 430, "deletions": 531}, "files": [{"sha": "571389041d6b643bdedff3ad52e2b36f9b9f7d04", "filename": "RELEASES.md", "status": "modified", "additions": 256, "deletions": 512, "changes": 768, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -949,254 +949,168 @@ Version 1.12.0 (2016-09-29)\n Highlights\n ----------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n \n Compiler\n --------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [Print the Rust target name, not the LLVM target name, with\n-  `--print target-list`]\n-  (https://github.com/rust-lang/rust/pull/35489)\n+  `--print target-list`](https://github.com/rust-lang/rust/pull/35489)\n * [The computation of `TypeId` is correct in some cases where it was previously\n-  producing inconsistent results]\n-  (https://github.com/rust-lang/rust/pull/35267)\n-* [The `mips-unknown-linux-gnu` target uses hardware floating point by default]\n-  (https://github.com/rust-lang/rust/pull/34910)\n+  producing inconsistent results](https://github.com/rust-lang/rust/pull/35267)\n+* [The `mips-unknown-linux-gnu` target uses hardware floating point by default](https://github.com/rust-lang/rust/pull/34910)\n * [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n   `--print relocation-models`, and `--print code-models` print the available\n   options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n-  `-C code-model` code generation arguments]\n-  (https://github.com/rust-lang/rust/pull/34845)\n+  `-C code-model` code generation arguments](https://github.com/rust-lang/rust/pull/34845)\n * [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n-  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`]\n-  (https://github.com/rust-lang/rust/pull/35060).\n+  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`](https://github.com/rust-lang/rust/pull/35060).\n   These targets produce statically-linked binaries. There are no binary release\n   builds yet though.\n \n Diagnostics\n -----------\n \n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n * [In error descriptions, references are now described in plain English,\n-  instead of as \"&-ptr\"]\n-  (https://github.com/rust-lang/rust/pull/35611)\n+  instead of as \"&-ptr\"](https://github.com/rust-lang/rust/pull/35611)\n * [In error type descriptions, unknown numeric types are named `{integer}` or\n-  `{float}` instead of `_`]\n-  (https://github.com/rust-lang/rust/pull/35080)\n-* [`rustc` emits a clearer error when inner attributes follow a doc comment]\n-  (https://github.com/rust-lang/rust/pull/34676)\n+  `{float}` instead of `_`](https://github.com/rust-lang/rust/pull/35080)\n+* [`rustc` emits a clearer error when inner attributes follow a doc comment](https://github.com/rust-lang/rust/pull/34676)\n \n Language\n --------\n \n-* [`macro_rules!` invocations can be made within `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34925)\n-* [`macro_rules!` meta-variables are hygienic]\n-  (https://github.com/rust-lang/rust/pull/35453)\n+* [`macro_rules!` invocations can be made within `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34925)\n+* [`macro_rules!` meta-variables are hygienic](https://github.com/rust-lang/rust/pull/35453)\n * [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n-  useful]\n-  (https://github.com/rust-lang/rust/pull/34908)\n+  useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n-  inside non-braces invocations]\n-  (https://github.com/rust-lang/rust/pull/34886)\n+  inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n * [Semicolons are properly required as statement delimeters inside\n-  `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34660)\n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n+  `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n Stabilized APIs\n ---------------\n \n-* [`Cell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n-* [`RefCell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n-* [`IpAddr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n-* [`IpAddr::is_loopback`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n-* [`IpAddr::is_multicast`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n-* [`Ipv4Addr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n-* [`Ipv6Addr::octets`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n-* [`LinkedList::contains`]\n-  (https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n-* [`VecDeque::contains`]\n-  (https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n-* [`ExitStatusExt::from_raw`]\n-  (https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n+* [`Cell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n+* [`RefCell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n+* [`IpAddr::is_unspecified`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n+* [`IpAddr::is_loopback`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n+* [`IpAddr::is_multicast`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n+* [`Ipv4Addr::is_unspecified`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n+* [`Ipv6Addr::octets`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n+* [`LinkedList::contains`](https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n+* [`VecDeque::contains`](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n+* [`ExitStatusExt::from_raw`](https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n   Both on Unix and Windows.\n-* [`Receiver::recv_timeout`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n-* [`RecvTimeoutError`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n-* [`BinaryHeap::peek_mut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n-* [`PeekMut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n-* [`iter::Product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Product.html)\n-* [`iter::Sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Sum.html)\n-* [`OccupiedEntry::remove_entry`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n-* [`VacantEntry::into_key`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n+* [`Receiver::recv_timeout`](https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n+* [`RecvTimeoutError`](https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n+* [`BinaryHeap::peek_mut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n+* [`PeekMut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n+* [`iter::Product`](https://doc.rust-lang.org/std/iter/trait.Product.html)\n+* [`iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\n+* [`OccupiedEntry::remove_entry`](https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n+* [`VacantEntry::into_key`](https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n \n Libraries\n ---------\n \n * [The `format!` macro and friends now allow a single argument to be formatted\n-  in multiple styles]\n-  (https://github.com/rust-lang/rust/pull/33642)\n+  in multiple styles](https://github.com/rust-lang/rust/pull/33642)\n * [The lifetime bounds on `[T]::binary_search_by` and\n-  `[T]::binary_search_by_key` have been adjusted to be more flexible]\n-  (https://github.com/rust-lang/rust/pull/34762)\n-* [`Option` implements `From` for its contained type]\n-  (https://github.com/rust-lang/rust/pull/34828)\n-* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type]\n-  (https://github.com/rust-lang/rust/pull/35392)\n-* [`RwLock` panics if the reader count overflows]\n-  (https://github.com/rust-lang/rust/pull/35378)\n-* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/35354)\n-* [`vec::Drain` and `binary_heap::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/34951)\n-* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`]\n-  (https://github.com/rust-lang/rust/pull/35064)\n-* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`]\n-  (https://github.com/rust-lang/rust/pull/34946)\n+  `[T]::binary_search_by_key` have been adjusted to be more flexible](https://github.com/rust-lang/rust/pull/34762)\n+* [`Option` implements `From` for its contained type](https://github.com/rust-lang/rust/pull/34828)\n+* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type](https://github.com/rust-lang/rust/pull/35392)\n+* [`RwLock` panics if the reader count overflows](https://github.com/rust-lang/rust/pull/35378)\n+* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant](https://github.com/rust-lang/rust/pull/35354)\n+* [`vec::Drain` and `binary_heap::Drain` are covariant](https://github.com/rust-lang/rust/pull/34951)\n+* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`](https://github.com/rust-lang/rust/pull/35064)\n+* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`](https://github.com/rust-lang/rust/pull/34946)\n * [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34937)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34937)\n * [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34885)\n-* [`String` implements `AddAssign`]\n-  (https://github.com/rust-lang/rust/pull/34890)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34885)\n+* [`String` implements `AddAssign`](https://github.com/rust-lang/rust/pull/34890)\n * [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n-  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits]\n-  (https://github.com/rust-lang/rust/pull/34879)\n-* [`FileType` implements `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34757)\n-* [References to `Mutex` and `RwLock` are unwind-safe]\n-  (https://github.com/rust-lang/rust/pull/34756)\n+  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits](https://github.com/rust-lang/rust/pull/34879)\n+* [`FileType` implements `Debug`](https://github.com/rust-lang/rust/pull/34757)\n+* [References to `Mutex` and `RwLock` are unwind-safe](https://github.com/rust-lang/rust/pull/34756)\n * [`mpsc::sync_channel` `Receiver`s return any available message before\n-  reporting a disconnect]\n-  (https://github.com/rust-lang/rust/pull/34731)\n-* [Unicode definitions have been updated to 9.0]\n-  (https://github.com/rust-lang/rust/pull/34599)\n-* [`env` iterators implement `DoubleEndedIterator`]\n-  (https://github.com/rust-lang/rust/pull/33312)\n+  reporting a disconnect](https://github.com/rust-lang/rust/pull/34731)\n+* [Unicode definitions have been updated to 9.0](https://github.com/rust-lang/rust/pull/34599)\n+* [`env` iterators implement `DoubleEndedIterator`](https://github.com/rust-lang/rust/pull/33312)\n \n Cargo\n -----\n \n-* [Support local mirrors of registries]\n-  (https://github.com/rust-lang/cargo/pull/2857)\n-* [Add support for command aliases]\n-  (https://github.com/rust-lang/cargo/pull/2679)\n-* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides]\n-  (https://github.com/rust-lang/cargo/pull/3007)\n-* [Make `cargo doc --open --target` work as expected]\n-  (https://github.com/rust-lang/cargo/pull/2988)\n-* [Speed up noop registry updates]\n-  (https://github.com/rust-lang/cargo/pull/2974)\n-* [Update OpenSSL]\n-  (https://github.com/rust-lang/cargo/pull/2971)\n-* [Fix `--panic=abort` with plugins]\n-  (https://github.com/rust-lang/cargo/pull/2954)\n-* [Always pass `-C metadata` to the compiler]\n-  (https://github.com/rust-lang/cargo/pull/2946)\n-* [Fix depending on git repos with workspaces]\n-  (https://github.com/rust-lang/cargo/pull/2938)\n-* [Add a `--lib` flag to `cargo new`]\n-  (https://github.com/rust-lang/cargo/pull/2921)\n-* [Add `http.cainfo` for custom certs]\n-  (https://github.com/rust-lang/cargo/pull/2917)\n-* [Indicate the compilation profile after compiling]\n-  (https://github.com/rust-lang/cargo/pull/2909)\n-* [Allow enabling features for dependencies with `--features`]\n-  (https://github.com/rust-lang/cargo/pull/2876)\n-* [Add `--jobs` flag to `cargo package`]\n-  (https://github.com/rust-lang/cargo/pull/2867)\n-* [Add `--dry-run` to `cargo publish`]\n-  (https://github.com/rust-lang/cargo/pull/2849)\n-* [Add support for `RUSTDOCFLAGS`]\n-  (https://github.com/rust-lang/cargo/pull/2794)\n+* [Support local mirrors of registries](https://github.com/rust-lang/cargo/pull/2857)\n+* [Add support for command aliases](https://github.com/rust-lang/cargo/pull/2679)\n+* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides](https://github.com/rust-lang/cargo/pull/3007)\n+* [Make `cargo doc --open --target` work as expected](https://github.com/rust-lang/cargo/pull/2988)\n+* [Speed up noop registry updates](https://github.com/rust-lang/cargo/pull/2974)\n+* [Update OpenSSL](https://github.com/rust-lang/cargo/pull/2971)\n+* [Fix `--panic=abort` with plugins](https://github.com/rust-lang/cargo/pull/2954)\n+* [Always pass `-C metadata` to the compiler](https://github.com/rust-lang/cargo/pull/2946)\n+* [Fix depending on git repos with workspaces](https://github.com/rust-lang/cargo/pull/2938)\n+* [Add a `--lib` flag to `cargo new`](https://github.com/rust-lang/cargo/pull/2921)\n+* [Add `http.cainfo` for custom certs](https://github.com/rust-lang/cargo/pull/2917)\n+* [Indicate the compilation profile after compiling](https://github.com/rust-lang/cargo/pull/2909)\n+* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)\n+* [Add `--jobs` flag to `cargo package`](https://github.com/rust-lang/cargo/pull/2867)\n+* [Add `--dry-run` to `cargo publish`](https://github.com/rust-lang/cargo/pull/2849)\n+* [Add support for `RUSTDOCFLAGS`](https://github.com/rust-lang/cargo/pull/2794)\n \n Performance\n -----------\n \n-* [`panic::catch_unwind` is more optimized]\n-  (https://github.com/rust-lang/rust/pull/35444)\n-* [`panic::catch_unwind` no longer accesses thread-local storage on entry]\n-  (https://github.com/rust-lang/rust/pull/34866)\n+* [`panic::catch_unwind` is more optimized](https://github.com/rust-lang/rust/pull/35444)\n+* [`panic::catch_unwind` no longer accesses thread-local storage on entry](https://github.com/rust-lang/rust/pull/34866)\n \n Tooling\n -------\n \n * [Test binaries now support a `--test-threads` argument to specify the number\n   of threads used to run tests, and which acts the same as the\n-  `RUST_TEST_THREADS` environment variable]\n-  (https://github.com/rust-lang/rust/pull/35414)  \n-* [The test runner now emits a warning when tests run over 60 seconds]\n-  (https://github.com/rust-lang/rust/pull/35405)\n-* [rustdoc: Fix methods in search results]\n-  (https://github.com/rust-lang/rust/pull/34752)\n-* [`rust-lldb` warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  `RUST_TEST_THREADS` environment variable](https://github.com/rust-lang/rust/pull/35414)  \n+* [The test runner now emits a warning when tests run over 60 seconds](https://github.com/rust-lang/rust/pull/35405)\n+* [rustdoc: Fix methods in search results](https://github.com/rust-lang/rust/pull/34752)\n+* [`rust-lldb` warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * [Rust releases now come with source packages that can be installed by rustup\n-  via `rustup component add rust-src`]\n-  (https://github.com/rust-lang/rust/pull/34366).\n+  via `rustup component add rust-src`](https://github.com/rust-lang/rust/pull/34366).\n   The resulting source code can be used by tools and IDES, located in the\n   sysroot under `lib/rustlib/src`.\n \n Misc\n ----\n \n-* [The compiler can now be built against LLVM 3.9]\n-  (https://github.com/rust-lang/rust/pull/35594)\n+* [The compiler can now be built against LLVM 3.9](https://github.com/rust-lang/rust/pull/35594)\n * Many minor improvements to the documentation.\n-* [The Rust exception handling \"personality\" routine is now written in Rust]\n-  (https://github.com/rust-lang/rust/pull/34832)\n+* [The Rust exception handling \"personality\" routine is now written in Rust](https://github.com/rust-lang/rust/pull/34832)\n \n Compatibility Notes\n -------------------\n \n * [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n-  with the lowercase format instead of the uppercase]\n-  (https://github.com/rust-lang/rust/pull/35084)\n+  with the lowercase format instead of the uppercase](https://github.com/rust-lang/rust/pull/35084)\n * [When formatting strings, if \"precision\" is specified, the \"fill\",\n-  \"align\" and \"width\" specifiers are no longer ignored]\n-  (https://github.com/rust-lang/rust/pull/34544)\n-* [The `Debug` impl for strings no longer escapes all non-ASCII characters]\n-  (https://github.com/rust-lang/rust/pull/34485)\n+  \"align\" and \"width\" specifiers are no longer ignored](https://github.com/rust-lang/rust/pull/34544)\n+* [The `Debug` impl for strings no longer escapes all non-ASCII characters](https://github.com/rust-lang/rust/pull/34485)\n \n \n Version 1.11.0 (2016-08-18)\n@@ -1205,142 +1119,92 @@ Version 1.11.0 (2016-08-18)\n Language\n --------\n \n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n-* [Support nested `cfg_attr` attributes]\n-  (https://github.com/rust-lang/rust/pull/34216)\n-* [Allow statement-generating braced macro invocations at the end of blocks]\n-  (https://github.com/rust-lang/rust/pull/34436)\n-* [Macros can be expanded inside of trait definitions]\n-  (https://github.com/rust-lang/rust/pull/34213)\n-* [`#[macro_use]` works properly when it is itself expanded from a macro]\n-  (https://github.com/rust-lang/rust/pull/34032)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n+* [Support nested `cfg_attr` attributes](https://github.com/rust-lang/rust/pull/34216)\n+* [Allow statement-generating braced macro invocations at the end of blocks](https://github.com/rust-lang/rust/pull/34436)\n+* [Macros can be expanded inside of trait definitions](https://github.com/rust-lang/rust/pull/34213)\n+* [`#[macro_use]` works properly when it is itself expanded from a macro](https://github.com/rust-lang/rust/pull/34032)\n \n Stabilized APIs\n ---------------\n \n-* [`BinaryHeap::append`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n-* [`BTreeMap::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n-* [`BTreeMap::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n-* [`BTreeSet::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n-* [`BTreeSet::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n-* [`f32::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n+* [`BinaryHeap::append`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n+* [`BTreeMap::append`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n+* [`BTreeMap::split_off`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n+* [`BTreeSet::append`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n+* [`BTreeSet::split_off`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n+* [`f32::to_degrees`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f32::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n+* [`f32::to_radians`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n+* [`f64::to_degrees`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n+* [`f64::to_radians`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`Iterator::sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Iterator::product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Cell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n-* [`RefCell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n+* [`Iterator::sum`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Iterator::product`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Cell::get_mut`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n+* [`RefCell::get_mut`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n \n Libraries\n ---------\n \n * [The `thread_local!` macro supports multiple definitions in a single\n-   invocation, and can apply attributes]\n-  (https://github.com/rust-lang/rust/pull/34077)\n-* [`Cow` implements `Default`]\n-  (https://github.com/rust-lang/rust/pull/34305)\n+   invocation, and can apply attributes](https://github.com/rust-lang/rust/pull/34077)\n+* [`Cow` implements `Default`](https://github.com/rust-lang/rust/pull/34305)\n * [`Wrapping` implements binary, octal, lower-hex and upper-hex\n-  `Display` formatting]\n-  (https://github.com/rust-lang/rust/pull/34190)\n-* [The range types implement `Hash`]\n-  (https://github.com/rust-lang/rust/pull/34180)\n-* [`lookup_host` ignores unknown address types]\n-  (https://github.com/rust-lang/rust/pull/34067)\n-* [`assert_eq!` accepts a custom error message, like `assert!` does]\n-  (https://github.com/rust-lang/rust/pull/33976)\n-* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"]\n-  (https://github.com/rust-lang/rust/pull/33803)\n+  `Display` formatting](https://github.com/rust-lang/rust/pull/34190)\n+* [The range types implement `Hash`](https://github.com/rust-lang/rust/pull/34180)\n+* [`lookup_host` ignores unknown address types](https://github.com/rust-lang/rust/pull/34067)\n+* [`assert_eq!` accepts a custom error message, like `assert!` does](https://github.com/rust-lang/rust/pull/33976)\n+* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"](https://github.com/rust-lang/rust/pull/33803)\n \n Cargo\n -----\n \n-* [Disallow specifying features of transitive deps]\n-  (https://github.com/rust-lang/cargo/pull/2821)\n-* [Add color support for Windows consoles]\n-  (https://github.com/rust-lang/cargo/pull/2804)\n-* [Fix `harness = false` on `[lib]` sections]\n-  (https://github.com/rust-lang/cargo/pull/2795)\n-* [Don't panic when `links` contains a '.']\n-  (https://github.com/rust-lang/cargo/pull/2787)\n-* [Build scripts can emit warnings]\n-  (https://github.com/rust-lang/cargo/pull/2630),\n+* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)\n+* [Add color support for Windows consoles](https://github.com/rust-lang/cargo/pull/2804)\n+* [Fix `harness = false` on `[lib]` sections](https://github.com/rust-lang/cargo/pull/2795)\n+* [Don't panic when `links` contains a '.'](https://github.com/rust-lang/cargo/pull/2787)\n+* [Build scripts can emit warnings](https://github.com/rust-lang/cargo/pull/2630),\n   and `-vv` prints warnings for all crates.\n-* [Ignore file locks on OS X NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2720)\n-* [Don't warn about `package.metadata` keys]\n-  (https://github.com/rust-lang/cargo/pull/2668).\n+* [Ignore file locks on OS X NFS mounts](https://github.com/rust-lang/cargo/pull/2720)\n+* [Don't warn about `package.metadata` keys](https://github.com/rust-lang/cargo/pull/2668).\n   This provides room for expansion by arbitrary tools.\n-* [Add support for cdylib crate types]\n-  (https://github.com/rust-lang/cargo/pull/2741)\n-* [Prevent publishing crates when files are dirty]\n-  (https://github.com/rust-lang/cargo/pull/2781)\n-* [Don't fetch all crates on clean]\n-  (https://github.com/rust-lang/cargo/pull/2704)\n-* [Propagate --color option to rustc]\n-  (https://github.com/rust-lang/cargo/pull/2779)\n-* [Fix `cargo doc --open` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2780)\n-* [Improve autocompletion]\n-  (https://github.com/rust-lang/cargo/pull/2772)\n-* [Configure colors of stderr as well as stdout]\n-  (https://github.com/rust-lang/cargo/pull/2739)\n+* [Add support for cdylib crate types](https://github.com/rust-lang/cargo/pull/2741)\n+* [Prevent publishing crates when files are dirty](https://github.com/rust-lang/cargo/pull/2781)\n+* [Don't fetch all crates on clean](https://github.com/rust-lang/cargo/pull/2704)\n+* [Propagate --color option to rustc](https://github.com/rust-lang/cargo/pull/2779)\n+* [Fix `cargo doc --open` on Windows](https://github.com/rust-lang/cargo/pull/2780)\n+* [Improve autocompletion](https://github.com/rust-lang/cargo/pull/2772)\n+* [Configure colors of stderr as well as stdout](https://github.com/rust-lang/cargo/pull/2739)\n \n Performance\n -----------\n \n * [Caching projections speeds up type check dramatically for some\n-  workloads]\n-  (https://github.com/rust-lang/rust/pull/33816)\n-* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4]\n-  (https://github.com/rust-lang/rust/pull/33940)\n+  workloads](https://github.com/rust-lang/rust/pull/33816)\n+* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4](https://github.com/rust-lang/rust/pull/33940)\n   This hasher is faster, but is believed to provide sufficient\n   protection from collision attacks.\n-* [Comparison of `Ipv4Addr` is 10x faster]\n-  (https://github.com/rust-lang/rust/pull/33891)\n+* [Comparison of `Ipv4Addr` is 10x faster](https://github.com/rust-lang/rust/pull/33891)\n \n Rustdoc\n -------\n \n-* [Fix empty implementation section on some module pages]\n-  (https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists]\n-  (https://github.com/rust-lang/rust/pull/34479)\n-* [Fix search result layout for enum variants and struct fields]\n-  (https://github.com/rust-lang/rust/pull/34477)\n-* [Fix issues with source links to external crates]\n-  (https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports]\n-  (https://github.com/rust-lang/rust/pull/34245)\n+* [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n+* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n+* [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n+* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n \n-* [rustc is better at finding the MSVC toolchain]\n-  (https://github.com/rust-lang/rust/pull/34492)\n+* [rustc is better at finding the MSVC toolchain](https://github.com/rust-lang/rust/pull/34492)\n * [When emitting debug info, rustc emits frame pointers for closures,\n-  shims and glue, as it does for all other functions]\n-  (https://github.com/rust-lang/rust/pull/33909)\n-* [rust-lldb warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  shims and glue, as it does for all other functions](https://github.com/rust-lang/rust/pull/33909)\n+* [rust-lldb warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * Many more errors have been given error codes and extended\n   explanations\n * API documentation continues to be improved, with many new examples\n@@ -1349,30 +1213,22 @@ Misc\n ----\n \n * [rustc no longer hangs when dependencies recursively re-export\n-  submodules]\n-  (https://github.com/rust-lang/rust/pull/34542)\n-* [rustc requires LLVM 3.7+]\n-  (https://github.com/rust-lang/rust/pull/34104)\n+  submodules](https://github.com/rust-lang/rust/pull/34542)\n+* [rustc requires LLVM 3.7+](https://github.com/rust-lang/rust/pull/34104)\n * [The 'How Safe and Unsafe Interact' chapter of The Rustonomicon was\n-  rewritten]\n-  (https://github.com/rust-lang/rust/pull/33895)\n-* [rustc support 16-bit pointer sizes]\n-  (https://github.com/rust-lang/rust/pull/33460).\n+  rewritten](https://github.com/rust-lang/rust/pull/33895)\n+* [rustc support 16-bit pointer sizes](https://github.com/rust-lang/rust/pull/33460).\n   No targets use this yet, but it works toward AVR support.\n \n Compatibility Notes\n -------------------\n \n-* [`const`s and `static`s may not have unsized types]\n-  (https://github.com/rust-lang/rust/pull/34443)\n+* [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n-  in order to ensure syntax forward-compatibility have been enabled]\n-  (https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550]\n-  (https://github.com/rust-lang/rfcs/pull/1384),\n+  in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n+  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n-* [`cfg` attribute process has been refactored to fix various bugs]\n-  (https://github.com/rust-lang/rust/pull/33706).\n+* [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n \n \n@@ -1383,21 +1239,15 @@ Language\n --------\n \n * [Allow `concat_idents!` in type positions as well as in expression\n-  positions]\n-  (https://github.com/rust-lang/rust/pull/33735).\n-* [`Copy` types are required to have a trivial implementation of `Clone`]\n-  (https://github.com/rust-lang/rust/pull/33420).\n+  positions](https://github.com/rust-lang/rust/pull/33735).\n+* [`Copy` types are required to have a trivial implementation of `Clone`](https://github.com/rust-lang/rust/pull/33420).\n   [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n-* [Single-variant enums support the `#[repr(..)]` attribute]\n-  (https://github.com/rust-lang/rust/pull/33355).\n-* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods]\n-  (https://github.com/rust-lang/rust/pull/32908).\n+* [Single-variant enums support the `#[repr(..)]` attribute](https://github.com/rust-lang/rust/pull/33355).\n+* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods](https://github.com/rust-lang/rust/pull/32908).\n * [`panic!` can be converted to a runtime abort with the\n-  `-C panic=abort` flag]\n-  (https://github.com/rust-lang/rust/pull/32900).\n+  `-C panic=abort` flag](https://github.com/rust-lang/rust/pull/32900).\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Add a new crate type, 'cdylib']\n-  (https://github.com/rust-lang/rust/pull/33553).\n+* [Add a new crate type, 'cdylib'](https://github.com/rust-lang/rust/pull/33553).\n   cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n   [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md).\n   Note that Cargo does not yet directly support cdylibs.\n@@ -1411,242 +1261,146 @@ Stabilized APIs\n * `os::windows::fs::OpenOptionsExt::attributes`\n * `os::windows::fs::OpenOptionsExt::security_qos_flags`\n * `os::unix::fs::OpenOptionsExt::custom_flags`\n-* [`sync::Weak::new`]\n-  (http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n+* [`sync::Weak::new`](http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n * `Default for sync::Weak`\n-* [`panic::set_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n-* [`panic::take_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n-* [`panic::PanicInfo`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n-* [`panic::PanicInfo::payload`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n-* [`panic::PanicInfo::location`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n-* [`panic::Location`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html)\n-* [`panic::Location::file`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n-* [`panic::Location::line`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n-* [`ffi::CStr::from_bytes_with_nul`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n-* [`ffi::CStr::from_bytes_with_nul_unchecked`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n-* [`ffi::FromBytesWithNulError`]\n-  (http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n-* [`fs::Metadata::modified`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n-* [`fs::Metadata::accessed`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n-* [`fs::Metadata::created`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n+* [`panic::set_hook`](http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n+* [`panic::take_hook`](http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n+* [`panic::PanicInfo`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n+* [`panic::PanicInfo::payload`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n+* [`panic::PanicInfo::location`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n+* [`panic::Location`](http://doc.rust-lang.org/std/panic/struct.Location.html)\n+* [`panic::Location::file`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n+* [`panic::Location::line`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n+* [`ffi::CStr::from_bytes_with_nul`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n+* [`ffi::CStr::from_bytes_with_nul_unchecked`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n+* [`ffi::FromBytesWithNulError`](http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n+* [`fs::Metadata::modified`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n+* [`fs::Metadata::accessed`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n+* [`fs::Metadata::created`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n * `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n * `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n-* [`SocketAddr::is_unnamed`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n-* [`SocketAddr::as_pathname`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n-* [`UnixStream::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n-* [`UnixStream::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n-* [`UnixStream::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n-* [`UnixStream::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n-* [`UnixStream::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n-* [`UnixStream::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n-* [`UnixStream::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n-* [`UnixStream::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n+* [`SocketAddr::is_unnamed`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n+* [`SocketAddr::as_pathname`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n+* [`UnixStream::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n+* [`UnixStream::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n+* [`UnixStream::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n+* [`UnixStream::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n+* [`UnixStream::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n+* [`UnixStream::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n+* [`UnixStream::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n+* [`UnixStream::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n * Read/Write/RawFd impls for `UnixStream`\n-* [`UnixListener::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n-* [`UnixListener::accept`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n-* [`UnixListener::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n-* [`UnixListener::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n-* [`UnixListener::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n-* [`UnixListener::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n-* [`UnixListener::incoming`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n+* [`UnixListener::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n+* [`UnixListener::accept`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n+* [`UnixListener::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n+* [`UnixListener::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n+* [`UnixListener::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n+* [`UnixListener::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n+* [`UnixListener::incoming`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n * RawFd impls for `UnixListener`\n-* [`UnixDatagram::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n-* [`UnixDatagram::unbound`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n-* [`UnixDatagram::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n-* [`UnixDatagram::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n-* [`UnixDatagram::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n-* [`UnixDatagram::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n-* [`UnixDatagram::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n-* [`UnixDatagram::recv_from`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n-* [`UnixDatagram::recv`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n-* [`UnixDatagram::send_to`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n-* [`UnixDatagram::send`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n-* [`UnixDatagram::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n-* [`UnixDatagram::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n-* [`UnixDatagram::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n-* [`UnixDatagram::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n-* [`UnixDatagram::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n-* [`UnixDatagram::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n-* [`UnixDatagram::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n+* [`UnixDatagram::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n+* [`UnixDatagram::unbound`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n+* [`UnixDatagram::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n+* [`UnixDatagram::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n+* [`UnixDatagram::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n+* [`UnixDatagram::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n+* [`UnixDatagram::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n+* [`UnixDatagram::recv_from`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n+* [`UnixDatagram::recv`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n+* [`UnixDatagram::send_to`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n+* [`UnixDatagram::send`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n+* [`UnixDatagram::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n+* [`UnixDatagram::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n+* [`UnixDatagram::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n+* [`UnixDatagram::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n+* [`UnixDatagram::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n+* [`UnixDatagram::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n+* [`UnixDatagram::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n * RawFd impls for `UnixDatagram`\n * `{BTree,Hash}Map::values_mut`\n-* [`<[_]>::binary_search_by_key`]\n-  (http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n+* [`<[_]>::binary_search_by_key`](http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n \n Libraries\n ---------\n \n-* [The `abs_sub` method of floats is deprecated]\n-  (https://github.com/rust-lang/rust/pull/33664).\n+* [The `abs_sub` method of floats is deprecated](https://github.com/rust-lang/rust/pull/33664).\n   The semantics of this minor method are subtle and probably not what\n   most people want.\n-* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord]\n-  (https://github.com/rust-lang/rust/pull/33306).\n+* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord](https://github.com/rust-lang/rust/pull/33306).\n * [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n   will fall back to `/dev/urandom` temporarily to avoid blocking\n-  during early boot]\n-  (https://github.com/rust-lang/rust/pull/33086).\n-* [Implemented negation for wrapping numerals]\n-  (https://github.com/rust-lang/rust/pull/33067).\n-* [Implement `Clone` for `binary_heap::IntoIter`]\n-  (https://github.com/rust-lang/rust/pull/33050).\n-* [Implement `Display` and `Hash` for `std::num::Wrapping`]\n-  (https://github.com/rust-lang/rust/pull/33023).\n-* [Add `Default` implementation for `&CStr`, `CString`]\n-  (https://github.com/rust-lang/rust/pull/32990).\n-* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`]\n-  (https://github.com/rust-lang/rust/pull/32866).\n+  during early boot](https://github.com/rust-lang/rust/pull/33086).\n+* [Implemented negation for wrapping numerals](https://github.com/rust-lang/rust/pull/33067).\n+* [Implement `Clone` for `binary_heap::IntoIter`](https://github.com/rust-lang/rust/pull/33050).\n+* [Implement `Display` and `Hash` for `std::num::Wrapping`](https://github.com/rust-lang/rust/pull/33023).\n+* [Add `Default` implementation for `&CStr`, `CString`](https://github.com/rust-lang/rust/pull/32990).\n+* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`](https://github.com/rust-lang/rust/pull/32866).\n * [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n-  `Mutex`, `RwLock`]\n-  (https://github.com/rust-lang/rust/pull/32785).\n+  `Mutex`, `RwLock`](https://github.com/rust-lang/rust/pull/32785).\n \n Cargo\n -----\n-* [Cargo.toml supports the `profile.*.panic` option]\n-  (https://github.com/rust-lang/cargo/pull/2687).\n+* [Cargo.toml supports the `profile.*.panic` option](https://github.com/rust-lang/cargo/pull/2687).\n   This controls the runtime behavior of the `panic!` macro\n   and can be either \"unwind\" (the default), or \"abort\".\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Don't throw away errors with `-p` arguments]\n-  (https://github.com/rust-lang/cargo/pull/2723).\n-* [Report status to stderr instead of stdout]\n-  (https://github.com/rust-lang/cargo/pull/2693).\n+* [Don't throw away errors with `-p` arguments](https://github.com/rust-lang/cargo/pull/2723).\n+* [Report status to stderr instead of stdout](https://github.com/rust-lang/cargo/pull/2693).\n * [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n-  variable that corresponds to the `links` field of the manifest]\n-  (https://github.com/rust-lang/cargo/pull/2710).\n-* [Ban keywords from crate names]\n-  (https://github.com/rust-lang/cargo/pull/2707).\n-* [Canonicalize `CARGO_HOME` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2604).\n-* [Retry network requests]\n-  (https://github.com/rust-lang/cargo/pull/2396).\n+  variable that corresponds to the `links` field of the manifest](https://github.com/rust-lang/cargo/pull/2710).\n+* [Ban keywords from crate names](https://github.com/rust-lang/cargo/pull/2707).\n+* [Canonicalize `CARGO_HOME` on Windows](https://github.com/rust-lang/cargo/pull/2604).\n+* [Retry network requests](https://github.com/rust-lang/cargo/pull/2396).\n   By default they are retried twice, which can be customized with the\n   `net.retry` value in `.cargo/config`.\n-* [Don't print extra error info for failing subcommands]\n-  (https://github.com/rust-lang/cargo/pull/2674).\n-* [Add `--force` flag to `cargo install`]\n-  (https://github.com/rust-lang/cargo/pull/2405).\n-* [Don't use `flock` on NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2623).\n-* [Prefer building `cargo install` artifacts in temporary directories]\n-  (https://github.com/rust-lang/cargo/pull/2610).\n+* [Don't print extra error info for failing subcommands](https://github.com/rust-lang/cargo/pull/2674).\n+* [Add `--force` flag to `cargo install`](https://github.com/rust-lang/cargo/pull/2405).\n+* [Don't use `flock` on NFS mounts](https://github.com/rust-lang/cargo/pull/2623).\n+* [Prefer building `cargo install` artifacts in temporary directories](https://github.com/rust-lang/cargo/pull/2610).\n   Makes it possible to install multiple crates in parallel.\n-* [Add `cargo test --doc`]\n-  (https://github.com/rust-lang/cargo/pull/2578).\n-* [Add `cargo --explain`]\n-  (https://github.com/rust-lang/cargo/pull/2551).\n-* [Don't print warnings when `-q` is passed]\n-  (https://github.com/rust-lang/cargo/pull/2576).\n-* [Add `cargo doc --lib` and `--bin`]\n-  (https://github.com/rust-lang/cargo/pull/2577).\n-* [Don't require build script output to be UTF-8]\n-  (https://github.com/rust-lang/cargo/pull/2560).\n-* [Correctly attempt multiple git usernames]\n-  (https://github.com/rust-lang/cargo/pull/2584).\n+* [Add `cargo test --doc`](https://github.com/rust-lang/cargo/pull/2578).\n+* [Add `cargo --explain`](https://github.com/rust-lang/cargo/pull/2551).\n+* [Don't print warnings when `-q` is passed](https://github.com/rust-lang/cargo/pull/2576).\n+* [Add `cargo doc --lib` and `--bin`](https://github.com/rust-lang/cargo/pull/2577).\n+* [Don't require build script output to be UTF-8](https://github.com/rust-lang/cargo/pull/2560).\n+* [Correctly attempt multiple git usernames](https://github.com/rust-lang/cargo/pull/2584).\n \n Performance\n -----------\n \n * [rustc memory usage was reduced by refactoring the context used for\n-  type checking]\n-  (https://github.com/rust-lang/rust/pull/33425).\n+  type checking](https://github.com/rust-lang/rust/pull/33425).\n * [Speed up creation of `HashMap`s by caching the random keys used\n-  to initialize the hash state]\n-  (https://github.com/rust-lang/rust/pull/33318).\n-* [The `find` implementation for `Chain` iterators is 2x faster]\n-  (https://github.com/rust-lang/rust/pull/33289).\n-* [Trait selection optimizations speed up type checking by 15%]\n-  (https://github.com/rust-lang/rust/pull/33138).\n-* [Efficient trie lookup for boolean Unicode properties]\n-  (https://github.com/rust-lang/rust/pull/33098).\n+  to initialize the hash state](https://github.com/rust-lang/rust/pull/33318).\n+* [The `find` implementation for `Chain` iterators is 2x faster](https://github.com/rust-lang/rust/pull/33289).\n+* [Trait selection optimizations speed up type checking by 15%](https://github.com/rust-lang/rust/pull/33138).\n+* [Efficient trie lookup for boolean Unicode properties](https://github.com/rust-lang/rust/pull/33098).\n   10x faster than the previous lookup tables.\n-* [Special case `#[derive(Copy, Clone)]` to avoid bloat]\n-  (https://github.com/rust-lang/rust/pull/31414).\n+* [Special case `#[derive(Copy, Clone)]` to avoid bloat](https://github.com/rust-lang/rust/pull/31414).\n \n Usability\n ---------\n \n * Many incremental improvements to documentation and rustdoc.\n-* [rustdoc: List blanket trait impls]\n-  (https://github.com/rust-lang/rust/pull/33514).\n-* [rustdoc: Clean up ABI rendering]\n-  (https://github.com/rust-lang/rust/pull/33151).\n-* [Indexing with the wrong type produces a more informative error]\n-  (https://github.com/rust-lang/rust/pull/33401).\n-* [Improve diagnostics for constants being used in irrefutable patterns]\n-  (https://github.com/rust-lang/rust/pull/33406).\n-* [When many method candidates are in scope limit the suggestions to 10]\n-  (https://github.com/rust-lang/rust/pull/33338).\n-* [Remove confusing suggestion when calling a `fn` type]\n-  (https://github.com/rust-lang/rust/pull/33325).\n-* [Do not suggest changing `&mut self` to `&mut mut self`]\n-  (https://github.com/rust-lang/rust/pull/33319).\n+* [rustdoc: List blanket trait impls](https://github.com/rust-lang/rust/pull/33514).\n+* [rustdoc: Clean up ABI rendering](https://github.com/rust-lang/rust/pull/33151).\n+* [Indexing with the wrong type produces a more informative error](https://github.com/rust-lang/rust/pull/33401).\n+* [Improve diagnostics for constants being used in irrefutable patterns](https://github.com/rust-lang/rust/pull/33406).\n+* [When many method candidates are in scope limit the suggestions to 10](https://github.com/rust-lang/rust/pull/33338).\n+* [Remove confusing suggestion when calling a `fn` type](https://github.com/rust-lang/rust/pull/33325).\n+* [Do not suggest changing `&mut self` to `&mut mut self`](https://github.com/rust-lang/rust/pull/33319).\n \n Misc\n ----\n \n-* [Update i686-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33651).\n-* [Update aarch64-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33500).\n+* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).\n+* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).\n * [`std` no longer prints backtraces on platforms where the running\n   module must be loaded with `env::current_exe`, which can't be relied\n   on](https://github.com/rust-lang/rust/pull/33554).\n@@ -1657,34 +1411,24 @@ Misc\n * [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n   Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n * [On Unix the runtime aborts by calling `libc::abort` instead of\n-  generating an illegal instruction]\n-  (https://github.com/rust-lang/rust/pull/31457).\n+  generating an illegal instruction](https://github.com/rust-lang/rust/pull/31457).\n * [Rust is now bootstrapped from the previous release of Rust,\n-  instead of a snapshot from an arbitrary commit]\n-  (https://github.com/rust-lang/rust/pull/32942).\n+  instead of a snapshot from an arbitrary commit](https://github.com/rust-lang/rust/pull/32942).\n \n Compatibility Notes\n -------------------\n \n-* [`AtomicBool` is now bool-sized, not word-sized]\n-  (https://github.com/rust-lang/rust/pull/33579).\n+* [`AtomicBool` is now bool-sized, not word-sized](https://github.com/rust-lang/rust/pull/33579).\n * [`target_env` for Linux ARM targets is just `gnu`, not\n-  `gnueabihf`, `gnueabi`, etc]\n-  (https://github.com/rust-lang/rust/pull/33403).\n-* [Consistently panic on overflow in `Duration::new`]\n-  (https://github.com/rust-lang/rust/pull/33072).\n-* [Change `String::truncate` to panic less]\n-  (https://github.com/rust-lang/rust/pull/32977).\n-* [Add `:block` to the follow set for `:ty` and `:path`]\n-  (https://github.com/rust-lang/rust/pull/32945).\n+  `gnueabihf`, `gnueabi`, etc](https://github.com/rust-lang/rust/pull/33403).\n+* [Consistently panic on overflow in `Duration::new`](https://github.com/rust-lang/rust/pull/33072).\n+* [Change `String::truncate` to panic less](https://github.com/rust-lang/rust/pull/32977).\n+* [Add `:block` to the follow set for `:ty` and `:path`](https://github.com/rust-lang/rust/pull/32945).\n   Affects how macros are parsed.\n-* [Fix macro hygiene bug]\n-  (https://github.com/rust-lang/rust/pull/32923).\n+* [Fix macro hygiene bug](https://github.com/rust-lang/rust/pull/32923).\n * [Feature-gated attributes on macro-generated macro invocations are\n-  now rejected]\n-  (https://github.com/rust-lang/rust/pull/32791).\n-* [Suppress fallback and ambiguity errors during type inference]\n-  (https://github.com/rust-lang/rust/pull/32258).\n+  now rejected](https://github.com/rust-lang/rust/pull/32791).\n+* [Suppress fallback and ambiguity errors during type inference](https://github.com/rust-lang/rust/pull/32258).\n   This caused some minor changes to type inference.\n \n "}, {"sha": "d7457e088694389c059a6e28ce812d486c423b1d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -577,6 +577,7 @@ pub fn distcheck(build: &Build) {\n         return\n     }\n \n+    println!(\"Distcheck\");\n     let dir = build.out.join(\"tmp\").join(\"distcheck\");\n     let _ = fs::remove_dir_all(&dir);\n     t!(fs::create_dir_all(&dir));\n@@ -594,6 +595,26 @@ pub fn distcheck(build: &Build) {\n     build.run(Command::new(build_helper::make(&build.config.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n+\n+    // Now make sure that rust-src has all of libstd's dependencies\n+    println!(\"Distcheck rust-src\");\n+    let dir = build.out.join(\"tmp\").join(\"distcheck-src\");\n+    let _ = fs::remove_dir_all(&dir);\n+    t!(fs::create_dir_all(&dir));\n+\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-xzf\")\n+       .arg(dist::rust_src_installer(build))\n+       .arg(\"--strip-components=1\")\n+       .current_dir(&dir);\n+    build.run(&mut cmd);\n+\n+    let toml = dir.join(\"rust-src/lib/rustlib/src/rust/src/libstd/Cargo.toml\");\n+    build.run(Command::new(&build.cargo)\n+                     .arg(\"generate-lockfile\")\n+                     .arg(\"--manifest-path\")\n+                     .arg(&toml)\n+                     .current_dir(&dir));\n }\n \n /// Test the build system itself"}, {"sha": "1b69f7413b569744664e1990a2c70c825a250503", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -315,11 +315,18 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     t!(fs::remove_dir_all(&image));\n }\n \n+/// The path to the complete rustc-src tarball\n pub fn rust_src_location(build: &Build) -> PathBuf {\n     let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n+/// The path to the rust-src component installer\n+pub fn rust_src_installer(build: &Build) -> PathBuf {\n+    let name = pkgname(build, \"rust-src\");\n+    distdir(build).join(&format!(\"{}.tar.gz\", name))\n+}\n+\n /// Creates a tarball of save-analysis metadata, if available.\n pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     assert!(build.config.extended);"}, {"sha": "31ab04e9f3b74f049098a2e19aed23ec67f35df2", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -1604,6 +1604,15 @@ impl FromIterator<String> for String {\n     }\n }\n \n+#[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n+impl<'a> FromIterator<Cow<'a, str>> for String {\n+    fn from_iter<I: IntoIterator<Item = Cow<'a, str>>>(iter: I) -> String {\n+        let mut buf = String::new();\n+        buf.extend(iter);\n+        buf\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<char> for String {\n     fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {\n@@ -1641,6 +1650,15 @@ impl Extend<String> for String {\n     }\n }\n \n+#[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n+impl<'a> Extend<Cow<'a, str>> for String {\n+    fn extend<I: IntoIterator<Item = Cow<'a, str>>>(&mut self, iter: I) {\n+        for s in iter {\n+            self.push_str(&s)\n+        }\n+    }\n+}\n+\n /// A convenience impl that delegates to the impl for `&str`\n #[unstable(feature = \"pattern\",\n            reason = \"API not fully fleshed out and ready to be stabilized\","}, {"sha": "7f3b98a1c7614f251452cd72df7dffe78096655e", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -13,6 +13,10 @@ mod strategy {\n     mod grisu;\n }\n \n+use std::f64;\n+use std::io::Write;\n+use std::vec::Vec;\n+use test::Bencher;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n use core::num::flt2dec::MAX_SIG_DIGITS;\n \n@@ -22,3 +26,23 @@ pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n         full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded)\n     }\n }\n+\n+#[bench]\n+fn bench_small_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(20);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+    });\n+}\n+\n+#[bench]\n+fn bench_big_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(300);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+    });\n+}"}, {"sha": "87def375b202b17e2e38c85cc62453e911b7992d", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -9,8 +9,43 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use mem;\n use num::flt2dec;\n \n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                    sign: flt2dec::Sign, precision: usize) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n+                                                    *num, sign, precision,\n+                                                    false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n+                                       num: &T, sign: flt2dec::Sign) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n+                                                 *num, sign, 0, false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n // Common code of floating point Debug and Display.\n fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n     where T: flt2dec::DecodableFloat\n@@ -23,16 +58,48 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n         (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                    precision, false, &mut buf, &mut parts)\n+    if let Some(precision) = fmt.precision {\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n-        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                 0, false, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_decimal_common_shortest(fmt, num, sign)\n+    }\n+}\n+\n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                        sign: flt2dec::Sign, precision: usize,\n+                                        upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n+                                                  *num, sign, precision,\n+                                                  upper, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+                                           num: &T, sign: flt2dec::Sign,\n+                                           upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n+                                                     *num, sign, (0, 0), upper,\n+                                                     &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Common code of floating point LowerExp and UpperExp.\n@@ -45,17 +112,12 @@ fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) ->\n         true  => flt2dec::Sign::MinusPlus,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n+    if let Some(precision) = fmt.precision {\n         // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n-        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                  precision + 1, upper, &mut buf, &mut parts)\n+        float_to_exponential_common_exact(fmt, num, sign, precision + 1, upper)\n     } else {\n-        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                     (0, 0), upper, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_exponential_common_shortest(fmt, num, sign, upper)\n+    }\n }\n \n macro_rules! floating {"}, {"sha": "b397aba6b92df3630aded3369571a114f322f079", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -40,7 +40,7 @@ pub use intrinsics::transmute;\n /// `forget` is not marked as `unsafe`, because Rust's safety guarantees\n /// do not include a guarantee that destructors will always run. For example,\n /// a program can create a reference cycle using [`Rc`][rc], or call\n-/// [`process:exit`][exit] to exit without running destructors. Thus, allowing\n+/// [`process::exit`][exit] to exit without running destructors. Thus, allowing\n /// `mem::forget` from safe code does not fundamentally change Rust's safety\n /// guarantees.\n ///"}, {"sha": "84ead6506c85c16d9b54da4eb58a35a4b7ba0481", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -283,6 +283,12 @@ fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n         return true;\n     }\n \n+    // #[used] also keeps the item alive forcefully,\n+    // e.g. for placing it in a specific section.\n+    if attr::contains_name(attrs, \"used\") {\n+        return true;\n+    }\n+\n     let dead_code = lint::builtin::DEAD_CODE.name_lower();\n     for attr in lint::gather_attrs(attrs) {\n         match attr {"}, {"sha": "cba47f984415766fa2eebe96f78af0c492babb58", "filename": "src/test/run-pass/issue-41628.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78f63181360269981085795b7feb0f4b6591f52f/src%2Ftest%2Frun-pass%2Fissue-41628.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f63181360269981085795b7feb0f4b6591f52f/src%2Ftest%2Frun-pass%2Fissue-41628.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41628.rs?ref=78f63181360269981085795b7feb0f4b6591f52f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+#![feature(used)]\n+\n+#[used]\n+static FOO: u32 = 0;\n+\n+fn main() {}"}]}