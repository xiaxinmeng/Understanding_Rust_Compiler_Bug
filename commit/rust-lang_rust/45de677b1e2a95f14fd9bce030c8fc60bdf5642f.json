{"sha": "45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZGU2NzdiMWUyYTk1ZjE0ZmQ5YmNlMDMwYzhmYzYwYmRmNTY0MmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-24T12:28:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T12:28:41Z"}, "message": "Rollup merge of #73646 - JohnTitor:add-tests, r=Dylan-DPC\n\nAdd some regression tests\n\nCloses #44861\nCloses #51506\nCloses #59435\nCloses #69840", "tree": {"sha": "7bddd6eaf567a0715f98917f6b7ac12cd2effe0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bddd6eaf567a0715f98917f6b7ac12cd2effe0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe80b6CRBK7hj4Ov3rIwAAdHIIAIsgtTuw6h++//087XLRV3+2\n6IAIONrarZ5nwSHyvqc+toiWE8GvjYlYxoMqu9Cx2AG1jGC03qqP42WCDBpxzReM\nwnuznvfx39HJ3uH9yUnQ0fIidul8dAKb9MIXKVFFyviSv0RPa/b51I9QaOeCOTaA\nWsGO/+jG3rJ3O2IOGrSxorCffurGKSa9guvcoDDJLw5eB0uue1YISymEMrQ+q2QX\n8/o5fElyWFwkcHEG2CZEb5CO9vwMxH/llzgcqL3QnRBBWSJzV/9cKDYmOhwkhjCO\nbELINkE6RHI5Fw9BbD3vgzRSSwVG9G6GVFJgXzu9NaZSOdis3rQhGC5DM3cPgpY=\n=hmr/\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bddd6eaf567a0715f98917f6b7ac12cd2effe0e\nparent 1d1c40032429d681fcd6bb0cf071ffecdaeeab02\nparent 814782b4c6bd773d47dfce5614d4bbea935f5d85\nauthor Dylan DPC <dylan.dpc@gmail.com> 1593001721 +0200\ncommitter GitHub <noreply@github.com> 1593001721 +0200\n\nRollup merge of #73646 - JohnTitor:add-tests, r=Dylan-DPC\n\nAdd some regression tests\n\nCloses #44861\nCloses #51506\nCloses #59435\nCloses #69840\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "html_url": "https://github.com/rust-lang/rust/commit/45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "html_url": "https://github.com/rust-lang/rust/commit/1d1c40032429d681fcd6bb0cf071ffecdaeeab02"}, {"sha": "814782b4c6bd773d47dfce5614d4bbea935f5d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/814782b4c6bd773d47dfce5614d4bbea935f5d85", "html_url": "https://github.com/rust-lang/rust/commit/814782b4c6bd773d47dfce5614d4bbea935f5d85"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "b270f88b6886e3282f927c13de8e2704b071fe8c", "filename": "src/test/ui/impl-trait/issue-69840.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(impl_trait_in_bindings)]\n+#![allow(incomplete_features)]\n+\n+struct A<'a>(&'a ());\n+\n+trait Trait<T> {}\n+\n+impl<T> Trait<T> for () {}\n+\n+pub fn foo<'a>() {\n+    let _x: impl Trait<A<'a>> = ();\n+}\n+\n+fn main() {}"}, {"sha": "d0fe6a0f59a879f4d899e91644fad76279e85db8", "filename": "src/test/ui/never_type/issue-51506.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,41 @@\n+#![feature(never_type, specialization)]\n+#![allow(incomplete_features)]\n+\n+use std::iter::{self, Empty};\n+\n+trait Trait {\n+    type Out: Iterator<Item = u32>;\n+\n+    fn f(&self) -> Option<Self::Out>;\n+}\n+\n+impl<T> Trait for T {\n+    default type Out = !; //~ ERROR: `!` is not an iterator\n+\n+    default fn f(&self) -> Option<Self::Out> {\n+        None\n+    }\n+}\n+\n+struct X;\n+\n+impl Trait for X {\n+    type Out = Empty<u32>;\n+\n+    fn f(&self) -> Option<Self::Out> {\n+        Some(iter::empty())\n+    }\n+}\n+\n+fn f<T: Trait>(a: T) {\n+    if let Some(iter) = a.f() {\n+        println!(\"Some\");\n+        for x in iter {\n+            println!(\"x = {}\", x);\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    f(10);\n+}"}, {"sha": "73865a9b5a02c0c5b208b179a2799f4980c8af98", "filename": "src/test/ui/never_type/issue-51506.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: `!` is not an iterator\n+  --> $DIR/issue-51506.rs:13:5\n+   |\n+LL |     type Out: Iterator<Item = u32>;\n+   |     ------------------------------- required by `Trait::Out`\n+...\n+LL |     default type Out = !;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ `!` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `!`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c37a6273de366e7e358ffeeb74ba1c3a19ceaef1", "filename": "src/test/ui/specialization/issue-44861.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,40 @@\n+#![crate_type = \"lib\"]\n+#![feature(specialization)]\n+#![feature(unsize, coerce_unsized)]\n+#![allow(incomplete_features)]\n+\n+use std::ops::CoerceUnsized;\n+\n+pub struct SmartassPtr<A: Smartass+?Sized>(A::Data);\n+\n+pub trait Smartass {\n+    type Data;\n+    type Data2: CoerceUnsized<*const [u8]>;\n+}\n+\n+pub trait MaybeObjectSafe {}\n+\n+impl MaybeObjectSafe for () {}\n+\n+impl<T> Smartass for T {\n+    type Data = <Self as Smartass>::Data2;\n+    default type Data2 = ();\n+    //~^ ERROR: the trait bound `(): std::ops::CoerceUnsized<*const [u8]>` is not satisfied\n+}\n+\n+impl Smartass for () {\n+    type Data2 = *const [u8; 1];\n+}\n+\n+impl Smartass for dyn MaybeObjectSafe {\n+    type Data = *const [u8];\n+    type Data2 = *const [u8; 0];\n+}\n+\n+impl<U: Smartass+?Sized, T: Smartass+?Sized> CoerceUnsized<SmartassPtr<T>> for SmartassPtr<U>\n+    where <U as Smartass>::Data: std::ops::CoerceUnsized<<T as Smartass>::Data>\n+{}\n+\n+pub fn conv(s: SmartassPtr<()>) -> SmartassPtr<dyn MaybeObjectSafe> {\n+    s\n+}"}, {"sha": "b41b17e76a6ab8949cfbab598dc92bba24ec4482", "filename": "src/test/ui/specialization/issue-44861.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `(): std::ops::CoerceUnsized<*const [u8]>` is not satisfied\n+  --> $DIR/issue-44861.rs:21:5\n+   |\n+LL |     type Data2: CoerceUnsized<*const [u8]>;\n+   |     --------------------------------------- required by `Smartass::Data2`\n+...\n+LL |     default type Data2 = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::CoerceUnsized<*const [u8]>` is not implemented for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "47323d3096f3da4b8d83b7de32b189099f48af81", "filename": "src/test/ui/specialization/issue-59435.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,17 @@\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+struct MyStruct {}\n+\n+trait MyTrait {\n+    type MyType: Default;\n+}\n+\n+impl MyTrait for i32 {\n+    default type MyType = MyStruct;\n+    //~^ ERROR: the trait bound `MyStruct: std::default::Default` is not satisfied\n+}\n+\n+fn main() {\n+    let _x: <i32 as MyTrait>::MyType = <i32 as MyTrait>::MyType::default();\n+}"}, {"sha": "fd512a539a3ee6cdb4a88bbdc67b623e1d453bfa", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45de677b1e2a95f14fd9bce030c8fc60bdf5642f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `MyStruct: std::default::Default` is not satisfied\n+  --> $DIR/issue-59435.rs:11:5\n+   |\n+LL |     type MyType: Default;\n+   |     --------------------- required by `MyTrait::MyType`\n+...\n+LL |     default type MyType = MyStruct;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `MyStruct`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}