{"sha": "5d62a737d7e7899461f18c3ec105f7f024aeee74", "node_id": "C_kwDOAAsO6NoAKDVkNjJhNzM3ZDdlNzg5OTQ2MWYxOGMzZWMxMDVmN2YwMjRhZWVlNzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T01:20:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T02:14:26Z"}, "message": "Only deduplicate stack traces for good path bugs", "tree": {"sha": "a0aae147614d01a0754f8886f82fcc74e936a40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0aae147614d01a0754f8886f82fcc74e936a40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d62a737d7e7899461f18c3ec105f7f024aeee74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d62a737d7e7899461f18c3ec105f7f024aeee74", "html_url": "https://github.com/rust-lang/rust/commit/5d62a737d7e7899461f18c3ec105f7f024aeee74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d62a737d7e7899461f18c3ec105f7f024aeee74/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c991868c60a4afc1ee6334b912ea96061a2c98d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c991868c60a4afc1ee6334b912ea96061a2c98d", "html_url": "https://github.com/rust-lang/rust/commit/7c991868c60a4afc1ee6334b912ea96061a2c98d"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "30179e978725c2ba38f9157f8744accad2194882", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d62a737d7e7899461f18c3ec105f7f024aeee74/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d62a737d7e7899461f18c3ec105f7f024aeee74/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=5d62a737d7e7899461f18c3ec105f7f024aeee74", "patch": "@@ -1199,8 +1199,8 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for `ExplicitBug`, which has an unhelpful message and backtrace.\n-            if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+            // Don't do this for `GoodPathBug`, which already emits its own more useful backtrace.\n+            if !info.payload().is::<rustc_errors::GoodPathBug>() {\n                 (*DEFAULT_HOOK)(info);\n \n                 // Separate the output with an empty line\n@@ -1237,7 +1237,9 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n-    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+    if !info.payload().is::<rustc_errors::ExplicitBug>()\n+        && !info.payload().is::<rustc_errors::GoodPathBug>()\n+    {\n         let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&mut d);\n     }"}, {"sha": "0455f0d7383ae67e9d50b7058b7853498c33b9bb", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d62a737d7e7899461f18c3ec105f7f024aeee74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d62a737d7e7899461f18c3ec105f7f024aeee74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5d62a737d7e7899461f18c3ec105f7f024aeee74", "patch": "@@ -40,12 +40,13 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n+use std::any::Any;\n use std::borrow::Cow;\n+use std::fmt;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n-use std::{error, fmt};\n \n use termcolor::{Color, ColorSpec};\n \n@@ -361,16 +362,11 @@ pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[derive(Copy, Clone, Debug)]\n pub struct ExplicitBug;\n \n-impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"parser internal bug\")\n-    }\n-}\n-\n-impl error::Error for ExplicitBug {}\n+/// Signifies that the compiler died with an explicit call to `.delay_good_path_bug`\n+/// rather than a failed assertion, etc.\n+pub struct GoodPathBug;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n@@ -507,7 +503,11 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+            self.flush_delayed(\n+                bugs,\n+                \"no errors encountered even though `delay_span_bug` issued\",\n+                ExplicitBug,\n+            );\n         }\n \n         // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n@@ -520,6 +520,7 @@ impl Drop for HandlerInner {\n             self.flush_delayed(\n                 bugs.into_iter().map(DelayedDiagnostic::decorate),\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n+                GoodPathBug,\n             );\n         }\n \n@@ -1203,7 +1204,11 @@ impl Handler {\n     pub fn flush_delayed(&self) {\n         let mut inner = self.inner.lock();\n         let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n-        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+        inner.flush_delayed(\n+            bugs,\n+            \"no errors encountered even though `delay_span_bug` issued\",\n+            ExplicitBug,\n+        );\n     }\n }\n \n@@ -1580,6 +1585,7 @@ impl HandlerInner {\n         &mut self,\n         bugs: impl IntoIterator<Item = Diagnostic>,\n         explanation: impl Into<DiagnosticMessage> + Copy,\n+        panic_with: impl Any + Send + 'static,\n     ) {\n         let mut no_bugs = true;\n         for mut bug in bugs {\n@@ -1607,7 +1613,7 @@ impl HandlerInner {\n \n         // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n         if !no_bugs {\n-            panic::panic_any(ExplicitBug);\n+            panic::panic_any(panic_with);\n         }\n     }\n "}]}