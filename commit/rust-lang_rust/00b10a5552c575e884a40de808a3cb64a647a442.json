{"sha": "00b10a5552c575e884a40de808a3cb64a647a442", "node_id": "C_kwDOAAsO6NoAKDAwYjEwYTU1NTJjNTc1ZTg4NGE0MGRlODA4YTNjYjY0YTY0N2E0NDI", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-06T06:16:54Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-06T06:16:54Z"}, "message": "get_attr should check that no duplicates are allowed", "tree": {"sha": "d8c2f809353954988709497671ef8c5931f103e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c2f809353954988709497671ef8c5931f103e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b10a5552c575e884a40de808a3cb64a647a442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b10a5552c575e884a40de808a3cb64a647a442", "html_url": "https://github.com/rust-lang/rust/commit/00b10a5552c575e884a40de808a3cb64a647a442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b10a5552c575e884a40de808a3cb64a647a442/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676afc514944aa618977bacf8fe28cefc443a13a", "url": "https://api.github.com/repos/rust-lang/rust/commits/676afc514944aa618977bacf8fe28cefc443a13a", "html_url": "https://github.com/rust-lang/rust/commit/676afc514944aa618977bacf8fe28cefc443a13a"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "b38684a63e410d103150011d9ab452dfde04503d", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -386,7 +386,8 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     ) {\n         let span = cx\n             .tcx\n-            .get_attr(instance.def_id(), sym::target_feature)\n+            .get_attrs(instance.def_id(), sym::target_feature)\n+            .next()\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n         let msg = format!(\n             \"the target features {} must all be either enabled or disabled together\","}, {"sha": "38a02cb1d7ce9f224e065897ae2b35f6caa464d9", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -823,6 +823,14 @@ pub fn is_builtin_only_local(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).map_or(false, |attr| attr.only_local)\n }\n \n+pub fn is_valid_for_get_attr(name: Symbol) -> bool {\n+    BUILTIN_ATTRIBUTE_MAP.get(&name).map_or(false, |attr| match attr.duplicates {\n+        WarnFollowing | ErrorFollowing | ErrorPreceding | FutureWarnFollowing\n+        | FutureWarnPreceding => true,\n+        DuplicatesOk | WarnFollowingWordOnly => false,\n+    })\n+}\n+\n pub static BUILTIN_ATTRIBUTE_MAP: LazyLock<FxHashMap<Symbol, &BuiltinAttribute>> =\n     LazyLock::new(|| {\n         let mut map = FxHashMap::default();"}, {"sha": "bdaa0ee88eba19792cd89fdd7d5104ce271fdfe9", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -151,7 +151,7 @@ pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES};\n pub use builtin_attrs::AttributeDuplicates;\n pub use builtin_attrs::{\n     deprecated_attributes, find_gated_cfg, is_builtin_attr_name, is_builtin_only_local,\n-    AttributeGate, AttributeTemplate, AttributeType, BuiltinAttribute, GatedCfg,\n-    BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n+    is_valid_for_get_attr, AttributeGate, AttributeTemplate, AttributeType, BuiltinAttribute,\n+    GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n };\n pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};"}, {"sha": "58b0657a5b01fbcdd98da3a965fccfe53f46c5bc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -2274,7 +2274,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn get_attr(self, did: DefId, attr: Symbol) -> Option<&'tcx ast::Attribute> {\n-        self.get_attrs(did, attr).next()\n+        if cfg!(debug_assertions) && !rustc_feature::is_valid_for_get_attr(attr) {\n+            bug!(\"get_attr: unexpected called with DefId `{:?}`, attr `{:?}`\", did, attr);\n+        } else {\n+            self.get_attrs(did, attr).next()\n+        }\n     }\n \n     /// Determines whether an item is annotated with an attribute."}, {"sha": "43893263be13898135f6b9211f461275f2162ce7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -1459,7 +1459,7 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: L\n     def.destructor(tcx); // force the destructor to be evaluated\n \n     if vs.is_empty() {\n-        if let Some(attr) = tcx.get_attr(def_id.to_def_id(), sym::repr) {\n+        if let Some(attr) = tcx.get_attrs(def_id.to_def_id(), sym::repr).next() {\n             struct_span_err!(\n                 tcx.sess,\n                 attr.span,"}, {"sha": "0fefcf83fd51670b08bdf02387566241a687adf2", "filename": "src/test/ui/attributes/issue-100631.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.rs?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -0,0 +1,8 @@\n+// issue #100631, make sure `TyCtxt::get_attr` only called by case that compiler\n+// can reasonably deal with multiple attributes.\n+// `repr` will use `TyCtxt::get_attrs` since it's `DuplicatesOk`.\n+#[repr(C)] //~ ERROR: unsupported representation for zero-variant enum [E0084]\n+#[repr(C)]\n+enum Foo {}\n+\n+fn main() {}"}, {"sha": "caa5351ddc7aa6d6764c488f8f6e390a78e489cc", "filename": "src/test/ui/attributes/issue-100631.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00b10a5552c575e884a40de808a3cb64a647a442/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00b10a5552c575e884a40de808a3cb64a647a442/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-100631.stderr?ref=00b10a5552c575e884a40de808a3cb64a647a442", "patch": "@@ -0,0 +1,12 @@\n+error[E0084]: unsupported representation for zero-variant enum\n+  --> $DIR/issue-100631.rs:4:1\n+   |\n+LL | #[repr(C)]\n+   | ^^^^^^^^^^\n+LL | #[repr(C)]\n+LL | enum Foo {}\n+   | -------- zero-variant enum\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0084`."}]}