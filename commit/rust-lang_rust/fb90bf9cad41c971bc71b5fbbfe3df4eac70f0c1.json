{"sha": "fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "node_id": "C_kwDOAAsO6NoAKGZiOTBiZjljYWQ0MWM5NzFiYzcxYjVmYmJmZTNkZjRlYWM3MGYwYzE", "commit": {"author": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-12-03T18:19:19Z"}, "committer": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-12-03T18:19:19Z"}, "message": "feat: handle while let to loop", "tree": {"sha": "cb4afce00ffe1b882279931de3cf90598e57d301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4afce00ffe1b882279931de3cf90598e57d301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "html_url": "https://github.com/rust-lang/rust/commit/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "html_url": "https://github.com/rust-lang/rust/commit/8dd06ece20fb815be5e3b0f0586334d6ecb273c8"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "a87d8d7166e9ccbad1581251ef9a34bc2678c634", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "patch": "@@ -39,17 +39,14 @@ use crate::{\n // ```\n pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let while_kw = ctx.find_token_syntax_at_offset(T![while])?;\n-    let while_expr: ast::WhileExpr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n+    let while_expr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n     let while_body = while_expr.loop_body()?;\n-    let cond = while_expr.condition()?;\n+    let while_cond = while_expr.condition()?;\n \n-    // Don't handle while let\n-    if cond.pat().is_some() {\n-        return None;\n+    let if_cond = match while_cond.pat() {\n+        Some(_) => while_expr.condition()?,\n+        None => make::condition(invert_boolean_expression(while_cond.expr()?), None),\n     };\n-\n-    let cond_expr = cond.expr()?;\n-\n     let target = while_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"convert_while_to_loop\", AssistKind::RefactorRewrite),\n@@ -58,27 +55,24 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n         |edit| {\n             let while_indent_level = IndentLevel::from_node(while_expr.syntax());\n \n-            let replacement = {\n-                let if_expr = {\n-                    let cond = invert_boolean_expression(cond_expr);\n-                    let then_branch = make::block_expr(\n-                        once(make::expr_stmt(make::expr_break(None)).into()),\n-                        None,\n-                    );\n-\n-                    make::expr_if(make::condition(cond, None), then_branch, None)\n-                };\n-\n-                let if_expr = if_expr.indent(while_indent_level);\n-                let stmts = once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n-\n-                let block_expr = make::block_expr(stmts, while_body.tail_expr());\n-\n-                let block_expr = block_expr.indent(while_indent_level);\n-\n-                make::expr_loop(block_expr)\n+            let break_block =\n+                make::block_expr(once(make::expr_stmt(make::expr_break(None)).into()), None)\n+                    .indent(while_indent_level);\n+            let block_expr = match while_cond.pat() {\n+                Some(_) => {\n+                    let if_expr = make::expr_if(if_cond, while_body, Some(break_block.into()));\n+                    let stmts = once(make::expr_stmt(if_expr).into());\n+                    make::block_expr(stmts, None)\n+                }\n+                None => {\n+                    let if_expr = make::expr_if(if_cond, break_block, None);\n+                    let stmts =\n+                        once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n+                    make::block_expr(stmts, while_body.tail_expr())\n+                }\n             };\n \n+            let replacement = make::expr_loop(block_expr.indent(while_indent_level));\n             edit.replace(target, replacement.syntax().text())\n         },\n     )\n@@ -160,15 +154,26 @@ fn main() {\n     }\n \n     #[test]\n-    fn ignore_while_let() {\n-        check_assist_not_applicable(\n+    fn convert_while_let() {\n+        check_assist(\n             convert_while_to_loop,\n             r#\"\n fn main() {\n     while$0 let Some(_) = foo() {\n         bar();\n     }\n }\n+\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        if let Some(_) = foo() {\n+            bar();\n+        } else {\n+            break;\n+        }\n+    }\n+}\n \"#,\n         );\n     }"}]}