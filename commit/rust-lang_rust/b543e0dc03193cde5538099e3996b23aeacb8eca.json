{"sha": "b543e0dc03193cde5538099e3996b23aeacb8eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDNlMGRjMDMxOTNjZGU1NTM4MDk5ZTM5OTZiMjNhZWFjYjhlY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T13:18:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T13:18:04Z"}, "message": "Auto merge of #86970 - inquisitivecrystal:force-warn, r=davidtwco\n\nMake `--force-warns` a normal lint level option\n\nNow that `ForceWarn` is a lint level, there's no reason `--force-warns` should be treated differently from other options that set lint levels. This merges the `ForceWarn` handling in with the other lint level command line options. It also unifies all of the relevant selection logic in `compiler/rustc_lint/src/levels.rs`, rather than having some of it weirdly elsewhere.\n\nFixes #86958, which arose from the special-cased handling of `ForceWarn` having had an error in it.", "tree": {"sha": "999348812c9327c4a6daa54d678aa82f558f2594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999348812c9327c4a6daa54d678aa82f558f2594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b543e0dc03193cde5538099e3996b23aeacb8eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b543e0dc03193cde5538099e3996b23aeacb8eca", "html_url": "https://github.com/rust-lang/rust/commit/b543e0dc03193cde5538099e3996b23aeacb8eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b543e0dc03193cde5538099e3996b23aeacb8eca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df945c4717ffaf923b57bf30c473df6fc98bc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85", "html_url": "https://github.com/rust-lang/rust/commit/8df945c4717ffaf923b57bf30c473df6fc98bc85"}, {"sha": "10cb38076645ad113617ad868beab08f3bc2c280", "url": "https://api.github.com/repos/rust-lang/rust/commits/10cb38076645ad113617ad868beab08f3bc2c280", "html_url": "https://github.com/rust-lang/rust/commit/10cb38076645ad113617ad868beab08f3bc2c280"}], "stats": {"total": 138, "additions": 91, "deletions": 47}, "files": [{"sha": "069fa41fa886ab175b09186fbbabe2a70e3e401d", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -26,8 +26,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n use tracing::debug;\n \n-use std::cmp;\n-\n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n     let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n@@ -91,36 +89,24 @@ impl<'s> LintLevelsBuilder<'s> {\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n             let orig_level = level;\n-\n-            // If the cap is less than this specified level, e.g., if we've got\n-            // `--cap-lints allow` but we've also got `-D foo` then we ignore\n-            // this specification as the lint cap will set it to allow anyway.\n-            let level = cmp::min(level, self.sets.lint_cap);\n-\n             let lint_flag_val = Symbol::intern(lint_name);\n \n             let ids = match store.find_lints(&lint_name) {\n                 Ok(ids) => ids,\n                 Err(_) => continue, // errors handled in check_lint_name_cmdline above\n             };\n             for id in ids {\n+                // ForceWarn and Forbid cannot be overriden\n+                if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {\n+                    continue;\n+                }\n+\n                 self.check_gated_lint(id, DUMMY_SP);\n                 let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n                 specs.insert(id, (level, src));\n             }\n         }\n \n-        for lint_name in &sess.opts.force_warns {\n-            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn, self.crate_attrs);\n-            let lints = store\n-                .find_lints(lint_name)\n-                .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n-            for id in lints {\n-                let src = LintLevelSource::CommandLine(Symbol::intern(lint_name), Level::ForceWarn);\n-                specs.insert(id, (Level::ForceWarn, src));\n-            }\n-        }\n-\n         self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });\n     }\n "}, {"sha": "9e5a38b8dc0b1e8c934ec62d476bb3f1cf321bcc", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -677,7 +677,6 @@ impl Default for Options {\n             optimize: OptLevel::No,\n             debuginfo: DebugInfo::None,\n             lint_opts: Vec::new(),\n-            force_warns: Vec::new(),\n             lint_cap: None,\n             describe_lints: false,\n             output_types: OutputTypes(BTreeMap::new()),\n@@ -1172,20 +1171,20 @@ pub fn get_cmd_lint_options(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n     debugging_opts: &DebuggingOptions,\n-) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>, Vec<String>) {\n+) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>) {\n     let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n-    for level in [lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {\n-        for (passed_arg_pos, lint_name) in matches.opt_strs_pos(level.as_str()) {\n-            let arg_pos = if let lint::Forbid = level {\n-                // HACK: forbid is always specified last, so it can't be overridden.\n-                // FIXME: remove this once <https://github.com/rust-lang/rust/issues/70819> is\n-                // fixed and `forbid` works as expected.\n-                usize::MAX\n-            } else {\n-                passed_arg_pos\n-            };\n+    if !debugging_opts.unstable_options && matches.opt_present(\"force-warns\") {\n+        early_error(\n+            error_format,\n+            \"the `-Z unstable-options` flag must also be passed to enable \\\n+            the flag `--force-warns=lints`\",\n+        );\n+    }\n+\n+    for level in [lint::Allow, lint::Warn, lint::ForceWarn, lint::Deny, lint::Forbid] {\n+        for (arg_pos, lint_name) in matches.opt_strs_pos(level.as_str()) {\n             if lint_name == \"help\" {\n                 describe_lints = true;\n             } else {\n@@ -1206,18 +1205,7 @@ pub fn get_cmd_lint_options(\n             .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{}`\", cap)))\n     });\n \n-    if !debugging_opts.unstable_options && matches.opt_present(\"force-warns\") {\n-        early_error(\n-            error_format,\n-            \"the `-Z unstable-options` flag must also be passed to enable \\\n-            the flag `--force-warns=lints`\",\n-        );\n-    }\n-\n-    let force_warns =\n-        matches.opt_strs(\"force-warns\").into_iter().map(|name| name.replace('-', \"_\")).collect();\n-\n-    (lint_opts, describe_lints, lint_cap, force_warns)\n+    (lint_opts, describe_lints, lint_cap)\n }\n \n /// Parses the `--color` flag.\n@@ -1955,7 +1943,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n-    let (lint_opts, describe_lints, lint_cap, force_warns) =\n+    let (lint_opts, describe_lints, lint_cap) =\n         get_cmd_lint_options(matches, error_format, &debugging_opts);\n \n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n@@ -2129,7 +2117,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         optimize: opt_level,\n         debuginfo,\n         lint_opts,\n-        force_warns,\n         lint_cap,\n         describe_lints,\n         output_types,"}, {"sha": "d7b9c91173754da37c8ff18aa48c73de0b1ff708", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -135,7 +135,6 @@ top_level_options!(\n         debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED_NO_CRATE_HASH],\n         lint_cap: Option<lint::Level> [TRACKED_NO_CRATE_HASH],\n-        force_warns: Vec<String> [TRACKED_NO_CRATE_HASH],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],"}, {"sha": "e552542464082df558bef8e3fdbd34eab7a3b80d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -632,7 +632,7 @@ impl Options {\n         let show_type_layout = matches.opt_present(\"show-type-layout\");\n         let nocapture = matches.opt_present(\"nocapture\");\n \n-        let (lint_opts, describe_lints, lint_cap, _) =\n+        let (lint_opts, describe_lints, lint_cap) =\n             get_cmd_lint_options(matches, error_format, &debugging_opts);\n \n         Ok(Options {"}, {"sha": "ff4dc4abc74a1a12b8b7ee610c7e1ba2339e4b10", "filename": "src/test/ui/lint/cli-lint-override.forbid_warn.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,11 @@\n+error: extern declarations without an explicit ABI are deprecated\n+  --> $DIR/cli-lint-override.rs:12:1\n+   |\n+LL | extern fn foo() {}\n+   | ^^^^^^^^^^^^^^^ ABI should be specified here\n+   |\n+   = note: requested on the command line with `-F missing-abi`\n+   = help: the default ABI is C\n+\n+error: aborting due to previous error\n+"}, {"sha": "50c58ea6e151a82f4096edfc922d3f1509ce4434", "filename": "src/test/ui/lint/cli-lint-override.force_warn_deny.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,11 @@\n+warning: extern declarations without an explicit ABI are deprecated\n+  --> $DIR/cli-lint-override.rs:12:1\n+   |\n+LL | extern fn foo() {}\n+   | ^^^^^^^^^^^^^^^ ABI should be specified here\n+   |\n+   = note: requested on the command line with `--force-warns missing-abi`\n+   = help: the default ABI is C\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6814c15e65686142ae2206577bedb01225e73366", "filename": "src/test/ui/lint/cli-lint-override.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,17 @@\n+// Tests that subsequent lints specified via the command line override\n+// each other, except for ForceWarn and Forbid, which cannot be overriden.\n+//\n+// revisions: warn_deny forbid_warn force_warn_deny\n+//\n+//[warn_deny] compile-flags: --warn missing_abi --deny missing_abi\n+//[forbid_warn] compile-flags: --warn missing_abi --forbid missing_abi\n+//[force_warn_deny] compile-flags: -Z unstable-options --force-warns missing_abi --allow missing_abi\n+//[force_warn_deny] check-pass\n+\n+\n+extern fn foo() {}\n+//[warn_deny]~^ ERROR extern declarations without an explicit ABI are deprecated\n+//[forbid_warn]~^^ ERROR extern declarations without an explicit ABI are deprecated\n+//[force_warn_deny]~^^^ WARN extern declarations without an explicit ABI are deprecated\n+\n+fn main() {}"}, {"sha": "2d869adfd37e36771169cbf6eb3ac5bab6ce15e9", "filename": "src/test/ui/lint/cli-lint-override.warn_deny.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,11 @@\n+error: extern declarations without an explicit ABI are deprecated\n+  --> $DIR/cli-lint-override.rs:12:1\n+   |\n+LL | extern fn foo() {}\n+   | ^^^^^^^^^^^^^^^ ABI should be specified here\n+   |\n+   = note: requested on the command line with `-D missing-abi`\n+   = help: the default ABI is C\n+\n+error: aborting due to previous error\n+"}, {"sha": "201161296baf4da6d6b23f601280da6f4a9c5c7e", "filename": "src/test/ui/lint/cli-unknown-force-warn.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.rs?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,7 @@\n+// Checks that rustc correctly errors when passed an invalid lint with\n+// `--force-warns`. This is a regression test for issue #86958.\n+//\n+// compile-flags: -Z unstable-options --force-warns foo-qux\n+// error-pattern: unknown lint: `foo_qux`\n+\n+fn main() {}"}, {"sha": "3a9aebb996c9312ebdf9e49582ed3c7c5704e1ba", "filename": "src/test/ui/lint/cli-unknown-force-warn.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b543e0dc03193cde5538099e3996b23aeacb8eca/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-unknown-force-warn.stderr?ref=b543e0dc03193cde5538099e3996b23aeacb8eca", "patch": "@@ -0,0 +1,15 @@\n+error[E0602]: unknown lint: `foo_qux`\n+   |\n+   = note: requested on the command line with `--force-warns foo_qux`\n+\n+error[E0602]: unknown lint: `foo_qux`\n+   |\n+   = note: requested on the command line with `--force-warns foo_qux`\n+\n+error[E0602]: unknown lint: `foo_qux`\n+   |\n+   = note: requested on the command line with `--force-warns foo_qux`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0602`."}]}