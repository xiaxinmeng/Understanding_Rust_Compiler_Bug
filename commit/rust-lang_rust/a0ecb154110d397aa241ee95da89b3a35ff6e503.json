{"sha": "a0ecb154110d397aa241ee95da89b3a35ff6e503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZWNiMTU0MTEwZDM5N2FhMjQxZWU5NWRhODliM2EzNWZmNmU1MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-20T06:31:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-20T06:31:42Z"}, "message": "auto merge of #11652 : hdima/rust/base64-padding-newlines, r=alexcrichton\n\nIgnore all newline characters in Base64 decoder to make it compatible with other Base64 decoders.\r\n\r\nMost of the Base64 decoder implementations ignore all newline characters in the input string. There are some examples:\r\n\r\nPython:\r\n\r\n```python\r\n>>> \"\nA\nQ\n=\n=\n\".decode(\"base64\")\r\n'\\x01'\r\n```\r\n\r\nRuby:\r\n\r\n```ruby\r\nirb(main):001:0> \"\nA\nQ\n=\n=\n\".unpack(\"m\")\r\n=> [\"\u0001\"]\r\n```\r\n\r\nErlang:\r\n\r\n```erlang\r\n1> base64:decode(\"\nA\nQ\n=\n=\n\").\r\n<<1>>\r\n```\r\n\r\nMoreover some Base64 encoders append newline character at the end of the output string by default:\r\n\r\nPython:\r\n\r\n```python\r\n>>> \"\u0001\".encode(\"base64\")\r\n'AQ==\n'\r\n```\r\n\r\nRuby:\r\n\r\n```ruby\r\nirb(main):001:0> [\"\u0001\"].pack(\"m\")\r\n=> \"AQ==\n\"\r\n```\r\n\r\nSo I think it's fairly important for Rust Base64 decoder to accept Base64 inputs even with newline characters in the padding.", "tree": {"sha": "aa2067f832194f282d275f867a4d1d8dc9137c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2067f832194f282d275f867a4d1d8dc9137c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ecb154110d397aa241ee95da89b3a35ff6e503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ecb154110d397aa241ee95da89b3a35ff6e503", "html_url": "https://github.com/rust-lang/rust/commit/a0ecb154110d397aa241ee95da89b3a35ff6e503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ecb154110d397aa241ee95da89b3a35ff6e503/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764f2cb6f3517869e31fc7b93ff11dd840db8d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/764f2cb6f3517869e31fc7b93ff11dd840db8d30", "html_url": "https://github.com/rust-lang/rust/commit/764f2cb6f3517869e31fc7b93ff11dd840db8d30"}, {"sha": "99cde8482efaed4757422d24cd46de8fa64c92cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cde8482efaed4757422d24cd46de8fa64c92cb", "html_url": "https://github.com/rust-lang/rust/commit/99cde8482efaed4757422d24cd46de8fa64c92cb"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "1043f700aa7e99bee1ae9e5679529ee637e046b5", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0ecb154110d397aa241ee95da89b3a35ff6e503/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ecb154110d397aa241ee95da89b3a35ff6e503/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=a0ecb154110d397aa241ee95da89b3a35ff6e503", "patch": "@@ -237,8 +237,9 @@ impl<'a> FromBase64 for &'a str {\n         }\n \n         for (idx, byte) in it {\n-            if (byte as char) != '=' {\n-                return Err(InvalidBase64Character(self.char_at(idx), idx));\n+            match byte as char {\n+                '='|'\\r'|'\\n' => continue,\n+                _ => return Err(InvalidBase64Character(self.char_at(idx), idx)),\n             }\n         }\n \n@@ -310,6 +311,8 @@ mod test {\n     fn test_from_base64_newlines() {\n         assert_eq!(\"Zm9v\\r\\nYmFy\".from_base64().unwrap(),\n                    \"foobar\".as_bytes().to_owned());\n+        assert_eq!(\"Zm9vYg==\\r\\n\".from_base64().unwrap(),\n+                   \"foob\".as_bytes().to_owned());\n     }\n \n     #[test]"}]}