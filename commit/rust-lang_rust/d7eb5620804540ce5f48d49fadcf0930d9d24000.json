{"sha": "d7eb5620804540ce5f48d49fadcf0930d9d24000", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZWI1NjIwODA0NTQwY2U1ZjQ4ZDQ5ZmFkY2YwOTMwZDlkMjQwMDA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-14T12:34:42Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-24T18:11:50Z"}, "message": "add test for lattice specialization", "tree": {"sha": "f31acb7b3fddd04c3c1007f0f6fa55cfb60897cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31acb7b3fddd04c3c1007f0f6fa55cfb60897cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7eb5620804540ce5f48d49fadcf0930d9d24000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7eb5620804540ce5f48d49fadcf0930d9d24000", "html_url": "https://github.com/rust-lang/rust/commit/d7eb5620804540ce5f48d49fadcf0930d9d24000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7eb5620804540ce5f48d49fadcf0930d9d24000/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9196b2d0c89b8af853f8f41b5854655932491758", "url": "https://api.github.com/repos/rust-lang/rust/commits/9196b2d0c89b8af853f8f41b5854655932491758", "html_url": "https://github.com/rust-lang/rust/commit/9196b2d0c89b8af853f8f41b5854655932491758"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "2517052b5e4d78973e095572bb544133ac39d960", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-non-lattice-ok.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d7eb5620804540ce5f48d49fadcf0930d9d24000/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7eb5620804540ce5f48d49fadcf0930d9d24000/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs?ref=d7eb5620804540ce5f48d49fadcf0930d9d24000", "patch": "@@ -0,0 +1,56 @@\n+// build-pass\n+\n+// Check that a reservation impl does not force other impls to follow\n+// a lattice discipline.\n+\n+// Why did we ever want to do this?\n+//\n+// We want to eventually add a `impl<T> From<!> for T` impl. That impl conflicts\n+// with existing impls - at least the `impl<T> From<T> for T` impl. There are\n+// 2 ways we thought of for dealing with that conflict:\n+//\n+// 1. Using specialization and doing some handling for the overlap. The current\n+// thought is for something like \"lattice specialization\", which means providing\n+// an (higher-priority) impl for the intersection of every 2 conflicting impls\n+// that determines what happens in the intersection case. That's the first\n+// thing we thought about - see e.g.\n+// https://github.com/rust-lang/rust/issues/57012#issuecomment-452150775\n+//\n+// 2. The other way is to notice that `impl From<!> for T` is basically a marker\n+// trait, as you say since its only method is uninhabited, and allow for \"marker\n+// trait overlap\", where the conflict \"doesn't matter\" as there is nothing that\n+// can cause a conflict.\n+//\n+// Now it turned out lattice specialization doesn't work it, because an\n+// `impl<T> From<T> for Smaht<T>` would require a `impl From<!> for Smaht<!>`,\n+// breaking backwards-compatibility in a fairly painful way. So if we want to\n+// go with a known approach, we should go with a \"marker trait overlap\"-style\n+// approach.\n+\n+#![feature(rustc_attrs, never_type)]\n+\n+trait MyTrait {}\n+\n+impl MyTrait for ! {}\n+\n+trait MyFrom<T> {\n+    fn my_from(x: T) -> Self;\n+}\n+\n+// Given the \"normal\" impls for From\n+#[rustc_reservation_impl=\"this impl is reserved\"]\n+impl<T> MyFrom<!> for T {\n+    fn my_from(x: !) -> Self { match x {} }\n+}\n+\n+impl<T> MyFrom<T> for T {\n+    fn my_from(x: T) -> Self { x }\n+}\n+\n+// ... we *do* want to allow this common pattern, of `From<!> for MySmaht<T>`\n+struct MySmaht<T>(T);\n+impl<T> MyFrom<T> for MySmaht<T> {\n+    fn my_from(x: T) -> Self { MySmaht(x) }\n+}\n+\n+fn main() {}"}]}