{"sha": "ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "node_id": "C_kwDOAAsO6NoAKGFiODM0ZTVlYTkxMmEwM2MwOWIwYjhjM2U3YTExMWUzMGFjNDc5NTI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-11T23:06:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T15:57:15Z"}, "message": "resolve: Refactor obtaining `Module` from its `DefId`\n\nThe `Option<Module>` version is supported for the case where we don't know whether the `DefId` refers to a module or not.\nNon-local traits and enums are also correctly found now.", "tree": {"sha": "4c253ac23ff502ea64c9f7d01d9a6646a29ac8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c253ac23ff502ea64c9f7d01d9a6646a29ac8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "html_url": "https://github.com/rust-lang/rust/commit/ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8021888c8cfd38a69f3661ab3fcf76715faff4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8021888c8cfd38a69f3661ab3fcf76715faff4a", "html_url": "https://github.com/rust-lang/rust/commit/a8021888c8cfd38a69f3661ab3fcf76715faff4a"}], "stats": {"total": 154, "additions": 76, "deletions": 78}, "files": [{"sha": "0cf9d7af58933e3f112c3f2512fe78240f8d3e19", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -93,59 +93,76 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Walks up the tree of definitions starting at `def_id`,\n-    /// stopping at the first `DefKind::Mod` encountered\n-    fn nearest_parent_mod(&mut self, def_id: DefId) -> Module<'a> {\n-        let def_key = self.cstore().def_key(def_id);\n-\n-        let mut parent_id = DefId {\n-            krate: def_id.krate,\n-            index: def_key.parent.expect(\"failed to get parent for module\"),\n-        };\n-        // The immediate parent may not be a module\n-        // (e.g. `const _: () =  { #[path = \"foo.rs\"] mod foo; };`)\n-        // Walk up the tree until we hit a module or the crate root.\n-        while parent_id.index != CRATE_DEF_INDEX\n-            && self.cstore().def_kind(parent_id) != DefKind::Mod\n-        {\n-            let parent_def_key = self.cstore().def_key(parent_id);\n-            parent_id.index = parent_def_key.parent.expect(\"failed to get parent for module\");\n+    /// stopping at the first encountered module.\n+    /// Parent block modules for arbitrary def-ids are not recorded for the local crate,\n+    /// and are not preserved in metadata for foreign crates, so block modules are never\n+    /// returned by this function.\n+    ///\n+    /// For the local crate ignoring block modules may be incorrect, so use this method with care.\n+    ///\n+    /// For foreign crates block modules can be ignored without introducing observable differences,\n+    /// moreover they has to be ignored right now because they are not kept in metadata.\n+    /// Foreign parent modules are used for resolving names used by foreign macros with def-site\n+    /// hygiene, therefore block module ignorability relies on macros with def-site hygiene and\n+    /// block module parents being unreachable from other crates.\n+    /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,\n+    /// but they cannot use def-site hygiene, so the assumption holds\n+    /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).\n+    fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {\n+        loop {\n+            match self.get_module(def_id) {\n+                Some(module) => return module,\n+                None => {\n+                    def_id.index =\n+                        self.def_key(def_id).parent.expect(\"non-root `DefId` without parent\")\n+                }\n+            }\n         }\n-        self.get_module(parent_id)\n     }\n \n-    pub fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n-        // Cache module resolution\n-        if let Some(module) = self.module_map.get(&def_id) {\n-            return *module;\n+    pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {\n+        self.get_module(def_id).expect(\"argument `DefId` is not a module\")\n+    }\n+\n+    /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,\n+    /// or trait), then this function returns that module's resolver representation, otherwise it\n+    /// returns `None`.\n+    /// FIXME: `Module`s for local enums and traits are not currently found.\n+    crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {\n+        if let module @ Some(..) = self.module_map.get(&def_id) {\n+            return module.copied();\n         }\n \n-        assert!(!def_id.is_local());\n-        let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            // This is the crate root\n-            (self.cstore().crate_name(def_id.krate), None)\n-        } else {\n-            let def_key = self.cstore().def_key(def_id);\n-            let name = def_key\n-                .disambiguated_data\n-                .data\n-                .get_opt_name()\n-                .expect(\"given a DefId that wasn't a module\");\n-\n-            let parent = Some(self.nearest_parent_mod(def_id));\n-            (name, parent)\n-        };\n+        if !def_id.is_local() {\n+            let def_kind = self.cstore().def_kind(def_id);\n+            match def_kind {\n+                DefKind::Mod | DefKind::Enum | DefKind::Trait => {\n+                    let def_key = self.cstore().def_key(def_id);\n+                    let parent = def_key.parent.map(|index| {\n+                        self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })\n+                    });\n+                    let name = if def_id.index == CRATE_DEF_INDEX {\n+                        self.cstore().crate_name(def_id.krate)\n+                    } else {\n+                        def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n+                    };\n \n-        // Allocate and return a new module with the information we found\n-        let module = self.arenas.new_module(\n-            parent,\n-            ModuleKind::Def(DefKind::Mod, def_id, name),\n-            self.cstore().module_expansion_untracked(def_id, &self.session),\n-            self.cstore().get_span_untracked(def_id, &self.session),\n-            // FIXME: Account for `#[no_implicit_prelude]` attributes.\n-            parent.map_or(false, |module| module.no_implicit_prelude),\n-        );\n-        self.module_map.insert(def_id, module);\n-        module\n+                    let module = self.arenas.new_module(\n+                        parent,\n+                        ModuleKind::Def(def_kind, def_id, name),\n+                        self.cstore().module_expansion_untracked(def_id, &self.session),\n+                        self.cstore().get_span_untracked(def_id, &self.session),\n+                        // FIXME: Account for `#[no_implicit_prelude]` attributes.\n+                        parent.map_or(false, |module| module.no_implicit_prelude),\n+                    );\n+                    self.module_map.insert(def_id, module);\n+                    Some(module)\n+                }\n+                _ => None,\n+            }\n+        } else {\n+            None\n+        }\n     }\n \n     crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n@@ -162,24 +179,7 @@ impl<'a> Resolver<'a> {\n         if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {\n-            // This is not entirely correct - a `macro_rules!` macro may occur\n-            // inside a 'block' module:\n-            //\n-            // ```rust\n-            // const _: () = {\n-            // #[macro_export]\n-            // macro_rules! my_macro {\n-            //     () => {};\n-            // }\n-            // `\n-            // We don't record this information for external crates, so\n-            // the module we compute here will be the closest 'mod' item\n-            // (not necesssarily the actual parent of the `macro_rules!`\n-            // macro). `macro_rules!` macros can't use def-site hygiene,\n-            // so this hopefully won't be a problem.\n-            //\n-            // See https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508\n-            self.nearest_parent_mod(def_id)\n+            self.get_nearest_non_block_module(def_id)\n         }\n     }\n \n@@ -708,7 +708,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         local_def_id,\n                     );\n                     self.r.extern_crate_map.insert(local_def_id, crate_id);\n-                    self.r.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                    self.r.expect_module(crate_id.as_def_id())\n                 };\n \n                 let used = self.process_macro_use_imports(item, module);"}, {"sha": "435c79d2daf45d19a76f95be8f2e5ec7889ed666", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -915,8 +915,7 @@ impl<'a> Resolver<'a> {\n                     continue;\n                 }\n                 if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(ident.name) {\n-                    let crate_root =\n-                        self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                    let crate_root = self.expect_module(crate_id.as_def_id());\n                     suggestions.extend(self.lookup_import_candidates_from_module(\n                         lookup_ident,\n                         namespace,"}, {"sha": "3c48a76224fd964f8d750978ee035f80223d4452", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -799,7 +799,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     fn with_scope<T>(&mut self, id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {\n-        if let Some(module) = self.r.module_map.get(&self.r.local_def_id(id).to_def_id()).copied() {\n+        if let Some(module) = self.r.get_module(self.r.local_def_id(id).to_def_id()) {\n             // Move down in the graph.\n             let orig_module = replace(&mut self.parent_scope.module, module);\n             self.with_rib(ValueNS, ModuleRibKind(module), |this| {"}, {"sha": "68db06370ffea1aa462345d2027e05ee58653efe", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -2167,9 +2167,8 @@ impl<'a> Resolver<'a> {\n                 return self.graph_root;\n             }\n         };\n-        let module =\n-            self.get_module(module.def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id());\n-\n+        let module = self\n+            .expect_module(module.def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id());\n         debug!(\n             \"resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})\",\n             ident,\n@@ -2181,10 +2180,10 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {\n-        let mut module = self.get_module(module.nearest_parent_mod());\n+        let mut module = self.expect_module(module.nearest_parent_mod());\n         while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {\n             let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));\n-            module = self.get_module(parent.nearest_parent_mod());\n+            module = self.expect_module(parent.nearest_parent_mod());\n         }\n         module\n     }\n@@ -3267,7 +3266,7 @@ impl<'a> Resolver<'a> {\n                 } else {\n                     self.crate_loader.maybe_process_path_extern(ident.name)?\n                 };\n-                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                let crate_root = self.expect_module(crate_id.as_def_id());\n                 Some(\n                     (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)\n                         .to_name_binding(self.arenas),\n@@ -3308,7 +3307,7 @@ impl<'a> Resolver<'a> {\n                 tokens: None,\n             }\n         };\n-        let module = self.get_module(module_id);\n+        let module = self.expect_module(module_id);\n         let parent_scope = &ParentScope::module(module, self);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))"}, {"sha": "39605ec1840f3d398572f1ba2aef5259037a9806", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -240,7 +240,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         );\n \n         let parent_scope =\n-            parent_module.map_or(self.empty_module, |def_id| self.get_module(def_id));\n+            parent_module.map_or(self.empty_module, |def_id| self.expect_module(def_id));\n         self.ast_transform_scopes.insert(expn_id, parent_scope);\n \n         expn_id"}, {"sha": "318c897bcbdf6f1c395effdc447d09cd689f1a16", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab834e5ea912a03c09b0b8c3e7a111e30ac47952/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ab834e5ea912a03c09b0b8c3e7a111e30ac47952", "patch": "@@ -759,7 +759,7 @@ fn traits_implemented_by(cx: &mut DocContext<'_>, type_: DefId, module: DefId) -\n     let mut resolver = cx.resolver.borrow_mut();\n     let in_scope_traits = cx.module_trait_cache.entry(module).or_insert_with(|| {\n         resolver.access(|resolver| {\n-            let parent_scope = &ParentScope::module(resolver.get_module(module), resolver);\n+            let parent_scope = &ParentScope::module(resolver.expect_module(module), resolver);\n             resolver\n                 .traits_in_scope(None, parent_scope, SyntaxContext::root(), None)\n                 .into_iter()"}]}