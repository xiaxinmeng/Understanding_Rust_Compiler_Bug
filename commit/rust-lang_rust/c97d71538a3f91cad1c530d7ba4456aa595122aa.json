{"sha": "c97d71538a3f91cad1c530d7ba4456aa595122aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2Q3MTUzOGEzZjkxY2FkMWM1MzBkN2JhNDQ1NmFhNTk1MTIyYWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-10T23:51:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-10T23:51:36Z"}, "message": "Fix issue 65284", "tree": {"sha": "fc31599006d1373d6f51562404f3fbde934b986c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc31599006d1373d6f51562404f3fbde934b986c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97d71538a3f91cad1c530d7ba4456aa595122aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97d71538a3f91cad1c530d7ba4456aa595122aa", "html_url": "https://github.com/rust-lang/rust/commit/c97d71538a3f91cad1c530d7ba4456aa595122aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97d71538a3f91cad1c530d7ba4456aa595122aa/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd", "html_url": "https://github.com/rust-lang/rust/commit/2748a9fd93dd1a00a4521f4f16de5befbf77f6cd"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "80cdcf566be6b5bacd624044c164d35baca1dbb4", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c97d71538a3f91cad1c530d7ba4456aa595122aa", "patch": "@@ -785,31 +785,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // Get the `hir::Param` to verify whether it already has any bounds.\n                         // We do this to avoid suggesting code that ends up as `T: FooBar`,\n                         // instead we suggest `T: Foo + Bar` in that case.\n-                        let mut has_bounds = false;\n+                        let mut has_bounds = None;\n                         let mut impl_trait = false;\n                         if let Node::GenericParam(ref param) = hir.get(id) {\n-                            match param.kind {\n-                                hir::GenericParamKind::Type { synthetic: Some(_), .. } => {\n-                                    // We've found `fn foo(x: impl Trait)` instead of\n-                                    // `fn foo<T>(x: T)`. We want to suggest the correct\n-                                    // `fn foo(x: impl Trait + TraitBound)` instead of\n-                                    // `fn foo<T: TraitBound>(x: T)`. (#63706)\n-                                    impl_trait = true;\n-                                    has_bounds = param.bounds.len() > 1;\n-                                }\n-                                _ => {\n-                                    has_bounds = !param.bounds.is_empty();\n-                                }\n+                            let kind = &param.kind;\n+                            if let hir::GenericParamKind::Type { synthetic: Some(_), .. } = kind {\n+                                // We've found `fn foo(x: impl Trait)` instead of\n+                                // `fn foo<T>(x: T)`. We want to suggest the correct\n+                                // `fn foo(x: impl Trait + TraitBound)` instead of\n+                                // `fn foo<T: TraitBound>(x: T)`. (See #63706.)\n+                                impl_trait = true;\n+                                has_bounds = param.bounds.get(1);\n+                            } else {\n+                                has_bounds = param.bounds.get(0);\n                             }\n                         }\n                         let sp = hir.span(id);\n-                        // `sp` only covers `T`, change it so that it covers\n-                        // `T:` when appropriate\n-                        let sp = if has_bounds {\n-                            sp.to(self.tcx\n-                                .sess\n-                                .source_map()\n-                                .next_point(self.tcx.sess.source_map().next_point(sp)))\n+                        // `sp` only covers `T`, change it so that it covers `T:` when appropriate.\n+                        let sp = if let Some(first_bound) = has_bounds {\n+                            sp.until(first_bound.span())\n                         } else {\n                             sp\n                         };\n@@ -825,7 +819,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 param,\n                                 if impl_trait { \" +\" } else { \":\" },\n                                 self.tcx.def_path_str(t.def_id),\n-                                if has_bounds { \" +\"} else { \"\" },\n+                                if has_bounds.is_some() { \" + \" } else { \"\" },\n                             )),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "e0eaafdfc2f2213e3bb1da7166d2ce0615b99eaf", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs?ref=c97d71538a3f91cad1c530d7ba4456aa595122aa", "patch": "@@ -0,0 +1,11 @@\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+trait Bar {}\n+\n+fn do_stuff<T : Bar>(t : T) {\n+    t.foo() //~ ERROR no method named `foo` found for type `T` in the current scope\n+}\n+\n+fn main() {}"}, {"sha": "24bf60abf6a7828adc4bc4b650e18638ce7efa50", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d71538a3f91cad1c530d7ba4456aa595122aa/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr?ref=c97d71538a3f91cad1c530d7ba4456aa595122aa", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `foo` found for type `T` in the current scope\n+  --> $DIR/issue-65284-suggest-generic-trait-bound.rs:8:7\n+   |\n+LL |     t.foo()\n+   |       ^^^ method not found in `T`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `foo`, perhaps you need to restrict type parameter `T` with it:\n+   |\n+LL | fn do_stuff<T: Foo + Bar>(t : T) {\n+   |             ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}