{"sha": "17b3c1107a42048209a345924bf6045861c3c498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjNjMTEwN2E0MjA0ODIwOWEzNDU5MjRiZjYwNDU4NjFjM2M0OTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-19T14:16:16Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-27T21:55:14Z"}, "message": "syntax: format: put static arrays in their own blocks to avoid needing a wrapper block.", "tree": {"sha": "0a5b28a3e7aab0ba2d01495deda2606475cb9200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5b28a3e7aab0ba2d01495deda2606475cb9200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b3c1107a42048209a345924bf6045861c3c498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b3c1107a42048209a345924bf6045861c3c498", "html_url": "https://github.com/rust-lang/rust/commit/17b3c1107a42048209a345924bf6045861c3c498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b3c1107a42048209a345924bf6045861c3c498/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22376be7542c84b0412c403ced931c12ec1bfc0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22376be7542c84b0412c403ced931c12ec1bfc0e", "html_url": "https://github.com/rust-lang/rust/commit/22376be7542c84b0412c403ced931c12ec1bfc0e"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "781e6d05803461f376e0816f09ad2498333713b5", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/17b3c1107a42048209a345924bf6045861c3c498/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b3c1107a42048209a345924bf6045861c3c498/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=17b3c1107a42048209a345924bf6045861c3c498", "patch": "@@ -473,22 +473,27 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn item_static_array(ecx: &mut ExtCtxt,\n-                         name: ast::Ident,\n-                         piece_ty: P<ast::Ty>,\n-                         pieces: Vec<P<ast::Expr>>)\n-                         -> P<ast::Stmt> {\n+    fn static_array(ecx: &mut ExtCtxt,\n+                    name: &str,\n+                    piece_ty: P<ast::Ty>,\n+                    pieces: Vec<P<ast::Expr>>)\n+                    -> P<ast::Expr> {\n         let fmtsp = piece_ty.span;\n-        let fmt = ecx.expr_vec(fmtsp, pieces);\n-        let fmt = ecx.expr_addr_of(fmtsp, fmt);\n-        let ty = ast::TyVec(piece_ty);\n-        let ty = ast::TyRptr(Some(ecx.lifetime(fmtsp, special_idents::static_lifetime.name)),\n-                             ast::MutTy{ mutbl: ast::MutImmutable, ty: ecx.ty(fmtsp, ty) });\n-        let ty = ecx.ty(fmtsp, ty);\n-        let st = ast::ItemStatic(ty, ast::MutImmutable, fmt);\n+        let ty = ecx.ty_rptr(fmtsp,\n+            ecx.ty(fmtsp, ast::TyVec(piece_ty)),\n+            Some(ecx.lifetime(fmtsp, special_idents::static_lifetime.name)),\n+            ast::MutImmutable);\n+        let slice = ecx.expr_vec_slice(fmtsp, pieces);\n+        let st = ast::ItemStatic(ty, ast::MutImmutable, slice);\n+\n+        let name = ecx.ident_of(name);\n         let item = ecx.item(fmtsp, name, Context::static_attrs(ecx, fmtsp), st);\n         let decl = respan(fmtsp, ast::DeclItem(item));\n-        P(respan(fmtsp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n+\n+        // Wrap the declaration in a block so that it forms a single expression.\n+        ecx.expr_block(ecx.block(fmtsp,\n+            vec![P(respan(fmtsp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n+            Some(ecx.expr_ident(fmtsp, name))))\n     }\n \n     /// Actually builds the expression which the iformat! block will be expanded\n@@ -501,33 +506,17 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n-        let static_str_name = self.ecx.ident_of(\"__STATIC_FMTSTR\");\n-        let static_lifetime = self.ecx.lifetime(self.fmtsp, self.ecx.ident_of(\"'static\").name);\n+        let static_lifetime = self.ecx.lifetime(self.fmtsp, special_idents::static_lifetime.name);\n         let piece_ty = self.ecx.ty_rptr(\n                 self.fmtsp,\n                 self.ecx.ty_ident(self.fmtsp, self.ecx.ident_of(\"str\")),\n                 Some(static_lifetime),\n                 ast::MutImmutable);\n-        let mut lets = vec![\n-            Context::item_static_array(self.ecx, static_str_name, piece_ty, self.str_pieces)\n-        ];\n-\n-        // Then, build up the static array which will store our precompiled\n-        // nonstandard placeholders, if there are any.\n-        let static_args_name = self.ecx.ident_of(\"__STATIC_FMTARGS\");\n-        if !self.all_pieces_simple {\n-            let piece_ty = self.ecx.ty_path(self.ecx.path_all(\n-                    self.fmtsp,\n-                    true, Context::rtpath(self.ecx, \"Argument\"),\n-                    vec![static_lifetime],\n-                    vec![],\n-                    vec![]\n-                ));\n-            lets.push(Context::item_static_array(self.ecx,\n-                                                 static_args_name,\n-                                                 piece_ty,\n-                                                 self.pieces));\n-        }\n+        let pieces = Context::static_array(self.ecx,\n+                                           \"__STATIC_FMTSTR\",\n+                                           piece_ty,\n+                                           self.str_pieces);\n+\n \n         // Right now there is a bug such that for the expression:\n         //      foo(bar(&1))\n@@ -571,13 +560,25 @@ impl<'a, 'b> Context<'a, 'b> {\n         let args = locals.into_iter().chain(names.into_iter().map(|a| a.unwrap()));\n \n         // Now create the fmt::Arguments struct with all our locals we created.\n-        let pieces = self.ecx.expr_ident(self.fmtsp, static_str_name);\n         let args_slice = self.ecx.expr_vec_slice(self.fmtsp, args.collect());\n \n         let (fn_name, fn_args) = if self.all_pieces_simple {\n             (\"new\", vec![pieces, args_slice])\n         } else {\n-            let fmt = self.ecx.expr_ident(self.fmtsp, static_args_name);\n+            // Build up the static array which will store our precompiled\n+            // nonstandard placeholders, if there are any.\n+            let piece_ty = self.ecx.ty_path(self.ecx.path_all(\n+                    self.fmtsp,\n+                    true, Context::rtpath(self.ecx, \"Argument\"),\n+                    vec![static_lifetime],\n+                    vec![],\n+                    vec![]\n+                ));\n+            let fmt = Context::static_array(self.ecx,\n+                                            \"__STATIC_FMTARGS\",\n+                                            piece_ty,\n+                                            self.pieces);\n+\n             (\"with_placeholders\", vec![pieces, fmt, args_slice])\n         };\n \n@@ -587,7 +588,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.ecx.ident_of(\"Arguments\"),\n                 self.ecx.ident_of(fn_name)), fn_args);\n \n-        let result = match invocation {\n+        let body = match invocation {\n             Call(e) => {\n                 let span = e.span;\n                 self.ecx.expr_call(span, e, vec![\n@@ -601,8 +602,6 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ])\n             }\n         };\n-        let body = self.ecx.expr_block(self.ecx.block(self.fmtsp, lets,\n-                                                      Some(result)));\n \n         // Constructs an AST equivalent to:\n         //"}]}