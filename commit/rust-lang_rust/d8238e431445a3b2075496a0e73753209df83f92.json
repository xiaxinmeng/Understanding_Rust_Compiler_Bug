{"sha": "d8238e431445a3b2075496a0e73753209df83f92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjM4ZTQzMTQ0NWEzYjIwNzU0OTZhMGU3Mzc1MzIwOWRmODNmOTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T07:52:11Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T14:40:15Z"}, "message": "Rollup merge of #45751 - estebank:issue-44684, r=nikomatsakis\n\nHandle anon lifetime arg being returned with named lifetime return type\n\nWhen there's a lifetime mismatch between an argument with an anonymous\nlifetime being returned in a method with a return type that has a named\nlifetime, show specialized lifetime error pointing at argument with a\nhint to give it an explicit lifetime matching the return type.\n\n```\nerror[E0621]: explicit lifetime required in the type of `other`\n  --> file2.rs:21:21\n   |\n17 |     fn bar(&self, other: Foo) -> Foo<'a> {\n   |                   ----- consider changing the type of `other` to `Foo<'a>`\n...\n21 |                     other\n   |                     ^^^^^ lifetime `'a` required\n```\n\nFollow up to #44124 and #42669. Fix #44684.", "tree": {"sha": "2cb749c9c73543132527e4ecbd552e5343a9eb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb749c9c73543132527e4ecbd552e5343a9eb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8238e431445a3b2075496a0e73753209df83f92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAloBxc8ACgkQ/vbIBR0O\nATw8+w/8DCkASJ2wKlNWW7tHLwUsVAcLJW6IcKUbLarBgn8PSpEF/slmkQO1jRWB\nW2FXB5J0BwY+Rt/O7l3IWD44li5185OHewo5ObrdyuyAyiz97JymfmG4OPaTXB+X\n99/lFF/b0SoxapDDXM95Xg2/B4tzzLdhgbElIMtqgqp8JM/doWhi9V5W461QOzmt\nQU0FALlD9Z9AIN7uoRy9G2waQHEzIEgzJgRZ+Td+f95wwxxFahTHdaCpV2586FjH\nyv5K/DljYQZ/u/5QztOG7ALNQeIN95muo+k1ugeK4aAS8AO3kny5swM0cv4ZLoFK\njJuxMgs7aHe2kJvb5LR3AQ1l2UBghmTqilgnNm2bH8Y8gnXBlrSctmhn7CaPfWX8\nVyvGBjumeb/Gj+eHIGSuBFGkBa0wg20IiaoaJ+SQmxBoYUOZQayUFRkQGKlZTntG\nQ+ikKVY67r5wUboQrTpF/JG/9t8Gv3LZuQXHf4n5DiZsZ4tAfwNf6e03zUCwXqbz\nBaWuLthXPwwRQqt0N3+Pkjiag6mB/RuF5uIQNVRMjCCUDWl0Qj+q57TT74S5uWDA\neTJrc9pBPL+3J3kyVYQ4X56jjpWbUcN2zraoUfZcf7AIp1vVQq9ZnjHNccfCJKmB\nnHya1bGg9ATi1rndfd/BkhHnm3oSqOg0Co+aqQ93mhSk0R8SjgI=\n=s2fc\n-----END PGP SIGNATURE-----", "payload": "tree 2cb749c9c73543132527e4ecbd552e5343a9eb1b\nparent 264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f\nparent 805333b2b5602e421124787c7f944c4a7eacdb62\nauthor kennytm <kennytm@gmail.com> 1510041131 +0800\ncommitter kennytm <kennytm@gmail.com> 1510065615 +0800\n\nRollup merge of #45751 - estebank:issue-44684, r=nikomatsakis\n\nHandle anon lifetime arg being returned with named lifetime return type\n\nWhen there's a lifetime mismatch between an argument with an anonymous\nlifetime being returned in a method with a return type that has a named\nlifetime, show specialized lifetime error pointing at argument with a\nhint to give it an explicit lifetime matching the return type.\n\n```\nerror[E0621]: explicit lifetime required in the type of `other`\n  --> file2.rs:21:21\n   |\n17 |     fn bar(&self, other: Foo) -> Foo<'a> {\n   |                   ----- consider changing the type of `other` to `Foo<'a>`\n...\n21 |                     other\n   |                     ^^^^^ lifetime `'a` required\n```\n\nFollow up to #44124 and #42669. Fix #44684.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8238e431445a3b2075496a0e73753209df83f92", "html_url": "https://github.com/rust-lang/rust/commit/d8238e431445a3b2075496a0e73753209df83f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8238e431445a3b2075496a0e73753209df83f92/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f", "html_url": "https://github.com/rust-lang/rust/commit/264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f"}, {"sha": "805333b2b5602e421124787c7f944c4a7eacdb62", "url": "https://api.github.com/repos/rust-lang/rust/commits/805333b2b5602e421124787c7f944c4a7eacdb62", "html_url": "https://github.com/rust-lang/rust/commit/805333b2b5602e421124787c7f944c4a7eacdb62"}], "stats": {"total": 137, "additions": 95, "deletions": 42}, "files": [{"sha": "d7e0877d95c2817e6df14700a9ecf9963d06690b", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -21,25 +21,42 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::error_reporting::util::AnonymousArgInfo;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method prints the error message for lifetime errors when both the concerned regions\n-    // are anonymous.\n-    // Consider a case where we have\n-    // fn foo(x: &mut Vec<&u8>, y: &u8)\n-    //    { x.push(y); }.\n-    // The example gives\n-    // fn foo(x: &mut Vec<&u8>, y: &u8) {\n-    //                    ---      --- these references are declared with different lifetimes...\n-    //            x.push(y);\n-    //            ^ ...but data from `y` flows into `x` here\n-    // It has been extended for the case of structs too.\n-    // Consider the example\n-    // struct Ref<'a> { x: &'a u32 }\n-    // fn foo(mut x: Vec<Ref>, y: Ref) {\n-    //                   ---      --- these structs are declared with different lifetimes...\n-    //               x.push(y);\n-    //               ^ ...but data from `y` flows into `x` here\n-    // }\n-    // It will later be extended to trait objects.\n+    /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n+    ///\n+    /// Consider a case where we have\n+    ///\n+    /// ```no_run\n+    /// fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    ///     x.push(y);\n+    /// }\n+    /// ```\n+    ///\n+    /// The example gives\n+    ///\n+    /// ```text\n+    /// fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    ///                    ---      --- these references are declared with different lifetimes...\n+    ///     x.push(y);\n+    ///     ^ ...but data from `y` flows into `x` here\n+    /// ```\n+    ///\n+    /// It has been extended for the case of structs too.\n+    ///\n+    /// Consider the example\n+    ///\n+    /// ```no_run\n+    /// struct Ref<'a> { x: &'a u32 }\n+    /// ```\n+    ///\n+    /// ```text\n+    /// fn foo(mut x: Vec<Ref>, y: Ref) {\n+    ///                   ---      --- these structs are declared with different lifetimes...\n+    ///     x.push(y);\n+    ///     ^ ...but data from `y` flows into `x` here\n+    /// }\n+    /// ````\n+    ///\n+    /// It will later be extended to trait objects.\n     pub fn try_report_anon_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),"}, {"sha": "6d3b950784097b54ed721e17bda261b79af298e0", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -16,18 +16,15 @@ use infer::region_inference::RegionResolutionError;\n use ty;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method generates the error message for the case when\n-    // the function arguments consist of a named region and an anonymous\n-    // region and corresponds to `ConcreteFailure(..)`\n+    /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n+    /// an anonymous region, emit an descriptive diagnostic error.\n     pub fn try_report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n \n-        debug!(\"try_report_named_anon_conflict(sub={:?}, sup={:?})\",\n-               sub,\n-               sup);\n+        debug!(\"try_report_named_anon_conflict(sub={:?}, sup={:?})\", sub, sup);\n \n         // Determine whether the sub and sup consist of one named region ('a)\n         // and one anonymous (elided) region. If so, find the parameter arg\n@@ -53,10 +50,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             };\n \n         debug!(\"try_report_named_anon_conflict: named = {:?}\", named);\n-        debug!(\"try_report_named_anon_conflict: anon_arg_info = {:?}\",\n-               anon_arg_info);\n-        debug!(\"try_report_named_anon_conflict: region_info = {:?}\",\n-               region_info);\n+        debug!(\"try_report_named_anon_conflict: anon_arg_info = {:?}\", anon_arg_info);\n+        debug!(\"try_report_named_anon_conflict: region_info = {:?}\", region_info);\n \n         let (arg, new_ty, br, is_first, scope_def_id, is_impl_item) = (anon_arg_info.arg,\n                                                                        anon_arg_info.arg_ty,\n@@ -101,6 +96,5 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 .span_label(span, format!(\"lifetime `{}` required\", named))\n                 .emit();\n         return true;\n-\n     }\n }"}, {"sha": "6bcd98a7a6814076552166a450e2256633c96ec0", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -221,6 +221,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => false,\n                 }\n             }\n+            ty::ReEarlyBound(_) => true,\n             _ => false,\n         }\n     }"}, {"sha": "ec73bf90b6e524e550c8e54a814b597f46d2b795", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -21,7 +21,7 @@ struct not_parameterized2 {\n }\n \n fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }\n-//~^ ERROR mismatched types\n+//~^ ERROR explicit lifetime required in the type of `p`\n \n fn take3(p: not_parameterized1) -> not_parameterized1 { p }\n fn take4(p: not_parameterized2) -> not_parameterized2 { p }"}, {"sha": "55752f753ef126b94a3ac76effb62973f90dc766", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Clone)]\n+enum Foo<'a> {\n+    Bar(&'a str),\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar(&self, other: Foo) -> Foo<'a> {\n+        match *self {\n+            Foo::Bar(s) => {\n+                if s == \"test\" {\n+                    other\n+                } else {\n+                    self.clone()\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d1660a620b6c74c22c6c75ef4ddca2bf935fa819", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `other`\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n+   |\n+17 |     fn bar(&self, other: Foo) -> Foo<'a> {\n+   |                   ----- consider changing the type of `other` to `Foo<'a>`\n+...\n+21 |                     other\n+   |                     ^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d1820082093e544845749f91189054aa6be429f", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=d8238e431445a3b2075496a0e73753209df83f92", "previous_filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-earlybound-regions.rs"}, {"sha": "980f14a51d9b1aa3e2d0c4011a7ba96dd81362a0", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8238e431445a3b2075496a0e73753209df83f92/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr?ref=d8238e431445a3b2075496a0e73753209df83f92", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:12\n+   |\n+13 | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n+   |                                       - consider changing the type of `y` to `&'a T`\n+...\n+17 |     x.push(y);\n+   |            ^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "58f2cb94cec1d01ad5fac7bb350493a2ba50e8b5", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-earlybound-regions.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr?ref=264bfc418cc6a0d3f2b695f58fc8aaaea7800a4f", "patch": "@@ -1,11 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-earlybound-regions.rs:17:12\n-   |\n-13 | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n-   |                               -----      -- these two types are declared with different lifetimes...\n-...\n-17 |     x.push(y);\n-   |            ^ ...but data from `y` flows into `x` here\n-\n-error: aborting due to previous error\n-"}]}