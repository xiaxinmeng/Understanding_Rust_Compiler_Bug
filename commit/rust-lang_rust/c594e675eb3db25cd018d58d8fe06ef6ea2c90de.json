{"sha": "c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTRlNjc1ZWIzZGIyNWNkMDE4ZDU4ZDhmZTA2ZWY2ZWEyYzkwZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-01T02:25:08Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:50Z"}, "message": "librustc: Remove `@str` from the language", "tree": {"sha": "4520d9b24ded21fcff4dfe3712de2665d3ed779f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4520d9b24ded21fcff4dfe3712de2665d3ed779f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "html_url": "https://github.com/rust-lang/rust/commit/c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449a7a817ff58288084b49665d5186674255c949", "url": "https://api.github.com/repos/rust-lang/rust/commits/449a7a817ff58288084b49665d5186674255c949", "html_url": "https://github.com/rust-lang/rust/commit/449a7a817ff58288084b49665d5186674255c949"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "33f97b3ba2ab1618c44c6b13a3e83ba08fa5f653", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -887,7 +887,7 @@ fn check_heap_type(cx: &Context, span: Span, ty: ty::t) {\n         let mut n_uniq = 0;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match ty::get(t).sty {\n-                ty::ty_box(_) | ty::ty_str(ty::vstore_box) |\n+                ty::ty_box(_) |\n                 ty::ty_vec(_, ty::vstore_box) |\n                 ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n                     n_box += 1;"}, {"sha": "9bab74dc56a67fbb8cc8b38d0404ecec58c4e0cd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -179,8 +179,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n \n         ty::ty_box(_) |\n         ty::ty_vec(_, ty::vstore_box) |\n-        ty::ty_trait(_, _, ty::BoxTraitStore, _, _) |\n-        ty::ty_str(ty::vstore_box) => {\n+        ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n             Some(deref_ptr(gc_ptr))\n         }\n "}, {"sha": "b89ec9d19dfbbcb2de2300789fc3f11633ba4131", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -2094,8 +2094,7 @@ fn type_metadata(cx: &CrateContext,\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n                 ty::vstore_box => {\n-                    let boxed_vec_metadata = boxed_vec_metadata(cx, i8_t, usage_site_span);\n-                    pointer_type_metadata(cx, t, boxed_vec_metadata)\n+                    fail!(\"unexpected managed string\")\n                 }\n                 ty::vstore_slice(_region) => {\n                     vec_slice_metadata(cx, t, i8_t, usage_site_span)"}, {"sha": "b440db66a12ff1dc8f6a103732ccee1f6051665b", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -222,7 +222,7 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n         adt::incomplete_type_of(cx, repr, name)\n       }\n       ty::ty_str(ty::vstore_box) => {\n-          Type::at_box(cx, Type::vec(cx.sess.targ_cfg.arch, &Type::i8())).ptr_to()\n+          fail!(\"unexpected managed string\")\n       }\n       ty::ty_vec(ref mt, ty::vstore_box) => {\n           let e_ty = type_of(cx, mt.ty);"}, {"sha": "9f8b9140417e3c103ea82cbc812db708ae177aad", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -413,8 +413,17 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                 // will run after this as long as the path isn't a trait.\n                 let def_map = tcx.def_map.borrow();\n                 match def_map.get().find(&id) {\n-                    Some(&ast::DefPrimTy(ast::TyStr)) if a_seq_ty.mutbl == ast::MutImmutable => {\n+                    Some(&ast::DefPrimTy(ast::TyStr)) if\n+                            a_seq_ty.mutbl == ast::MutImmutable => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n+                        match vst {\n+                            ty::vstore_box => {\n+                                tcx.sess.span_err(path.span,\n+                                                  \"managed strings are not \\\n+                                                   supported\")\n+                            }\n+                            _ => {}\n+                        }\n                         return ty::mk_str(tcx, vst);\n                     }\n                     Some(&ast::DefTrait(trait_def_id)) => {"}, {"sha": "4f7e6df95e1cbc4fb23fb21d9df1c9a438d74adc", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -874,11 +874,14 @@ impl Clean<PathSegment> for ast::PathSegment {\n }\n \n fn path_to_str(p: &ast::Path) -> ~str {\n-    use syntax::parse::token::interner_get;\n+    use syntax::parse::token;\n \n     let mut s = ~\"\";\n     let mut first = true;\n-    for i in p.segments.iter().map(|x| interner_get(x.identifier.name)) {\n+    for i in p.segments.iter().map(|x| {\n+            let string = token::get_ident(x.identifier.name);\n+            string.get().to_str()\n+    }) {\n         if !first || p.global {\n             s.push_str(\"::\");\n         } else {"}, {"sha": "0315e560bb783c98cd306f950685d55c6405c454", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -3477,7 +3477,6 @@ mod tests {\n                 let e = $e;\n                 assert_eq!(s1 + s2, e.to_owned());\n                 assert_eq!(s1.to_owned() + s2, e.to_owned());\n-                assert_eq!(s1.to_managed() + s2, e.to_owned());\n             } }\n         );\n "}, {"sha": "d8d98b2779316b5d1a15cf6a918f23fbd85230e8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -1224,7 +1224,7 @@ mod test {\n     fn run_renaming_test(t: &RenamingTest, test_idx: uint) {\n         let invalid_name = token::special_idents::invalid.name;\n         let (teststr, bound_connections, bound_ident_check) = match *t {\n-            (ref str,ref conns, bic) => (str.to_managed(), conns.clone(), bic)\n+            (ref str,ref conns, bic) => (str.to_owned(), conns.clone(), bic)\n         };\n         let cr = expand_crate_str(teststr.to_owned());\n         // find the bindings:\n@@ -1304,7 +1304,7 @@ foo_module!()\n \n         let cxbinds : ~[&ast::Ident] =\n             bindings.iter().filter(|b| {\n-                let string = token::get_ident(b);\n+                let string = token::get_ident(b.name);\n                 \"xx\" == string.get()\n             }).collect();\n         let cxbind = match cxbinds {"}, {"sha": "46f1f33143e1fd88de70f4334dea947c5cf4084c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -44,6 +44,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteMultipleImport,\n     ObsoleteExternModAttributesInParens,\n     ObsoleteManagedPattern,\n+    ObsoleteManagedString,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -149,6 +150,10 @@ impl ParserObsoleteMethods for Parser {\n                 \"use a nested `match` expression instead of a managed box \\\n                  pattern\"\n             ),\n+            ObsoleteManagedString => (\n+                \"managed string\",\n+                \"use `Rc<~str>` instead of a managed string\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "fb679fa0460d5df19a8382624618eae8b7a5b4a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -2295,7 +2295,10 @@ impl Parser {\n             ex = match e.node {\n               ExprVec(..) |\n               ExprRepeat(..) => ExprVstore(e, ExprVstoreBox),\n-              ExprLit(lit) if lit_is_str(lit) => ExprVstore(e, ExprVstoreBox),\n+              ExprLit(lit) if lit_is_str(lit) => {\n+                  self.obsolete(self.last_span, ObsoleteManagedString);\n+                  ExprVstore(e, ExprVstoreBox)\n+              }\n               _ => self.mk_unary(UnBox, e)\n             };\n           }"}, {"sha": "fa53f021cdbdb3a3856d6d4289ecec41ae4d81ca", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -544,8 +544,8 @@ pub fn get_ident_interner() -> @IdentInterner {\n /// interner lives for the life of the task, this can be safely treated as an\n /// immortal string, as long as it never crosses between tasks.\n ///\n-/// XXX(pcwalton): You must be careful about what you do in the destructors of\n-/// objects stored in TLS, because they may run after the interner is\n+/// FIXME(pcwalton): You must be careful about what you do in the destructors\n+/// of objects stored in TLS, because they may run after the interner is\n /// destroyed. In particular, they must not access string contents. This can\n /// be fixed in the future by just leaking all strings until task death\n /// somehow.\n@@ -585,8 +585,9 @@ impl InternedString {\n \n impl BytesContainer for InternedString {\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        // XXX(pcwalton): This is a workaround for the incorrect signature of\n-        // `BytesContainer`, which is itself a workaround for the lack of DST.\n+        // FIXME(pcwalton): This is a workaround for the incorrect signature\n+        // of `BytesContainer`, which is itself a workaround for the lack of\n+        // DST.\n         unsafe {\n             let this = self.get();\n             cast::transmute(this.container_as_bytes())"}, {"sha": "fc3e55dcde2565dfae472bb6d6aacf0ba783554a", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -253,7 +253,7 @@ mod tests {\n \n     #[test]\n     fn i3 () {\n-        let i : Interner<@~str> = Interner::prefill([\n+        let i : Interner<RcStr> = Interner::prefill([\n             RcStr::new(\"Alan\"),\n             RcStr::new(\"Bob\"),\n             RcStr::new(\"Carol\")"}, {"sha": "5e8c83558fb9e4a481891d2431ef42bec5b9c74f", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594e675eb3db25cd018d58d8fe06ef6ea2c90de/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=c594e675eb3db25cd018d58d8fe06ef6ea2c90de", "patch": "@@ -25,7 +25,6 @@ fn main() {\n     @[1]; //~ ERROR type uses managed\n     //~^ ERROR type uses managed\n     fn f(_: @Clone) {} //~ ERROR type uses managed\n-    //~^ ERROR type uses managed\n \n     ~2; //~ ERROR type uses owned\n     ~[1]; //~ ERROR type uses owned"}]}