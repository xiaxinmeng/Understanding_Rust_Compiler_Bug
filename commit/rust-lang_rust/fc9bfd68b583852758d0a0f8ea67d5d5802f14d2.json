{"sha": "fc9bfd68b583852758d0a0f8ea67d5d5802f14d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWJmZDY4YjU4Mzg1Mjc1OGQwYTBmOGVhNjdkNWQ1ODAyZjE0ZDI=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-27T11:24:17Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-27T11:24:17Z"}, "message": "Treat doc comments separately", "tree": {"sha": "116c35044c070829fb837c771890155b334d1152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116c35044c070829fb837c771890155b334d1152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2", "html_url": "https://github.com/rust-lang/rust/commit/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "html_url": "https://github.com/rust-lang/rust/commit/8b3f28cf0f0cd30ddba884b10c395391ff22beb0"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "af484c886ab35b7d796995d6eea834fd2938251d", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9bfd68b583852758d0a0f8ea67d5d5802f14d2/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=fc9bfd68b583852758d0a0f8ea67d5d5802f14d2", "patch": "@@ -12,7 +12,7 @@ use smallvec::smallvec;\n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n     Permitted,\n-    NotPermitted { reason: &'a str, prev_attr_sp: Option<Span> },\n+    NotPermitted { reason: &'a str, saw_doc_comment: bool, prev_attr_sp: Option<Span> },\n }\n \n const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n@@ -43,8 +43,11 @@ impl<'a> Parser<'a> {\n                         DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n                     };\n                     let inner_parse_policy =\n-                        InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason,\n-                            prev_attr_sp: attrs.last().and_then(|a| Some(a.span)) };\n+                        InnerAttributeParsePolicy::NotPermitted {\n+                            reason: inner_error_reason,\n+                            saw_doc_comment: just_parsed_doc_comment,\n+                            prev_attr_sp: attrs.last().and_then(|a| Some(a.span))\n+                        };\n                     let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     attrs.push(attr);\n                     just_parsed_doc_comment = false;\n@@ -78,8 +81,11 @@ impl<'a> Parser<'a> {\n         let inner_parse_policy = if permit_inner {\n             InnerAttributeParsePolicy::Permitted\n         } else {\n-            InnerAttributeParsePolicy::NotPermitted\n-                { reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG, prev_attr_sp: None }\n+            InnerAttributeParsePolicy::NotPermitted {\n+                reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG,\n+                saw_doc_comment: false,\n+                prev_attr_sp: None\n+            }\n         };\n         self.parse_attribute_with_inner_parse_policy(inner_parse_policy)\n     }\n@@ -117,16 +123,22 @@ impl<'a> Parser<'a> {\n \n                 // Emit error if inner attribute is encountered and not permitted\n                 if style == ast::AttrStyle::Inner {\n-                    if let InnerAttributeParsePolicy::NotPermitted { reason, prev_attr_sp }\n-                            = inner_parse_policy {\n+                    if let InnerAttributeParsePolicy::NotPermitted { reason,\n+                        saw_doc_comment, prev_attr_sp } = inner_parse_policy {\n+                        let prev_attr_note = if saw_doc_comment {\n+                            \"previous doc comment\"\n+                        } else {\n+                            \"previous outer attribute\"\n+                        };\n+\n                         let mut diagnostic = self\n                             .diagnostic()\n                             .struct_span_err(attr_sp, reason);\n \n                         if let Some(prev_attr_sp) = prev_attr_sp {\n                             diagnostic\n                                 .span_label(attr_sp, \"not permitted following an outer attibute\")\n-                                .span_label(prev_attr_sp, \"previous outer attribute\");\n+                                .span_label(prev_attr_sp, prev_attr_note);\n                         }\n \n                         diagnostic"}]}