{"sha": "9aec7a3e85c5b07923eab05d3ebe9d031bf258f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWM3YTNlODVjNWIwNzkyM2VhYjA1ZDNlYmU5ZDAzMWJmMjU4ZjM=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-22T23:33:28Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-22T23:33:28Z"}, "message": "Fix up tests, export tim_sort", "tree": {"sha": "648013b1342ed6c5ee7963ab8604d03a9758302d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/648013b1342ed6c5ee7963ab8604d03a9758302d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3", "html_url": "https://github.com/rust-lang/rust/commit/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e3bec0ced8d781cdd93996e7b8eeedb13f81ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3bec0ced8d781cdd93996e7b8eeedb13f81ba8", "html_url": "https://github.com/rust-lang/rust/commit/0e3bec0ced8d781cdd93996e7b8eeedb13f81ba8"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "98f98fe7fce6fd30004c772f25dd8f2dc60f8933", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aec7a3e85c5b07923eab05d3ebe9d031bf258f3/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=9aec7a3e85c5b07923eab05d3ebe9d031bf258f3", "patch": "@@ -166,7 +166,7 @@ const MIN_MERGE: uint = 64;\n const MIN_GALLOP: uint = 7;\n const INITIAL_TMP_STORAGE: uint = 128;\n \n-fn tim_sort<T: Ord>(array: &[mut T]) {\n+pub fn tim_sort<T: Ord>(array: &[mut T]) {\n     let size = array.len();\n     if size < 2 {\n         return;\n@@ -977,7 +977,7 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n-    #[legacy_exports];\n+    // #[legacy_exports];\n     struct CVal {\n         val: ~float,\n     }\n@@ -1046,10 +1046,10 @@ mod test_tim_sort {\n \n     struct DVal { val: ~uint }\n     impl DVal: Ord {\n-        pure fn lt(other: &DVal) -> bool { true }\n-        pure fn le(other: &DVal) -> bool { true }\n-        pure fn gt(other: &DVal) -> bool { true }\n-        pure fn ge(other: &DVal) -> bool { true }\n+        pure fn lt(_x: &DVal) -> bool { true }\n+        pure fn le(_x: &DVal) -> bool { true }\n+        pure fn gt(_x: &DVal) -> bool { true }\n+        pure fn ge(_x: &DVal) -> bool { true }\n     }\n \n     #[test]\n@@ -1066,16 +1066,11 @@ mod test_tim_sort {\n     }\n }\n \n-/*fn f<T: Ord>(array: &[mut T]) { array[0] <-> array[0] }\n-\n-fn ice_test() {\n-    let _s1 = &fn(arr: &[mut ~float]) { tim_sort(arr); };\n-}*/\n-\n-//#[cfg(test)]\n+/*\n+#[cfg(test)]\n mod big_tests {\n \n-    //#[test]\n+    #[test]\n     fn sorts_test() {\n         let low = 5;\n         let high = 10;\n@@ -1091,9 +1086,9 @@ mod big_tests {\n \n         // Run tabulate_unique and tabulate_managed\n         // with the other sorts at some point\n-        //tabulate_unique(low, high);\n-        //tabulate_managed(low, high);\n-        //tabulate_linear(low, high);\n+        tabulate_unique(low, high);\n+        tabulate_managed(low, high);\n+        tabulate_linear();\n     }\n \n     fn multiplyVec<T: Copy>(arr: &[const T], num: uint) -> ~[mut T] {\n@@ -1111,7 +1106,7 @@ mod big_tests {\n         vec::append(two, one)\n     }\n \n-    /*fn tabulate_unique(lo: uint, hi: uint) {\n+    fn tabulate_unique(lo: uint, hi: uint) {\n         fn isSorted<T: Ord>(arr: &[const T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n@@ -1181,9 +1176,9 @@ mod big_tests {\n             tim_sort(arr); // !sort\n             isSorted(arr);\n         }\n-    }*/\n+    }\n \n-    /*fn tabulate_managed(lo: uint, hi: uint) {\n+    fn tabulate_managed(lo: uint, hi: uint) {\n         fn isSorted<T: Ord>(arr: &[const @T], expected_refcount: uint) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n@@ -1255,8 +1250,7 @@ mod big_tests {\n             isSorted(arr, 2);\n         }\n     }\n-*/\n-/*\n+\n     struct LVal {\n         val: uint,\n         key: fn(@uint),\n@@ -1281,8 +1275,8 @@ mod big_tests {\n         pure fn ge(other: &LVal) -> bool { self.val >= other.val }\n     }\n \n-    fn tabulate_linear(lo: uint, hi: uint) {\n-        fn key(+_x: @uint) { }\n+    fn tabulate_linear() {\n+        fn key(_x: @uint) { }\n         fn isSorted<T: Ord>(arr: &[const T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n@@ -1310,8 +1304,8 @@ mod big_tests {\n \n         assert n == dropped;\n     }\n-    */\n }\n+*/\n \n // Local Variables:\n // mode: rust;"}]}