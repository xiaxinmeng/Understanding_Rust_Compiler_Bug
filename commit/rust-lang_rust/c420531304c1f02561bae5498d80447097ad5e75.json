{"sha": "c420531304c1f02561bae5498d80447097ad5e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjA1MzEzMDRjMWYwMjU2MWJhZTU0OThkODA0NDcwOTdhZDVlNzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-23T17:39:49Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:37Z"}, "message": "Replace `ScalarKind` with `Primitive`", "tree": {"sha": "67f96f5afa39db64b82f90b62702e60151822a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f96f5afa39db64b82f90b62702e60151822a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c420531304c1f02561bae5498d80447097ad5e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c420531304c1f02561bae5498d80447097ad5e75", "html_url": "https://github.com/rust-lang/rust/commit/c420531304c1f02561bae5498d80447097ad5e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c420531304c1f02561bae5498d80447097ad5e75/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc60a22b1034140505866bbf757095a23b631327", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc60a22b1034140505866bbf757095a23b631327", "html_url": "https://github.com/rust-lang/rust/commit/cc60a22b1034140505866bbf757095a23b631327"}], "stats": {"total": 296, "additions": 83, "deletions": 213}, "files": [{"sha": "b41652469aeed319537a33d85cf712db0d99ba4d", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -10,7 +10,7 @@ mod value;\n \n pub use self::error::{EvalError, EvalResult, EvalErrorKind, AssertMessage};\n \n-pub use self::value::{Scalar, ScalarKind, Value, ConstValue};\n+pub use self::value::{Scalar, Value, ConstValue};\n \n use std::fmt;\n use mir;"}, {"sha": "6f82b38e2eb0649495cd737c51295c35925c22a8", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -202,16 +202,6 @@ pub enum Scalar {\n     Ptr(Pointer),\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq)]\n-pub enum ScalarKind {\n-    I8, I16, I32, I64, I128,\n-    U8, U16, U32, U64, U128,\n-    F32, F64,\n-    Ptr, FnPtr,\n-    Bool,\n-    Char,\n-}\n-\n impl<'tcx> Scalar {\n     pub fn undef() -> Self {\n         Scalar::Bits { bits: 0, defined: 0 }\n@@ -264,59 +254,3 @@ impl<'tcx> Scalar {\n         }\n     }\n }\n-\n-impl ScalarKind {\n-    pub fn is_int(self) -> bool {\n-        use self::ScalarKind::*;\n-        match self {\n-            I8 | I16 | I32 | I64 | I128 | U8 | U16 | U32 | U64 | U128 => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_signed_int(self) -> bool {\n-        use self::ScalarKind::*;\n-        match self {\n-            I8 | I16 | I32 | I64 | I128 => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_float(self) -> bool {\n-        use self::ScalarKind::*;\n-        match self {\n-            F32 | F64 => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn from_uint_size(size: Size) -> Self {\n-        match size.bytes() {\n-            1 => ScalarKind::U8,\n-            2 => ScalarKind::U16,\n-            4 => ScalarKind::U32,\n-            8 => ScalarKind::U64,\n-            16 => ScalarKind::U128,\n-            _ => bug!(\"can't make uint with size {}\", size.bytes()),\n-        }\n-    }\n-\n-    pub fn from_int_size(size: Size) -> Self {\n-        match size.bytes() {\n-            1 => ScalarKind::I8,\n-            2 => ScalarKind::I16,\n-            4 => ScalarKind::I32,\n-            8 => ScalarKind::I64,\n-            16 => ScalarKind::I128,\n-            _ => bug!(\"can't make int with size {}\", size.bytes()),\n-        }\n-    }\n-\n-    pub fn is_ptr(self) -> bool {\n-        use self::ScalarKind::*;\n-        match self {\n-            Ptr | FnPtr => true,\n-            _ => false,\n-        }\n-    }\n-}"}, {"sha": "98df4b150fa6ac7e5fc716b415c5d04323fcf454", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -11,7 +11,7 @@\n use session::{self, DataTypeKind};\n use ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n-use syntax::ast::{self, FloatTy, IntTy, UintTy};\n+use syntax::ast::{self, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n \n@@ -130,8 +130,8 @@ impl PrimitiveExt for Primitive {\n     fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n-            F32 => tcx.types.f32,\n-            F64 => tcx.types.f64,\n+            Float(FloatTy::F32) => tcx.types.f32,\n+            Float(FloatTy::F64) => tcx.types.f64,\n             Pointer => tcx.mk_mut_ptr(tcx.mk_nil()),\n         }\n     }\n@@ -488,8 +488,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             ty::TyUint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::TyFloat(FloatTy::F32) => scalar(F32),\n-            ty::TyFloat(FloatTy::F64) => scalar(F64),\n+            ty::TyFloat(fty) => scalar(Float(fty)),\n             ty::TyFnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();\n@@ -1908,8 +1907,7 @@ impl_stable_hash_for!(enum ::ty::layout::Integer {\n \n impl_stable_hash_for!(enum ::ty::layout::Primitive {\n     Int(integer, signed),\n-    F32,\n-    F64,\n+    Float(fty),\n     Pointer\n });\n "}, {"sha": "88b75ff9c09439cbfa68c1241024ae1c06db99b2", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -15,6 +15,7 @@ use rustc::hir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc_target::spec::PanicStrategy;\n+use rustc_target::abi::FloatTy;\n use mono_item::DefPathBasedNames;\n use type_::Type;\n \n@@ -324,8 +325,8 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                                scalar: &layout::Scalar, offset: Size) -> Type {\n         match scalar.value {\n             layout::Int(i, _) => Type::from_integer(cx, i),\n-            layout::F32 => Type::f32(cx),\n-            layout::F64 => Type::f64(cx),\n+            layout::Float(FloatTy::F32) => Type::f32(cx),\n+            layout::Float(FloatTy::F64) => Type::f64(cx),\n             layout::Pointer => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {"}, {"sha": "5949df697d7e7531063108cafc2a306369cefdd3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 74, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -14,7 +14,7 @@ use rustc::middle::const_val::FrameInfo;\n use syntax::codemap::{self, Span};\n use syntax::ast::Mutability;\n use rustc::mir::interpret::{\n-    GlobalId, Value, Scalar, ScalarKind,\n+    GlobalId, Value, Scalar,\n     EvalError, EvalResult, EvalErrorKind, Pointer, ConstValue,\n };\n use std::mem;\n@@ -230,13 +230,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n     pub fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value> {\n         let ptr = self.memory.allocate_bytes(s.as_bytes());\n-        Ok(Value::ScalarPair(\n-            Scalar::Ptr(ptr),\n-            Scalar::Bits {\n-                bits: s.len() as u128,\n-                defined: self.tcx.data_layout.pointer_size.bits() as u8,\n-            },\n-        ))\n+        Ok(Scalar::Ptr(ptr).to_value_with_len(s.len() as u64, self.tcx.tcx))\n     }\n \n     pub fn const_value_to_value(\n@@ -1271,72 +1265,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub fn ty_to_scalar_kind(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, ScalarKind> {\n-        use syntax::ast::FloatTy;\n-\n-        let kind = match ty.sty {\n-            ty::TyBool => ScalarKind::Bool,\n-            ty::TyChar => ScalarKind::Char,\n-\n-            ty::TyInt(int_ty) => {\n-                use syntax::ast::IntTy::*;\n-                let size = match int_ty {\n-                    I8 => Size::from_bytes(1),\n-                    I16 => Size::from_bytes(2),\n-                    I32 => Size::from_bytes(4),\n-                    I64 => Size::from_bytes(8),\n-                    I128 => Size::from_bytes(16),\n-                    Isize => self.memory.pointer_size(),\n-                };\n-                ScalarKind::from_int_size(size)\n-            }\n-\n-            ty::TyUint(uint_ty) => {\n-                use syntax::ast::UintTy::*;\n-                let size = match uint_ty {\n-                    U8 => Size::from_bytes(1),\n-                    U16 => Size::from_bytes(2),\n-                    U32 => Size::from_bytes(4),\n-                    U64 => Size::from_bytes(8),\n-                    U128 => Size::from_bytes(16),\n-                    Usize => self.memory.pointer_size(),\n-                };\n-                ScalarKind::from_uint_size(size)\n-            }\n-\n-            ty::TyFloat(FloatTy::F32) => ScalarKind::F32,\n-            ty::TyFloat(FloatTy::F64) => ScalarKind::F64,\n-\n-            ty::TyFnPtr(_) => ScalarKind::FnPtr,\n-\n-            ty::TyRef(_, ty, _) |\n-            ty::TyRawPtr(ty::TypeAndMut { ty, .. }) if self.type_is_sized(ty) => {\n-                ScalarKind::Ptr\n-            }\n-\n-            ty::TyAdt(def, _) if def.is_box() => ScalarKind::Ptr,\n-\n-            ty::TyAdt(..) => {\n-                match self.layout_of(ty)?.abi {\n-                    layout::Abi::Scalar(ref scalar) => {\n-                        use rustc::ty::layout::Primitive::*;\n-                        match scalar.value {\n-                            Int(i, false) => ScalarKind::from_uint_size(i.size()),\n-                            Int(i, true) => ScalarKind::from_int_size(i.size()),\n-                            F32 => ScalarKind::F32,\n-                            F64 => ScalarKind::F64,\n-                            Pointer => ScalarKind::Ptr,\n-                        }\n-                    }\n-\n-                    _ => return err!(TypeNotPrimitive(ty)),\n-                }\n-            }\n-\n-            _ => return err!(TypeNotPrimitive(ty)),\n-        };\n-\n-        Ok(kind)\n+    pub fn ty_to_primitive(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, layout::Primitive> {\n+        match self.layout_of(ty)?.abi {\n+            layout::Abi::Scalar(ref scalar) => Ok(scalar.value),\n+            _ => err!(TypeNotPrimitive(ty)),\n+        }\n     }\n \n     fn ensure_valid_value(&self, val: Scalar, ty: Ty<'tcx>) -> EvalResult<'tcx> {"}, {"sha": "a257117de1df3c3e31ba2b5b79560ee66d723bd0", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -68,8 +68,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         use rustc::mir::BinOp::*;\n \n-        let left_kind = self.ty_to_scalar_kind(left_ty)?;\n-        let right_kind = self.ty_to_scalar_kind(right_ty)?;\n+        let left_kind = self.ty_to_primitive(left_ty)?;\n+        let right_kind = self.ty_to_primitive(right_ty)?;\n         trace!(\"Running binary op {:?}: {:?} ({:?}), {:?} ({:?})\", bin_op, left, left_kind, right, right_kind);\n \n         // I: Handle operations that support pointers"}, {"sha": "3734e563d585e5fb65b5e943bf1380b0585ebb92", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -33,8 +33,8 @@ fn float_reg<'a, Ty, C>(cx: C, ret: &ArgType<'a, Ty>, i: usize) -> Option<Reg>\n {\n     match ret.layout.field(cx, i).abi {\n         abi::Abi::Scalar(ref scalar) => match scalar.value {\n-            abi::F32 => Some(Reg::f32()),\n-            abi::F64 => Some(Reg::f64()),\n+            abi::Float(abi::FloatTy::F32) => Some(Reg::f32()),\n+            abi::Float(abi::FloatTy::F64) => Some(Reg::f64()),\n             _ => None\n         },\n         _ => None\n@@ -117,7 +117,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n \n                 // We only care about aligned doubles\n                 if let abi::Abi::Scalar(ref scalar) = field.abi {\n-                    if let abi::F64 = scalar.value {\n+                    if let abi::Float(abi::FloatTy::F64) = scalar.value {\n                         if offset.is_abi_aligned(dl.f64_align) {\n                             // Insert enough integers to cover [last_offset, offset)\n                             assert!(last_offset.is_abi_aligned(dl.f64_align));"}, {"sha": "fcae9ea22bba1cde930429a3eeb15b8df4fd25b2", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -256,8 +256,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                 let kind = match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => RegKind::Integer,\n-                    abi::F32 |\n-                    abi::F64 => RegKind::Float\n+                    abi::Float(_) => RegKind::Float,\n                 };\n                 Some(Reg {\n                     kind,"}, {"sha": "37be6ea41c63a091c1744d9d3486918308c77e3f", "filename": "src/librustc_target/abi/call/s390x.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -29,12 +29,7 @@ fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     match layout.abi {\n-        abi::Abi::Scalar(ref scalar) => {\n-            match scalar.value {\n-                abi::F32 | abi::F64 => true,\n-                _ => false\n-            }\n-        }\n+        abi::Abi::Scalar(ref scalar) => scalar.value.is_float(),\n         abi::Abi::Aggregate { .. } => {\n             if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(cx, layout.field(cx, 0))"}, {"sha": "0c0040de9df9fc4ccfd2ef38be6ca70953a1f58b", "filename": "src/librustc_target/abi/call/x86.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -23,12 +23,7 @@ fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n     match layout.abi {\n-        abi::Abi::Scalar(ref scalar) => {\n-            match scalar.value {\n-                abi::F32 | abi::F64 => true,\n-                _ => false\n-            }\n-        }\n+        abi::Abi::Scalar(ref scalar) => scalar.value.is_float(),\n         abi::Abi::Aggregate { .. } => {\n             if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(cx, layout.field(cx, 0))"}, {"sha": "a443255b9700f1bf5b425661565bf6f3a8d82944", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -55,8 +55,7 @@ fn classify_arg<'a, Ty, C>(cx: C, arg: &ArgType<'a, Ty>)\n                 match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => Class::Int,\n-                    abi::F32 |\n-                    abi::F64 => Class::Sse\n+                    abi::Float(_) => Class::Sse\n                 }\n             }\n "}, {"sha": "7ff04df6233995322e64931624333243d9c7c7dd", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -13,7 +13,7 @@ pub use self::Primitive::*;\n \n use spec::Target;\n \n-use std::cmp;\n+use std::{cmp, fmt};\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n pub mod call;\n@@ -488,6 +488,42 @@ impl Integer {\n     }\n }\n \n+\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n+         PartialOrd, Ord)]\n+pub enum FloatTy {\n+    F32,\n+    F64,\n+}\n+\n+impl fmt::Debug for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.ty_to_string())\n+    }\n+}\n+\n+impl FloatTy {\n+    pub fn ty_to_string(&self) -> &'static str {\n+        match *self {\n+            FloatTy::F32 => \"f32\",\n+            FloatTy::F64 => \"f64\",\n+        }\n+    }\n+\n+    pub fn bit_width(&self) -> usize {\n+        match *self {\n+            FloatTy::F32 => 32,\n+            FloatTy::F64 => 64,\n+        }\n+    }\n+}\n+\n /// Fundamental unit of memory access and layout.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Primitive {\n@@ -499,8 +535,7 @@ pub enum Primitive {\n     /// a negative integer passed by zero-extension will appear positive in\n     /// the callee, and most operations on it will produce the wrong values.\n     Int(Integer, bool),\n-    F32,\n-    F64,\n+    Float(FloatTy),\n     Pointer\n }\n \n@@ -510,8 +545,8 @@ impl<'a, 'tcx> Primitive {\n \n         match self {\n             Int(i, _) => i.size(),\n-            F32 => Size::from_bits(32),\n-            F64 => Size::from_bits(64),\n+            Float(FloatTy::F32) => Size::from_bits(32),\n+            Float(FloatTy::F64) => Size::from_bits(64),\n             Pointer => dl.pointer_size\n         }\n     }\n@@ -521,11 +556,25 @@ impl<'a, 'tcx> Primitive {\n \n         match self {\n             Int(i, _) => i.align(dl),\n-            F32 => dl.f32_align,\n-            F64 => dl.f64_align,\n+            Float(FloatTy::F32) => dl.f32_align,\n+            Float(FloatTy::F64) => dl.f64_align,\n             Pointer => dl.pointer_align\n         }\n     }\n+\n+    pub fn is_float(self) -> bool {\n+        match self {\n+            Float(_) => true,\n+            _ => false\n+        }\n+    }\n+\n+    pub fn is_int(self) -> bool {\n+        match self {\n+            Int(..) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Information about one scalar component of a Rust type."}, {"sha": "c9843de547fb21975b029c1f2ed88695a31e94a5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420531304c1f02561bae5498d80447097ad5e75/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c420531304c1f02561bae5498d80447097ad5e75", "patch": "@@ -33,6 +33,8 @@ use std::fmt;\n use rustc_data_structures::sync::Lrc;\n use std::u32;\n \n+pub use rustc_target::abi::FloatTy;\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct Label {\n     pub ident: Ident,\n@@ -1519,41 +1521,6 @@ impl fmt::Display for UintTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n-         PartialOrd, Ord)]\n-pub enum FloatTy {\n-    F32,\n-    F64,\n-}\n-\n-impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl FloatTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n-            FloatTy::F32 => \"f32\",\n-            FloatTy::F64 => \"f64\",\n-        }\n-    }\n-\n-    pub fn bit_width(&self) -> usize {\n-        match *self {\n-            FloatTy::F32 => 32,\n-            FloatTy::F64 => 64,\n-        }\n-    }\n-}\n-\n // Bind a type to an associated type: `A=Foo`.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeBinding {"}]}