{"sha": "d2b7ea877c6290094a977d17ddb2ae9853de507b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjdlYTg3N2M2MjkwMDk0YTk3N2QxN2RkYjJhZTk4NTNkZTUwN2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-23T03:39:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-23T03:43:50Z"}, "message": "rustc: Don't commit unification changes until unify succeeds\n\nThis is so that subsequent reports about type mismatches get the types\ncorrect.\n\nIssue #516", "tree": {"sha": "c52ed66aceba0ed7cdb85dc90f23417dd5fc6337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52ed66aceba0ed7cdb85dc90f23417dd5fc6337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b7ea877c6290094a977d17ddb2ae9853de507b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b7ea877c6290094a977d17ddb2ae9853de507b", "html_url": "https://github.com/rust-lang/rust/commit/d2b7ea877c6290094a977d17ddb2ae9853de507b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b7ea877c6290094a977d17ddb2ae9853de507b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b56ec2eab88de55748d6b46ce8cf22d29dd9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b56ec2eab88de55748d6b46ce8cf22d29dd9a5", "html_url": "https://github.com/rust-lang/rust/commit/d9b56ec2eab88de55748d6b46ce8cf22d29dd9a5"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "9a6fd4bbd9293d5678f1871573f1826d95cc61df", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2b7ea877c6290094a977d17ddb2ae9853de507b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b7ea877c6290094a977d17ddb2ae9853de507b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d2b7ea877c6290094a977d17ddb2ae9853de507b", "patch": "@@ -1878,32 +1878,40 @@ mod unify {\n         ufind::grow(cx.vb.sets, uint::max(set_a, set_b) + 1u);\n         auto root_a = ufind::find(cx.vb.sets, set_a);\n         auto root_b = ufind::find(cx.vb.sets, set_b);\n-        ufind::union(cx.vb.sets, set_a, set_b);\n-        auto root_c = ufind::find(cx.vb.sets, set_a);\n+\n+        auto replace_type = bind fn (&@ctxt cx, t t, uint set_a, uint set_b) {\n+            ufind::union(cx.vb.sets, set_a, set_b);\n+            let uint root_c = ufind::find(cx.vb.sets, set_a);\n+            smallintmap::insert[t](cx.vb.types, root_c, t);\n+        } (_, _, set_a, set_b);\n+\n         alt (smallintmap::find[t](cx.vb.types, root_a)) {\n             case (none[t]) {\n                 alt (smallintmap::find[t](cx.vb.types, root_b)) {\n-                    case (none[t]) { ret unres_ok; }\n+                    case (none[t]) {\n+                        ufind::union(cx.vb.sets, set_a, set_b);\n+                        ret unres_ok; }\n                     case (some[t](?t_b)) {\n-                        smallintmap::insert[t](cx.vb.types, root_c, t_b);\n+                        replace_type(cx, t_b);\n                         ret unres_ok;\n                     }\n                 }\n             }\n             case (some[t](?t_a)) {\n                 alt (smallintmap::find[t](cx.vb.types, root_b)) {\n                     case (none[t]) {\n-                        smallintmap::insert[t](cx.vb.types, root_c, t_a);\n+                        replace_type(cx, t_a);\n                         ret unres_ok;\n                     }\n                     case (some[t](?t_b)) {\n                         alt (unify_step(cx, t_a, t_b)) {\n                             case (ures_ok(?t_c)) {\n-                                smallintmap::insert[t](cx.vb.types, root_c,\n-                                                       t_c);\n+                                replace_type(cx, t_c);\n                                 ret unres_ok;\n                             }\n-                            case (ures_err(?terr)) { ret unres_err(terr); }\n+                            case (ures_err(?terr)) {\n+                                ret unres_err(terr);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "1ab8a1334b0a25f8588c16198d5dc3d35e3b6c23", "filename": "src/test/compile-fail/type-mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2b7ea877c6290094a977d17ddb2ae9853de507b/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b7ea877c6290094a977d17ddb2ae9853de507b/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs?ref=d2b7ea877c6290094a977d17ddb2ae9853de507b", "patch": "@@ -0,0 +1,9 @@\n+// xfail-stage0\n+// error-pattern:expected bool but found int\n+// issue #516\n+\n+fn main() {\n+  auto x = true;\n+  auto y = 1;\n+  auto z = x + y;\n+}\n\\ No newline at end of file"}]}