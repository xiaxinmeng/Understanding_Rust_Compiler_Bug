{"sha": "e653d493fb8df74bd0583c4f32c882a590135ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTNkNDkzZmI4ZGY3NGJkMDU4M2M0ZjMyYzg4MmE1OTAxMzVlZjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-18T22:52:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-18T22:53:04Z"}, "message": "rustc: Remove legacy mode inference, unless #[legacy_modes] is used", "tree": {"sha": "7ad343dc1a74bd369331f6d38ce25b968745ebaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad343dc1a74bd369331f6d38ce25b968745ebaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e653d493fb8df74bd0583c4f32c882a590135ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e653d493fb8df74bd0583c4f32c882a590135ef1", "html_url": "https://github.com/rust-lang/rust/commit/e653d493fb8df74bd0583c4f32c882a590135ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e653d493fb8df74bd0583c4f32c882a590135ef1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53cfd225a4e2b671b2b40b71725394c24fb1761", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53cfd225a4e2b671b2b40b71725394c24fb1761", "html_url": "https://github.com/rust-lang/rust/commit/d53cfd225a4e2b671b2b40b71725394c24fb1761"}], "stats": {"total": 219, "additions": 179, "deletions": 40}, "files": [{"sha": "82c18f6976fd9f74f9ddde14f1e28d55a360d273", "filename": "src/fuzzer/fuzzer.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ffuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ffuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -4,6 +4,8 @@\n \n #[no_core];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n "}, {"sha": "971f8b57170369c195e7db4b7b84a3227d5d2f0c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -31,6 +31,8 @@\n // Don't link to core. We are core.\n #[no_core];\n \n+#[legacy_modes];\n+\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n "}, {"sha": "9b4d937a533d9f9a4fece29652930515bb999e94", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -10,6 +10,8 @@\n \n #[no_core];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n "}, {"sha": "6ce8ef11d917081955f0c54991ccf29caab1ceaf", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -8,6 +8,8 @@\n \n #[no_core];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n "}, {"sha": "abaee09790e7838dd16beff8c629ecce9e924d79", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -206,7 +206,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         middle::region::determine_rp_in_crate(sess, ast_map, def_map, crate));\n \n     let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n-                            region_map, rp_set, move lang_items);\n+                            region_map, rp_set, move lang_items, crate);\n \n     let (method_map, vtable_map) = time(time_passes, ~\"typechecking\", ||\n                                         typeck::check_crate(ty_cx,"}, {"sha": "56eb6fe762c52c82c9fa3f57072e9c5004b68515", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,6 +1,7 @@\n #[no_core];\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n+#[legacy_modes];\n \n extern mod core(vers = \"0.4\");\n extern mod std(vers = \"0.4\");"}, {"sha": "8e22315ef6b644e8f607c484bdc16161f389a782", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -13,7 +13,7 @@ use syntax::ast_util::{path_to_ident};\n use syntax::print::pprust::{expr_to_str, mode_to_str, pat_to_str};\n export lint, ctypes, unused_imports, while_true, path_statement, old_vecs;\n export unrecognized_lint, non_implicitly_copyable_typarams;\n-export vecs_implicitly_copyable, implicit_copies;\n+export vecs_implicitly_copyable, implicit_copies, legacy_modes;\n export level, allow, warn, deny, forbid;\n export lint_dict, get_lint_dict, level_to_str;\n export get_lint_level, get_lint_settings_level;\n@@ -59,6 +59,8 @@ enum lint {\n     owned_heap_memory,\n     heap_memory,\n \n+    legacy_modes,\n+\n     // FIXME(#3266)--make liveness warnings lintable\n     // unused_variable,\n     // dead_assignment\n@@ -179,6 +181,11 @@ fn get_lint_dict() -> lint_dict {\n            desc: ~\"use of any structural records\",\n            default: allow}),\n \n+        (~\"legacy modes\",\n+         @{lint: legacy_modes,\n+           desc: ~\"allow legacy modes\",\n+           default: forbid}),\n+\n         /* FIXME(#3266)--make liveness warnings lintable\n         (~\"unused_variable\",\n          @{lint: unused_variable,"}, {"sha": "b3450b922bbb6cc849f267f97d492f4175e8f6a5", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -319,6 +319,7 @@ type ctxt =\n       interner: HashMap<intern_key, t_box>,\n       mut next_id: uint,\n       vecs_implicitly_copyable: bool,\n+      legacy_modes: bool,\n       cstore: metadata::cstore::cstore,\n       sess: session::session,\n       def_map: resolve::DefMap,\n@@ -827,7 +828,19 @@ fn mk_ctxt(s: session::session,\n            freevars: freevars::freevar_map,\n            region_map: middle::region::region_map,\n            region_paramd_items: middle::region::region_paramd_items,\n-           +lang_items: middle::lang_items::LanguageItems) -> ctxt {\n+           +lang_items: middle::lang_items::LanguageItems,\n+           crate: @ast::crate) -> ctxt {\n+    let mut legacy_modes = false;\n+    for crate.node.attrs.each |attribute| {\n+        match attribute.node.value.node {\n+            ast::meta_word(w) if w == ~\"legacy_modes\" => {\n+                legacy_modes = true;\n+                break;\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     let interner = map::HashMap();\n     let vecs_implicitly_copyable =\n         get_lint_level(s.lint_settings.default_settings,\n@@ -836,6 +849,7 @@ fn mk_ctxt(s: session::session,\n       interner: interner,\n       mut next_id: 0u,\n       vecs_implicitly_copyable: vecs_implicitly_copyable,\n+      legacy_modes: legacy_modes,\n       cstore: s.cstore,\n       sess: s,\n       def_map: dm,\n@@ -1075,9 +1089,14 @@ pure fn mach_sty(cfg: @session::config, t: t) -> sty {\n     }\n }\n \n-fn default_arg_mode_for_ty(ty: ty::t) -> ast::rmode {\n-    if ty::type_is_immediate(ty) { ast::by_val }\n-    else { ast::by_ref }\n+fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n+    if ty::type_is_immediate(ty) {\n+        ast::by_val\n+    } else if tcx.legacy_modes {\n+        ast::by_ref\n+    } else {\n+        ast::by_copy\n+    }\n }\n \n // Returns the narrowest lifetime enclosing the evaluation of the expression"}, {"sha": "b38a4b22675662957ac9e4d88b1faccb7a8bfa61", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -432,7 +432,8 @@ fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Owned>(\n               // tables in tcx but should never fail, because nothing else\n               // will have been unified with m yet:\n               _ => {\n-                let m1 = ast::expl(ty::default_arg_mode_for_ty(ty));\n+                let m1 = ast::expl(ty::default_arg_mode_for_ty(self.tcx(),\n+                                                               ty));\n                 result::get(ty::unify_mode(\n                     self.tcx(),\n                     ty::expected_found {expected: m1,"}, {"sha": "d12095babb8bbf5afc135c6fe47a71b603954394", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -145,7 +145,7 @@ fn visit_expr(e: @ast::expr, wbcx: wb_ctxt, v: wb_vt) {\n             match (r_ty, input.mode) {\n               (Some(t), ast::infer(_)) => {\n                 let tcx = wbcx.fcx.ccx.tcx;\n-                let m_def = ty::default_arg_mode_for_ty(t);\n+                let m_def = ty::default_arg_mode_for_ty(tcx, t);\n                 ty::set_default_mode(tcx, input.mode, m_def);\n               }\n               _ => ()"}, {"sha": "67f36e3f24916369d42075d20fafc3ba2412a531", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -11,6 +11,8 @@\n \n #[no_core];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n // #[warn(deprecated_pattern)];"}, {"sha": "e67aba71eaeb85213ccbd5fa7db87688da946489", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -258,7 +258,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n           ast::infer(_) => ~\"\",\n           ast::expl(m) => {\n             if !ty::type_needs_infer(ty) &&\n-                m == ty::default_arg_mode_for_ty(ty) {\n+                m == ty::default_arg_mode_for_ty(cx, ty) {\n                 ~\"\"\n             } else {\n                 mode_to_str(ast::expl(m))"}, {"sha": "b68efef69a5c433b61755ec2192f1a92343f7841", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -11,6 +11,8 @@\n \n #[no_core];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n #[allow(non_camel_case_types)];"}, {"sha": "8d1c3e99a1321c0332e1102d16bbae7b21376049", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,4 +1,5 @@\n #[link(name=\"cci_iter_lib\", vers=\"0.0\")];\n+#[legacy_modes];\n \n #[inline]\n fn iter<T>(v: ~[T], f: fn(T)) {"}, {"sha": "ed924f01d330ca8184e8a536563ed6ed495631ed", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n use dvec::DVec;\n \n type entry<A,B> = {key: A, value: B};\n@@ -26,4 +28,4 @@ fn new_int_alist_2<B: Copy>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n     return {eq_fn: eq_int, data: DVec()};\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3729f1d31f783669a58f059e48a17967583b47a5", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -4,6 +4,8 @@ An implementation of the Graph500 Breadth First Search problem in Rust.\n \n */\n \n+#[legacy_modes];\n+\n extern mod std;\n use std::arc;\n use std::time;"}, {"sha": "5d459f97a2520e3a388a0c47d346eb09e6d77a60", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-pretty\n \n+#[legacy_modes];\n+\n extern mod std;\n use io::Writer;\n use io::WriterUtil;"}, {"sha": "f6da3296a034144b32b9502670151cd5a1ad450a", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -6,6 +6,8 @@\n \n // xfail-pretty\n \n+#[legacy_modes];\n+\n extern mod std;\n use io::Writer;\n use io::WriterUtil;"}, {"sha": "4915a19f8787ac352a73d598187671e38e1d9979", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -2,6 +2,8 @@\n \n // multi tasking k-nucleotide\n \n+#[legacy_modes];\n+\n extern mod std;\n use std::map;\n use std::map::HashMap;"}, {"sha": "44ba7eaf0c9a4b57e4f18e6735d4910d5986ec51", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -12,6 +12,8 @@\n //\n //  writes pbm image to output path\n \n+#[legacy_modes];\n+\n extern mod std;\n use io::WriterUtil;\n use std::map::HashMap;"}, {"sha": "57f647607459cce57852a090fac2bffb2a08d716", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -10,6 +10,8 @@\n \n */\n \n+#[legacy_modes];\n+\n extern mod std;\n \n use std::{time, getopts};"}, {"sha": "4aeaf26fb1a4ff9a3c4043278f9be48144477503", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-pretty\n \n+#[legacy_modes];\n+\n extern mod std;\n \n use option = option;"}, {"sha": "0c5bcdd6ac111669fc07673ca4a3ce07365b5921", "filename": "src/test/compile-fail/borrowck-unchecked-with-borrow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,7 @@\n+// xfail-test\n+// xfail-fast\n+#[legacy_modes];\n+\n fn impure(_i: int) {}\n \n // check that unchecked alone does not override borrowck:"}, {"sha": "2e7ea89bfc3afc326fcdcab2a6cd5ff608721832", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn takes_mut(&&x: @mut int) { }\n fn takes_const(&&x: @const int) { }\n fn takes_imm(&&x: @int) { }"}, {"sha": "a8381f223afc03bb2d726c004915107202cd1dae", "filename": "src/test/compile-fail/issue-2587-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn foo<T: Copy>(+_t: T) { fail; }\n \n fn bar<T>(+_t: T) { fail; }"}, {"sha": "d87c04f6cb4159dcaaacf194925483e2d8cc2431", "filename": "src/test/compile-fail/mode-inference-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n // In this test, the mode gets inferred to ++ due to the apply_int(),\n // but then we get a failure in the generic apply().\n "}, {"sha": "b08004b182d4ce925a7a9209feee31e10aa685dc", "filename": "src/test/compile-fail/pure-higher-order.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-higher-order.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n // Test rules governing higher-order pure fns.\n \n pure fn range(from: uint, to: uint, f: fn(uint)) {\n@@ -45,4 +47,4 @@ fn print(i: uint) { error!(\"i=%u\", i); }\n pure fn noop(_i: uint) {}\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e226b9b658940e36ce08f1857d8e490a79e4f5a0", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n enum ast {\n     num(uint),\n     add(&ast, &ast)\n@@ -30,4 +32,4 @@ fn map_nums(x: &ast, f: fn(uint) -> uint) -> &ast {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "a5a061bc25ccfff686ae243c81da0afd23503409", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,5 +1,7 @@\n // xfail-pretty\n \n+#[legacy_modes];\n+\n extern mod std;\n extern mod syntax;\n "}, {"sha": "baad882d2f405aaa17b690dd6fb74357317ad6c3", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn f1(a: {mut x: int}, &b: int, -c: int) -> int {\n     let r = a.x + b + c;\n     a.x = 0;"}, {"sha": "37c7f36445c0e54129f67ad8da747b0cded7de3f", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -2,6 +2,8 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n+#[legacy_modes];\n+\n trait iterable<A> {\n     fn iterate(blk: fn(A) -> bool);\n }"}, {"sha": "aada71e13cc73a430555e51dcf6579d999697041", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n // These tests used to be separate files, but I wanted to refactor all"}, {"sha": "dcf43c0e86a49765224496a6748913151c1fa0a1", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(x); } }\n \n fn main() {"}, {"sha": "2c8d693e0f25d17085d1edc89bf311caf12fd508", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(x); } }\n \n fn main() {"}, {"sha": "8bd4b03db2a1a3153ddc7150eb7822e7d6e88a0a", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,6 +1,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_iter_lib.rs\n \n+#[legacy_modes];\n+\n extern mod cci_iter_lib;\n \n fn main() {"}, {"sha": "11f0d3a5c94d3e269187e2bc8977884b303ab21b", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,6 +1,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_nested_lib.rs\n \n+#[legacy_modes];\n+\n extern mod cci_nested_lib;\n use cci_nested_lib::*;\n "}, {"sha": "97ed4487e70c609d8d0d2eed1614f1617440d306", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n use std::map::*;\n "}, {"sha": "c39ab16d744ae201ccc0a08397cfd195c9c9ac38", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n trait noisy {\n   fn speak();\n }\n@@ -56,4 +58,4 @@ fn main() {\n   assert(!nyan.eat());\n   for uint::range(1u, 10u) |_i| { make_speak(nyan); };\n   assert(nyan.eat());\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d02f420b6c0a92ed2beb924a2d864851b00043b4", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn foo(i: int) -> int { i + 1 }\n \n fn apply<A>(f: fn(A) -> A, v: A) -> A { f(v) }"}, {"sha": "97806131b7bbd25b4b89b2787cbe353563003d59", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,7 @@\n+// -*- rust -*-\n \n+#[legacy_modes];\n \n-\n-// -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {"}, {"sha": "122b999c068f005aff7ecd5d22c032c5bc5d299f", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,7 @@\n+// -*- rust -*-\n \n+#[legacy_modes];\n \n-\n-// -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {"}, {"sha": "931c65827f88721ddec68d6dd91e080bd6e4b100", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,6 @@\n-\n-\n-\n // -*- rust -*-\n+#[legacy_modes];\n+\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {"}, {"sha": "83a87892cbda044d550a9cd80cf58ce2d3ae5210", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,6 @@\n-\n-\n-\n // -*- rust -*-\n+#[legacy_modes];\n+\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {"}, {"sha": "40cba1bb29447aa595b5273198da707bec1fd0b5", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,6 @@\n-\n-\n-\n // -*- rust -*-\n+#[legacy_modes];\n+\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {"}, {"sha": "8618bba4bedf1fbf1addc8a0ba1ac4d73d58c560", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,8 +1,7 @@\n-\n-\n-\n // -*- rust -*-\n \n+#[legacy_modes];\n+\n // Tests for standalone blocks as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;\n "}, {"sha": "6aebd902194b1f61333ae9562c24ee13178423b1", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn f(arg: {mut a: int}) {\n     arg.a = 100;\n }"}, {"sha": "9550b22fb2f09edab519396438222522bca0d476", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,6 @@\n-\n-\n-\n // -*- rust -*-\n+#[legacy_modes];\n+\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, not_expected: T, eq: compare<T>) {"}, {"sha": "8ad7d480aade872482643715491dc63ede76a32d", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,7 +1,5 @@\n-\n-\n-\n // -*- rust -*-\n+#[legacy_modes];\n \n // Tests for if as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;"}, {"sha": "3ea976df27c3c5c4370764fff8aa3acad38dcde3", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f({|a|fix_help(f, a)}, x);\n }"}, {"sha": "b70a6c4039f7464adaea474bdbe9942c137f81f0", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn fix_help<A: Owned, B: Send>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f({|a|fix_help(f, a)}, x);\n }"}, {"sha": "ae0a754fc6deb0de0580968026824700d7acbe6b", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,4 +1,5 @@\n // This is what the signature to spawn should look like with bare functions\n+#[legacy_modes];\n \n fn spawn<T: Send>(val: T, f: extern fn(T)) {\n     f(val);\n@@ -10,4 +11,4 @@ fn f(&&i: int) {\n \n fn main() {\n     spawn(100, f);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "37dc1e9fb57e0fcefa6cd7410b0bcb56899b5a9f", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,4 +1,4 @@\n-\n+#[legacy_modes];\n \n fn mk() -> int { return 1; }\n "}, {"sha": "7ed6dd2946b657d443fd41a77fde6ed335465c4e", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_modes];\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     fn frame_address(f: fn(*u8));"}, {"sha": "5491f7dfd7edef20bb96a3b9d824aeb64c913e86", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -2,6 +2,8 @@\n // However, the condition it was testing seemed complex enough to\n // warrant still having a test, so I inlined the old definitions.\n \n+#[legacy_modes];\n+\n trait iterable<A> {\n     fn iter(blk: fn(A));\n }"}, {"sha": "5f2248a3870ee40ce2ac3522903d82d9a760176c", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n use iter::BaseIter;\n \n trait FlatMapToVec<A> {\n@@ -10,4 +12,4 @@ impl<A:Copy> BaseIter<A>: FlatMapToVec<A> {\n    }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "b6fb3547bc9fa5cd1dec502662261f0712248138", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn main() {\n     // Make sure closing over can be a last use\n     let q = ~10;"}, {"sha": "ae8797ce764c430c451c74d5d65d1d17292237e7", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n trait vec_monad<A> {\n     fn bind<B: Copy>(f: fn(A) -> ~[B]) -> ~[B];\n }"}, {"sha": "6956d8b653db1af82adbcb0d45adf43e455af836", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n struct Point {\n     x: int,\n     y: int"}, {"sha": "8f48b44aa3be63cc3a8c25f051914545528f2973", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_modes];\n \n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n use libc::c_void;"}, {"sha": "75e3afc07d826fa00f1a1dba5ab2a168ea5dcd34", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn region_identity(x: &r/uint) -> &r/uint { x }\n \n fn apply<T>(t: T, f: fn(T) -> T) -> T { f(t) }\n@@ -12,4 +14,4 @@ fn parameterized(x: &uint) -> uint {\n fn main() {\n     let x = 3u;\n     assert parameterized(&x) == 3u;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a63ec8d154a8fe1cec1f8d3005984773ca07d40c", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n struct finish<T: Copy> {\n   arg: {val: T, fin: extern fn(T)},\n   drop { self.arg.fin(self.arg.val); }"}, {"sha": "12ad2d78929aa1aac5628ff4c14d23e69425cb90", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n use cmp::Eq;\n \n fn iter<T>(v: ~[T], it: fn(T) -> bool) {"}, {"sha": "bc23e6734d2a2d806c3140df355ca8e0419f2c71", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n use comm::Chan;"}, {"sha": "5e16a3de748cf3b04a0932a4ff2b9764d82730b9", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,8 +1,10 @@\n+#[legacy_modes];\n+\n fn test(f: fn(uint) -> uint) -> uint {\n     return f(22u);\n }\n \n fn main() {\n     let y = test(fn~(x: uint) -> uint { return 4u * x; });\n     assert y == 88u;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ded9b1e67685abdc710a49184dc711095f558dd0", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n use a::*;\n \n trait plus {"}, {"sha": "80a2246e6e323b96498aea2f2788bcb9a46b8e3f", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_modes];\n \n // A trait for objects that can be used to do an if-then-else\n // (No actual need for this to be static, but it is a simple test.)"}, {"sha": "4655792e2169d0721357a96a526b729fd5786bf0", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n use pipes::Chan;"}, {"sha": "57942e23939fa24812d507128e7d8082e996954b", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<~str>>) {"}, {"sha": "826436ff2a968131a488cb56057652b1897240a4", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<int>>) {"}, {"sha": "de13722e238c043daf616e2b71a322eb9145ec9d", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n use pipes::send;\n "}, {"sha": "efb4f49b2b1e673510446d59a6527a01035710d7", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,4 @@\n+#[legacy_modes];\n \n fn main() {\n     let po = pipes::PortSet();"}, {"sha": "22f40e784a70becf88950f66dd4971e7ffba215c", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,4 +1,6 @@\n // xfail-win32\n+#[legacy_modes];\n+\n extern mod std;\n \n fn start(c: pipes::Chan<int>, i0: int) {"}, {"sha": "f54b1d173f3a429f86af2baacc854d384d722d42", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n use pipes::Chan;\n use pipes::send;"}, {"sha": "025c1f35451808b6b4722f40fa6df6164c8ccd08", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n fn main() { test00(); }"}, {"sha": "bc553998e90a35f2842ba4636d41705892a99373", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n extern mod std;\n \n fn main() { test00(); }"}, {"sha": "6e684cea403d0f3a98a6037b5cfbd09025f0278a", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n trait to_str {\n     fn to_str() -> ~str;\n }"}, {"sha": "dc52a181daf2dc56f7dbc1f53c7583bb1430b31b", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e653d493fb8df74bd0583c4f32c882a590135ef1/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=e653d493fb8df74bd0583c4f32c882a590135ef1", "patch": "@@ -1,3 +1,5 @@\n+#[legacy_modes];\n+\n fn p_foo<T>(pinned: T) { }\n fn s_foo<T: Copy>(shared: T) { }\n fn u_foo<T: Send>(unique: T) { }"}]}