{"sha": "0e0833e0b038ea3015a2036e0c9431f6c60db82f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDgzM2UwYjAzOGVhMzAxNWEyMDM2ZTBjOTQzMWY2YzYwZGI4MmY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-10T22:13:24Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-13T17:34:35Z"}, "message": "Change \"iid\" identifiers (apparently \"interface id\") to \"trait_id\"", "tree": {"sha": "6832600b1b2d60673b05d43065f7febdfc291109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6832600b1b2d60673b05d43065f7febdfc291109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e0833e0b038ea3015a2036e0c9431f6c60db82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0833e0b038ea3015a2036e0c9431f6c60db82f", "html_url": "https://github.com/rust-lang/rust/commit/0e0833e0b038ea3015a2036e0c9431f6c60db82f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e0833e0b038ea3015a2036e0c9431f6c60db82f/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd891f10b18832770d9c5253cf0c22d9744b17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd891f10b18832770d9c5253cf0c22d9744b17a", "html_url": "https://github.com/rust-lang/rust/commit/5fd891f10b18832770d9c5253cf0c22d9744b17a"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "1c1396db2a64b4350a0c68f8a20813b2dd8e7c40", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0e0833e0b038ea3015a2036e0c9431f6c60db82f", "patch": "@@ -699,9 +699,9 @@ fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(~\"make_visit_glue\");\n     let mut bcx = bcx;\n     assert bcx.ccx().tcx.intrinsic_defs.contains_key(@~\"ty_visitor\");\n-    let (iid, ty) = bcx.ccx().tcx.intrinsic_defs.get(@~\"ty_visitor\");\n+    let (trait_id, ty) = bcx.ccx().tcx.intrinsic_defs.get(@~\"ty_visitor\");\n     let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n-    bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, iid);\n+    bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, trait_id);\n     build_return(bcx);\n }\n "}, {"sha": "09b26a884a2a488f4e97f28567b2efa252b9c573", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=0e0833e0b038ea3015a2036e0c9431f6c60db82f", "patch": "@@ -66,13 +66,13 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n         {env: self_env(val, node_id_type(bcx, self.id), none)\n          with lval_static_fn(bcx, did, callee_id)}\n       }\n-      typeck::method_param({trait_id:iid, method_num:off,\n+      typeck::method_param({trait_id:trait_id, method_num:off,\n                             param_num:p, bound_num:b}) => {\n         match check bcx.fcx.param_substs {\n           some(substs) => {\n             let vtbl = find_vtable_in_fn_ctxt(substs, p, b);\n             trans_monomorphized_callee(bcx, callee_id, self, mentry.derefs,\n-                                       iid, off, vtbl)\n+                                       trait_id, off, vtbl)\n           }\n         }\n       }\n@@ -195,7 +195,7 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n              ccx, node_id_type(bcx, callee_id))))\n          with lval}\n       }\n-      typeck::vtable_trait(iid, tps) => {\n+      typeck::vtable_trait(trait_id, tps) => {\n         let {bcx, val} = trans_temp_expr(bcx, base);\n         let fty = node_id_type(bcx, callee_id);\n         trans_trait_callee(bcx, val, fty, n_method)\n@@ -250,14 +250,15 @@ fn resolve_vtables_in_fn_ctxt(fcx: fn_ctxt, vts: typeck::vtable_res)\n fn resolve_vtable_in_fn_ctxt(fcx: fn_ctxt, vt: typeck::vtable_origin)\n     -> typeck::vtable_origin {\n     match vt {\n-      typeck::vtable_static(iid, tys, sub) => {\n+      typeck::vtable_static(trait_id, tys, sub) => {\n         let tys = match fcx.param_substs {\n           some(substs) => {\n             vec::map(tys, |t| ty::subst_tps(fcx.ccx.tcx, substs.tys, t))\n           }\n           _ => tys\n         };\n-        typeck::vtable_static(iid, tys, resolve_vtables_in_fn_ctxt(fcx, sub))\n+        typeck::vtable_static(trait_id, tys,\n+                              resolve_vtables_in_fn_ctxt(fcx, sub))\n       }\n       typeck::vtable_param(n_param, n_bound) => {\n         match check fcx.param_substs {"}, {"sha": "caf619750d739b9ce3ae46b3ca95d7a3acddf65c", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=0e0833e0b038ea3015a2036e0c9431f6c60db82f", "patch": "@@ -288,15 +288,15 @@ impl reflector {\n // Emit a sequence of calls to visit_ty::visit_foo\n fn emit_calls_to_trait_visit_ty(bcx: block, t: ty::t,\n                                 visitor_val: ValueRef,\n-                                visitor_iid: def_id) -> block {\n+                                visitor_trait_id: def_id) -> block {\n \n     let final = sub_block(bcx, ~\"final\");\n     assert bcx.ccx().tcx.intrinsic_defs.contains_key(@~\"tydesc\");\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(@~\"tydesc\");\n     let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n     let r = reflector({\n         visitor_val: visitor_val,\n-        visitor_methods: ty::trait_methods(bcx.tcx(), visitor_iid),\n+        visitor_methods: ty::trait_methods(bcx.tcx(), visitor_trait_id),\n         final_bcx: final,\n         tydesc_ty: tydesc_ty,\n         mut bcx: bcx"}, {"sha": "cc3655cfa4431b6720e7917fd358fc325030cb40", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0833e0b038ea3015a2036e0c9431f6c60db82f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0e0833e0b038ea3015a2036e0c9431f6c60db82f", "patch": "@@ -229,7 +229,7 @@ class lookup {\n         let mut trait_bnd_idx = 0u; // count only trait bounds\n         let bounds = tcx.ty_param_bounds.get(did.node);\n         for vec::each(*bounds) |bound| {\n-            let (iid, bound_substs) = match bound {\n+            let (trait_id, bound_substs) = match bound {\n               ty::bound_copy | ty::bound_send | ty::bound_const |\n               ty::bound_owned => {\n                 again; /* ok */\n@@ -241,7 +241,7 @@ class lookup {\n               }\n             };\n \n-            let trt_methods = ty::trait_methods(tcx, iid);\n+            let trt_methods = ty::trait_methods(tcx, trait_id);\n             match vec::position(*trt_methods, |m| m.ident == self.m_name) {\n               none => {\n                 /* check next bound */\n@@ -261,7 +261,7 @@ class lookup {\n \n                 self.add_candidates_from_m(\n                     substs, trt_methods[pos],\n-                    method_param({trait_id:iid,\n+                    method_param({trait_id:trait_id,\n                                   method_num:pos,\n                                   param_num:n,\n                                   bound_num:trait_bnd_idx}));"}]}