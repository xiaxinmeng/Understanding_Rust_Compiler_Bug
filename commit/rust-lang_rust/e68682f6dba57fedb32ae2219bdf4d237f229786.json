{"sha": "e68682f6dba57fedb32ae2219bdf4d237f229786", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ODY4MmY2ZGJhNTdmZWRiMzJhZTIyMTliZGY0ZDIzN2YyMjk3ODY=", "commit": {"author": {"name": "codeworm96", "email": "codeworm96@outlook.com", "date": "2018-03-28T15:38:34Z"}, "committer": {"name": "codeworm96", "email": "codeworm96@outlook.com", "date": "2018-03-28T15:38:34Z"}, "message": "Remove unreachable! from macros.rs\n\nreplaced unreachable! with error handling using Option.\n\nCloses #2558", "tree": {"sha": "98ae04127248eb2bcf860fd4adc6a38f18d7ebf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ae04127248eb2bcf860fd4adc6a38f18d7ebf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e68682f6dba57fedb32ae2219bdf4d237f229786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e68682f6dba57fedb32ae2219bdf4d237f229786", "html_url": "https://github.com/rust-lang/rust/commit/e68682f6dba57fedb32ae2219bdf4d237f229786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e68682f6dba57fedb32ae2219bdf4d237f229786/comments", "author": {"login": "codeworm96", "id": 8407172, "node_id": "MDQ6VXNlcjg0MDcxNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8407172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeworm96", "html_url": "https://github.com/codeworm96", "followers_url": "https://api.github.com/users/codeworm96/followers", "following_url": "https://api.github.com/users/codeworm96/following{/other_user}", "gists_url": "https://api.github.com/users/codeworm96/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeworm96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeworm96/subscriptions", "organizations_url": "https://api.github.com/users/codeworm96/orgs", "repos_url": "https://api.github.com/users/codeworm96/repos", "events_url": "https://api.github.com/users/codeworm96/events{/privacy}", "received_events_url": "https://api.github.com/users/codeworm96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "codeworm96", "id": 8407172, "node_id": "MDQ6VXNlcjg0MDcxNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8407172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeworm96", "html_url": "https://github.com/codeworm96", "followers_url": "https://api.github.com/users/codeworm96/followers", "following_url": "https://api.github.com/users/codeworm96/following{/other_user}", "gists_url": "https://api.github.com/users/codeworm96/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeworm96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeworm96/subscriptions", "organizations_url": "https://api.github.com/users/codeworm96/orgs", "repos_url": "https://api.github.com/users/codeworm96/repos", "events_url": "https://api.github.com/users/codeworm96/events{/privacy}", "received_events_url": "https://api.github.com/users/codeworm96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f55350c7d7658cc0701b1b8b83ab7d72591bc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f55350c7d7658cc0701b1b8b83ab7d72591bc43", "html_url": "https://github.com/rust-lang/rust/commit/0f55350c7d7658cc0701b1b8b83ab7d72591bc43"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "61889f5764a58c814015a48671f2b3af73afd003", "filename": "src/macros.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e68682f6dba57fedb32ae2219bdf4d237f229786/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68682f6dba57fedb32ae2219bdf4d237f229786/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e68682f6dba57fedb32ae2219bdf4d237f229786", "patch": "@@ -687,7 +687,7 @@ impl MacroArgParser {\n         self.buf.clear();\n     }\n \n-    fn add_meta_variable(&mut self, iter: &mut Cursor) {\n+    fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n         match iter.next() {\n             Some(TokenTree::Token(sp, Token::Ident(ref ident))) => {\n                 self.result.push(ParsedMacroArg {\n@@ -697,8 +697,9 @@ impl MacroArgParser {\n \n                 self.buf.clear();\n                 self.is_meta_var = false;\n+                Some(())\n             }\n-            _ => unreachable!(),\n+            _ => None,\n         }\n     }\n \n@@ -716,7 +717,7 @@ impl MacroArgParser {\n         delim: DelimToken,\n         iter: &mut Cursor,\n         span: Span,\n-    ) {\n+    ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = false;\n         let mut lo = span.lo();\n@@ -740,7 +741,7 @@ impl MacroArgParser {\n                     buffer.push_str(&pprust::token_to_string(t));\n                     hi = sp.hi();\n                 }\n-                _ => unreachable!(),\n+                _ => return None,\n             }\n         }\n \n@@ -758,6 +759,7 @@ impl MacroArgParser {\n             kind: MacroArgKind::Repeat(delim, inner, another, self.last_tok.clone()),\n             span: mk_sp(self.lo, self.hi),\n         });\n+        Some(())\n     }\n \n     fn update_buffer(&mut self, lo: BytePos, t: &Token) {\n@@ -802,7 +804,7 @@ impl MacroArgParser {\n     }\n \n     /// Returns a collection of parsed macro def's arguments.\n-    pub fn parse(mut self, tokens: ThinTokenStream) -> Vec<ParsedMacroArg> {\n+    pub fn parse(mut self, tokens: ThinTokenStream) -> Option<Vec<ParsedMacroArg>> {\n         let mut iter = (tokens.into(): TokenStream).trees();\n \n         while let Some(ref tok) = iter.next() {\n@@ -819,7 +821,7 @@ impl MacroArgParser {\n                     self.start_tok = Token::Dollar;\n                 }\n                 TokenTree::Token(_, Token::Colon) if self.is_meta_var => {\n-                    self.add_meta_variable(&mut iter);\n+                    self.add_meta_variable(&mut iter)?;\n                 }\n                 TokenTree::Token(sp, ref t) => self.update_buffer(sp.lo(), t),\n                 TokenTree::Delimited(sp, delimited) => {\n@@ -834,10 +836,10 @@ impl MacroArgParser {\n                     // Parse the stuff inside delimiters.\n                     let mut parser = MacroArgParser::new();\n                     parser.lo = sp.lo();\n-                    let delimited_arg = parser.parse(delimited.tts.clone());\n+                    let delimited_arg = parser.parse(delimited.tts.clone())?;\n \n                     if self.is_meta_var {\n-                        self.add_repeat(delimited_arg, delimited.delim, &mut iter, *sp);\n+                        self.add_repeat(delimited_arg, delimited.delim, &mut iter, *sp)?;\n                     } else {\n                         self.add_delimited(delimited_arg, delimited.delim, *sp);\n                     }\n@@ -853,7 +855,7 @@ impl MacroArgParser {\n             self.add_other();\n         }\n \n-        self.result\n+        Some(self.result)\n     }\n }\n \n@@ -915,7 +917,7 @@ fn format_macro_args(\n     toks: ThinTokenStream,\n     shape: Shape,\n ) -> Option<String> {\n-    let parsed_args = MacroArgParser::new().parse(toks);\n+    let parsed_args = MacroArgParser::new().parse(toks)?;\n     wrap_macro_args(context, &parsed_args, shape)\n }\n "}]}