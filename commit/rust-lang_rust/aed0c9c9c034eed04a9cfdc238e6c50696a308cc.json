{"sha": "aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDBjOWM5YzAzNGVlZDA0YTljZmRjMjM4ZTZjNTA2OTZhMzA4Y2M=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-13T23:08:12Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-14T06:33:39Z"}, "message": "use lazy cached unreachable block - assign it to the function's closing brace", "tree": {"sha": "08d0cc63542b6d5ece0c637022f6fa89ec6a13a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d0cc63542b6d5ece0c637022f6fa89ec6a13a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "html_url": "https://github.com/rust-lang/rust/commit/aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed0c9c9c034eed04a9cfdc238e6c50696a308cc/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "829b70330e93779575daa35fc4ddc1dd0df15efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/829b70330e93779575daa35fc4ddc1dd0df15efa", "html_url": "https://github.com/rust-lang/rust/commit/829b70330e93779575daa35fc4ddc1dd0df15efa"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "c0b93456d8578e5b11e145945c522c8022c9f502", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed0c9c9c034eed04a9cfdc238e6c50696a308cc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0c9c9c034eed04a9cfdc238e6c50696a308cc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let Some(otherwise_block) = otherwise_block {\n                     targets.push(otherwise_block);\n                 } else {\n-                    let unreachable_block = self.cfg.start_new_block();\n+                    let unreachable_block = self.unreachable_block();\n                     targets.push(unreachable_block);\n                     target_blocks.push(unreachable_block);\n                 }"}, {"sha": "79be37010412de1823237b2e180f683fdce5bd28", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aed0c9c9c034eed04a9cfdc238e6c50696a308cc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0c9c9c034eed04a9cfdc238e6c50696a308cc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=aed0c9c9c034eed04a9cfdc238e6c50696a308cc", "patch": "@@ -306,6 +306,8 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     cached_resume_block: Option<BasicBlock>,\n     /// cached block with the RETURN terminator\n     cached_return_block: Option<BasicBlock>,\n+    /// cached block with the UNREACHABLE terminator\n+    cached_unreachable_block: Option<BasicBlock>,\n }\n \n struct CFG<'tcx> {\n@@ -399,6 +401,11 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                               TerminatorKind::Goto { target: return_block });\n         builder.cfg.terminate(return_block, source_info,\n                               TerminatorKind::Return);\n+        // Attribute any unreachable codepaths to the function's closing brace\n+        if let Some(unreachable_block) = builder.cached_unreachable_block {\n+            builder.cfg.terminate(unreachable_block, source_info,\n+                                  TerminatorKind::Unreachable);\n+        }\n         return_block.unit()\n     }));\n     assert_eq!(block, builder.return_block());\n@@ -501,7 +508,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             var_indices: NodeMap(),\n             unit_temp: None,\n             cached_resume_block: None,\n-            cached_return_block: None\n+            cached_return_block: None,\n+            cached_unreachable_block: None,\n         };\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n@@ -630,6 +638,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn unreachable_block(&mut self) -> BasicBlock {\n+        match self.cached_unreachable_block {\n+            Some(ub) => ub,\n+            None => {\n+                let ub = self.cfg.start_new_block();\n+                self.cached_unreachable_block = Some(ub);\n+                ub\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}]}