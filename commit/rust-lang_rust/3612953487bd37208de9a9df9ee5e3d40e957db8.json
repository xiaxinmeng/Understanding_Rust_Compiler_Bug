{"sha": "3612953487bd37208de9a9df9ee5e3d40e957db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MTI5NTM0ODdiZDM3MjA4ZGU5YTlkZjllZTVlM2Q0MGU5NTdkYjg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-14T19:02:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-14T19:26:19Z"}, "message": "Do not insert impl_trait_in_bindings opaque definitions twice.", "tree": {"sha": "a384c81bac78c506dc03799a3fc3633d15b7a569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a384c81bac78c506dc03799a3fc3633d15b7a569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3612953487bd37208de9a9df9ee5e3d40e957db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3612953487bd37208de9a9df9ee5e3d40e957db8", "html_url": "https://github.com/rust-lang/rust/commit/3612953487bd37208de9a9df9ee5e3d40e957db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3612953487bd37208de9a9df9ee5e3d40e957db8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178bd9130e9e5f4f26be325bbf593f69dfa894b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/178bd9130e9e5f4f26be325bbf593f69dfa894b0", "html_url": "https://github.com/rust-lang/rust/commit/178bd9130e9e5f4f26be325bbf593f69dfa894b0"}], "stats": {"total": 53, "additions": 15, "deletions": 38}, "files": [{"sha": "80ccf727809f1b4cfff18d470ede1fc890fa1c1f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 38, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3612953487bd37208de9a9df9ee5e3d40e957db8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3612953487bd37208de9a9df9ee5e3d40e957db8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3612953487bd37208de9a9df9ee5e3d40e957db8", "patch": "@@ -1788,14 +1788,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> (hir::Local<'hir>, SmallVec<[NodeId; 1]>) {\n-        let mut ids = SmallVec::<[NodeId; 1]>::new();\n-        if self.sess.features_untracked().impl_trait_in_bindings {\n-            if let Some(ref ty) = l.ty {\n-                let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n-                visitor.visit_ty(ty);\n-            }\n-        }\n+    fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n         let ty = l.ty.as_ref().map(|t| {\n             let mut capturable_lifetimes;\n             self.lower_ty(\n@@ -1814,17 +1807,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);\n-        (\n-            hir::Local {\n-                hir_id,\n-                ty,\n-                pat: self.lower_pat(&l.pat),\n-                init,\n-                span: l.span,\n-                source: hir::LocalSource::Normal,\n-            },\n-            ids,\n-        )\n+        hir::Local {\n+            hir_id,\n+            ty,\n+            pat: self.lower_pat(&l.pat),\n+            init,\n+            span: l.span,\n+            source: hir::LocalSource::Normal,\n+        }\n     }\n \n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n@@ -2438,27 +2428,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n         let (hir_id, kind) = match s.kind {\n             StmtKind::Local(ref l) => {\n-                let (l, item_ids) = self.lower_local(l);\n-                let mut ids: SmallVec<[hir::Stmt<'hir>; 1]> = item_ids\n-                    .into_iter()\n-                    .map(|item_id| {\n-                        let item_id = hir::ItemId {\n-                            // All the items that `lower_local` finds are `impl Trait` types.\n-                            def_id: self.lower_node_id(item_id).expect_owner(),\n-                        };\n-                        self.stmt(s.span, hir::StmtKind::Item(item_id))\n-                    })\n-                    .collect();\n+                let l = self.lower_local(l);\n                 let hir_id = self.lower_node_id(s.id);\n                 self.alias_attrs(hir_id, l.hir_id);\n-                ids.push({\n-                    hir::Stmt {\n-                        hir_id,\n-                        kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                        span: s.span,\n-                    }\n-                });\n-                return ids;\n+                return smallvec![hir::Stmt {\n+                    hir_id,\n+                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n+                    span: s.span,\n+                }];\n             }\n             StmtKind::Item(ref it) => {\n                 // Can only use the ID once."}]}