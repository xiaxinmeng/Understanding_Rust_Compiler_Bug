{"sha": "d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGQyNmNkMzlhODZhNDBmZWIwZGI3YTkxNDdjYzJhZTVlODI5OTQ=", "commit": {"author": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-06-10T22:29:02Z"}, "committer": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-06-10T22:29:02Z"}, "message": "debugged a compiler ICE when merging local::borrow changes into the main io branch and modified the incoming new file lang.rs to be api-compatible", "tree": {"sha": "00cedc9e9b752fa99dfb552b73fa9359cd86b7ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00cedc9e9b752fa99dfb552b73fa9359cd86b7ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "html_url": "https://github.com/rust-lang/rust/commit/d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/comments", "author": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "html_url": "https://github.com/rust-lang/rust/commit/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "bf5b36c7580ac4430ef1e0a069007a8adce8e7e5", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -38,16 +38,29 @@ macro_rules! rtassert (\n     } )\n )\n \n+\n+// The do_abort function was originally inside the abort macro, but\n+// this was ICEing the compiler so it has been moved outside. Now this\n+// seems to work?\n+pub fn do_abort() -> ! {\n+    unsafe { ::libc::abort(); }\n+}\n+\n macro_rules! abort(\n     ($( $msg:expr),+) => ( {\n         rtdebug!($($msg),+);\n \n-        do_abort();\n+//        do_abort();\n+\n+        // NB: This is in a fn to avoid putting the `unsafe` block in\n+        // a macro, which causes spurious 'unnecessary unsafe block'\n+        // warnings.\n+//        fn do_abort() -> ! {\n+//            unsafe { ::libc::abort(); }\n+//        }\n+\n+        ::macros::do_abort();\n \n-        // NB: This is in a fn to avoid putting the `unsafe` block in a macro,\n-        // which causes spurious 'unnecessary unsafe block' warnings.\n-        fn do_abort() -> ! {\n-            unsafe { ::libc::abort(); }\n-        }\n     } )\n )\n+"}, {"sha": "88c7b9a2bf2684ae8ee4fa0b347e0a6c532d9efa", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -120,13 +120,13 @@ impl<T> ChanOne<T> {\n             match oldstate {\n                 STATE_BOTH => {\n                     // Port is not waiting yet. Nothing to do\n-                    do Local::borrow::<Scheduler> |sched| {\n+                    do Local::borrow::<Scheduler, ()> |sched| {\n                         rtdebug!(\"non-rendezvous send\");\n                         sched.metrics.non_rendezvous_sends += 1;\n                     }\n                 }\n                 STATE_ONE => {\n-                    do Local::borrow::<Scheduler> |sched| {\n+                    do Local::borrow::<Scheduler, ()> |sched| {\n                         rtdebug!(\"rendezvous send\");\n                         sched.metrics.rendezvous_sends += 1;\n                     }"}, {"sha": "359cf5fc3e17979344d208b1d7f613b3572cbc30", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -18,7 +18,7 @@ pub trait Local {\n     fn put(value: ~Self);\n     fn take() -> ~Self;\n     fn exists() -> bool;\n-    fn borrow(f: &fn(&mut Self));\n+    fn borrow<T>(f: &fn(&mut Self) -> T) -> T;\n     unsafe fn unsafe_borrow() -> *mut Self;\n     unsafe fn try_unsafe_borrow() -> Option<*mut Self>;\n }\n@@ -27,7 +27,20 @@ impl Local for Scheduler {\n     fn put(value: ~Scheduler) { unsafe { local_ptr::put(value) }}\n     fn take() -> ~Scheduler { unsafe { local_ptr::take() } }\n     fn exists() -> bool { local_ptr::exists() }\n-    fn borrow(f: &fn(&mut Scheduler)) { unsafe { local_ptr::borrow(f) } }\n+    fn borrow<T>(f: &fn(&mut Scheduler) -> T) -> T {\n+        let mut res: Option<T> = None;\n+        let res_ptr: *mut Option<T> = &mut res;\n+        unsafe { \n+            do local_ptr::borrow |sched| {\n+                let result = f(sched);\n+                *res_ptr = Some(result);\n+            }\n+        }\n+        match res {\n+            Some(r) => { r }\n+            None => abort!(\"function failed!\")\n+        }               \n+    }\n     unsafe fn unsafe_borrow() -> *mut Scheduler { local_ptr::unsafe_borrow() }\n     unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> { abort!(\"unimpl\") }\n }\n@@ -36,8 +49,8 @@ impl Local for Task {\n     fn put(_value: ~Task) { abort!(\"unimpl\") }\n     fn take() -> ~Task { abort!(\"unimpl\") }\n     fn exists() -> bool { abort!(\"unimpl\") }\n-    fn borrow(f: &fn(&mut Task)) {\n-        do Local::borrow::<Scheduler> |sched| {\n+    fn borrow<T>(f: &fn(&mut Task) -> T) -> T {\n+        do Local::borrow::<Scheduler, T> |sched| {\n             match sched.current_task {\n                 Some(~ref mut task) => {\n                     f(&mut *task.task)\n@@ -74,7 +87,7 @@ impl Local for IoFactoryObject {\n     fn put(_value: ~IoFactoryObject) { abort!(\"unimpl\") }\n     fn take() -> ~IoFactoryObject { abort!(\"unimpl\") }\n     fn exists() -> bool { abort!(\"unimpl\") }\n-    fn borrow(_f: &fn(&mut IoFactoryObject)) { abort!(\"unimpl\") }\n+    fn borrow<T>(_f: &fn(&mut IoFactoryObject) -> T) -> T { abort!(\"unimpl\") }\n     unsafe fn unsafe_borrow() -> *mut IoFactoryObject {\n         let sched = Local::unsafe_borrow::<Scheduler>();\n         let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n@@ -115,4 +128,16 @@ mod test {\n         }\n         let _scheduler: ~Scheduler = Local::take();\n     }\n+\n+    #[test]\n+    fn borrow_with_return() {\n+        let scheduler = ~new_test_uv_sched();\n+        Local::put(scheduler);\n+        let res = do Local::borrow::<Scheduler,bool> |_sched| {\n+            true\n+        };\n+        assert!(res)\n+        let _scheduler: ~Scheduler = Local::take();\n+    }\n+            \n }"}, {"sha": "3198b2858763a98328074b511e30ed7c59bfe90e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -208,7 +208,7 @@ pub fn context() -> RuntimeContext {\n     } else {\n         if Local::exists::<Scheduler>() {\n             let context = ::cell::empty_cell();\n-            do Local::borrow::<Scheduler> |sched| {\n+            do Local::borrow::<Scheduler, ()> |sched| {\n                 if sched.in_task_context() {\n                     context.put_back(TaskContext);\n                 } else {"}, {"sha": "d149ff6d773192d6402113886a3a6df41a0f6032", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -683,7 +683,7 @@ mod test {\n             assert_eq!(count, MAX);\n \n             fn run_task(count_ptr: *mut int) {\n-                do Local::borrow::<Scheduler> |sched| {\n+                do Local::borrow::<Scheduler, ()> |sched| {\n                     let task = ~do Coroutine::new(&mut sched.stack_pool) {\n                         unsafe {\n                             *count_ptr = *count_ptr + 1;"}, {"sha": "4d9851d3b409b09af2825d5c7b88cc206c38af9f", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -62,7 +62,7 @@ impl Task {\n     pub fn run(&mut self, f: &fn()) {\n         // This is just an assertion that `run` was called unsafely\n         // and this instance of Task is still accessible.\n-        do Local::borrow::<Task> |task| {\n+        do Local::borrow::<Task, ()> |task| {\n             assert!(ptr::ref_eq(task, self));\n         }\n \n@@ -87,7 +87,7 @@ impl Task {\n     fn destroy(&mut self) {\n         // This is just an assertion that `destroy` was called unsafely\n         // and this instance of Task is still accessible.\n-        do Local::borrow::<Task> |task| {\n+        do Local::borrow::<Task, ()> |task| {\n             assert!(ptr::ref_eq(task, self));\n         }\n         match self.storage {"}, {"sha": "c94b0bd642362a02e4835b7b92db18b751413755", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -155,7 +155,7 @@ mod test {\n                     if i == 100 { return; }\n \n                     let tube = Cell(Cell(tube));\n-                    do Local::borrow::<Scheduler> |sched| {\n+                    do Local::borrow::<Scheduler, ()> |sched| {\n                         let tube = tube.take();\n                         do sched.event_loop.callback {\n                             let mut tube = tube.take();"}, {"sha": "ebeb1c204514f21eb4bcf286b5efe935bfedd2e8", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -167,7 +167,7 @@ mod test_remote {\n             let mut tube = Tube::new();\n             let tube_clone = tube.clone();\n             let remote_cell = cell::empty_cell();\n-            do Local::borrow::<Scheduler>() |sched| {\n+            do Local::borrow::<Scheduler, ()>() |sched| {\n                 let tube_clone = tube_clone.clone();\n                 let tube_clone_cell = Cell(tube_clone);\n                 let remote = do sched.event_loop.remote_callback {"}, {"sha": "df5b88207eccfc4c13473c0af1ebb262efae8915", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -514,7 +514,7 @@ pub fn failing() -> bool {\n         }\n         _ => {\n             let mut unwinding = false;\n-            do Local::borrow::<Task> |local| {\n+            do Local::borrow::<Task, ()> |local| {\n                 unwinding = match local.unwinder {\n                     Some(unwinder) => {\n                         unwinder.unwinding"}, {"sha": "21ef347874468c8cf7f80fa9c6b80d3760cdfbed", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64d26cd39a86a40feb0db7a9147cc2ae5e82994/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=d64d26cd39a86a40feb0db7a9147cc2ae5e82994", "patch": "@@ -244,7 +244,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n         }\n         _ => {\n             let mut alloc = ::ptr::null();\n-            do Local::borrow::<Task> |task| {\n+            do Local::borrow::<Task,()> |task| {\n                 alloc = task.heap.alloc(td as *c_void, size as uint) as *c_char;\n             }\n             return alloc;\n@@ -262,7 +262,7 @@ pub unsafe fn local_free(ptr: *c_char) {\n             rustrt::rust_upcall_free_noswitch(ptr);\n         }\n         _ => {\n-            do Local::borrow::<Task> |task| {\n+            do Local::borrow::<Task,()> |task| {\n                 task.heap.free(ptr as *c_void);\n             }\n         }"}]}