{"sha": "4f91d6690508c1527c391b22e8ac0446d296e305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTFkNjY5MDUwOGMxNTI3YzM5MWIyMmU4YWMwNDQ2ZDI5NmUzMDU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-30T13:35:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-03T19:25:27Z"}, "message": "Rustup to *rustc 1.14.0-nightly (144af3e97 2016-10-02)*", "tree": {"sha": "298cba49141ac29445a78cb0ed8a5760a017f835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298cba49141ac29445a78cb0ed8a5760a017f835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f91d6690508c1527c391b22e8ac0446d296e305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f91d6690508c1527c391b22e8ac0446d296e305", "html_url": "https://github.com/rust-lang/rust/commit/4f91d6690508c1527c391b22e8ac0446d296e305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f91d6690508c1527c391b22e8ac0446d296e305/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4198c11086c4ece865e3cfa84832c774c5be0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4198c11086c4ece865e3cfa84832c774c5be0a7", "html_url": "https://github.com/rust-lang/rust/commit/a4198c11086c4ece865e3cfa84832c774c5be0a7"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "4d8f3de5e046bf91fa1f1ae1be0516f34421ee75", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -1,10 +1,10 @@\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n-use rustc::ty::TyArray;\n+use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_math::ConstInt;\n-use rustc::hir::*;\n+use rustc::hir;\n use syntax::ast::RangeLimits;\n use utils::{self, higher};\n \n@@ -56,11 +56,11 @@ impl LintPass for ArrayIndexing {\n }\n \n impl LateLintPass for ArrayIndexing {\n-    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n-        if let ExprIndex(ref array, ref index) = e.node {\n+    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+        if let hir::ExprIndex(ref array, ref index) = e.node {\n             // Array with known size can be checked statically\n             let ty = cx.tcx.expr_ty(array);\n-            if let TyArray(_, size) = ty.sty {\n+            if let ty::TyArray(_, size) = ty.sty {\n                 let size = ConstInt::Infer(size as u64);\n \n                 // Index is a constant uint"}, {"sha": "79e2cc86ee4592dd6a952d671a0eb6e54d83ab87", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -257,7 +257,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprBlock(ref block) => self.block(block),\n             ExprIf(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, otherwise),\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node)),\n-            ExprVec(ref vec) => self.multi(vec).map(Constant::Vec),\n+            ExprArray(ref vec) => self.multi(vec).map(Constant::Vec),\n             ExprTup(ref tup) => self.multi(tup).map(Constant::Tuple),\n             ExprRepeat(ref value, ref number) => {\n                 self.binop_apply(value, number, |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))"}, {"sha": "b2439cacba2c42c41b45dcc221406efbcbbf3f7d", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -265,7 +265,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n                     bindings_impl(cx, pat, map);\n                 }\n             }\n-            PatKind::Vec(ref lhs, ref mid, ref rhs) => {\n+            PatKind::Slice(ref lhs, ref mid, ref rhs) => {\n                 for pat in lhs {\n                     bindings_impl(cx, pat, map);\n                 }"}, {"sha": "451ad50f31005cc4cf3ab7d1fd96c7795dba9f80", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -213,7 +213,7 @@ fn check_expr<'v, 't>(vis: & mut ReadVisitor<'v, 't>, expr: &'v Expr) -> StopEar\n     }\n \n     match expr.node {\n-        ExprVec(_) |\n+        ExprArray(_) |\n         ExprTup(_) |\n         ExprMethodCall(_, _, _) |\n         ExprCall(_, _) |"}, {"sha": "0cae23dd62c241ef7d7dade25f3fbe16bc60f817", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -82,7 +82,7 @@ pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Exp\n         decl.name.as_str() == \"__STATIC_FMTSTR\",\n         let ItemStatic(_, _, ref expr) = decl.node,\n         let ExprAddrOf(_, ref expr) = expr.node, // &[\"\u2026\", \"\u2026\", \u2026]\n-        let ExprVec(ref exprs) = expr.node,\n+        let ExprArray(ref exprs) = expr.node,\n     ], {\n         let mut result = Vec::new();\n         for expr in exprs {\n@@ -123,7 +123,7 @@ fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n         arms[0].pats.len() == 1,\n         let PatKind::Tuple(ref pat, None) = arms[0].pats[0].node,\n         pat.len() == 1,\n-        let ExprVec(ref exprs) = arms[0].body.node,\n+        let ExprArray(ref exprs) = arms[0].body.node,\n         exprs.len() == 1,\n         let ExprCall(_, ref args) = exprs[0].node,\n         args.len() == 2,"}, {"sha": "c0950de6d1abc2e035562837a8881b11e1426b6d", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -50,7 +50,7 @@ fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n         Expr_::ExprPath(..) => true,\n         Expr_::ExprIndex(ref a, ref b) |\n         Expr_::ExprBinary(_, ref a, ref b) => has_no_effect(cx, a) && has_no_effect(cx, b),\n-        Expr_::ExprVec(ref v) |\n+        Expr_::ExprArray(ref v) |\n         Expr_::ExprTup(ref v) => v.iter().all(|val| has_no_effect(cx, val)),\n         Expr_::ExprRepeat(ref inner, _) |\n         Expr_::ExprCast(ref inner, _) |\n@@ -130,7 +130,7 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n     match expr.node {\n         Expr_::ExprIndex(ref a, ref b) |\n         Expr_::ExprBinary(_, ref a, ref b) => Some(vec![&**a, &**b]),\n-        Expr_::ExprVec(ref v) |\n+        Expr_::ExprArray(ref v) |\n         Expr_::ExprTup(ref v) => Some(v.iter().map(Deref::deref).collect()),\n         Expr_::ExprRepeat(ref inner, _) |\n         Expr_::ExprCast(ref inner, _) |"}, {"sha": "ab0c4f237c2f26530363e5379a5d3e619c151b8c", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -190,7 +190,7 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n fn check_set(cx: &LateContext, expr: &Expr, utf8: bool) {\n     if_let_chain! {[\n         let ExprAddrOf(_, ref expr) = expr.node,\n-        let ExprVec(ref exprs) = expr.node,\n+        let ExprArray(ref exprs) = expr.node,\n     ], {\n         for expr in exprs {\n             check_regex(cx, expr, utf8);"}, {"sha": "53ee82957680e8e27b383dda2ad9099fde3682dd", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -281,7 +281,7 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n         ExprLoop(ref block, _) => check_block(cx, block, bindings),\n         // ExprCall\n         // ExprMethodCall\n-        ExprVec(ref v) | ExprTup(ref v) => {\n+        ExprArray(ref v) | ExprTup(ref v) => {\n             for e in v {\n                 check_expr(cx, e, bindings)\n             }\n@@ -319,8 +319,8 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n fn check_ty(cx: &LateContext, ty: &Ty, bindings: &mut Vec<(Name, Span)>) {\n     match ty.node {\n         TyObjectSum(ref sty, _) |\n-        TyVec(ref sty) => check_ty(cx, sty, bindings),\n-        TyFixedLengthVec(ref fty, ref expr) => {\n+        TySlice(ref sty) => check_ty(cx, sty, bindings),\n+        TyArray(ref fty, ref expr) => {\n             check_ty(cx, fty, bindings);\n             check_expr(cx, expr, bindings);\n         }"}, {"sha": "40bd87f08cd52594df566ab00ce696ddf9626ed7", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -627,9 +627,9 @@ impl<'v> Visitor<'v> for TypeComplexityVisitor {\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n             TyPath(..) |\n-            TyVec(..) |\n+            TySlice(..) |\n             TyTup(..) |\n-            TyFixedLengthVec(..) => (10 * self.nest, 1),\n+            TyArray(..) => (10 * self.nest, 1),\n \n             // \"Sum\" of trait bounds\n             TyObjectSum(..) => (20 * self.nest, 0),"}, {"sha": "f9c94029bced76df1adef77acbe5720b18c3458a", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -180,7 +180,7 @@ pub fn vec_macro<'e>(cx: &LateContext, expr: &'e hir::Expr) -> Option<VecArgs<'e\n             // `vec![a, b, c]` case\n             if_let_chain!{[\n                 let hir::ExprBox(ref boxed) = args[0].node,\n-                let hir::ExprVec(ref args) = boxed.node\n+                let hir::ExprArray(ref args) = boxed.node\n             ], {\n                 return Some(VecArgs::Vec(&*args));\n             }}"}, {"sha": "adb418c68e5238a8a49344506add9ad3c7a297ff", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprTup(ref l_tup), &ExprTup(ref r_tup)) => self.eq_exprs(l_tup, r_tup),\n             (&ExprTupField(ref le, li), &ExprTupField(ref re, ri)) => li.node == ri.node && self.eq_expr(le, re),\n             (&ExprUnary(l_op, ref le), &ExprUnary(r_op, ref re)) => l_op == r_op && self.eq_expr(le, re),\n-            (&ExprVec(ref l), &ExprVec(ref r)) => self.eq_exprs(l, r),\n+            (&ExprArray(ref l), &ExprArray(ref r)) => self.eq_exprs(l, r),\n             (&ExprWhile(ref lc, ref lb, ref ll), &ExprWhile(ref rc, ref rb, ref rl)) => {\n                 self.eq_expr(lc, rc) && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.node.as_str() == r.node.as_str())\n             }\n@@ -166,7 +166,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                 self.eq_expr(ls, rs) && self.eq_expr(le, re)\n             }\n             (&PatKind::Ref(ref le, ref lm), &PatKind::Ref(ref re, ref rm)) => lm == rm && self.eq_pat(le, re),\n-            (&PatKind::Vec(ref ls, ref li, ref le), &PatKind::Vec(ref rs, ref ri, ref re)) => {\n+            (&PatKind::Slice(ref ls, ref li, ref le), &PatKind::Slice(ref rs, ref ri, ref re)) => {\n                 over(ls, rs, |l, r| self.eq_pat(l, r)) && over(le, re, |l, r| self.eq_pat(l, r)) &&\n                 both(li, ri, |l, r| self.eq_pat(l, r))\n             }\n@@ -211,8 +211,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n \n     fn eq_ty(&self, left: &Ty, right: &Ty) -> bool {\n         match (&left.node, &right.node) {\n-            (&TyVec(ref l_vec), &TyVec(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyFixedLengthVec(ref lt, ref ll), &TyFixedLengthVec(ref rt, ref rl)) => {\n+            (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n+            (&TyArray(ref lt, ref ll), &TyArray(ref rt, ref rl)) => {\n                 self.eq_ty(lt, rt) && self.eq_expr(ll, rl)\n             }\n             (&TyPtr(ref l_mut), &TyPtr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n@@ -490,8 +490,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 lop.hash(&mut self.s);\n                 self.hash_expr(le);\n             }\n-            ExprVec(ref v) => {\n-                let c: fn(_) -> _ = ExprVec;\n+            ExprArray(ref v) => {\n+                let c: fn(_) -> _ = ExprArray;\n                 c.hash(&mut self.s);\n \n                 self.hash_exprs(v);"}, {"sha": "edec67a8b2bf799cae5528c08ff42c96b305afa0", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -750,7 +750,7 @@ pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n                 are_refutable(cx, pats.iter().map(|pat| &**pat))\n             }\n         }\n-        PatKind::Vec(ref head, ref middle, ref tail) => {\n+        PatKind::Slice(ref head, ref middle, ref tail) => {\n             are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n         }\n     }"}, {"sha": "1dc2629d207786a4c1d6666d1ae2e9a0a48f547d", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f91d6690508c1527c391b22e8ac0446d296e305/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=4f91d6690508c1527c391b22e8ac0446d296e305", "patch": "@@ -50,6 +50,7 @@ impl<'a> Sugg<'a> {\n                 hir::ExprUnary(..) |\n                 hir::ExprMatch(..) => Sugg::MaybeParen(snippet),\n                 hir::ExprAgain(..) |\n+                hir::ExprArray(..) |\n                 hir::ExprBlock(..) |\n                 hir::ExprBreak(..) |\n                 hir::ExprCall(..) |\n@@ -65,7 +66,6 @@ impl<'a> Sugg<'a> {\n                 hir::ExprStruct(..) |\n                 hir::ExprTup(..) |\n                 hir::ExprTupField(..) |\n-                hir::ExprVec(..) |\n                 hir::ExprWhile(..) => Sugg::NonParen(snippet),\n                 hir::ExprAssign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n                 hir::ExprAssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),"}]}