{"sha": "0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlN2U5MzgyZmExYTZlNTBjOTc2Y2Q3NGNhNDIwZDdjYjEwNTkxZmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T01:12:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T01:12:57Z"}, "message": "Do not suggest incorrect syntax on pattern borrow error", "tree": {"sha": "73bd02689d4d3ceb36bb6536834b52684395b097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bd02689d4d3ceb36bb6536834b52684395b097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "html_url": "https://github.com/rust-lang/rust/commit/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55c2eb325029960991508e64650a139b040d24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55c2eb325029960991508e64650a139b040d24f", "html_url": "https://github.com/rust-lang/rust/commit/a55c2eb325029960991508e64650a139b040d24f"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "715b82183a761778b2c2414acfc8a6b04396a161", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "patch": "@@ -378,12 +378,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             // `fn foo(foo: &u32)`\n                             if let Some(mut err) = err {\n                                 if let PatKind::Binding(..) = inner.node {\n-                                    if let Ok(snippet) = tcx.sess.source_map()\n-                                                                    .span_to_snippet(pat.span)\n-                                    {\n-                                        err.help(&format!(\"did you mean `{}: &{}`?\",\n-                                                            &snippet[1..],\n-                                                            expected));\n+                                    let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+                                    let parent = tcx.hir().get_by_hir_id(parent_id);\n+                                    match parent {\n+                                        hir::Node::Item(_) |\n+                                        hir::Node::ForeignItem(_) |\n+                                        hir::Node::TraitItem(_) |\n+                                        hir::Node::ImplItem(_)  => { // this pat is an argument\n+                                            if let Ok(snippet) = tcx.sess.source_map()\n+                                                .span_to_snippet(pat.span)\n+                                            { // FIXME: turn into structured suggestion, will need\n+                                              // a span that also includes the the type.\n+                                                err.help(&format!(\n+                                                    \"did you mean `{}: &{}`?\",\n+                                                    &snippet[1..],\n+                                                    expected,\n+                                                ));\n+                                            }\n+                                        }\n+                                        _ => {} // don't provide the suggestion from above #55175\n                                     }\n                                 }\n                                 err.emit();"}, {"sha": "7f389299afba8035278a6d6a13af684a96751d6f", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "patch": "@@ -24,7 +24,6 @@ LL |     let &&x = &1isize as &T;\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n-   = help: did you mean `x: &dyn T`?\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n@@ -34,7 +33,6 @@ LL |     let &&&x = &(&1isize as &T);\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n-   = help: did you mean `x: &dyn T`?\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:41:13"}, {"sha": "30da48ba4a8ad9a3cc3f557c91e386e7097577e6", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "patch": "@@ -16,7 +16,6 @@ LL | fn agh(&&bar: &u32) {\n    |\n    = note: expected type `u32`\n               found type `&_`\n-   = help: did you mean `bar: &u32`?\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:21:8"}]}