{"sha": "e78bde401524a430290dd5e5f1fc404422f8be2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OGJkZTQwMTUyNGE0MzAyOTBkZDVlNWYxZmM0MDQ0MjJmOGJlMmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-19T13:21:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-19T13:21:23Z"}, "message": "Rollup merge of #57699 - euclio:applicability-ify, r=petrochenkov\n\nadd applicability to remaining suggestions\n\nFixes #50723.\n\nI noticed that the suggestion methods on `DiagnosticBuilder` weren't actually deprecated due to #57679. This PR deprecates them properly and fixes the remaining usages.\n\nThere's also a PR for clippy at rust-lang/rust-clippy#3667.", "tree": {"sha": "6b4848d00a16a6df28c16e8f5fea3c29a21ef33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4848d00a16a6df28c16e8f5fea3c29a21ef33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78bde401524a430290dd5e5f1fc404422f8be2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQyRTCRBK7hj4Ov3rIwAAdHIIAJgNfNfd037iJV3x3PqmSvdE\nUMgfxg7oGfUIKIym/JypUcLkbXNg2V11Z4dRhuqW7vALW6LJoChoI9GSPSHLbPdg\n42nB7P20iDyNRJQfgnIPI0O4p8X4IoFRPjBjhKX0tZ5F15NnK0198HdeLQeJdzJr\n/HeOblFwmB44ZDOXYPVC/RDyfZaEG+0NSZJarEAbQLv32E1prmcSH83xw2sfbAck\nVDHDa4h355891QFyTyzXdKGlsPi+LOoBURQ4UTvQ+XKQeRX47jzuThVlI8/rkENV\nJCfPaNeZC1cmrBjHv1BHa8bB2g/GJ5bf9f0VsaTTYKoaeWZIOL60hjk/gn+HiWA=\n=oTRx\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b4848d00a16a6df28c16e8f5fea3c29a21ef33c\nparent c8c03afa5762624b37877c00485a5b0ca0d07797\nparent 02843d9eb71ad50d490afc6276f4bfe59f182624\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547904083 +0100\ncommitter GitHub <noreply@github.com> 1547904083 +0100\n\nRollup merge of #57699 - euclio:applicability-ify, r=petrochenkov\n\nadd applicability to remaining suggestions\n\nFixes #50723.\n\nI noticed that the suggestion methods on `DiagnosticBuilder` weren't actually deprecated due to #57679. This PR deprecates them properly and fixes the remaining usages.\n\nThere's also a PR for clippy at rust-lang/rust-clippy#3667.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78bde401524a430290dd5e5f1fc404422f8be2e", "html_url": "https://github.com/rust-lang/rust/commit/e78bde401524a430290dd5e5f1fc404422f8be2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78bde401524a430290dd5e5f1fc404422f8be2e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c03afa5762624b37877c00485a5b0ca0d07797", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c03afa5762624b37877c00485a5b0ca0d07797", "html_url": "https://github.com/rust-lang/rust/commit/c8c03afa5762624b37877c00485a5b0ca0d07797"}, {"sha": "02843d9eb71ad50d490afc6276f4bfe59f182624", "url": "https://api.github.com/repos/rust-lang/rust/commits/02843d9eb71ad50d490afc6276f4bfe59f182624", "html_url": "https://github.com/rust-lang/rust/commit/02843d9eb71ad50d490afc6276f4bfe59f182624"}], "stats": {"total": 126, "additions": 86, "deletions": 40}, "files": [{"sha": "736cca6bd64af3b6399623e4b054e4b333bff7aa", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 56, "deletions": 34, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=e78bde401524a430290dd5e5f1fc404422f8be2e", "patch": "@@ -33,7 +33,11 @@ pub struct DiagnosticBuilder<'a> {\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n     // Forward pattern for &self -> &Self\n-    (pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)*) -> &Self) => {\n+    (\n+        $(#[$attrs:meta])*\n+        pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)*) -> &Self\n+    ) => {\n+        $(#[$attrs])*\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -42,7 +46,11 @@ macro_rules! forward {\n     };\n \n     // Forward pattern for &mut self -> &mut Self\n-    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)*) -> &mut Self) => {\n+    (\n+        $(#[$attrs:meta])*\n+        pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)*) -> &mut Self\n+    ) => {\n+        $(#[$attrs])*\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -52,10 +60,15 @@ macro_rules! forward {\n \n     // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n     // type parameter. No obvious way to make this more generic.\n-    (pub fn $n:ident<S: Into<MultiSpan>>(\n-                    &mut self,\n-                    $($name:ident: $ty:ty),*\n-                    $(,)*) -> &mut Self) => {\n+    (\n+        $(#[$attrs:meta])*\n+        pub fn $n:ident<S: Into<MultiSpan>>(\n+            &mut self,\n+            $($name:ident: $ty:ty),*\n+            $(,)*\n+        ) -> &mut Self\n+    ) => {\n+        $(#[$attrs])*\n         pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -177,34 +190,43 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                   msg: &str,\n                                                   ) -> &mut Self);\n \n-    #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n-    forward!(pub fn span_suggestion_short(\n-                                      &mut self,\n-                                      sp: Span,\n-                                      msg: &str,\n-                                      suggestion: String,\n-                                      ) -> &mut Self);\n-\n-    #[deprecated(note = \"Use `multipart_suggestion_with_applicability`\")]\n-    forward!(pub fn multipart_suggestion(\n-        &mut self,\n-        msg: &str,\n-        suggestion: Vec<(Span, String)>,\n-    ) -> &mut Self);\n-\n-    #[deprecated(note = \"Use `span_suggestion_with_applicability`\")]\n-    forward!(pub fn span_suggestion(&mut self,\n-                                    sp: Span,\n-                                    msg: &str,\n-                                    suggestion: String,\n-                                    ) -> &mut Self);\n-\n-    #[deprecated(note = \"Use `span_suggestions_with_applicability`\")]\n-    forward!(pub fn span_suggestions(&mut self,\n-                                     sp: Span,\n-                                     msg: &str,\n-                                     suggestions: Vec<String>,\n-                                     ) -> &mut Self);\n+    forward!(\n+        #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n+        pub fn span_suggestion_short(\n+            &mut self,\n+            sp: Span,\n+            msg: &str,\n+            suggestion: String,\n+        ) -> &mut Self\n+    );\n+\n+    forward!(\n+        #[deprecated(note = \"Use `multipart_suggestion_with_applicability`\")]\n+        pub fn multipart_suggestion(\n+            &mut self,\n+            msg: &str,\n+            suggestion: Vec<(Span, String)>,\n+        ) -> &mut Self\n+    );\n+\n+    forward!(\n+        #[deprecated(note = \"Use `span_suggestion_with_applicability`\")]\n+        pub fn span_suggestion(\n+            &mut self,\n+            sp: Span,\n+            msg: &str,\n+            suggestion: String,\n+        ) -> &mut Self\n+    );\n+\n+    forward!(\n+        #[deprecated(note = \"Use `span_suggestions_with_applicability`\")]\n+        pub fn span_suggestions(&mut self,\n+            sp: Span,\n+            msg: &str,\n+            suggestions: Vec<String>,\n+        ) -> &mut Self\n+    );\n \n     pub fn multipart_suggestion_with_applicability(&mut self,\n                                               msg: &str,"}, {"sha": "35616cc03a936bdbbb03b51202db33340f0930b4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e78bde401524a430290dd5e5f1fc404422f8be2e", "patch": "@@ -21,6 +21,8 @@ use std::cell::Cell;\n use std::ptr;\n use rustc_data_structures::sync::Lrc;\n \n+use errors::Applicability;\n+\n use syntax::ast::{Name, Ident};\n use syntax::attr;\n \n@@ -345,7 +347,12 @@ impl<'a> Resolver<'a> {\n                 let module = if orig_name.is_none() && ident.name == keywords::SelfLower.name() {\n                     self.session\n                         .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n-                        .span_suggestion(item.span, \"try\", \"extern crate self as name;\".into())\n+                        .span_suggestion_with_applicability(\n+                            item.span,\n+                            \"try\",\n+                            \"extern crate self as name;\".into(),\n+                            Applicability::HasPlaceholders,\n+                        )\n                         .emit();\n                     return;\n                 } else if orig_name == Some(keywords::SelfLower.name()) {"}, {"sha": "1cd44042c1de9811383b59f1f51420345fad32a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e78bde401524a430290dd5e5f1fc404422f8be2e", "patch": "@@ -4866,8 +4866,13 @@ impl<'a> Resolver<'a> {\n                 } else if ident.span.rust_2018() {\n                     let msg = \"relative paths are not supported in visibilities on 2018 edition\";\n                     self.session.struct_span_err(ident.span, msg)\n-                                .span_suggestion(path.span, \"try\", format!(\"crate::{}\", path))\n-                                .emit();\n+                        .span_suggestion_with_applicability(\n+                            path.span,\n+                            \"try\",\n+                            format!(\"crate::{}\", path),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n                     return ty::Visibility::Public;\n                 } else {\n                     let ctxt = ident.span.ctxt();"}, {"sha": "47f258e1aea7478d77cb28b8004bfbbf34225ced", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e78bde401524a430290dd5e5f1fc404422f8be2e", "patch": "@@ -1,5 +1,6 @@\n use check::{FnCtxt, Expectation, Diverges, Needs};\n use check::coercion::CoerceMany;\n+use errors::Applicability;\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -989,7 +990,13 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                     let suggested_name =\n                         find_best_match_for_name(input, &ident.as_str(), None);\n                     if let Some(suggested_name) = suggested_name {\n-                        err.span_suggestion(*span, \"did you mean\", suggested_name.to_string());\n+                        err.span_suggestion_with_applicability(\n+                            *span,\n+                            \"did you mean\",\n+                            suggested_name.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+\n                         // we don't want to throw `E0027` in case we have thrown `E0026` for them\n                         unmentioned_fields.retain(|&x| x.as_str() != suggested_name.as_str());\n                     }"}, {"sha": "7e15b23127655ee5883451685b3754e5a5aeeb3c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78bde401524a430290dd5e5f1fc404422f8be2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e78bde401524a430290dd5e5f1fc404422f8be2e", "patch": "@@ -4063,12 +4063,13 @@ impl<'a> Parser<'a> {\n \n         if let Some(mut err) = delayed_err {\n             if let Some(etc_span) = etc_span {\n-                err.multipart_suggestion(\n+                err.multipart_suggestion_with_applicability(\n                     \"move the `..` to the end of the field list\",\n                     vec![\n                         (etc_span, String::new()),\n                         (self.span, format!(\"{}.. }}\", if ate_comma { \"\" } else { \", \" })),\n                     ],\n+                    Applicability::MachineApplicable,\n                 );\n             }\n             err.emit();\n@@ -6904,7 +6905,11 @@ impl<'a> Parser<'a> {\n \n             let mut err = self.struct_span_err(fixed_name_sp, error_msg);\n             err.span_label(fixed_name_sp, \"dash-separated idents are not valid\");\n-            err.multipart_suggestion(suggestion_msg, replacement);\n+            err.multipart_suggestion_with_applicability(\n+                suggestion_msg,\n+                replacement,\n+                Applicability::MachineApplicable,\n+            );\n             err.emit();\n         }\n         Ok(ident)"}]}