{"sha": "36b0d7e25769e88fec85e1d073196065a7f2d7c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjBkN2UyNTc2OWU4OGZlYzg1ZTFkMDczMTk2MDY1YTdmMmQ3YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-30T21:03:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-30T21:03:06Z"}, "message": "Auto merge of #75779 - scileo:fix-issue-75492, r=petrochenkov\n\nImprove error message when typo is made in format!\n\nThe expansion of the format! built-in macro is roughly done in two steps:\n  - the format expression is parsed, the arguments are parsed,\n  - the format expression is checked to be a string literal, code is expanded.\n\nThe problem is that the expression parser can eat too much tokens, which invalidates the parsing of the next format arguments. As the format expression check happens next, the error emitted concerns the format arguments, whereas the problem is about the format expression.\n\nThis PR contains two commits. The first one actually checks that the formatting expression is a string literal before raising any error about the formatting arguments, and the second one contains some simple heuristics which allow to suggest, when the format expression is followed by a dot instead of a comma, to suggest to replace the dot with a comma.\n\nThis pull request should fix #75492.\n\nNote: this is my first non-doc contribution to the rust ecosystem. Feel free to make any comment about my code, or whatever. I'll be very happy to fix it :)", "tree": {"sha": "75a6755f7e97b1a5e7da581a8361ee65193b6b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a6755f7e97b1a5e7da581a8361ee65193b6b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "html_url": "https://github.com/rust-lang/rust/commit/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}, {"sha": "f6d18db402cfebcf5c1bdc8e730f3923b3bb0421", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d18db402cfebcf5c1bdc8e730f3923b3bb0421", "html_url": "https://github.com/rust-lang/rust/commit/f6d18db402cfebcf5c1bdc8e730f3923b3bb0421"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "48506148ed9a7b2d02ad4ca1ddab4cf36d7f4d7e", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36b0d7e25769e88fec85e1d073196065a7f2d7c4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b0d7e25769e88fec85e1d073196065a7f2d7c4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=36b0d7e25769e88fec85e1d073196065a7f2d7c4", "patch": "@@ -135,7 +135,26 @@ fn parse_args<'a>(\n         return Err(ecx.struct_span_err(sp, \"requires at least a format string argument\"));\n     }\n \n-    let fmtstr = p.parse_expr()?;\n+    let first_token = &p.token;\n+    let fmtstr = match first_token.kind {\n+        token::TokenKind::Literal(token::Lit {\n+            kind: token::LitKind::Str | token::LitKind::StrRaw(_),\n+            ..\n+        }) => {\n+            // If the first token is a string literal, then a format expression\n+            // is constructed from it.\n+            //\n+            // This allows us to properly handle cases when the first comma\n+            // after the format string is mistakenly replaced with any operator,\n+            // which cause the expression parser to eat too much tokens.\n+            p.parse_literal_maybe_minus()?\n+        }\n+        _ => {\n+            // Otherwise, we fall back to the expression parser.\n+            p.parse_expr()?\n+        }\n+    };\n+\n     let mut first = true;\n     let mut named = false;\n "}, {"sha": "69d13b5cf53a2771adb73b6a2d20f08454e931f3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b0d7e25769e88fec85e1d073196065a7f2d7c4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b0d7e25769e88fec85e1d073196065a7f2d7c4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=36b0d7e25769e88fec85e1d073196065a7f2d7c4", "patch": "@@ -1480,7 +1480,7 @@ impl<'a> Parser<'a> {\n \n     /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).\n     /// Keep this in sync with `Token::can_begin_literal_maybe_minus`.\n-    pub(super) fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n+    pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n         maybe_whole_expr!(self);\n \n         let lo = self.token.span;"}, {"sha": "0b097fdfab81fe20950d76b650c74e7ce82c1538", "filename": "src/test/ui/fmt/incorrect-first-separator.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36b0d7e25769e88fec85e1d073196065a7f2d7c4/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b0d7e25769e88fec85e1d073196065a7f2d7c4/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.rs?ref=36b0d7e25769e88fec85e1d073196065a7f2d7c4", "patch": "@@ -0,0 +1,22 @@\n+// Allows to track issue #75492:\n+// https://github.com/rust-lang/rust/issues/75492\n+\n+use std::iter;\n+\n+fn main() {\n+    format!(\"A number: {}\". iter::once(42).next().unwrap());\n+    //~^ ERROR expected token: `,`\n+\n+    // Other kind of types are also checked:\n+\n+    format!(\"A number: {}\" / iter::once(42).next().unwrap());\n+    //~^ ERROR expected token: `,`\n+\n+    format!(\"A number: {}\"; iter::once(42).next().unwrap());\n+    //~^ ERROR expected token: `,`\n+\n+    // Note: this character is an COMBINING COMMA BELOW unicode char\n+    format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n+    //~^ ERROR expected token: `,`\n+    //~^^ ERROR unknown start of token: \\u{326}\n+}"}, {"sha": "60d2a82855e898393d0ab16ba8d70c70da1505d9", "filename": "src/test/ui/fmt/incorrect-first-separator.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/36b0d7e25769e88fec85e1d073196065a7f2d7c4/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b0d7e25769e88fec85e1d073196065a7f2d7c4/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fincorrect-first-separator.stderr?ref=36b0d7e25769e88fec85e1d073196065a7f2d7c4", "patch": "@@ -0,0 +1,32 @@\n+error: unknown start of token: \\u{326}\n+  --> $DIR/incorrect-first-separator.rs:19:28\n+   |\n+LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n+   |                            ^\n+\n+error: expected token: `,`\n+  --> $DIR/incorrect-first-separator.rs:7:27\n+   |\n+LL |     format!(\"A number: {}\". iter::once(42).next().unwrap());\n+   |                           ^ expected `,`\n+\n+error: expected token: `,`\n+  --> $DIR/incorrect-first-separator.rs:12:28\n+   |\n+LL |     format!(\"A number: {}\" / iter::once(42).next().unwrap());\n+   |                            ^ expected `,`\n+\n+error: expected token: `,`\n+  --> $DIR/incorrect-first-separator.rs:15:27\n+   |\n+LL |     format!(\"A number: {}\"; iter::once(42).next().unwrap());\n+   |                           ^ expected `,`\n+\n+error: expected token: `,`\n+  --> $DIR/incorrect-first-separator.rs:19:30\n+   |\n+LL |     format!(\"A number: {}\" \u0326 iter::once(42).next().unwrap());\n+   |                             ^^^^ expected `,`\n+\n+error: aborting due to 5 previous errors\n+"}]}