{"sha": "816bc7389516dda1eb4821f2ac4d5993cd5611dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmJjNzM4OTUxNmRkYTFlYjQ4MjFmMmFjNGQ1OTkzY2Q1NjExZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-18T14:15:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T14:15:29Z"}, "message": "Merge #8085\n\n8085: Create AstId for builtin_derive macro in tests r=jonas-schievink a=jonas-schievink\n\nThis moves them closer to the builtin_macro tests\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "5f018aed7c3866dfe67bbef812dad9a5a434447b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f018aed7c3866dfe67bbef812dad9a5a434447b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816bc7389516dda1eb4821f2ac4d5993cd5611dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgU2CBCRBK7hj4Ov3rIwAAdHIIAIcfp90rhWDna9snsXIoRiyb\nNOX4f2exuhN1GyHd2L+KIbSWZ3k5BUGVQ2uI9qWa6ci7JKd8IPDI71MAc/5iZUvJ\nIq3DO09PUp5lm5HBcfzM0PTSjaZO0+qlstf84uK9QTDWZswM5l8R6AzXpQStOvQ9\nM4Mytmo6nrd0JHXhxht/ggd3rsOj8d1HMsgITSVP+G0OAIJlGLnrcc8rORw2j3K8\nWr+fR4/fdGGcK97Xo11rKf+WsuXjydI3ZbUqR7eMVsES7pyFKDlJ1LYS/XIdtEsz\ns8epkicPvikAVzqG466mC5kDjA0Tb1AKowazqxIjsZpOm+/nYK285cgDjsBxvL8=\n=NmU1\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f018aed7c3866dfe67bbef812dad9a5a434447b\nparent d3da042a6297b60799f6f97dd4d58d559a9b5838\nparent 4cf36545e65c91a92f7a29681fb7f4346475e81b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616076929 +0000\ncommitter GitHub <noreply@github.com> 1616076929 +0000\n\nMerge #8085\n\n8085: Create AstId for builtin_derive macro in tests r=jonas-schievink a=jonas-schievink\n\nThis moves them closer to the builtin_macro tests\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816bc7389516dda1eb4821f2ac4d5993cd5611dd", "html_url": "https://github.com/rust-lang/rust/commit/816bc7389516dda1eb4821f2ac4d5993cd5611dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816bc7389516dda1eb4821f2ac4d5993cd5611dd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3da042a6297b60799f6f97dd4d58d559a9b5838", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3da042a6297b60799f6f97dd4d58d559a9b5838", "html_url": "https://github.com/rust-lang/rust/commit/d3da042a6297b60799f6f97dd4d58d559a9b5838"}, {"sha": "4cf36545e65c91a92f7a29681fb7f4346475e81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf36545e65c91a92f7a29681fb7f4346475e81b", "html_url": "https://github.com/rust-lang/rust/commit/4cf36545e65c91a92f7a29681fb7f4346475e81b"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "a8d267c30ecfac507e81571f37204245e0d538e2", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/816bc7389516dda1eb4821f2ac4d5993cd5611dd/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816bc7389516dda1eb4821f2ac4d5993cd5611dd/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=816bc7389516dda1eb4821f2ac4d5993cd5611dd", "patch": "@@ -268,14 +268,13 @@ fn partial_ord_expand(\n mod tests {\n     use base_db::{fixture::WithFixture, CrateId, SourceDatabase};\n     use expect_test::{expect, Expect};\n-    use name::{known, Name};\n+    use name::AsName;\n \n     use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n \n     use super::*;\n \n-    fn expand_builtin_derive(ra_fixture: &str, name: Name) -> String {\n-        let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n+    fn expand_builtin_derive(ra_fixture: &str) -> String {\n         let fixture = format!(\n             r#\"//- /main.rs crate:main deps:core\n $0\n@@ -288,18 +287,34 @@ $0\n \n         let (db, file_pos) = TestDB::with_position(&fixture);\n         let file_id = file_pos.file_id;\n+        let ast_id_map = db.ast_id_map(file_id.into());\n         let parsed = db.parse(file_id);\n-        let items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::Item::cast).collect();\n+        let macros: Vec<_> =\n+            parsed.syntax_node().descendants().filter_map(ast::Macro::cast).collect();\n+        let items: Vec<_> = parsed\n+            .syntax_node()\n+            .descendants()\n+            .filter(|node| !ast::Macro::can_cast(node.kind()))\n+            .filter_map(ast::Item::cast)\n+            .collect();\n+\n+        assert_eq!(macros.len(), 1, \"test must contain exactly 1 macro definition\");\n+        assert_eq!(items.len(), 1, \"test must contain exactly 1 item\");\n+\n+        let macro_ast_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macros[0]));\n+        let name = match &macros[0] {\n+            ast::Macro::MacroRules(rules) => rules.name().unwrap().as_name(),\n+            ast::Macro::MacroDef(def) => def.name().unwrap().as_name(),\n+        };\n \n-        let ast_id_map = db.ast_id_map(file_id.into());\n+        let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n \n         let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n         let loc = MacroCallLoc {\n             def: MacroDefId {\n                 krate: CrateId(0),\n-                ast_id: None,\n+                ast_id: Some(macro_ast_id),\n                 kind: MacroDefKind::BuiltInDerive(expander),\n                 local_inner: false,\n             },\n@@ -315,19 +330,19 @@ $0\n         parsed.text().to_string()\n     }\n \n-    fn check_derive(ra_fixture: &str, name: Name, expected: Expect) {\n-        let expanded = expand_builtin_derive(ra_fixture, name);\n+    fn check_derive(ra_fixture: &str, expected: Expect) {\n+        let expanded = expand_builtin_derive(ra_fixture);\n         expected.assert_eq(&expanded);\n     }\n \n     #[test]\n     fn test_copy_expand_simple() {\n         check_derive(\n             r#\"\n+            macro Copy {}\n             #[derive(Copy)]\n             struct Foo;\n             \"#,\n-            known::Copy,\n             expect![[\"impl< >core::marker::CopyforFoo< >{}\"]],\n         );\n     }\n@@ -336,10 +351,10 @@ $0\n     fn test_copy_expand_with_type_params() {\n         check_derive(\n             r#\"\n+            macro Copy {}\n             #[derive(Copy)]\n             struct Foo<A, B>;\n             \"#,\n-            known::Copy,\n             expect![[\"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"]],\n         );\n     }\n@@ -348,10 +363,10 @@ $0\n     fn test_copy_expand_with_lifetimes() {\n         check_derive(\n             r#\"\n+            macro Copy {}\n             #[derive(Copy)]\n             struct Foo<A, B, 'a, 'b>;\n             \"#,\n-            known::Copy,\n             // We currently just ignore lifetimes\n             expect![[\"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"]],\n         );\n@@ -361,10 +376,10 @@ $0\n     fn test_clone_expand() {\n         check_derive(\n             r#\"\n+            macro Clone {}\n             #[derive(Clone)]\n             struct Foo<A, B>;\n             \"#,\n-            known::Clone,\n             expect![[\"impl<T0:core::clone::Clone,T1:core::clone::Clone>core::clone::CloneforFoo<T0,T1>{}\"]],\n         );\n     }"}]}