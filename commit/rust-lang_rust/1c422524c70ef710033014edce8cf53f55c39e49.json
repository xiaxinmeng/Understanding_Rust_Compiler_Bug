{"sha": "1c422524c70ef710033014edce8cf53f55c39e49", "node_id": "C_kwDOAAsO6NoAKDFjNDIyNTI0YzcwZWY3MTAwMzMwMTRlZGNlOGNmNTNmNTVjMzllNDk", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-17T13:12:54Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-17T13:12:54Z"}, "message": "Merge commit '4bdfb0741dbcecd5279a2635c3280726db0604b5' into clippyup", "tree": {"sha": "f0a863bf560e88224fb8930ab3d381b066058b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a863bf560e88224fb8930ab3d381b066058b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c422524c70ef710033014edce8cf53f55c39e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c422524c70ef710033014edce8cf53f55c39e49", "html_url": "https://github.com/rust-lang/rust/commit/1c422524c70ef710033014edce8cf53f55c39e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c422524c70ef710033014edce8cf53f55c39e49/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfe1e040e753323322ba42e923b998b0e217dec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe1e040e753323322ba42e923b998b0e217dec3", "html_url": "https://github.com/rust-lang/rust/commit/cfe1e040e753323322ba42e923b998b0e217dec3"}], "stats": {"total": 3309, "additions": 2707, "deletions": 602}, "files": [{"sha": "1bc457a947936b4e35fa9c9cbe8a4f945d1721e5", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -82,13 +82,6 @@ jobs:\n       with:\n         github_token: \"${{ secrets.github_token }}\"\n \n-    - name: Install dependencies (Linux-i686)\n-      run: |\n-        sudo dpkg --add-architecture i386\n-        sudo apt-get update\n-        sudo apt-get install gcc-multilib libssl-dev:i386 libgit2-dev:i386\n-      if: matrix.host == 'i686-unknown-linux-gnu'\n-\n     - name: Checkout\n       uses: actions/checkout@v3.0.2\n "}, {"sha": "903ee938d9d2d2f73e535c3b05eff4be2b628b49", "filename": "CHANGELOG.md", "status": "modified", "additions": 175, "deletions": 2, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -6,11 +6,181 @@ document.\n \n ## Unreleased / Beta / In Rust Nightly\n \n-[b52fb523...master](https://github.com/rust-lang/rust-clippy/compare/b52fb523...master)\n+[4f142aa1...master](https://github.com/rust-lang/rust-clippy/compare/4f142aa1...master)\n+\n+## Rust 1.66\n+\n+Current stable, released 2022-12-15\n+\n+[b52fb523...4f142aa1](https://github.com/rust-lang/rust-clippy/compare/b52fb523...4f142aa1)\n+\n+### New Lints\n+\n+* [`manual_clamp`]\n+  [#9484](https://github.com/rust-lang/rust-clippy/pull/9484)\n+* [`missing_trait_methods`]\n+  [#9670](https://github.com/rust-lang/rust-clippy/pull/9670)\n+* [`unused_format_specs`]\n+  [#9637](https://github.com/rust-lang/rust-clippy/pull/9637)\n+* [`iter_kv_map`]\n+  [#9409](https://github.com/rust-lang/rust-clippy/pull/9409)\n+* [`manual_filter`]\n+  [#9451](https://github.com/rust-lang/rust-clippy/pull/9451)\n+* [`box_default`]\n+  [#9511](https://github.com/rust-lang/rust-clippy/pull/9511)\n+* [`implicit_saturating_add`]\n+  [#9549](https://github.com/rust-lang/rust-clippy/pull/9549)\n+* [`as_ptr_cast_mut`]\n+  [#9572](https://github.com/rust-lang/rust-clippy/pull/9572)\n+* [`disallowed_macros`]\n+  [#9495](https://github.com/rust-lang/rust-clippy/pull/9495)\n+* [`partial_pub_fields`]\n+  [#9658](https://github.com/rust-lang/rust-clippy/pull/9658)\n+* [`uninlined_format_args`]\n+  [#9233](https://github.com/rust-lang/rust-clippy/pull/9233)\n+* [`cast_nan_to_int`]\n+  [#9617](https://github.com/rust-lang/rust-clippy/pull/9617)\n+\n+### Moves and Deprecations\n+\n+* `positional_named_format_parameters` was uplifted to rustc under the new name\n+  `named_arguments_used_positionally`\n+  [#8518](https://github.com/rust-lang/rust-clippy/pull/8518)\n+* Moved [`implicit_saturating_sub`] to `style` (Now warn-by-default)\n+  [#9584](https://github.com/rust-lang/rust-clippy/pull/9584)\n+* Moved `derive_partial_eq_without_eq` to `nursery` (now allow-by-default)\n+  [#9536](https://github.com/rust-lang/rust-clippy/pull/9536)\n+\n+### Enhancements\n+\n+* [`nonstandard_macro_braces`]: Now includes `matches!()` in the default lint config\n+  [#9471](https://github.com/rust-lang/rust-clippy/pull/9471)\n+* [`suboptimal_flops`]: Now supports multiplication and subtraction operations\n+  [#9581](https://github.com/rust-lang/rust-clippy/pull/9581)\n+* [`arithmetic_side_effects`]: Now detects cases with literals behind references\n+  [#9587](https://github.com/rust-lang/rust-clippy/pull/9587)\n+* [`upper_case_acronyms`]: Now also checks enum names\n+  [#9580](https://github.com/rust-lang/rust-clippy/pull/9580)\n+* [`needless_borrowed_reference`]: Now lints nested patterns\n+  [#9573](https://github.com/rust-lang/rust-clippy/pull/9573)\n+* [`unnecessary_cast`]: Now works for non-trivial non-literal expressions\n+  [#9576](https://github.com/rust-lang/rust-clippy/pull/9576)\n+* [`arithmetic_side_effects`]: Now detects operations with custom types\n+  [#9559](https://github.com/rust-lang/rust-clippy/pull/9559)\n+* [`disallowed_methods`], [`disallowed_types`]: Not correctly lints types, functions and macros\n+  with the same path\n+  [#9495](https://github.com/rust-lang/rust-clippy/pull/9495)\n+* [`self_named_module_files`], [`mod_module_files`]: Now take remapped path prefixes into account\n+  [#9475](https://github.com/rust-lang/rust-clippy/pull/9475)\n+* [`bool_to_int_with_if`]: Now detects the inverse if case\n+  [#9476](https://github.com/rust-lang/rust-clippy/pull/9476)\n+\n+### False Positive Fixes\n+\n+* [`arithmetic_side_effects`]: Now allows operations that can't overflow\n+  [#9474](https://github.com/rust-lang/rust-clippy/pull/9474)\n+* [`unnecessary_lazy_evaluations`]: No longer lints in external macros\n+  [#9486](https://github.com/rust-lang/rust-clippy/pull/9486)\n+* [`needless_borrow`], [`explicit_auto_deref`]: No longer lint on unions that require the reference\n+  [#9490](https://github.com/rust-lang/rust-clippy/pull/9490)\n+* [`almost_complete_letter_range`]: No longer lints in external macros\n+  [#9467](https://github.com/rust-lang/rust-clippy/pull/9467)\n+* [`drop_copy`]: No longer lints on idiomatic cases in match arms \n+  [#9491](https://github.com/rust-lang/rust-clippy/pull/9491)\n+* [`question_mark`]: No longer lints in const context\n+  [#9487](https://github.com/rust-lang/rust-clippy/pull/9487)\n+* [`collapsible_if`]: Suggestion now work in macros\n+  [#9410](https://github.com/rust-lang/rust-clippy/pull/9410)\n+* [`std_instead_of_core`]: No longer triggers on unstable modules\n+  [#9545](https://github.com/rust-lang/rust-clippy/pull/9545)\n+* [`unused_peekable`]: No longer lints, if the peak is done in a closure or function\n+  [#9465](https://github.com/rust-lang/rust-clippy/pull/9465)\n+* [`useless_attribute`]: No longer lints on `#[allow]` attributes for [`unsafe_removed_from_name`]\n+  [#9593](https://github.com/rust-lang/rust-clippy/pull/9593)\n+* [`unnecessary_lazy_evaluations`]: No longer suggest switching to early evaluation when type has\n+  custom `Drop` implementation\n+  [#9551](https://github.com/rust-lang/rust-clippy/pull/9551)\n+* [`unnecessary_cast`]: No longer lints on negative hexadecimal literals when cast as floats\n+  [#9609](https://github.com/rust-lang/rust-clippy/pull/9609)\n+* [`use_self`]: No longer lints in proc macros\n+  [#9454](https://github.com/rust-lang/rust-clippy/pull/9454)\n+* [`never_loop`]: Now takes `let ... else` statements into consideration.\n+  [#9496](https://github.com/rust-lang/rust-clippy/pull/9496)\n+* [`default_numeric_fallback`]: Now ignores constants\n+  [#9636](https://github.com/rust-lang/rust-clippy/pull/9636)\n+* [`uninit_vec`]: No longer lints `Vec::set_len(0)`\n+  [#9519](https://github.com/rust-lang/rust-clippy/pull/9519)\n+* [`arithmetic_side_effects`]: Now ignores references to integer types\n+  [#9507](https://github.com/rust-lang/rust-clippy/pull/9507)\n+* [`large_stack_arrays`]: No longer lints inside static items\n+  [#9466](https://github.com/rust-lang/rust-clippy/pull/9466)\n+* [`ref_option_ref`]: No longer lints if the inner reference is mutable\n+  [#9684](https://github.com/rust-lang/rust-clippy/pull/9684)\n+* [`ptr_arg`]: No longer lints if the argument is used as an incomplete trait object\n+  [#9645](https://github.com/rust-lang/rust-clippy/pull/9645)\n+* [`should_implement_trait`]: Now also works for `default` methods\n+  [#9546](https://github.com/rust-lang/rust-clippy/pull/9546)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`derivable_impls`]: The suggestion is now machine applicable\n+  [#9429](https://github.com/rust-lang/rust-clippy/pull/9429)\n+* [`match_single_binding`]: The suggestion now handles scrutinies with side effects better\n+  [#9601](https://github.com/rust-lang/rust-clippy/pull/9601)\n+* [`zero_prefixed_literal`]: Only suggests using octal numbers, if this is possible\n+  [#9652](https://github.com/rust-lang/rust-clippy/pull/9652)\n+* [`rc_buffer`]: The suggestion is no longer machine applicable to avoid semantic changes\n+  [#9633](https://github.com/rust-lang/rust-clippy/pull/9633)\n+* [`print_literal`], [`write_literal`], [`uninlined_format_args`]: The suggestion now ignores\n+  comments after the macro call.\n+  [#9586](https://github.com/rust-lang/rust-clippy/pull/9586)\n+* [`expect_fun_call`]:Improved the suggestion for `format!` calls with captured variables\n+  [#9586](https://github.com/rust-lang/rust-clippy/pull/9586)\n+* [`nonstandard_macro_braces`]: The suggestion is now machine applicable and will no longer\n+  replace brackets inside the macro argument.\n+  [#9499](https://github.com/rust-lang/rust-clippy/pull/9499)\n+* [`from_over_into`]: The suggestion is now a machine applicable and contains explanations\n+  [#9649](https://github.com/rust-lang/rust-clippy/pull/9649)\n+* [`needless_return`]: The automatic suggestion now removes all required semicolons\n+  [#9497](https://github.com/rust-lang/rust-clippy/pull/9497)\n+* [`to_string_in_format_args`]: The suggestion now keeps parenthesis around values\n+  [#9590](https://github.com/rust-lang/rust-clippy/pull/9590)\n+* [`manual_assert`]: The suggestion now preserves comments\n+  [#9479](https://github.com/rust-lang/rust-clippy/pull/9479)\n+* [`redundant_allocation`]: The suggestion applicability is now marked `MaybeIncorrect` to\n+  avoid semantic changes\n+  [#9634](https://github.com/rust-lang/rust-clippy/pull/9634)\n+* [`assertions_on_result_states`]: The suggestion has been corrected, for cases where the\n+  `assert!` is not in a statement.\n+  [#9453](https://github.com/rust-lang/rust-clippy/pull/9453)\n+* [`nonminimal_bool`]: The suggestion no longer expands macros\n+  [#9457](https://github.com/rust-lang/rust-clippy/pull/9457)\n+* [`collapsible_match`]: Now specifies field names, when a struct is destructed\n+  [#9685](https://github.com/rust-lang/rust-clippy/pull/9685)\n+* [`unnecessary_cast`]: The suggestion now adds parenthesis for negative numbers\n+  [#9577](https://github.com/rust-lang/rust-clippy/pull/9577)\n+* [`redundant_closure`]: The suggestion now works for `impl FnMut` arguments\n+  [#9556](https://github.com/rust-lang/rust-clippy/pull/9556)\n+\n+### ICE Fixes\n+\n+* [`unnecessary_to_owned`]: Avoid ICEs in favor of false negatives if information is missing\n+  [#9505](https://github.com/rust-lang/rust-clippy/pull/9505)\n+* [`manual_range_contains`]: No longer ICEs on values behind references\n+  [#9627](https://github.com/rust-lang/rust-clippy/pull/9627)\n+* [`needless_pass_by_value`]: No longer ICEs on unsized `dyn Fn` arguments\n+  [#9531](https://github.com/rust-lang/rust-clippy/pull/9531)\n+* `*_interior_mutable_const` lints: no longer ICE on const unions containing `!Freeze` types\n+  [#9539](https://github.com/rust-lang/rust-clippy/pull/9539)\n+\n+### Others\n+\n+* Released `rustc_tools_util` for version information on `Crates.io`. (Further adjustments will\n+  not be published as part of this changelog)\n \n ## Rust 1.65\n \n-Current stable, released 2022-11-03\n+Released 2022-11-03\n \n [3c7e7dbc...b52fb523](https://github.com/rust-lang/rust-clippy/compare/3c7e7dbc...b52fb523)\n \n@@ -3875,6 +4045,7 @@ Released 2018-09-13\n [`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n+[`almost_complete_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n [`arithmetic_side_effects`]: https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\n@@ -4353,6 +4524,8 @@ Released 2018-09-13\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n+[`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n+[`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n [`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "f8cb4b7219c47467e6e41412b57f17733c02a46b", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -23,7 +23,7 @@ path = \"src/driver.rs\"\n [dependencies]\n clippy_lints = { path = \"clippy_lints\" }\n semver = \"1.0\"\n-rustc_tools_util = \"0.2.1\"\n+rustc_tools_util = \"0.3.0\"\n tempfile = { version = \"3.2\", optional = true }\n termize = \"0.1\"\n \n@@ -55,7 +55,7 @@ tokio = { version = \"1\", features = [\"io-util\"] }\n rustc-semver = \"1.1\"\n \n [build-dependencies]\n-rustc_tools_util = \"0.2.1\"\n+rustc_tools_util = \"0.3.0\"\n \n [features]\n deny-warnings = [\"clippy_lints/deny-warnings\"]"}, {"sha": "23867df8efe1dc0ce542f3e299df8326fe1ad56d", "filename": "book/src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n # Clippy\n \n-[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Aauto)\n+[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test%20(bors)/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test+(bors)%22+event%3Apush+branch%3Aauto)\n [![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](https://github.com/rust-lang/rust-clippy#license)\n \n A collection of lints to catch common mistakes and improve your"}, {"sha": "b79d09b0dd2d2776e98a4ae73de9c2884e722677", "filename": "build.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -3,17 +3,5 @@ fn main() {\n     println!(\"cargo:rustc-env=PROFILE={}\", std::env::var(\"PROFILE\").unwrap());\n     // Don't rebuild even if nothing changed\n     println!(\"cargo:rerun-if-changed=build.rs\");\n-    // forward git repo hashes we build at\n-    println!(\n-        \"cargo:rustc-env=GIT_HASH={}\",\n-        rustc_tools_util::get_commit_hash().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=COMMIT_DATE={}\",\n-        rustc_tools_util::get_commit_date().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=RUSTC_RELEASE_CHANNEL={}\",\n-        rustc_tools_util::get_channel()\n-    );\n+    rustc_tools_util::setup_version_info!();\n }"}, {"sha": "a9f69b1ba6300907b1ec7c4770a53ab98f9eceba", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "42e14b5cd945fc4647cb9fec2a789c303ddcccff", "filename": "clippy_lints/src/almost_complete_range.rs", "status": "renamed", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Falmost_complete_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Falmost_complete_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_range.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -10,8 +10,8 @@ use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for ranges which almost include the entire range of letters from 'a' to 'z', but\n-    /// don't because they're a half open range.\n+    /// Checks for ranges which almost include the entire range of letters from 'a' to 'z'\n+    /// or digits from '0' to '9', but don't because they're a half open range.\n     ///\n     /// ### Why is this bad?\n     /// This (`'a'..'z'`) is almost certainly a typo meant to include all letters.\n@@ -25,21 +25,21 @@ declare_clippy_lint! {\n     /// let _ = 'a'..='z';\n     /// ```\n     #[clippy::version = \"1.63.0\"]\n-    pub ALMOST_COMPLETE_LETTER_RANGE,\n+    pub ALMOST_COMPLETE_RANGE,\n     suspicious,\n-    \"almost complete letter range\"\n+    \"almost complete range\"\n }\n-impl_lint_pass!(AlmostCompleteLetterRange => [ALMOST_COMPLETE_LETTER_RANGE]);\n+impl_lint_pass!(AlmostCompleteRange => [ALMOST_COMPLETE_RANGE]);\n \n-pub struct AlmostCompleteLetterRange {\n+pub struct AlmostCompleteRange {\n     msrv: Msrv,\n }\n-impl AlmostCompleteLetterRange {\n+impl AlmostCompleteRange {\n     pub fn new(msrv: Msrv) -> Self {\n         Self { msrv }\n     }\n }\n-impl EarlyLintPass for AlmostCompleteLetterRange {\n+impl EarlyLintPass for AlmostCompleteRange {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if let ExprKind::Range(Some(start), Some(end), RangeLimits::HalfOpen) = &e.kind {\n             let ctxt = e.span.ctxt();\n@@ -87,14 +87,18 @@ fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg\n                 Ok(LitKind::Byte(b'A') | LitKind::Char('A')),\n                 Ok(LitKind::Byte(b'Z') | LitKind::Char('Z')),\n             )\n+            | (\n+                Ok(LitKind::Byte(b'0') | LitKind::Char('0')),\n+                Ok(LitKind::Byte(b'9') | LitKind::Char('9')),\n+            )\n         )\n         && !in_external_macro(cx.sess(), span)\n     {\n         span_lint_and_then(\n             cx,\n-            ALMOST_COMPLETE_LETTER_RANGE,\n+            ALMOST_COMPLETE_RANGE,\n             span,\n-            \"almost complete ascii letter range\",\n+            \"almost complete ascii range\",\n             |diag| {\n                 if let Some((span, sugg)) = sugg {\n                     diag.span_suggestion(", "previous_filename": "clippy_lints/src/almost_complete_letter_range.rs"}, {"sha": "91900542af8330e52d72655efb34be044bbfbbf5", "filename": "clippy_lints/src/box_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -30,7 +30,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x: Box<String> = Box::default();\n     /// ```\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub BOX_DEFAULT,\n     perf,\n     \"Using Box::new(T::default()) instead of Box::default()\""}, {"sha": "161e3a698e9ea6133ba0d6a86e2ad70983d7dbf8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -641,7 +641,7 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// let _: = 0_u64;\n     /// ```\n-    #[clippy::version = \"1.64.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub CAST_NAN_TO_INT,\n     suspicious,\n     \"casting a known floating-point NaN into an integer\""}, {"sha": "3cd7d1d7e722833645876976a615e1d5a7de123f", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -35,7 +35,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::utils::internal_lints::produce_ice::PRODUCE_ICE_INFO,\n     #[cfg(feature = \"internal\")]\n     crate::utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH_INFO,\n-    crate::almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE_INFO,\n+    crate::almost_complete_range::ALMOST_COMPLETE_RANGE_INFO,\n     crate::approx_const::APPROX_CONSTANT_INFO,\n     crate::as_conversions::AS_CONVERSIONS_INFO,\n     crate::asm_syntax::INLINE_ASM_X86_ATT_SYNTAX_INFO,\n@@ -525,6 +525,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::returns::NEEDLESS_RETURN_INFO,\n     crate::same_name_method::SAME_NAME_METHOD_INFO,\n     crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n+    crate::semicolon_block::SEMICOLON_INSIDE_BLOCK_INFO,\n+    crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_INFO,\n     crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n     crate::serde_api::SERDE_API_MISUSE_INFO,\n     crate::shadow::SHADOW_REUSE_INFO,"}, {"sha": "7b43d8ccc67d1fec92a5be0389860e9c8c6658a5", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1390,10 +1390,15 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Alias(ty::Projection, _) if ty.has_non_region_param() => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Alias(ty::Opaque, ..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n-                Position::ReborrowStable(precedence).into()\n+            ty::Alias(ty::Projection, _) if ty.has_non_region_param() => {\n+                TyPosition::new_deref_stable_for_result(precedence, ty)\n             },\n+            ty::Infer(_)\n+            | ty::Error(_)\n+            | ty::Bound(..)\n+            | ty::Alias(ty::Opaque, ..)\n+            | ty::Placeholder(_)\n+            | ty::Dynamic(..) => Position::ReborrowStable(precedence).into(),\n             ty::Adt(..) if ty.has_placeholders() || ty.has_opaque_types() => {\n                 Position::ReborrowStable(precedence).into()\n             },"}, {"sha": "cf3483d4c00b17134724bbc51eafcf6abb904aaa", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -513,10 +513,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: tcx.mk_trait_ref(\n-                        eq_trait_id,\n-                        [tcx.mk_param_from_def(param)],\n-                    ),\n+                    trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n                 }))))"}, {"sha": "1971cab64ef38a8f01890c1cd8394f7bd238af96", "filename": "clippy_lints/src/disallowed_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdisallowed_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fdisallowed_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_macros.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     ///     value: usize,\n     /// }\n     /// ```\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub DISALLOWED_MACROS,\n     style,\n     \"use of a disallowed macro\""}, {"sha": "69f7c152fc4af84ad6eb70ce628129babe33502f", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,8 @@ use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::is_diag_trait_item;\n use clippy_utils::macros::FormatParamKind::{Implicit, Named, NamedInline, Numbered, Starred};\n use clippy_utils::macros::{\n-    is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n+    is_assert_macro, is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam,\n+    FormatParamUsage,\n };\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n@@ -122,7 +123,7 @@ declare_clippy_lint! {\n     ///\n     /// If a format string contains a numbered argument that cannot be inlined\n     /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub UNINLINED_FORMAT_ARGS,\n     style,\n     \"using non-inlined variables in `format!` calls\"\n@@ -290,8 +291,9 @@ fn check_uninlined_args(\n     if args.format_string.span.from_expansion() {\n         return;\n     }\n-    if call_site.edition() < Edition2021 && is_panic(cx, def_id) {\n-        // panic! before 2021 edition considers a single string argument as non-format\n+    if call_site.edition() < Edition2021 && (is_panic(cx, def_id) || is_assert_macro(cx, def_id)) {\n+        // panic!, assert!, and debug_assert! before 2021 edition considers a single string argument as\n+        // non-format\n         return;\n     }\n "}, {"sha": "a92f7548ff254d16a2f51b255675650d139e8734", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::nested_filter::OnlyBodies;\n+use rustc_middle::{hir::nested_filter::OnlyBodies, ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, Symbol};\n@@ -78,6 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n             && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n+            && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {\n             span_lint_and_then(\n                 cx,"}, {"sha": "6e19343931ecb846bc9d9ece97efd37c9f27683b", "filename": "clippy_lints/src/implicit_saturating_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -31,7 +31,7 @@ declare_clippy_lint! {\n     ///\n     /// u = u.saturating_add(1);\n     /// ```\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub IMPLICIT_SATURATING_ADD,\n     style,\n     \"Perform saturating addition instead of implicitly checking max bound of data type\""}, {"sha": "eebfb753a0c5dfdefcb0e542676fcbf9c8faba6d", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,13 +1,13 @@\n //! lint on indexing and slicing operations\n \n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher;\n use rustc_ast::ast::RangeLimits;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -82,15 +82,29 @@ declare_clippy_lint! {\n     \"indexing/slicing usage\"\n }\n \n-declare_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n+impl_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n+\n+#[derive(Copy, Clone)]\n+pub struct IndexingSlicing {\n+    suppress_restriction_lint_in_const: bool,\n+}\n+\n+impl IndexingSlicing {\n+    pub fn new(suppress_restriction_lint_in_const: bool) -> Self {\n+        Self {\n+            suppress_restriction_lint_in_const,\n+        }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+        if self.suppress_restriction_lint_in_const && cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n             return;\n         }\n \n         if let ExprKind::Index(array, index) = &expr.kind {\n+            let note = \"the suggestion might not be applicable in constant blocks\";\n             let ty = cx.typeck_results().expr_ty(array).peel_refs();\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n@@ -141,7 +155,13 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", None, help_msg);\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", |diag| {\n+                    diag.help(help_msg);\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n+                });\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n@@ -156,14 +176,13 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     }\n                 }\n \n-                span_lint_and_help(\n-                    cx,\n-                    INDEXING_SLICING,\n-                    expr.span,\n-                    \"indexing may panic\",\n-                    None,\n-                    \"consider using `.get(n)` or `.get_mut(n)` instead\",\n-                );\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"indexing may panic\", |diag| {\n+                    diag.help(\"consider using `.get(n)` or `.get_mut(n)` instead\");\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n+                });\n             }\n         }\n     }"}, {"sha": "e88d1764a24896a23d168a5b01c2d908e851e804", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed};\n+use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed, peel_ref_operators};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{\n     def_id::DefId, AssocItemKind, BinOpKind, Expr, ExprKind, FnRetTy, ImplItem, ImplItemKind, ImplicitSelfKind, Item,\n-    ItemKind, Mutability, Node, TraitItemRef, TyKind,\n+    ItemKind, Mutability, Node, TraitItemRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n@@ -16,6 +16,7 @@ use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n     symbol::sym,\n };\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -428,16 +429,23 @@ fn check_len(\n fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Expr<'_>, op: &str) {\n     if (is_empty_array(lit2) || is_empty_string(lit2)) && has_is_empty(cx, lit1) {\n         let mut applicability = Applicability::MachineApplicable;\n+\n+        let lit1 = peel_ref_operators(cx, lit1);\n+        let mut lit_str = snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability);\n+\n+        // Wrap the expression in parentheses if it's a deref expression. Otherwise operator precedence will\n+        // cause the code to dereference boolean(won't compile).\n+        if let ExprKind::Unary(UnOp::Deref, _) = lit1.kind {\n+            lit_str = Cow::from(format!(\"({lit_str})\"));\n+        }\n+\n         span_lint_and_sugg(\n             cx,\n             COMPARISON_TO_EMPTY,\n             span,\n             \"comparison to empty slice\",\n             &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n-            format!(\n-                \"{op}{}.is_empty()\",\n-                snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n-            ),\n+            format!(\"{op}{lit_str}.is_empty()\"),\n             applicability,\n         );\n     }"}, {"sha": "39850d598038f1b3d15fce37e068528a3c9b1c8d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -66,7 +66,7 @@ mod declared_lints;\n mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-mod almost_complete_letter_range;\n+mod almost_complete_range;\n mod approx_const;\n mod as_conversions;\n mod asm_syntax;\n@@ -256,6 +256,7 @@ mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n mod self_named_constructors;\n+mod semicolon_block;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n@@ -507,9 +508,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     }\n \n     let arithmetic_side_effects_allowed = conf.arithmetic_side_effects_allowed.clone();\n+    let arithmetic_side_effects_allowed_binary = conf.arithmetic_side_effects_allowed_binary.clone();\n+    let arithmetic_side_effects_allowed_unary = conf.arithmetic_side_effects_allowed_unary.clone();\n     store.register_late_pass(move |_| {\n         Box::new(operators::arithmetic_side_effects::ArithmeticSideEffects::new(\n-            arithmetic_side_effects_allowed.clone(),\n+            arithmetic_side_effects_allowed\n+                .iter()\n+                .flat_map(|el| [[el.clone(), \"*\".to_string()], [\"*\".to_string(), el.clone()]])\n+                .chain(arithmetic_side_effects_allowed_binary.clone())\n+                .collect(),\n+            arithmetic_side_effects_allowed\n+                .iter()\n+                .chain(arithmetic_side_effects_allowed_unary.iter())\n+                .cloned()\n+                .collect(),\n         ))\n     });\n     store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));\n@@ -538,7 +550,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(needless_bool::NeedlessBool));\n     store.register_late_pass(|_| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|_| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|_| Box::new(misc::MiscLints));\n+    store.register_late_pass(|_| Box::<misc::LintPass>::default());\n     store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));\n@@ -561,6 +573,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n+    let suppress_restriction_lint_in_const = conf.suppress_restriction_lint_in_const;\n     store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv())));\n     store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n@@ -682,7 +695,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(inherent_impl::MultipleInherentImpl));\n     store.register_late_pass(|_| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n     store.register_late_pass(|_| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(|_| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(move |_| {\n+        Box::new(indexing_slicing::IndexingSlicing::new(\n+            suppress_restriction_lint_in_const,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(non_copy_const::NonCopyConst));\n     store.register_late_pass(|_| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n     store.register_late_pass(|_| Box::new(redundant_clone::RedundantClone));\n@@ -859,7 +876,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n-    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv())));\n+    store.register_early_pass(move || Box::new(almost_complete_range::AlmostCompleteRange::new(msrv())));\n     store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|_| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|_| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n@@ -884,6 +901,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n+    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "28ee24309cc467e57c6f374f8b0d86a314134d57", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -25,7 +25,6 @@ pub(super) struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,                  // context reference\n     states: HirIdMap<IncrementVisitorVarState>, // incremented variables\n     depth: u32,                                 // depth of conditional expressions\n-    done: bool,\n }\n \n impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n@@ -34,7 +33,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n             cx,\n             states: HirIdMap::default(),\n             depth: 0,\n-            done: false,\n         }\n     }\n \n@@ -51,10 +49,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if self.done {\n-            return;\n-        }\n-\n         // If node is a variable\n         if let Some(def_id) = path_to_local(expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n@@ -95,7 +89,9 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n             self.depth -= 1;\n         } else if let ExprKind::Continue(_) = expr.kind {\n-            self.done = true;\n+            // If we see a `continue` block, then we increment depth so that the IncrementVisitor\n+            // state will be set to DontWarn if we see the variable being modified anywhere afterwards.\n+            self.depth += 1;\n         } else {\n             walk_expr(self, expr);\n         }"}, {"sha": "4277455a3a21c8e096e0c36e588724d065372d99", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,7 @@ use crate::rustc_lint::LintContext;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{root_macro_call, FormatArgsExpn};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{peel_blocks_with_stmt, span_extract_comment, sugg};\n+use clippy_utils::{is_else_clause, peel_blocks_with_stmt, span_extract_comment, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -47,6 +47,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n             if cx.tcx.item_name(macro_call.def_id) == sym::panic;\n             if !cx.tcx.sess.source_map().is_multiline(cond.span);\n             if let Some(format_args) = FormatArgsExpn::find_nested(cx, then, macro_call.expn);\n+            // Don't change `else if foo { panic!(..) }` to `else { assert!(foo, ..) }` as it just\n+            // shuffles the condition around.\n+            // Should this have a config value?\n+            if !is_else_clause(cx.tcx, expr);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let format_args_snip = snippet_with_applicability(cx, format_args.inputs_span(), \"..\", &mut applicability);"}, {"sha": "d9ef7dffa020dbbd6d24715a35129fa72f88bcf2", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, source::snippet};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, source::snippet};\n+use rustc_ast::ast::RangeLimits;\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, PatKind, RangeEnd};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{def_id::DefId, sym};\n+use rustc_span::{def_id::DefId, sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -23,6 +24,10 @@ declare_clippy_lint! {\n     ///     assert!(matches!(b'X', b'A'..=b'Z'));\n     ///     assert!(matches!('2', '0'..='9'));\n     ///     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n+    ///\n+    ///     ('0'..='9').contains(&'0');\n+    ///     ('a'..='z').contains(&'a');\n+    ///     ('A'..='Z').contains(&'A');\n     /// }\n     /// ```\n     /// Use instead:\n@@ -32,6 +37,10 @@ declare_clippy_lint! {\n     ///     assert!(b'X'.is_ascii_uppercase());\n     ///     assert!('2'.is_ascii_digit());\n     ///     assert!('x'.is_ascii_alphabetic());\n+    ///\n+    ///     '0'.is_ascii_digit();\n+    ///     'a'.is_ascii_lowercase();\n+    ///     'A'.is_ascii_uppercase();\n     /// }\n     /// ```\n     #[clippy::version = \"1.66.0\"]\n@@ -75,47 +84,59 @@ impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n             return;\n         }\n \n-        let Some(macro_call) = root_macro_call(expr.span) else { return };\n-\n-        if is_matches_macro(cx, macro_call.def_id) {\n+        if let Some(macro_call) = root_macro_call(expr.span)\n+            && is_matches_macro(cx, macro_call.def_id) {\n             if let ExprKind::Match(recv, [arm, ..], _) = expr.kind {\n                 let range = check_pat(&arm.pat.kind);\n-\n-                if let Some(sugg) = match range {\n-                    CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n-                    CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n-                    CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n-                    CharRange::Digit => Some(\"is_ascii_digit\"),\n-                    CharRange::Otherwise => None,\n-                } {\n-                    let default_snip = \"..\";\n-                    // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n-                    // macro span, so we check applicability manually by comparing `recv` is not default.\n-                    let recv = snippet(cx, recv.span, default_snip);\n-\n-                    let applicability = if recv == default_snip {\n-                        Applicability::HasPlaceholders\n-                    } else {\n-                        Applicability::MachineApplicable\n-                    };\n-\n-                    span_lint_and_sugg(\n-                        cx,\n-                        MANUAL_IS_ASCII_CHECK,\n-                        macro_call.span,\n-                        \"manual check for common ascii range\",\n-                        \"try\",\n-                        format!(\"{recv}.{sugg}()\"),\n-                        applicability,\n-                    );\n-                }\n+                check_is_ascii(cx, macro_call.span, recv, &range);\n+            }\n+        } else if let ExprKind::MethodCall(path, receiver, [arg], ..) = expr.kind\n+            && path.ident.name == sym!(contains)\n+            && let Some(higher::Range { start: Some(start), end: Some(end), limits: RangeLimits::Closed })\n+            = higher::Range::hir(receiver) {\n+            let range = check_range(start, end);\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, e) = arg.kind {\n+                check_is_ascii(cx, expr.span, e, &range);\n+            } else {\n+                check_is_ascii(cx, expr.span, arg, &range);\n             }\n         }\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n+fn check_is_ascii(cx: &LateContext<'_>, span: Span, recv: &Expr<'_>, range: &CharRange) {\n+    if let Some(sugg) = match range {\n+        CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n+        CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n+        CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n+        CharRange::Digit => Some(\"is_ascii_digit\"),\n+        CharRange::Otherwise => None,\n+    } {\n+        let default_snip = \"..\";\n+        // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n+        // macro span, so we check applicability manually by comparing `recv` is not default.\n+        let recv = snippet(cx, recv.span, default_snip);\n+\n+        let applicability = if recv == default_snip {\n+            Applicability::HasPlaceholders\n+        } else {\n+            Applicability::MachineApplicable\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            MANUAL_IS_ASCII_CHECK,\n+            span,\n+            \"manual check for common ascii range\",\n+            \"try\",\n+            format!(\"{recv}.{sugg}()\"),\n+            applicability,\n+        );\n+    }\n+}\n+\n fn check_pat(pat_kind: &PatKind<'_>) -> CharRange {\n     match pat_kind {\n         PatKind::Or(pats) => {"}, {"sha": "9c6f8b43c078fbc77abd20dd5e7b374c47b6ffad", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -151,7 +151,12 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             } else {\n                 format!(\"{{ {sn_else} }}\")\n             };\n-            let sugg = format!(\"let {sn_pat} = {sn_expr} else {else_bl};\");\n+            let sn_bl = if matches!(pat.kind, PatKind::Or(..)) {\n+                format!(\"({sn_pat})\")\n+            } else {\n+                sn_pat.into_owned()\n+            };\n+            let sugg = format!(\"let {sn_bl} = {sn_expr} else {else_bl};\");\n             diag.span_suggestion(span, \"consider writing\", sugg, app);\n         },\n     );"}, {"sha": "72cdb9c17361676240c5d767cd34a67db9164dbd", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -70,7 +70,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualRetain {\n             && seg.args.is_none()\n             && let hir::ExprKind::MethodCall(_, target_expr, [], _) = &collect_expr.kind\n             && let Some(collect_def_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id)\n-            && match_def_path(cx, collect_def_id, &paths::CORE_ITER_COLLECT) {\n+            && cx.tcx.is_diagnostic_item(sym::iterator_collect_fn, collect_def_id)\n+        {\n             check_into_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n             check_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n             check_to_owned(cx, parent_expr, left_expr, target_expr, &self.msrv);"}, {"sha": "06ecbce4e70e940bed5d941b41be29198817ef6c", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::peel_mid_ty_refs;\n+use clippy_utils::ty::{implements_trait, peel_mid_ty_refs};\n use clippy_utils::{is_diag_item_method, is_diag_trait_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -19,6 +19,8 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n         let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did()));\n         if return_type == input_type;\n+        if let Some(clone_trait) = cx.tcx.lang_items().clone_trait();\n+        if implements_trait(cx, return_type, clone_trait, &[]);\n         then {\n             let mut app = Applicability::MachineApplicable;\n             let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;"}, {"sha": "561e4336593b047ed5f071e89c18f5ec6c82c69e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -3059,7 +3059,7 @@ declare_clippy_lint! {\n     /// let map: HashMap<u32, u32> = HashMap::new();\n     /// let values = map.values().collect::<Vec<_>>();\n     /// ```\n-    #[clippy::version = \"1.65.0\"]\n+    #[clippy::version = \"1.66.0\"]\n     pub ITER_KV_MAP,\n     complexity,\n     \"iterating on map using `iter` when `keys` or `values` would do\"\n@@ -3672,7 +3672,10 @@ impl Methods {\n                     no_effect_replace::check(cx, expr, arg1, arg2);\n \n                     // Check for repeated `str::replace` calls to perform `collapsible_str_replace` lint\n-                    if name == \"replace\" && let Some((\"replace\", ..)) = method_call(recv) {\n+                    if self.msrv.meets(msrvs::PATTERN_TRAIT_CHAR_ARRAY)\n+                        && name == \"replace\"\n+                        && let Some((\"replace\", ..)) = method_call(recv)\n+                    {\n                         collapsible_str_replace::check(cx, expr, arg1, arg2);\n                     }\n                 },"}, {"sha": "660b7049cce974df23d916d36959aae105e45139", "filename": "clippy_lints/src/methods/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{get_trait_def_id, match_def_path, paths};\n+use clippy_utils::{get_trait_def_id, is_expr_used_or_unified, match_def_path, paths};\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n@@ -19,6 +19,10 @@ pub(super) fn check<'tcx>(\n     // Get receiver type\n     let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n+    if is_expr_used_or_unified(cx.tcx, expr) {\n+        return;\n+    }\n+\n     if let Some(seek_trait_id) = get_trait_def_id(cx, &paths::STD_IO_SEEK) &&\n         implements_trait(cx, ty, seek_trait_id, &[]) &&\n         let ExprKind::Call(func, args1) = arg.kind &&"}, {"sha": "9f4beb92b9d2e77bc265e5f13eb3b050989fc77a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -9,12 +9,14 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n \n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_literal, iter_input_pats, last_path_segment, SpanlessEq};\n+use clippy_utils::{\n+    get_parent_expr, in_constant, is_integer_literal, is_no_std_crate, iter_input_pats, last_path_segment, SpanlessEq,\n+};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -120,14 +122,28 @@ declare_clippy_lint! {\n     \"using `0 as *{const, mut} T`\"\n }\n \n-declare_lint_pass!(MiscLints => [\n+pub struct LintPass {\n+    std_or_core: &'static str,\n+}\n+impl Default for LintPass {\n+    fn default() -> Self {\n+        Self { std_or_core: \"std\" }\n+    }\n+}\n+impl_lint_pass!(LintPass => [\n     TOPLEVEL_REF_ARG,\n     USED_UNDERSCORE_BINDING,\n     SHORT_CIRCUIT_STATEMENT,\n     ZERO_PTR,\n ]);\n \n-impl<'tcx> LateLintPass<'tcx> for MiscLints {\n+impl<'tcx> LateLintPass<'tcx> for LintPass {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n+        if is_no_std_crate(cx) {\n+            self.std_or_core = \"core\";\n+        }\n+    }\n+\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -231,7 +247,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Cast(e, ty) = expr.kind {\n-            check_cast(cx, expr.span, e, ty);\n+            self.check_cast(cx, expr.span, e, ty);\n             return;\n         }\n         if in_attributes_expansion(expr) || expr.span.is_desugaring(DesugaringKind::Await) {\n@@ -310,26 +326,28 @@ fn non_macro_local(cx: &LateContext<'_>, res: def::Res) -> bool {\n     }\n }\n \n-fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n-    if_chain! {\n-        if let TyKind::Ptr(ref mut_ty) = ty.kind;\n-        if is_integer_literal(e, 0);\n-        if !in_constant(cx, e.hir_id);\n-        then {\n-            let (msg, sugg_fn) = match mut_ty.mutbl {\n-                Mutability::Mut => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n-                Mutability::Not => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n-            };\n+impl LintPass {\n+    fn check_cast(&self, cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n+        if_chain! {\n+            if let TyKind::Ptr(ref mut_ty) = ty.kind;\n+            if is_integer_literal(e, 0);\n+            if !in_constant(cx, e.hir_id);\n+            then {\n+                let (msg, sugg_fn) = match mut_ty.mutbl {\n+                    Mutability::Mut => (\"`0 as *mut _` detected\", \"ptr::null_mut\"),\n+                    Mutability::Not => (\"`0 as *const _` detected\", \"ptr::null\"),\n+                };\n \n-            let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n-                (format!(\"{sugg_fn}()\"), Applicability::MachineApplicable)\n-            } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n-                (format!(\"{sugg_fn}::<{mut_ty_snip}>()\"), Applicability::MachineApplicable)\n-            } else {\n-                // `MaybeIncorrect` as type inference may not work with the suggested code\n-                (format!(\"{sugg_fn}()\"), Applicability::MaybeIncorrect)\n-            };\n-            span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n+                let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n+                    (format!(\"{}::{sugg_fn}()\", self.std_or_core), Applicability::MachineApplicable)\n+                } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n+                    (format!(\"{}::{sugg_fn}::<{mut_ty_snip}>()\", self.std_or_core), Applicability::MachineApplicable)\n+                } else {\n+                    // `MaybeIncorrect` as type inference may not work with the suggested code\n+                    (format!(\"{}::{sugg_fn}()\", self.std_or_core), Applicability::MaybeIncorrect)\n+                };\n+                span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n+            }\n         }\n     }\n }"}, {"sha": "4fbc8398e373443d5cc80c80eb2214933bfe786d", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -5,25 +5,26 @@ use clippy_utils::{\n     peel_hir_expr_refs,\n };\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n use rustc_session::impl_lint_pass;\n use rustc_span::source_map::{Span, Spanned};\n \n-const HARD_CODED_ALLOWED: &[&str] = &[\n-    \"&str\",\n-    \"f32\",\n-    \"f64\",\n-    \"std::num::Saturating\",\n-    \"std::num::Wrapping\",\n-    \"std::string::String\",\n+const HARD_CODED_ALLOWED_BINARY: &[[&str; 2]] = &[\n+    [\"f32\", \"f32\"],\n+    [\"f64\", \"f64\"],\n+    [\"std::num::Saturating\", \"std::num::Saturating\"],\n+    [\"std::num::Wrapping\", \"std::num::Wrapping\"],\n+    [\"std::string::String\", \"&str\"],\n ];\n+const HARD_CODED_ALLOWED_UNARY: &[&str] = &[\"f32\", \"f64\", \"std::num::Saturating\", \"std::num::Wrapping\"];\n \n #[derive(Debug)]\n pub struct ArithmeticSideEffects {\n-    allowed: FxHashSet<String>,\n+    allowed_binary: FxHashMap<String, FxHashSet<String>>,\n+    allowed_unary: FxHashSet<String>,\n     // Used to check whether expressions are constants, such as in enum discriminants and consts\n     const_span: Option<Span>,\n     expr_span: Option<Span>,\n@@ -33,19 +34,55 @@ impl_lint_pass!(ArithmeticSideEffects => [ARITHMETIC_SIDE_EFFECTS]);\n \n impl ArithmeticSideEffects {\n     #[must_use]\n-    pub fn new(mut allowed: FxHashSet<String>) -> Self {\n-        allowed.extend(HARD_CODED_ALLOWED.iter().copied().map(String::from));\n+    pub fn new(user_allowed_binary: Vec<[String; 2]>, user_allowed_unary: Vec<String>) -> Self {\n+        let mut allowed_binary: FxHashMap<String, FxHashSet<String>> = <_>::default();\n+        for [lhs, rhs] in user_allowed_binary.into_iter().chain(\n+            HARD_CODED_ALLOWED_BINARY\n+                .iter()\n+                .copied()\n+                .map(|[lhs, rhs]| [lhs.to_string(), rhs.to_string()]),\n+        ) {\n+            allowed_binary.entry(lhs).or_default().insert(rhs);\n+        }\n+        let allowed_unary = user_allowed_unary\n+            .into_iter()\n+            .chain(HARD_CODED_ALLOWED_UNARY.iter().copied().map(String::from))\n+            .collect();\n         Self {\n-            allowed,\n+            allowed_binary,\n+            allowed_unary,\n             const_span: None,\n             expr_span: None,\n         }\n     }\n \n-    /// Checks if the given `expr` has any of the inner `allowed` elements.\n-    fn is_allowed_ty(&self, ty: Ty<'_>) -> bool {\n-        self.allowed\n-            .contains(ty.to_string().split('<').next().unwrap_or_default())\n+    /// Checks if the lhs and the rhs types of a binary operation like \"addition\" or\n+    /// \"multiplication\" are present in the inner set of allowed types.\n+    fn has_allowed_binary(&self, lhs_ty: Ty<'_>, rhs_ty: Ty<'_>) -> bool {\n+        let lhs_ty_string = lhs_ty.to_string();\n+        let lhs_ty_string_elem = lhs_ty_string.split('<').next().unwrap_or_default();\n+        let rhs_ty_string = rhs_ty.to_string();\n+        let rhs_ty_string_elem = rhs_ty_string.split('<').next().unwrap_or_default();\n+        if let Some(rhs_from_specific) = self.allowed_binary.get(lhs_ty_string_elem)\n+            && {\n+                let rhs_has_allowed_ty = rhs_from_specific.contains(rhs_ty_string_elem);\n+                rhs_has_allowed_ty || rhs_from_specific.contains(\"*\")\n+            }\n+        {\n+           true\n+        } else if let Some(rhs_from_glob) = self.allowed_binary.get(\"*\") {\n+            rhs_from_glob.contains(rhs_ty_string_elem)\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Checks if the type of an unary operation like \"negation\" is present in the inner set of\n+    /// allowed types.\n+    fn has_allowed_unary(&self, ty: Ty<'_>) -> bool {\n+        let ty_string = ty.to_string();\n+        let ty_string_elem = ty_string.split('<').next().unwrap_or_default();\n+        self.allowed_unary.contains(ty_string_elem)\n     }\n \n     // For example, 8i32 or &i64::MAX.\n@@ -97,8 +134,7 @@ impl ArithmeticSideEffects {\n         };\n         let lhs_ty = cx.typeck_results().expr_ty(lhs);\n         let rhs_ty = cx.typeck_results().expr_ty(rhs);\n-        let lhs_and_rhs_have_the_same_ty = lhs_ty == rhs_ty;\n-        if lhs_and_rhs_have_the_same_ty && self.is_allowed_ty(lhs_ty) && self.is_allowed_ty(rhs_ty) {\n+        if self.has_allowed_binary(lhs_ty, rhs_ty) {\n             return;\n         }\n         let has_valid_op = if Self::is_integral(lhs_ty) && Self::is_integral(rhs_ty) {\n@@ -137,7 +173,7 @@ impl ArithmeticSideEffects {\n             return;\n         }\n         let ty = cx.typeck_results().expr_ty(expr).peel_refs();\n-        if self.is_allowed_ty(ty) {\n+        if self.has_allowed_unary(ty) {\n             return;\n         }\n         let actual_un_expr = peel_hir_expr_refs(un_expr).0;"}, {"sha": "14a12da862efeb68d4f151077dac7859d2ecb9db", "filename": "clippy_lints/src/operators/identity_op.rs", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::consts::{constant_full_int, constant_simple, Constant, FullInt};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{clip, unsext};\n+use clippy_utils::{clip, peel_hir_expr_refs, unsext};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, Node};\n use rustc_lint::LateContext;\n@@ -20,20 +20,76 @@ pub(crate) fn check<'tcx>(\n     if !is_allowed(cx, op, left, right) {\n         match op {\n             BinOpKind::Add | BinOpKind::BitOr | BinOpKind::BitXor => {\n-                check_op(cx, left, 0, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                check_op(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n+                check_op(\n+                    cx,\n+                    left,\n+                    0,\n+                    expr.span,\n+                    peel_hir_expr_refs(right).0.span,\n+                    needs_parenthesis(cx, expr, right),\n+                );\n+                check_op(\n+                    cx,\n+                    right,\n+                    0,\n+                    expr.span,\n+                    peel_hir_expr_refs(left).0.span,\n+                    Parens::Unneeded,\n+                );\n             },\n             BinOpKind::Shl | BinOpKind::Shr | BinOpKind::Sub => {\n-                check_op(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n+                check_op(\n+                    cx,\n+                    right,\n+                    0,\n+                    expr.span,\n+                    peel_hir_expr_refs(left).0.span,\n+                    Parens::Unneeded,\n+                );\n             },\n             BinOpKind::Mul => {\n-                check_op(cx, left, 1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                check_op(cx, right, 1, expr.span, left.span, Parens::Unneeded);\n+                check_op(\n+                    cx,\n+                    left,\n+                    1,\n+                    expr.span,\n+                    peel_hir_expr_refs(right).0.span,\n+                    needs_parenthesis(cx, expr, right),\n+                );\n+                check_op(\n+                    cx,\n+                    right,\n+                    1,\n+                    expr.span,\n+                    peel_hir_expr_refs(left).0.span,\n+                    Parens::Unneeded,\n+                );\n             },\n-            BinOpKind::Div => check_op(cx, right, 1, expr.span, left.span, Parens::Unneeded),\n+            BinOpKind::Div => check_op(\n+                cx,\n+                right,\n+                1,\n+                expr.span,\n+                peel_hir_expr_refs(left).0.span,\n+                Parens::Unneeded,\n+            ),\n             BinOpKind::BitAnd => {\n-                check_op(cx, left, -1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                check_op(cx, right, -1, expr.span, left.span, Parens::Unneeded);\n+                check_op(\n+                    cx,\n+                    left,\n+                    -1,\n+                    expr.span,\n+                    peel_hir_expr_refs(right).0.span,\n+                    needs_parenthesis(cx, expr, right),\n+                );\n+                check_op(\n+                    cx,\n+                    right,\n+                    -1,\n+                    expr.span,\n+                    peel_hir_expr_refs(left).0.span,\n+                    Parens::Unneeded,\n+                );\n             },\n             BinOpKind::Rem => check_remainder(cx, left, right, expr.span, left.span),\n             _ => (),"}, {"sha": "eba230da6c39b772bb90e600f07d9f2df3fcc9b5", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -90,9 +90,6 @@ declare_clippy_lint! {\n     /// use rust_decimal::Decimal;\n     /// let _n = Decimal::MAX + Decimal::MAX;\n     /// ```\n-    ///\n-    /// ### Allowed types\n-    /// Custom allowed types can be specified through the \"arithmetic-side-effects-allowed\" filter.\n     #[clippy::version = \"1.64.0\"]\n     pub ARITHMETIC_SIDE_EFFECTS,\n     restriction,"}, {"sha": "c2a8db7df038b9355ca6abf1e9833436688ce033", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -84,7 +84,11 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n \n fn is_not_macro_export<'tcx>(item: &'tcx Item<'tcx>) -> bool {\n     if let ItemKind::Use(path, _) = item.kind {\n-        if path.res.iter().all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _))) {\n+        if path\n+            .res\n+            .iter()\n+            .all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _)))\n+        {\n             return false;\n         }\n     } else if let ItemKind::Macro(..) = item.kind {"}, {"sha": "41f991a967bfd9929b025657ef21c8fc0aa573ca", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -66,7 +66,7 @@ impl RedundantStaticLifetimes {\n                         TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n                             if lifetime.ident.name == rustc_span::symbol::kw::StaticLifetime {\n                                 let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n-                                let sugg = format!(\"&{snip}\");\n+                                let sugg = format!(\"&{}{snip}\", borrow_type.mutbl.prefix_str());\n                                 span_lint_and_then(\n                                     cx,\n                                     REDUNDANT_STATIC_LIFETIMES,"}, {"sha": "72c25592609ba77191f7877134b6c8bff1df90d8", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,6 +2,7 @@\n \n #[rustfmt::skip]\n pub static RENAMED_LINTS: &[(&str, &str)] = &[\n+    (\"clippy::almost_complete_letter_range\", \"clippy::almost_complete_range\"),\n     (\"clippy::blacklisted_name\", \"clippy::disallowed_names\"),\n     (\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\"),\n     (\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\"),"}, {"sha": "8f1d1490e1f085689ffb41be7407acbcd01e2bda", "filename": "clippy_lints/src/semicolon_block.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,137 @@\n+use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Suggests moving the semicolon after a block to the inside of the block, after its last\n+    /// expression.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine\n+    /// and this lint suggests inside the block.\n+    /// Take a look at `semicolon_outside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_INSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon inside the block\"\n+}\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Suggests moving the semicolon from a block's final expression outside of the block.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine\n+    /// and this lint suggests outside the block.\n+    /// Take a look at `semicolon_inside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_OUTSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon outside the block\"\n+}\n+declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+impl LateLintPass<'_> for SemicolonBlock {\n+    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n+        match stmt.kind {\n+            StmtKind::Expr(Expr {\n+                kind: ExprKind::Block(block, _),\n+                ..\n+            }) if !block.span.from_expansion() => {\n+                let Block {\n+                    expr: None,\n+                    stmts: [.., stmt],\n+                    ..\n+                } = block else { return };\n+                let &Stmt {\n+                    kind: StmtKind::Semi(expr),\n+                    span,\n+                    ..\n+                } = stmt else { return };\n+                semicolon_outside_block(cx, block, expr, span);\n+            },\n+            StmtKind::Semi(Expr {\n+                kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n+                ..\n+            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+    let insert_span = tail.span.source_callsite().shrink_to_hi();\n+    let remove_span = semi_span.with_lo(block.span.hi());\n+\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_INSIDE_BLOCK,\n+        semi_span,\n+        \"consider moving the `;` inside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n+}\n+\n+fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n+    let insert_span = block.span.with_lo(block.span.hi());\n+    // account for macro calls\n+    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_OUTSIDE_BLOCK,\n+        block.span,\n+        \"consider moving the `;` outside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n+}"}, {"sha": "bc18cad6d381b0cb165d46e6bd000b7c8305d637", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_lang_item;\n+use clippy_utils::{get_expr_use_or_unification_node, peel_blocks, SpanlessEq};\n use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n-use clippy_utils::{peel_blocks, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, Node, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n@@ -249,6 +249,7 @@ const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS_BYTES]);\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use rustc_ast::LitKind;\n \n@@ -316,18 +317,27 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n                     && lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT\n                     && !receiver.span.from_expansion()\n                 {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        STRING_LIT_AS_BYTES,\n-                        e.span,\n-                        \"calling `as_bytes()` on a string literal\",\n-                        \"consider using a byte string literal instead\",\n-                        format!(\n-                            \"b{}\",\n-                            snippet_with_applicability(cx, receiver.span, r#\"\"foo\"\"#, &mut applicability)\n-                        ),\n-                        applicability,\n-                    );\n+                    if let Some((parent, id)) = get_expr_use_or_unification_node(cx.tcx, e)\n+                        && let Node::Expr(parent) = parent\n+                        && let ExprKind::Match(scrutinee, ..) = parent.kind\n+                        && scrutinee.hir_id == id\n+                    {\n+                        // Don't lint. Byte strings produce `&[u8; N]` whereas `as_bytes()` produces\n+                        // `&[u8]`. This change would prevent matching with different sized slices.\n+                    } else {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            STRING_LIT_AS_BYTES,\n+                            e.span,\n+                            \"calling `as_bytes()` on a string literal\",\n+                            \"consider using a byte string literal instead\",\n+                            format!(\n+                                \"b{}\",\n+                                snippet_with_applicability(cx, receiver.span, r#\"\"foo\"\"#, &mut applicability)\n+                            ),\n+                            applicability,\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "3e7d0028c0fbd97df2a73e40300db80ac39606fe", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -205,10 +205,49 @@ macro_rules! define_Conf {\n }\n \n define_Conf! {\n-    /// Lint: Arithmetic.\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n     ///\n-    /// Suppress checking of the passed type names.\n+    /// Suppress checking of the passed type names in all types of operations.\n+    ///\n+    /// If a specific operation is desired, consider using `arithmetic_side_effects_allowed_binary` or `arithmetic_side_effects_allowed_unary` instead.\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed = [\"SomeType\", \"AnotherType\"]\n+    /// ```\n+    ///\n+    /// #### Noteworthy\n+    ///\n+    /// A type, say `SomeType`, listed in this configuration has the same behavior of `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n     (arithmetic_side_effects_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n+    ///\n+    /// Suppress checking of the passed type pair names in binary operations like addition or\n+    /// multiplication.\n+    ///\n+    /// Supports the \"*\" wildcard to indicate that a certain type won't trigger the lint regardless\n+    /// of the involved counterpart. For example, `[\"SomeType\", \"*\"]` or `[\"*\", \"AnotherType\"]`.\n+    ///\n+    /// Pairs are asymmetric, which means that `[\"SomeType\", \"AnotherType\"]` is not the same as\n+    /// `[\"AnotherType\", \"SomeType\"]`.\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed-binary = [[\"SomeType\" , \"f32\"], [\"AnotherType\", \"*\"]]\n+    /// ```\n+    (arithmetic_side_effects_allowed_binary: Vec<[String; 2]> = <_>::default()),\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n+    ///\n+    /// Suppress checking of the passed type names in unary operations like \"negation\" (`-`).\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n+    /// ```\n+    (arithmetic_side_effects_allowed_unary: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n     /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n@@ -406,6 +445,14 @@ define_Conf! {\n     ///\n     /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n     (allow_mixed_uninlined_format_args: bool = true),\n+    /// Lint: INDEXING_SLICING\n+    ///\n+    /// Whether to suppress a restriction lint in constant code. In same\n+    /// cases the restructured operation might not be unavoidable, as the\n+    /// suggested counterparts are unavailable in constant code. This\n+    /// configuration will cause restriction lints to trigger even\n+    /// if no suggestion can be made.\n+    (suppress_restriction_lint_in_const: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "9afe02c1e47da00cadc26e240f6e4d34d6fe99ae", "filename": "clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::Item;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, fast_reject::SimplifiedTypeGen, FloatTy};\n+use rustc_middle::ty::{self, fast_reject::SimplifiedType, FloatTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n \n@@ -73,10 +73,10 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n     let lang_items = cx.tcx.lang_items();\n     // This list isn't complete, but good enough for our current list of paths.\n     let incoherent_impls = [\n-        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F32),\n-        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F64),\n-        SimplifiedTypeGen::SliceSimplifiedType,\n-        SimplifiedTypeGen::StrSimplifiedType,\n+        SimplifiedType::FloatSimplifiedType(FloatTy::F32),\n+        SimplifiedType::FloatSimplifiedType(FloatTy::F64),\n+        SimplifiedType::SliceSimplifiedType,\n+        SimplifiedType::StrSimplifiedType,\n     ]\n     .iter()\n     .flat_map(|&ty| cx.tcx.incoherent_impls(ty).iter().copied());"}, {"sha": "ac6a566b9cd3ae5f208e9c4758a71c79f5867b50", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "43e2d1ec826c2343b9d6dea43c11ae3fe3789917", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -196,7 +196,7 @@ pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(id).def_id;\n     match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n-            kind: ItemKind::Const(..) | ItemKind::Static(..),\n+            kind: ItemKind::Const(..) | ItemKind::Static(..) | ItemKind::Enum(..),\n             ..\n         })\n         | Node::TraitItem(&TraitItem {"}, {"sha": "77c5f1155423c4a7a4399694988e3b56442bae5a", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -208,6 +208,12 @@ pub fn is_panic(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     )\n }\n \n+/// Is `def_id` of `assert!` or `debug_assert!`\n+pub fn is_assert_macro(cx: &LateContext<'_>, def_id: DefId) -> bool {\n+    let Some(name) = cx.tcx.get_diagnostic_name(def_id) else { return false };\n+    matches!(name, sym::assert_macro | sym::debug_assert_macro)\n+}\n+\n pub enum PanicExpn<'a> {\n     /// No arguments - `panic!()`\n     Empty,"}, {"sha": "ba5bc9c3135daa8ca34a9eddf552dafb332af796", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -21,7 +21,7 @@ macro_rules! msrv_aliases {\n msrv_aliases! {\n     1,65,0 { LET_ELSE }\n     1,62,0 { BOOL_THEN_SOME }\n-    1,58,0 { FORMAT_ARGS_CAPTURE }\n+    1,58,0 { FORMAT_ARGS_CAPTURE, PATTERN_TRAIT_CHAR_ARRAY }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN, ARRAY_INTO_ITERATOR }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, SEEK_FROM_CURRENT, UNSIGNED_ABS }"}, {"sha": "9ca50105ae57d0e93c96f7b48d1030bb10011c85", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -20,7 +20,6 @@ pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n pub const BTREESET_ITER: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\", \"iter\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n-pub const CORE_ITER_COLLECT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"collect\"];\n pub const CORE_ITER_CLONED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"cloned\"];\n pub const CORE_ITER_COPIED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"copied\"];\n pub const CORE_ITER_FILTER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"filter\"];"}, {"sha": "e5d7da682813c16d4883f2985d0963c03eb03a7c", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -301,10 +301,7 @@ fn check_terminator<'tcx>(\n             check_operand(tcx, value, span, body)\n         },\n \n-        TerminatorKind::SwitchInt {\n-            discr,\n-            targets: _,\n-        } => check_operand(tcx, discr, span, body),\n+        TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n \n         TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {"}, {"sha": "2773da70d7880c2b387b96bfebabe33963051adb", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -16,8 +16,8 @@ use rustc_infer::infer::{\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n-    AliasTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -30,7 +30,7 @@ use std::iter;\n \n use crate::{match_def_path, path_res, paths};\n \n-// Checks if the given type implements copy.\n+/// Checks if the given type implements copy.\n pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.is_copy_modulo_regions(cx.tcx, cx.param_env)\n }\n@@ -69,50 +69,66 @@ pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n /// This method also recurses into opaque type predicates, so call it with `impl Trait<U>` and `U`\n /// will also return `true`.\n pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, needle: Ty<'tcx>) -> bool {\n-    ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => {\n-            if inner_ty == needle {\n-                return true;\n-            }\n+    fn contains_ty_adt_constructor_opaque_inner<'tcx>(\n+        cx: &LateContext<'tcx>,\n+        ty: Ty<'tcx>,\n+        needle: Ty<'tcx>,\n+        seen: &mut FxHashSet<DefId>,\n+    ) -> bool {\n+        ty.walk().any(|inner| match inner.unpack() {\n+            GenericArgKind::Type(inner_ty) => {\n+                if inner_ty == needle {\n+                    return true;\n+                }\n \n-            if inner_ty.ty_adt_def() == needle.ty_adt_def() {\n-                return true;\n-            }\n+                if inner_ty.ty_adt_def() == needle.ty_adt_def() {\n+                    return true;\n+                }\n \n-            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *inner_ty.kind() {\n-                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    match predicate.kind().skip_binder() {\n-                        // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n-                        // and check substituions to find `U`.\n-                        ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n-                            if trait_predicate\n-                                .trait_ref\n-                                .substs\n-                                .types()\n-                                .skip(1) // Skip the implicit `Self` generic parameter\n-                                .any(|ty| contains_ty_adt_constructor_opaque(cx, ty, needle))\n-                            {\n-                                return true;\n-                            }\n-                        },\n-                        // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n-                        // so we check the term for `U`.\n-                        ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate)) => {\n-                            if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n-                                if contains_ty_adt_constructor_opaque(cx, ty, needle) {\n+                if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *inner_ty.kind() {\n+                    if !seen.insert(def_id) {\n+                        return false;\n+                    }\n+\n+                    for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                        match predicate.kind().skip_binder() {\n+                            // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n+                            // and check substituions to find `U`.\n+                            ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n+                                if trait_predicate\n+                                    .trait_ref\n+                                    .substs\n+                                    .types()\n+                                    .skip(1) // Skip the implicit `Self` generic parameter\n+                                    .any(|ty| contains_ty_adt_constructor_opaque_inner(cx, ty, needle, seen))\n+                                {\n                                     return true;\n                                 }\n-                            };\n-                        },\n-                        _ => (),\n+                            },\n+                            // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n+                            // so we check the term for `U`.\n+                            ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate)) => {\n+                                if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n+                                    if contains_ty_adt_constructor_opaque_inner(cx, ty, needle, seen) {\n+                                        return true;\n+                                    }\n+                                };\n+                            },\n+                            _ => (),\n+                        }\n                     }\n                 }\n-            }\n \n-            false\n-        },\n-        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-    })\n+                false\n+            },\n+            GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+        })\n+    }\n+\n+    // A hash set to ensure that the same opaque type (`impl Trait` in RPIT or TAIT) is not\n+    // visited twice.\n+    let mut seen = FxHashSet::default();\n+    contains_ty_adt_constructor_opaque_inner(cx, ty, needle, &mut seen)\n }\n \n /// Resolves `<T as Iterator>::Item` for `T`\n@@ -631,7 +647,9 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n+            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id))\n+        },\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -685,8 +703,7 @@ fn sig_from_bounds<'tcx>(\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.def_id) == lang_items.fn_once_output()\n-                    && p.projection_ty.self_ty() == ty =>\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output() && p.projection_ty.self_ty() == ty =>\n             {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -1039,10 +1056,7 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(tcx.mk_alias_ty(\n-            assoc_item.def_id,\n-            substs,\n-        ))\n+        Some(tcx.mk_alias_ty(assoc_item.def_id, substs))\n     }\n     helper(\n         tcx,"}, {"sha": "c01e1062cb5445c2557a08692ff35eb79212db2d", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "8e21cef32abb63ff135e93acb27ef0d644e97de9", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-12-01\"\n+channel = \"nightly-2022-12-17\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "1b351da2e7bceecb8f1985da3ad0a2cfe772e563", "filename": "rustc_tools_util/CHANGELOG.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2FCHANGELOG.md?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,6 @@\n+# Changelog\n+\n+## Version 0.3.0\n+\n+* Added `setup_version_info!();` macro for automated scripts.\n+* `get_version_info!()` no longer requires the user to import `rustc_tools_util::VersionInfo` and `std::env`"}, {"sha": "877049ae7d0ebd92d8d11d95698f89ded3698a93", "filename": "rustc_tools_util/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2FCargo.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"rustc_tools_util\"\n-version = \"0.2.1\"\n+version = \"0.3.0\"\n description = \"small helper to generate version information for git packages\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "eefc661f96352e04d182fe016702674df122880f", "filename": "rustc_tools_util/README.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2FREADME.md?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -13,43 +13,39 @@ build = \"build.rs\"\n List rustc_tools_util as regular AND build dependency.\n ````toml\n [dependencies]\n-rustc_tools_util = \"0.2.1\"\n+rustc_tools_util = \"0.3.0\"\n \n [build-dependencies]\n-rustc_tools_util = \"0.2.1\"\n+rustc_tools_util = \"0.3.0\"\n ````\n \n In `build.rs`, generate the data in your `main()`\n-````rust\n+\n+```rust\n fn main() {\n-    println!(\n-        \"cargo:rustc-env=GIT_HASH={}\",\n-        rustc_tools_util::get_commit_hash().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=COMMIT_DATE={}\",\n-        rustc_tools_util::get_commit_date().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=RUSTC_RELEASE_CHANNEL={}\",\n-        rustc_tools_util::get_channel().unwrap_or_default()\n-    );\n+    rustc_tools_util::setup_version_info!();\n }\n-\n-````\n+```\n \n Use the version information in your main.rs\n-````rust\n-use rustc_tools_util::*;\n \n+```rust\n fn show_version() {\n     let version_info = rustc_tools_util::get_version_info!();\n     println!(\"{}\", version_info);\n }\n-````\n+```\n+\n This gives the following output in clippy:\n-`clippy 0.0.212 (a416c5e 2018-12-14)`\n+`clippy 0.1.66 (a28f3c8 2022-11-20)`\n+\n+## Repository\n+\n+This project is part of the rust-lang/rust-clippy repository. The source code\n+can be found under `./rustc_tools_util/`.\n \n+The changelog for `rustc_tools_util` is available under:\n+[`rustc_tools_util/CHANGELOG.md`](https://github.com/rust-lang/rust-clippy/blob/master/rustc_tools_util/CHANGELOG.md)\n \n ## License\n "}, {"sha": "4c1d8c3733df61b97582e3780118d9b2446b8de7", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,20 +1,20 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n-use std::env;\n-\n+/// This macro creates the version string during compilation from the\n+/// current environment\n #[macro_export]\n macro_rules! get_version_info {\n     () => {{\n-        let major = env!(\"CARGO_PKG_VERSION_MAJOR\").parse::<u8>().unwrap();\n-        let minor = env!(\"CARGO_PKG_VERSION_MINOR\").parse::<u8>().unwrap();\n-        let patch = env!(\"CARGO_PKG_VERSION_PATCH\").parse::<u16>().unwrap();\n-        let crate_name = String::from(env!(\"CARGO_PKG_NAME\"));\n+        let major = std::env!(\"CARGO_PKG_VERSION_MAJOR\").parse::<u8>().unwrap();\n+        let minor = std::env!(\"CARGO_PKG_VERSION_MINOR\").parse::<u8>().unwrap();\n+        let patch = std::env!(\"CARGO_PKG_VERSION_PATCH\").parse::<u16>().unwrap();\n+        let crate_name = String::from(std::env!(\"CARGO_PKG_NAME\"));\n \n-        let host_compiler = option_env!(\"RUSTC_RELEASE_CHANNEL\").map(str::to_string);\n-        let commit_hash = option_env!(\"GIT_HASH\").map(str::to_string);\n-        let commit_date = option_env!(\"COMMIT_DATE\").map(str::to_string);\n+        let host_compiler = std::option_env!(\"RUSTC_RELEASE_CHANNEL\").map(str::to_string);\n+        let commit_hash = std::option_env!(\"GIT_HASH\").map(str::to_string);\n+        let commit_date = std::option_env!(\"COMMIT_DATE\").map(str::to_string);\n \n-        VersionInfo {\n+        $crate::VersionInfo {\n             major,\n             minor,\n             patch,\n@@ -26,6 +26,24 @@ macro_rules! get_version_info {\n     }};\n }\n \n+/// This macro can be used in `build.rs` to automatically set the needed\n+/// environment values, namely `GIT_HASH`, `COMMIT_DATE` and\n+/// `RUSTC_RELEASE_CHANNEL`\n+#[macro_export]\n+macro_rules! setup_version_info {\n+    () => {{\n+        println!(\n+            \"cargo:rustc-env=GIT_HASH={}\",\n+            $crate::get_commit_hash().unwrap_or_default()\n+        );\n+        println!(\n+            \"cargo:rustc-env=COMMIT_DATE={}\",\n+            $crate::get_commit_date().unwrap_or_default()\n+        );\n+        println!(\"cargo:rustc-env=RUSTC_RELEASE_CHANNEL={}\", $crate::get_channel());\n+    }};\n+}\n+\n // some code taken and adapted from RLS and cargo\n pub struct VersionInfo {\n     pub major: u8,\n@@ -101,7 +119,7 @@ pub fn get_commit_date() -> Option<String> {\n \n #[must_use]\n pub fn get_channel() -> String {\n-    match env::var(\"CFG_RELEASE_CHANNEL\") {\n+    match std::env::var(\"CFG_RELEASE_CHANNEL\") {\n         Ok(channel) => channel,\n         Err(_) => {\n             // if that failed, try to ask rustc -V, do some parsing and find out\n@@ -136,8 +154,8 @@ mod test {\n     fn test_struct_local() {\n         let vi = get_version_info!();\n         assert_eq!(vi.major, 0);\n-        assert_eq!(vi.minor, 2);\n-        assert_eq!(vi.patch, 1);\n+        assert_eq!(vi.minor, 3);\n+        assert_eq!(vi.patch, 0);\n         assert_eq!(vi.crate_name, \"rustc_tools_util\");\n         // hard to make positive tests for these since they will always change\n         assert!(vi.commit_hash.is_none());\n@@ -147,7 +165,7 @@ mod test {\n     #[test]\n     fn test_display_local() {\n         let vi = get_version_info!();\n-        assert_eq!(vi.to_string(), \"rustc_tools_util 0.2.1\");\n+        assert_eq!(vi.to_string(), \"rustc_tools_util 0.3.0\");\n     }\n \n     #[test]\n@@ -156,7 +174,7 @@ mod test {\n         let s = format!(\"{vi:?}\");\n         assert_eq!(\n             s,\n-            \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 2, patch: 1 }\"\n+            \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 3, patch: 0 }\"\n         );\n     }\n }"}, {"sha": "bcc096c570e1b7013524d3b20048903cc3d85780", "filename": "src/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -19,7 +19,6 @@ extern crate rustc_span;\n use rustc_interface::interface;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n-use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n use std::env;"}, {"sha": "7a78b32620d0bf41301fa50cf781b6a5c658bb45", "filename": "src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,6 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use rustc_tools_util::VersionInfo;\n use std::env;\n use std::path::PathBuf;\n use std::process::{self, Command};"}, {"sha": "3ca45404e44bb88290ad846bccca89f21b88f6a7", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -7,14 +7,6 @@ LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n-   |\n-LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `sym::deref_method`\n-\n error: hardcoded path to a language item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n    |\n@@ -23,5 +15,13 @@ LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"]\n    |\n    = help: convert all references to use `LangItem::DerefMut`\n \n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n+   |\n+LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `sym::deref_method`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "36db9e54a228854ac09f5953faedbc07e6ee90ec", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/arithmetic_side_effects_allowed.rs", "status": "modified", "additions": 104, "deletions": 19, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,32 +2,117 @@\n \n use core::ops::{Add, Neg};\n \n-#[derive(Clone, Copy)]\n-struct Point {\n-    x: i32,\n-    y: i32,\n+macro_rules! create {\n+    ($name:ident) => {\n+        #[allow(clippy::arithmetic_side_effects)]\n+        #[derive(Clone, Copy)]\n+        struct $name;\n+\n+        impl Add<$name> for $name {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<i32> for $name {\n+            type Output = $name;\n+            fn add(self, other: i32) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<$name> for i32 {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<i64> for $name {\n+            type Output = $name;\n+            fn add(self, other: i64) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<$name> for i64 {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Neg for $name {\n+            type Output = $name;\n+            fn neg(self) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+    };\n }\n \n-impl Add for Point {\n-    type Output = Self;\n+create!(Foo);\n+create!(Bar);\n+create!(Baz);\n+create!(OutOfNames);\n \n-    fn add(self, other: Self) -> Self {\n-        todo!()\n-    }\n+fn lhs_and_rhs_are_equal() {\n+    // is explicitly on the list\n+    let _ = OutOfNames + OutOfNames;\n+    // is explicitly on the list\n+    let _ = Foo + Foo;\n+    // is implicitly on the list\n+    let _ = Bar + Bar;\n+    // not on the list\n+    let _ = Baz + Baz;\n }\n \n-impl Neg for Point {\n-    type Output = Self;\n+fn lhs_is_different() {\n+    // is explicitly on the list\n+    let _ = 1i32 + OutOfNames;\n+    // is explicitly on the list\n+    let _ = 1i32 + Foo;\n+    // is implicitly on the list\n+    let _ = 1i32 + Bar;\n+    // not on the list\n+    let _ = 1i32 + Baz;\n \n-    fn neg(self) -> Self::Output {\n-        todo!()\n-    }\n+    // not on the list\n+    let _ = 1i64 + Foo;\n+    // is implicitly on the list\n+    let _ = 1i64 + Bar;\n+    // not on the list\n+    let _ = 1i64 + Baz;\n }\n \n-fn main() {\n-    let _ = Point { x: 1, y: 0 } + Point { x: 2, y: 3 };\n+fn rhs_is_different() {\n+    // is explicitly on the list\n+    let _ = OutOfNames + 1i32;\n+    // is explicitly on the list\n+    let _ = Foo + 1i32;\n+    // is implicitly on the list\n+    let _ = Bar + 1i32;\n+    // not on the list\n+    let _ = Baz + 1i32;\n+\n+    // not on the list\n+    let _ = Foo + 1i64;\n+    // is implicitly on the list\n+    let _ = Bar + 1i64;\n+    // not on the list\n+    let _ = Baz + 1i64;\n+}\n \n-    let point: Point = Point { x: 1, y: 0 };\n-    let _ = point + point;\n-    let _ = -point;\n+fn unary() {\n+    // is explicitly on the list\n+    let _ = -OutOfNames;\n+    // is specifically on the list\n+    let _ = -Foo;\n+    // not on the list\n+    let _ = -Bar;\n+    // not on the list\n+    let _ = -Baz;\n }\n+\n+fn main() {}"}, {"sha": "ad89534aa1b042c808de5d69622e32c466c288e7", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/arithmetic_side_effects_allowed.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,58 @@\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:68:13\n+   |\n+LL |     let _ = Baz + Baz;\n+   |             ^^^^^^^^^\n+   |\n+   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:79:13\n+   |\n+LL |     let _ = 1i32 + Baz;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:82:13\n+   |\n+LL |     let _ = 1i64 + Foo;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:86:13\n+   |\n+LL |     let _ = 1i64 + Baz;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:97:13\n+   |\n+LL |     let _ = Baz + 1i32;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:100:13\n+   |\n+LL |     let _ = Foo + 1i64;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:104:13\n+   |\n+LL |     let _ = Baz + 1i64;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:113:13\n+   |\n+LL |     let _ = -Bar;\n+   |             ^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:115:13\n+   |\n+LL |     let _ = -Baz;\n+   |             ^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "89cbea7ecfe4728a7660a497312179bdafea4311", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/clippy.toml", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1 +1,11 @@\n-arithmetic-side-effects-allowed = [\"Point\"]\n+arithmetic-side-effects-allowed = [\n+    \"OutOfNames\"\n+]\n+arithmetic-side-effects-allowed-binary = [\n+    [\"Foo\", \"Foo\"],\n+    [\"Foo\", \"i32\"],\n+    [\"i32\", \"Foo\"],\n+    [\"Bar\", \"*\"],\n+    [\"*\", \"Bar\"],\n+]\n+arithmetic-side-effects-allowed-unary = [\"Foo\"]"}, {"sha": "1b9384d7e3ee6092512025e92324a856aadd09a4", "filename": "tests/ui-toml/suppress_lint_in_const/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1 @@\n+suppress-restriction-lint-in-const = true"}, {"sha": "5a2df9f6c5d912779067a1fe0ce6dcbd32a0f09f", "filename": "tests/ui-toml/suppress_lint_in_const/test.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,60 @@\n+#![feature(inline_const)]\n+#![warn(clippy::indexing_slicing)]\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n+\n+const ARR: [i32; 2] = [1, 2];\n+const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+\n+const fn idx() -> usize {\n+    1\n+}\n+const fn idx4() -> usize {\n+    4\n+}\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+    let index: usize = 1;\n+    x[index];\n+    x[4]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+\n+    x[0]; // Ok, should not produce stderr.\n+    x[3]; // Ok, should not produce stderr.\n+    x[const { idx() }]; // Ok, should not produce stderr.\n+    x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    const { &ARR[idx()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+    const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+\n+    let y = &x;\n+    y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021\n+    y[4]; // Ok, rustc will handle references too.\n+\n+    let v = vec![0; 5];\n+    v[0];\n+    v[10];\n+    v[1 << 3];\n+\n+    const N: usize = 15; // Out of bounds\n+    const M: usize = 3; // In bounds\n+    x[N]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[M]; // Ok, should not produce stderr.\n+    v[N];\n+    v[M];\n+}\n+\n+/// An opaque integer representation\n+pub struct Integer<'a> {\n+    /// The underlying data\n+    value: &'a [u8],\n+}\n+impl<'a> Integer<'a> {\n+    // Check whether `self` holds a negative number or not\n+    pub const fn is_negative(&self) -> bool {\n+        self.value[0] & 0b1000_0000 != 0\n+    }\n+}"}, {"sha": "bc178b7e1319d4e81f9ee4303b6338d5a7e591ef", "filename": "tests/ui-toml/suppress_lint_in_const/test.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,70 @@\n+error[E0080]: evaluation of `main::{constant#3}` failed\n+  --> $DIR/test.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+note: erroneous constant used\n+  --> $DIR/test.rs:31:5\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:22:5\n+   |\n+LL |     x[index];\n+   |     ^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     v[0];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:39:5\n+   |\n+LL |     v[10];\n+   |     ^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:40:5\n+   |\n+LL |     v[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:46:5\n+   |\n+LL |     v[N];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:47:5\n+   |\n+LL |     v[M];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/test.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "a22c6a5a0607d9ede572bdfd9ed7997237675717", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -6,6 +6,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            allow-unwrap-in-tests\n            allowed-scripts\n            arithmetic-side-effects-allowed\n+           arithmetic-side-effects-allowed-binary\n+           arithmetic-side-effects-allowed-unary\n            array-size-threshold\n            avoid-breaking-exported-api\n            await-holding-invalid-types\n@@ -35,6 +37,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            pass-by-value-size-limit\n            single-char-binding-names-threshold\n            standard-macro-braces\n+           suppress-restriction-lint-in-const\n            third-party\n            too-large-for-stack\n            too-many-arguments-threshold"}, {"sha": "9abf6d6c5e7d00c4fea180c6219eb7a3804a4cc2", "filename": "tests/ui/almost_complete_letter_range.stderr", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/cfe1e040e753323322ba42e923b998b0e217dec3/tests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfe1e040e753323322ba42e923b998b0e217dec3/tests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.stderr?ref=cfe1e040e753323322ba42e923b998b0e217dec3", "patch": "@@ -1,113 +0,0 @@\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:29:17\n-   |\n-LL |         let _ = ('a') ..'z';\n-   |                 ^^^^^^--^^^\n-   |                       |\n-   |                       help: use an inclusive range: `..=`\n-   |\n-   = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:30:17\n-   |\n-LL |         let _ = 'A' .. ('Z');\n-   |                 ^^^^--^^^^^^\n-   |                     |\n-   |                     help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:36:13\n-   |\n-LL |     let _ = (b'a')..(b'z');\n-   |             ^^^^^^--^^^^^^\n-   |                   |\n-   |                   help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:37:13\n-   |\n-LL |     let _ = b'A'..b'Z';\n-   |             ^^^^--^^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:42:13\n-   |\n-LL |     let _ = a!()..'z';\n-   |             ^^^^--^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:45:9\n-   |\n-LL |         b'a'..b'z' if true => 1,\n-   |         ^^^^--^^^^\n-   |             |\n-   |             help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:46:9\n-   |\n-LL |         b'A'..b'Z' if true => 2,\n-   |         ^^^^--^^^^\n-   |             |\n-   |             help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:53:9\n-   |\n-LL |         'a'..'z' if true => 1,\n-   |         ^^^--^^^\n-   |            |\n-   |            help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:54:9\n-   |\n-LL |         'A'..'Z' if true => 2,\n-   |         ^^^--^^^\n-   |            |\n-   |            help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:22:17\n-   |\n-LL |         let _ = 'a'..'z';\n-   |                 ^^^--^^^\n-   |                    |\n-   |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n-   |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:67:9\n-   |\n-LL |         'a'..'z' => 1,\n-   |         ^^^--^^^\n-   |            |\n-   |            help: use an inclusive range: `...`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:74:13\n-   |\n-LL |     let _ = 'a'..'z';\n-   |             ^^^--^^^\n-   |                |\n-   |                help: use an inclusive range: `..=`\n-\n-error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:76:9\n-   |\n-LL |         'a'..'z' => 1,\n-   |         ^^^--^^^\n-   |            |\n-   |            help: use an inclusive range: `..=`\n-\n-error: aborting due to 13 previous errors\n-"}, {"sha": "6046addf719642fe62ca6bb87ae9d6896fdb00cb", "filename": "tests/ui/almost_complete_range.fixed", "status": "renamed", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -4,9 +4,10 @@\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n-#![warn(clippy::almost_complete_letter_range)]\n+#![warn(clippy::almost_complete_range)]\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n+#![allow(clippy::double_parens)]\n \n #[macro_use]\n extern crate macro_rules;\n@@ -16,10 +17,22 @@ macro_rules! a {\n         'a'\n     };\n }\n+macro_rules! A {\n+    () => {\n+        'A'\n+    };\n+}\n+macro_rules! zero {\n+    () => {\n+        '0'\n+    };\n+}\n \n macro_rules! b {\n     () => {\n         let _ = 'a'..='z';\n+        let _ = 'A'..='Z';\n+        let _ = '0'..='9';\n     };\n }\n \n@@ -28,52 +41,68 @@ fn main() {\n     {\n         let _ = ('a') ..='z';\n         let _ = 'A' ..= ('Z');\n+        let _ = ((('0'))) ..= ('9');\n     }\n \n     let _ = 'b'..'z';\n     let _ = 'B'..'Z';\n+    let _ = '1'..'9';\n \n     let _ = (b'a')..=(b'z');\n     let _ = b'A'..=b'Z';\n+    let _ = b'0'..=b'9';\n \n     let _ = b'b'..b'z';\n     let _ = b'B'..b'Z';\n+    let _ = b'1'..b'9';\n \n     let _ = a!()..='z';\n+    let _ = A!()..='Z';\n+    let _ = zero!()..='9';\n \n     let _ = match 0u8 {\n         b'a'..=b'z' if true => 1,\n         b'A'..=b'Z' if true => 2,\n-        b'b'..b'z' => 3,\n-        b'B'..b'Z' => 4,\n-        _ => 5,\n+        b'0'..=b'9' if true => 3,\n+        b'b'..b'z' => 4,\n+        b'B'..b'Z' => 5,\n+        b'1'..b'9' => 6,\n+        _ => 7,\n     };\n \n     let _ = match 'x' {\n         'a'..='z' if true => 1,\n         'A'..='Z' if true => 2,\n-        'b'..'z' => 3,\n-        'B'..'Z' => 4,\n-        _ => 5,\n+        '0'..='9' if true => 3,\n+        'b'..'z' => 4,\n+        'B'..'Z' => 5,\n+        '1'..'9' => 6,\n+        _ => 7,\n     };\n \n-    almost_complete_letter_range!();\n+    almost_complete_range!();\n     b!();\n }\n \n #[clippy::msrv = \"1.25\"]\n fn _under_msrv() {\n     let _ = match 'a' {\n         'a'...'z' => 1,\n-        _ => 2,\n+        'A'...'Z' => 2,\n+        '0'...'9' => 3,\n+        _ => 4,\n     };\n }\n \n #[clippy::msrv = \"1.26\"]\n fn _meets_msrv() {\n     let _ = 'a'..='z';\n+    let _ = 'A'..='Z';\n+    let _ = '0'..='9';\n     let _ = match 'a' {\n         'a'..='z' => 1,\n-        _ => 2,\n+        'A'..='Z' => 1,\n+        '0'..='9' => 3,\n+        _ => 4,\n     };\n }", "previous_filename": "tests/ui/almost_complete_letter_range.fixed"}, {"sha": "ae7e07ab872b77f5e356f9711fad78115ea88b5b", "filename": "tests/ui/almost_complete_range.rs", "status": "renamed", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -4,9 +4,10 @@\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n-#![warn(clippy::almost_complete_letter_range)]\n+#![warn(clippy::almost_complete_range)]\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n+#![allow(clippy::double_parens)]\n \n #[macro_use]\n extern crate macro_rules;\n@@ -16,10 +17,22 @@ macro_rules! a {\n         'a'\n     };\n }\n+macro_rules! A {\n+    () => {\n+        'A'\n+    };\n+}\n+macro_rules! zero {\n+    () => {\n+        '0'\n+    };\n+}\n \n macro_rules! b {\n     () => {\n         let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n     };\n }\n \n@@ -28,52 +41,68 @@ fn main() {\n     {\n         let _ = ('a') ..'z';\n         let _ = 'A' .. ('Z');\n+        let _ = ((('0'))) .. ('9');\n     }\n \n     let _ = 'b'..'z';\n     let _ = 'B'..'Z';\n+    let _ = '1'..'9';\n \n     let _ = (b'a')..(b'z');\n     let _ = b'A'..b'Z';\n+    let _ = b'0'..b'9';\n \n     let _ = b'b'..b'z';\n     let _ = b'B'..b'Z';\n+    let _ = b'1'..b'9';\n \n     let _ = a!()..'z';\n+    let _ = A!()..'Z';\n+    let _ = zero!()..'9';\n \n     let _ = match 0u8 {\n         b'a'..b'z' if true => 1,\n         b'A'..b'Z' if true => 2,\n-        b'b'..b'z' => 3,\n-        b'B'..b'Z' => 4,\n-        _ => 5,\n+        b'0'..b'9' if true => 3,\n+        b'b'..b'z' => 4,\n+        b'B'..b'Z' => 5,\n+        b'1'..b'9' => 6,\n+        _ => 7,\n     };\n \n     let _ = match 'x' {\n         'a'..'z' if true => 1,\n         'A'..'Z' if true => 2,\n-        'b'..'z' => 3,\n-        'B'..'Z' => 4,\n-        _ => 5,\n+        '0'..'9' if true => 3,\n+        'b'..'z' => 4,\n+        'B'..'Z' => 5,\n+        '1'..'9' => 6,\n+        _ => 7,\n     };\n \n-    almost_complete_letter_range!();\n+    almost_complete_range!();\n     b!();\n }\n \n #[clippy::msrv = \"1.25\"]\n fn _under_msrv() {\n     let _ = match 'a' {\n         'a'..'z' => 1,\n-        _ => 2,\n+        'A'..'Z' => 2,\n+        '0'..'9' => 3,\n+        _ => 4,\n     };\n }\n \n #[clippy::msrv = \"1.26\"]\n fn _meets_msrv() {\n     let _ = 'a'..'z';\n+    let _ = 'A'..'Z';\n+    let _ = '0'..'9';\n     let _ = match 'a' {\n         'a'..'z' => 1,\n-        _ => 2,\n+        'A'..'Z' => 1,\n+        '0'..'9' => 3,\n+        _ => 4,\n     };\n }", "previous_filename": "tests/ui/almost_complete_letter_range.rs"}, {"sha": "a7a5328785025f6945e361d207fff35c027c5841", "filename": "tests/ui/almost_complete_range.stderr", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Falmost_complete_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,235 @@\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:42:17\n+   |\n+LL |         let _ = ('a') ..'z';\n+   |                 ^^^^^^--^^^\n+   |                       |\n+   |                       help: use an inclusive range: `..=`\n+   |\n+   = note: `-D clippy::almost-complete-range` implied by `-D warnings`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:43:17\n+   |\n+LL |         let _ = 'A' .. ('Z');\n+   |                 ^^^^--^^^^^^\n+   |                     |\n+   |                     help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:44:17\n+   |\n+LL |         let _ = ((('0'))) .. ('9');\n+   |                 ^^^^^^^^^^--^^^^^^\n+   |                           |\n+   |                           help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:51:13\n+   |\n+LL |     let _ = (b'a')..(b'z');\n+   |             ^^^^^^--^^^^^^\n+   |                   |\n+   |                   help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:52:13\n+   |\n+LL |     let _ = b'A'..b'Z';\n+   |             ^^^^--^^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:53:13\n+   |\n+LL |     let _ = b'0'..b'9';\n+   |             ^^^^--^^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:59:13\n+   |\n+LL |     let _ = a!()..'z';\n+   |             ^^^^--^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:60:13\n+   |\n+LL |     let _ = A!()..'Z';\n+   |             ^^^^--^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:61:13\n+   |\n+LL |     let _ = zero!()..'9';\n+   |             ^^^^^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:64:9\n+   |\n+LL |         b'a'..b'z' if true => 1,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:65:9\n+   |\n+LL |         b'A'..b'Z' if true => 2,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:66:9\n+   |\n+LL |         b'0'..b'9' if true => 3,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:74:9\n+   |\n+LL |         'a'..'z' if true => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:75:9\n+   |\n+LL |         'A'..'Z' if true => 2,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:76:9\n+   |\n+LL |         '0'..'9' if true => 3,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:33:17\n+   |\n+LL |         let _ = 'a'..'z';\n+   |                 ^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+...\n+LL |     b!();\n+   |     ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:34:17\n+   |\n+LL |         let _ = 'A'..'Z';\n+   |                 ^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+...\n+LL |     b!();\n+   |     ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:35:17\n+   |\n+LL |         let _ = '0'..'9';\n+   |                 ^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+...\n+LL |     b!();\n+   |     ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:90:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `...`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:91:9\n+   |\n+LL |         'A'..'Z' => 2,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `...`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:92:9\n+   |\n+LL |         '0'..'9' => 3,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `...`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:99:13\n+   |\n+LL |     let _ = 'a'..'z';\n+   |             ^^^--^^^\n+   |                |\n+   |                help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:100:13\n+   |\n+LL |     let _ = 'A'..'Z';\n+   |             ^^^--^^^\n+   |                |\n+   |                help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:101:13\n+   |\n+LL |     let _ = '0'..'9';\n+   |             ^^^--^^^\n+   |                |\n+   |                help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:103:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:104:9\n+   |\n+LL |         'A'..'Z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii range\n+  --> $DIR/almost_complete_range.rs:105:9\n+   |\n+LL |         '0'..'9' => 3,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: aborting due to 27 previous errors\n+"}, {"sha": "9fe4b7cf28d8d3fc4ee574fa194d060adc6f3d8f", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,28 +1,10 @@\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:78:13\n-   |\n-LL |     let _ = String::new() + \"\";\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:86:27\n-   |\n-LL |     let inferred_string = string + \"\";\n-   |                           ^^^^^^^^^^^\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:90:13\n-   |\n-LL |     let _ = inferred_string + \"\";\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-\n error: arithmetic operation that can potentially result in unexpected side-effects\n   --> $DIR/arithmetic_side_effects.rs:165:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n+   |\n+   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n   --> $DIR/arithmetic_side_effects.rs:166:5\n@@ -348,5 +330,5 @@ error: arithmetic operation that can potentially result in unexpected side-effec\n LL |     _n = -&_n;\n    |          ^^^^\n \n-error: aborting due to 58 previous errors\n+error: aborting due to 55 previous errors\n "}, {"sha": "1e5f20e8c39baf5ad8c47d5dd77530bfcba75dc6", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -142,8 +142,10 @@ macro_rules! equatable_if_let {\n }\n \n #[macro_export]\n-macro_rules! almost_complete_letter_range {\n+macro_rules! almost_complete_range {\n     () => {\n         let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n     };\n }"}, {"sha": "925cbf25368fbd18b3ceb6b537b38070e82266a4", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -45,3 +45,9 @@ mod cast_lossless_in_impl {\n         }\n     }\n }\n+\n+#[derive(PartialEq, Debug)]\n+#[repr(i64)]\n+enum Test {\n+    A = u32::MAX as i64 + 1,\n+}"}, {"sha": "c82bd9108d23bfb8ad03bc97911c76d49e00cb67", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -45,3 +45,9 @@ mod cast_lossless_in_impl {\n         }\n     }\n }\n+\n+#[derive(PartialEq, Debug)]\n+#[repr(i64)]\n+enum Test {\n+    A = u32::MAX as i64 + 1,\n+}"}, {"sha": "9792ae9ed6b8b34ddb097b3c17be2cf15a4692f4", "filename": "tests/ui/collapsible_str_replace.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![allow(unused)]\n #![warn(clippy::collapsible_str_replace)]\n \n fn get_filter() -> char {\n@@ -71,3 +72,13 @@ fn main() {\n         .replace('u', iter.next().unwrap())\n         .replace('s', iter.next().unwrap());\n }\n+\n+#[clippy::msrv = \"1.57\"]\n+fn msrv_1_57() {\n+    let _ = \"\".replace('a', \"1.57\").replace('b', \"1.57\");\n+}\n+\n+#[clippy::msrv = \"1.58\"]\n+fn msrv_1_58() {\n+    let _ = \"\".replace(['a', 'b'], \"1.58\");\n+}"}, {"sha": "baee185b79ea388e77b8d143de03d68d92c964a9", "filename": "tests/ui/collapsible_str_replace.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![allow(unused)]\n #![warn(clippy::collapsible_str_replace)]\n \n fn get_filter() -> char {\n@@ -74,3 +75,13 @@ fn main() {\n         .replace('u', iter.next().unwrap())\n         .replace('s', iter.next().unwrap());\n }\n+\n+#[clippy::msrv = \"1.57\"]\n+fn msrv_1_57() {\n+    let _ = \"\".replace('a', \"1.57\").replace('b', \"1.57\");\n+}\n+\n+#[clippy::msrv = \"1.58\"]\n+fn msrv_1_58() {\n+    let _ = \"\".replace('a', \"1.58\").replace('b', \"1.58\");\n+}"}, {"sha": "223358cf53f3e0e07c8b2db2c37a9d4cb9f619b4", "filename": "tests/ui/collapsible_str_replace.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fcollapsible_str_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,25 +1,25 @@\n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:19:27\n+  --> $DIR/collapsible_str_replace.rs:20:27\n    |\n LL |     let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], \"l\")`\n    |\n    = note: `-D clippy::collapsible-str-replace` implied by `-D warnings`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:21:27\n+  --> $DIR/collapsible_str_replace.rs:22:27\n    |\n LL |     let _ = \"hesuo worpd\".replace('s', l).replace('u', l);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], l)`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:23:27\n+  --> $DIR/collapsible_str_replace.rs:24:27\n    |\n LL |     let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\").replace('p', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u', 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:26:10\n+  --> $DIR/collapsible_str_replace.rs:27:10\n    |\n LL |           .replace('s', \"l\")\n    |  __________^\n@@ -29,58 +29,64 @@ LL | |         .replace('d', \"l\");\n    | |__________________________^ help: replace with: `replace(['s', 'u', 'p', 'd'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:31:27\n+  --> $DIR/collapsible_str_replace.rs:32:27\n    |\n LL |     let _ = \"hesuo world\".replace(s, \"l\").replace('u', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, 'u'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:33:27\n+  --> $DIR/collapsible_str_replace.rs:34:27\n    |\n LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace('u', \"l\").replace('p', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, 'u', 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:35:27\n+  --> $DIR/collapsible_str_replace.rs:36:27\n    |\n LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace('p', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, u, 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:37:27\n+  --> $DIR/collapsible_str_replace.rs:38:27\n    |\n LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace(p, \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, u, p], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:39:27\n+  --> $DIR/collapsible_str_replace.rs:40:27\n    |\n LL |     let _ = \"hesuo worlp\".replace('s', \"l\").replace('u', \"l\").replace('p', \"d\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:41:45\n+  --> $DIR/collapsible_str_replace.rs:42:45\n    |\n LL |     let _ = \"hesuo worpd\".replace('s', \"x\").replace('u', \"l\").replace('p', \"l\");\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['u', 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:44:47\n+  --> $DIR/collapsible_str_replace.rs:45:47\n    |\n LL |     let _ = \"hesudo worpd\".replace(\"su\", \"l\").replace('d', \"l\").replace('p', \"l\");\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['d', 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:46:28\n+  --> $DIR/collapsible_str_replace.rs:47:28\n    |\n LL |     let _ = \"hesudo worpd\".replace(d, \"l\").replace('p', \"l\").replace(\"su\", \"l\");\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([d, 'p'], \"l\")`\n \n error: used consecutive `str::replace` call\n-  --> $DIR/collapsible_str_replace.rs:48:27\n+  --> $DIR/collapsible_str_replace.rs:49:27\n    |\n LL |     let _ = \"hesuo world\".replace(get_filter(), \"l\").replace('s', \"l\");\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([get_filter(), 's'], \"l\")`\n \n-error: aborting due to 13 previous errors\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:86:16\n+   |\n+LL |     let _ = \"\".replace('a', \"1.58\").replace('b', \"1.58\");\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['a', 'b'], \"1.58\")`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "46565a97f005979b3bc03a5a4555d41a8c2ac0cc", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -189,3 +189,33 @@ mod issue_7920 {\n         }\n     }\n }\n+\n+mod issue_10058 {\n+    pub fn test() {\n+        // should not lint since we are increasing counter potentially more than once in the loop\n+        let values = [0, 1, 0, 1, 1, 1, 0, 1, 0, 1];\n+        let mut counter = 0;\n+        for value in values {\n+            counter += 1;\n+\n+            if value == 0 {\n+                continue;\n+            }\n+\n+            counter += 1;\n+        }\n+    }\n+\n+    pub fn test2() {\n+        // should not lint since we are increasing counter potentially more than once in the loop\n+        let values = [0, 1, 0, 1, 1, 1, 0, 1, 0, 1];\n+        let mut counter = 0;\n+        for value in values {\n+            counter += 1;\n+\n+            if value != 0 {\n+                counter += 1;\n+            }\n+        }\n+    }\n+}"}, {"sha": "72d635c2ccd65609ada5efc15d5197457ec4b622", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -81,4 +82,10 @@ fn msrv_1_41() {\n     }\n }\n \n+type Opaque = impl Sized;\n+struct IntoOpaque;\n+impl Into<Opaque> for IntoOpaque {\n+    fn into(self) -> Opaque {}\n+}\n+\n fn main() {}"}, {"sha": "965f4d5d7859ee47484ccc12da79112bbc743fad", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -81,4 +82,10 @@ fn msrv_1_41() {\n     }\n }\n \n+type Opaque = impl Sized;\n+struct IntoOpaque;\n+impl Into<Opaque> for IntoOpaque {\n+    fn into(self) -> Opaque {}\n+}\n+\n fn main() {}"}, {"sha": "3c4d011d6fb468e735fb07c7d49a7064bad3fcc7", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,5 @@\n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:9:1\n+  --> $DIR/from_over_into.rs:10:1\n    |\n LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL ~         StringWrapper(val)\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:17:1\n+  --> $DIR/from_over_into.rs:18:1\n    |\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL ~         SelfType(String::new())\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:32:1\n+  --> $DIR/from_over_into.rs:33:1\n    |\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL ~         let _: X = val;\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:44:1\n+  --> $DIR/from_over_into.rs:45:1\n    |\n LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL ~         val.0\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:77:5\n+  --> $DIR/from_over_into.rs:78:5\n    |\n LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cac69ef42c4136e36e5b8571b0963c62b799b11a", "filename": "tests/ui/identity_op.fixed", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -65,7 +65,7 @@ fn main() {\n     42;\n     1;\n     42;\n-    &x;\n+    x;\n     x;\n \n     let mut a = A(String::new());\n@@ -112,6 +112,10 @@ fn main() {\n     2 * { a };\n     (({ a } + 4));\n     1;\n+\n+    // Issue #9904\n+    let x = 0i32;\n+    let _: i32 = x;\n }\n \n pub fn decide(a: bool, b: bool) -> u32 {"}, {"sha": "33201aad4f641244e93af221aff06f183ac1d470", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -112,6 +112,10 @@ fn main() {\n     2 * (0 + { a });\n     1 * ({ a } + 4);\n     1 * 1;\n+\n+    // Issue #9904\n+    let x = 0i32;\n+    let _: i32 = &x + 0;\n }\n \n pub fn decide(a: bool, b: bool) -> u32 {"}, {"sha": "3ba557d18b24433c9c57bd491ffcfb44f929e9db", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -70,7 +70,7 @@ error: this operation has no effect\n   --> $DIR/identity_op.rs:68:5\n    |\n LL |     &x >> 0;\n-   |     ^^^^^^^ help: consider reducing it to: `&x`\n+   |     ^^^^^^^ help: consider reducing it to: `x`\n \n error: this operation has no effect\n   --> $DIR/identity_op.rs:69:5\n@@ -229,10 +229,16 @@ LL |     1 * 1;\n    |     ^^^^^ help: consider reducing it to: `1`\n \n error: this operation has no effect\n-  --> $DIR/identity_op.rs:118:5\n+  --> $DIR/identity_op.rs:118:18\n+   |\n+LL |     let _: i32 = &x + 0;\n+   |                  ^^^^^^ help: consider reducing it to: `x`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:122:5\n    |\n LL |     0 + if a { 1 } else { 2 } + if b { 3 } else { 5 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if a { 1 } else { 2 })`\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 40 previous errors\n "}, {"sha": "51b1afbe5ac83ecaffe7bcca428f1ed8b08fa2bc", "filename": "tests/ui/implicit_clone.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fimplicit_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fimplicit_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -115,4 +115,14 @@ fn main() {\n     let pathbuf_ref = &pathbuf_ref;\n     let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&&PathBuf`\n     let _ = (**pathbuf_ref).clone();\n+\n+    struct NoClone;\n+    impl ToOwned for NoClone {\n+        type Owned = Self;\n+        fn to_owned(&self) -> Self {\n+            NoClone\n+        }\n+    }\n+    let no_clone = &NoClone;\n+    let _ = no_clone.to_owned();\n }"}, {"sha": "8a9027433d95be632772e54ef97025e8e8a58df1", "filename": "tests/ui/implicit_clone.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -115,4 +115,14 @@ fn main() {\n     let pathbuf_ref = &pathbuf_ref;\n     let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&&PathBuf`\n     let _ = pathbuf_ref.to_path_buf();\n+\n+    struct NoClone;\n+    impl ToOwned for NoClone {\n+        type Owned = Self;\n+        fn to_owned(&self) -> Self {\n+            NoClone\n+        }\n+    }\n+    let no_clone = &NoClone;\n+    let _ = no_clone.to_owned();\n }"}, {"sha": "26abc9edb5e445f16976d94e032d33003388166d", "filename": "tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -6,7 +6,7 @@\n #![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ARR: [i32; 2] = [1, 2];\n-const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n \n const fn idx() -> usize {\n@@ -27,8 +27,8 @@ fn main() {\n     x[3]; // Ok, should not produce stderr.\n     x[const { idx() }]; // Ok, should not produce stderr.\n     x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n-    const { &ARR[idx()] }; // Ok, should not produce stderr.\n-    const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+    const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+    const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n \n     let y = &x;\n     y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021"}, {"sha": "8fd77913a3fd97626ed617357380b578ab13ef1c", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,13 +1,32 @@\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:9:20\n+   |\n+LL | const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |                    ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n note: erroneous constant used\n   --> $DIR/indexing_slicing_index.rs:31:5\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: indexing may panic\n@@ -17,7 +36,24 @@ LL |     x[index];\n    |     ^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n-   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:30:14\n+   |\n+LL |     const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |              ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |              ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:38:5\n@@ -65,6 +101,6 @@ error[E0080]: evaluation of constant value failed\n LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n    |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "c1c0b5ae40f6170b4b9d4daa0dd5424f661b8fa7", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -3,6 +3,9 @@\n #![warn(clippy::len_zero)]\n #![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n+extern crate core;\n+use core::ops::Deref;\n+\n pub struct One;\n struct Wither;\n \n@@ -56,6 +59,26 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n+struct DerefToDerefToString;\n+\n+impl Deref for DerefToDerefToString {\n+    type Target = DerefToString;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &DerefToString {}\n+    }\n+}\n+\n+struct DerefToString;\n+\n+impl Deref for DerefToString {\n+    type Target = str;\n+\n+    fn deref(&self) -> &Self::Target {\n+        \"Hello, world!\"\n+    }\n+}\n+\n fn main() {\n     let x = [1, 2];\n     if x.is_empty() {\n@@ -64,6 +87,23 @@ fn main() {\n \n     if \"\".is_empty() {}\n \n+    let s = \"Hello, world!\";\n+    let s1 = &s;\n+    let s2 = &s1;\n+    let s3 = &s2;\n+    let s4 = &s3;\n+    let s5 = &s4;\n+    let s6 = &s5;\n+    println!(\"{}\", s1.is_empty());\n+    println!(\"{}\", s2.is_empty());\n+    println!(\"{}\", s3.is_empty());\n+    println!(\"{}\", s4.is_empty());\n+    println!(\"{}\", s5.is_empty());\n+    println!(\"{}\", (s6).is_empty());\n+\n+    let d2s = DerefToDerefToString {};\n+    println!(\"{}\", (**d2s).is_empty());\n+\n     let y = One;\n     if y.len() == 0 {\n         // No error; `One` does not have `.is_empty()`."}, {"sha": "cc2eb05b6bfd2ee81c35ea7754118532dd5f7ab9", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -3,6 +3,9 @@\n #![warn(clippy::len_zero)]\n #![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n+extern crate core;\n+use core::ops::Deref;\n+\n pub struct One;\n struct Wither;\n \n@@ -56,6 +59,26 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n+struct DerefToDerefToString;\n+\n+impl Deref for DerefToDerefToString {\n+    type Target = DerefToString;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &DerefToString {}\n+    }\n+}\n+\n+struct DerefToString;\n+\n+impl Deref for DerefToString {\n+    type Target = str;\n+\n+    fn deref(&self) -> &Self::Target {\n+        \"Hello, world!\"\n+    }\n+}\n+\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {\n@@ -64,6 +87,23 @@ fn main() {\n \n     if \"\".len() == 0 {}\n \n+    let s = \"Hello, world!\";\n+    let s1 = &s;\n+    let s2 = &s1;\n+    let s3 = &s2;\n+    let s4 = &s3;\n+    let s5 = &s4;\n+    let s6 = &s5;\n+    println!(\"{}\", *s1 == \"\");\n+    println!(\"{}\", **s2 == \"\");\n+    println!(\"{}\", ***s3 == \"\");\n+    println!(\"{}\", ****s4 == \"\");\n+    println!(\"{}\", *****s5 == \"\");\n+    println!(\"{}\", ******(s6) == \"\");\n+\n+    let d2s = DerefToDerefToString {};\n+    println!(\"{}\", &**d2s == \"\");\n+\n     let y = One;\n     if y.len() == 0 {\n         // No error; `One` does not have `.is_empty()`."}, {"sha": "b6f13780253c2e526533179cc5602c0ff557f68a", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,88 +1,132 @@\n error: length comparison to zero\n-  --> $DIR/len_zero.rs:61:8\n+  --> $DIR/len_zero.rs:84:8\n    |\n LL |     if x.len() == 0 {\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `x.is_empty()`\n    |\n    = note: `-D clippy::len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:65:8\n+  --> $DIR/len_zero.rs:88:8\n    |\n LL |     if \"\".len() == 0 {}\n    |        ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `\"\".is_empty()`\n \n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:97:20\n+   |\n+LL |     println!(\"{}\", *s1 == \"\");\n+   |                    ^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s1.is_empty()`\n+   |\n+   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:98:20\n+   |\n+LL |     println!(\"{}\", **s2 == \"\");\n+   |                    ^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s2.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:99:20\n+   |\n+LL |     println!(\"{}\", ***s3 == \"\");\n+   |                    ^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s3.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:100:20\n+   |\n+LL |     println!(\"{}\", ****s4 == \"\");\n+   |                    ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s4.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:101:20\n+   |\n+LL |     println!(\"{}\", *****s5 == \"\");\n+   |                    ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s5.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:102:20\n+   |\n+LL |     println!(\"{}\", ******(s6) == \"\");\n+   |                    ^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(s6).is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:105:20\n+   |\n+LL |     println!(\"{}\", &**d2s == \"\");\n+   |                    ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(**d2s).is_empty()`\n+\n error: length comparison to zero\n-  --> $DIR/len_zero.rs:80:8\n+  --> $DIR/len_zero.rs:120:8\n    |\n LL |     if has_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:83:8\n+  --> $DIR/len_zero.rs:123:8\n    |\n LL |     if has_is_empty.len() != 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:86:8\n+  --> $DIR/len_zero.rs:126:8\n    |\n LL |     if has_is_empty.len() > 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:89:8\n+  --> $DIR/len_zero.rs:129:8\n    |\n LL |     if has_is_empty.len() < 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:92:8\n+  --> $DIR/len_zero.rs:132:8\n    |\n LL |     if has_is_empty.len() >= 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:103:8\n+  --> $DIR/len_zero.rs:143:8\n    |\n LL |     if 0 == has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:106:8\n+  --> $DIR/len_zero.rs:146:8\n    |\n LL |     if 0 != has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:109:8\n+  --> $DIR/len_zero.rs:149:8\n    |\n LL |     if 0 < has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:112:8\n+  --> $DIR/len_zero.rs:152:8\n    |\n LL |     if 1 <= has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:115:8\n+  --> $DIR/len_zero.rs:155:8\n    |\n LL |     if 1 > has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:129:8\n+  --> $DIR/len_zero.rs:169:8\n    |\n LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:142:8\n+  --> $DIR/len_zero.rs:182:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!b.is_empty()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "638320dd6eec439a76ea745736dd2b7fcfd1672f", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -62,6 +62,11 @@ fn main() {\n         panic!(\"panic5\");\n     }\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+    if a.is_empty() {\n+        let _ = 0;\n+    } else if a.len() == 1 {\n+        panic!(\"panic6\");\n+    }\n }\n \n fn issue7730(a: u8) {"}, {"sha": "8c7e919bf62a10d52bc6a343454b438f89c8857b", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -50,6 +50,11 @@ fn main() {\n     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+    if a.is_empty() {\n+        let _ = 0;\n+    } else if a.len() == 1 {\n+        panic!(\"panic6\");\n+    }\n }\n \n fn issue7730(a: u8) {"}, {"sha": "3555ac29243a1cb0d819a368d8bb22bf02aea2de", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -65,7 +65,7 @@ LL | |     }\n    | |_____^ help: try instead: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:73:5\n+  --> $DIR/manual_assert.rs:78:5\n    |\n LL | /     if a > 2 {\n LL | |         // comment"}, {"sha": "f037c5b8405c721cc6755b1874cf5d47f229206b", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -66,6 +66,11 @@ fn main() {\n     if a.is_empty() {\n         panic!(\"with expansion {}\", one!())\n     }\n+    if a.is_empty() {\n+        let _ = 0;\n+    } else if a.len() == 1 {\n+        panic!(\"panic6\");\n+    }\n }\n \n fn issue7730(a: u8) {"}, {"sha": "5b2b44c2fdb2bbaa6c960d482f36e051616267fe", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -15,6 +15,19 @@ fn main() {\n     assert!('x'.is_ascii_alphabetic());\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n+    b'0'.is_ascii_digit();\n+    b'a'.is_ascii_lowercase();\n+    b'A'.is_ascii_uppercase();\n+\n+    '0'.is_ascii_digit();\n+    'a'.is_ascii_lowercase();\n+    'A'.is_ascii_uppercase();\n+\n+    let cool_letter = &'g';\n+    cool_letter.is_ascii_digit();\n+    cool_letter.is_ascii_lowercase();\n+    cool_letter.is_ascii_uppercase();\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "c9433f33a1b6f3891e47a391ad150a784c2bc0db", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -15,6 +15,19 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n+    (b'0'..=b'9').contains(&b'0');\n+    (b'a'..=b'z').contains(&b'a');\n+    (b'A'..=b'Z').contains(&b'A');\n+\n+    ('0'..='9').contains(&'0');\n+    ('a'..='z').contains(&'a');\n+    ('A'..='Z').contains(&'A');\n+\n+    let cool_letter = &'g';\n+    ('0'..='9').contains(cool_letter);\n+    ('a'..='z').contains(cool_letter);\n+    ('A'..='Z').contains(cool_letter);\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "ee60188506d6fc08182a897d47a9d3c7ca290aa4", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -43,28 +43,82 @@ LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:29:13\n+  --> $DIR/manual_is_ascii_check.rs:19:5\n+   |\n+LL |     (b'0'..=b'9').contains(&b'0');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:20:5\n+   |\n+LL |     (b'a'..=b'z').contains(&b'a');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:21:5\n+   |\n+LL |     (b'A'..=b'Z').contains(&b'A');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:23:5\n+   |\n+LL |     ('0'..='9').contains(&'0');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:24:5\n+   |\n+LL |     ('a'..='z').contains(&'a');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:25:5\n+   |\n+LL |     ('A'..='Z').contains(&'A');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:28:5\n+   |\n+LL |     ('0'..='9').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:29:5\n+   |\n+LL |     ('a'..='z').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:30:5\n+   |\n+LL |     ('A'..='Z').contains(cool_letter);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cool_letter.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:42:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:30:13\n+  --> $DIR/manual_is_ascii_check.rs:43:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:31:13\n+  --> $DIR/manual_is_ascii_check.rs:44:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:41:23\n+  --> $DIR/manual_is_ascii_check.rs:54:23\n    |\n LL |     const FOO: bool = matches!('x', '0'..='9');\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "28caed9d79df244f074eab27b108794139ca3ac2", "filename": "tests/ui/manual_let_else_match.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_let_else_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_let_else_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -64,6 +64,13 @@ fn fire() {\n         Ok(v) => v,\n         Err(()) => return,\n     };\n+\n+    let f = Variant::Bar(1);\n+\n+    let _value = match f {\n+        Variant::Bar(_) | Variant::Baz(_) => (),\n+        _ => return,\n+    };\n }\n \n fn not_fire() {"}, {"sha": "cd5e9a9ac39c0770fcd41351097e381cfe0f6ec4", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -25,7 +25,7 @@ LL | /         let v = match h() {\n LL | |             (Some(_), Some(_)) | (None, None) => continue,\n LL | |             (Some(v), None) | (None, Some(v)) => v,\n LL | |         };\n-   | |__________^ help: consider writing: `let (Some(v), None) | (None, Some(v)) = h() else { continue };`\n+   | |__________^ help: consider writing: `let ((Some(v), None) | (None, Some(v))) = h() else { continue };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:49:9\n@@ -34,7 +34,7 @@ LL | /         let v = match build_enum() {\n LL | |             _ => continue,\n LL | |             Variant::Bar(v) | Variant::Baz(v) => v,\n LL | |         };\n-   | |__________^ help: consider writing: `let Variant::Bar(v) | Variant::Baz(v) = build_enum() else { continue };`\n+   | |__________^ help: consider writing: `let (Variant::Bar(v) | Variant::Baz(v)) = build_enum() else { continue };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:57:5\n@@ -54,5 +54,14 @@ LL | |         Err(()) => return,\n LL | |     };\n    | |______^ help: consider writing: `let Ok(v) = f().map_err(|_| ()) else { return };`\n \n-error: aborting due to 6 previous errors\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else_match.rs:70:5\n+   |\n+LL | /     let _value = match f {\n+LL | |         Variant::Bar(_) | Variant::Baz(_) => (),\n+LL | |         _ => return,\n+LL | |     };\n+   | |______^ help: consider writing: `let (Variant::Bar(_) | Variant::Baz(_)) = f else { return };`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "f11330a8916d4adf2ba241ef4495ef772d8fcdf0", "filename": "tests/ui/needless_parens_on_range_literals.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fneedless_parens_on_range_literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fneedless_parens_on_range_literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_parens_on_range_literals.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,7 @@\n // edition:2018\n \n #![warn(clippy::needless_parens_on_range_literals)]\n-#![allow(clippy::almost_complete_letter_range)]\n+#![allow(clippy::almost_complete_range)]\n \n fn main() {\n     let _ = 'a'..='z';"}, {"sha": "671c0009e23b7d5b60d8f70f3b6abd5a94dc79cf", "filename": "tests/ui/needless_parens_on_range_literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fneedless_parens_on_range_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fneedless_parens_on_range_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_parens_on_range_literals.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,7 @@\n // edition:2018\n \n #![warn(clippy::needless_parens_on_range_literals)]\n-#![allow(clippy::almost_complete_letter_range)]\n+#![allow(clippy::almost_complete_range)]\n \n fn main() {\n     let _ = ('a')..=('z');"}, {"sha": "beec42f08bb05666df617799cc1b4068abfcdb75", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,3 +1,4 @@\n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::new_ret_no_self)]\n #![allow(dead_code)]\n \n@@ -400,3 +401,25 @@ mod issue7344 {\n         }\n     }\n }\n+\n+mod issue10041 {\n+    struct Bomb;\n+\n+    impl Bomb {\n+        // Hidden <Rhs = Self> default generic paramter.\n+        pub fn new() -> impl PartialOrd {\n+            0i32\n+        }\n+    }\n+\n+    // TAIT with self-referencing bounds\n+    type X = impl std::ops::Add<Output = X>;\n+\n+    struct Bomb2;\n+\n+    impl Bomb2 {\n+        pub fn new() -> X {\n+            0i32\n+        }\n+    }\n+}"}, {"sha": "2eaebfb5cac50041df6bc18f6c2a78bb79017691", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:49:5\n+  --> $DIR/new_ret_no_self.rs:50:5\n    |\n LL | /     pub fn new(_: String) -> impl R<Item = u32> {\n LL | |         S3\n@@ -9,88 +9,104 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:81:5\n+  --> $DIR/new_ret_no_self.rs:82:5\n    |\n LL | /     pub fn new() -> u32 {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:90:5\n+  --> $DIR/new_ret_no_self.rs:91:5\n    |\n LL | /     pub fn new(_: String) -> u32 {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:126:5\n+  --> $DIR/new_ret_no_self.rs:127:5\n    |\n LL | /     pub fn new() -> (u32, u32) {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:153:5\n+  --> $DIR/new_ret_no_self.rs:154:5\n    |\n LL | /     pub fn new() -> *mut V {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:171:5\n+  --> $DIR/new_ret_no_self.rs:172:5\n    |\n LL | /     pub fn new() -> Option<u32> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:224:9\n+  --> $DIR/new_ret_no_self.rs:225:9\n    |\n LL |         fn new() -> String;\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:236:9\n+  --> $DIR/new_ret_no_self.rs:237:9\n    |\n LL |         fn new(_: String) -> String;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:271:9\n+  --> $DIR/new_ret_no_self.rs:272:9\n    |\n LL | /         fn new() -> (u32, u32) {\n LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:298:9\n+  --> $DIR/new_ret_no_self.rs:299:9\n    |\n LL | /         fn new() -> *mut V {\n LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:368:9\n+  --> $DIR/new_ret_no_self.rs:369:9\n    |\n LL | /         fn new(t: T) -> impl Into<i32> {\n LL | |             1\n LL | |         }\n    | |_________^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:389:9\n+  --> $DIR/new_ret_no_self.rs:390:9\n    |\n LL | /         fn new(t: T) -> impl Trait2<(), i32> {\n LL | |             unimplemented!()\n LL | |         }\n    | |_________^\n \n-error: aborting due to 12 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:410:9\n+   |\n+LL | /         pub fn new() -> impl PartialOrd {\n+LL | |             0i32\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:421:9\n+   |\n+LL | /         pub fn new() -> X {\n+LL | |             0i32\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "bca777a890c3b249c2f0ae7bbf61c099a2d0705e", "filename": "tests/ui/redundant_static_lifetimes.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -39,8 +39,14 @@ static STATIC_VAR_TUPLE: &(u8, u8) = &(1, 2); // ERROR Consider removing 'static\n \n static STATIC_VAR_ARRAY: &[u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n \n+static mut STATIC_MUT_SLICE: &mut [u32] = &mut [0];\n+\n fn main() {\n     let false_positive: &'static str = \"test\";\n+\n+    unsafe {\n+        STATIC_MUT_SLICE[0] = 0;\n+    }\n }\n \n trait Bar {"}, {"sha": "afe7644816d2e4f0420d04d1547c3080f45d984b", "filename": "tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -39,8 +39,14 @@ static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing\n \n static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n \n+static mut STATIC_MUT_SLICE: &'static mut [u32] = &mut [0];\n+\n fn main() {\n     let false_positive: &'static str = \"test\";\n+\n+    unsafe {\n+        STATIC_MUT_SLICE[0] = 0;\n+    }\n }\n \n trait Bar {"}, {"sha": "b2cbd2d9d01b0350e7f31710c9fdec05f2cfc6ce", "filename": "tests/ui/redundant_static_lifetimes.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fredundant_static_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -97,10 +97,16 @@ LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removin\n    |                          -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n error: statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:65:16\n+  --> $DIR/redundant_static_lifetimes.rs:42:31\n+   |\n+LL | static mut STATIC_MUT_SLICE: &'static mut [u32] = &mut [0];\n+   |                              -^^^^^^^---------- help: consider removing `'static`: `&mut [u32]`\n+\n+error: statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes.rs:71:16\n    |\n LL |     static V: &'static u8 = &17;\n    |               -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "2f76b57529607a14ed3165dea40c3ddf0dd9975d", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -4,6 +4,7 @@\n \n // run-rustfix\n \n+#![allow(clippy::almost_complete_range)]\n #![allow(clippy::disallowed_names)]\n #![allow(clippy::blocks_in_if_conditions)]\n #![allow(clippy::box_collection)]\n@@ -37,6 +38,7 @@\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n+#![warn(clippy::almost_complete_range)]\n #![warn(clippy::disallowed_names)]\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::blocks_in_if_conditions)]"}, {"sha": "699c0ff464e9fb247989fd0b559c8a35576b63f4", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -4,6 +4,7 @@\n \n // run-rustfix\n \n+#![allow(clippy::almost_complete_range)]\n #![allow(clippy::disallowed_names)]\n #![allow(clippy::blocks_in_if_conditions)]\n #![allow(clippy::box_collection)]\n@@ -37,6 +38,7 @@\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n+#![warn(clippy::almost_complete_letter_range)]\n #![warn(clippy::blacklisted_name)]\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]"}, {"sha": "9af58dc75a68f41daff7f88a050856295b19ec29", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,244 +1,250 @@\n+error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n+  --> $DIR/rename.rs:41:9\n+   |\n+LL | #![warn(clippy::almost_complete_letter_range)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n+\n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:40:9\n+  --> $DIR/rename.rs:42:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:41:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 40 previous errors\n+error: aborting due to 41 previous errors\n "}, {"sha": "713cff604a1d7d6028c367f5efcf2e4c2de552fb", "filename": "tests/ui/seek_to_start_instead_of_rewind.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -70,6 +70,12 @@ fn seek_to_end<T: Seek>(t: &mut T) {\n     t.seek(SeekFrom::End(0));\n }\n \n+// This should NOT trigger clippy warning because\n+// expr is used here\n+fn seek_to_start_in_let<T: Seek>(t: &mut T) {\n+    let a = t.seek(SeekFrom::Start(0)).unwrap();\n+}\n+\n fn main() {\n     let mut f = OpenOptions::new()\n         .write(true)"}, {"sha": "467003a1a66f684141d3e8be6bc500d3acb99d66", "filename": "tests/ui/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -70,6 +70,12 @@ fn seek_to_end<T: Seek>(t: &mut T) {\n     t.seek(SeekFrom::End(0));\n }\n \n+// This should NOT trigger clippy warning because\n+// expr is used here\n+fn seek_to_start_in_let<T: Seek>(t: &mut T) {\n+    let a = t.seek(SeekFrom::Start(0)).unwrap();\n+}\n+\n fn main() {\n     let mut f = OpenOptions::new()\n         .write(true)"}, {"sha": "342ec00fe7295ad8ec3afd061f1af4dbbc48110c", "filename": "tests/ui/seek_to_start_instead_of_rewind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -13,7 +13,7 @@ LL |     t.seek(SeekFrom::Start(0));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n \n error: used `seek` to go to the start of the stream\n-  --> $DIR/seek_to_start_instead_of_rewind.rs:128:7\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:134:7\n    |\n LL |     f.seek(SeekFrom::Start(0));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`"}, {"sha": "42e97e1ca358e145bd51d8d464dfd77d365d3069", "filename": "tests/ui/semicolon_inside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()); }\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "f40848f702e1cbabd76a1a55c26fde7425a90f6b", "filename": "tests/ui/semicolon_inside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "48d3690e2bdee5bf1e2face8a3e255ae111bf5bd", "filename": "tests/ui/semicolon_inside_block.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,54 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:39:5\n+   |\n+LL |     { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block() };\n+LL +     { unit_fn_block(); }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:40:5\n+   |\n+LL |     unsafe { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block() };\n+LL +     unsafe { unit_fn_block(); }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:61:5\n+   |\n+LL |     { m!(()) };\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()) };\n+LL +     { m!(()); }\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "091eaa7518e95d1750a3c1fc59ecd27479c7835a", "filename": "tests/ui/semicolon_outside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "7ce46431fac9ace2c0c4221bb32348a7c866f1b7", "filename": "tests/ui/semicolon_outside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "dcc102e60994a6fea104d330e799328b33e0ecd6", "filename": "tests/ui/semicolon_outside_block.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,54 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:52:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block();\n+LL | |     }\n+   | |_____^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block()\n+LL ~     };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "506187fc125736f778df20459bfd641c4350901a", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -25,6 +25,12 @@ fn str_lit_as_bytes() {\n     let includestr = include_bytes!(\"string_lit_as_bytes.rs\");\n \n     let _ = b\"string with newline\\t\\n\";\n+\n+    let _ = match \"x\".as_bytes() {\n+        b\"xx\" => 0,\n+        [b'x', ..] => 1,\n+        _ => 2,\n+    };\n }\n \n fn main() {}"}, {"sha": "2c339f1ddb819334b446e0007f6c5e6146965f29", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -25,6 +25,12 @@ fn str_lit_as_bytes() {\n     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n \n     let _ = \"string with newline\\t\\n\".as_bytes();\n+\n+    let _ = match \"x\".as_bytes() {\n+        b\"xx\" => 0,\n+        [b'x', ..] => 1,\n+        _ => 2,\n+    };\n }\n \n fn main() {}"}, {"sha": "52b5343c351e6e42365e484869c1b4dd4160c996", "filename": "tests/ui/uninlined_format_args_panic.edition2018.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2018.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -26,4 +26,7 @@ fn main() {\n             panic!(\"p4 {var}\");\n         }\n     }\n+\n+    assert!(var == 1, \"p5 {}\", var);\n+    debug_assert!(var == 1, \"p6 {}\", var);\n }"}, {"sha": "ee72065e28abf3bfb0c118de65166efd65a7f6a4", "filename": "tests/ui/uninlined_format_args_panic.edition2021.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2021.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -26,4 +26,7 @@ fn main() {\n             panic!(\"p4 {var}\");\n         }\n     }\n+\n+    assert!(var == 1, \"p5 {var}\");\n+    debug_assert!(var == 1, \"p6 {var}\");\n }"}, {"sha": "fc7b125080e766296e83e69e253dd481640b4e11", "filename": "tests/ui/uninlined_format_args_panic.edition2021.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -47,5 +47,29 @@ LL -         panic!(\"p3 {var}\", var = var);\n LL +         panic!(\"p3 {var}\");\n    |\n \n-error: aborting due to 4 previous errors\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_panic.rs:30:5\n+   |\n+LL |     assert!(var == 1, \"p5 {}\", var);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     assert!(var == 1, \"p5 {}\", var);\n+LL +     assert!(var == 1, \"p5 {var}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_panic.rs:31:5\n+   |\n+LL |     debug_assert!(var == 1, \"p6 {}\", var);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     debug_assert!(var == 1, \"p6 {}\", var);\n+LL +     debug_assert!(var == 1, \"p6 {var}\");\n+   |\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "b4a0a0f496e400d7bdb3c4d8f9444c12cb6549f9", "filename": "tests/ui/uninlined_format_args_panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funinlined_format_args_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -26,4 +26,7 @@ fn main() {\n             panic!(\"p4 {var}\");\n         }\n     }\n+\n+    assert!(var == 1, \"p5 {}\", var);\n+    debug_assert!(var == 1, \"p6 {}\", var);\n }"}, {"sha": "345f6d604c4f005028cfda81242cbc275ba6923b", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -454,3 +454,23 @@ mod issue_9771b {\n         Key(v.to_vec())\n     }\n }\n+\n+// This is a watered down version of the code in: https://github.com/oxigraph/rio\n+// The ICE is triggered by the call to `to_owned` on this line:\n+// https://github.com/oxigraph/rio/blob/66635b9ff8e5423e58932353fa40d6e64e4820f7/testsuite/src/parser_evaluator.rs#L116\n+mod issue_10021 {\n+    #![allow(unused)]\n+\n+    pub struct Iri<T>(T);\n+\n+    impl<T: AsRef<str>> Iri<T> {\n+        pub fn parse(iri: T) -> Result<Self, ()> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    pub fn parse_w3c_rdf_test_file(url: &str) -> Result<(), ()> {\n+        let base_iri = Iri::parse(url.to_owned())?;\n+        Ok(())\n+    }\n+}"}, {"sha": "7eb53df39e5b7dace2e82dd95030c53282b01919", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -454,3 +454,23 @@ mod issue_9771b {\n         Key(v.to_vec())\n     }\n }\n+\n+// This is a watered down version of the code in: https://github.com/oxigraph/rio\n+// The ICE is triggered by the call to `to_owned` on this line:\n+// https://github.com/oxigraph/rio/blob/66635b9ff8e5423e58932353fa40d6e64e4820f7/testsuite/src/parser_evaluator.rs#L116\n+mod issue_10021 {\n+    #![allow(unused)]\n+\n+    pub struct Iri<T>(T);\n+\n+    impl<T: AsRef<str>> Iri<T> {\n+        pub fn parse(iri: T) -> Result<Self, ()> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    pub fn parse_w3c_rdf_test_file(url: &str) -> Result<(), ()> {\n+        let base_iri = Iri::parse(url.to_owned())?;\n+        Ok(())\n+    }\n+}"}, {"sha": "8906c776977a80f30667b1f2cd24a1f881c6e904", "filename": "tests/ui/zero_ptr_no_std.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.fixed?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+#![deny(clippy::zero_ptr)]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let _ = core::ptr::null::<usize>();\n+    let _ = core::ptr::null_mut::<f64>();\n+    let _: *const u8 = core::ptr::null();\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "379c1b18d299200f914656a4acee9ff6107edd04", "filename": "tests/ui/zero_ptr_no_std.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+#![deny(clippy::zero_ptr)]\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let _ = 0 as *const usize;\n+    let _ = 0 as *mut f64;\n+    let _: *const u8 = 0 as *const _;\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "d92bb4a6528dbb7afca9c2441db814366da63890", "filename": "tests/ui/zero_ptr_no_std.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fui%2Fzero_ptr_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr_no_std.stderr?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -0,0 +1,26 @@\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr_no_std.rs:9:13\n+   |\n+LL |     let _ = 0 as *const usize;\n+   |             ^^^^^^^^^^^^^^^^^ help: try: `core::ptr::null::<usize>()`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/zero_ptr_no_std.rs:5:9\n+   |\n+LL | #![deny(clippy::zero_ptr)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: `0 as *mut _` detected\n+  --> $DIR/zero_ptr_no_std.rs:10:13\n+   |\n+LL |     let _ = 0 as *mut f64;\n+   |             ^^^^^^^^^^^^^ help: try: `core::ptr::null_mut::<f64>()`\n+\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr_no_std.rs:11:24\n+   |\n+LL |     let _: *const u8 = 0 as *const _;\n+   |                        ^^^^^^^^^^^^^ help: try: `core::ptr::null()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c721e9969c9aa67497c32ab03d2510e6e6ecaf11", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -2,7 +2,6 @@\n #![warn(rust_2018_idioms, unused_lifetimes)]\n #![allow(clippy::single_match_else)]\n \n-use rustc_tools_util::VersionInfo;\n use std::fs;\n \n #[test]"}, {"sha": "6f50ef932e11260ffbc86b75820f2b4aea76f3fd", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c422524c70ef710033014edce8cf53f55c39e49/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c422524c70ef710033014edce8cf53f55c39e49/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=1c422524c70ef710033014edce8cf53f55c39e49", "patch": "@@ -1,7 +1,7 @@\n [relabel]\n allow-unauthenticated = [\n     \"A-*\", \"C-*\", \"E-*\", \"I-*\", \"L-*\", \"P-*\", \"S-*\", \"T-*\",\n-    \"good-first-issue\"\n+    \"good-first-issue\", \"beta-nominated\"\n ]\n \n # Allows shortcuts like `@rustbot ready`"}]}