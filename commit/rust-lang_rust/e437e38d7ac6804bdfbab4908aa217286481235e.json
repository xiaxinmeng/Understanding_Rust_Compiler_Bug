{"sha": "e437e38d7ac6804bdfbab4908aa217286481235e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzdlMzhkN2FjNjgwNGJkZmJhYjQ5MDhhYTIxNzI4NjQ4MTIzNWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-28T15:16:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-28T15:16:33Z"}, "message": "Merge #6659\n\n6659: Explain how we get precise spans for diagnostics. r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cb2763365028d11dc048044c20477a0f9b1b8610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2763365028d11dc048044c20477a0f9b1b8610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e437e38d7ac6804bdfbab4908aa217286481235e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwmnRCRBK7hj4Ov3rIwAAdHIIAI1/9bv2SD+7HjjD3cvBhYs2\nrDaRsEqr44CRYe8Tu8GjPoMd64jwwr5W5Bue+ywlzfXgI0PbEryXitc1LcZKyzu+\nKa5DuQU18R6j8+aF0RZ6vf4P6GxF09yeABfqWrNK5Bwljd3fcfXEJMdMRxNi0IVx\nB+mq3FsqPqm7sZMYSOKri3nLIKtZ/468Qj85psjt8/u2Zs7y63l5E+ImxQfVbcRv\nmSz5AwjWmdUYu9STg/SIbjUc/07giWoa63rJSI474WmhKb5pPakK7IidiEhGQtkU\nvm2MFC4rnWTKNLzXO3wIFqQlNwxnAzrrDqC0HDWBSVHteAaatOjPxd1z0wFlTfs=\n=ZCcL\n-----END PGP SIGNATURE-----\n", "payload": "tree cb2763365028d11dc048044c20477a0f9b1b8610\nparent 7f3ba7d57fd2f43f3cfc012f898a26d940bf5cc8\nparent 5a42e6bff541d42d6366a93b619b20732bb48dcf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606576593 +0000\ncommitter GitHub <noreply@github.com> 1606576593 +0000\n\nMerge #6659\n\n6659: Explain how we get precise spans for diagnostics. r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e437e38d7ac6804bdfbab4908aa217286481235e", "html_url": "https://github.com/rust-lang/rust/commit/e437e38d7ac6804bdfbab4908aa217286481235e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e437e38d7ac6804bdfbab4908aa217286481235e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3ba7d57fd2f43f3cfc012f898a26d940bf5cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3ba7d57fd2f43f3cfc012f898a26d940bf5cc8", "html_url": "https://github.com/rust-lang/rust/commit/7f3ba7d57fd2f43f3cfc012f898a26d940bf5cc8"}, {"sha": "5a42e6bff541d42d6366a93b619b20732bb48dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a42e6bff541d42d6366a93b619b20732bb48dcf", "html_url": "https://github.com/rust-lang/rust/commit/5a42e6bff541d42d6366a93b619b20732bb48dcf"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "bf0b85ce9d2390773271895b1edfa983ea713925", "filename": "crates/hir_expand/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e437e38d7ac6804bdfbab4908aa217286481235e/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e437e38d7ac6804bdfbab4908aa217286481235e/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs?ref=e437e38d7ac6804bdfbab4908aa217286481235e", "patch": "@@ -5,7 +5,7 @@\n //!\n //! `DiagnosticSink` struct is used as an emitter for diagnostic. When creating\n //! a `DiagnosticSink`, you supply a callback which can react to a `dyn\n-//! Diagnostic` or to any concrete diagnostic (downcasting is sued internally).\n+//! Diagnostic` or to any concrete diagnostic (downcasting is used internally).\n //!\n //! Because diagnostics store file offsets, it's a bad idea to store them\n //! directly in salsa. For this reason, every hir subsytem defines it's own\n@@ -32,7 +32,12 @@ impl DiagnosticCode {\n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn code(&self) -> DiagnosticCode;\n     fn message(&self) -> String;\n-    /// Used in highlighting and related purposes\n+    /// Source element that triggered the diagnostics.\n+    ///\n+    /// Note that this should reflect \"semantics\", rather than specific span we\n+    /// want to highlight. When rendering the diagnostics into an error message,\n+    /// the IDE will fetch the `SyntaxNode` and will narrow the span\n+    /// appropriately.\n     fn display_source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {"}]}