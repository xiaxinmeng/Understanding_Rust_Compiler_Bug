{"sha": "a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmIzMmM5Y2M5NWEyMTgzNWM4MWJhYTZmNTMxY2UzOGQ2N2ZiZGU=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-18T14:40:15Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:14Z"}, "message": "Check WF of defaults even when there are no bounds.", "tree": {"sha": "01ca2490158cd772d7446411ce9794a5d7a08397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ca2490158cd772d7446411ce9794a5d7a08397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "html_url": "https://github.com/rust-lang/rust/commit/a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9703373d91fe83155798be0571b3349a9513f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9703373d91fe83155798be0571b3349a9513f9", "html_url": "https://github.com/rust-lang/rust/commit/4d9703373d91fe83155798be0571b3349a9513f9"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "bf004df824b1154bc567ccf314e513b4af81c9b1", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "patch": "@@ -359,6 +359,16 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         use ty::subst::Subst;\n         use ty::Predicate;\n \n+        let generics = self.tcx.generics_of(def_id);\n+        let defaults = generics.types.iter().filter_map(|p| match p.has_default {\n+                                                                true => Some(p.def_id),\n+                                                                false => None,\n+                                                        });\n+        // Defaults must be well-formed.\n+        for d in defaults {\n+            fcx.register_wf_obligation(fcx.tcx.type_of(d), fcx.tcx.def_span(d), self.code.clone());\n+        }\n+\n         // Check that each default fulfills the bounds on it's parameter.\n         // We go over each predicate and duplicate it, substituting defaults in the self type.\n         let mut predicates = fcx.tcx.predicates_of(def_id);\n@@ -377,7 +387,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n             let mut skip = false;\n             let mut no_default = true;\n-            let generics = self.tcx.generics_of(def_id);\n             let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n                 // All regions are identity.\n                 fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))"}, {"sha": "2264fb860f1552ed26fe96a123885f09e9acd052", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "patch": "@@ -15,6 +15,7 @@ use std::ops::Add;\n \n struct Foo<T, U: FromIterator<T>>(T, U);\n struct WellFormed<Z = Foo<i32, i32>>(Z);\n+struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n \n struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n "}, {"sha": "2a9f4eb693caaf6ad77b640c2dc9a416e185ec3f", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb32c9cc95a21835c81baa6f531ce38d67fbde/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=a6bb32c9cc95a21835c81baa6f531ce38d67fbde", "patch": "@@ -1,62 +1,71 @@\n error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:17:1\n+  --> $DIR/type-check-defaults.rs:17:19\n    |\n 17 | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+   |                   ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+   |\n+   = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n+   = note: required by `Foo`\n+\n+error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n+  --> $DIR/type-check-defaults.rs:18:27\n+   |\n+18 | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n+   |                           ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n    = note: required by `Foo`\n \n error[E0277]: the trait bound `A: std::iter::Iterator` is not satisfied\n-  --> $DIR/type-check-defaults.rs:19:1\n+  --> $DIR/type-check-defaults.rs:20:1\n    |\n-19 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n+20 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `A` is not an iterator; maybe try calling `.iter()` or a similar method\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `A`\n    = help: consider adding a `where A: std::iter::Iterator` bound\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:21:1\n+  --> $DIR/type-check-defaults.rs:22:1\n    |\n-21 | struct Bounds<T:Copy=String>(T);\n+22 | struct Bounds<T:Copy=String>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:23:1\n+  --> $DIR/type-check-defaults.rs:24:1\n    |\n-23 | struct WhereClause<T=String>(T) where T: Copy;\n+24 | struct WhereClause<T=String>(T) where T: Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:25:1\n+  --> $DIR/type-check-defaults.rs:26:1\n    |\n-25 | trait TraitBound<T:Copy=String> {}\n+26 | trait TraitBound<T:Copy=String> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:27:1\n+  --> $DIR/type-check-defaults.rs:28:1\n    |\n-27 | trait SelfBound<T:Copy=Self> {}\n+28 | trait SelfBound<T:Copy=Self> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `i32: std::ops::Add<u8>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:29:1\n+  --> $DIR/type-check-defaults.rs:30:1\n    |\n-29 | trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+30 | trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n    = note: required by `std::ops::Add`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}