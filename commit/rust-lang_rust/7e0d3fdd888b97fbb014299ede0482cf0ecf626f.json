{"sha": "7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMGQzZmRkODg4Yjk3ZmJiMDE0Mjk5ZWRlMDQ4MmNmMGVjZjYyNmY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-23T21:45:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-26T22:37:02Z"}, "message": "Add test for hygiene caching issue", "tree": {"sha": "5c6e80be3dd734c437b14be18f62fa75d29feb73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6e80be3dd734c437b14be18f62fa75d29feb73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8eBY4ACgkQtAh+UQ6Y\nsWRFIA/7B3z5vty5+HbaQSmVB6tO5SEvaU7o6XYDlVC4zIYLuGLbfXicofbILAOu\n11OV0ebLVahFxx1ZKcfV/48ALYRG9tSNH16k1K8bS0xXSenY9tY2h/tzle66SA4H\ndP4Ws3K4H+SljGxGkQrFJtnViZwkgyP6WD1zDGEShJ/YSkSgjuoZyvBdb6aSsshn\nuISAdFydOIKedPbu3HvT2tbMFla3vTTVIB3sYfxqUPC/k8ribgo4hr/LLICYGFtZ\nndIjsbZx0aSGE58GjANq91yGrGgkAo4xL8EGj6N03zvqBV65ZZMmzTrwWHAv0XwJ\nIHmP/djGp0ASpfZ0xS++bTSondWGuRugvAZW0ujKv0RCZnO1LuFqUrfTVdZqdtqV\ngMKn3e6RwNBsmFeiFFfG5vqFOS/KIgADDazphQ9yXdf4rJBP9a7COLLmddzhZmVu\ncCBgjSKDXFMmcQJUDBdYaP5kvRKbgKmfJMt+NYrnSa2rPp7qd/tzhHNQwjZhhX62\nQUTfFdpSANaQ9ZVDQPLwAVjiIXFAhRr8sLkmXT4tdEbbEjKxaZLLRUh1DwJaqSmy\nlaboK9Y82s/HGVjiF5rTxsuZgNMSsIT+wUHprBP1rvm8b2fTbqcFGh45Pu4eoFqy\nv6T+b8z6yNKeik/UUdTfD9GO63UEkeDdIJA+WSk5ue+CtefByLM=\n=fLde\n-----END PGP SIGNATURE-----", "payload": "tree 5c6e80be3dd734c437b14be18f62fa75d29feb73\nparent dc216123830d75cffcb20f2b1350145b05409c4d\nauthor Aaron Hill <aa1ronham@gmail.com> 1595540730 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1595803022 -0400\n\nAdd test for hygiene caching issue\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "html_url": "https://github.com/rust-lang/rust/commit/7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0d3fdd888b97fbb014299ede0482cf0ecf626f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc216123830d75cffcb20f2b1350145b05409c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc216123830d75cffcb20f2b1350145b05409c4d", "html_url": "https://github.com/rust-lang/rust/commit/dc216123830d75cffcb20f2b1350145b05409c4d"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "411be644cf432450bb55ec5880b59985cebef4ec", "filename": "src/test/incremental/hygiene/auxiliary/cached_hygiene.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e0d3fdd888b97fbb014299ede0482cf0ecf626f/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0d3fdd888b97fbb014299ede0482cf0ecf626f/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs?ref=7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "patch": "@@ -0,0 +1,37 @@\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+// We use #[inline(always)] to ensure that the downstream crate\n+// will always load the MIR for these functions\n+\n+#![feature(rustc_attrs)]\n+\n+#[allow(unused)]\n+macro_rules! first_macro {\n+    () => {\n+        println!(\"New call!\");\n+    }\n+}\n+\n+#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[inline(always)]\n+pub fn changed_fn() {\n+    // This will cause additional hygiene to be generate,\n+    // which will cause the SyntaxContext/ExpnId raw ids to be\n+    // different when we write out `my_fn` to the crate metadata.\n+    #[cfg(rpass2)]\n+    first_macro!();\n+}\n+\n+macro_rules! print_loc {\n+    () => {\n+        println!(\"Caller loc: {}\", std::panic::Location::caller());\n+    }\n+}\n+\n+#[rustc_clean(cfg=\"rpass2\")]\n+#[inline(always)]\n+pub fn unchanged_fn() {\n+    print_loc!();\n+}\n+"}, {"sha": "8124141418bc3cfbe53396a658f9e5077fbccc84", "filename": "src/test/incremental/hygiene/load_cached_hygiene.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7e0d3fdd888b97fbb014299ede0482cf0ecf626f/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0d3fdd888b97fbb014299ede0482cf0ecf626f/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs?ref=7e0d3fdd888b97fbb014299ede0482cf0ecf626f", "patch": "@@ -0,0 +1,48 @@\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+// aux-build:cached_hygiene.rs\n+\n+// This tests the folllowing scenario\n+// 1. A foreign crate is compiled with incremental compilation.\n+//    This causes hygiene information to be saved to the incr cache.\n+// 2. One function is the foreign crate is modified. This causes the\n+//    optimized mir for an unmodified function to be loaded from the\n+//    incremental cache and written out to the crate metadata.\n+// 3. In the process of loading and writing out this function's MIR,\n+//    we load hygiene information from the incremental cache and\n+//    write it to our metadata.\n+// 4. This hygiene information is loaded by another crate (this file)\n+\n+// Previously, this situation would cause hygiene identifiers\n+// (SyntaxContexts and ExpnIds) to get corrupted when we tried to\n+// serialize the hygiene information loaded from the incr cache into\n+// the metadata. Specifically, we were not resetting `orig_id`\n+// for an `EpxnData` generate in the current crate, which would cause\n+// us to serialize the `ExpnId` pointing to a garbage location in\n+// the metadata.\n+\n+#![feature(rustc_attrs)]\n+\n+#![rustc_partition_reused(module=\"load_cached_hygiene-call_unchanged_function\", cfg=\"rpass2\")]\n+#![rustc_partition_codegened(module=\"load_cached_hygiene-call_changed_function\", cfg=\"rpass2\")]\n+\n+\n+extern crate cached_hygiene;\n+\n+pub mod call_unchanged_function {\n+\n+    pub fn unchanged() {\n+        cached_hygiene::unchanged_fn();\n+    }\n+}\n+\n+pub mod call_changed_function {\n+    pub fn changed() {\n+        cached_hygiene::changed_fn();\n+    }\n+}\n+\n+pub fn main() {\n+    call_unchanged_function::unchanged();\n+    call_changed_function::changed();\n+}"}]}