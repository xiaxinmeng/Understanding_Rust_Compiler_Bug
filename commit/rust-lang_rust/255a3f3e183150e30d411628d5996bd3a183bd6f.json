{"sha": "255a3f3e183150e30d411628d5996bd3a183bd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NWEzZjNlMTgzMTUwZTMwZDQxMTYyOGQ1OTk2YmQzYTE4M2JkNmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-19T18:29:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-07T16:00:47Z"}, "message": "std: Force `Instant::now()` to be monotonic\n\nThis commit is an attempt to force `Instant::now` to be monotonic\nthrough any means possible. We tried relying on OS/hardware/clock\nimplementations, but those seem buggy enough that we can't rely on them\nin practice. This commit implements the same hammer Firefox recently\nimplemented (noted in #56612) which is to just keep whatever the lastest\n`Instant::now()` return value was in memory, returning that instead of\nthe OS looks like it's moving backwards.\n\nCloses #48514\nCloses #49281\ncc #51648\ncc #56560\nCloses #56612\nCloses #56940", "tree": {"sha": "8ad92dbbf5cd558da93028d0c38ed5810053f853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad92dbbf5cd558da93028d0c38ed5810053f853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/255a3f3e183150e30d411628d5996bd3a183bd6f", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/255a3f3e183150e30d411628d5996bd3a183bd6f", "html_url": "https://github.com/rust-lang/rust/commit/255a3f3e183150e30d411628d5996bd3a183bd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/255a3f3e183150e30d411628d5996bd3a183bd6f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7c44cdb2958ceb0a5d78634a704a492a241b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7c44cdb2958ceb0a5d78634a704a492a241b6f", "html_url": "https://github.com/rust-lang/rust/commit/1f7c44cdb2958ceb0a5d78634a704a492a241b6f"}], "stats": {"total": 131, "additions": 103, "deletions": 28}, "files": [{"sha": "a73a2d79d30c26cef87618ef7be0bdb4fb7f3aa9", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -2,7 +2,7 @@ use session::config::Options;\n \n use std::fs;\n use std::io::{self, StderrLock, Write};\n-use std::time::{Duration, Instant};\n+use std::time::Instant;\n \n macro_rules! define_categories {\n     ($($name:ident,)*) => {\n@@ -203,20 +203,7 @@ impl SelfProfiler {\n     }\n \n     fn stop_timer(&mut self) -> u64 {\n-        let elapsed = if cfg!(windows) {\n-            // On Windows, timers don't always appear to be monotonic (see #51648)\n-            // which can lead to panics when calculating elapsed time.\n-            // Work around this by testing to see if the current time is less than\n-            // our recorded time, and if it is, just returning 0.\n-            let now = Instant::now();\n-            if self.current_timer >= now {\n-                Duration::new(0, 0)\n-            } else {\n-                self.current_timer.elapsed()\n-            }\n-        } else {\n-            self.current_timer.elapsed()\n-        };\n+        let elapsed = self.current_timer.elapsed();\n \n         self.current_timer = Instant::now();\n "}, {"sha": "545e3c0ce845510a99c2e57ada037f88ba64a7a8", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -25,6 +25,14 @@ impl Instant {\n         }\n     }\n \n+    pub fn actually_monotonic() -> bool {\n+        true\n+    }\n+\n+    pub const fn zero() -> Instant {\n+        Instant { t: 0 }\n+    }\n+\n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         let diff = self.t\n             .checked_sub(other.t)"}, {"sha": "401b7012aa7e9af932d1926453fcc41eb4bcabf2", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -128,6 +128,14 @@ impl Instant {\n         Instant { t: now(syscall::CLOCK_MONOTONIC) }\n     }\n \n+    pub const fn zero() -> Instant {\n+        Instant { t: Timespec { t: syscall::TimeSpec { tv_sec: 0, tv_nsec: 0 } } }\n+    }\n+\n+    pub fn actually_monotonic() -> bool {\n+        false\n+    }\n+\n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n             panic!(\"specified instant was later than self\")"}, {"sha": "4a655714f991cba30c12b9b6a18705c89d2f74b9", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -14,6 +14,12 @@ struct Timespec {\n }\n \n impl Timespec {\n+    const fn zero() -> Timespec {\n+        Timespec {\n+            t: libc::timespec { tv_sec: 0, tv_nsec: 0 },\n+        }\n+    }\n+\n     fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n         if self >= other {\n             Ok(if self.t.tv_nsec >= other.t.tv_nsec {\n@@ -128,19 +134,22 @@ mod inner {\n     }\n \n     pub const UNIX_EPOCH: SystemTime = SystemTime {\n-        t: Timespec {\n-            t: libc::timespec {\n-                tv_sec: 0,\n-                tv_nsec: 0,\n-            },\n-        },\n+        t: Timespec::zero(),\n     };\n \n     impl Instant {\n         pub fn now() -> Instant {\n             Instant { t: unsafe { libc::mach_absolute_time() } }\n         }\n \n+        pub const fn zero() -> Instant {\n+            Instant { t: 0 }\n+        }\n+\n+        pub fn actually_monotonic() -> bool {\n+            true\n+        }\n+\n         pub fn sub_instant(&self, other: &Instant) -> Duration {\n             let info = info();\n             let diff = self.t.checked_sub(other.t)\n@@ -258,19 +267,26 @@ mod inner {\n     }\n \n     pub const UNIX_EPOCH: SystemTime = SystemTime {\n-        t: Timespec {\n-            t: libc::timespec {\n-                tv_sec: 0,\n-                tv_nsec: 0,\n-            },\n-        },\n+        t: Timespec::zero(),\n     };\n \n     impl Instant {\n         pub fn now() -> Instant {\n             Instant { t: now(libc::CLOCK_MONOTONIC) }\n         }\n \n+        pub const fn zero() -> Instant {\n+            Instant {\n+                t: Timespec::zero(),\n+            }\n+        }\n+\n+        pub fn actually_monotonic() -> bool {\n+            (cfg!(target_os = \"linux\") && cfg!(target_arch = \"x86_64\")) ||\n+            (cfg!(target_os = \"linux\") && cfg!(target_arch = \"x86\")) ||\n+            false // last clause, used so `||` is always trailing above\n+        }\n+\n         pub fn sub_instant(&self, other: &Instant) -> Duration {\n             self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n                 panic!(\"specified instant was later than self\")"}, {"sha": "31798466fed2ae493f1346fd5ecc789e5f35d9ef", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -14,6 +14,14 @@ impl Instant {\n         Instant(TimeSysCall::perform(TimeClock::Monotonic))\n     }\n \n+    pub const fn zero() -> Instant {\n+        Instant(Duration::from_secs(0))\n+    }\n+\n+    pub fn actually_monotonic() -> bool {\n+        false\n+    }\n+\n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         self.0 - other.0\n     }"}, {"sha": "8e8e9195cf471913fe742bf173b6c21a52536b5f", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -40,6 +40,14 @@ impl Instant {\n         t\n     }\n \n+    pub fn actually_monotonic() -> bool {\n+        false\n+    }\n+\n+    pub const fn zero() -> Instant {\n+        Instant { t: 0 }\n+    }\n+\n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         // Values which are +- 1 need to be considered as basically the same\n         // units in time due to various measurement oddities, according to"}, {"sha": "72a5a070233e1fc6903c41d8af95b14b028bf0b4", "filename": "src/libstd/time.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255a3f3e183150e30d411628d5996bd3a183bd6f/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=255a3f3e183150e30d411628d5996bd3a183bd6f", "patch": "@@ -12,11 +12,13 @@\n \n #![stable(feature = \"time\", since = \"1.3.0\")]\n \n+use cmp;\n use error::Error;\n use fmt;\n use ops::{Add, Sub, AddAssign, SubAssign};\n use sys::time;\n use sys_common::FromInner;\n+use sys_common::mutex::Mutex;\n \n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n@@ -150,7 +152,45 @@ impl Instant {\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> Instant {\n-        Instant(time::Instant::now())\n+        let os_now = time::Instant::now();\n+\n+        // And here we come upon a sad state of affairs. The whole point of\n+        // `Instant` is that it's monotonically increasing. We've found in the\n+        // wild, however, that it's not actually monotonically increasing for\n+        // one reason or another. These appear to be OS and hardware level bugs,\n+        // and there's not really a whole lot we can do about them. Here's a\n+        // taste of what we've found:\n+        //\n+        // * #48514 - OpenBSD, x86_64\n+        // * #49281 - linux arm64 and s390x\n+        // * #51648 - windows, x86\n+        // * #56560 - windows, x86_64, AWS\n+        // * #56612 - windows, x86, vm (?)\n+        // * #56940 - linux, arm64\n+        // * https://bugzilla.mozilla.org/show_bug.cgi?id=1487778 - a similar\n+        //   Firefox bug\n+        //\n+        // It simply seems that this it just happens so that a lot in the wild\n+        // we're seeing panics across various platforms where consecutive calls\n+        // to `Instant::now`, such as via the `elapsed` function, are panicking\n+        // as they're going backwards. Placed here is a last-ditch effort to try\n+        // to fix things up. We keep a global \"latest now\" instance which is\n+        // returned instead of what the OS says if the OS goes backwards.\n+        //\n+        // To hopefully mitigate the impact of this though a few platforms are\n+        // whitelisted as \"these at least haven't gone backwards yet\".\n+        if time::Instant::actually_monotonic() {\n+            return Instant(os_now)\n+        }\n+\n+        static LOCK: Mutex = Mutex::new();\n+        static mut LAST_NOW: time::Instant = time::Instant::zero();\n+        unsafe {\n+            let _lock = LOCK.lock();\n+            let now = cmp::max(LAST_NOW, os_now);\n+            LAST_NOW = now;\n+            Instant(now)\n+        }\n     }\n \n     /// Returns the amount of time elapsed from another instant to this one."}]}