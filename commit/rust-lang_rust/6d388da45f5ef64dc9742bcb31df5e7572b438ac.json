{"sha": "6d388da45f5ef64dc9742bcb31df5e7572b438ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzg4ZGE0NWY1ZWY2NGRjOTc0MmJjYjMxZGY1ZTc1NzJiNDM4YWM=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-12-24T00:52:27Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-12-30T10:41:15Z"}, "message": "doc: add some links for io::stdio", "tree": {"sha": "40ca45de5cd790644f014f7cc85468ecdcba5f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ca45de5cd790644f014f7cc85468ecdcba5f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d388da45f5ef64dc9742bcb31df5e7572b438ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d388da45f5ef64dc9742bcb31df5e7572b438ac", "html_url": "https://github.com/rust-lang/rust/commit/6d388da45f5ef64dc9742bcb31df5e7572b438ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d388da45f5ef64dc9742bcb31df5e7572b438ac/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06bb977d86dcfe786d4265f4807a11c39b51141", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06bb977d86dcfe786d4265f4807a11c39b51141", "html_url": "https://github.com/rust-lang/rust/commit/a06bb977d86dcfe786d4265f4807a11c39b51141"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "e51453180a7b24c7ccfe9710b1d4e3ed4d815385", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6d388da45f5ef64dc9742bcb31df5e7572b438ac/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388da45f5ef64dc9742bcb31df5e7572b438ac/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6d388da45f5ef64dc9742bcb31df5e7572b438ac", "patch": "@@ -133,23 +133,30 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n /// A handle to the standard input stream of a process.\n ///\n /// Each handle is a shared reference to a global buffer of input data to this\n-/// process. A handle can be `lock`'d to gain full access to `BufRead` methods\n+/// process. A handle can be `lock`'d to gain full access to [BufRead] methods\n /// (e.g. `.lines()`). Writes to this handle are otherwise locked with respect\n /// to other writes.\n ///\n /// This handle implements the `Read` trait, but beware that concurrent reads\n /// of `Stdin` must be executed with care.\n ///\n-/// Created by the function `io::stdin()`.\n+/// Created by the [io::stdin] method.\n+///\n+/// [io::stdin]: fn.stdin.html\n+/// [BufRead]: trait.BufRead.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n }\n \n /// A locked reference to the `Stdin` handle.\n ///\n-/// This handle implements both the `Read` and `BufRead` traits and is\n-/// constructed via the `lock` method on `Stdin`.\n+/// This handle implements both the [Read] and [BufRead] traits, and\n+/// is constructed via the [Stdin::lock] method.\n+///\n+/// [Read]: trait.Read.html\n+/// [BufRead]: trait.BufRead.html\n+/// [Stdin::lock]: struct.Stdin.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,\n@@ -221,8 +228,11 @@ impl Stdin {\n     /// guard.\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n-    /// returned guard also implements the `Read` and `BufRead` traits for\n+    /// returned guard also implements the [Read] and [BufRead] traits for\n     /// accessing the underlying data.\n+    ///\n+    /// [Read]: trait.Read.html\n+    /// [BufRead]: trait.BufRead.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdinLock {\n         StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n@@ -231,7 +241,9 @@ impl Stdin {\n     /// Locks this handle and reads a line of input into the specified buffer.\n     ///\n     /// For detailed semantics of this method, see the documentation on\n-    /// `BufRead::read_line`.\n+    /// [BufRead::read_line].\n+    ///\n+    /// [BufRead::read_line]: trait.BufRead.html#method.read_line\n     ///\n     /// # Examples\n     ///\n@@ -314,7 +326,9 @@ const OUT_MAX: usize = ::usize::MAX;\n /// output stream. Access is also synchronized via a lock and explicit control\n /// over locking is available via the `lock` method.\n ///\n-/// Created by the function `io::stdout()`.\n+/// Created by the [io::stdout] method.\n+///\n+/// [io::stdout]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdout {\n     // FIXME: this should be LineWriter or BufWriter depending on the state of\n@@ -325,8 +339,11 @@ pub struct Stdout {\n \n /// A locked reference to the `Stdout` handle.\n ///\n-/// This handle implements the `Write` trait and is constructed via the `lock`\n-/// method on `Stdout`.\n+/// This handle implements the [Write] trait, and is constructed via\n+/// the [Stdout::lock] method.\n+///\n+/// [Write]: trait.Write.html\n+/// [Stdout::lock]: struct.Stdout.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdoutLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<LineWriter<Maybe<StdoutRaw>>>>,\n@@ -336,9 +353,9 @@ pub struct StdoutLock<'a> {\n ///\n /// Each handle returned is a reference to a shared global buffer whose access\n /// is synchronized via a mutex. If you need more explicit control over\n-/// locking, see the [lock() method][lock].\n+/// locking, see the [Stdout::lock] method.\n ///\n-/// [lock]: struct.Stdout.html#method.lock\n+/// [Stdout::lock]: struct.Stdout.html#method.lock\n ///\n /// # Examples\n ///\n@@ -424,16 +441,20 @@ impl<'a> Write for StdoutLock<'a> {\n \n /// A handle to the standard error stream of a process.\n ///\n-/// For more information, see `stderr`\n+/// For more information, see the [io::stderr] method.\n+///\n+/// [io::stderr]: fn.stderr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stderr {\n     inner: Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>>,\n }\n \n /// A locked reference to the `Stderr` handle.\n ///\n-/// This handle implements the `Write` trait and is constructed via the `lock`\n-/// method on `Stderr`.\n+/// This handle implements the `Write` trait and is constructed via\n+/// the [Stderr::lock] method.\n+///\n+/// [Stderr::lock]: struct.Stderr.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<Maybe<StderrRaw>>>,"}]}