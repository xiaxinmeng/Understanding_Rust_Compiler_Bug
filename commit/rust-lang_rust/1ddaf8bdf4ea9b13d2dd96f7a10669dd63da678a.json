{"sha": "1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZGFmOGJkZjRlYTliMTNkMmRkOTZmN2ExMDY2OWRkNjNkYTY3OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-12T23:50:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-12T23:50:03Z"}, "message": "Auto merge of #30309 - alexcrichton:more-tier-two, r=steveklabnik\n\nWe've got lots of new automation set up in the past few months, so these\nplatforms are now all tier 2 as we're building artifacts and gating on them.", "tree": {"sha": "e6e74acfe1acd4b2cdfbca5ffbbc7c85cb422d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e74acfe1acd4b2cdfbca5ffbbc7c85cb422d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "html_url": "https://github.com/rust-lang/rust/commit/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8babb7db7e4ca79eea7e7688cf4354c0077f9a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/8babb7db7e4ca79eea7e7688cf4354c0077f9a82", "html_url": "https://github.com/rust-lang/rust/commit/8babb7db7e4ca79eea7e7688cf4354c0077f9a82"}, {"sha": "453375b4d2df11f1fe48141ee8259954d055d54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/453375b4d2df11f1fe48141ee8259954d055d54f", "html_url": "https://github.com/rust-lang/rust/commit/453375b4d2df11f1fe48141ee8259954d055d54f"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "17fc5d9233d195cf9be1b94a9ed1ca7598e4eda2", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=1ddaf8bdf4ea9b13d2dd96f7a10669dd63da678a", "patch": "@@ -63,6 +63,13 @@ these platforms are required to have each of the following:\n |  Target                       | std |rustc|cargo| notes                      |\n |-------------------------------|-----|-----|-----|----------------------------|\n | `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n+| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n+| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n+| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n+| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n+| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n \n ### Tier 3\n \n@@ -75,15 +82,8 @@ unofficial locations.\n \n |  Target                       | std |rustc|cargo| notes                      |\n |-------------------------------|-----|-----|-----|----------------------------|\n-| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n-| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n | `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n | `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n-| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n-| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n-| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n | `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n | `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n | `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n@@ -127,7 +127,7 @@ not want the script to run \u2018sudo\u2019 then pass it the --disable-sudo flag.\n You may uninstall later by running /usr/local/lib/rustlib/uninstall.sh,\n or by running this script again with the --uninstall flag.\n \n-Continue? (y/N) \n+Continue? (y/N)\n ```\n \n From here, press `y` for \u2018yes\u2019, and then follow the rest of the prompts.\n@@ -188,7 +188,7 @@ was installed.\n Now that you have Rust installed, we'll help you write your first Rust program.\n It's traditional when learning a new language to write a little program to\n print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n-that tradition. \n+that tradition.\n \n The nice thing about starting with such a simple program is that you can\n quickly verify that your compiler is installed, and that it's working properly.\n@@ -202,7 +202,7 @@ practicing it early on is good.\n > There are a number of extensions in development by the community, and the\n > Rust team ships plugins for [various editors]. Configuring your editor or\n > IDE is out of the scope of this tutorial, so check the documentation for your\n-> specific setup. \n+> specific setup.\n \n [SolidOak]: https://github.com/oakes/SolidOak\n [various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n@@ -244,14 +244,14 @@ following commands:\n \n ```bash\n $ rustc main.rs\n-$ ./main \n+$ ./main\n Hello, world!\n ```\n \n In Windows, just replace `main` with `main.exe`. Regardless of your operating\n system, you should see the string `Hello, world!` print to the terminal. If you\n did, then congratulations! You've officially written a Rust program. That makes\n-you a Rust programmer! Welcome. \n+you a Rust programmer! Welcome.\n \n ## Anatomy of a Rust Program\n \n@@ -285,13 +285,13 @@ Inside the `main()` function:\n This line does all of the work in this little program: it prints text to the\n screen. There are a number of details that are important here. The first is\n that it\u2019s indented with four spaces, not tabs.\n- \n+\n The second important part is the `println!()` line. This is calling a Rust\n *[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n function instead, it would look like this: `println()` (without the !). We'll\n discuss Rust macros in more detail later, but for now you just need to\n know that when you see a `!` that means that you\u2019re calling a macro instead of\n-a normal function. \n+a normal function.\n \n \n [macro]: macros.html\n@@ -313,7 +313,7 @@ begin. Most lines of Rust code end with a `;`.\n ## Compiling and Running Are Separate Steps\n \n In \"Writing and Running a Rust Program\", we showed you how to run a newly\n-created program. We'll break that process down and examine each step now. \n+created program. We'll break that process down and examine each step now.\n \n Before running a Rust program, you have to compile it. You can use the Rust\n compiler by entering the `rustc` command and passing it the name of your source\n@@ -395,7 +395,7 @@ in which you installed Rust, to determine if Cargo is separate.\n ## Converting to Cargo\n \n Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n-to do three things: \n+to do three things:\n \n 1. Put your source file in the right directory.\n 2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere else)\n@@ -419,7 +419,7 @@ Cargo expects your source files to live inside a *src* directory, so do that\n first. This leaves the top-level project directory (in this case,\n *hello_world*) for READMEs, license information, and anything else not related\n to your code. In this way, using Cargo helps you keep your projects nice and\n-tidy. There's a place for everything, and everything is in its place. \n+tidy. There's a place for everything, and everything is in its place.\n \n Now, copy *main.rs* to the *src* directory, and delete the compiled file you\n created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n@@ -428,15 +428,15 @@ Windows.\n This example retains `main.rs` as the source filename because it's creating an\n executable. If you wanted to make a library instead, you'd name the file\n `lib.rs`. This convention is used by Cargo to successfully compile your\n-projects, but it can be overridden if you wish. \n+projects, but it can be overridden if you wish.\n \n ### Creating a Configuration File\n \n Next, create a new file inside your *hello_world* directory, and call it\n `Cargo.toml`.\n \n Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n-with the configuration file. \n+with the configuration file.\n \n This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n similar to INI, but has some extra goodies, and is used as Cargo\u2019s\n@@ -464,7 +464,7 @@ know to compile your program: its name, what version it is, and who wrote it.\n Once you've added this information to the *Cargo.toml* file, save it to finish\n creating the configuration file.\n \n-## Building and Running a Cargo Project \n+## Building and Running a Cargo Project\n \n With your *Cargo.toml* file in place in your project's root directory, you\n should be ready to build and run your Hello World program! To do so, enter the\n@@ -477,7 +477,7 @@ $ ./target/debug/hello_world\n Hello, world!\n ```\n \n-Bam! If all goes well, `Hello, world!` should print to the terminal once more. \n+Bam! If all goes well, `Hello, world!` should print to the terminal once more.\n \n You just built a project with `cargo build` and ran it with\n `./target/debug/hello_world`, but you can actually do both in one step with\n@@ -532,7 +532,7 @@ doesn't have dependencies, so the file is a bit sparse. Realistically, you\n won't ever need to touch this file yourself; just let Cargo handle it.\n \n That\u2019s it! If you've been following along, you should have successfully built\n-`hello_world` with Cargo. \n+`hello_world` with Cargo.\n \n Even though the project is simple, it now uses much of the real tooling you\u2019ll\n use for the rest of your Rust career. In fact, you can expect to start\n@@ -587,7 +587,7 @@ fn main() {\n }\n ```\n \n-Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding! \n+Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding!\n \n > Note: If you want to look at Cargo in more detail, check out the official [Cargo\n guide], which covers all of its features.\n@@ -598,7 +598,7 @@ guide], which covers all of its features.\n \n This chapter covered the basics that will serve you well through the rest of\n this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n-down, we'll cover more about the Rust language itself. \n+down, we'll cover more about the Rust language itself.\n \n You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n start from the bottom and work your way up with \u2018[Syntax and"}]}