{"sha": "e48160f6e40352a7f72ab108e78754ef1f3f5da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODE2MGY2ZTQwMzUyYTdmNzJhYjEwOGU3ODc1NGVmMWYzZjVkYTE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-30T18:16:53Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-05T16:05:25Z"}, "message": "Generate a version script for linkers on Linux.", "tree": {"sha": "63020bb54df9346f0bb2a69a69a1c3cdb0e09bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63020bb54df9346f0bb2a69a69a1c3cdb0e09bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48160f6e40352a7f72ab108e78754ef1f3f5da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48160f6e40352a7f72ab108e78754ef1f3f5da1", "html_url": "https://github.com/rust-lang/rust/commit/e48160f6e40352a7f72ab108e78754ef1f3f5da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48160f6e40352a7f72ab108e78754ef1f3f5da1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133aeacf2f28b985bba88eebc08c7a9924453738", "url": "https://api.github.com/repos/rust-lang/rust/commits/133aeacf2f28b985bba88eebc08c7a9924453738", "html_url": "https://github.com/rust-lang/rust/commit/133aeacf2f28b985bba88eebc08c7a9924453738"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "67c8d268a819cecd868f651c051f41563dab2c0a", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e48160f6e40352a7f72ab108e78754ef1f3f5da1/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48160f6e40352a7f72ab108e78754ef1f3f5da1/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=e48160f6e40352a7f72ab108e78754ef1f3f5da1", "patch": "@@ -253,46 +253,43 @@ impl<'a> Linker for GnuLinker<'a> {\n         let mut arg = OsString::new();\n         let path = tmpdir.join(\"list\");\n \n-        if self.sess.target.target.options.is_like_solaris {\n+        if self.sess.target.target.options.is_like_osx {\n+            // Write a plain, newline-separated list of symbols\n             let res = (|| -> io::Result<()> {\n                 let mut f = BufWriter::new(File::create(&path)?);\n-                writeln!(f, \"{{\\n  global:\")?;\n                 for sym in self.info.exports[&crate_type].iter() {\n-                    writeln!(f, \"    {};\", sym)?;\n+                    writeln!(f, \"_{}\", sym)?;\n                 }\n-                writeln!(f, \"\\n  local:\\n    *;\\n}};\")?;\n                 Ok(())\n             })();\n             if let Err(e) = res {\n-                self.sess.fatal(&format!(\"failed to write version script: {}\", e));\n+                self.sess.fatal(&format!(\"failed to write lib.def file: {}\", e));\n             }\n-\n-            arg.push(\"-Wl,-M,\");\n-            arg.push(&path);\n         } else {\n-            let prefix = if self.sess.target.target.options.is_like_osx {\n-                \"_\"\n-            } else {\n-                \"\"\n-            };\n+            // Write an LD version script\n             let res = (|| -> io::Result<()> {\n                 let mut f = BufWriter::new(File::create(&path)?);\n+                writeln!(f, \"{{\\n  global:\")?;\n                 for sym in self.info.exports[&crate_type].iter() {\n-                    writeln!(f, \"{}{}\", prefix, sym)?;\n+                    writeln!(f, \"    {};\", sym)?;\n                 }\n+                writeln!(f, \"\\n  local:\\n    *;\\n}};\")?;\n                 Ok(())\n             })();\n             if let Err(e) = res {\n-                self.sess.fatal(&format!(\"failed to write lib.def file: {}\", e));\n-            }\n-            if self.sess.target.target.options.is_like_osx {\n-                arg.push(\"-Wl,-exported_symbols_list,\");\n-            } else {\n-                arg.push(\"-Wl,--retain-symbols-file=\");\n+                self.sess.fatal(&format!(\"failed to write version script: {}\", e));\n             }\n-            arg.push(&path);\n         }\n \n+        if self.sess.target.target.options.is_like_osx {\n+            arg.push(\"-Wl,-exported_symbols_list,\");\n+        } else if self.sess.target.target.options.is_like_solaris {\n+            arg.push(\"-Wl,-M,\");\n+        } else {\n+            arg.push(\"-Wl,--version-script=\");\n+        }\n+\n+        arg.push(&path);\n         self.cmd.arg(arg);\n     }\n "}]}