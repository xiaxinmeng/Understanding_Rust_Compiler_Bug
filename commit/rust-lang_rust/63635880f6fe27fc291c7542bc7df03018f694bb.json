{"sha": "63635880f6fe27fc291c7542bc7df03018f694bb", "node_id": "C_kwDOAAsO6NoAKDYzNjM1ODgwZjZmZTI3ZmMyOTFjNzU0MmJjN2RmMDMwMThmNjk0YmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-07T18:57:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-07T18:57:44Z"}, "message": "Rollup merge of #108583 - compiler-errors:rpitit-default-method-with-nested-rpitits, r=spastorino\n\nAccount for binders correctly when adding default RPITIT method assumption\n\nAs of #108203, we install extra projection predicates into the param-env of a default trait method when it has return-position `impl Trait` (or is async).\n\nThe implementation didn't account for the fact that it's walking into and out of binders, so we just need to shift all the debruijn indices accordingly when constructing the projection predicates.\n\nFixes #108579\n\nr? types", "tree": {"sha": "c20eef780a20955c94b19b925a6d71e14f826650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c20eef780a20955c94b19b925a6d71e14f826650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63635880f6fe27fc291c7542bc7df03018f694bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkB4koCRBK7hj4Ov3rIwAAtEsIAJx6eq6pb5vl6u0jv/x73r+n\nRH3kyX1k3g0N426va4HJQBHFM3JuBbXwWCD/eL64ZZqiLvyxeh+DWzIqHAB7lqhK\n89JkiRUkm5lcob6YJzjsSyPJl26xMoZIaMC8SN8bDTfmpMPs2xUrTR/miqw8sjGa\nLthkFVIkwC6HfvY1pN7dISXjS/OcUz9NAdBuR84Z87RtqiShPx4E9e266mOP/7AS\nUOl/x3wFdWumapB/lWJmONvpuI9UkiulMDQ/g7E2dLLcXmF+oaNlOnxJ734Q/W+V\nPQeb+2/oQbAfdT3GWziGlpejcft4hYbX0gl3sfnk2UrJKBEiYjduTuxdgZf9+j0=\n=t6zf\n-----END PGP SIGNATURE-----\n", "payload": "tree c20eef780a20955c94b19b925a6d71e14f826650\nparent 23beda44ea14342f608abf6b3d67a703c1fe9e80\nparent b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678215464 +0100\ncommitter GitHub <noreply@github.com> 1678215464 +0100\n\nRollup merge of #108583 - compiler-errors:rpitit-default-method-with-nested-rpitits, r=spastorino\n\nAccount for binders correctly when adding default RPITIT method assumption\n\nAs of #108203, we install extra projection predicates into the param-env of a default trait method when it has return-position `impl Trait` (or is async).\n\nThe implementation didn't account for the fact that it's walking into and out of binders, so we just need to shift all the debruijn indices accordingly when constructing the projection predicates.\n\nFixes #108579\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63635880f6fe27fc291c7542bc7df03018f694bb", "html_url": "https://github.com/rust-lang/rust/commit/63635880f6fe27fc291c7542bc7df03018f694bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63635880f6fe27fc291c7542bc7df03018f694bb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23beda44ea14342f608abf6b3d67a703c1fe9e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/23beda44ea14342f608abf6b3d67a703c1fe9e80", "html_url": "https://github.com/rust-lang/rust/commit/23beda44ea14342f608abf6b3d67a703c1fe9e80"}, {"sha": "b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16", "html_url": "https://github.com/rust-lang/rust/commit/b7e0ca993d0d1d15ed211ceec53ee4ffe526cb16"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "70c9de91fbfef62a4d50b04cb488dd07a833005c", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63635880f6fe27fc291c7542bc7df03018f694bb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63635880f6fe27fc291c7542bc7df03018f694bb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=63635880f6fe27fc291c7542bc7df03018f694bb", "patch": "@@ -142,12 +142,14 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         && tcx.associated_item(def_id).container == ty::AssocItemContainer::TraitContainer\n     {\n         let sig = tcx.fn_sig(def_id).subst_identity();\n-        sig.visit_with(&mut ImplTraitInTraitFinder {\n+        // We accounted for the binder of the fn sig, so skip the binder.\n+        sig.skip_binder().visit_with(&mut ImplTraitInTraitFinder {\n             tcx,\n             fn_def_id: def_id,\n             bound_vars: sig.bound_vars(),\n             predicates: &mut predicates,\n             seen: FxHashSet::default(),\n+            depth: ty::INNERMOST,\n         });\n     }\n \n@@ -244,15 +246,36 @@ struct ImplTraitInTraitFinder<'a, 'tcx> {\n     fn_def_id: DefId,\n     bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     seen: FxHashSet<DefId>,\n+    depth: ty::DebruijnIndex,\n }\n \n impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n+        &mut self,\n+        binder: &ty::Binder<'tcx, T>,\n+    ) -> std::ops::ControlFlow<Self::BreakTy> {\n+        self.depth.shift_in(1);\n+        let binder = binder.super_visit_with(self);\n+        self.depth.shift_out(1);\n+        binder\n+    }\n+\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n             && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n             && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n+            // We have entered some binders as we've walked into the\n+            // bounds of the RPITIT. Shift these binders back out when\n+            // constructing the top-level projection predicate.\n+            let alias_ty = self.tcx.fold_regions(alias_ty, |re, _| {\n+                if let ty::ReLateBound(index, bv) = re.kind() {\n+                    self.tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n+                } else {\n+                    re\n+                }\n+            });\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {"}, {"sha": "5cf90c5d93c24da7f00de5e0bf54167239791870", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63635880f6fe27fc291c7542bc7df03018f694bb/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63635880f6fe27fc291c7542bc7df03018f694bb/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=63635880f6fe27fc291c7542bc7df03018f694bb", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+trait Trait {\n+    type Type;\n+\n+    // Check that we're adjusting bound vars correctly when installing the default\n+    // method projection assumptions.\n+    fn method(&self) -> impl Trait<Type = impl Sized + '_>;\n+}\n+\n+fn main() {}"}, {"sha": "7c7ebcdb7e717d79f847dc0165615ec6d97b8722", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63635880f6fe27fc291c7542bc7df03018f694bb/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63635880f6fe27fc291c7542bc7df03018f694bb/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.stderr?ref=63635880f6fe27fc291c7542bc7df03018f694bb", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-binder-shifting.rs:3:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}