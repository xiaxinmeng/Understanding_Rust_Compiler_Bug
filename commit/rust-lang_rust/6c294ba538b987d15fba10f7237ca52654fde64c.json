{"sha": "6c294ba538b987d15fba10f7237ca52654fde64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjk0YmE1MzhiOTg3ZDE1ZmJhMTBmNzIzN2NhNTI2NTRmZGU2NGM=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-05T16:29:31Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:13Z"}, "message": "add test case, cleanup", "tree": {"sha": "8571b89e4a2a6f02c2a2913614dd0944ff7af617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8571b89e4a2a6f02c2a2913614dd0944ff7af617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c294ba538b987d15fba10f7237ca52654fde64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c294ba538b987d15fba10f7237ca52654fde64c", "html_url": "https://github.com/rust-lang/rust/commit/6c294ba538b987d15fba10f7237ca52654fde64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c294ba538b987d15fba10f7237ca52654fde64c/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1d21caec3a7d11f847a07769062804442338de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1d21caec3a7d11f847a07769062804442338de", "html_url": "https://github.com/rust-lang/rust/commit/fe1d21caec3a7d11f847a07769062804442338de"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "9c491c7dfce53ab2cc16eaa10d4a11de705d121d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6c294ba538b987d15fba10f7237ca52654fde64c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c294ba538b987d15fba10f7237ca52654fde64c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6c294ba538b987d15fba10f7237ca52654fde64c", "patch": "@@ -14,7 +14,6 @@ use ast::{item_mac, Mrk, Stmt_, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::{token_tree};\n use ast;\n use ast_util::{mtwt_outer_mark, new_rename, new_mark};\n-use ast_util;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n@@ -1549,6 +1548,7 @@ mod test {\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord, EMPTY_CTXT};\n     use ast_util::{get_sctable, mtwt_marksof, mtwt_resolve, new_rename};\n+    use ast_util;\n     use codemap;\n     use codemap::Spanned;\n     use fold;\n@@ -1557,8 +1557,7 @@ mod test {\n     use parse::token;\n     use print::pprust;\n     use std;\n-    use std::vec;\n-    use util::parser_testing::{string_to_crate, string_to_crate_and_sess, string_to_item};\n+    use util::parser_testing::{string_to_crate, string_to_crate_and_sess};\n     use util::parser_testing::{string_to_pat, string_to_tts, strs_to_idents};\n     use visit;\n \n@@ -1779,9 +1778,11 @@ mod test {\n                   macro_rules! user(($x:ident) => ({letty!($x); $x}))\n                   fn main() -> int {user!(z)}\",\n                  ~[~[0]], false),\n-                // can't believe I missed this one : a macro def that refers to a local var:\n-                (\"fn main() {let x = 19; macro_rules! getx(()=>(x)); getx!();}\",\n-                ~[~[0]], true)\n+                // FIXME #8062: this test exposes a *potential* bug; our system does\n+                // not behave exactly like MTWT, but I haven't thought of a way that\n+                // this could cause a bug in Rust, yet.\n+                // (\"fn main() {let hrcoo = 19; macro_rules! getx(()=>(hrcoo)); getx!();}\",\n+                // ~[~[0]], true)\n                 // FIXME #6994: the next string exposes the bug referred to in issue 6994, so I'm\n                 // commenting it out.\n                 // the z flows into and out of two macros (g & f) along one path, and one\n@@ -1800,6 +1801,7 @@ mod test {\n \n     // run one of the renaming tests\n     fn run_renaming_test(t : &renaming_test) {\n+        let invalid_name = token::special_idents::invalid.name;\n         let (teststr, bound_connections, bound_ident_check) = match *t {\n             (ref str,ref conns, bic) => (str.to_managed(), conns.clone(), bic)\n         };\n@@ -1814,7 +1816,7 @@ mod test {\n         assert_eq!(bindings.len(),bound_connections.len());\n         for (binding_idx,shouldmatch) in bound_connections.iter().enumerate() {\n             let binding_name = mtwt_resolve(bindings[binding_idx]);\n-            let binding_marks = mtwt_marksof(bindings[binding_idx].ctxt,binding_name);\n+            let binding_marks = mtwt_marksof(bindings[binding_idx].ctxt,invalid_name);\n             // shouldmatch can't name varrefs that don't exist:\n             assert!((shouldmatch.len() == 0) ||\n                     (varrefs.len() > *shouldmatch.iter().max().unwrap()));\n@@ -1825,20 +1827,17 @@ mod test {\n                     assert_eq!(varref.segments.len(),1);\n                     let varref_name = mtwt_resolve(varref.segments[0].identifier);\n                     let varref_marks = mtwt_marksof(varref.segments[0].identifier.ctxt,\n-                                                    binding_name);\n+                                                    invalid_name);\n                     if (!(varref_name==binding_name)){\n                         std::io::println(\"uh oh, should match but doesn't:\");\n                         std::io::println(fmt!(\"varref: %?\",varref));\n                         std::io::println(fmt!(\"binding: %?\", bindings[binding_idx]));\n-                        let table = get_sctable();\n-                        std::io::println(\"SC table:\");\n-                        for (idx,val) in table.table.iter().enumerate() {\n-                            std::io::println(fmt!(\"%4u : %?\",idx,val));\n-                        }\n+                        ast_util::display_sctable(get_sctable());\n                     }\n                     assert_eq!(varref_name,binding_name);\n                     if (bound_ident_check) {\n-                        // we need to check the marks, too:\n+                        // we're checking bound-identifier=?, and the marks\n+                        // should be the same, too:\n                         assert_eq!(varref_marks,binding_marks.clone());\n                     }\n                 } else {\n@@ -1849,7 +1848,7 @@ mod test {\n                         std::io::println(\"uh oh, matches but shouldn't:\");\n                         std::io::println(fmt!(\"varref: %?\",varref));\n                         std::io::println(fmt!(\"binding: %?\", bindings[binding_idx]));\n-                        std::io::println(fmt!(\"sc_table: %?\",get_sctable()));\n+                        ast_util::display_sctable(get_sctable());\n                     }\n                     assert!(!fail);\n                 }"}, {"sha": "6b3a95a14f8e6cb87b13fe05aaaff446b81d838a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c294ba538b987d15fba10f7237ca52654fde64c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c294ba538b987d15fba10f7237ca52654fde64c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=6c294ba538b987d15fba10f7237ca52654fde64c", "patch": "@@ -729,8 +729,6 @@ pub fn mtwt_token_eq(t1 : &Token, t2 : &Token) -> bool {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use std::io;\n-    use std::managed;\n     use ast;\n     use ast_util;\n "}]}