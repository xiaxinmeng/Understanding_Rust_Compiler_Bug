{"sha": "4c0d41cffae78725c20a40302e81ef1246c3e4c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGQ0MWNmZmFlNzg3MjVjMjBhNDAzMDJlODFlZjEyNDZjM2U0Yzc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-14T00:59:21Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-14T00:59:21Z"}, "message": "Add a malloc_dyn upcall for dynamically sized allocations on the shared heap.", "tree": {"sha": "22bc0c98ad81612eff343237e5cc8d529e552f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22bc0c98ad81612eff343237e5cc8d529e552f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0d41cffae78725c20a40302e81ef1246c3e4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0d41cffae78725c20a40302e81ef1246c3e4c7", "html_url": "https://github.com/rust-lang/rust/commit/4c0d41cffae78725c20a40302e81ef1246c3e4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0d41cffae78725c20a40302e81ef1246c3e4c7/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f4b63dffb49e65d3de4ecbef573e15b0f44e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f4b63dffb49e65d3de4ecbef573e15b0f44e36", "html_url": "https://github.com/rust-lang/rust/commit/31f4b63dffb49e65d3de4ecbef573e15b0f44e36"}], "stats": {"total": 141, "additions": 102, "deletions": 39}, "files": [{"sha": "6b04028c3fc9454f200df6b446ae761ba9bbe0ed", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -2,14 +2,12 @@\n #include \"rust_globals.h\"\n #include \"rust_task.h\"\n #include \"rust_env.h\"\n+#include \"rust_util.h\"\n \n // #define DUMP_BOXED_REGION\n \n-rust_opaque_box *boxed_region::malloc(type_desc *td) {\n-    size_t header_size = sizeof(rust_opaque_box);\n-    size_t body_size = td->size;\n-    size_t body_align = td->align;\n-    size_t total_size = align_to(header_size, body_align) + body_size;\n+rust_opaque_box *boxed_region::malloc(type_desc *td, size_t body_size) {\n+    size_t total_size = get_box_size(body_size, td->align);\n     rust_opaque_box *box =\n       (rust_opaque_box*)backing_region->malloc(total_size, \"@\");\n     box->td = td;\n@@ -22,14 +20,14 @@ rust_opaque_box *boxed_region::malloc(type_desc *td) {\n     LOG(rust_get_current_task(), box,\n         \"@malloc()=%p with td %p, size %lu==%lu+%lu, \"\n         \"align %lu, prev %p, next %p\\n\",\n-        box, td, total_size, header_size, body_size, body_align,\n-        box->prev, box->next);\n+        box, td, total_size, sizeof(rust_opaque_box), body_size,\n+        td->align, box->prev, box->next);\n \n     return box;\n }\n \n-rust_opaque_box *boxed_region::calloc(type_desc *td) {\n-    rust_opaque_box *box = malloc(td);\n+rust_opaque_box *boxed_region::calloc(type_desc *td, size_t body_size) {\n+    rust_opaque_box *box = malloc(td, body_size);\n     memset(box_body(box), 0, td->size);\n     return box;\n }\n@@ -62,3 +60,13 @@ void boxed_region::free(rust_opaque_box *box) {\n \n     backing_region->free(box);\n }\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "17282d3e5d5da3e9060e1b7ce99e6fc38226d73f", "filename": "src/rt/boxed_region.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Fboxed_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Fboxed_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.h?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -34,9 +34,19 @@ class boxed_region {\n \n     rust_opaque_box *first_live_alloc() { return live_allocs; }\n \n-    rust_opaque_box *malloc(type_desc *td);\n-    rust_opaque_box *calloc(type_desc *td);\n+    rust_opaque_box *malloc(type_desc *td, size_t body_size);\n+    rust_opaque_box *calloc(type_desc *td, size_t body_size);\n     void free(rust_opaque_box *box);\n };\n \n #endif /* BOXED_REGION_H */\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "dc743aceef800fff5af586436f8c933bd4ee4532", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -62,6 +62,11 @@ rust_kernel::malloc(size_t size, const char *tag) {\n     return _region.malloc(size, tag);\n }\n \n+void *\n+rust_kernel::calloc(size_t size, const char *tag) {\n+    return _region.calloc(size, tag);\n+}\n+\n void *\n rust_kernel::realloc(void *mem, size_t size) {\n     return _region.realloc(mem, size);"}, {"sha": "ba2c6a7bff059f78be4a615b3fe37f0b8abfd93d", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -113,6 +113,7 @@ class rust_kernel {\n     void fatal(char const *fmt, ...);\n \n     void *malloc(size_t size, const char *tag);\n+    void *calloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     memory_region *region() { return &_region; }\n@@ -165,3 +166,13 @@ template <typename T> struct kernel_owned {\n };\n \n #endif /* RUST_KERNEL_H */\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "f5745fe4b86fd62e6f9e7873135968be5a3e903b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -144,23 +144,15 @@ exchange_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n \n     LOG(task, mem, \"upcall exchange malloc(0x%\" PRIxPTR \")\", td);\n \n-    // Copied from boxed_region\n-    size_t header_size = sizeof(rust_opaque_box);\n-    size_t body_size = size;\n-    size_t body_align = td->align;\n-    // FIXME: This alignment calculation is suspicious. Is it right?\n-    size_t total_size = align_to(header_size, body_align) + body_size;\n-\n-    void *p = task->kernel->malloc(total_size, \"exchange malloc\");\n+    size_t total_size = get_box_size(size, td->align);\n+    void *p = task->kernel->calloc(total_size, \"exchange malloc\");\n \n     rust_opaque_box *header = static_cast<rust_opaque_box*>(p);\n     header->ref_count = -1; // This is not ref counted\n     header->td = td;\n     header->prev = 0;\n     header->next = 0;\n \n-    memset(&header[1], '\\0', body_size);\n-\n     return (uintptr_t)header;\n }\n \n@@ -174,8 +166,7 @@ upcall_s_exchange_malloc(s_exchange_malloc_args *args) {\n     rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n-    uintptr_t retval = exchange_malloc(task, args->td, args->td->size);\n-    args->retval = retval;\n+    args->retval = exchange_malloc(task, args->td, args->td->size);\n }\n \n extern \"C\" CDECL uintptr_t\n@@ -196,8 +187,7 @@ upcall_s_exchange_malloc_dyn(s_exchange_malloc_dyn_args *args) {\n     rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n-    uintptr_t retval = exchange_malloc(task, args->td, args->size);\n-    args->retval = retval;\n+    args->retval = exchange_malloc(task, args->td, args->size);\n }\n \n extern \"C\" CDECL uintptr_t\n@@ -228,31 +218,37 @@ upcall_exchange_free(void *ptr) {\n  * Allocate an object in the task-local heap.\n  */\n \n-struct s_malloc_args {\n-    uintptr_t retval;\n-    type_desc *td;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_malloc(s_malloc_args *args) {\n-    rust_task *task = rust_get_current_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", args->td);\n+extern \"C\" CDECL uintptr_t\n+shared_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n+    LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", td);\n \n     cc::maybe_cc(task);\n \n     // FIXME--does this have to be calloc?\n-    rust_opaque_box *box = task->boxed.calloc(args->td);\n+    rust_opaque_box *box = task->boxed.calloc(td, size);\n     void *body = box_body(box);\n \n     debug::maybe_track_origin(task, box);\n \n     LOG(task, mem,\n         \"upcall malloc(0x%\" PRIxPTR \") = box 0x%\" PRIxPTR\n         \" with body 0x%\" PRIxPTR,\n-        args->td, (uintptr_t)box, (uintptr_t)body);\n-    args->retval = (uintptr_t) box;\n+        td, (uintptr_t)box, (uintptr_t)body);\n+\n+    return (uintptr_t)box;\n+}\n+\n+struct s_malloc_args {\n+    uintptr_t retval;\n+    type_desc *td;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_malloc(s_malloc_args *args) {\n+    rust_task *task = rust_get_current_task();\n+    LOG_UPCALL_ENTRY(task);\n+\n+    args->retval = shared_malloc(task, args->td, args->td->size);\n }\n \n extern \"C\" CDECL uintptr_t\n@@ -262,6 +258,28 @@ upcall_malloc(type_desc *td) {\n     return args.retval;\n }\n \n+struct s_malloc_dyn_args {\n+    uintptr_t retval;\n+    type_desc *td;\n+    uintptr_t size;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_malloc_dyn(s_malloc_dyn_args *args) {\n+    rust_task *task = rust_get_current_task();\n+    LOG_UPCALL_ENTRY(task);\n+\n+    args->retval = shared_malloc(task, args->td, args->size);\n+}\n+\n+extern \"C\" CDECL uintptr_t\n+upcall_malloc_dyn(type_desc *td, uintptr_t size) {\n+    s_malloc_dyn_args args = {0, td, size};\n+    UPCALL_SWITCH_STACK(&args, upcall_s_malloc_dyn);\n+    return args.retval;\n+}\n+\n+\n /**********************************************************************\n  * Called whenever an object in the task-local heap is freed.\n  */"}, {"sha": "a7bb56c7c3780a1a273a5cb68a9a1c443276e153", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -104,6 +104,13 @@ make_str_vec(rust_kernel* kernel, size_t nstrs, char **strs) {\n     return v;\n }\n \n+inline size_t get_box_size(size_t body_size, size_t body_align) {\n+    size_t header_size = sizeof(rust_opaque_box);\n+    // FIXME: This alignment calculation is suspicious. Is it right?\n+    size_t total_size = align_to(header_size, body_align) + body_size;\n+    return total_size;\n+}\n+\n // Initialization helpers for ISAAC RNG\n \n inline void isaac_seed(rust_kernel* kernel, uint8_t* dest)"}, {"sha": "c24e23d26552f4d4e9a6de81e38590fb917fba91", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0d41cffae78725c20a40302e81ef1246c3e4c7/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=4c0d41cffae78725c20a40302e81ef1246c3e4c7", "patch": "@@ -11,6 +11,7 @@ type upcalls =\n     {_fail: ValueRef,\n      trace: ValueRef,\n      malloc: ValueRef,\n+     malloc_dyn: ValueRef,\n      free: ValueRef,\n      exchange_malloc: ValueRef,\n      exchange_malloc_dyn: ValueRef,\n@@ -58,6 +59,9 @@ fn declare_upcalls(targ_cfg: @session::config,\n                               int_t]),\n           malloc:\n               nothrow(d(\"malloc\", [T_ptr(tydesc_type)],\n+          malloc_dyn:\n+              nothrow(d(\"malloc_dyn\",\n+                        [T_ptr(tydesc_type), int_t],\n                         T_ptr(T_i8()))),\n           free:\n               nothrow(dv(\"free\", [T_ptr(T_i8())])),"}]}