{"sha": "993f13a2cf125610dc6a34bf68aa6afd87a723d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5M2YxM2EyY2YxMjU2MTBkYzZhMzRiZjY4YWE2YWZkODdhNzIzZDY=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-04-28T03:29:49Z"}, "committer": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-04-28T03:29:49Z"}, "message": "update documentation of tuple/unit structs\n\nI made the \"tuple structs are useless\" editorializing a bit weaker and moved it to the end. Feel free to overrule me on that.\r\n\r\nI also added an example of how to unpack a tuple struct with dot notation, because it came up on IRC.\r\n\r\n`braced_empty_structs` is stable now, so I updated the example for unit-like structs to use that syntax. Should we show both ways?\r\n\r\ncc @ubsan\r\nr? @steveklabnik or @GuillameGomez", "tree": {"sha": "f3ed4ae0d4251564d3fc705ad3c794249c65be92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ed4ae0d4251564d3fc705ad3c794249c65be92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/993f13a2cf125610dc6a34bf68aa6afd87a723d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/993f13a2cf125610dc6a34bf68aa6afd87a723d6", "html_url": "https://github.com/rust-lang/rust/commit/993f13a2cf125610dc6a34bf68aa6afd87a723d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/993f13a2cf125610dc6a34bf68aa6afd87a723d6/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda7c1cf2463443aee4a2f51a5141bc7ce4a4f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda7c1cf2463443aee4a2f51a5141bc7ce4a4f97", "html_url": "https://github.com/rust-lang/rust/commit/cda7c1cf2463443aee4a2f51a5141bc7ce4a4f97"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "404eac25308c067dd7d0881a527c29ebf8015aa0", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/993f13a2cf125610dc6a34bf68aa6afd87a723d6/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/993f13a2cf125610dc6a34bf68aa6afd87a723d6/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=993f13a2cf125610dc6a34bf68aa6afd87a723d6", "patch": "@@ -163,11 +163,48 @@ struct Point(i32, i32, i32);\n let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n+\n Here, `black` and `origin` are not equal, even though they contain the same\n values.\n \n-It is almost always better to use a `struct` than a tuple struct. We\n-would write `Color` and `Point` like this instead:\n+The members of a tuple struct may be accessed by dot notation or destructuring\n+`let`, just like regular tuples:\n+\n+```rust\n+# struct Color(i32, i32, i32);\n+# struct Point(i32, i32, i32);\n+# let black = Color(0, 0, 0);\n+# let origin = Point(0, 0, 0);\n+let black_r = black.0;\n+let (_, origin_y, origin_z) = origin;\n+```\n+\n+One case when a tuple struct is very useful is when it has only one element.\n+We call this the \u2018newtype\u2019 pattern, because it allows you to create a new type\n+that is distinct from its contained value and also expresses its own semantic\n+meaning:\n+\n+```rust\n+struct Inches(i32);\n+\n+let length = Inches(10);\n+\n+let Inches(integer_length) = length;\n+println!(\"length is {} inches\", integer_length);\n+```\n+\n+As above, you can extract the inner integer type through a destructuring `let`.\n+In this case, the `let Inches(integer_length)` assigns `10` to `integer_length`.\n+We could have used dot notation to do the same thing:\n+\n+```rust\n+# struct Inches(i32);\n+# let length = Inches(10);\n+let integer_length = length.0;\n+```\n+\n+It's always possible to use a `struct` than a tuple struct, and can be clearer.\n+We would write `Color` and `Point` like this instead:\n \n ```rust\n struct Color {\n@@ -187,32 +224,14 @@ Good names are important, and while values in a tuple struct can be\n referenced with dot notation as well, a `struct` gives us actual names,\n rather than positions.\n \n-There _is_ one case when a tuple struct is very useful, though, and that is when\n-it has only one element. We call this the \u2018newtype\u2019 pattern, because\n-it allows you to create a new type that is distinct from its contained value\n-and also expresses its own semantic meaning:\n-\n-```rust\n-struct Inches(i32);\n-\n-let length = Inches(10);\n-\n-let Inches(integer_length) = length;\n-println!(\"length is {} inches\", integer_length);\n-```\n-\n-As you can see here, you can extract the inner integer type through a\n-destructuring `let`, as with regular tuples. In this case, the\n-`let Inches(integer_length)` assigns `10` to `integer_length`.\n-\n # Unit-like structs\n \n You can define a `struct` with no members at all:\n \n ```rust\n-struct Electron;\n+struct Electron {}\n \n-let x = Electron;\n+let x = Electron {};\n ```\n \n Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty"}]}