{"sha": "32f60560798a9cec098f13de3af0c350e6dc7485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjYwNTYwNzk4YTljZWMwOThmMTNkZTNhZjBjMzUwZTZkYzc0ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T15:17:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T15:17:32Z"}, "message": "Auto merge of #44098 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 7 pull requests\n\n- Successful merges: #43776, #43966, #43979, #44072, #44086, #44090, #44091\n- Failed merges:", "tree": {"sha": "1478abfdd87ca6b6296355b02edf36860ac2f2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1478abfdd87ca6b6296355b02edf36860ac2f2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f60560798a9cec098f13de3af0c350e6dc7485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f60560798a9cec098f13de3af0c350e6dc7485", "html_url": "https://github.com/rust-lang/rust/commit/32f60560798a9cec098f13de3af0c350e6dc7485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f60560798a9cec098f13de3af0c350e6dc7485/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669d4770f2bac53a58bc9be0907f879b451be9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/669d4770f2bac53a58bc9be0907f879b451be9b2", "html_url": "https://github.com/rust-lang/rust/commit/669d4770f2bac53a58bc9be0907f879b451be9b2"}, {"sha": "502a11d53ed56aca9c35ae1c43117732cb221e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/502a11d53ed56aca9c35ae1c43117732cb221e16", "html_url": "https://github.com/rust-lang/rust/commit/502a11d53ed56aca9c35ae1c43117732cb221e16"}], "stats": {"total": 352, "additions": 264, "deletions": 88}, "files": [{"sha": "7e8fde2034640d4b033e8746590fb9d04a3ace11", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -29,7 +29,7 @@\n \n In order to avoid one-off dependencies for this task, this script uses\n a reasonably working HTML parser and the existing XPath implementation\n-from Python 2's standard library. Hopefully we won't render\n+from Python's standard library. Hopefully we won't render\n non-well-formed HTML.\n \n # Commands\n@@ -110,11 +110,17 @@\n import re\n import shlex\n from collections import namedtuple\n-from HTMLParser import HTMLParser\n+try:\n+    from html.parser import HTMLParser\n+except ImportError:\n+    from HTMLParser import HTMLParser\n from xml.etree import cElementTree as ET\n \n # &larrb;/&rarrb; are not in HTML 4 but are in HTML 5\n-from htmlentitydefs import entitydefs\n+try:\n+    from html.entities import entitydefs\n+except ImportError:\n+    from htmlentitydefs import entitydefs\n entitydefs['larrb'] = u'\\u21e4'\n entitydefs['rarrb'] = u'\\u21e5'\n entitydefs['nbsp'] = ' '\n@@ -123,6 +129,11 @@\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n                      'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'])\n \n+# Python 2 -> 3 compatibility\n+try:\n+    unichr\n+except NameError:\n+    unichr = chr\n \n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n@@ -184,12 +195,8 @@ def concat_multi_lines(f):\n \n         # strip the common prefix from the current line if needed\n         if lastline is not None:\n-            maxprefix = 0\n-            for i in xrange(min(len(line), len(lastline))):\n-                if line[i] != lastline[i]:\n-                    break\n-                maxprefix += 1\n-            line = line[maxprefix:].lstrip()\n+            common_prefix = os.path.commonprefix([line, lastline])\n+            line = line[len(common_prefix):].lstrip()\n \n         firstlineno = firstlineno or lineno\n         if line.endswith('\\\\'):\n@@ -213,7 +220,7 @@ def concat_multi_lines(f):\n \n \n def get_commands(template):\n-    with open(template, 'rUb') as f:\n+    with open(template, 'rU') as f:\n         for lineno, line in concat_multi_lines(f):\n             m = LINE_PATTERN.search(line)\n             if not m:\n@@ -372,7 +379,7 @@ def check_command(c, cache):\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n-                    cerr = err.message\n+                    cerr = str(err)\n                     ret = False\n             elif len(c.args) == 2: # @has/matches <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n@@ -413,9 +420,9 @@ def check_command(c, cache):\n \n     except FailedCheck as err:\n         message = '@{}{} check failed'.format('!' if c.negated else '', c.cmd)\n-        print_err(c.lineno, c.context, err.message, message)\n+        print_err(c.lineno, c.context, str(err), message)\n     except InvalidCheck as err:\n-        print_err(c.lineno, c.context, err.message)\n+        print_err(c.lineno, c.context, str(err))\n \n def check(target, commands):\n     cache = CachedFiles(target)"}, {"sha": "f14f27023249e3423cbba1cdab383d6b65a7a71c", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -110,7 +110,7 @@ impl Layout {\n \n     /// Creates a layout, bypassing all checks.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n     /// a power-of-two that is also less than or equal to 2^31, nor\n@@ -485,7 +485,7 @@ pub unsafe trait Alloc {\n     /// behavior, e.g. to ensure initialization to particular sets of\n     /// bit patterns.)\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure that `layout` has non-zero size.\n@@ -513,7 +513,7 @@ pub unsafe trait Alloc {\n \n     /// Deallocate the memory referenced by `ptr`.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -617,7 +617,7 @@ pub unsafe trait Alloc {\n     /// behavior is well-defined (though underspecified) when this\n     /// constraint is violated; further discussion below.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -688,7 +688,7 @@ pub unsafe trait Alloc {\n     /// Behaves like `alloc`, but also ensures that the contents\n     /// are set to zero before being returned.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -714,7 +714,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -736,7 +736,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `realloc` is.\n     ///\n@@ -770,7 +770,7 @@ pub unsafe trait Alloc {\n     /// memory block referenced by `ptr` has not been transferred, and\n     /// the contents of the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -827,7 +827,7 @@ pub unsafe trait Alloc {\n     /// the memory block has not been transferred, and the contents of\n     /// the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -920,7 +920,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:\n@@ -993,7 +993,7 @@ pub unsafe trait Alloc {\n     /// The returned block is suitable for passing to the\n     /// `alloc`/`realloc` methods of this allocator.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -1037,7 +1037,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:"}, {"sha": "82aac4dbf63346fa2897e215df8b329faf34a7ee", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -633,7 +633,7 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n /// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n /// closures become directly usable.)\n ///\n-/// ### Example\n+/// # Examples\n ///\n /// Here is a snippet of code which creates a hashmap full of boxed\n /// once closures and then removes them one by one, calling each"}, {"sha": "7787ace944119861181c671b805688ae763174be", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -171,7 +171,7 @@ mod hack {\n impl<T> [T] {\n     /// Returns the number of elements in the slice.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -185,7 +185,7 @@ impl<T> [T] {\n \n     /// Returns `true` if the slice has a length of 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -523,7 +523,7 @@ impl<T> [T] {\n \n     /// Reverses the order of elements in the slice, in place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = [1, 2, 3];\n@@ -580,7 +580,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['r', 'u', 's', 't'];\n@@ -613,7 +613,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n@@ -1040,7 +1040,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1074,7 +1074,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1419,7 +1419,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];\n@@ -1445,7 +1445,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];"}, {"sha": "79b2bbce2af7cf13e59ad095572ce3a4e6b2d54a", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -1714,7 +1714,7 @@ impl str {\n     ///\n     /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Basic usage\n     ///"}, {"sha": "b1919c7c968c9bdda239c74ce22a2c64fd69aebe", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -82,7 +82,7 @@ use boxed::Box;\n ///\n /// # Examples\n ///\n-/// You can create a `String` from a literal string with `String::from`:\n+/// You can create a `String` from a literal string with [`String::from`]:\n ///\n /// ```\n /// let hello = String::from(\"Hello, world!\");\n@@ -98,6 +98,7 @@ use boxed::Box;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n+/// [`String::from`]: #method.from\n /// [`char`]: ../../std/primitive.char.html\n /// [`push`]: #method.push\n /// [`push_str`]: #method.push_str"}, {"sha": "e0a3b8d52f40efb5df9180a1b741928196675fed", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -998,7 +998,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// A method would interfere with methods of the same name on the contents\n     /// of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, Ref};\n@@ -1040,7 +1040,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// `RefMut::map(...)`.  A method would interfere with methods of the same\n     /// name on the contents of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, RefMut};"}, {"sha": "b594c886b64f5d35a80a9ccd79b3836954d0f63e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n /// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -153,7 +153,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -290,7 +290,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -361,7 +361,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -432,7 +432,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;"}, {"sha": "4b866cab1eae2f00b97e5d0af34240ec4fb21904", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -901,7 +901,7 @@ impl<T> ManuallyDrop<T> {\n \n     /// Manually drops the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the"}, {"sha": "112f424f7a8bb46b64f56984bc2f9d108fae44f4", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -20,7 +20,6 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"unix\".to_string()),\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n-        no_integrated_as: true,\n         .. Default::default()\n     }\n }"}, {"sha": "cbc4ebe90fd091070c9ec648f8b049d8905254df", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -160,21 +160,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n-        let maybe_def = match expr.node {\n-            hir::ExprCall(ref callee, _) => {\n-                match callee.node {\n-                    hir::ExprPath(ref qpath) => Some(cx.tables.qpath_def(qpath, callee.hir_id)),\n-                    _ => None\n-                }\n-            },\n-            hir::ExprMethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n-            },\n-            _ => { None }\n-        };\n-        if let Some(def) = maybe_def {\n-            let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+        if cx.tcx.sess.features.borrow().fn_must_use {\n+            let maybe_def = match expr.node {\n+                hir::ExprCall(ref callee, _) => {\n+                    match callee.node {\n+                        hir::ExprPath(ref qpath) => {\n+                            Some(cx.tables.qpath_def(qpath, callee.hir_id))\n+                        },\n+                        _ => None\n+                    }\n+                },\n+                hir::ExprMethodCall(..) => {\n+                    cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                },\n+                _ => None\n+            };\n+            if let Some(def) = maybe_def {\n+                let def_id = def.def_id();\n+                fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+            }\n         }\n \n         if !(ty_warned || fn_warned) {"}, {"sha": "7d6ad5286d1114b410964cea64cc19583f926829", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -323,6 +323,10 @@ impl Item {\n     pub fn is_union(&self) -> bool {\n         self.type_() == ItemType::Union\n     }\n+    pub fn is_import(&self) -> bool {\n+        self.type_() == ItemType::Import\n+    }\n+\n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n     }"}, {"sha": "5457f69cb6dab02bf9c3d420a83f94533909e4c7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -1764,6 +1764,37 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     }\n \n     indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n+    // This call is to remove reexport duplicates in cases such as:\n+    //\n+    // ```\n+    // pub mod foo {\n+    //     pub mod bar {\n+    //         pub trait Double { fn foo(); }\n+    //     }\n+    // }\n+    //\n+    // pub use foo::bar::*;\n+    // pub use foo::*;\n+    // ```\n+    //\n+    // `Double` will appear twice in the generated docs.\n+    //\n+    // FIXME: This code is quite ugly and could be improved. Small issue: DefId\n+    // can be identical even if the elements are different (mostly in imports).\n+    // So in case this is an import, we keep everything by adding a \"unique id\"\n+    // (which is the position in the vector).\n+    indices.dedup_by_key(|i| (items[*i].def_id,\n+                              if items[*i].name.as_ref().is_some() {\n+                                  Some(full_path(cx, &items[*i]).clone())\n+                              } else {\n+                                  None\n+                              },\n+                              items[*i].type_(),\n+                              if items[*i].is_import() {\n+                                  *i\n+                              } else {\n+                                  0\n+                              }));\n \n     debug!(\"{:?}\", indices);\n     let mut curty = None;\n@@ -2925,7 +2956,13 @@ fn render_deref_methods(w: &mut fmt::Formatter, cx: &Context, impl_: &Impl,\n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n-        write!(w, \"<h3 class='impl'><span class='in-band'><code>{}</code>\", i.inner_impl())?;\n+        let id = derive_id(match i.inner_impl().trait_ {\n+            Some(ref t) => format!(\"impl-{}\", Escape(&format!(\"{:#}\", t))),\n+            None => \"impl\".to_string(),\n+        });\n+        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><code>{}</code>\",\n+               id, i.inner_impl())?;\n+        write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n         write!(w, \"</span><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {"}, {"sha": "4a3286b421ae9e40f87be7297b217da86639ee2c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -445,6 +445,10 @@ a {\n .small-section-header:hover > .anchor {\n \tdisplay: initial;\n }\n+\n+.in-band:hover > .anchor {\n+\tdisplay: initial;\n+}\n .anchor {\n \tdisplay: none;\n }"}, {"sha": "c5f4272b932fca74a3cd985a710aa09c7f3fd2f6", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -26,6 +26,7 @@ h1.fqn {\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n \tborder-bottom-color: #DDDDDD;\n }\n+\n .in-band {\n \tbackground-color: white;\n }\n@@ -83,6 +84,11 @@ pre {\n }\n \n :target { background: #FDFFD3; }\n+\n+:target > .in-band {\n+\tbackground: #FDFFD3;\n+}\n+\n .content .highlighted {\n \tcolor: #000 !important;\n \tbackground-color: #ccc;"}, {"sha": "074ab3ebd8fdca9b045f86672f04f093abf2704b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -522,7 +522,7 @@ pub trait Read {\n     /// `Read`er - the method only takes `&self` so that it can be used through\n     /// trait objects.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is unsafe because a `Read`er could otherwise return a\n     /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n@@ -903,7 +903,7 @@ impl Initializer {\n \n     /// Returns a new `Initializer` which will not zero out buffers.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This may only be called by `Read`ers which guarantee that they will not\n     /// read from buffers passed to `Read` methods, and that the return value of"}, {"sha": "240e82069ff4d64fbb0c72a33eb7a2fdd49d7672", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -20,7 +20,7 @@\n /// magnitude faster than `haystack.iter().position(|&b| b == needle)`.\n /// (See benchmarks.)\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the first position of a byte in a byte string.\n ///\n@@ -40,7 +40,7 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// Returns the index corresponding to the last occurrence of `needle` in\n /// `haystack`, or `None` if one is not found.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the last position of a byte in a byte string.\n ///"}, {"sha": "9fd8d6c91869c07422eedf0c7f10deb008ed985c", "filename": "src/libstd/sys/redox/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "98bc90dd4e13246694c14531affe2fd53cd47012", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "6354e746af26a35f46f8752145c377e4ff9da262", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -807,7 +807,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// Waiting for the complete expiration of the timeout:\n ///"}, {"sha": "09574d5ba129e80282dea9f6ff850371507d1166", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -112,8 +112,8 @@ macro_rules! declare_features {\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n //\n-// NB: The featureck.py script parses this information directly out of the source\n-// so take care when modifying it.\n+// NB: tools/tidy/src/features.rs parses this information directly out of the\n+// source, so take care when modifying it.\n \n declare_features! (\n     (active, asm, \"1.0.0\", Some(29722)),\n@@ -372,6 +372,9 @@ declare_features! (\n \n     // #[doc(cfg(...))]\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n+\n+    // allow `#[must_use]` on functions (RFC 1940)\n+    (active, fn_must_use, \"1.21.0\", Some(43302)),\n );\n \n declare_features! (\n@@ -915,20 +918,27 @@ struct Context<'a> {\n }\n \n macro_rules! gate_feature_fn {\n-    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n-        let (cx, has_feature, span, name, explain) = ($cx, $has_feature, $span, $name, $explain);\n+    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n+        let (cx, has_feature, span,\n+             name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable() {\n-            emit_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain);\n+            leveled_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain, level)\n+                .emit();\n         }\n     }}\n }\n \n macro_rules! gate_feature {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {\n-        gate_feature_fn!($cx, |x:&Features| x.$feature, $span, stringify!($feature), $explain)\n-    }\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, GateStrength::Hard)\n+    };\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, $level)\n+    };\n }\n \n impl<'a> Context<'a> {\n@@ -938,7 +948,7 @@ impl<'a> Context<'a> {\n         for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n-                    gate_feature_fn!(self, has_feature, attr.span, name, desc);\n+                    gate_feature_fn!(self, has_feature, attr.span, name, desc, GateStrength::Hard);\n                 }\n                 debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n                 return;\n@@ -1008,24 +1018,42 @@ pub enum GateIssue {\n     Library(Option<u32>)\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n                         explain: &str) {\n     feature_err(sess, feature, span, issue, explain).emit();\n }\n \n pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                   explain: &str) -> DiagnosticBuilder<'a> {\n+                       explain: &str) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n+                           explain: &str, level: GateStrength) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n     };\n \n-    let mut err = if let Some(n) = issue {\n-        diag.struct_span_err(span, &format!(\"{} (see issue #{})\", explain, n))\n+    let explanation = if let Some(n) = issue {\n+        format!(\"{} (see issue #{})\", explain, n)\n     } else {\n-        diag.struct_span_err(span, explain)\n+        explain.to_owned()\n+    };\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err(span, &explanation),\n+        GateStrength::Soft => diag.struct_span_warn(span, &explanation),\n     };\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n@@ -1035,7 +1063,15 @@ pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: Ga\n                           feature));\n     }\n \n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n     err\n+\n }\n \n const EXPLAIN_BOX_SYNTAX: &'static str =\n@@ -1092,6 +1128,12 @@ macro_rules! gate_feature_post {\n         if !span.allows_unstable() {\n             gate_feature!(cx.context, $feature, span, $explain)\n         }\n+    }};\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n+        let (cx, span) = ($cx, $span);\n+        if !span.allows_unstable() {\n+            gate_feature!(cx.context, $feature, span, $explain, $level)\n+        }\n     }}\n }\n \n@@ -1234,6 +1276,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n+                if attr::contains_name(&i.attrs[..], \"must_use\") {\n+                    gate_feature_post!(&self, fn_must_use, i.span,\n+                                       \"`#[must_use]` on functions is experimental\",\n+                                       GateStrength::Soft);\n+                }\n             }\n \n             ast::ItemKind::Struct(..) => {\n@@ -1271,7 +1318,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     and possibly buggy\");\n             }\n \n-            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n+            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, ref impl_items) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n                                        i.span,\n@@ -1284,6 +1331,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        i.span,\n                                        \"specialization is unstable\");\n                 }\n+\n+                for impl_item in impl_items {\n+                    if let ast::ImplItemKind::Method(..) = impl_item.node {\n+                        if attr::contains_name(&impl_item.attrs[..], \"must_use\") {\n+                            gate_feature_post!(&self, fn_must_use, impl_item.span,\n+                                               \"`#[must_use]` on methods is experimental\",\n+                                               GateStrength::Soft);\n+                        }\n+                    }\n+                }\n             }\n \n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {"}, {"sha": "2dd6b904072676243b72b9ef882460c0b00b6633", "filename": "src/test/compile-fail/feature-gate-fn_must_use.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    #[must_use]\n+    fn need_to_use_method() -> bool { true } //~ WARN `#[must_use]` on methods is experimental\n+}\n+\n+#[must_use]\n+fn need_to_use_it() -> bool { true } //~ WARN `#[must_use]` on functions is experimental\n+\n+\n+// Feature gates are tidy-required to have a specially named (or\n+// comment-annotated) compile-fail test (which MUST fail), but for\n+// backwards-compatibility reasons, we want `#[must_use]` on functions to be\n+// compilable even if the `fn_must_use` feature is absent, thus necessitating\n+// the usage of `#[rustc_error]` here, pragmatically if awkwardly solving this\n+// dilemma until a superior solution can be devised.\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "204190d64acc1f61a33a02b7e02a510c52ce464d", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -680,6 +680,7 @@ mod must_use {\n     mod inner { #![must_use=\"1400\"] }\n \n     #[must_use = \"1400\"] fn f() { }\n+    //~^ WARN `#[must_use]` on functions is experimental\n \n     #[must_use = \"1400\"] struct S;\n "}, {"sha": "6c4f6d0700a53b62fa44d4094d22a820264dc405", "filename": "src/test/rustdoc/remove-duplicates.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+mod foo {\n+    pub use bar::*;\n+    pub mod bar {\n+        pub trait Foo {\n+            fn foo();\n+        }\n+    }\n+}\n+\n+// @count foo/index.html '//*[@class=\"trait\"]' 1\n+pub use foo::bar::*;\n+pub use foo::*;"}, {"sha": "c549ded4db2188ea4d06d4cd42e16c9812a95f22", "filename": "src/test/ui/lint/fn_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n struct MyStruct {"}, {"sha": "242837793a0bf2f4acd1d92d6248189eeee9b443", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32f60560798a9cec098f13de3af0c350e6dc7485/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=32f60560798a9cec098f13de3af0c350e6dc7485", "patch": "@@ -1,18 +1,18 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:30:5\n+  --> $DIR/fn_must_use.rs:31:5\n    |\n-30 |     need_to_use_this_value();\n+31 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:11:9\n+  --> $DIR/fn_must_use.rs:12:9\n    |\n-11 | #![warn(unused_must_use)]\n+12 | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:33:5\n+  --> $DIR/fn_must_use.rs:34:5\n    |\n-33 |     m.need_to_use_this_method_value();\n+34 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}]}