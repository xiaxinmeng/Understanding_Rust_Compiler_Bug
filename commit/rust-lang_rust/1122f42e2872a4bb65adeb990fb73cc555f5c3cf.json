{"sha": "1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMjJmNDJlMjg3MmE0YmI2NWFkZWI5OTBmYjczY2M1NTVmNWMzY2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-25T19:43:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-05T20:32:49Z"}, "message": "Support cross-compiling to Windows using MinGW", "tree": {"sha": "d3bdf04621c949445f036c2f3e35aa2205675c99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3bdf04621c949445f036c2f3e35aa2205675c99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "html_url": "https://github.com/rust-lang/rust/commit/1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c825bc8e61c9a30adebacbe87d048324a5e1063a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c825bc8e61c9a30adebacbe87d048324a5e1063a", "html_url": "https://github.com/rust-lang/rust/commit/c825bc8e61c9a30adebacbe87d048324a5e1063a"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "c4834c804087199822e4552a19874744235992ef", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -621,6 +621,7 @@ struct PanicLocation {\n }\n \n #[no_mangle]\n+#[cfg(not(windows))]\n pub fn get_tls() -> u8 {\n     #[thread_local]\n     static A: u8 = 42;"}, {"sha": "08ceaeb65443f96400f1ba2da03a47f343b70237", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -239,7 +239,7 @@ fn main() {\n \n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     {\n         extern {\n             #[linkage = \"extern_weak\"]\n@@ -292,7 +292,7 @@ fn main() {\n \n     from_decimal_string();\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     test_tls();\n \n     #[cfg(all(not(jit), target_os = \"linux\"))]"}, {"sha": "221b512e3bd4c63445fcafe3c92c5d327a04c6b9", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -16,7 +16,8 @@ fn main() {\n     let mut stderr = stderr.lock();\n \n     // FIXME support lazy jit when multi threading\n-    #[cfg(not(lazy_jit))]\n+    // FIXME support TLS on windows\n+    #[cfg(not(any(lazy_jit, windows)))]\n     std::thread::spawn(move || {\n         println!(\"Hello from another thread!\");\n     });"}, {"sha": "d391399bee070a8fdbd8564988f43641e6c3126f", "filename": "prepare.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/prepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/prepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare.sh?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -2,6 +2,7 @@\n set -e\n \n rustup component add rust-src rustc-dev llvm-tools-preview\n+rustup target add x86_64-pc-windows-gnu\n ./build_sysroot/prepare_sysroot_src.sh\n cargo install hyperfine || echo \"Skipping hyperfine install\"\n "}, {"sha": "ffe1922ab9056dc3c82a303e21d8d147b7243a2c", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -32,18 +32,56 @@ pub(crate) fn maybe_codegen<'tcx>(\n         BinOp::Add | BinOp::Sub if !checked => None,\n         BinOp::Mul if !checked => {\n             let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n-            Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            if fx.tcx.sess.target.is_like_windows {\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args =\n+                    [ret_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                fx.lib_call(\n+                    \"__multi3\",\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    vec![],\n+                    &args,\n+                );\n+                Some(ret_place.to_cvalue(fx))\n+            } else {\n+                Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            }\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n-            let param_types = vec![\n-                AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n-                AbiParam::new(types::I128),\n-                AbiParam::new(types::I128),\n-            ];\n-            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n+            let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)],\n+                )\n+            } else {\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(types::I128),\n+                        AbiParam::new(types::I128),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)],\n+                )\n+            };\n             let name = match (bin_op, is_signed) {\n                 (BinOp::Add, false) => \"__rust_u128_addo\",\n                 (BinOp::Add, true) => \"__rust_i128_addo\",\n@@ -57,20 +95,33 @@ pub(crate) fn maybe_codegen<'tcx>(\n             Some(out_place.to_cvalue(fx))\n         }\n         BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n-        BinOp::Div => {\n+        BinOp::Div | BinOp::Rem => {\n             assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__divti3\", &[lhs, rhs], fx.tcx.types.i128))\n-            } else {\n-                Some(fx.easy_call(\"__udivti3\", &[lhs, rhs], fx.tcx.types.u128))\n-            }\n-        }\n-        BinOp::Rem => {\n-            assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__modti3\", &[lhs, rhs], fx.tcx.types.i128))\n+            let name = match (bin_op, is_signed) {\n+                (BinOp::Div, false) => \"__udivti3\",\n+                (BinOp::Div, true) => \"__divti3\",\n+                (BinOp::Rem, false) => \"__umodti3\",\n+                (BinOp::Rem, true) => \"__modti3\",\n+                _ => unreachable!(),\n+            };\n+            if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args = [lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                let ret = fx.lib_call(\n+                    name,\n+                    vec![AbiParam::new(pointer_ty(fx.tcx)), AbiParam::new(pointer_ty(fx.tcx))],\n+                    vec![AbiParam::new(types::I64X2)],\n+                    &args,\n+                )[0];\n+                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                ret_place.to_ptr().store(fx, ret, MemFlags::trusted());\n+                Some(ret_place.to_cvalue(fx))\n             } else {\n-                Some(fx.easy_call(\"__umodti3\", &[lhs, rhs], fx.tcx.types.u128))\n+                Some(fx.easy_call(name, &[lhs, rhs], lhs.layout().ty))\n             }\n         }\n         BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {"}, {"sha": "33234f820aa8f2c9de47ed15ddfeec655d844133", "filename": "src/inline_asm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -20,6 +20,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     if template.is_empty() {\n         // Black box\n         return;\n+    } else if template[0] == InlineAsmTemplatePiece::String(\"int $$0x29\".to_string()) {\n+        let true_ = fx.bcx.ins().iconst(types::I32, 1);\n+        fx.bcx.ins().trapnz(true_, TrapCode::User(1));\n+        return;\n     }\n \n     let mut slot_size = Size::from_bytes(0);"}, {"sha": "5db2499709a62d7aa5559f2c674b59303cca5999", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1122f42e2872a4bb65adeb990fb73cc555f5c3cf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1122f42e2872a4bb65adeb990fb73cc555f5c3cf", "patch": "@@ -313,6 +313,8 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n \n     flags_builder.set(\"enable_simd\", \"true\").unwrap();\n \n+    flags_builder.set(\"enable_llvm_abi_extensions\", \"true\").unwrap();\n+\n     use rustc_session::config::OptLevel;\n     match sess.opts.optimize {\n         OptLevel::No => {"}]}