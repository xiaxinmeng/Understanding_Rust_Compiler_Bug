{"sha": "da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWVhOWFiNjllYmNmMzJmZjljYzFhZDU1N2E2YzJhNTEzNGJkMGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T22:55:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T22:55:39Z"}, "message": "rustc: Move type parameter resolution from translation into the typechecker", "tree": {"sha": "f5499480dab04259e5137eed10342acb5e9a271f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5499480dab04259e5137eed10342acb5e9a271f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "html_url": "https://github.com/rust-lang/rust/commit/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16344a0145555448fc202a2bb8eebd2477dc10b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16344a0145555448fc202a2bb8eebd2477dc10b2", "html_url": "https://github.com/rust-lang/rust/commit/16344a0145555448fc202a2bb8eebd2477dc10b2"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "4064cc0a053047accd30c0c6d02466bcd334985c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "patch": "@@ -3083,8 +3083,19 @@ fn lval_generic_fn(@block_ctxt cx,\n \n     check (cx.fcx.ccx.fn_pairs.contains_key(fn_id));\n     auto lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(fn_id));\n-    auto monoty = node_ann_type(cx.fcx.ccx, ann);\n-    auto tys = ty.resolve_ty_params(tpt, monoty);\n+\n+    auto monoty;\n+    auto tys;\n+    alt (ann) {\n+        case (ast.ann_none) {\n+            cx.fcx.ccx.sess.bug(\"no type annotation for path!\");\n+            fail;\n+        }\n+        case (ast.ann_type(?monoty_, ?tps)) {\n+            monoty = monoty_;\n+            tys = option.get[vec[@ty.t]](tps);\n+        }\n+    }\n \n     if (_vec.len[@ty.t](tys) != 0u) {\n         auto bcx = cx;"}, {"sha": "81458d2d755c535530da4d86af812f05ba4fd696", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "patch": "@@ -128,6 +128,37 @@ fn substitute_ty_params(&@crate_ctxt ccx,\n     ret ty.fold_ty(substituter, typ);\n }\n \n+// Returns the type parameters and polytype of an item, if it's an item that\n+// supports type parameters.\n+fn ty_params_for_item(@crate_ctxt ccx, &ast.def d)\n+        -> option.t[ty.ty_params_and_ty] {\n+    auto params_id;\n+    auto types_id;\n+    alt (d) {\n+        case (ast.def_fn(?id))          { params_id = id; types_id = id; }\n+        case (ast.def_obj(?id))         { params_id = id; types_id = id; }\n+        case (ast.def_obj_field(_))     { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_mod(_))           { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_const(_))         { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_arg(_))           { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_local(_))         { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_variant(?tid, ?vid)) {\n+            params_id = tid;\n+            types_id = vid;\n+        }\n+        case (ast.def_ty(_))            { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_ty_arg(_))        { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_binding(_))       { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_use(_))           { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_native_ty(_))     { ret none[ty.ty_params_and_ty]; }\n+        case (ast.def_native_fn(?id))   { params_id = id; types_id = id; }\n+    }\n+\n+    auto tps = ccx.item_ty_params.get(params_id);\n+    auto polyty = ccx.item_types.get(types_id);\n+    ret some[ty.ty_params_and_ty](tup(tps, polyty));\n+}\n+\n // Parses the programmer's textual representation of a type into our internal\n // notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID.\n@@ -1190,7 +1221,38 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         case (ast.expr_path(?pth, ?d, ?ann)) {\n             auto t = demand_full(fcx, e.span, expected,\n                                  ann_to_type(ann), adk);\n-            e_1 = ast.expr_path(pth, d, ast.ann_type(t, none[vec[@ty.t]]));\n+\n+            // Fill in the type parameter substitutions if they weren't\n+            // provided by the programmer.\n+            auto ty_params_opt;\n+            alt (ann) {\n+                case (ast.ann_none) {\n+                    log \"demand_expr(): no type annotation for path expr; \" +\n+                        \"did you pass it to check_expr() first?\";\n+                    fail;\n+                }\n+                case (ast.ann_type(_, ?tps_opt)) {\n+                    alt (tps_opt) {\n+                        case (none[vec[@ty.t]]) {\n+                            auto defn = option.get[ast.def](d);\n+                            alt (ty_params_for_item(fcx.ccx, defn)) {\n+                                case (none[ty.ty_params_and_ty]) {\n+                                    ty_params_opt = none[vec[@ty.t]];\n+                                }\n+                                case (some[ty.ty_params_and_ty](?tpt)) {\n+                                    auto tps = ty.resolve_ty_params(tpt, t);\n+                                    ty_params_opt = some[vec[@ty.t]](tps);\n+                                }\n+                            }\n+                        }\n+                        case (some[vec[@ty.t]](?tps)) {\n+                            ty_params_opt = some[vec[@ty.t]](tps);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            e_1 = ast.expr_path(pth, d, ast.ann_type(t, ty_params_opt));\n         }\n         case (ast.expr_ext(?p, ?args, ?body, ?expanded, ?ann)) {\n             auto t = demand_full(fcx, e.span, expected,"}]}