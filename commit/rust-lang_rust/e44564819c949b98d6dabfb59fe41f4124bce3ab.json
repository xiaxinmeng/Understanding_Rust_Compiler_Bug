{"sha": "e44564819c949b98d6dabfb59fe41f4124bce3ab", "node_id": "C_kwDOAAsO6NoAKGU0NDU2NDgxOWM5NDliOThkNmRhYmZiNTlmZTQxZjQxMjRiY2UzYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T07:35:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T07:35:36Z"}, "message": "Rollup merge of #109504 - steffahn:stabilize_a_rc_into_inner, r=joshtriplett\n\nStabilize `arc_into_inner` and `rc_into_inner`.\n\nStabilize the `arc_into_inner` and `rc_into_inner` library features and thus close #106894.\n\nThe changes in this PR also resolve the FIXMEs for adjusting the documentation upon stabilization, and I\u2019ve additionally included some very minor documentation improvements.\n\n```@rustbot``` label +T-libs-api -T-libs", "tree": {"sha": "9c0a6f3c22202c05082eb1b26a9510279112315a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0a6f3c22202c05082eb1b26a9510279112315a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e44564819c949b98d6dabfb59fe41f4124bce3ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHAFICRBK7hj4Ov3rIwAAc+gIAFviPzTHog6eyM84t4vi9uzr\ne7590l3ibz0mIaW+niAxD5sJTB2efJRyaEBoitKYFoCJ0AybpA+YBm5H/e6ai0PQ\n4vwC13TRgfCf/1OFhxB3EHceiYbFXKNDDgChe9Bla/mWpWBN0XhBGwU7sYKegfKZ\nZ/Yd/ar4+VoMFlc87V7ecSRUAzmnfvPdCIJaM+1FPtvj6+mQHctSvAQwmvfLWm8r\n53wpWZFNQxvfJkUE6E1OS/ImYbdm1+eNGCmfmMyQdK107c1PcSByhsCsgUPzcytj\n5709wbc0n58/SeUSRCU8dNZ1uCPItdNzXCAhb1bS7b3CHMyJjVmJoNzwg28Wyrw=\n=gZCR\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c0a6f3c22202c05082eb1b26a9510279112315a\nparent 7afed9274976b6dc427c56b931cffcc1949f52cd\nparent e8be3d238695145830a2c7a9045ca53c5b0c1a6e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679556936 +0100\ncommitter GitHub <noreply@github.com> 1679556936 +0100\n\nRollup merge of #109504 - steffahn:stabilize_a_rc_into_inner, r=joshtriplett\n\nStabilize `arc_into_inner` and `rc_into_inner`.\n\nStabilize the `arc_into_inner` and `rc_into_inner` library features and thus close #106894.\n\nThe changes in this PR also resolve the FIXMEs for adjusting the documentation upon stabilization, and I\u2019ve additionally included some very minor documentation improvements.\n\n```@rustbot``` label +T-libs-api -T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e44564819c949b98d6dabfb59fe41f4124bce3ab", "html_url": "https://github.com/rust-lang/rust/commit/e44564819c949b98d6dabfb59fe41f4124bce3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e44564819c949b98d6dabfb59fe41f4124bce3ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afed9274976b6dc427c56b931cffcc1949f52cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7afed9274976b6dc427c56b931cffcc1949f52cd", "html_url": "https://github.com/rust-lang/rust/commit/7afed9274976b6dc427c56b931cffcc1949f52cd"}, {"sha": "e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "html_url": "https://github.com/rust-lang/rust/commit/e8be3d238695145830a2c7a9045ca53c5b0c1a6e"}], "stats": {"total": 29, "additions": 6, "deletions": 23}, "files": [{"sha": "1e9cf404f77ea10af86cfaeaff32fb2db1417d2f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e44564819c949b98d6dabfb59fe41f4124bce3ab/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44564819c949b98d6dabfb59fe41f4124bce3ab/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=e44564819c949b98d6dabfb59fe41f4124bce3ab", "patch": "@@ -692,10 +692,10 @@ impl<T> Rc<T> {\n     /// it is guaranteed that exactly one of the calls returns the inner value.\n     /// This means in particular that the inner value is not dropped.\n     ///\n-    /// This is equivalent to `Rc::try_unwrap(...).ok()`. (Note that these are not equivalent for\n-    /// `Arc`, due to race conditions that do not apply to `Rc`.)\n+    /// This is equivalent to `Rc::try_unwrap(this).ok()`. (Note that these are not equivalent for\n+    /// [`Arc`](crate::sync::Arc), due to race conditions that do not apply to `Rc`.)\n     #[inline]\n-    #[unstable(feature = \"rc_into_inner\", issue = \"106894\")]\n+    #[stable(feature = \"rc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         Rc::try_unwrap(this).ok()\n     }"}, {"sha": "150924851d21d9cbf63f670ef3d543bf0ca70fea", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e44564819c949b98d6dabfb59fe41f4124bce3ab/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44564819c949b98d6dabfb59fe41f4124bce3ab/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e44564819c949b98d6dabfb59fe41f4124bce3ab", "patch": "@@ -662,20 +662,17 @@ impl<T> Arc<T> {\n     ///\n     /// This will succeed even if there are outstanding weak references.\n     ///\n-    // FIXME: when `Arc::into_inner` is stabilized, add this paragraph:\n-    /*\n     /// It is strongly recommended to use [`Arc::into_inner`] instead if you don't\n     /// want to keep the `Arc` in the [`Err`] case.\n     /// Immediately dropping the [`Err`] payload, like in the expression\n     /// `Arc::try_unwrap(this).ok()`, can still cause the strong count to\n     /// drop to zero and the inner value of the `Arc` to be dropped:\n-    /// For instance if two threads execute this expression in parallel, then\n+    /// For instance if two threads each execute this expression in parallel, then\n     /// there is a race condition. The threads could first both check whether they\n     /// have the last clone of their `Arc` via `Arc::try_unwrap`, and then\n     /// both drop their `Arc` in the call to [`ok`][`Result::ok`],\n     /// taking the strong count from two down to zero.\n     ///\n-     */\n     /// # Examples\n     ///\n     /// ```\n@@ -719,20 +716,13 @@ impl<T> Arc<T> {\n     /// This means in particular that the inner value is not dropped.\n     ///\n     /// The similar expression `Arc::try_unwrap(this).ok()` does not\n-    /// offer such a guarantee. See the last example below.\n-    //\n-    // FIXME: when `Arc::into_inner` is stabilized, add this to end\n-    // of the previous sentence:\n-    /*\n+    /// offer such a guarantee. See the last example below\n     /// and the documentation of [`Arc::try_unwrap`].\n-     */\n     ///\n     /// # Examples\n     ///\n     /// Minimal example demonstrating the guarantee that `Arc::into_inner` gives.\n     /// ```\n-    /// #![feature(arc_into_inner)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(3);\n@@ -756,8 +746,6 @@ impl<T> Arc<T> {\n     ///\n     /// A more practical example demonstrating the need for `Arc::into_inner`:\n     /// ```\n-    /// #![feature(arc_into_inner)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// // Definition of a simple singly linked list using `Arc`:\n@@ -807,13 +795,8 @@ impl<T> Arc<T> {\n     /// x_thread.join().unwrap();\n     /// y_thread.join().unwrap();\n     /// ```\n-\n-    // FIXME: when `Arc::into_inner` is stabilized, adjust above documentation\n-    // and the documentation of `Arc::try_unwrap` according to the `FIXME`s. Also\n-    // open an issue on rust-lang/rust-clippy, asking for a lint against\n-    // `Arc::try_unwrap(...).ok()`.\n     #[inline]\n-    #[unstable(feature = \"arc_into_inner\", issue = \"106894\")]\n+    #[stable(feature = \"arc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         // Make sure that the ordinary `Drop` implementation isn\u2019t called as well\n         let mut this = mem::ManuallyDrop::new(this);"}]}