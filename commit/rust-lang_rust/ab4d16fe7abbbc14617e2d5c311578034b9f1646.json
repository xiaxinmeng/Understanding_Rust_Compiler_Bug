{"sha": "ab4d16fe7abbbc14617e2d5c311578034b9f1646", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNGQxNmZlN2FiYmJjMTQ2MTdlMmQ1YzMxMTU3ODAzNGI5ZjE2NDY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-01T21:20:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T21:20:28Z"}, "message": "Rollup merge of #86148 - FabianWolff:issue-85855, r=varkor\n\nCheck the number of generic lifetime and const parameters of intrinsics\n\nThis pull request fixes #85855. The current code for type checking intrinsics only checks the number of generic _type_ parameters, but does not check for an incorrect number of lifetime or const parameters, which can cause problems later on, such as the ICE in #85855, where the code thought that it was looking at a type parameter but found a lifetime parameter:\n```\nerror: internal compiler error: compiler/rustc_middle/src/ty/generics.rs:188:18:\n    expected type parameter, but found another generic parameter\n```\n\nThe changes in this PR add checks for the number of lifetime and const parameters, expand the scope of `E0094` to also apply to these cases, and improve the error message by properly pluralizing the number of expected generic parameters.", "tree": {"sha": "6bb7f56e2e93ba5c3eaf718ff114efcf426cb11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb7f56e2e93ba5c3eaf718ff114efcf426cb11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab4d16fe7abbbc14617e2d5c311578034b9f1646", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3jGcCRBK7hj4Ov3rIwAAKv0IAEcNmE0KqtqEyCaN6pIj2MQV\nQ333s8/GWvbuYgjh/6UTxCiHrtRQEr7n240Pq+QBXTBba93p0Me77JITfw3Z069I\nKjaneSKFh3622KNwlxB8R31BMsCrB7d1Tukkb1rw6z2AkqFz8d/uDTE4PKuwJ+//\n33B0zS1aY2TyIwHZxKL16yp/UQUuUw9SbGWnlG/9auVEJJMt/RnkYxp6qC5hlFTs\nQflzjc1mHX4IbDxMFDmuivnOMR9XUB3F47YWLiW5TQ+lsO532oDQP5qHOoHG4eE8\nKZA1MLhQlfP7WisL41ieIl6SP1SQ185ADmDaa0oYvEvquCrV8OG4Ur6a/p+n4HM=\n=p/va\n-----END PGP SIGNATURE-----\n", "payload": "tree 6bb7f56e2e93ba5c3eaf718ff114efcf426cb11d\nparent ecef52abeba37f24157005ce0e3dfb06a79bfd21\nparent fe9334910998308f797207f05ed98beb37242973\nauthor Yuki Okushi <jtitor@2k36.org> 1625174428 +0900\ncommitter GitHub <noreply@github.com> 1625174428 +0900\n\nRollup merge of #86148 - FabianWolff:issue-85855, r=varkor\n\nCheck the number of generic lifetime and const parameters of intrinsics\n\nThis pull request fixes #85855. The current code for type checking intrinsics only checks the number of generic _type_ parameters, but does not check for an incorrect number of lifetime or const parameters, which can cause problems later on, such as the ICE in #85855, where the code thought that it was looking at a type parameter but found a lifetime parameter:\n```\nerror: internal compiler error: compiler/rustc_middle/src/ty/generics.rs:188:18:\n    expected type parameter, but found another generic parameter\n```\n\nThe changes in this PR add checks for the number of lifetime and const parameters, expand the scope of `E0094` to also apply to these cases, and improve the error message by properly pluralizing the number of expected generic parameters.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4d16fe7abbbc14617e2d5c311578034b9f1646", "html_url": "https://github.com/rust-lang/rust/commit/ab4d16fe7abbbc14617e2d5c311578034b9f1646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab4d16fe7abbbc14617e2d5c311578034b9f1646/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecef52abeba37f24157005ce0e3dfb06a79bfd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecef52abeba37f24157005ce0e3dfb06a79bfd21", "html_url": "https://github.com/rust-lang/rust/commit/ecef52abeba37f24157005ce0e3dfb06a79bfd21"}, {"sha": "fe9334910998308f797207f05ed98beb37242973", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9334910998308f797207f05ed98beb37242973", "html_url": "https://github.com/rust-lang/rust/commit/fe9334910998308f797207f05ed98beb37242973"}], "stats": {"total": 111, "additions": 81, "deletions": 30}, "files": [{"sha": "ec86ec44ece8e2e9a8a03ff23b600f21a847f710", "filename": "compiler/rustc_error_codes/src/error_codes/E0094.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md?ref=ab4d16fe7abbbc14617e2d5c311578034b9f1646", "patch": "@@ -1,4 +1,4 @@\n-An invalid number of type parameters was given to an intrinsic function.\n+An invalid number of generic parameters was passed to an intrinsic function.\n \n Erroneous code example:\n "}, {"sha": "a56aefcef9cdd78da7ae7630891eff9c5b8e40cd", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=ab4d16fe7abbbc14617e2d5c311578034b9f1646", "patch": "@@ -3,11 +3,11 @@\n \n use crate::errors::{\n     SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n-    WrongNumberOfTypeArgumentsToInstrinsic,\n+    WrongNumberOfGenericArgumentsToIntrinsic,\n };\n use crate::require_same_types;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n@@ -21,36 +21,45 @@ fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n     n_tps: usize,\n+    n_lts: usize,\n     sig: ty::PolyFnSig<'tcx>,\n ) {\n-    match it.kind {\n-        hir::ForeignItemKind::Fn(..) => {}\n+    let (own_counts, span) = match &it.kind {\n+        hir::ForeignItemKind::Fn(.., generics) => {\n+            let own_counts = tcx.generics_of(it.def_id.to_def_id()).own_counts();\n+            (own_counts, generics.span)\n+        }\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622, \"intrinsic must be a function\")\n                 .span_label(it.span, \"expected a function\")\n                 .emit();\n             return;\n         }\n-    }\n+    };\n \n-    let i_n_tps = tcx.generics_of(it.def_id).own_counts().types;\n-    if i_n_tps != n_tps {\n-        let span = match it.kind {\n-            hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n-            _ => bug!(),\n-        };\n+    let gen_count_ok = |found: usize, expected: usize, descr: &str| -> bool {\n+        if found != expected {\n+            tcx.sess.emit_err(WrongNumberOfGenericArgumentsToIntrinsic {\n+                span,\n+                found,\n+                expected,\n+                expected_pluralize: pluralize!(expected),\n+                descr,\n+            });\n+            false\n+        } else {\n+            true\n+        }\n+    };\n \n-        tcx.sess.emit_err(WrongNumberOfTypeArgumentsToInstrinsic {\n-            span,\n-            found: i_n_tps,\n-            expected: n_tps,\n-        });\n-        return;\n+    if gen_count_ok(own_counts.lifetimes, n_lts, \"lifetime\")\n+        && gen_count_ok(own_counts.types, n_tps, \"type\")\n+        && gen_count_ok(own_counts.consts, 0, \"const\")\n+    {\n+        let fty = tcx.mk_fn_ptr(sig);\n+        let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n+        require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n     }\n-\n-    let fty = tcx.mk_fn_ptr(sig);\n-    let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n-    require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n }\n \n /// Returns the unsafety of the given intrinsic.\n@@ -121,7 +130,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         })\n     };\n \n-    let (n_tps, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n+    let (n_tps, n_lts, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n         let split: Vec<&str> = name_str.split('_').collect();\n         assert!(split.len() >= 2, \"Atomic intrinsic in an incorrect format\");\n \n@@ -143,7 +152,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, hir::Unsafety::Unsafe)\n+        (n_tps, 0, inputs, output, hir::Unsafety::Unsafe)\n     } else {\n         let unsafety = intrinsic_operation_unsafety(intrinsic_name);\n         let (n_tps, inputs, output) = match intrinsic_name {\n@@ -372,11 +381,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, unsafety)\n+        (n_tps, 0, inputs, output, unsafety)\n     };\n     let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, n_lts, sig)\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n@@ -472,5 +481,5 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         Abi::PlatformIntrinsic,\n     );\n     let sig = ty::Binder::dummy(sig);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, 0, sig)\n }"}, {"sha": "1e6a240b2f86d857ce8761f7421775eca0287837", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4d16fe7abbbc14617e2d5c311578034b9f1646/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=ab4d16fe7abbbc14617e2d5c311578034b9f1646", "patch": "@@ -24,13 +24,15 @@ pub struct UnrecognizedAtomicOperation<'a> {\n \n #[derive(SessionDiagnostic)]\n #[error = \"E0094\"]\n-pub struct WrongNumberOfTypeArgumentsToInstrinsic {\n-    #[message = \"intrinsic has wrong number of type \\\n+pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n+    #[message = \"intrinsic has wrong number of {descr} \\\n                          parameters: found {found}, expected {expected}\"]\n-    #[label = \"expected {expected} type parameter\"]\n+    #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]\n     pub span: Span,\n     pub found: usize,\n     pub expected: usize,\n+    pub expected_pluralize: &'a str,\n+    pub descr: &'a str,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "f276fbd669470baa2e94ccf00ab5ccd2d5995126", "filename": "src/test/ui/simd-intrinsic/issue-85855.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab4d16fe7abbbc14617e2d5c311578034b9f1646/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4d16fe7abbbc14617e2d5c311578034b9f1646/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs?ref=ab4d16fe7abbbc14617e2d5c311578034b9f1646", "patch": "@@ -0,0 +1,19 @@\n+// Check that appropriate errors are reported if an intrinsic is defined\n+// with the wrong number of generic lifetime/type/const parameters, and\n+// that no ICE occurs in these cases.\n+\n+#![feature(platform_intrinsics)]\n+#![crate_type=\"lib\"]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of lifetime parameters\n+\n+    fn simd_add<'a, T>(x: T, y: T) -> T;\n+\n+    fn simd_sub<T, U>(x: T, y: U);\n+    //~^ ERROR: intrinsic has wrong number of type parameters\n+\n+    fn simd_mul<T, const N: usize>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of const parameters\n+}"}, {"sha": "fb2f1fbc5b1ccc47b756d29b82e45b69ea00b7fd", "filename": "src/test/ui/simd-intrinsic/issue-85855.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab4d16fe7abbbc14617e2d5c311578034b9f1646/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab4d16fe7abbbc14617e2d5c311578034b9f1646/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr?ref=ab4d16fe7abbbc14617e2d5c311578034b9f1646", "patch": "@@ -0,0 +1,21 @@\n+error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:9:27\n+   |\n+LL |     fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+   |                           ^^^^^^^^^^^ expected 0 lifetime parameters\n+\n+error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n+  --> $DIR/issue-85855.rs:14:16\n+   |\n+LL |     fn simd_sub<T, U>(x: T, y: U);\n+   |                ^^^^^^ expected 1 type parameter\n+\n+error[E0094]: intrinsic has wrong number of const parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:17:16\n+   |\n+LL |     fn simd_mul<T, const N: usize>(x: T, y: T);\n+   |                ^^^^^^^^^^^^^^^^^^^ expected 0 const parameters\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0094`."}]}