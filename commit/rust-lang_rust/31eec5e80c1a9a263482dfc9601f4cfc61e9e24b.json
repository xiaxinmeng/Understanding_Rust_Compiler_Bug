{"sha": "31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZWVjNWU4MGMxYTlhMjYzNDgyZGZjOTYwMWY0Y2ZjNjFlOWUyNGI=", "commit": {"author": {"name": "Fireassember", "email": "ariel.f2002@gmail.com", "date": "2020-03-11T20:54:24Z"}, "committer": {"name": "Fireassember", "email": "ariel.f2002@gmail.com", "date": "2020-03-11T20:54:24Z"}, "message": "implementing Display for enums too.", "tree": {"sha": "671e87df1a94e6ce5dd9369d5e683cacc209a967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671e87df1a94e6ce5dd9369d5e683cacc209a967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "html_url": "https://github.com/rust-lang/rust/commit/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b/comments", "author": {"login": "arielf212", "id": 16636222, "node_id": "MDQ6VXNlcjE2NjM2MjIy", "avatar_url": "https://avatars.githubusercontent.com/u/16636222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielf212", "html_url": "https://github.com/arielf212", "followers_url": "https://api.github.com/users/arielf212/followers", "following_url": "https://api.github.com/users/arielf212/following{/other_user}", "gists_url": "https://api.github.com/users/arielf212/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielf212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielf212/subscriptions", "organizations_url": "https://api.github.com/users/arielf212/orgs", "repos_url": "https://api.github.com/users/arielf212/repos", "events_url": "https://api.github.com/users/arielf212/events{/privacy}", "received_events_url": "https://api.github.com/users/arielf212/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielf212", "id": 16636222, "node_id": "MDQ6VXNlcjE2NjM2MjIy", "avatar_url": "https://avatars.githubusercontent.com/u/16636222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielf212", "html_url": "https://github.com/arielf212", "followers_url": "https://api.github.com/users/arielf212/followers", "following_url": "https://api.github.com/users/arielf212/following{/other_user}", "gists_url": "https://api.github.com/users/arielf212/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielf212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielf212/subscriptions", "organizations_url": "https://api.github.com/users/arielf212/orgs", "repos_url": "https://api.github.com/users/arielf212/repos", "events_url": "https://api.github.com/users/arielf212/events{/privacy}", "received_events_url": "https://api.github.com/users/arielf212/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787043496aaa05be31162a8cdd0686a13da646cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/787043496aaa05be31162a8cdd0686a13da646cc", "html_url": "https://github.com/rust-lang/rust/commit/787043496aaa05be31162a8cdd0686a13da646cc"}], "stats": {"total": 645, "additions": 643, "deletions": 2}, "files": [{"sha": "002f453cd26c0c08ad032d6c58da19fad6b9e578", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 635, "deletions": 0, "changes": 635, "blob_url": "https://github.com/rust-lang/rust/blob/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "patch": "@@ -9,6 +9,11 @@ use crate::{\n pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for SourceFile {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -38,6 +43,11 @@ impl SourceFile {\n pub struct FnDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for FnDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for FnDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -76,6 +86,11 @@ impl FnDef {\n pub struct RetType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RetType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RetType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -103,6 +118,11 @@ impl RetType {\n pub struct StructDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for StructDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for StructDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -131,6 +151,11 @@ impl StructDef {}\n pub struct UnionDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for UnionDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for UnionDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -163,6 +188,11 @@ impl UnionDef {\n pub struct RecordFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordFieldDefList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -190,6 +220,11 @@ impl RecordFieldDefList {\n pub struct RecordFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordFieldDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -218,6 +253,11 @@ impl RecordFieldDef {}\n pub struct TupleFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TupleFieldDefList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TupleFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -245,6 +285,11 @@ impl TupleFieldDefList {\n pub struct TupleFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TupleFieldDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TupleFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -274,6 +319,11 @@ impl TupleFieldDef {\n pub struct EnumDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for EnumDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for EnumDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -306,6 +356,11 @@ impl EnumDef {\n pub struct EnumVariantList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for EnumVariantList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for EnumVariantList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -333,6 +388,11 @@ impl EnumVariantList {\n pub struct EnumVariant {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for EnumVariant {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for EnumVariant {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -363,6 +423,11 @@ impl EnumVariant {\n pub struct TraitDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TraitDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TraitDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -396,6 +461,11 @@ impl TraitDef {\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Module {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Module {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -427,6 +497,11 @@ impl Module {\n pub struct ItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ItemList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ItemList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -456,6 +531,11 @@ impl ItemList {\n pub struct ConstDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ConstDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ConstDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -489,6 +569,11 @@ impl ConstDef {\n pub struct StaticDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for StaticDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for StaticDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -522,6 +607,11 @@ impl StaticDef {\n pub struct TypeAliasDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeAliasDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeAliasDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -555,6 +645,11 @@ impl TypeAliasDef {\n pub struct ImplDef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ImplDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ImplDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -584,6 +679,11 @@ impl ImplDef {\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ParenType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -611,6 +711,11 @@ impl ParenType {\n pub struct TupleType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TupleType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TupleType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -638,6 +743,11 @@ impl TupleType {\n pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for NeverType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for NeverType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -661,6 +771,11 @@ impl NeverType {}\n pub struct PathType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PathType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PathType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -688,6 +803,11 @@ impl PathType {\n pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PointerType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PointerType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -715,6 +835,11 @@ impl PointerType {\n pub struct ArrayType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ArrayType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ArrayType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -745,6 +870,11 @@ impl ArrayType {\n pub struct SliceType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for SliceType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for SliceType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -772,6 +902,11 @@ impl SliceType {\n pub struct ReferenceType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ReferenceType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ReferenceType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -799,6 +934,11 @@ impl ReferenceType {\n pub struct PlaceholderType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PlaceholderType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PlaceholderType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -822,6 +962,11 @@ impl PlaceholderType {}\n pub struct FnPointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for FnPointerType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for FnPointerType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -852,6 +997,11 @@ impl FnPointerType {\n pub struct ForType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ForType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ForType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -879,6 +1029,11 @@ impl ForType {\n pub struct ImplTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ImplTraitType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ImplTraitType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -903,6 +1058,11 @@ impl ImplTraitType {}\n pub struct DynTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for DynTraitType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for DynTraitType {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -927,6 +1087,11 @@ impl DynTraitType {}\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TupleExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TupleExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -954,6 +1119,11 @@ impl TupleExpr {\n pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ArrayExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ArrayExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -981,6 +1151,11 @@ impl ArrayExpr {\n pub struct ParenExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ParenExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ParenExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1008,6 +1183,11 @@ impl ParenExpr {\n pub struct PathExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PathExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PathExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1035,6 +1215,11 @@ impl PathExpr {\n pub struct LambdaExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LambdaExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LambdaExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1068,6 +1253,11 @@ impl LambdaExpr {\n pub struct IfExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for IfExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for IfExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1095,6 +1285,11 @@ impl IfExpr {\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LoopExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LoopExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1119,6 +1314,11 @@ impl LoopExpr {}\n pub struct TryBlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TryBlockExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TryBlockExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1146,6 +1346,11 @@ impl TryBlockExpr {\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ForExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ForExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1177,6 +1382,11 @@ impl ForExpr {\n pub struct WhileExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for WhileExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for WhileExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1205,6 +1415,11 @@ impl WhileExpr {\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ContinueExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ContinueExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1228,6 +1443,11 @@ impl ContinueExpr {}\n pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BreakExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BreakExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1255,6 +1475,11 @@ impl BreakExpr {\n pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Label {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Label {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1278,6 +1503,11 @@ impl Label {}\n pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BlockExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BlockExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1305,6 +1535,11 @@ impl BlockExpr {\n pub struct ReturnExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ReturnExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ReturnExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1332,6 +1567,11 @@ impl ReturnExpr {\n pub struct CallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for CallExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for CallExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1360,6 +1600,11 @@ impl CallExpr {\n pub struct MethodCallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MethodCallExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MethodCallExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1394,6 +1639,11 @@ impl MethodCallExpr {\n pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for IndexExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for IndexExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1417,6 +1667,11 @@ impl IndexExpr {}\n pub struct FieldExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for FieldExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for FieldExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1447,6 +1702,11 @@ impl FieldExpr {\n pub struct AwaitExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for AwaitExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for AwaitExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1474,6 +1734,11 @@ impl AwaitExpr {\n pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TryExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TryExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1501,6 +1766,11 @@ impl TryExpr {\n pub struct CastExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for CastExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for CastExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1531,6 +1801,11 @@ impl CastExpr {\n pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RefExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RefExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1558,6 +1833,11 @@ impl RefExpr {\n pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PrefixExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PrefixExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1585,6 +1865,11 @@ impl PrefixExpr {\n pub struct BoxExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BoxExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BoxExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1612,6 +1897,11 @@ impl BoxExpr {\n pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RangeExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RangeExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1635,6 +1925,11 @@ impl RangeExpr {}\n pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BinExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BinExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1658,6 +1953,11 @@ impl BinExpr {}\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Literal {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Literal {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1681,6 +1981,11 @@ impl Literal {}\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MatchExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MatchExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1711,6 +2016,11 @@ impl MatchExpr {\n pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MatchArmList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MatchArmList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1739,6 +2049,11 @@ impl MatchArmList {\n pub struct MatchArm {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MatchArm {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MatchArm {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1773,6 +2088,11 @@ impl MatchArm {\n pub struct MatchGuard {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MatchGuard {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MatchGuard {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1800,6 +2120,11 @@ impl MatchGuard {\n pub struct RecordLit {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordLit {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordLit {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1830,6 +2155,11 @@ impl RecordLit {\n pub struct RecordFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordFieldList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordFieldList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1860,6 +2190,11 @@ impl RecordFieldList {\n pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordField {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordField {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1890,6 +2225,11 @@ impl RecordField {\n pub struct OrPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for OrPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for OrPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1917,6 +2257,11 @@ impl OrPat {\n pub struct ParenPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ParenPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ParenPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1944,6 +2289,11 @@ impl ParenPat {\n pub struct RefPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RefPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RefPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1971,6 +2321,11 @@ impl RefPat {\n pub struct BoxPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BoxPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BoxPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -1998,6 +2353,11 @@ impl BoxPat {\n pub struct BindPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for BindPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for BindPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2026,6 +2386,11 @@ impl BindPat {\n pub struct PlaceholderPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PlaceholderPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PlaceholderPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2049,6 +2414,11 @@ impl PlaceholderPat {}\n pub struct DotDotPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for DotDotPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for DotDotPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2072,6 +2442,11 @@ impl DotDotPat {}\n pub struct PathPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PathPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PathPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2099,6 +2474,11 @@ impl PathPat {\n pub struct SlicePat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for SlicePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for SlicePat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2126,6 +2506,11 @@ impl SlicePat {\n pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RangePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RangePat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2149,6 +2534,11 @@ impl RangePat {}\n pub struct LiteralPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LiteralPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LiteralPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2176,6 +2566,11 @@ impl LiteralPat {\n pub struct RecordPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2206,6 +2601,11 @@ impl RecordPat {\n pub struct RecordFieldPatList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordFieldPatList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordFieldPatList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2236,6 +2636,11 @@ impl RecordFieldPatList {\n pub struct RecordFieldPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for RecordFieldPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for RecordFieldPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2264,6 +2669,11 @@ impl RecordFieldPat {\n pub struct TupleStructPat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TupleStructPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TupleStructPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2294,6 +2704,11 @@ impl TupleStructPat {\n pub struct TuplePat {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TuplePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TuplePat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2321,6 +2736,11 @@ impl TuplePat {\n pub struct Visibility {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Visibility {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Visibility {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2344,6 +2764,11 @@ impl Visibility {}\n pub struct Name {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Name {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Name {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2367,6 +2792,11 @@ impl Name {}\n pub struct NameRef {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for NameRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for NameRef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2390,6 +2820,11 @@ impl NameRef {}\n pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MacroCall {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MacroCall {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2423,6 +2858,11 @@ impl MacroCall {\n pub struct Attr {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Attr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Attr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2453,6 +2893,11 @@ impl Attr {\n pub struct TokenTree {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TokenTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TokenTree {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2476,6 +2921,11 @@ impl TokenTree {}\n pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeParamList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2506,6 +2956,11 @@ impl TypeParamList {\n pub struct TypeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2536,6 +2991,11 @@ impl TypeParam {\n pub struct ConstParam {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ConstParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ConstParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2566,6 +3026,11 @@ impl ConstParam {\n pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LifetimeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LifetimeParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2590,6 +3055,11 @@ impl LifetimeParam {}\n pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeBound {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeBound {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2617,6 +3087,11 @@ impl TypeBound {\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeBoundList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2644,6 +3119,11 @@ impl TypeBoundList {\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for WherePred {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for WherePred {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2672,6 +3152,11 @@ impl WherePred {\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for WhereClause {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for WhereClause {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2699,6 +3184,11 @@ impl WhereClause {\n pub struct ExprStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ExprStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ExprStmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2726,6 +3216,11 @@ impl ExprStmt {\n pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LetStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LetStmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2757,6 +3252,11 @@ impl LetStmt {\n pub struct Condition {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Condition {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Condition {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2787,6 +3287,11 @@ impl Condition {\n pub struct Block {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Block {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Block {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2819,6 +3324,11 @@ impl Block {\n pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ParamList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2849,6 +3359,11 @@ impl ParamList {\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for SelfParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for SelfParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2874,6 +3389,11 @@ impl SelfParam {}\n pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Param {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Param {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2903,6 +3423,11 @@ impl Param {\n pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for UseItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for UseItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2932,6 +3457,11 @@ impl UseItem {\n pub struct UseTree {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for UseTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for UseTree {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2965,6 +3495,11 @@ impl UseTree {\n pub struct Alias {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Alias {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Alias {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -2989,6 +3524,11 @@ impl Alias {}\n pub struct UseTreeList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for UseTreeList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for UseTreeList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3016,6 +3556,11 @@ impl UseTreeList {\n pub struct ExternCrateItem {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ExternCrateItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ExternCrateItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3048,6 +3593,11 @@ impl ExternCrateItem {\n pub struct ArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ArgList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ArgList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3075,6 +3625,11 @@ impl ArgList {\n pub struct Path {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for Path {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Path {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3105,6 +3660,11 @@ impl Path {\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for PathSegment {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for PathSegment {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3144,6 +3704,11 @@ impl PathSegment {\n pub struct TypeArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeArgList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeArgList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3180,6 +3745,11 @@ impl TypeArgList {\n pub struct TypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for TypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3207,6 +3777,11 @@ impl TypeArg {\n pub struct AssocTypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for AssocTypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for AssocTypeArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3237,6 +3812,11 @@ impl AssocTypeArg {\n pub struct LifetimeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for LifetimeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for LifetimeArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3260,6 +3840,11 @@ impl LifetimeArg {}\n pub struct ConstArg {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for ConstArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ConstArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3290,6 +3875,11 @@ impl ConstArg {\n pub struct MacroItems {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MacroItems {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MacroItems {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3315,6 +3905,11 @@ impl MacroItems {}\n pub struct MacroStmts {\n     pub(crate) syntax: SyntaxNode,\n }\n+impl std::fmt::Display for MacroStmts {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for MacroStmts {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3362,6 +3957,11 @@ impl From<UnionDef> for NominalDef {\n         NominalDef::UnionDef(node)\n     }\n }\n+impl std::fmt::Display for NominalDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for NominalDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3470,6 +4070,11 @@ impl From<DynTraitType> for TypeRef {\n         TypeRef::DynTraitType(node)\n     }\n }\n+impl std::fmt::Display for TypeRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for TypeRef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3591,6 +4196,11 @@ impl From<Module> for ModuleItem {\n         ModuleItem::Module(node)\n     }\n }\n+impl std::fmt::Display for ModuleItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3657,6 +4267,11 @@ impl From<ConstDef> for ImplItem {\n         ImplItem::ConstDef(node)\n     }\n }\n+impl std::fmt::Display for ImplItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for ImplItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3871,6 +4486,11 @@ impl From<BoxExpr> for Expr {\n         Expr::BoxExpr(node)\n     }\n }\n+impl std::fmt::Display for Expr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4043,6 +4663,11 @@ impl From<LiteralPat> for Pat {\n         Pat::LiteralPat(node)\n     }\n }\n+impl std::fmt::Display for Pat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4106,6 +4731,11 @@ impl From<TokenTree> for AttrInput {\n         AttrInput::TokenTree(node)\n     }\n }\n+impl std::fmt::Display for AttrInput {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for AttrInput {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4143,6 +4773,11 @@ impl From<LetStmt> for Stmt {\n         Stmt::LetStmt(node)\n     }\n }\n+impl std::fmt::Display for Stmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl AstNode for Stmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {"}, {"sha": "32afd47bc3245a24a957be89cc702557d682eb74", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31eec5e80c1a9a263482dfc9601f4cfc61e9e24b/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=31eec5e80c1a9a263482dfc9601f4cfc61e9e24b", "patch": "@@ -69,8 +69,8 @@ fn generate_ast(grammar: AstSrc<'_>) -> Result<String> {\n             }\n \n             impl std::fmt::Display for #name {\n-                fn fmt(..) -> std::fmt::Result {\n-                    std::fmt::Display::fmt(self.syntax())\n+                fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                    std::fmt::Display::fmt(self.syntax(), f)\n                 }\n             }\n \n@@ -120,6 +120,12 @@ fn generate_ast(grammar: AstSrc<'_>) -> Result<String> {\n             }\n             )*\n \n+            impl std::fmt::Display for #name {\n+                fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                    std::fmt::Display::fmt(self.syntax(), f)\n+                }\n+            }\n+\n             impl AstNode for #name {\n                 fn can_cast(kind: SyntaxKind) -> bool {\n                     match kind {"}]}