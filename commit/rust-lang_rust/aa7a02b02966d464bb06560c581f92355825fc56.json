{"sha": "aa7a02b02966d464bb06560c581f92355825fc56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhN2EwMmIwMjk2NmQ0NjRiYjA2NTYwYzU4MWY5MjM1NTgyNWZjNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-01T21:24:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: test binding mode consistency for or-patterns.", "tree": {"sha": "34b6de3dfc800fe9f5e2c63ae5832f81aa969958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b6de3dfc800fe9f5e2c63ae5832f81aa969958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7a02b02966d464bb06560c581f92355825fc56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7a02b02966d464bb06560c581f92355825fc56", "html_url": "https://github.com/rust-lang/rust/commit/aa7a02b02966d464bb06560c581f92355825fc56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7a02b02966d464bb06560c581f92355825fc56/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33317c7baad5000ff34449f5c8a55b48e6296453", "url": "https://api.github.com/repos/rust-lang/rust/commits/33317c7baad5000ff34449f5c8a55b48e6296453", "html_url": "https://github.com/rust-lang/rust/commit/33317c7baad5000ff34449f5c8a55b48e6296453"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "a13596a9c8b1e2b33f955273fe4ae382fd7ba4ba", "filename": "src/test/ui/or-patterns/inconsistent-modes.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa7a02b02966d464bb06560c581f92355825fc56/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7a02b02966d464bb06560c581f92355825fc56/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs?ref=aa7a02b02966d464bb06560c581f92355825fc56", "patch": "@@ -0,0 +1,26 @@\n+// This test ensures that or patterns require binding mode consistency across arms.\n+\n+#![feature(or_patterns)]\n+#![allow(incomplete_features, non_camel_case_types)]\n+fn main() {\n+    // One level:\n+    let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+    let Ok(ref mut a) | Err(a): Result<u8, &mut u8> = Ok(0);\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+    let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~| ERROR mismatched types\n+    let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~| ERROR variable `b` is bound in inconsistent ways\n+    //~| ERROR mismatched types\n+\n+    // Two levels:\n+    let Ok(Ok(a) | Err(a)) | Err(ref a) = Err(0);\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+\n+    // Three levels:\n+    let Ok([ Ok((Ok(ref a) | Err(a),)) | Err(a) ]) | Err(a) = Err(&1);\n+    //~^ ERROR variable `a` is bound in inconsistent ways\n+}"}, {"sha": "a34a4fe1387534c8f48f51dbad77b0c6a3423955", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/aa7a02b02966d464bb06560c581f92355825fc56/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7a02b02966d464bb06560c581f92355825fc56/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=aa7a02b02966d464bb06560c581f92355825fc56", "patch": "@@ -0,0 +1,72 @@\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:7:25\n+   |\n+LL |     let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);\n+   |            -            ^ bound in different ways\n+   |            |\n+   |            first binding\n+\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:9:29\n+   |\n+LL |     let Ok(ref mut a) | Err(a): Result<u8, &mut u8> = Ok(0);\n+   |                    -        ^ bound in different ways\n+   |                    |\n+   |                    first binding\n+\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:11:33\n+   |\n+LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n+   |                - first binding  ^ bound in different ways\n+\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:14:39\n+   |\n+LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n+   |                 - first binding       ^ bound in different ways\n+\n+error[E0409]: variable `b` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:14:46\n+   |\n+LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n+   |                    - first binding           ^ bound in different ways\n+\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:20:38\n+   |\n+LL |     let Ok(Ok(a) | Err(a)) | Err(ref a) = Err(0);\n+   |                        -             ^ bound in different ways\n+   |                        |\n+   |                        first binding\n+\n+error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+  --> $DIR/inconsistent-modes.rs:24:34\n+   |\n+LL |     let Ok([ Ok((Ok(ref a) | Err(a),)) | Err(a) ]) | Err(a) = Err(&1);\n+   |                         -        ^ bound in different ways\n+   |                         |\n+   |                         first binding\n+\n+error[E0308]: mismatched types\n+  --> $DIR/inconsistent-modes.rs:11:25\n+   |\n+LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n+   |                         ^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected type `&&u8`\n+              found type `&mut &mut u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/inconsistent-modes.rs:14:31\n+   |\n+LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n+   |                               ^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected type `&{integer}`\n+              found type `&mut _`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0308, E0409.\n+For more information about an error, try `rustc --explain E0308`."}]}