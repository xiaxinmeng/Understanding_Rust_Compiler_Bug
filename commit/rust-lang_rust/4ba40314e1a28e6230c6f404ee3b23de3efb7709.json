{"sha": "4ba40314e1a28e6230c6f404ee3b23de3efb7709", "node_id": "C_kwDOAAsO6NoAKDRiYTQwMzE0ZTFhMjhlNjIzMGM2ZjQwNGVlM2IyM2RlM2VmYjc3MDk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-25T20:52:26Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-25T20:52:26Z"}, "message": "rustdoc: update test cases now that code-header is used without in-band", "tree": {"sha": "fd63c37279a36f2bd5ea3fd170505f707e478ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd63c37279a36f2bd5ea3fd170505f707e478ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba40314e1a28e6230c6f404ee3b23de3efb7709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba40314e1a28e6230c6f404ee3b23de3efb7709", "html_url": "https://github.com/rust-lang/rust/commit/4ba40314e1a28e6230c6f404ee3b23de3efb7709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba40314e1a28e6230c6f404ee3b23de3efb7709/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c25b29575c17434406b69773f8c2961af343b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c25b29575c17434406b69773f8c2961af343b3", "html_url": "https://github.com/rust-lang/rust/commit/a7c25b29575c17434406b69773f8c2961af343b3"}], "stats": {"total": 286, "additions": 143, "deletions": 143}, "files": [{"sha": "390ed5a1f938b2b834de443fc5b79dafbd97d668", "filename": "src/test/rustdoc/anonymous-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fanonymous-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fanonymous-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanonymous-lifetime.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -12,7 +12,7 @@ pub trait Stream {\n }\n \n // @has 'foo/trait.Stream.html'\n-// @has - '//*[@class=\"code-header in-band\"]' 'impl<S: ?Sized + Stream + Unpin> Stream for &mut S'\n+// @has - '//*[@class=\"code-header\"]' 'impl<S: ?Sized + Stream + Unpin> Stream for &mut S'\n impl<S: ?Sized + Stream + Unpin> Stream for &mut S {\n     type Item = S::Item;\n "}, {"sha": "a3e10ee5555a026122f6f098546e42ad7b689d7b", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -13,7 +13,7 @@ pub trait Foo {\n pub struct Bar;\n \n impl Foo for Bar {\n-    // @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header in-band\"]' 'impl Foo for Bar'\n+    // @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header\"]' 'impl Foo for Bar'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n@@ -81,7 +81,7 @@ pub trait Qux {\n     const QUX_DEFAULT2: u32 = 3;\n }\n \n-// @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header in-band\"]' 'impl Qux for Bar'\n+// @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header\"]' 'impl Qux for Bar'\n impl Qux for Bar {\n     // @has - '//*[@id=\"associatedconstant.QUX0\"]' 'const QUX0: u8'\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX0 in trait.\""}, {"sha": "437f0001fcfc443afb0ad1bf66e6ec95c2ad1a56", "filename": "src/test/rustdoc/blanket-reexport-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.S.html '//*[@id=\"impl-Into%3CU%3E-for-S\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n+// @has foo/struct.S.html '//*[@id=\"impl-Into%3CU%3E-for-S\"]//h3[@class=\"code-header\"]' 'impl<T, U> Into<U> for T'\n pub struct S2 {}\n mod m {\n     pub struct S {}"}, {"sha": "6cbae9abebb73021d2f43d5ee852a92336e128f0", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -7,7 +7,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl Add<Simd<u8, 16>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "5bf76e3c4690818b361e7bfa8e2665e0b1c7ee11", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -19,10 +19,10 @@ pub use extern_crate::WTrait;\n \n // @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n //      'pub trait Trait<const N: usize>'\n-// @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<1> for u8'\n-// @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<2> for u8'\n-// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<{1 + 2}> for u8'\n-// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<{1 + 2}> for u8'\n+// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//h3[@class=\"code-header\"]' \\\n //      'impl<const N: usize> Trait<N> for [u8; N]'\n pub trait Trait<const N: usize> {}\n impl Trait<1> for u8 {}\n@@ -36,7 +36,7 @@ pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8%2C%20M%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8%2C%20M%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N>where u8: Trait<N>'"}, {"sha": "75ee84279be3c840976325a93401735af5b4c800", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3ASorted%20}%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3ASorted%20}%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n impl<T> VSet<T, { Order::Sorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3AUnsorted%20}%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3AUnsorted%20}%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n impl<T> VSet<T, { Order::Unsorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -31,7 +31,7 @@ impl<T> VSet<T, { Order::Unsorted }> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//*[@id=\"impl-Escape%3Cr#%22%3Cscript%3Ealert(%22Escape%22)%3B%3C/script%3E%22#%3E\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n+// @has foo/struct.Escape.html '//*[@id=\"impl-Escape%3Cr#%22%3Cscript%3Ealert(%22Escape%22)%3B%3C/script%3E%22#%3E\"]/h3[@class=\"code-header\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n impl Escape<r#\"<script>alert(\"Escape\");</script>\"#> {\n     pub fn f() {}\n }"}, {"sha": "310e89a35c4a9a52ba62baa1a1faf5a383ab17a9", "filename": "src/test/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -12,7 +12,7 @@ pub struct Hasher<T> {\n unsafe impl<T: Default> Send for Hasher<T> {}\n \n // @has foo/struct.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Send for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Send for Foo'\n pub struct Foo {\n     hasher: Hasher<[u8; 3]>,\n }"}, {"sha": "c1f95ac91c394d7717bda3393d0f97a20d338a7c", "filename": "src/test/rustdoc/duplicate_impls/issue-33054.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,12 +1,12 @@\n // ignore-tidy-linelength\n \n // @has issue_33054/impls/struct.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Foo'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for Foo'\n // @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n // @count - '//*[@id=\"main-content\"]/div[@id=\"implementations-list\"]/details/summary/*[@class=\"impl has-srclink\"]' 1\n // @has issue_33054/impls/bar/trait.Bar.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for Foo'\n // @count - '//*[@class=\"struct\"]' 1\n pub mod impls;\n "}, {"sha": "95d4db06b3171f7606dbba351238b799682ff2e7", "filename": "src/test/rustdoc/empty-impl-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -16,5 +16,5 @@ pub struct Another;\n pub trait Bar {}\n \n // @has 'foo/struct.Another.html'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Another'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for Another'\n impl Bar for Another {}"}, {"sha": "fd1bc21400837eedb18c0da8c3b37c939f1cbebe", "filename": "src/test/rustdoc/extern-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -19,9 +19,9 @@ impl Foo {\n // @has foo/trait.Bar.html\n pub trait Bar {}\n \n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for fn()'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for fn()'\n impl Bar for fn() {}\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for extern \"C\" fn()'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for extern \"C\" fn()'\n impl Bar for extern fn() {}\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for extern \"system\" fn()'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Bar for extern \"system\" fn()'\n impl Bar for extern \"system\" fn() {}"}, {"sha": "9e060ff2026f6c64f34227c38bf5efb08e448d77", "filename": "src/test/rustdoc/fn-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffn-bound.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -11,7 +11,7 @@ pub struct ConditionalIterator<F> {\n }\n \n \n-// @has 'fn_bound/struct.ConditionalIterator.html' '//h3[@class=\"code-header in-band\"]' 'impl<F: Fn(&i32)> Iterator for ConditionalIterator<F>'\n+// @has 'fn_bound/struct.ConditionalIterator.html' '//h3[@class=\"code-header\"]' 'impl<F: Fn(&i32)> Iterator for ConditionalIterator<F>'\n impl<F: Fn(&i32)> Iterator for ConditionalIterator<F> {\n     type Item = ();\n "}, {"sha": "6f68b1574992b4baa9e9c95a687c558bb5f3c67e", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,7 +5,7 @@ use std::fmt;\n // @!has foo/struct.Bar.html '//*[@id=\"impl-ToString-for-Bar\"]' ''\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//*[@id=\"impl-ToString-for-Foo\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-ToString-for-Foo\"]//h3[@class=\"code-header\"]' 'impl<T> ToString for T'\n pub struct Foo;\n // @has foo/struct.Foo.html '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-ToString-for-Foo\"]' 'ToString'\n "}, {"sha": "3493ae6d2bbb59cb5f72ccbb5e4cfe49b2e8a69d", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -49,7 +49,7 @@ impl<'a> Foo<'a> {\n // @has foo/trait.B.html\n pub trait B<'x> {}\n \n-// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n+// @has - '//h3[@class=\"code-header\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n impl<'a> B<'a> for dyn for<'b> Trait<'b> {}\n \n // @has foo/struct.Bar.html"}, {"sha": "bb978dc0f3ec83eaef98f3f7833618098d694bc1", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -4,13 +4,13 @@ pub trait Foo {}\n \n pub struct Bar<T> { field: T }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for Bar<u8>\"\n impl Foo for Bar<u8> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for Bar<u16>\"\n impl Foo for Bar<u16> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<'a> Foo for &'a Bar<u8>\"\n impl<'a> Foo for &'a Bar<u8> {}\n \n@@ -22,9 +22,9 @@ pub mod mod2 {\n     pub enum Baz {}\n }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for foo::mod1::Baz\"\n impl Foo for mod1::Baz {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n impl<'a> Foo for &'a mod2::Baz {}"}, {"sha": "0a8c2c8d2a9e6619cf31a81272c3697f81e4bc2d", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,8 +5,8 @@ pub auto trait AnAutoTrait {}\n \n pub struct Foo<T> { field: T }\n \n-// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n-// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "6e89167b3a4512fa44ccf57466fbbad4beb855c3", "filename": "src/test/rustdoc/inline_cross/issue-31948-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,22 +5,22 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_1/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n-// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n-// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_1/trait.Bark.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n+// @has - '//h3[@class=\"code-header\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'for Wobble'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Bark;\n \n // @has issue_31948_1/trait.Woof.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n+// @has - '//h3[@class=\"code-header\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'for Wobble'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Woof;\n \n // @!has issue_31948_1/trait.Bar.html"}, {"sha": "141e07656a09c48b2ac298d73ea1308a8175697c", "filename": "src/test/rustdoc/inline_cross/issue-31948-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,15 +5,15 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_2/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n-// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bar for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_2/trait.Qux.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n+// @has - '//h3[@class=\"code-header\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::hidden::Qux;\n \n // @!has issue_31948_2/trait.Bar.html"}, {"sha": "96fc6ca47e7f656d95691bffaa164e033dbba5fe", "filename": "src/test/rustdoc/inline_cross/issue-31948.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,22 +5,22 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948/struct.Foo.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n-// @!has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n-// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::Foo;\n \n // @has issue_31948/trait.Bark.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n+// @has - '//h3[@class=\"code-header\"]' 'for Foo'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wibble'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::Bark;\n \n // @has issue_31948/trait.Woof.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n+// @has - '//h3[@class=\"code-header\"]' 'for Foo'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wibble'\n+// @!has - '//h3[@class=\"code-header\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::Woof;\n \n // @!has issue_31948/trait.Bar.html"}, {"sha": "183fd15abbe17f85a2614589c0c92992bf3a67f1", "filename": "src/test/rustdoc/inline_cross/issue-32881.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,7 +5,7 @@\n extern crate rustdoc_trait_object_impl;\n \n // @has issue_32881/trait.Bar.html\n-// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> dyn Bar\"\n-// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> Debug for dyn Bar\"\n+// @has - '//h3[@class=\"code-header\"]' \"impl<'a> dyn Bar\"\n+// @has - '//h3[@class=\"code-header\"]' \"impl<'a> Debug for dyn Bar\"\n \n pub use rustdoc_trait_object_impl::Bar;"}, {"sha": "d954707facfe652bb4dc7489e1cd47f06499526a", "filename": "src/test/rustdoc/inline_cross/issue-33113.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,6 +5,6 @@\n extern crate bar;\n \n // @has issue_33113/trait.Bar.html\n-// @has - '//h3[@class=\"code-header in-band\"]' \"for &'a char\"\n-// @has - '//h3[@class=\"code-header in-band\"]' \"for Foo\"\n+// @has - '//h3[@class=\"code-header\"]' \"for &'a char\"\n+// @has - '//h3[@class=\"code-header\"]' \"for Foo\"\n pub use bar::Bar;"}, {"sha": "b646babacc5cc9ca49375a7a972bfccb720d846d", "filename": "src/test/rustdoc/inline_cross/trait-vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -3,5 +3,5 @@\n extern crate inner;\n \n // @has trait_vis/struct.SomeStruct.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for SomeStruct'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Clone for SomeStruct'\n pub use inner::SomeStruct;"}, {"sha": "19b69da15138be6bdfac7e5ba5a603ef281779fa", "filename": "src/test/rustdoc/inline_local/trait-vis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -13,6 +13,6 @@ mod asdf {\n }\n \n // @has trait_vis/struct.SomeStruct.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl ThisTrait for SomeStruct'\n-// @!has - '//h3[@class=\"code-header in-band\"]' 'impl PrivateTrait for SomeStruct'\n+// @has - '//h3[@class=\"code-header\"]' 'impl ThisTrait for SomeStruct'\n+// @!has - '//h3[@class=\"code-header\"]' 'impl PrivateTrait for SomeStruct'\n pub use asdf::SomeStruct;"}, {"sha": "01ae4438500da03d36c3ead7533a5502243c302c", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for Twhere T: Debug\"\n+// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header']\" \"impl<T> MyTrait for Twhere T: Debug\"\n impl<T> MyTrait for T\n where\n     T: fmt::Debug,"}, {"sha": "7a128f0b897ed67b665a397c7bdc4ccdb305cdb4", "filename": "src/test/rustdoc/issue-33592.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-33592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-33592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33592.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -6,8 +6,8 @@ pub struct Bar;\n \n pub struct Baz;\n \n-// @has foo/trait.Foo.html '//h3[@class=\"code-header in-band\"]' 'impl Foo<i32> for Bar'\n+// @has foo/trait.Foo.html '//h3[@class=\"code-header\"]' 'impl Foo<i32> for Bar'\n impl Foo<i32> for Bar {}\n \n-// @has foo/trait.Foo.html '//h3[@class=\"code-header in-band\"]' 'impl<T> Foo<T> for Baz'\n+// @has foo/trait.Foo.html '//h3[@class=\"code-header\"]' 'impl<T> Foo<T> for Baz'\n impl<T> Foo<T> for Baz {}"}, {"sha": "8cfc4827a7f4cfeba5dbf035da503904d5b3e8db", "filename": "src/test/rustdoc/issue-46727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-46727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-46727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46727.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -3,5 +3,5 @@\n extern crate issue_46727;\n \n // @has issue_46727/trait.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Foo for Bar<[T; 3]>'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<T> Foo for Bar<[T; 3]>'\n pub use issue_46727::{Foo, Bar};"}, {"sha": "04bc4f304d68acc8e72e5021b42a22282bee7231", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -11,8 +11,8 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n }\n \n // @has issue_50159/struct.Switch.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B>where <B as Signal>::Item: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B>where <B as Signal>::Item: Sync'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<B> Send for Switch<B>where <B as Signal>::Item: Send'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<B> Sync for Switch<B>where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Switch<B: Signal> {"}, {"sha": "1c7aa9c7eefe50c7153bf1b5009a9cc99cc6ca9b", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -7,7 +7,7 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Owned<T>where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,"}, {"sha": "7b7290ab4b77c39cf862408852b13a9cd8355832", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,10 +1,10 @@\n pub trait ScopeHandle<'scope> {}\n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'scope, S> Send for ScopeFutureContents<'scope, S>where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S>where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,"}, {"sha": "22a18ef90e13ad68b3c57e16f0eda6e45b173c8a", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,18 +1,18 @@\n #![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Send for A\"\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "b4eef344b5f3b6f01abd00cc4bdae13d9934b496", "filename": "src/test/rustdoc/issue-56822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -17,7 +17,7 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'a> Send for Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output"}, {"sha": "fbb0f82ae39577701447ddd905e69b7b2723c5f7", "filename": "src/test/rustdoc/issue-60726.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-60726.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -26,9 +26,9 @@ where\n {}\n \n // @has issue_60726/struct.IntoIter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for IntoIter<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for IntoIter<T>\"\n pub struct IntoIter<T>{\n     hello:DynTrait<FooInterface<T>>,"}, {"sha": "3b11059a755d0f23a57ed2460fe5a96d88e37861", "filename": "src/test/rustdoc/issue-75588.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -10,8 +10,8 @@ extern crate realcore;\n extern crate real_gimli;\n \n // issue #74672\n-// @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//h3[@class=\"code-header in-band\"]' 'impl Deref for EndianSlice'\n+// @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//h3[@class=\"code-header\"]' 'impl Deref for EndianSlice'\n pub use realcore::Deref;\n \n-// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n+// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//h3[@class=\"code-header\"]' 'impl Join for Foo'\n pub use realcore::Join;"}, {"sha": "62fbc2444dbc297976e6bb264f3453b20d0e5f58", "filename": "src/test/rustdoc/issue-80233-normalize-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -31,7 +31,7 @@ impl<T: Trait3> Trait3 for Vec<T> {\n pub struct Struct1 {}\n \n // @has issue_80233_normalize_auto_trait/struct.Question.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Question<T>'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<T> Send for Question<T>'\n pub struct Question<T: Trait1> {\n     pub ins: <<Vec<T> as Trait3>::Type3 as Trait2>::Type2,\n }"}, {"sha": "adf4d111a6cb91b08748a7487a340e5fdbd57569", "filename": "src/test/rustdoc/issue-82465-asref-for-and-of-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,14 +1,14 @@\n use std::convert::AsRef;\n pub struct Local;\n \n-// @has issue_82465_asref_for_and_of_local/struct.Local.html '//h3[@class=\"code-header in-band\"]' 'impl AsRef<str> for Local'\n+// @has issue_82465_asref_for_and_of_local/struct.Local.html '//h3[@class=\"code-header\"]' 'impl AsRef<str> for Local'\n impl AsRef<str> for Local {\n     fn as_ref(&self) -> &str {\n         todo!()\n     }\n }\n \n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl AsRef<Local> for str'\n+// @has - '//h3[@class=\"code-header\"]' 'impl AsRef<Local> for str'\n impl AsRef<Local> for str {\n     fn as_ref(&self) -> &Local {\n         todo!()"}, {"sha": "d50268509b2c1ababc06f03b2a4d123202869fd3", "filename": "src/test/rustdoc/issue-98697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-98697.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -12,6 +12,6 @@ extern crate issue_98697_reexport_with_anonymous_lifetime;\n // @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n \n-// @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait<&Extra> for Extra'\n-// @!has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl<'\n+// @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl MyTrait<&Extra> for Extra'\n+// @!has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl<'\n pub use issue_98697_reexport_with_anonymous_lifetime::Extra;"}, {"sha": "af19c784d6d0514c85cf4cd8148d94778d5d4090", "filename": "src/test/rustdoc/negative-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -5,10 +5,10 @@ pub struct Alpha;\n // @matches negative_impl/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>(B);\n \n-// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \"\\\n+// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \"\\\n // impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}"}, {"sha": "431c9aa79c7f9f84bc5ef3f06279503d2e84a9b7", "filename": "src/test/rustdoc/primitive-reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -14,7 +14,7 @@\n \n // There should be only one implementation listed.\n // @count - '//*[@class=\"impl has-srclink\"]' 1\n-// @has - '//*[@id=\"impl-Foo%3C%26A%3E-for-%26B\"]/*[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"impl-Foo%3C%26A%3E-for-%26B\"]/*[@class=\"code-header\"]' \\\n //        'impl<A, B> Foo<&A> for &B'\n #[doc(primitive = \"reference\")]\n /// this is a test!"}, {"sha": "7b336b398104752946849261388462e0f60bdc71", "filename": "src/test/rustdoc/primitive/primitive-generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,7 +1,7 @@\n #![feature(rustdoc_internals)]\n #![crate_name = \"foo\"]\n \n-// @has foo/primitive.i32.html '//*[@id=\"impl-ToString-for-i32\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/primitive.i32.html '//*[@id=\"impl-ToString-for-i32\"]//h3[@class=\"code-header\"]' 'impl<T> ToString for T'\n \n #[doc(primitive = \"i32\")]\n /// Some useless docs, wouhou!"}, {"sha": "aa38485c44558b7658d0e0100fdaaa7105597222", "filename": "src/test/rustdoc/recursive-deref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,7 +9,7 @@ impl C {\n     pub fn c(&self) {}\n }\n \n-// @has recursive_deref/struct.A.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for A'\n+// @has recursive_deref/struct.A.html '//h3[@class=\"code-header\"]' 'impl Deref for A'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.c\"]' 'pub fn c(&self)'\n impl Deref for A {\n     type Target = B;\n@@ -19,7 +19,7 @@ impl Deref for A {\n     }\n }\n \n-// @has recursive_deref/struct.B.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for B'\n+// @has recursive_deref/struct.B.html '//h3[@class=\"code-header\"]' 'impl Deref for B'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.c\"]' 'pub fn c(&self)'\n impl Deref for B {\n     type Target = C;\n@@ -29,7 +29,7 @@ impl Deref for B {\n     }\n }\n \n-// @has recursive_deref/struct.C.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for C'\n+// @has recursive_deref/struct.C.html '//h3[@class=\"code-header\"]' 'impl Deref for C'\n impl Deref for C {\n     type Target = B;\n \n@@ -49,7 +49,7 @@ impl G {\n     pub fn g() {}\n }\n \n-// @has recursive_deref/struct.D.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for D'\n+// @has recursive_deref/struct.D.html '//h3[@class=\"code-header\"]' 'impl Deref for D'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n // @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for D {\n@@ -60,7 +60,7 @@ impl Deref for D {\n     }\n }\n \n-// @has recursive_deref/struct.E.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for E'\n+// @has recursive_deref/struct.E.html '//h3[@class=\"code-header\"]' 'impl Deref for E'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n // @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for E {\n@@ -71,7 +71,7 @@ impl Deref for E {\n     }\n }\n \n-// @has recursive_deref/struct.F.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for F'\n+// @has recursive_deref/struct.F.html '//h3[@class=\"code-header\"]' 'impl Deref for F'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n // @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for F {\n@@ -82,7 +82,7 @@ impl Deref for F {\n     }\n }\n \n-// @has recursive_deref/struct.G.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for G'\n+// @has recursive_deref/struct.G.html '//h3[@class=\"code-header\"]' 'impl Deref for G'\n impl Deref for G {\n     type Target = E;\n \n@@ -100,7 +100,7 @@ impl I {\n     pub fn i() {}\n }\n \n-// @has recursive_deref/struct.H.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for H'\n+// @has recursive_deref/struct.H.html '//h3[@class=\"code-header\"]' 'impl Deref for H'\n // @!has '-' '//*[@id=\"deref-methods-I\"]' ''\n impl Deref for H {\n     type Target = I;\n@@ -110,7 +110,7 @@ impl Deref for H {\n     }\n }\n \n-// @has recursive_deref/struct.I.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for I'\n+// @has recursive_deref/struct.I.html '//h3[@class=\"code-header\"]' 'impl Deref for I'\n impl Deref for I {\n     type Target = H;\n "}, {"sha": "8bd402291aabf39bab65b3dd5c8a3fb48c497aef", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -30,10 +30,10 @@ pub trait Tr<T> {\n }\n \n // @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]' ''\n-// @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header in-band\"]' '~const'\n-// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where\"]' '~const'\n-// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]' '~const'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n impl<T: ~const Clone + ~const Destruct> const Tr<T> for T\n where\n     Option<T>: ~const Clone + ~const Destruct,"}, {"sha": "6712af527a3779ae0bac5d00b1d7dab378c7e5c8", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -6,9 +6,9 @@\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n-// @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n+// @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header\"]' 'impl Foo for u32'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n+// @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "feef4de8d57fe12e246648c3ab760f517603503e", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -11,7 +11,7 @@ pub struct Bar {\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html\n-// @has - '//*[@id=\"impl-Sized-for-Unsized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @has - '//*[@id=\"impl-Sized-for-Unsized\"]//h3[@class=\"code-header\"]' 'impl !Sized for Unsized'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "953563833c9c74f3b4efdd9891d599f07b1bc92e", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,11 +1,11 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Unsized.html\n-// @has - '//*[@id=\"impl-Sized-for-Unsized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @has - '//*[@id=\"impl-Sized-for-Unsized\"]/h3[@class=\"code-header\"]' 'impl !Sized for Unsized'\n // @!has - '//*[@id=\"impl-Sized-for-Unsized\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//*[@id=\"impl-Sync-for-Unsized\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n+// @has - '//*[@id=\"impl-Sync-for-Unsized\"]/h3[@class=\"code-header\"]' 'impl Sync for Unsized'\n // @!has - '//*[@id=\"impl-Sync-for-Unsized\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//*[@id=\"impl-Any-for-Unsized\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n+// @has - '//*[@id=\"impl-Any-for-Unsized\"]/h3[@class=\"code-header\"]' 'impl<T> Any for T'\n // @has - '//*[@id=\"impl-Any-for-Unsized\"]//a[@class=\"srclink rightside\"]' 'source'\n pub struct Unsized {\n     data: [u8],"}, {"sha": "7c6a388653c4987a3c766613afc91ccab65d986a", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,6 +1,6 @@\n // @has basic/struct.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T>where T: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T>where T: Sync'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<T> Send for Foo<T>where T: Send'\n+// @has - '//h3[@class=\"code-header\"]' 'impl<T> Sync for Foo<T>where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Foo<T> {"}, {"sha": "43393c21fddb41600b4039250f710337f90469d8", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K>where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "ed01f63f998b96f4113a916ea71be12c1146172a", "filename": "src/test/rustdoc/synthetic_auto/crate-local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -3,7 +3,7 @@\n pub auto trait Banana {}\n \n // @has crate_local/struct.Peach.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Banana for Peach'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Send for Peach'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Sync for Peach'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Banana for Peach'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Send for Peach'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Sync for Peach'\n pub struct Peach;"}, {"sha": "33170a844359b3ca09c2c42a9e7e5963f691f127", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,10 +9,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K>where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K>where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "77c04ad2ad942af03c327cf708a075a555d7a75c", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -1,8 +1,8 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Sync for Foo<T>where T: Sync'\n //\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1"}, {"sha": "2c2c848a5e0fb16db2574bd8015bf3e458b8e39a", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -3,10 +3,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "423bf115ab165c735a52d857921518db5a7a898d", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Send for Foo<T>where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Sync for Foo<T>where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "59f33623322a928d99a56cfeab77f79c6bb75ed6", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,7 +9,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Outer<T>where T: Send + Copy\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "35a487c764dc36a18f81be0d7670774420fbf435", "filename": "src/test/rustdoc/synthetic_auto/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -21,7 +21,7 @@ enum TyData<I: Interner> {\n struct VariableKind<I: Interner>(I::InternedType);\n \n // @has overflow/struct.BoundVarsCollector.html\n-// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n+// @has - '//h3[@class=\"code-header\"]' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n pub struct BoundVarsCollector<'tcx> {\n     val: VariableKind<RustInterner<'tcx>>\n }"}, {"sha": "558ff2add400cae71a218ba9ffcfb11012cd4f3e", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -23,10 +23,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K>where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K>where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n // 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {"}, {"sha": "c6ae96de77672381bd308742f21f5a528e3f2c6c", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<P1> Send for WriteAndThen<P1>where    <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "1a76cb919c2989748d476bbbfe3aabdf572ad941", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -3,7 +3,7 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Owned<T>where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,"}, {"sha": "a65dd7a546cdcfd2179fbab76a011d28bab6f73e", "filename": "src/test/rustdoc/traits-in-bodies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -4,7 +4,7 @@\n pub struct Bounded<T: Clone>(T);\n \n // @has traits_in_bodies/struct.SomeStruct.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for SomeStruct'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Clone for SomeStruct'\n pub struct SomeStruct;\n \n fn asdf() -> Bounded<SomeStruct> {\n@@ -18,7 +18,7 @@ fn asdf() -> Bounded<SomeStruct> {\n }\n \n // @has traits_in_bodies/struct.Point.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Copy for Point'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Copy for Point'\n #[derive(Clone)]\n pub struct Point {\n     x: i32,\n@@ -31,7 +31,7 @@ const _FOO: () = {\n };\n \n // @has traits_in_bodies/struct.Inception.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for Inception'\n+// @has - '//h3[@class=\"code-header\"]' 'impl Clone for Inception'\n pub struct Inception;\n \n static _BAR: usize = {"}, {"sha": "d5dfa9484891a66a341c89c723ededde9d2030ee", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -9,8 +9,8 @@ impl MyStruct {\n }\n \n // @has typedef/type.MyAlias.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyAlias'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait for MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'impl MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'impl MyTrait for MyAlias'\n // @hasraw - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'"}, {"sha": "8b5bce28f5a2ac4cbc3552fd7d0fb0cb5de95ce5", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba40314e1a28e6230c6f404ee3b23de3efb7709/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=4ba40314e1a28e6230c6f404ee3b23de3efb7709", "patch": "@@ -13,7 +13,7 @@ pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n-// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<D> Delta<D>where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n@@ -43,17 +43,17 @@ pub trait TraitWhere {\n     { todo!() }\n }\n \n-// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n-// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n impl<E> MyTrait for Echo<E>where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n-// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n-// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n "}]}