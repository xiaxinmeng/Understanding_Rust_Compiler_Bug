{"sha": "6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOTVlNDAwZDgyNjk5ODg3YjY2ZjVkZTBmZWYyYmI1ZTFmOGNjMzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-07T15:21:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-07T15:35:25Z"}, "message": "repair more hash functions", "tree": {"sha": "2b3cdfc2df4c3f1d4a8b7186e3647b3fdd72c6aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3cdfc2df4c3f1d4a8b7186e3647b3fdd72c6aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "html_url": "https://github.com/rust-lang/rust/commit/6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "html_url": "https://github.com/rust-lang/rust/commit/03a6e542126b755a9cd2f4f56144107ba0f4d1cd"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "022b249674b974c747fd327e1fb87add1bba43b9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "patch": "@@ -1299,23 +1299,23 @@ fn type_autoderef(cx: ctxt, t: ty::t) -> ty::t {\n fn hash_type_structure(st: sty) -> uint {\n     fn hash_uint(id: uint, n: uint) -> uint {\n         let h = id;\n-        h += h << 5u + n;\n+        h += (h << 5u) + n;\n         ret h;\n     }\n     fn hash_def(id: uint, did: ast::def_id) -> uint {\n         let h = id;\n-        h += h << 5u + (did.crate as uint);\n-        h += h << 5u + (did.node as uint);\n+        h += (h << 5u) + (did.crate as uint);\n+        h += (h << 5u) + (did.node as uint);\n         ret h;\n     }\n     fn hash_subty(id: uint, subty: t) -> uint {\n         let h = id;\n-        h += h << 5u + hash_ty(subty);\n+        h += (h << 5u) + hash_ty(subty);\n         ret h;\n     }\n     fn hash_type_constr(id: uint, c: @type_constr) -> uint {\n         let h = id;\n-        h += h << 5u + hash_def(h, c.node.id);\n+        h += (h << 5u) + hash_def(h, c.node.id);\n         ret hash_type_constr_args(h, c.node.args);\n     }\n     fn hash_type_constr_args(id: uint, args: [@ty_constr_arg]) -> uint {\n@@ -1338,8 +1338,8 @@ fn hash_type_structure(st: sty) -> uint {\n \n     fn hash_fn(id: uint, args: [arg], rty: t) -> uint {\n         let h = id;\n-        for a: arg in args { h += h << 5u + hash_ty(a.ty); }\n-        h += h << 5u + hash_ty(rty);\n+        for a: arg in args { h += (h << 5u) + hash_ty(a.ty); }\n+        h += (h << 5u) + hash_ty(rty);\n         ret h;\n     }\n     alt st {\n@@ -1366,19 +1366,19 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_str. { ret 17u; }\n       ty_tag(did, tys) {\n         let h = hash_def(18u, did);\n-        for typ: t in tys { h += h << 5u + hash_ty(typ); }\n+        for typ: t in tys { h += (h << 5u) + hash_ty(typ); }\n         ret h;\n       }\n       ty_box(mt) { ret hash_subty(19u, mt.ty); }\n       ty_vec(mt) { ret hash_subty(21u, mt.ty); }\n       ty_rec(fields) {\n         let h = 26u;\n-        for f: field in fields { h += h << 5u + hash_ty(f.mt.ty); }\n+        for f: field in fields { h += (h << 5u) + hash_ty(f.mt.ty); }\n         ret h;\n       }\n       ty_tup(ts) {\n         let h = 25u;\n-        for tt in ts { h += h << 5u + hash_ty(tt); }\n+        for tt in ts { h += (h << 5u) + hash_ty(tt); }\n         ret h;\n       }\n \n@@ -1389,7 +1389,7 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_native_fn(args, rty) { ret hash_fn(28u, args, rty); }\n       ty_obj(methods) {\n         let h = 29u;\n-        for m: method in methods { h += h << 5u + str::hash(m.ident); }\n+        for m: method in methods { h += (h << 5u) + str::hash(m.ident); }\n         ret h;\n       }\n       ty_var(v) { ret hash_uint(30u, v as uint); }\n@@ -1400,23 +1400,23 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_ptr(mt) { ret hash_subty(35u, mt.ty); }\n       ty_res(did, sub, tps) {\n         let h = hash_subty(hash_def(18u, did), sub);\n-        for tp: t in tps { h += h << 5u + hash_ty(tp); }\n+        for tp: t in tps { h += (h << 5u) + hash_ty(tp); }\n         ret h;\n       }\n       ty_constr(t, cs) {\n         let h = 36u;\n-        for c: @type_constr in cs { h += h << 5u + hash_type_constr(h, c); }\n+        for c: @type_constr in cs { h += (h << 5u) + hash_type_constr(h, c); }\n         ret h;\n       }\n-      ty_uniq(mt) { let h = 37u; h += h << 5u + hash_ty(mt.ty); ret h; }\n+      ty_uniq(mt) { let h = 37u; h += (h << 5u) + hash_ty(mt.ty); ret h; }\n     }\n }\n \n fn hash_type_info(st: sty, cname_opt: option::t<str>) -> uint {\n     let h = hash_type_structure(st);\n     alt cname_opt {\n       none. {/* no-op */ }\n-      some(s) { h += h << 5u + str::hash(s); }\n+      some(s) { h += (h << 5u) + str::hash(s); }\n     }\n     ret h;\n }"}, {"sha": "60b3f2b6fa409b1e26d0d6f22eb68eaa4684897c", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "patch": "@@ -199,7 +199,7 @@ fn hash_ty(&&t: @ty) -> uint {\n }\n \n fn hash_def_id(&&id: def_id) -> uint {\n-    id.crate as uint << 16u + (id.node as uint)\n+    (id.crate as uint << 16u) + (id.node as uint)\n }\n \n fn eq_def_id(&&a: def_id, &&b: def_id) -> bool {"}, {"sha": "521dc33758e986d980d224ceb3e7b50322d8003a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c95e400d82699887b66f5de0fef2bb5e1f8cc32/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=6c95e400d82699887b66f5de0fef2bb5e1f8cc32", "patch": "@@ -324,7 +324,7 @@ fn char_range_at(s: str, i: uint) -> {ch: char, next: uint} {\n     // Clunky way to get the right bits from the first byte. Uses two shifts,\n     // the first to clip off the marker bits at the left of the byte, and then\n     // a second (as uint) to get it to the right position.\n-    val += (b0 << (w + 1u as u8) as uint) << (w - 1u) * 6u - w - 1u;\n+    val += (b0 << (w + 1u as u8) as uint) << ((w - 1u) * 6u - w - 1u);\n     ret {ch: val as char, next: i};\n }\n "}]}