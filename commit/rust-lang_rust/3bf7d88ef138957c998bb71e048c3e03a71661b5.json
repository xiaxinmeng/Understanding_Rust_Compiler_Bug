{"sha": "3bf7d88ef138957c998bb71e048c3e03a71661b5", "node_id": "C_kwDOAAsO6NoAKDNiZjdkODhlZjEzODk1N2M5OThiYjcxZTA0OGMzZTAzYTcxNjYxYjU", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-05T05:07:55Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-05T07:58:20Z"}, "message": "Add -Z maximal-hir-to-mir-coverage flag", "tree": {"sha": "10a1cf2dd4ca73127e5b3a3dc880216ab8face7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a1cf2dd4ca73127e5b3a3dc880216ab8face7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf7d88ef138957c998bb71e048c3e03a71661b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf7d88ef138957c998bb71e048c3e03a71661b5", "html_url": "https://github.com/rust-lang/rust/commit/3bf7d88ef138957c998bb71e048c3e03a71661b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf7d88ef138957c998bb71e048c3e03a71661b5/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1449560e31f7f801d81268a3dad783181656dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1449560e31f7f801d81268a3dad783181656dff", "html_url": "https://github.com/rust-lang/rust/commit/d1449560e31f7f801d81268a3dad783181656dff"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "2b8f6557c829b32042879be2c525ed09e4fbef8f", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3bf7d88ef138957c998bb71e048c3e03a71661b5", "patch": "@@ -747,6 +747,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n+    tracked!(maximal_hir_to_mir_coverage, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);"}, {"sha": "bde3e28c1345d0c29003e918aabc9d59f37b9ddf", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=3bf7d88ef138957c998bb71e048c3e03a71661b5", "patch": "@@ -173,6 +173,16 @@ impl TyCtxt<'_> {\n     /// Walks upwards from `id` to find a node which might change lint levels with attributes.\n     /// It stops at `bound` and just returns it if reached.\n     pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {\n+        // Some consumers of rustc need to map MIR locations back to HIR nodes. Currently the\n+        // the only part of rustc that tracks MIR -> HIR is the `SourceScopeLocalData::lint_root`\n+        // field that tracks lint levels for MIR locations.  Normally the number of source scopes\n+        // is limited to the set of nodes with lint  annotations. The -Zmaximal-hir-to-mir-coverage\n+        // flag changes this behavior to maximize the number of source scopes, increasing the\n+        // granularity of the MIR->HIR mapping.\n+        if self.sess.opts.unstable_opts.maximal_hir_to_mir_coverage {\n+            return id;\n+        }\n+\n         let hir = self.hir();\n         loop {\n             if id == bound {"}, {"sha": "8e9198b79dff7cb39284333ad0f1fe6f53e27d78", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf7d88ef138957c998bb71e048c3e03a71661b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3bf7d88ef138957c998bb71e048c3e03a71661b5", "patch": "@@ -1382,6 +1382,9 @@ options! {\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n         \"show macro backtraces (default: no)\"),\n+    maximal_hir_to_mir_coverage: bool = (false, parse_bool, [TRACKED],\n+        \"save as much information as possible about the correspondence between MIR and HIR \\\n+        as source scopes (default: no)\"),\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking \\\n         the same values as the target option of the same name\"),"}, {"sha": "94cf7b94241df8d79144969b852f538de8ccfa88", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bf7d88ef138957c998bb71e048c3e03a71661b5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3bf7d88ef138957c998bb71e048c3e03a71661b5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=3bf7d88ef138957c998bb71e048c3e03a71661b5", "patch": "@@ -77,6 +77,7 @@\n     -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n     -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)\n     -Z                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n     -Z                              meta-stats=val -- gather metadata statistics (default: no)\n     -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)"}, {"sha": "5ca54633f219a14650af9be6d11208443dc25bc2", "filename": "src/test/ui/maximal_mir_to_hir_coverage.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf7d88ef138957c998bb71e048c3e03a71661b5/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf7d88ef138957c998bb71e048c3e03a71661b5/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaximal_mir_to_hir_coverage.rs?ref=3bf7d88ef138957c998bb71e048c3e03a71661b5", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmaximal-hir-to-mir-coverage\n+// run-pass\n+\n+// Just making sure this flag is accepted and doesn't crash the compiler\n+\n+fn main() {\n+  let x = 1;\n+  let y = x + 1;\n+  println!(\"{y}\");\n+}"}]}