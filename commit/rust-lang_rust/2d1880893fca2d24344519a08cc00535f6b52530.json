{"sha": "2d1880893fca2d24344519a08cc00535f6b52530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTg4MDg5M2ZjYTJkMjQzNDQ1MTlhMDhjYzAwNTM1ZjZiNTI1MzA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-16T18:18:15Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-17T11:24:47Z"}, "message": "Rollup merge of #52306 - ljedrz:obligation_forest_clone, r=varkor\n\nReduce the number of clone()s needed in obligation_forest\n\nSome can be avoided by using `remove_entry` instead of `remove`.", "tree": {"sha": "bc20675a9c664bbb285faabaf4fe3330ddf68bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc20675a9c664bbb285faabaf4fe3330ddf68bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1880893fca2d24344519a08cc00535f6b52530", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltN0f8ACgkQ/vbIBR0O\nATxm/w/9HqyqlLFrqy5nsSSmFr92j8YWohd5ZckbQptL6/LdOYognhk3hZNrAMaY\n2yLEwx6P+mVfQB4aJmBpiYNQMliwkskcWvfBWryUGcSANIPzaRnVjyyIDtMngx/D\npNOchFi4yAFS8DVf8rVihCyyu/8bV72MU8f8Vge70/8xjISHaGMUJdJmUk+UvMf3\n/v85klMeOeSjhbISWrzO3Vss2V7jfMeOJPz8BoS2YCYP/OsK/vAeSy/E4MllGaI+\nsVAzeBeAliqyJhpydEFO1cH8lX1qG102tOiop7GHFvgEZz8uUaOUnM/U+18xBgh1\nnyXltxhVxZfcTkZg9zQCIcrBs62PCIjRYY10+rDP171ShtFoR/+rPmrv9j76RtlR\nBIVXcKfAO7AXtgDT7mg0dmNPil7LJYiIDkEVXOhzJCwrfUshUk8Yi/K7IIsFyZ69\nJxsTS80sfYPp7m2+ZBvSusqHRpHFmrgbvV+QVR0i+mBLKBhekjEkSX+2WB8Sv7EN\noX3V8wSLJCpmlPpdPxGdYo2ZW3ZZ3xTbIZCCmUgNhvyps4hsuTL24deYc+DHx4Af\nlgjedviiS3Avk6P7iWP81eM+uBD0u8jl9iJ2cx1qlctj7ZFOQ5m91VHd6Vw2i5mZ\n9kAxN1zNuaVRFeup78/tb4s8NHz406ih+cmut6JbyELZ5lekNc4=\n=Au2i\n-----END PGP SIGNATURE-----", "payload": "tree bc20675a9c664bbb285faabaf4fe3330ddf68bec\nparent b086b09ef85620e1fd95c9d3aba4629174dd7809\nparent 384d04d31d35ef80324645d06e1afcf3ad48f4ed\nauthor kennytm <kennytm@gmail.com> 1531765095 +0800\ncommitter kennytm <kennytm@gmail.com> 1531826687 +0800\n\nRollup merge of #52306 - ljedrz:obligation_forest_clone, r=varkor\n\nReduce the number of clone()s needed in obligation_forest\n\nSome can be avoided by using `remove_entry` instead of `remove`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1880893fca2d24344519a08cc00535f6b52530", "html_url": "https://github.com/rust-lang/rust/commit/2d1880893fca2d24344519a08cc00535f6b52530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1880893fca2d24344519a08cc00535f6b52530/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b086b09ef85620e1fd95c9d3aba4629174dd7809", "url": "https://api.github.com/repos/rust-lang/rust/commits/b086b09ef85620e1fd95c9d3aba4629174dd7809", "html_url": "https://github.com/rust-lang/rust/commit/b086b09ef85620e1fd95c9d3aba4629174dd7809"}, {"sha": "384d04d31d35ef80324645d06e1afcf3ad48f4ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/384d04d31d35ef80324645d06e1afcf3ad48f4ed", "html_url": "https://github.com/rust-lang/rust/commit/384d04d31d35ef80324645d06e1afcf3ad48f4ed"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "0d6cf260dcd98978bf18cc33416c906ccb77bb70", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d1880893fca2d24344519a08cc00535f6b52530/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1880893fca2d24344519a08cc00535f6b52530/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=2d1880893fca2d24344519a08cc00535f6b52530", "patch": "@@ -496,9 +496,14 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     }\n                 }\n                 NodeState::Done => {\n-                    self.waiting_cache.remove(self.nodes[i].obligation.as_predicate());\n-                    // FIXME(HashMap): why can't I get my key back?\n-                    self.done_cache.insert(self.nodes[i].obligation.as_predicate().clone());\n+                    // Avoid cloning the key (predicate) in case it exists in the waiting cache\n+                    if let Some((predicate, _)) = self.waiting_cache\n+                        .remove_entry(self.nodes[i].obligation.as_predicate())\n+                    {\n+                        self.done_cache.insert(predicate);\n+                    } else {\n+                        self.done_cache.insert(self.nodes[i].obligation.as_predicate().clone());\n+                    }\n                     node_rewrites[i] = nodes_len;\n                     dead_nodes += 1;\n                 }"}]}