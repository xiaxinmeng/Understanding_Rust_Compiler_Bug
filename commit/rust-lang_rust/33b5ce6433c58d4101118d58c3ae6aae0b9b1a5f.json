{"sha": "33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "node_id": "C_kwDOAAsO6NoAKDMzYjVjZTY0MzNjNThkNDEwMTExOGQ1OGMzYWU2YWFlMGI5YjFhNWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T06:15:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T06:15:41Z"}, "message": "Rollup merge of #99386 - AngelicosPhosphoros:add_retain_test_maybeuninit, r=JohnTitor\n\nAdd tests that check `Vec::retain` predicate execution order.\n\nThis behaviour is documented for `Vec::retain` which means that there is code that rely on that but there weren't tests about that.", "tree": {"sha": "4f724a787ee732f0a45cf1ad1fd48dd34df8bef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f724a787ee732f0a45cf1ad1fd48dd34df8bef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAx8NCRBK7hj4Ov3rIwAA5EoIADMwUF1KHpFiIU0uprapQrmL\nQTqdKKX/KmpiDfRiqdtwhmCJYiQT2xtuii+xBorTU0Y9WVAnr+4dqToDbOV89n0a\npTIzUxmZpOtJ5MSV637PIkTZNA4cP+Oxdqk4mHLOjMAGPNOdZBz4MZJ9EirGkjtu\nNkSYId6WfO/W5b2F4P2Pxbkv2tBK6UBaWAsLqDoCf+ruCnW95jrURgU6h1hdVowE\nOfBQ3I33+1bDswN68MwoH8I8jMzYhOdEPEl0VDFj1o06tPPgHiORjbF6UK9aNhaO\n0L9ilQwhc7+YxGoPqpF+ruSfIqTrnTKPZTs5CJR2ihansX8JDmcQ8A4nCDJQZJg=\n=Oa99\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f724a787ee732f0a45cf1ad1fd48dd34df8bef4\nparent a4950ef7eb1bc72ede47775deea4018c7b62d40a\nparent 85a9c741588aaf296ce94f480e342c2bf5c131ba\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661148941 +0530\ncommitter GitHub <noreply@github.com> 1661148941 +0530\n\nRollup merge of #99386 - AngelicosPhosphoros:add_retain_test_maybeuninit, r=JohnTitor\n\nAdd tests that check `Vec::retain` predicate execution order.\n\nThis behaviour is documented for `Vec::retain` which means that there is code that rely on that but there weren't tests about that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "html_url": "https://github.com/rust-lang/rust/commit/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4950ef7eb1bc72ede47775deea4018c7b62d40a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4950ef7eb1bc72ede47775deea4018c7b62d40a", "html_url": "https://github.com/rust-lang/rust/commit/a4950ef7eb1bc72ede47775deea4018c7b62d40a"}, {"sha": "85a9c741588aaf296ce94f480e342c2bf5c131ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a9c741588aaf296ce94f480e342c2bf5c131ba", "html_url": "https://github.com/rust-lang/rust/commit/85a9c741588aaf296ce94f480e342c2bf5c131ba"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "5be4d5f1279e555de2cc1ad125e1fdfc82c4bd22", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "patch": "@@ -293,6 +293,22 @@ fn test_retain() {\n     assert_eq!(vec, [2, 4]);\n }\n \n+#[test]\n+fn test_retain_predicate_order() {\n+    for to_keep in [true, false] {\n+        let mut number_of_executions = 0;\n+        let mut vec = vec![1, 2, 3, 4];\n+        let mut next_expected = 1;\n+        vec.retain(|&x| {\n+            assert_eq!(next_expected, x);\n+            next_expected += 1;\n+            number_of_executions += 1;\n+            to_keep\n+        });\n+        assert_eq!(number_of_executions, 4);\n+    }\n+}\n+\n #[test]\n fn test_retain_pred_panic_with_hole() {\n     let v = (0..5).map(Rc::new).collect::<Vec<_>>();\n@@ -354,6 +370,35 @@ fn test_retain_drop_panic() {\n     assert!(v.iter().all(|r| Rc::strong_count(r) == 1));\n }\n \n+#[test]\n+fn test_retain_maybeuninits() {\n+    // This test aimed to be run under miri.\n+    use core::mem::MaybeUninit;\n+    let mut vec: Vec<_> = [1i32, 2, 3, 4].map(|v| MaybeUninit::new(vec![v])).into();\n+    vec.retain(|x| {\n+        // SAFETY: Retain must visit every element of Vec in original order and exactly once.\n+        // Our values is initialized at creation of Vec.\n+        let v = unsafe { x.assume_init_ref()[0] };\n+        if v & 1 == 0 {\n+            return true;\n+        }\n+        // SAFETY: Value is initialized.\n+        // Value wouldn't be dropped by `Vec::retain`\n+        // because `MaybeUninit` doesn't drop content.\n+        drop(unsafe { x.assume_init_read() });\n+        false\n+    });\n+    let vec: Vec<i32> = vec\n+        .into_iter()\n+        .map(|x| unsafe {\n+            // SAFETY: All values dropped in retain predicate must be removed by `Vec::retain`.\n+            // Remaining values are initialized.\n+            x.assume_init()[0]\n+        })\n+        .collect();\n+    assert_eq!(vec, [2, 4]);\n+}\n+\n #[test]\n fn test_dedup() {\n     fn case(a: Vec<i32>, b: Vec<i32>) {"}]}