{"sha": "868dba9f65a40ffd406baba9ca301b4dc33ff641", "node_id": "C_kwDOAAsO6NoAKDg2OGRiYTlmNjVhNDBmZmQ0MDZiYWJhOWNhMzAxYjRkYzMzZmY2NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T11:19:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T11:19:06Z"}, "message": "Auto merge of #9295 - Guilherme-Vasconcelos:manual-empty-string-creation, r=dswij\n\nAdd `manual_empty_string_creations` lint\n\nCloses #2972\n\n- [x] Followed [lint naming conventions][lint_naming]\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [x] `cargo test` passes locally\n- [x] Executed `cargo dev update_lints`\n- [x] Added lint documentation\n- [x] Run `cargo dev fmt`\n\nchangelog: [`manual_empty_string_creations`]: Add lint for empty String not being created with `String::new()`", "tree": {"sha": "5ad7dfee4e1721328930d7db626f57dd81f0fe9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad7dfee4e1721328930d7db626f57dd81f0fe9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/868dba9f65a40ffd406baba9ca301b4dc33ff641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/868dba9f65a40ffd406baba9ca301b4dc33ff641", "html_url": "https://github.com/rust-lang/rust/commit/868dba9f65a40ffd406baba9ca301b4dc33ff641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/868dba9f65a40ffd406baba9ca301b4dc33ff641/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeaaba3713d6590459f4516a783fbf76b3e59c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeaaba3713d6590459f4516a783fbf76b3e59c2f", "html_url": "https://github.com/rust-lang/rust/commit/eeaaba3713d6590459f4516a783fbf76b3e59c2f"}, {"sha": "1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "html_url": "https://github.com/rust-lang/rust/commit/1bf88414790bacf5773bd7f19f0c58e183d0ca7c"}], "stats": {"total": 409, "additions": 371, "deletions": 38}, "files": [{"sha": "edd7bc250a75992c841fad3604fa3450f61c7bab", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -3830,6 +3830,7 @@ Released 2018-09-13\n [`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_bits`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits\n+[`manual_empty_string_creations`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_empty_string_creations\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map"}, {"sha": "be05e67d724dfc120acfec0d1385dda0cd3df741", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -155,7 +155,7 @@ fn to_camel_case(name: &str) -> String {\n     name.split('_')\n         .map(|s| {\n             if s.is_empty() {\n-                String::from(\"\")\n+                String::new()\n             } else {\n                 [&s[0..1].to_uppercase(), &s[1..]].concat()\n             }"}, {"sha": "a0a4b07a77e5a189c4f4e06b44c2e0a247becf67", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -124,6 +124,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n+    LintId::of(manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_retain::MANUAL_RETAIN),"}, {"sha": "b7dbd30aa0c8517eccaa0a688076a1aac64b1aad", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -244,6 +244,7 @@ store.register_lints(&[\n     manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_bits::MANUAL_BITS,\n+    manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS,\n     manual_instant_elapsed::MANUAL_INSTANT_ELAPSED,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,"}, {"sha": "6972c75597aaca2d616cce9de5192cb650d3146e", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -44,6 +44,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n+    LintId::of(manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),"}, {"sha": "a041fbc7fd97ab7c04218ac4b05bbf7d53390aaa", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -273,6 +273,7 @@ mod main_recursion;\n mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n+mod manual_empty_string_creations;\n mod manual_instant_elapsed;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n@@ -933,6 +934,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n     store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n+    store.register_late_pass(|| Box::new(manual_empty_string_creations::ManualEmptyStringCreations));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "2502c8f880ddce76aa1045cfcdc815aaa315209d", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -192,7 +192,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n     match output.kind {\n         TyKind::Tup(tys) if tys.is_empty() => {\n             let sugg = \"remove the return type\";\n-            Some((sugg, \"\".into()))\n+            Some((sugg, String::new()))\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";"}, {"sha": "dd602a89b4f6650780c5fd12189e36db5a154066", "filename": "clippy_lints/src/manual_empty_string_creations.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_empty_string_creations.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -0,0 +1,141 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability::MachineApplicable;\n+use rustc_hir::{Expr, ExprKind, PathSegment, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, symbol, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of `\"\"` to create a `String`, such as `\"\".to_string()`, `\"\".to_owned()`,\n+    /// `String::from(\"\")` and others.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Different ways of creating an empty string makes your code less standardized, which can\n+    /// be confusing.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a = \"\".to_string();\n+    /// let b: String = \"\".into();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = String::new();\n+    /// let b = String::new();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub MANUAL_EMPTY_STRING_CREATIONS,\n+    style,\n+    \"empty String is being created manually\"\n+}\n+declare_lint_pass!(ManualEmptyStringCreations => [MANUAL_EMPTY_STRING_CREATIONS]);\n+\n+impl LateLintPass<'_> for ManualEmptyStringCreations {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        let ty = cx.typeck_results().expr_ty(expr);\n+        match ty.kind() {\n+            ty::Adt(adt_def, _) if adt_def.is_struct() => {\n+                if !cx.tcx.is_diagnostic_item(sym::String, adt_def.did()) {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        }\n+\n+        match expr.kind {\n+            ExprKind::Call(func, args) => {\n+                parse_call(cx, expr.span, func, args);\n+            },\n+            ExprKind::MethodCall(path_segment, args, _) => {\n+                parse_method_call(cx, expr.span, path_segment, args);\n+            },\n+            _ => (),\n+        }\n+    }\n+}\n+\n+/// Checks if an expression's kind corresponds to an empty &str.\n+fn is_expr_kind_empty_str(expr_kind: &ExprKind<'_>) -> bool {\n+    if  let ExprKind::Lit(lit) = expr_kind &&\n+        let LitKind::Str(value, _) = lit.node &&\n+        value == symbol::kw::Empty\n+    {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n+/// Emits the `MANUAL_EMPTY_STRING_CREATION` warning and suggests the appropriate fix.\n+fn warn_then_suggest(cx: &LateContext<'_>, span: Span) {\n+    span_lint_and_sugg(\n+        cx,\n+        MANUAL_EMPTY_STRING_CREATIONS,\n+        span,\n+        \"empty String is being created manually\",\n+        \"consider using\",\n+        \"String::new()\".into(),\n+        MachineApplicable,\n+    );\n+}\n+\n+/// Tries to parse an expression as a method call, emiting the warning if necessary.\n+fn parse_method_call(cx: &LateContext<'_>, span: Span, path_segment: &PathSegment<'_>, args: &[Expr<'_>]) {\n+    if args.is_empty() {\n+        // When parsing TryFrom::try_from(...).expect(...), we will have more than 1 arg.\n+        return;\n+    }\n+\n+    let ident = path_segment.ident.as_str();\n+    let method_arg_kind = &args[0].kind;\n+    if [\"to_string\", \"to_owned\", \"into\"].contains(&ident) && is_expr_kind_empty_str(method_arg_kind) {\n+        warn_then_suggest(cx, span);\n+    } else if let ExprKind::Call(func, args) = method_arg_kind {\n+        // If our first argument is a function call itself, it could be an `unwrap`-like function.\n+        // E.g. String::try_from(\"hello\").unwrap(), TryFrom::try_from(\"\").expect(\"hello\"), etc.\n+        parse_call(cx, span, func, args);\n+    }\n+}\n+\n+/// Tries to parse an expression as a function call, emiting the warning if necessary.\n+fn parse_call(cx: &LateContext<'_>, span: Span, func: &Expr<'_>, args: &[Expr<'_>]) {\n+    if args.len() != 1 {\n+        return;\n+    }\n+\n+    let arg_kind = &args[0].kind;\n+    if let ExprKind::Path(qpath) = &func.kind {\n+        if let QPath::TypeRelative(_, _) = qpath {\n+            // String::from(...) or String::try_from(...)\n+            if  let QPath::TypeRelative(ty, path_seg) = qpath &&\n+                [sym::from, sym::try_from].contains(&path_seg.ident.name) &&\n+                let TyKind::Path(qpath) = &ty.kind &&\n+                let QPath::Resolved(_, path) = qpath &&\n+                let [path_seg] = path.segments &&\n+                path_seg.ident.name == sym::String &&\n+                is_expr_kind_empty_str(arg_kind)\n+            {\n+                warn_then_suggest(cx, span);\n+            }\n+        } else if let QPath::Resolved(_, path) = qpath {\n+            // From::from(...) or TryFrom::try_from(...)\n+            if  let [path_seg1, path_seg2] = path.segments &&\n+                is_expr_kind_empty_str(arg_kind) && (\n+                    (path_seg1.ident.name == sym::From && path_seg2.ident.name == sym::from) ||\n+                    (path_seg1.ident.name == sym::TryFrom && path_seg2.ident.name == sym::try_from)\n+                )\n+            {\n+                warn_then_suggest(cx, span);\n+            }\n+        }\n+    }\n+}"}, {"sha": "3c4002a3aef99b86fc175c86b343c9530cfac29e", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -78,7 +78,7 @@ pub(super) fn check<'tcx>(\n                     map_span,\n                     String::from(if unwrap_snippet_none { \"and_then\" } else { \"map_or\" }),\n                 ),\n-                (expr.span.with_lo(unwrap_recv.span.hi()), String::from(\"\")),\n+                (expr.span.with_lo(unwrap_recv.span.hi()), String::new()),\n             ];\n \n             if !unwrap_snippet_none {"}, {"sha": "7c4ae746e90e91894f9c604dadc53254cb48fb52", "filename": "clippy_lints/src/misc_early/unneeded_wildcard_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -46,7 +46,7 @@ fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n             \"these patterns are unneeded as the `..` pattern can match those elements\"\n         },\n         if only_one { \"remove it\" } else { \"remove them\" },\n-        \"\".to_string(),\n+        String::new(),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "a5afbb8ff9da49272efd9887b20732ed221c0049", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                         (\n                             ret_expr.span,\n                             if inner_type.is_unit() {\n-                                \"\".to_string()\n+                                String::new()\n                             } else {\n                                 snippet(cx, arg.span.source_callsite(), \"..\").to_string()\n                             }"}, {"sha": "62020e21c81552a98e28c431396cdb18cde6c85d", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -32,8 +32,8 @@ msrv_aliases! {\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n     1,26,0 { RANGE_INCLUSIVE, STRING_RETAIN }\n+    1,24,0 { IS_ASCII_DIGIT }\n     1,18,0 { HASH_MAP_RETAIN, HASH_SET_RETAIN }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n-    1,24,0 { IS_ASCII_DIGIT }\n }"}, {"sha": "6f0485b5279b1112c173c8a5d07cfcbb872bd0d3", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -14,31 +14,31 @@ fn is_rust_file(filename: &str) -> bool {\n \n fn main() {\n     // std::string::String and &str should trigger the lint failure with .ext12\n-    let _ = String::from(\"\").ends_with(\".ext12\");\n+    let _ = String::new().ends_with(\".ext12\");\n     let _ = \"str\".ends_with(\".ext12\");\n \n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n \n     // std::string::String and &str should trigger the lint failure with .EXT12\n-    let _ = String::from(\"\").ends_with(\".EXT12\");\n+    let _ = String::new().ends_with(\".EXT12\");\n     let _ = \"str\".ends_with(\".EXT12\");\n \n     // The test struct should not trigger the lint failure with .EXT12\n     TestStruct {}.ends_with(\".EXT12\");\n \n     // Should not trigger the lint failure with .eXT12\n-    let _ = String::from(\"\").ends_with(\".eXT12\");\n+    let _ = String::new().ends_with(\".eXT12\");\n     let _ = \"str\".ends_with(\".eXT12\");\n     TestStruct {}.ends_with(\".eXT12\");\n \n     // Should not trigger the lint failure with .EXT123 (too long)\n-    let _ = String::from(\"\").ends_with(\".EXT123\");\n+    let _ = String::new().ends_with(\".EXT123\");\n     let _ = \"str\".ends_with(\".EXT123\");\n     TestStruct {}.ends_with(\".EXT123\");\n \n     // Shouldn't fail if it doesn't start with a dot\n-    let _ = String::from(\"\").ends_with(\"a.ext\");\n+    let _ = String::new().ends_with(\"a.ext\");\n     let _ = \"str\".ends_with(\"a.extA\");\n     TestStruct {}.ends_with(\"a.ext\");\n }"}, {"sha": "5d9a043edb9a5357dbce51e67c236a5f838901a2", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -8,10 +8,10 @@ LL |     filename.ends_with(\".rs\")\n    = help: consider using a case-insensitive comparison instead\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:30\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27\n    |\n-LL |     let _ = String::from(\"\").ends_with(\".ext12\");\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = String::new().ends_with(\".ext12\");\n+   |                           ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n \n@@ -24,10 +24,10 @@ LL |     let _ = \"str\".ends_with(\".ext12\");\n    = help: consider using a case-insensitive comparison instead\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:30\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:27\n    |\n-LL |     let _ = String::from(\"\").ends_with(\".EXT12\");\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = String::new().ends_with(\".EXT12\");\n+   |                           ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n "}, {"sha": "b56d6aec508d38bda3189d67fd5610f971166d4e", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n-    let arg: String = \"\".to_owned();\n+    let arg = String::new();\n     arg.to_string();\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);"}, {"sha": "4c1a3a840ed96721f5cd87d7496c3e1edec99f94", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n-    let arg: String = \"\".to_owned();\n+    let arg = String::new();\n     format!(\"{}\", arg);\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);"}, {"sha": "fa564e23cd275cb270a64ae9510504e91c81657d", "filename": "tests/ui/identity_op.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fidentity_op.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fidentity_op.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     &x;\n     x;\n \n-    let mut a = A(\"\".into());\n+    let mut a = A(String::new());\n     let b = a << 0; // no error: non-integer\n \n     1 * Meter; // no error: non-integer"}, {"sha": "3d06d2a73b628d7b760d3a8c3684c8d15c4ebde7", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     &x >> 0;\n     x >> &0;\n \n-    let mut a = A(\"\".into());\n+    let mut a = A(String::new());\n     let b = a << 0; // no error: non-integer\n \n     1 * Meter; // no error: non-integer"}, {"sha": "caf0c657c81a5ce20cca6ced2a08781b8146ea8f", "filename": "tests/ui/manual_empty_string_creations.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_empty_string_creations)]\n+\n+macro_rules! create_strings_from_macro {\n+    // When inside a macro, nothing should warn to prevent false positives.\n+    ($some_str:expr) => {\n+        let _: String = $some_str.into();\n+        let _ = $some_str.to_string();\n+    };\n+}\n+\n+fn main() {\n+    // Method calls\n+    let _ = String::new();\n+    let _ = \"no warning\".to_string();\n+\n+    let _ = String::new();\n+    let _ = \"no warning\".to_owned();\n+\n+    let _: String = String::new();\n+    let _: String = \"no warning\".into();\n+\n+    let _: SomeOtherStruct = \"no warning\".into();\n+    let _: SomeOtherStruct = \"\".into(); // No warning too. We are not converting into String.\n+\n+    // Calls\n+    let _ = String::new();\n+    let _ = String::new();\n+    let _ = String::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"\"); // Again: no warning.\n+\n+    let _ = String::new();\n+    let _ = String::try_from(\"no warning\").unwrap();\n+    let _ = String::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _ = SomeOtherStruct::try_from(\"no warning\").unwrap();\n+    let _ = SomeOtherStruct::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    let _: String = String::new();\n+    let _: String = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"\"); // Again: no warning.\n+\n+    let _: String = String::new();\n+    let _: String = TryFrom::try_from(\"no warning\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _: String = String::new();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"no_warning\").unwrap();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    // Macros (never warn)\n+    create_strings_from_macro!(\"\");\n+    create_strings_from_macro!(\"Hey\");\n+}\n+\n+struct SomeOtherStruct {}\n+\n+impl From<&str> for SomeOtherStruct {\n+    fn from(_value: &str) -> Self {\n+        Self {}\n+    }\n+}"}, {"sha": "ed39a05ed5c40bbf5a796f3d221505483ec6ce2c", "filename": "tests/ui/manual_empty_string_creations.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_empty_string_creations)]\n+\n+macro_rules! create_strings_from_macro {\n+    // When inside a macro, nothing should warn to prevent false positives.\n+    ($some_str:expr) => {\n+        let _: String = $some_str.into();\n+        let _ = $some_str.to_string();\n+    };\n+}\n+\n+fn main() {\n+    // Method calls\n+    let _ = \"\".to_string();\n+    let _ = \"no warning\".to_string();\n+\n+    let _ = \"\".to_owned();\n+    let _ = \"no warning\".to_owned();\n+\n+    let _: String = \"\".into();\n+    let _: String = \"no warning\".into();\n+\n+    let _: SomeOtherStruct = \"no warning\".into();\n+    let _: SomeOtherStruct = \"\".into(); // No warning too. We are not converting into String.\n+\n+    // Calls\n+    let _ = String::from(\"\");\n+    let _ = <String>::from(\"\");\n+    let _ = String::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"no warning\");\n+    let _ = SomeOtherStruct::from(\"\"); // Again: no warning.\n+\n+    let _ = String::try_from(\"\").unwrap();\n+    let _ = String::try_from(\"no warning\").unwrap();\n+    let _ = String::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _ = SomeOtherStruct::try_from(\"no warning\").unwrap();\n+    let _ = SomeOtherStruct::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    let _: String = From::from(\"\");\n+    let _: String = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"no warning\");\n+    let _: SomeOtherStruct = From::from(\"\"); // Again: no warning.\n+\n+    let _: String = TryFrom::try_from(\"\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").unwrap();\n+    let _: String = TryFrom::try_from(\"no warning\").expect(\"this should not warn\");\n+    let _: String = TryFrom::try_from(\"\").expect(\"this should warn\");\n+    let _: SomeOtherStruct = TryFrom::try_from(\"no_warning\").unwrap();\n+    let _: SomeOtherStruct = TryFrom::try_from(\"\").unwrap(); // Again: no warning.\n+\n+    // Macros (never warn)\n+    create_strings_from_macro!(\"\");\n+    create_strings_from_macro!(\"Hey\");\n+}\n+\n+struct SomeOtherStruct {}\n+\n+impl From<&str> for SomeOtherStruct {\n+    fn from(_value: &str) -> Self {\n+        Self {}\n+    }\n+}"}, {"sha": "f38ba02a508f7d52aa22523cde33959ee8a5f4d9", "filename": "tests/ui/manual_empty_string_creations.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fmanual_empty_string_creations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.stderr?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -0,0 +1,58 @@\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:15:13\n+   |\n+LL |     let _ = \"\".to_string();\n+   |             ^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+   |\n+   = note: `-D clippy::manual-empty-string-creations` implied by `-D warnings`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:18:13\n+   |\n+LL |     let _ = \"\".to_owned();\n+   |             ^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:21:21\n+   |\n+LL |     let _: String = \"\".into();\n+   |                     ^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:28:13\n+   |\n+LL |     let _ = String::from(\"\");\n+   |             ^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:29:13\n+   |\n+LL |     let _ = <String>::from(\"\");\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:34:13\n+   |\n+LL |     let _ = String::try_from(\"\").unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:40:21\n+   |\n+LL |     let _: String = From::from(\"\");\n+   |                     ^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:45:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"\").unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: empty String is being created manually\n+  --> $DIR/manual_empty_string_creations.rs:48:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"\").expect(\"this should warn\");\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::new()`\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "18ea4e550292a4b3ddd5a729f4ba946afe2f4d13", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -90,8 +90,8 @@ fn or_fun_call() {\n     let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n     btree_vec.entry(42).or_insert(vec![]);\n \n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+    let stringy = Some(String::new());\n+    let _ = stringy.unwrap_or_default();\n \n     let opt = Some(1);\n     let hello = \"Hello\";"}, {"sha": "c353b41e4495d96feee4525b5f1d20634d8bc694", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -90,8 +90,8 @@ fn or_fun_call() {\n     let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n     btree_vec.entry(42).or_insert(vec![]);\n \n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or(\"\".to_owned());\n+    let stringy = Some(String::new());\n+    let _ = stringy.unwrap_or(String::new());\n \n     let opt = Some(1);\n     let hello = \"Hello\";"}, {"sha": "887f23ac9761dfd7167f44f269d3224cb6d75e75", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -66,11 +66,11 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n-error: use of `unwrap_or` followed by a function call\n+error: use of `unwrap_or` followed by a call to `new`\n   --> $DIR/or_fun_call.rs:94:21\n    |\n-LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n+LL |     let _ = stringy.unwrap_or(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:102:21"}, {"sha": "16673c01e63017da5769a39ea8085cf9f348dc76", "filename": "tests/ui/string_add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -7,13 +7,13 @@ extern crate macro_rules;\n #[allow(clippy::string_add_assign, unused)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x = x + \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "b687f43b2541a016af4cb3abe8a07ce865b5de2c", "filename": "tests/ui/string_add_assign.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add_assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add_assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -4,13 +4,13 @@\n #[warn(clippy::string_add_assign)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x += \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "e5dbde108fbdbebd46df2e51583b9f18f34603c8", "filename": "tests/ui/string_add_assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fstring_add_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -4,13 +4,13 @@\n #[warn(clippy::string_add_assign)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x = x + \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "c390618ca98b85602ced84b91791ac75f1c37c67", "filename": "tests/ui/unnecessary_owned_empty_strings.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.fixed?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     ref_str_argument(\"\");\n \n     // should be linted\n+    #[allow(clippy::manual_empty_string_creations)]\n     ref_str_argument(\"\");\n \n     // should not be linted"}, {"sha": "4a9d6125eb1226310678455cfd9625b26a220eb6", "filename": "tests/ui/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     ref_str_argument(&String::new());\n \n     // should be linted\n+    #[allow(clippy::manual_empty_string_creations)]\n     ref_str_argument(&String::from(\"\"));\n \n     // should not be linted"}, {"sha": "1eb198a8675ea1b2f172667f6f8807d2f624d0fa", "filename": "tests/ui/unnecessary_owned_empty_strings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Funnecessary_owned_empty_strings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.stderr?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -7,7 +7,7 @@ LL |     ref_str_argument(&String::new());\n    = note: `-D clippy::unnecessary-owned-empty-strings` implied by `-D warnings`\n \n error: usage of `&String::from(\"\")` for a function expecting a `&str` argument\n-  --> $DIR/unnecessary_owned_empty_strings.rs:15:22\n+  --> $DIR/unnecessary_owned_empty_strings.rs:16:22\n    |\n LL |     ref_str_argument(&String::from(\"\"));\n    |                      ^^^^^^^^^^^^^^^^^ help: try: `\"\"`"}, {"sha": "4acf5b5fa2d1ba8ab717631f61210aa301ff90c5", "filename": "tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -29,10 +29,10 @@ fn main() {\n     let _ = String::try_from(\"foo\".to_string()).unwrap();\n     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n-    let _: String = \"\".to_owned().try_into().unwrap();\n+    let _: String = String::new().try_into().unwrap();\n     let _: String = match String::from(\"_\").try_into() {\n         Ok(a) => a,\n-        Err(_) => \"\".into(),\n+        Err(_) => String::new(),\n     };\n     // FIXME this is a false negative\n     #[allow(clippy::cmp_owned)]"}, {"sha": "12e74d614717db6ee5c6d8068f894958d53e7dad", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/868dba9f65a40ffd406baba9ca301b4dc33ff641/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=868dba9f65a40ffd406baba9ca301b4dc33ff641", "patch": "@@ -62,7 +62,7 @@ LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:32:21\n    |\n-LL |     let _: String = \"\".to_owned().try_into().unwrap();\n+LL |     let _: String = String::new().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`"}]}