{"sha": "4185b76dc3d3b22292033125487c07ce52276b11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODViNzZkYzNkM2IyMjI5MjAzMzEyNTQ4N2MwN2NlNTIyNzZiMTE=", "commit": {"author": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-09-15T14:18:10Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-09-20T15:31:55Z"}, "message": "rustc_codegen_llvm: make sse4.2 imply crc32 for LLVM 14\n\nThis fixes compiling things like the `snap` crate after\nhttps://reviews.llvm.org/D105462. I added a test that verifies the\nadditional attribute gets specified, and confirmed that I can build\ncargo with both LLVM 13 and 14 with this change applied.", "tree": {"sha": "ef72cc6fb54001c5fe3c125b155b65c303aed043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef72cc6fb54001c5fe3c125b155b65c303aed043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4185b76dc3d3b22292033125487c07ce52276b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4185b76dc3d3b22292033125487c07ce52276b11", "html_url": "https://github.com/rust-lang/rust/commit/4185b76dc3d3b22292033125487c07ce52276b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4185b76dc3d3b22292033125487c07ce52276b11/comments", "author": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1fb85cff63ad5fffe435e17128f99f9e1d970c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "html_url": "https://github.com/rust-lang/rust/commit/db1fb85cff63ad5fffe435e17128f99f9e1d970c"}], "stats": {"total": 117, "additions": 83, "deletions": 34}, "files": [{"sha": "51c70f0868f2697571943a4366d01e38506f9e9f", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4185b76dc3d3b22292033125487c07ce52276b11/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4185b76dc3d3b22292033125487c07ce52276b11/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=4185b76dc3d3b22292033125487c07ce52276b11", "patch": "@@ -305,9 +305,12 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     let mut function_features = codegen_fn_attrs\n         .target_features\n         .iter()\n-        .map(|f| {\n+        .flat_map(|f| {\n             let feature = &f.as_str();\n-            format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n+            llvm_util::to_llvm_feature(cx.tcx.sess, feature)\n+                .into_iter()\n+                .map(|f| format!(\"+{}\", f))\n+                .collect::<Vec<String>>()\n         })\n         .chain(codegen_fn_attrs.instruction_set.iter().map(|x| match x {\n             InstructionSetAttr::ArmA32 => \"-thumb-mode\".to_string(),"}, {"sha": "f9172e437733f816a1084e9c7b68dbed136793f0", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4185b76dc3d3b22292033125487c07ce52276b11/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4185b76dc3d3b22292033125487c07ce52276b11/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=4185b76dc3d3b22292033125487c07ce52276b11", "patch": "@@ -166,25 +166,32 @@ pub fn time_trace_profiler_finish(file_name: &str) {\n // Though note that Rust can also be build with an external precompiled version of LLVM\n // which might lead to failures if the oldest tested / supported LLVM version\n // doesn't yet support the relevant intrinsics\n-pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n+pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n-        (\"x86\", \"pclmulqdq\") => \"pclmul\",\n-        (\"x86\", \"rdrand\") => \"rdrnd\",\n-        (\"x86\", \"bmi1\") => \"bmi\",\n-        (\"x86\", \"cmpxchg16b\") => \"cx16\",\n-        (\"x86\", \"avx512vaes\") => \"vaes\",\n-        (\"x86\", \"avx512gfni\") => \"gfni\",\n-        (\"x86\", \"avx512vpclmulqdq\") => \"vpclmulqdq\",\n-        (\"aarch64\", \"fp\") => \"fp-armv8\",\n-        (\"aarch64\", \"fp16\") => \"fullfp16\",\n-        (\"aarch64\", \"fhm\") => \"fp16fml\",\n-        (\"aarch64\", \"rcpc2\") => \"rcpc-immo\",\n-        (\"aarch64\", \"dpb\") => \"ccpp\",\n-        (\"aarch64\", \"dpb2\") => \"ccdp\",\n-        (\"aarch64\", \"frintts\") => \"fptoint\",\n-        (\"aarch64\", \"fcma\") => \"complxnum\",\n-        (_, s) => s,\n+        (\"x86\", \"sse4.2\") => {\n+            if get_version() >= (14, 0, 0) {\n+                vec![\"sse4.2\", \"crc32\"]\n+            } else {\n+                vec![\"sse4.2\"]\n+            }\n+        }\n+        (\"x86\", \"pclmulqdq\") => vec![\"pclmul\"],\n+        (\"x86\", \"rdrand\") => vec![\"rdrnd\"],\n+        (\"x86\", \"bmi1\") => vec![\"bmi\"],\n+        (\"x86\", \"cmpxchg16b\") => vec![\"cx16\"],\n+        (\"x86\", \"avx512vaes\") => vec![\"vaes\"],\n+        (\"x86\", \"avx512gfni\") => vec![\"gfni\"],\n+        (\"x86\", \"avx512vpclmulqdq\") => vec![\"vpclmulqdq\"],\n+        (\"aarch64\", \"fp\") => vec![\"fp-armv8\"],\n+        (\"aarch64\", \"fp16\") => vec![\"fullfp16\"],\n+        (\"aarch64\", \"fhm\") => vec![\"fp16fml\"],\n+        (\"aarch64\", \"rcpc2\") => vec![\"rcpc-immo\"],\n+        (\"aarch64\", \"dpb\") => vec![\"ccpp\"],\n+        (\"aarch64\", \"dpb2\") => vec![\"ccdp\"],\n+        (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n+        (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n+        (_, s) => vec![s],\n     }\n }\n \n@@ -198,9 +205,13 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n             },\n         )\n         .filter(|feature| {\n-            let llvm_feature = to_llvm_feature(sess, feature);\n-            let cstr = CString::new(llvm_feature).unwrap();\n-            unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) }\n+            for llvm_feature in to_llvm_feature(sess, feature) {\n+                let cstr = CString::new(llvm_feature).unwrap();\n+                if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n+                    return true;\n+                }\n+            }\n+            false\n         })\n         .map(|feature| Symbol::intern(feature))\n         .collect()\n@@ -253,12 +264,19 @@ fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n     let mut rustc_target_features = supported_target_features(sess)\n         .iter()\n         .filter_map(|(feature, _gate)| {\n-            let llvm_feature = to_llvm_feature(sess, *feature);\n-            // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n-            target_features.binary_search_by_key(&llvm_feature, |(f, _d)| *f).ok().map(|index| {\n-                let (_f, desc) = target_features.remove(index);\n-                (*feature, desc)\n-            })\n+            for llvm_feature in to_llvm_feature(sess, *feature) {\n+                // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n+                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| (*f)).ok().map(\n+                    |index| {\n+                        let (_f, desc) = target_features.remove(index);\n+                        (*feature, desc)\n+                    },\n+                ) {\n+                    Some(v) => return Some(v),\n+                    None => {}\n+                }\n+            }\n+            None\n         })\n         .collect::<Vec<_>>();\n     rustc_target_features.extend_from_slice(&[(\n@@ -373,30 +391,30 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n \n     let filter = |s: &str| {\n         if s.is_empty() {\n-            return None;\n+            return vec![];\n         }\n         let feature = if s.starts_with('+') || s.starts_with('-') {\n             &s[1..]\n         } else {\n-            return Some(s.to_string());\n+            return vec![s.to_string()];\n         };\n         // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n         // are not passed down to LLVM.\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n-            return None;\n+            return vec![];\n         }\n         // ... otherwise though we run through `to_llvm_feature` feature when\n         // passing requests down to LLVM. This means that all in-language\n         // features also work on the command line instead of having two\n         // different names when the LLVM name and the Rust name differ.\n-        Some(format!(\"{}{}\", &s[..1], to_llvm_feature(sess, feature)))\n+        to_llvm_feature(sess, feature).iter().map(|f| format!(\"{}{}\", &s[..1], f)).collect()\n     };\n \n     // Features implied by an implicit or explicit `--target`.\n-    features.extend(sess.target.features.split(',').filter_map(&filter));\n+    features.extend(sess.target.features.split(',').flat_map(&filter));\n \n     // -Ctarget-features\n-    features.extend(sess.opts.cg.target_feature.split(',').filter_map(&filter));\n+    features.extend(sess.opts.cg.target_feature.split(',').flat_map(&filter));\n \n     features\n }"}, {"sha": "cdbf057b80bdd6a1c93a9809a27cb943204f0007", "filename": "src/test/assembly/x86_64-sse_crc.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4185b76dc3d3b22292033125487c07ce52276b11/src%2Ftest%2Fassembly%2Fx86_64-sse_crc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4185b76dc3d3b22292033125487c07ce52276b11/src%2Ftest%2Fassembly%2Fx86_64-sse_crc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-sse_crc.rs?ref=4185b76dc3d3b22292033125487c07ce52276b11", "patch": "@@ -0,0 +1,12 @@\n+// only-x86_64\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type staticlib -Ctarget-feature=+sse4.2\n+\n+// CHECK-LABEL: banana\n+// CHECK: crc32\n+#[no_mangle]\n+pub unsafe fn banana(v: u8) -> u32 {\n+    use std::arch::x86_64::*;\n+    let out = !0u32;\n+    _mm_crc32_u8(out, v)\n+}"}, {"sha": "47b1a8993404af038118cb956e3d22bdb6d05259", "filename": "src/test/codegen/sse42-implies-crc32.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4185b76dc3d3b22292033125487c07ce52276b11/src%2Ftest%2Fcodegen%2Fsse42-implies-crc32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4185b76dc3d3b22292033125487c07ce52276b11/src%2Ftest%2Fcodegen%2Fsse42-implies-crc32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsse42-implies-crc32.rs?ref=4185b76dc3d3b22292033125487c07ce52276b11", "patch": "@@ -0,0 +1,16 @@\n+// only-x86_64\n+// min-llvm-version: 14.0\n+// compile-flags: -Copt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"sse4.2\")]\n+#[no_mangle]\n+pub unsafe fn crc32sse(v: u8) -> u32 {\n+    use std::arch::x86_64::*;\n+    let out = !0u32;\n+    _mm_crc32_u8(out, v)\n+}\n+\n+// CHECK: attributes #0 {{.*\"target-features\"=\"\\+sse4.2,\\+crc32\"}}"}]}