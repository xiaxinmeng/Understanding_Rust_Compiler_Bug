{"sha": "fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "node_id": "C_kwDOAAsO6NoAKGZkYWFjNGU0OGVhMjc2YTU5NWE3Y2RkMDhmNDgwMTc2M2RmYmI2Y2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-16T19:55:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-16T20:09:31Z"}, "message": "ConstBlocks are poly if their substs are poly", "tree": {"sha": "a892e9e989e47b237ef92bfafeadd82fcfc3ada1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a892e9e989e47b237ef92bfafeadd82fcfc3ada1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "html_url": "https://github.com/rust-lang/rust/commit/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "a9fbad55dac5540b6230dd669fdee5926cd06302", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "patch": "@@ -302,13 +302,53 @@ impl<'a, 'tcx> IsThirPolymorphic<'a, 'tcx> {\n         }\n \n         match expr.kind {\n-            thir::ExprKind::NamedConst { substs, .. } => substs.has_non_region_param(),\n+            thir::ExprKind::NamedConst { substs, .. }\n+            | thir::ExprKind::ConstBlock { substs, .. } => substs.has_non_region_param(),\n             thir::ExprKind::ConstParam { .. } => true,\n             thir::ExprKind::Repeat { value, count } => {\n                 self.visit_expr(&self.thir()[value]);\n                 count.has_non_region_param()\n             }\n-            _ => false,\n+            thir::ExprKind::Scope { .. }\n+            | thir::ExprKind::Box { .. }\n+            | thir::ExprKind::If { .. }\n+            | thir::ExprKind::Call { .. }\n+            | thir::ExprKind::Deref { .. }\n+            | thir::ExprKind::Binary { .. }\n+            | thir::ExprKind::LogicalOp { .. }\n+            | thir::ExprKind::Unary { .. }\n+            | thir::ExprKind::Cast { .. }\n+            | thir::ExprKind::Use { .. }\n+            | thir::ExprKind::NeverToAny { .. }\n+            | thir::ExprKind::Pointer { .. }\n+            | thir::ExprKind::Loop { .. }\n+            | thir::ExprKind::Let { .. }\n+            | thir::ExprKind::Match { .. }\n+            | thir::ExprKind::Block { .. }\n+            | thir::ExprKind::Assign { .. }\n+            | thir::ExprKind::AssignOp { .. }\n+            | thir::ExprKind::Field { .. }\n+            | thir::ExprKind::Index { .. }\n+            | thir::ExprKind::VarRef { .. }\n+            | thir::ExprKind::UpvarRef { .. }\n+            | thir::ExprKind::Borrow { .. }\n+            | thir::ExprKind::AddressOf { .. }\n+            | thir::ExprKind::Break { .. }\n+            | thir::ExprKind::Continue { .. }\n+            | thir::ExprKind::Return { .. }\n+            | thir::ExprKind::Array { .. }\n+            | thir::ExprKind::Tuple { .. }\n+            | thir::ExprKind::Adt(_)\n+            | thir::ExprKind::PlaceTypeAscription { .. }\n+            | thir::ExprKind::ValueTypeAscription { .. }\n+            | thir::ExprKind::Closure(_)\n+            | thir::ExprKind::Literal { .. }\n+            | thir::ExprKind::NonHirLiteral { .. }\n+            | thir::ExprKind::ZstLiteral { .. }\n+            | thir::ExprKind::StaticRef { .. }\n+            | thir::ExprKind::InlineAsm(_)\n+            | thir::ExprKind::ThreadLocalRef(_)\n+            | thir::ExprKind::Yield { .. } => false,\n         }\n     }\n     fn pat_is_poly(&mut self, pat: &thir::Pat<'tcx>) -> bool {"}, {"sha": "7332a8f03c05ff31670e21e8eaf6a7f409884d2c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs?ref=fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "patch": "@@ -0,0 +1,11 @@\n+#![feature(inline_const, generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+fn foo<T>() {\n+    let _ = [0u8; const { std::mem::size_of::<T>() }];\n+    //~^ ERROR: overly complex generic constant\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+}"}, {"sha": "1513e491b9b99b1af58bd6a4e5c2cad9cac0fad5", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr?ref=fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-block-is-poly.rs:1:26\n+   |\n+LL | #![feature(inline_const, generic_const_exprs)]\n+   |                          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: overly complex generic constant\n+  --> $DIR/const-block-is-poly.rs:5:19\n+   |\n+LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ const blocks are not supported in generic constant\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}