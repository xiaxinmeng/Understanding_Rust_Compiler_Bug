{"sha": "00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "node_id": "C_kwDOAAsO6NoAKDAwYzI0ZGQ4Y2VjNmM1N2NjYmZiMzc2YzRhMmY0N2I1ZjZlMzk0MDE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-01T14:51:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-31T14:54:04Z"}, "message": "Move stable hash from TyS into a datastructure that can be shared with other interned types.", "tree": {"sha": "0050c3bd37f4b882b725d968163f689631e4197b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0050c3bd37f4b882b725d968163f689631e4197b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "html_url": "https://github.com/rust-lang/rust/commit/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "html_url": "https://github.com/rust-lang/rust/commit/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e"}], "stats": {"total": 204, "additions": 140, "deletions": 64}, "files": [{"sha": "1b187cd306e93a8b2dd9e7363a1a8bc36ee2e60a", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -4,6 +4,8 @@ use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n use std::ptr;\n \n+use crate::fingerprint::Fingerprint;\n+\n mod private {\n     #[derive(Clone, Copy, Debug)]\n     pub struct PrivateZst;\n@@ -108,5 +110,76 @@ where\n     }\n }\n \n+/// A helper trait so that `Interned` things can cache stable hashes reproducibly.\n+pub trait InternedHashingContext {\n+    fn with_def_path_and_no_spans(&mut self, f: impl FnOnce(&mut Self));\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct InTy<T> {\n+    pub internee: T,\n+    pub stable_hash: Fingerprint,\n+}\n+\n+impl<T: PartialEq> PartialEq for InTy<T> {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.internee.eq(&other.internee)\n+    }\n+}\n+\n+impl<T: Eq> Eq for InTy<T> {}\n+\n+impl<T: Ord> PartialOrd for InTy<T> {\n+    fn partial_cmp(&self, other: &InTy<T>) -> Option<Ordering> {\n+        Some(self.internee.cmp(&other.internee))\n+    }\n+}\n+\n+impl<T: Ord> Ord for InTy<T> {\n+    fn cmp(&self, other: &InTy<T>) -> Ordering {\n+        self.internee.cmp(&other.internee)\n+    }\n+}\n+\n+impl<T> Deref for InTy<T> {\n+    type Target = T;\n+\n+    #[inline]\n+    fn deref(&self) -> &T {\n+        &self.internee\n+    }\n+}\n+\n+impl<T: Hash> Hash for InTy<T> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, s: &mut H) {\n+        self.internee.hash(s)\n+    }\n+}\n+\n+impl<T: HashStable<CTX>, CTX: InternedHashingContext> HashStable<CTX> for InTy<T> {\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        let stable_hash = self.stable_hash;\n+\n+        if stable_hash == Fingerprint::ZERO {\n+            // No cached hash available. This can only mean that incremental is disabled.\n+            // We don't cache stable hashes in non-incremental mode, because they are used\n+            // so rarely that the performance actually suffers.\n+\n+            // We need to build the hash as if we cached it and then hash that hash, as\n+            // otherwise the hashes will differ between cached and non-cached mode.\n+            let stable_hash: Fingerprint = {\n+                let mut hasher = StableHasher::new();\n+                hcx.with_def_path_and_no_spans(|hcx| self.internee.hash_stable(hcx, &mut hasher));\n+                hasher.finish()\n+            };\n+            stable_hash.hash_stable(hcx, hasher);\n+        } else {\n+            stable_hash.hash_stable(hcx, hasher);\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "5141d5beb7d454b027149c5e7d9734af968f6d1b", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -87,7 +87,7 @@ macro_rules! arena_types {\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<'tcx>,\n+            [] tys: rustc_data_structures::intern::InTy<rustc_middle::ty::TyS<'tcx>>,\n             [] predicates: rustc_middle::ty::PredicateS<'tcx>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n "}, {"sha": "bc077a673f362a5f6653c6454cd587bab173f80b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -26,7 +26,7 @@ use crate::ty::{\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::intern::{InTy, Interned};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n@@ -105,7 +105,7 @@ pub struct CtxtInterners<'tcx> {\n \n     // Specifically use a speedy hash algorithm for these hash sets, since\n     // they're accessed quite often.\n-    type_: InternedSet<'tcx, TyS<'tcx>>,\n+    type_: InternedSet<'tcx, InTy<TyS<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n@@ -178,10 +178,9 @@ impl<'tcx> CtxtInterners<'tcx> {\n                         kind,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n-                        stable_hash,\n                     };\n \n-                    InternedInSet(self.arena.alloc(ty_struct))\n+                    InternedInSet(self.arena.alloc(InTy { internee: ty_struct, stable_hash }))\n                 })\n                 .0,\n         ))\n@@ -2048,23 +2047,23 @@ impl<'tcx, T: 'tcx + ?Sized> IntoPointer for InternedInSet<'tcx, T> {\n }\n \n #[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, TyS<'tcx>> {\n+impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, TyS<'tcx>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, TyS<'tcx>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, InTy<TyS<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, TyS<'tcx>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, InTy<TyS<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, TyS<'tcx>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)"}, {"sha": "39acf252698de86e54c8a324ba40f3d377f41890", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -31,8 +31,8 @@ use crate::ty::util::Discr;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::stable_hasher::{HashStable, NodeIdHashingMode, StableHasher};\n+use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -433,32 +433,28 @@ crate struct TyS<'tcx> {\n     /// De Bruijn indices within the type are contained within `0..D`\n     /// (exclusive).\n     outer_exclusive_binder: ty::DebruijnIndex,\n-\n-    /// The stable hash of the type. This way hashing of types will not have to work\n-    /// on the address of the type anymore, but can instead just read this field\n-    stable_hash: Fingerprint,\n }\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyS<'_>, 56);\n+static_assert_size!(TyS<'_>, 40);\n \n /// Use this rather than `TyS`, whenever possible.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n #[rustc_pass_by_value]\n-pub struct Ty<'tcx>(Interned<'tcx, TyS<'tcx>>);\n+pub struct Ty<'tcx>(Interned<'tcx, InTy<TyS<'tcx>>>);\n \n // Statics only used for internal testing.\n-pub static BOOL_TY: Ty<'static> = Ty(Interned::new_unchecked(&BOOL_TYS));\n-static BOOL_TYS: TyS<'static> = TyS {\n+pub static BOOL_TY: Ty<'static> =\n+    Ty(Interned::new_unchecked(&InTy { internee: BOOL_TYS, stable_hash: Fingerprint::ZERO }));\n+const BOOL_TYS: TyS<'static> = TyS {\n     kind: ty::Bool,\n     flags: TypeFlags::empty(),\n     outer_exclusive_binder: DebruijnIndex::from_usize(0),\n-    stable_hash: Fingerprint::ZERO,\n };\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Ty<'tcx> {\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let TyS {\n             kind,\n@@ -468,28 +464,9 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Ty<'tcx> {\n             flags: _,\n \n             outer_exclusive_binder: _,\n+        } = self;\n \n-            stable_hash,\n-        } = self.0.0;\n-\n-        if *stable_hash == Fingerprint::ZERO {\n-            // No cached hash available. This can only mean that incremental is disabled.\n-            // We don't cache stable hashes in non-incremental mode, because they are used\n-            // so rarely that the performance actually suffers.\n-\n-            let stable_hash: Fingerprint = {\n-                let mut hasher = StableHasher::new();\n-                hcx.while_hashing_spans(false, |hcx| {\n-                    hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-                        kind.hash_stable(hcx, &mut hasher)\n-                    })\n-                });\n-                hasher.finish()\n-            };\n-            stable_hash.hash_stable(hcx, hasher);\n-        } else {\n-            stable_hash.hash_stable(hcx, hasher);\n-        }\n+        kind.hash_stable(hcx, hasher)\n     }\n }\n "}, {"sha": "7e0b0ace8c0a8e451c3074433424ee70a6e5dbb7", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -3,7 +3,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::intern::{InTy, Interned};\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n@@ -1266,18 +1266,29 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Ref(\n                 _,\n                 Ty(Interned(\n-                    ty::TyS {\n-                        kind:\n-                            ty::Array(\n-                                Ty(Interned(ty::TyS { kind: ty::Uint(ty::UintTy::U8), .. }, _)),\n-                                ty::Const(Interned(\n-                                    ty::ConstS {\n-                                        val: ty::ConstKind::Value(ConstValue::Scalar(int)),\n-                                        ..\n-                                    },\n-                                    _,\n-                                )),\n-                            ),\n+                    InTy {\n+                        internee:\n+                            ty::TyS {\n+                                kind:\n+                                    ty::Array(\n+                                        Ty(Interned(\n+                                            InTy {\n+                                                internee:\n+                                                    ty::TyS { kind: ty::Uint(ty::UintTy::U8), .. },\n+                                                ..\n+                                            },\n+                                            _,\n+                                        )),\n+                                        ty::Const(Interned(\n+                                            ty::ConstS {\n+                                                val: ty::ConstKind::Value(ConstValue::Scalar(int)),\n+                                                ..\n+                                            },\n+                                            _,\n+                                        )),\n+                                    ),\n+                                ..\n+                            },\n                         ..\n                     },\n                     _,\n@@ -1439,7 +1450,11 @@ pub trait PrettyPrinter<'tcx>:\n             // Byte/string slices, printed as (byte) string literals.\n             (\n                 ConstValue::Slice { data, start, end },\n-                ty::Ref(_, Ty(Interned(ty::TyS { kind: ty::Slice(t), .. }, _)), _),\n+                ty::Ref(\n+                    _,\n+                    Ty(Interned(InTy { internee: ty::TyS { kind: ty::Slice(t), .. }, .. }, _)),\n+                    _,\n+                ),\n             ) if *t == u8_type => {\n                 // The `inspect` here is okay since we checked the bounds, and there are\n                 // no relocations (we have an active slice reference here). We don't use\n@@ -1450,7 +1465,11 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             (\n                 ConstValue::Slice { data, start, end },\n-                ty::Ref(_, Ty(Interned(ty::TyS { kind: ty::Str, .. }, _)), _),\n+                ty::Ref(\n+                    _,\n+                    Ty(Interned(InTy { internee: ty::TyS { kind: ty::Str, .. }, .. }, _)),\n+                    _,\n+                ),\n             ) => {\n                 // The `inspect` here is okay since we checked the bounds, and there are no\n                 // relocations (we have an active `str` reference here). We don't use this"}, {"sha": "50357877c0afc80cbc46d6fa844f23b8cfc5a570", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -6,7 +6,7 @@ use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor}\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::intern::{InTy, Interned};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n@@ -85,7 +85,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const ty::TyS<'tcx> as usize)\n+                (TYPE_TAG, ty.0.0 as *const InTy<ty::TyS<'tcx>> as usize)\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -154,7 +154,7 @@ impl<'tcx> GenericArg<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const ty::RegionKind),\n                 ))),\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const ty::TyS<'tcx>),\n+                    &*((ptr & !TAG_MASK) as *const InTy<ty::TyS<'tcx>>),\n                 ))),\n                 CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),"}, {"sha": "a5cc730813fef246ed7ec1cf6fd49f274b51627e", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -13,7 +13,7 @@ use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::intern::{InTy, Interned};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -427,7 +427,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     GenericArgKind::Type(Ty(Interned(\n-                        ty::TyS { kind: ty::Param(ref pt), .. },\n+                        InTy { internee: ty::TyS { kind: ty::Param(ref pt), .. }, .. },\n                         _,\n                     ))) => !impl_generics.type_param(pt, self).pure_wrt_drop,\n                     GenericArgKind::Const(Const(Interned("}, {"sha": "a073bf7105775b40e3a0553b6a0d862bb1f4f03e", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=00c24dd8cec6c57ccbfb376c4a2f47b5f6e39401", "patch": "@@ -231,4 +231,12 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n }\n \n+impl<'a> rustc_data_structures::intern::InternedHashingContext for StableHashingContext<'a> {\n+    fn with_def_path_and_no_spans(&mut self, f: impl FnOnce(&mut Self)) {\n+        self.while_hashing_spans(false, |hcx| {\n+            hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| f(hcx))\n+        });\n+    }\n+}\n+\n impl<'a> rustc_session::HashStableContext for StableHashingContext<'a> {}"}]}