{"sha": "4ce68c13bfbd88df8d93da676e8424544c27321e", "node_id": "C_kwDOAAsO6NoAKDRjZTY4YzEzYmZiZDg4ZGY4ZDkzZGE2NzZlODQyNDU0NGMyNzMyMWU", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-11T04:20:34Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-11T04:25:48Z"}, "message": "Clarify what values `BorrowedHandle`, `OwnedHandle` etc. can hold.\n\nClarify that when `BorrowedHandle`, `OwnedHandle`, or `HandleOrNull`\nhold the value `-1`, it always means the current process handle, and not\n`INVALID_HANDLE_VALUE`.", "tree": {"sha": "ca10238d8c6d137893ad64ee1e9320e7ca429b8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca10238d8c6d137893ad64ee1e9320e7ca429b8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce68c13bfbd88df8d93da676e8424544c27321e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce68c13bfbd88df8d93da676e8424544c27321e", "html_url": "https://github.com/rust-lang/rust/commit/4ce68c13bfbd88df8d93da676e8424544c27321e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce68c13bfbd88df8d93da676e8424544c27321e/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd44958e0a21110d09862ee080d95a4ca6c52f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd44958e0a21110d09862ee080d95a4ca6c52f8", "html_url": "https://github.com/rust-lang/rust/commit/ecd44958e0a21110d09862ee080d95a4ca6c52f8"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "b80ea0ac5eeb30201025576312d2a63a92a64c50", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ce68c13bfbd88df8d93da676e8424544c27321e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce68c13bfbd88df8d93da676e8424544c27321e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=4ce68c13bfbd88df8d93da676e8424544c27321e", "patch": "@@ -22,8 +22,9 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// so it can be used in FFI in places where a handle is passed as an argument,\n /// it is not captured or consumed.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `BorrowedFd` always\n+/// represents the current process handle, and not `INVALID_HANDLE_VALUE`,\n+/// despite the two having the same value. See [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -45,8 +46,9 @@ pub struct BorrowedHandle<'handle> {\n ///\n /// This closes the handle on drop.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `OwnedFd` always\n+/// represents the current process handle, and not `INVALID_HANDLE_VALUE`,\n+/// despite the two having the same value. See [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -75,11 +77,11 @@ pub struct OwnedHandle {\n /// `NULL`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `NULL` first.\n ///\n-/// This type considers any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n-/// This is because APIs that use `NULL` as their sentry value don't treat `INVALID_HANDLE_VALUE`\n-/// as special.\n+/// This type may hold any handle value that [`OwnedFd`] may hold, except `NULL`. It may\n+/// hold `-1`, even though `-1` has the same value as `INVALID_HANDLE_VALUE`, because in\n+/// `HandleOrNull`, `-1` is interpreted to mean the current process handle.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// If this holds a non-null handle, it will close the handle on drop.\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]\n@@ -95,11 +97,14 @@ pub struct HandleOrNull(OwnedHandle);\n /// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// This type considers any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n-/// This is because APIs that use `INVALID_HANDLE_VALUE` as their sentry value may return `NULL`\n-/// under `windows_subsystem = \"windows\"` or other situations where I/O devices are detached.\n+/// This type may hold any handle value that [`OwnedFd`] may hold, except `-1`. It must not\n+/// hold `-1`, because `-1` in `HandleOrInvalid` is interpreted to mean `INVALID_HANDLE_VALUE`.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// This type may hold `NULL`, because APIs that use `INVALID_HANDLE_VALUE` as their sentry value\n+/// may return `NULL` under `windows_subsystem = \"windows\"` or other situations where I/O devices\n+/// are detached.\n+///\n+/// If holds a handle other than `INVALID_HANDLE_VALUE`, it will close the handle on drop.\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]"}]}