{"sha": "de9670fe456d89f97e8044d4e0919d2c16d1087f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTY3MGZlNDU2ZDg5Zjk3ZTgwNDRkNGUwOTE5ZDJjMTZkMTA4N2Y=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-15T11:48:24Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-15T11:48:24Z"}, "message": "Move store TypeRef of type based path in PathKind", "tree": {"sha": "495c5d987e0f2cd754c3e4e6b20adafcf1f23403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495c5d987e0f2cd754c3e4e6b20adafcf1f23403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de9670fe456d89f97e8044d4e0919d2c16d1087f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1+JQkACgkQztOS3gxI\nPQAPTg/9H/fNf2EoghTI6/ZnOD585/CQkfVY04bOONfReHPJ9UVTfix/2wnr5N3m\nNLIvFf71Lf6hnPN56HkmkAN+E6vCMwVzYwaQjCz4weFD8aQU2deTAbpzq1VT2IRN\nNSQC2KqltBt/POll2EQattRbHR7z4aRPOLPCz8U08/1nmZmA0n9LqBIfiuwKFHAa\nsRdtJndUXqF8jTfiRXt063j8iCHbCi2BG/mideQSXjTyXJ+z6Kdt9caDncFs+ocB\nz0JD2LgUg4EguwJF6pM0z1GjZr49MciDjg7UDSHn0nVFVkpIbYsvPzsT6ACcnJMG\nDpk6fde8iim8/+5QFRKohUbirg0BVRJsQ8NXGmn4qmjG+8Y/sXcWmjHz3d6TGqjI\nzIu00BLVItjQddeizdF61yM+eCZ7Ae2uK7c+JAPnKumtSKajV3KcsNFZuRI3zVZH\ncrgcQMAhxUQVjIpneea4vRgqDMWDg9pYOhklRIF8NpYJ6joQJI416dWfS5VZGo/o\nbu4J2XffN62HkR811fNannvrEcB7pIaEpCmtKYsqFqkqMU2ohseQT6x/RMBnaXpO\nEWFqngQS8Izm3y9bYShTDGnwSSi2DWgh95SFkkKrDTZ6yb7KOuGTt6U6EALKQNFi\n1cK18zmZUsIIWXopTz8bGlEt8nontnNto1ruxL9nS+KWbje9pAk=\n=+QpL\n-----END PGP SIGNATURE-----", "payload": "tree 495c5d987e0f2cd754c3e4e6b20adafcf1f23403\nparent 4926bed42680d329f906be93450bec6b2ba0e99b\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1568548104 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1568548104 +0800\n\nMove store TypeRef of type based path in PathKind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de9670fe456d89f97e8044d4e0919d2c16d1087f", "html_url": "https://github.com/rust-lang/rust/commit/de9670fe456d89f97e8044d4e0919d2c16d1087f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de9670fe456d89f97e8044d4e0919d2c16d1087f/comments", "author": null, "committer": null, "parents": [{"sha": "4926bed42680d329f906be93450bec6b2ba0e99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4926bed42680d329f906be93450bec6b2ba0e99b", "html_url": "https://github.com/rust-lang/rust/commit/4926bed42680d329f906be93450bec6b2ba0e99b"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "5aae9854614ad7587d7bb1eb258b0b7f331285b4", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=de9670fe456d89f97e8044d4e0919d2c16d1087f", "patch": "@@ -512,7 +512,7 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n         hir::PathKind::Plain => {}\n         hir::PathKind::Self_ => ps.push(\"self\".into()),\n         hir::PathKind::Super => ps.push(\"super\".into()),\n-        hir::PathKind::Type => return None,\n+        hir::PathKind::Type(_) => return None,\n     }\n     for s in path.segments.iter() {\n         ps.push(s.name.to_string().into());"}, {"sha": "b808a0c36c22037fdc0ad611062e4c99bcaecedb", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=de9670fe456d89f97e8044d4e0919d2c16d1087f", "patch": "@@ -382,7 +382,7 @@ impl CrateDefMap {\n                     return ResolvePathResult::empty(ReachedFixedPoint::No); // extern crate declarations can add to the extern prelude\n                 }\n             }\n-            PathKind::Type => {\n+            PathKind::Type(_) => {\n                 // This is handled in `infer::infer_path_expr`\n                 // The result returned here does not matter\n                 return ResolvePathResult::empty(ReachedFixedPoint::Yes);\n@@ -406,11 +406,8 @@ impl CrateDefMap {\n             curr_per_ns = match curr {\n                 ModuleDef::Module(module) => {\n                     if module.krate != self.krate {\n-                        let path = Path {\n-                            segments: path.segments[i..].to_vec(),\n-                            kind: PathKind::Self_,\n-                            type_ref: None,\n-                        };\n+                        let path =\n+                            Path { segments: path.segments[i..].to_vec(), kind: PathKind::Self_ };\n                         log::debug!(\"resolving {:?} in other crate\", path);\n                         let defp_map = db.crate_def_map(module.krate);\n                         let (def, s) = defp_map.resolve_path(db, module.module_id, &path);"}, {"sha": "9e449f6cc870f69dac2d70959a1d0ba00c983600", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=de9670fe456d89f97e8044d4e0919d2c16d1087f", "patch": "@@ -10,7 +10,6 @@ use crate::{name, type_ref::TypeRef, AsName, Name};\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n     pub kind: PathKind,\n-    pub type_ref: Option<Box<TypeRef>>,\n     pub segments: Vec<PathSegment>,\n }\n \n@@ -43,7 +42,7 @@ pub enum GenericArg {\n     // or lifetime...\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum PathKind {\n     Plain,\n     Self_,\n@@ -52,7 +51,7 @@ pub enum PathKind {\n     // Absolute path\n     Abs,\n     // Type based path like `<T>::foo`\n-    Type,\n+    Type(Box<TypeRef>),\n }\n \n impl Path {\n@@ -69,7 +68,6 @@ impl Path {\n     pub fn from_simple_segments(kind: PathKind, segments: impl IntoIterator<Item = Name>) -> Path {\n         Path {\n             kind,\n-            type_ref: None,\n             segments: segments\n                 .into_iter()\n                 .map(|name| PathSegment { name, args_and_bindings: None })\n@@ -81,7 +79,6 @@ impl Path {\n     pub fn from_ast(mut path: ast::Path) -> Option<Path> {\n         let mut kind = PathKind::Plain;\n         let mut segments = Vec::new();\n-        let mut path_type_ref = None;\n         loop {\n             let segment = path.segment()?;\n \n@@ -112,8 +109,7 @@ impl Path {\n                     match trait_ref {\n                         // <T>::foo\n                         None => {\n-                            kind = PathKind::Type;\n-                            path_type_ref = Some(Box::new(self_type));\n+                            kind = PathKind::Type(Box::new(self_type));\n                         }\n                         // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                         Some(trait_ref) => {\n@@ -154,7 +150,7 @@ impl Path {\n             };\n         }\n         segments.reverse();\n-        return Some(Path { kind, type_ref: path_type_ref, segments });\n+        return Some(Path { kind, segments });\n \n         fn qualifier(path: &ast::Path) -> Option<ast::Path> {\n             if let Some(q) = path.qualifier() {\n@@ -309,11 +305,8 @@ fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n     let res = match segment.kind()? {\n         ast::PathSegmentKind::Name(name) => {\n             // no type args in use\n-            let mut res = prefix.unwrap_or_else(|| Path {\n-                kind: PathKind::Plain,\n-                type_ref: None,\n-                segments: Vec::with_capacity(1),\n-            });\n+            let mut res = prefix\n+                .unwrap_or_else(|| Path { kind: PathKind::Plain, segments: Vec::with_capacity(1) });\n             res.segments.push(PathSegment {\n                 name: name.as_name(),\n                 args_and_bindings: None, // no type args in use"}, {"sha": "bb69159010d8f7e3aa052e2d29eeee8ba2544b61", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9670fe456d89f97e8044d4e0919d2c16d1087f/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=de9670fe456d89f97e8044d4e0919d2c16d1087f", "patch": "@@ -190,7 +190,7 @@ impl Resolver {\n         db: &impl HirDatabase,\n         path: &'p Path,\n     ) -> Option<ResolveValueResult<'p>> {\n-        if let Some(type_ref) = &path.type_ref {\n+        if let PathKind::Type(type_ref) = &path.kind {\n             return Some(ResolveValueResult::TypeRef(type_ref));\n         }\n "}]}