{"sha": "10ee6eb7333d1978eac4c70039162f61d6275ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZWU2ZWI3MzMzZDE5NzhlYWM0YzcwMDM5MTYyZjYxZDYyNzViYTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T22:41:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T23:02:08Z"}, "message": "Tweak visibility", "tree": {"sha": "5fefc459287bd0c4cd4cffa83a3ac82b627645be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fefc459287bd0c4cd4cffa83a3ac82b627645be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ee6eb7333d1978eac4c70039162f61d6275ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ee6eb7333d1978eac4c70039162f61d6275ba3", "html_url": "https://github.com/rust-lang/rust/commit/10ee6eb7333d1978eac4c70039162f61d6275ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ee6eb7333d1978eac4c70039162f61d6275ba3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012a7e57b9744bd8a40bdfe45ddb56954d559117", "url": "https://api.github.com/repos/rust-lang/rust/commits/012a7e57b9744bd8a40bdfe45ddb56954d559117", "html_url": "https://github.com/rust-lang/rust/commit/012a7e57b9744bd8a40bdfe45ddb56954d559117"}], "stats": {"total": 172, "additions": 84, "deletions": 88}, "files": [{"sha": "e4dd5d92d267bad6bd9798234369d718c393402c", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -94,7 +94,7 @@ impl CargoTargetSpec {\n         global_state_snapshot: &GlobalStateSnapshot,\n         file_id: FileId,\n     ) -> Result<Option<CargoTargetSpec>> {\n-        let crate_id = match global_state_snapshot.analysis().crate_for(file_id)?.first() {\n+        let crate_id = match global_state_snapshot.analysis.crate_for(file_id)?.first() {\n             Some(crate_id) => *crate_id,\n             None => return Ok(None),\n         };"}, {"sha": "15b2811037280c0a2162083f7689b7d1d917f2a3", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn file_position(\n     tdpp: lsp_types::TextDocumentPositionParams,\n ) -> Result<FilePosition> {\n     let file_id = file_id(world, &tdpp.text_document.uri)?;\n-    let line_index = world.analysis().file_line_index(file_id)?;\n+    let line_index = world.analysis.file_line_index(file_id)?;\n     let offset = offset(&*line_index, tdpp.position);\n     Ok(FilePosition { file_id, offset })\n }\n@@ -48,7 +48,7 @@ pub(crate) fn file_range(\n     range: lsp_types::Range,\n ) -> Result<FileRange> {\n     let file_id = file_id(world, &text_document_identifier.uri)?;\n-    let line_index = world.analysis().file_line_index(file_id)?;\n+    let line_index = world.analysis.file_line_index(file_id)?;\n     let range = text_range(&line_index, range);\n     Ok(FileRange { file_id, range })\n }"}, {"sha": "87f3fe4db8d3c57c0552c861b34e5a8e015d8ff8", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -60,7 +60,6 @@ impl Default for Status {\n /// incremental salsa database.\n pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n-    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) loader: Box<dyn vfs::loader::Handle>,\n     pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n@@ -70,19 +69,20 @@ pub(crate) struct GlobalState {\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) status: Status,\n     pub(crate) req_queue: ReqQueue,\n-    pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n+    latest_requests: Arc<RwLock<LatestRequests>>,\n     source_root_config: SourceRootConfig,\n     _proc_macro_client: ProcMacroClient,\n+    workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n pub(crate) struct GlobalStateSnapshot {\n     pub(crate) config: Config,\n-    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub(crate) analysis: Analysis,\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n+    workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n impl GlobalState {\n@@ -149,7 +149,6 @@ impl GlobalState {\n         analysis_host.apply_change(change);\n         let mut res = GlobalState {\n             config,\n-            workspaces: Arc::new(workspaces),\n             analysis_host,\n             loader,\n             task_receiver,\n@@ -162,6 +161,7 @@ impl GlobalState {\n             latest_requests: Default::default(),\n             source_root_config: project_folders.source_root_config,\n             _proc_macro_client: proc_macro_client,\n+            workspaces: Arc::new(workspaces),\n         };\n         res.process_changes();\n         res\n@@ -240,10 +240,6 @@ impl GlobalState {\n }\n \n impl GlobalStateSnapshot {\n-    pub(crate) fn analysis(&self) -> &Analysis {\n-        &self.analysis\n-    }\n-\n     pub(crate) fn url_to_file_id(&self, url: &Url) -> Result<FileId> {\n         let path = from_proto::abs_path(url)?;\n         let path = path.into();\n@@ -272,7 +268,7 @@ impl GlobalStateSnapshot {\n         &self,\n         crate_id: CrateId,\n     ) -> Option<(&CargoWorkspace, Target)> {\n-        let file_id = self.analysis().crate_root(crate_id).ok()?;\n+        let file_id = self.analysis.crate_root(crate_id).ok()?;\n         let path = self.vfs.read().0.file_path(file_id);\n         let path = path.as_path()?;\n         self.workspaces.iter().find_map(|ws| match ws {"}, {"sha": "b2ff9a157de2986fbd410530cc1e8687b744d112", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -56,9 +56,9 @@ pub(crate) fn handle_syntax_tree(\n ) -> Result<String> {\n     let _p = profile(\"handle_syntax_tree\");\n     let id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(id)?;\n+    let line_index = snap.analysis.file_line_index(id)?;\n     let text_range = params.range.map(|r| from_proto::text_range(&line_index, r));\n-    let res = snap.analysis().syntax_tree(id, text_range)?;\n+    let res = snap.analysis.syntax_tree(id, text_range)?;\n     Ok(res)\n }\n \n@@ -68,10 +68,10 @@ pub(crate) fn handle_expand_macro(\n ) -> Result<Option<lsp_ext::ExpandedMacro>> {\n     let _p = profile(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let offset = from_proto::offset(&line_index, params.position);\n \n-    let res = snap.analysis().expand_macro(FilePosition { file_id, offset })?;\n+    let res = snap.analysis.expand_macro(FilePosition { file_id, offset })?;\n     Ok(res.map(|it| lsp_ext::ExpandedMacro { name: it.name, expansion: it.expansion }))\n }\n \n@@ -81,7 +81,7 @@ pub(crate) fn handle_selection_range(\n ) -> Result<Option<Vec<lsp_types::SelectionRange>>> {\n     let _p = profile(\"handle_selection_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let res: Result<Vec<lsp_types::SelectionRange>> = params\n         .positions\n         .into_iter()\n@@ -93,7 +93,7 @@ pub(crate) fn handle_selection_range(\n                 loop {\n                     ranges.push(range);\n                     let frange = FileRange { file_id, range };\n-                    let next = snap.analysis().extend_selection(frange)?;\n+                    let next = snap.analysis.extend_selection(frange)?;\n                     if next == range {\n                         break;\n                     } else {\n@@ -124,13 +124,13 @@ pub(crate) fn handle_matching_brace(\n ) -> Result<Vec<Position>> {\n     let _p = profile(\"handle_matching_brace\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let res = params\n         .positions\n         .into_iter()\n         .map(|position| {\n             let offset = from_proto::offset(&line_index, position);\n-            let offset = match snap.analysis().matching_brace(FilePosition { file_id, offset }) {\n+            let offset = match snap.analysis.matching_brace(FilePosition { file_id, offset }) {\n                 Ok(Some(matching_brace_offset)) => matching_brace_offset,\n                 Err(_) | Ok(None) => offset,\n             };\n@@ -146,12 +146,12 @@ pub(crate) fn handle_join_lines(\n ) -> Result<Vec<lsp_types::TextEdit>> {\n     let _p = profile(\"handle_join_lines\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let line_endings = snap.file_line_endings(file_id);\n     let mut res = TextEdit::default();\n     for range in params.ranges {\n         let range = from_proto::text_range(&line_index, range);\n-        let edit = snap.analysis().join_lines(FileRange { file_id, range })?;\n+        let edit = snap.analysis.join_lines(FileRange { file_id, range })?;\n         match res.union(edit) {\n             Ok(()) => (),\n             Err(_edit) => {\n@@ -169,11 +169,11 @@ pub(crate) fn handle_on_enter(\n ) -> Result<Option<Vec<lsp_ext::SnippetTextEdit>>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = from_proto::file_position(&snap, params)?;\n-    let edit = match snap.analysis().on_enter(position)? {\n+    let edit = match snap.analysis.on_enter(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n-    let line_index = snap.analysis().file_line_index(position.file_id)?;\n+    let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n     let edit = to_proto::snippet_text_edit_vec(&line_index, line_endings, true, edit);\n     Ok(Some(edit))\n@@ -186,15 +186,15 @@ pub(crate) fn handle_on_type_formatting(\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let _p = profile(\"handle_on_type_formatting\");\n     let mut position = from_proto::file_position(&snap, params.text_document_position)?;\n-    let line_index = snap.analysis().file_line_index(position.file_id)?;\n+    let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n \n     // in `ra_ide`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n     position.offset -= TextSize::of('.');\n     let char_typed = params.ch.chars().next().unwrap_or('\\0');\n     assert!({\n-        let text = snap.analysis().file_text(position.file_id)?;\n+        let text = snap.analysis.file_text(position.file_id)?;\n         text[usize::from(position.offset)..].starts_with(char_typed)\n     });\n \n@@ -206,7 +206,7 @@ pub(crate) fn handle_on_type_formatting(\n         return Ok(None);\n     }\n \n-    let edit = snap.analysis().on_char_typed(position, char_typed)?;\n+    let edit = snap.analysis.on_char_typed(position, char_typed)?;\n     let mut edit = match edit {\n         Some(it) => it,\n         None => return Ok(None),\n@@ -225,11 +225,11 @@ pub(crate) fn handle_document_symbol(\n ) -> Result<Option<lsp_types::DocumentSymbolResponse>> {\n     let _p = profile(\"handle_document_symbol\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n \n     let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n-    for symbol in snap.analysis().file_structure(file_id)? {\n+    for symbol in snap.analysis.file_structure(file_id)? {\n         let doc_symbol = DocumentSymbol {\n             name: symbol.label,\n             detail: symbol.detail,\n@@ -317,7 +317,7 @@ pub(crate) fn handle_workspace_symbol(\n \n     fn exec_query(snap: &GlobalStateSnapshot, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n-        for nav in snap.analysis().symbol_search(query)? {\n+        for nav in snap.analysis.symbol_search(query)? {\n             let info = SymbolInformation {\n                 name: nav.name().to_string(),\n                 kind: to_proto::symbol_kind(nav.kind()),\n@@ -337,7 +337,7 @@ pub(crate) fn handle_goto_definition(\n ) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n     let _p = profile(\"handle_goto_definition\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let nav_info = match snap.analysis().goto_definition(position)? {\n+    let nav_info = match snap.analysis.goto_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -352,7 +352,7 @@ pub(crate) fn handle_goto_implementation(\n ) -> Result<Option<lsp_types::request::GotoImplementationResponse>> {\n     let _p = profile(\"handle_goto_implementation\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let nav_info = match snap.analysis().goto_implementation(position)? {\n+    let nav_info = match snap.analysis.goto_implementation(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -367,7 +367,7 @@ pub(crate) fn handle_goto_type_definition(\n ) -> Result<Option<lsp_types::request::GotoTypeDefinitionResponse>> {\n     let _p = profile(\"handle_goto_type_definition\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let nav_info = match snap.analysis().goto_type_definition(position)? {\n+    let nav_info = match snap.analysis.goto_type_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -382,7 +382,7 @@ pub(crate) fn handle_parent_module(\n ) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n     let _p = profile(\"handle_parent_module\");\n     let position = from_proto::file_position(&snap, params)?;\n-    let navs = snap.analysis().parent_module(position)?;\n+    let navs = snap.analysis.parent_module(position)?;\n     let res = to_proto::goto_definition_response(&snap, None, navs)?;\n     Ok(Some(res))\n }\n@@ -393,11 +393,11 @@ pub(crate) fn handle_runnables(\n ) -> Result<Vec<lsp_ext::Runnable>> {\n     let _p = profile(\"handle_runnables\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let offset = params.position.map(|it| from_proto::offset(&line_index, it));\n     let mut res = Vec::new();\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n-    for runnable in snap.analysis().runnables(file_id)? {\n+    for runnable in snap.analysis.runnables(file_id)? {\n         if let Some(offset) = offset {\n             if !runnable.nav.full_range().contains_inclusive(offset) {\n                 continue;\n@@ -456,7 +456,7 @@ pub(crate) fn handle_completion(\n         let mut res = false;\n         if let Some(ctx) = params.context {\n             if ctx.trigger_character.unwrap_or_default() == \":\" {\n-                let source_file = snap.analysis().parse(position.file_id)?;\n+                let source_file = snap.analysis.parse(position.file_id)?;\n                 let syntax = source_file.syntax();\n                 let text = syntax.text();\n                 if let Some(next_char) = text.char_at(position.offset) {\n@@ -474,11 +474,11 @@ pub(crate) fn handle_completion(\n         return Ok(None);\n     }\n \n-    let items = match snap.analysis().completions(&snap.config.completion, position)? {\n+    let items = match snap.analysis.completions(&snap.config.completion, position)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n-    let line_index = snap.analysis().file_line_index(position.file_id)?;\n+    let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n     let items: Vec<CompletionItem> = items\n         .into_iter()\n@@ -494,9 +494,9 @@ pub(crate) fn handle_folding_range(\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let _p = profile(\"handle_folding_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let folds = snap.analysis().folding_ranges(file_id)?;\n-    let text = snap.analysis().file_text(file_id)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let folds = snap.analysis.folding_ranges(file_id)?;\n+    let text = snap.analysis.file_text(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let line_folding_only = snap.config.client_caps.line_folding_only;\n     let res = folds\n         .into_iter()\n@@ -511,7 +511,7 @@ pub(crate) fn handle_signature_help(\n ) -> Result<Option<lsp_types::SignatureHelp>> {\n     let _p = profile(\"handle_signature_help\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let call_info = match snap.analysis().call_info(position)? {\n+    let call_info = match snap.analysis.call_info(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -535,7 +535,7 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let info = match snap.analysis().hover(position)? {\n+    let info = match snap.analysis.hover(position)? {\n         None => return Ok(None),\n         Some(info) => info,\n     };\n@@ -562,13 +562,13 @@ pub(crate) fn handle_prepare_rename(\n     let _p = profile(\"handle_prepare_rename\");\n     let position = from_proto::file_position(&snap, params)?;\n \n-    let optional_change = snap.analysis().rename(position, \"dummy\")?;\n+    let optional_change = snap.analysis.rename(position, \"dummy\")?;\n     let range = match optional_change {\n         None => return Ok(None),\n         Some(it) => it.range,\n     };\n \n-    let line_index = snap.analysis().file_line_index(position.file_id)?;\n+    let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let range = to_proto::range(&line_index, range);\n     Ok(Some(PrepareRenameResponse::Range(range)))\n }\n@@ -588,7 +588,7 @@ pub(crate) fn handle_rename(\n         .into());\n     }\n \n-    let optional_change = snap.analysis().rename(position, &*params.new_name)?;\n+    let optional_change = snap.analysis.rename(position, &*params.new_name)?;\n     let source_change = match optional_change {\n         None => return Ok(None),\n         Some(it) => it.info,\n@@ -604,7 +604,7 @@ pub(crate) fn handle_references(\n     let _p = profile(\"handle_references\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n-    let refs = match snap.analysis().find_all_refs(position, None)? {\n+    let refs = match snap.analysis.find_all_refs(position, None)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n@@ -630,10 +630,10 @@ pub(crate) fn handle_formatting(\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let _p = profile(\"handle_formatting\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let file = snap.analysis().file_text(file_id)?;\n-    let crate_ids = snap.analysis().crate_for(file_id)?;\n+    let file = snap.analysis.file_text(file_id)?;\n+    let crate_ids = snap.analysis.crate_for(file_id)?;\n \n-    let file_line_index = snap.analysis().file_line_index(file_id)?;\n+    let file_line_index = snap.analysis.file_line_index(file_id)?;\n     let end_position = to_proto::position(&file_line_index, TextSize::of(file.as_str()));\n \n     let mut rustfmt = match &snap.config.rustfmt {\n@@ -642,7 +642,7 @@ pub(crate) fn handle_formatting(\n             cmd.args(extra_args);\n             if let Some(&crate_id) = crate_ids.first() {\n                 // Assume all crates are in the same edition\n-                let edition = snap.analysis().crate_edition(crate_id)?;\n+                let edition = snap.analysis.crate_edition(crate_id)?;\n                 cmd.arg(\"--edition\");\n                 cmd.arg(edition.to_string());\n             }\n@@ -706,9 +706,9 @@ fn handle_fixes(\n     res: &mut Vec<lsp_ext::CodeAction>,\n ) -> Result<()> {\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n-    let diagnostics = snap.analysis().diagnostics(file_id)?;\n+    let diagnostics = snap.analysis.diagnostics(file_id)?;\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n@@ -752,7 +752,7 @@ pub(crate) fn handle_code_action(\n     }\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n@@ -761,12 +761,12 @@ pub(crate) fn handle_code_action(\n \n     if snap.config.client_caps.resolve_code_action {\n         for (index, assist) in\n-            snap.analysis().unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n+            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis().resolved_assists(&snap.config.assist, frange)?.into_iter() {\n+        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }\n@@ -780,11 +780,11 @@ pub(crate) fn handle_resolve_code_action(\n ) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n     let _p = profile(\"handle_resolve_code_action\");\n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n \n-    let assists = snap.analysis().resolved_assists(&snap.config.assist, frange)?;\n+    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n     let (id_string, index) = split_delim(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n@@ -805,12 +805,12 @@ pub(crate) fn handle_code_lens(\n     }\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n \n     if snap.config.lens.runnable() {\n         // Gather runnables\n-        for runnable in snap.analysis().runnables(file_id)? {\n+        for runnable in snap.analysis.runnables(file_id)? {\n             if should_skip_target(&runnable, cargo_spec.as_ref()) {\n                 continue;\n             }\n@@ -838,7 +838,7 @@ pub(crate) fn handle_code_lens(\n     if snap.config.lens.impementations {\n         // Handle impls\n         lenses.extend(\n-            snap.analysis()\n+            snap.analysis\n                 .file_structure(file_id)?\n                 .into_iter()\n                 .filter(|it| match it.kind {\n@@ -916,10 +916,10 @@ pub(crate) fn handle_document_highlight(\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n     let _p = profile(\"handle_document_highlight\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let line_index = snap.analysis().file_line_index(position.file_id)?;\n+    let line_index = snap.analysis.file_line_index(position.file_id)?;\n \n     let refs = match snap\n-        .analysis()\n+        .analysis\n         .find_all_refs(position, Some(SearchScope::single_file(position.file_id)))?\n     {\n         None => return Ok(None),\n@@ -943,7 +943,7 @@ pub(crate) fn handle_ssr(\n ) -> Result<lsp_types::WorkspaceEdit> {\n     let _p = profile(\"handle_ssr\");\n     let source_change =\n-        snap.analysis().structural_search_replace(&params.query, params.parse_only)??;\n+        snap.analysis.structural_search_replace(&params.query, params.parse_only)??;\n     to_proto::workspace_edit(&snap, source_change)\n }\n \n@@ -952,9 +952,9 @@ pub(crate) fn publish_diagnostics(\n     file_id: FileId,\n ) -> Result<DiagnosticTask> {\n     let _p = profile(\"publish_diagnostics\");\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n-        .analysis()\n+        .analysis\n         .diagnostics(file_id)?\n         .into_iter()\n         .map(|d| Diagnostic {\n@@ -976,9 +976,9 @@ pub(crate) fn handle_inlay_hints(\n ) -> Result<Vec<InlayHint>> {\n     let _p = profile(\"handle_inlay_hints\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let analysis = snap.analysis();\n-    let line_index = analysis.file_line_index(file_id)?;\n-    Ok(analysis\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n+    Ok(snap\n+        .analysis\n         .inlay_hints(file_id, &snap.config.inlay_hints)?\n         .into_iter()\n         .map(|it| to_proto::inlay_int(&line_index, it))\n@@ -992,7 +992,7 @@ pub(crate) fn handle_call_hierarchy_prepare(\n     let _p = profile(\"handle_call_hierarchy_prepare\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n \n-    let nav_info = match snap.analysis().call_hierarchy(position)? {\n+    let nav_info = match snap.analysis.call_hierarchy(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -1018,7 +1018,7 @@ pub(crate) fn handle_call_hierarchy_incoming(\n     let frange = from_proto::file_range(&snap, doc, item.range)?;\n     let fpos = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n \n-    let call_items = match snap.analysis().incoming_calls(fpos)? {\n+    let call_items = match snap.analysis.incoming_calls(fpos)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -1027,7 +1027,7 @@ pub(crate) fn handle_call_hierarchy_incoming(\n \n     for call_item in call_items.into_iter() {\n         let file_id = call_item.target.file_id();\n-        let line_index = snap.analysis().file_line_index(file_id)?;\n+        let line_index = snap.analysis.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyIncomingCall {\n             from: item,\n@@ -1053,7 +1053,7 @@ pub(crate) fn handle_call_hierarchy_outgoing(\n     let frange = from_proto::file_range(&snap, doc, item.range)?;\n     let fpos = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n \n-    let call_items = match snap.analysis().outgoing_calls(fpos)? {\n+    let call_items = match snap.analysis.outgoing_calls(fpos)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n@@ -1062,7 +1062,7 @@ pub(crate) fn handle_call_hierarchy_outgoing(\n \n     for call_item in call_items.into_iter() {\n         let file_id = call_item.target.file_id();\n-        let line_index = snap.analysis().file_line_index(file_id)?;\n+        let line_index = snap.analysis.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyOutgoingCall {\n             to: item,\n@@ -1084,10 +1084,10 @@ pub(crate) fn handle_semantic_tokens(\n     let _p = profile(\"handle_semantic_tokens\");\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let text = snap.analysis().file_text(file_id)?;\n-    let line_index = snap.analysis().file_line_index(file_id)?;\n+    let text = snap.analysis.file_text(file_id)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis().highlight(file_id)?;\n+    let highlights = snap.analysis.highlight(file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n@@ -1099,10 +1099,10 @@ pub(crate) fn handle_semantic_tokens_range(\n     let _p = profile(\"handle_semantic_tokens_range\");\n \n     let frange = from_proto::file_range(&snap, params.text_document, params.range)?;\n-    let text = snap.analysis().file_text(frange.file_id)?;\n-    let line_index = snap.analysis().file_line_index(frange.file_id)?;\n+    let text = snap.analysis.file_text(frange.file_id)?;\n+    let line_index = snap.analysis.file_line_index(frange.file_id)?;\n \n-    let highlights = snap.analysis().highlight_range(frange)?;\n+    let highlights = snap.analysis.highlight_range(frange)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n@@ -1178,9 +1178,9 @@ fn show_impl_command_link(\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover.implementations {\n-        if let Some(nav_data) = snap.analysis().goto_implementation(*position).unwrap_or(None) {\n+        if let Some(nav_data) = snap.analysis.goto_implementation(*position).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n-            let line_index = snap.analysis().file_line_index(position.file_id).ok()?;\n+            let line_index = snap.analysis.file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);\n             let locations: Vec<_> = nav_data\n                 .info"}, {"sha": "eb9e7f9130daf2809875c9e8891f413579cd4273", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -300,7 +300,7 @@ fn loop_turn(\n         pool.execute({\n             let subs = subscriptions;\n             let snap = global_state.snapshot();\n-            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n+            move || snap.analysis.prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n         });\n     }\n "}, {"sha": "f6cb8e4bb44bbb1ce6e7cb298ccad85de604e900", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee6eb7333d1978eac4c70039162f61d6275ba3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=10ee6eb7333d1978eac4c70039162f61d6275ba3", "patch": "@@ -440,7 +440,7 @@ pub(crate) fn location(\n     frange: FileRange,\n ) -> Result<lsp_types::Location> {\n     let url = url(snap, frange.file_id);\n-    let line_index = snap.analysis().file_line_index(frange.file_id)?;\n+    let line_index = snap.analysis.file_line_index(frange.file_id)?;\n     let range = range(&line_index, frange.range);\n     let loc = lsp_types::Location::new(url, range);\n     Ok(loc)\n@@ -453,7 +453,7 @@ pub(crate) fn location_link(\n ) -> Result<lsp_types::LocationLink> {\n     let origin_selection_range = match src {\n         Some(src) => {\n-            let line_index = snap.analysis().file_line_index(src.file_id)?;\n+            let line_index = snap.analysis.file_line_index(src.file_id)?;\n             let range = range(&line_index, src.range);\n             Some(range)\n         }\n@@ -473,7 +473,7 @@ fn location_info(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n ) -> Result<(lsp_types::Url, lsp_types::Range, lsp_types::Range)> {\n-    let line_index = snap.analysis().file_line_index(target.file_id())?;\n+    let line_index = snap.analysis.file_line_index(target.file_id())?;\n \n     let target_uri = url(snap, target.file_id());\n     let target_range = range(&line_index, target.full_range());\n@@ -516,7 +516,7 @@ pub(crate) fn snippet_text_document_edit(\n     source_file_edit: SourceFileEdit,\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = versioned_text_document_identifier(snap, source_file_edit.file_id, None);\n-    let line_index = snap.analysis().file_line_index(source_file_edit.file_id)?;\n+    let line_index = snap.analysis.file_line_index(source_file_edit.file_id)?;\n     let line_endings = snap.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit\n         .edit"}]}