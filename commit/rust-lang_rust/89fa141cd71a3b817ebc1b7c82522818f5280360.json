{"sha": "89fa141cd71a3b817ebc1b7c82522818f5280360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmExNDFjZDcxYTNiODE3ZWJjMWI3YzgyNTIyODE4ZjUyODAzNjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T17:05:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "rustc: Switch field privacy as necessary", "tree": {"sha": "289393a6b8bc253dc6cfaf571e76ae75c2d8c119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289393a6b8bc253dc6cfaf571e76ae75c2d8c119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89fa141cd71a3b817ebc1b7c82522818f5280360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89fa141cd71a3b817ebc1b7c82522818f5280360", "html_url": "https://github.com/rust-lang/rust/commit/89fa141cd71a3b817ebc1b7c82522818f5280360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89fa141cd71a3b817ebc1b7c82522818f5280360/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "html_url": "https://github.com/rust-lang/rust/commit/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7"}], "stats": {"total": 1092, "additions": 551, "deletions": 541}, "files": [{"sha": "d6173176c160b8f604a42cd40711c23a447d3621", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -28,12 +28,12 @@ use syntax::abi;\n pub static METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n pub struct Archive<'a> {\n-    priv sess: &'a Session,\n-    priv dst: Path,\n+    sess: &'a Session,\n+    dst: Path,\n }\n \n pub struct ArchiveRO {\n-    priv ptr: ArchiveRef,\n+    ptr: ArchiveRef,\n }\n \n fn run_ar(sess: &Session, args: &str, cwd: Option<&Path>,"}, {"sha": "a2c579d13f43875bf061606671850ed2b8e9b384", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -54,7 +54,7 @@ use syntax::ast;\n \n #[deriving(Clone, Eq)]\n pub struct Svh {\n-    priv hash: ~str,\n+    hash: ~str,\n }\n \n impl Svh {"}, {"sha": "e8cdbbdad48cd01b8e5f0b004789e3293061bd72", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -11,9 +11,9 @@\n #![allow(non_camel_case_types)]\n \n pub struct t {\n-    module_asm: ~str,\n-    meta_sect_name: ~str,\n-    data_layout: ~str,\n-    target_triple: ~str,\n-    cc_args: Vec<~str> ,\n+    pub module_asm: ~str,\n+    pub meta_sect_name: ~str,\n+    pub data_layout: ~str,\n+    pub target_triple: ~str,\n+    pub cc_args: Vec<~str> ,\n }"}, {"sha": "d5dba02ed28f27d28747eaa655bc0e6646af7baa", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -270,12 +270,12 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n }\n \n pub struct CrateAnalysis {\n-    exp_map2: middle::resolve::ExportMap2,\n-    exported_items: middle::privacy::ExportedItems,\n-    public_items: middle::privacy::PublicItems,\n-    ty_cx: ty::ctxt,\n-    maps: astencode::Maps,\n-    reachable: NodeSet,\n+    pub exp_map2: middle::resolve::ExportMap2,\n+    pub exported_items: middle::privacy::ExportedItems,\n+    pub public_items: middle::privacy::PublicItems,\n+    pub ty_cx: ty::ctxt,\n+    pub maps: astencode::Maps,\n+    pub reachable: NodeSet,\n }\n \n /// Run the resolution, typechecking, region checking and other\n@@ -409,12 +409,12 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n }\n \n pub struct CrateTranslation {\n-    context: ContextRef,\n-    module: ModuleRef,\n-    metadata_module: ModuleRef,\n-    link: LinkMeta,\n-    metadata: Vec<u8> ,\n-    reachable: Vec<~str> ,\n+    pub context: ContextRef,\n+    pub module: ModuleRef,\n+    pub metadata_module: ModuleRef,\n+    pub link: LinkMeta,\n+    pub metadata: Vec<u8>,\n+    pub reachable: Vec<~str>,\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n@@ -1124,9 +1124,9 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n }\n \n pub struct OutputFilenames {\n-    out_directory: Path,\n-    out_filestem: ~str,\n-    single_output_file: Option<Path>,\n+    pub out_directory: Path,\n+    pub out_filestem: ~str,\n+    pub single_output_file: Option<Path>,\n }\n \n impl OutputFilenames {"}, {"sha": "c2fec3871abcdbd82ed909df873f925e668c4188", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -31,11 +31,11 @@ use std::cell::{Cell, RefCell};\n use collections::HashSet;\n \n pub struct Config {\n-    os: abi::Os,\n-    arch: abi::Architecture,\n-    target_strs: target_strs::t,\n-    int_type: IntTy,\n-    uint_type: UintTy,\n+    pub os: abi::Os,\n+    pub arch: abi::Architecture,\n+    pub target_strs: target_strs::t,\n+    pub int_type: IntTy,\n+    pub uint_type: UintTy,\n }\n \n macro_rules! debugging_opts(\n@@ -124,34 +124,34 @@ pub enum DebugInfoLevel {\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n-    crate_types: Vec<CrateType> ,\n+    pub crate_types: Vec<CrateType> ,\n \n-    gc: bool,\n-    optimize: OptLevel,\n-    debuginfo: DebugInfoLevel,\n-    lint_opts: Vec<(lint::Lint, lint::level)> ,\n-    output_types: Vec<back::link::OutputType> ,\n+    pub gc: bool,\n+    pub optimize: OptLevel,\n+    pub debuginfo: DebugInfoLevel,\n+    pub lint_opts: Vec<(lint::Lint, lint::level)> ,\n+    pub output_types: Vec<back::link::OutputType> ,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n-    addl_lib_search_paths: RefCell<HashSet<Path>>,\n-    maybe_sysroot: Option<Path>,\n-    target_triple: ~str,\n+    pub addl_lib_search_paths: RefCell<HashSet<Path>>,\n+    pub maybe_sysroot: Option<Path>,\n+    pub target_triple: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n     // will be added to the crate AST node.  This should not be used for\n     // anything except building the full crate config prior to parsing.\n-    cfg: ast::CrateConfig,\n-    test: bool,\n-    parse_only: bool,\n-    no_trans: bool,\n-    no_analysis: bool,\n-    debugging_opts: u64,\n+    pub cfg: ast::CrateConfig,\n+    pub test: bool,\n+    pub parse_only: bool,\n+    pub no_trans: bool,\n+    pub no_analysis: bool,\n+    pub debugging_opts: u64,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n-    write_dependency_info: (bool, Option<Path>),\n+    pub write_dependency_info: (bool, Option<Path>),\n     /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n-    print_metas: (bool, bool, bool),\n-    cg: CodegenOptions,\n+    pub print_metas: (bool, bool, bool),\n+    pub cg: CodegenOptions,\n }\n \n // The type of entry function, so\n@@ -174,28 +174,28 @@ pub enum CrateType {\n }\n \n pub struct Session {\n-    targ_cfg: Config,\n-    opts: Options,\n-    cstore: metadata::cstore::CStore,\n-    parse_sess: ParseSess,\n+    pub targ_cfg: Config,\n+    pub opts: Options,\n+    pub cstore: metadata::cstore::CStore,\n+    pub parse_sess: ParseSess,\n     // For a library crate, this is always none\n-    entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n-    entry_type: Cell<Option<EntryFnType>>,\n-    macro_registrar_fn: RefCell<Option<ast::DefId>>,\n-    default_sysroot: Option<Path>,\n-    building_library: Cell<bool>,\n+    pub entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n+    pub entry_type: Cell<Option<EntryFnType>>,\n+    pub macro_registrar_fn: RefCell<Option<ast::DefId>>,\n+    pub default_sysroot: Option<Path>,\n+    pub building_library: Cell<bool>,\n     // The name of the root source file of the crate, in the local file system. The path is always\n     // expected to be absolute. `None` means that there is no source file.\n-    local_crate_source_file: Option<Path>,\n-    working_dir: Path,\n-    lints: RefCell<NodeMap<Vec<(lint::Lint, codemap::Span, ~str)>>>,\n-    node_id: Cell<ast::NodeId>,\n-    crate_types: RefCell<Vec<CrateType>>,\n-    features: front::feature_gate::Features,\n+    pub local_crate_source_file: Option<Path>,\n+    pub working_dir: Path,\n+    pub lints: RefCell<NodeMap<Vec<(lint::Lint, codemap::Span, ~str)>>>,\n+    pub node_id: Cell<ast::NodeId>,\n+    pub crate_types: RefCell<Vec<CrateType>>,\n+    pub features: front::feature_gate::Features,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n-    recursion_limit: Cell<uint>,\n+    pub recursion_limit: Cell<uint>,\n }\n \n impl Session {\n@@ -365,7 +365,7 @@ macro_rules! cgoptions(\n     ($($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n (\n     #[deriving(Clone)]\n-    pub struct CodegenOptions { $($opt: $t),* }\n+    pub struct CodegenOptions { $(pub $opt: $t),* }\n \n     pub fn basic_codegen_options() -> CodegenOptions {\n         CodegenOptions { $($opt: $init),* }"}, {"sha": "22de214cc12ca2c5bb9d928de509ab7dfe77f363", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -74,7 +74,7 @@ enum Status {\n \n /// A set of features to be used by later passes.\n pub struct Features {\n-    default_type_params: Cell<bool>\n+    pub default_type_params: Cell<bool>\n }\n \n impl Features {"}, {"sha": "3aac4f6b72e08fbbae4bb4ecf152306576d86884", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -31,6 +31,9 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n            default_type_params, phase)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+#![allow(unrecognized_lint)] // NOTE: remove after a stage0 snap\n+\n extern crate flate;\n extern crate arena;\n extern crate syntax;"}, {"sha": "d9e1b779e96517793a0d1e1c04e1cd7d86b529e8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -1878,7 +1878,7 @@ impl TypeNames {\n /* Memory-managed interface to target data. */\n \n pub struct target_data_res {\n-    td: TargetDataRef,\n+    pub td: TargetDataRef,\n }\n \n impl Drop for target_data_res {\n@@ -1896,7 +1896,7 @@ pub fn target_data_res(td: TargetDataRef) -> target_data_res {\n }\n \n pub struct TargetData {\n-    lltd: TargetDataRef,\n+    pub lltd: TargetDataRef,\n     dtor: @target_data_res\n }\n \n@@ -1914,7 +1914,7 @@ pub fn mk_target_data(string_rep: &str) -> TargetData {\n /* Memory-managed interface to pass managers. */\n \n pub struct pass_manager_res {\n-    pm: PassManagerRef,\n+    pub pm: PassManagerRef,\n }\n \n impl Drop for pass_manager_res {\n@@ -1932,7 +1932,7 @@ pub fn pass_manager_res(pm: PassManagerRef) -> pass_manager_res {\n }\n \n pub struct PassManager {\n-    llpm: PassManagerRef,\n+    pub llpm: PassManagerRef,\n     dtor: @pass_manager_res\n }\n \n@@ -1950,7 +1950,7 @@ pub fn mk_pass_manager() -> PassManager {\n /* Memory-managed interface to object files. */\n \n pub struct ObjectFile {\n-    llof: ObjectFileRef,\n+    pub llof: ObjectFileRef,\n }\n \n impl ObjectFile {\n@@ -1981,7 +1981,7 @@ impl Drop for ObjectFile {\n /* Memory-managed interface to section iterators. */\n \n pub struct section_iter_res {\n-    si: SectionIteratorRef,\n+    pub si: SectionIteratorRef,\n }\n \n impl Drop for section_iter_res {\n@@ -1999,7 +1999,7 @@ pub fn section_iter_res(si: SectionIteratorRef) -> section_iter_res {\n }\n \n pub struct SectionIter {\n-    llsi: SectionIteratorRef,\n+    pub llsi: SectionIteratorRef,\n     dtor: @section_iter_res\n }\n "}, {"sha": "09d3b36321fa9a91b5fcc0afa383758bf8a3f345", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -210,6 +210,6 @@ pub static tag_macro_def: uint = 0x65;\n \n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n-    crateid: CrateId,\n-    crate_hash: Svh,\n+    pub crateid: CrateId,\n+    pub crate_hash: Svh,\n }"}, {"sha": "36febfc1a09ca452ecda585d9a62f209d1232f72", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -371,7 +371,7 @@ fn resolve_crate_deps(e: &mut Env,\n }\n \n pub struct Loader<'a> {\n-    priv env: Env<'a>,\n+    env: Env<'a>,\n }\n \n impl<'a> Loader<'a> {"}, {"sha": "d840ca329387d51dc8bc97ea71d3ebb0b58ad46c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -26,10 +26,10 @@ use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n pub struct StaticMethodInfo {\n-    ident: ast::Ident,\n-    def_id: ast::DefId,\n-    purity: ast::Purity,\n-    vis: ast::Visibility,\n+    pub ident: ast::Ident,\n+    pub def_id: ast::DefId,\n+    pub purity: ast::Purity,\n+    pub vis: ast::Visibility,\n }\n \n pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> ~str {"}, {"sha": "62fcc4c617e619e9eb01f8385a94928f89825810", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -37,10 +37,10 @@ pub enum MetadataBlob {\n }\n \n pub struct crate_metadata {\n-    name: ~str,\n-    data: MetadataBlob,\n-    cnum_map: cnum_map,\n-    cnum: ast::CrateNum\n+    pub name: ~str,\n+    pub data: MetadataBlob,\n+    pub cnum_map: cnum_map,\n+    pub cnum: ast::CrateNum,\n }\n \n #[deriving(Eq)]\n@@ -60,18 +60,18 @@ pub enum NativeLibaryKind {\n // must be non-None.\n #[deriving(Eq, Clone)]\n pub struct CrateSource {\n-    dylib: Option<Path>,\n-    rlib: Option<Path>,\n-    cnum: ast::CrateNum,\n+    pub dylib: Option<Path>,\n+    pub rlib: Option<Path>,\n+    pub cnum: ast::CrateNum,\n }\n \n pub struct CStore {\n-    priv metas: RefCell<HashMap<ast::CrateNum, @crate_metadata>>,\n-    priv extern_mod_crate_map: RefCell<extern_mod_crate_map>,\n-    priv used_crate_sources: RefCell<Vec<CrateSource> >,\n-    priv used_libraries: RefCell<Vec<(~str, NativeLibaryKind)> >,\n-    priv used_link_args: RefCell<Vec<~str> >,\n-    intr: Rc<IdentInterner>\n+    metas: RefCell<HashMap<ast::CrateNum, @crate_metadata>>,\n+    extern_mod_crate_map: RefCell<extern_mod_crate_map>,\n+    used_crate_sources: RefCell<Vec<CrateSource>>,\n+    used_libraries: RefCell<Vec<(~str, NativeLibaryKind)>>,\n+    used_link_args: RefCell<Vec<~str>>,\n+    pub intr: Rc<IdentInterner>,\n }\n \n // Map from NodeId's of local extern crate statements to crate numbers"}, {"sha": "94941913a8b8831a1a0a8b6442768c902165c38b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -1108,9 +1108,9 @@ pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> {\n \n #[deriving(Clone)]\n pub struct CrateDep {\n-    cnum: ast::CrateNum,\n-    crate_id: CrateId,\n-    hash: Svh,\n+    pub cnum: ast::CrateNum,\n+    pub crate_id: CrateId,\n+    pub hash: Svh,\n }\n \n pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {"}, {"sha": "1da698beb389633b28af45016dba0b8347bbeb37", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -69,14 +69,14 @@ pub type EncodeInlinedItem<'a> = 'a |ecx: &EncodeContext,\n                                      ii: InlinedItemRef|;\n \n pub struct EncodeParams<'a> {\n-    diag: &'a SpanHandler,\n-    tcx: &'a ty::ctxt,\n-    reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a RefCell<NodeMap<~str>>,\n-    non_inlineable_statics: &'a RefCell<NodeSet>,\n-    link_meta: &'a LinkMeta,\n-    cstore: &'a cstore::CStore,\n-    encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub diag: &'a SpanHandler,\n+    pub tcx: &'a ty::ctxt,\n+    pub reexports2: middle::resolve::ExportMap2,\n+    pub item_symbols: &'a RefCell<NodeMap<~str>>,\n+    pub non_inlineable_statics: &'a RefCell<NodeSet>,\n+    pub link_meta: &'a LinkMeta,\n+    pub cstore: &'a cstore::CStore,\n+    pub encode_inlined_item: EncodeInlinedItem<'a>,\n }\n \n pub struct Stats {\n@@ -96,16 +96,16 @@ pub struct Stats {\n }\n \n pub struct EncodeContext<'a> {\n-    diag: &'a SpanHandler,\n-    tcx: &'a ty::ctxt,\n-    stats: @Stats,\n-    reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a RefCell<NodeMap<~str>>,\n-    non_inlineable_statics: &'a RefCell<NodeSet>,\n-    link_meta: &'a LinkMeta,\n-    cstore: &'a cstore::CStore,\n-    encode_inlined_item: EncodeInlinedItem<'a>,\n-    type_abbrevs: abbrev_map,\n+    pub diag: &'a SpanHandler,\n+    pub tcx: &'a ty::ctxt,\n+    pub stats: @Stats,\n+    pub reexports2: middle::resolve::ExportMap2,\n+    pub item_symbols: &'a RefCell<NodeMap<~str>>,\n+    pub non_inlineable_statics: &'a RefCell<NodeSet>,\n+    pub link_meta: &'a LinkMeta,\n+    pub cstore: &'a cstore::CStore,\n+    pub encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub type_abbrevs: abbrev_map,\n }\n \n fn encode_name(ebml_w: &mut Encoder, name: Name) {"}, {"sha": "468eac4d2694ce5220dee2a0b53a7a9469feac6d", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -26,9 +26,9 @@ pub enum FileMatch { FileMatches, FileDoesntMatch }\n pub type pick<'a> = 'a |path: &Path| -> FileMatch;\n \n pub struct FileSearch<'a> {\n-    sysroot: &'a Path,\n-    addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n-    target_triple: &'a str\n+    pub sysroot: &'a Path,\n+    pub addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n+    pub target_triple: &'a str\n }\n \n impl<'a> FileSearch<'a> {"}, {"sha": "8a3d6567c77a1b52c66475890265d87cd42ef94f", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -46,27 +46,27 @@ pub enum Os {\n }\n \n pub struct Context<'a> {\n-    sess: &'a Session,\n-    span: Span,\n-    ident: &'a str,\n-    crate_id: &'a CrateId,\n-    id_hash: &'a str,\n-    hash: Option<&'a Svh>,\n-    os: Os,\n-    intr: Rc<IdentInterner>,\n-    rejected_via_hash: bool,\n+    pub sess: &'a Session,\n+    pub span: Span,\n+    pub ident: &'a str,\n+    pub crate_id: &'a CrateId,\n+    pub id_hash: &'a str,\n+    pub hash: Option<&'a Svh>,\n+    pub os: Os,\n+    pub intr: Rc<IdentInterner>,\n+    pub rejected_via_hash: bool,\n }\n \n pub struct Library {\n-    dylib: Option<Path>,\n-    rlib: Option<Path>,\n-    metadata: MetadataBlob,\n+    pub dylib: Option<Path>,\n+    pub rlib: Option<Path>,\n+    pub metadata: MetadataBlob,\n }\n \n pub struct ArchiveMetadata {\n-    priv archive: ArchiveRO,\n+    archive: ArchiveRO,\n     // See comments in ArchiveMetadata::new for why this is static\n-    priv data: &'static [u8],\n+    data: &'static [u8],\n }\n \n // FIXME(#11857) this should be a \"real\" realpath"}, {"sha": "7e8480e4311a20b68fd6c88c0373afccfad4fb5a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -34,12 +34,12 @@ macro_rules! mywrite( ($wr:expr, $($arg:tt)*) => (\n ) )\n \n pub struct ctxt<'a> {\n-    diag: &'a SpanHandler,\n+    pub diag: &'a SpanHandler,\n     // Def -> str Callback:\n-    ds: fn(DefId) -> ~str,\n+    pub ds: fn(DefId) -> ~str,\n     // The type context.\n-    tcx: &'a ty::ctxt,\n-    abbrevs: abbrev_ctxt\n+    pub tcx: &'a ty::ctxt,\n+    pub abbrevs: abbrev_ctxt\n }\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str."}, {"sha": "383739a1b0320db53ecbcc7545daaf1bf8a0ebd2", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -53,10 +53,10 @@ use writer = serialize::ebml::writer;\n \n // Auxiliary maps of things to be encoded\n pub struct Maps {\n-    root_map: middle::borrowck::root_map,\n-    method_map: middle::typeck::MethodMap,\n-    vtable_map: middle::typeck::vtable_map,\n-    capture_map: RefCell<middle::moves::CaptureMap>,\n+    pub root_map: middle::borrowck::root_map,\n+    pub method_map: middle::typeck::MethodMap,\n+    pub vtable_map: middle::typeck::vtable_map,\n+    pub capture_map: RefCell<middle::moves::CaptureMap>,\n }\n \n struct DecodeContext<'a> {"}, {"sha": "b8b05128e4c2c3b87246ae98f7385b4bc9f4f465", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -207,8 +207,8 @@ pub struct BorrowStats {\n // is T, which is not a box.\n #[deriving(Eq, TotalEq, Hash)]\n pub struct root_map_key {\n-    id: ast::NodeId,\n-    derefs: uint\n+    pub id: ast::NodeId,\n+    pub derefs: uint\n }\n \n pub type BckResult<T> = Result<T, BckError>;\n@@ -378,7 +378,7 @@ impl Repr for RestrictionSet {\n // uncovered after a certain number of auto-derefs.\n \n pub struct RootInfo {\n-    scope: ast::NodeId,\n+    pub scope: ast::NodeId,\n }\n \n pub type root_map = @RefCell<HashMap<root_map_key, RootInfo>>;"}, {"sha": "0e18946a3a100015b8caf594910a660549933492", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -30,37 +30,37 @@ use util::ppaux::Repr;\n \n pub struct MoveData {\n     /// Move paths. See section \"Move paths\" in `doc.rs`.\n-    paths: RefCell<Vec<MovePath>>,\n+    pub paths: RefCell<Vec<MovePath>>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n-    path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n+    pub path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n \n     /// Each move or uninitialized variable gets an entry here.\n-    moves: RefCell<Vec<Move>>,\n+    pub moves: RefCell<Vec<Move>>,\n \n     /// Assignments to a variable, like `x = foo`. These are assigned\n     /// bits for dataflow, since we must track them to ensure that\n     /// immutable variables are assigned at most once along each path.\n-    var_assignments: RefCell<Vec<Assignment>>,\n+    pub var_assignments: RefCell<Vec<Assignment>>,\n \n     /// Assignments to a path, like `x.f = foo`. These are not\n     /// assigned dataflow bits, but we track them because they still\n     /// kill move bits.\n-    path_assignments: RefCell<Vec<Assignment>>,\n+    pub path_assignments: RefCell<Vec<Assignment>>,\n \n     /// Assignments to a variable or path, like `x = foo`, but not `x += foo`.\n-    assignee_ids: RefCell<HashSet<ast::NodeId>>,\n+    pub assignee_ids: RefCell<HashSet<ast::NodeId>>,\n }\n \n pub struct FlowedMoveData<'a> {\n-    move_data: MoveData,\n+    pub move_data: MoveData,\n \n-    dfcx_moves: MoveDataFlow<'a>,\n+    pub dfcx_moves: MoveDataFlow<'a>,\n \n     // We could (and maybe should, for efficiency) combine both move\n     // and assign data flow into one, but this way it's easier to\n     // distinguish the bits that correspond to moves and assignments.\n-    dfcx_assign: AssignDataFlow<'a>\n+    pub dfcx_assign: AssignDataFlow<'a>\n }\n \n /// Index into `MoveData.paths`, used like a pointer\n@@ -97,21 +97,21 @@ static InvalidMoveIndex: MoveIndex =\n \n pub struct MovePath {\n     /// Loan path corresponding to this move path\n-    loan_path: @LoanPath,\n+    pub loan_path: @LoanPath,\n \n     /// Parent pointer, `InvalidMovePathIndex` if root\n-    parent: MovePathIndex,\n+    pub parent: MovePathIndex,\n \n     /// Head of linked list of moves to this path,\n     /// `InvalidMoveIndex` if not moved\n-    first_move: MoveIndex,\n+    pub first_move: MoveIndex,\n \n     /// First node in linked list of children, `InvalidMovePathIndex` if leaf\n-    first_child: MovePathIndex,\n+    pub first_child: MovePathIndex,\n \n     /// Next node in linked list of parent's children (siblings),\n     /// `InvalidMovePathIndex` if none.\n-    next_sibling: MovePathIndex,\n+    pub next_sibling: MovePathIndex,\n }\n \n pub enum MoveKind {\n@@ -123,27 +123,27 @@ pub enum MoveKind {\n \n pub struct Move {\n     /// Path being moved.\n-    path: MovePathIndex,\n+    pub path: MovePathIndex,\n \n     /// id of node that is doing the move.\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     /// Kind of move, for error messages.\n-    kind: MoveKind,\n+    pub kind: MoveKind,\n \n     /// Next node in linked list of moves from `path`, or `InvalidMoveIndex`\n-    next_move: MoveIndex\n+    pub next_move: MoveIndex\n }\n \n pub struct Assignment {\n     /// Path being assigned.\n-    path: MovePathIndex,\n+    pub path: MovePathIndex,\n \n     /// id where assignment occurs\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     /// span of node where assignment occurs\n-    span: Span,\n+    pub span: Span,\n }\n \n pub struct MoveDataFlowOperator;"}, {"sha": "2adc3e82576f2b185882cac73274b514d80bf788", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -31,21 +31,21 @@ use util::nodemap::NodeMap;\n \n #[deriving(Clone)]\n pub struct DataFlowContext<'a, O> {\n-    priv tcx: &'a ty::ctxt,\n-    priv method_map: typeck::MethodMap,\n+    tcx: &'a ty::ctxt,\n+    method_map: typeck::MethodMap,\n \n     /// the data flow operator\n-    priv oper: O,\n+    oper: O,\n \n     /// number of bits to propagate per id\n-    priv bits_per_id: uint,\n+    bits_per_id: uint,\n \n     /// number of words we will use to store bits_per_id.\n     /// equal to bits_per_id/uint::BITS rounded up.\n-    priv words_per_id: uint,\n+    words_per_id: uint,\n \n     // mapping from node to bitset index.\n-    priv nodeid_to_bitset: NodeMap<uint>,\n+    nodeid_to_bitset: NodeMap<uint>,\n \n     // Bit sets per id.  The following three fields (`gens`, `kills`,\n     // and `on_entry`) all have the same structure. For each id in\n@@ -54,14 +54,15 @@ pub struct DataFlowContext<'a, O> {\n     // the full vector (see the method `compute_id_range()`).\n \n     /// bits generated as we exit the scope `id`. Updated by `add_gen()`.\n-    priv gens: Vec<uint> ,\n+    gens: Vec<uint>,\n \n     /// bits killed as we exit the scope `id`. Updated by `add_kill()`.\n-    priv kills: Vec<uint> ,\n+    kills: Vec<uint>,\n \n     /// bits that are valid on entry to the scope `id`. Updated by\n     /// `propagate()`.\n-    priv on_entry: Vec<uint> }\n+    on_entry: Vec<uint>,\n+}\n \n /// Parameterization for the precise form of data flow that is used.\n pub trait DataFlowOperator {"}, {"sha": "d8851fa46f8bae96ad4bfdcff05e5746ae771b56", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -26,8 +26,8 @@ use syntax::visit::Visitor;\n // (The def_upvar will already have been stripped).\n #[deriving(Encodable, Decodable)]\n pub struct freevar_entry {\n-    def: ast::Def, //< The variable being accessed free.\n-    span: Span     //< First span where it is accessed (there can be multiple)\n+    pub def: ast::Def, //< The variable being accessed free.\n+    pub span: Span     //< First span where it is accessed (there can be multiple)\n }\n pub type freevar_info = @Vec<@freevar_entry> ;\n pub type freevar_map = NodeMap<freevar_info>;"}, {"sha": "fd27cabaf7fbab23746b66b8b5b07e44a79a4cb0", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -37,20 +37,20 @@ be indexed by the direction (see the type `Direction`).\n use std::uint;\n \n pub struct Graph<N,E> {\n-    priv nodes: Vec<Node<N>> ,\n-    priv edges: Vec<Edge<E>> ,\n+    nodes: Vec<Node<N>> ,\n+    edges: Vec<Edge<E>> ,\n }\n \n pub struct Node<N> {\n-    priv first_edge: [EdgeIndex, ..2], // see module comment\n-    data: N,\n+    first_edge: [EdgeIndex, ..2], // see module comment\n+    pub data: N,\n }\n \n pub struct Edge<E> {\n-    priv next_edge: [EdgeIndex, ..2], // see module comment\n-    priv source: NodeIndex,\n-    priv target: NodeIndex,\n-    data: E,\n+    next_edge: [EdgeIndex, ..2], // see module comment\n+    source: NodeIndex,\n+    target: NodeIndex,\n+    pub data: E,\n }\n \n #[deriving(Eq)]\n@@ -62,7 +62,7 @@ pub struct EdgeIndex(uint);\n pub static InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-pub struct Direction { priv repr: uint }\n+pub struct Direction { repr: uint }\n pub static Outgoing: Direction = Direction { repr: 0 };\n pub static Incoming: Direction = Direction { repr: 1 };\n "}, {"sha": "86db6b6a46373a22430a8e0fcc3b9e3df4282be4", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -47,7 +47,7 @@ pub enum LangItem {\n }\n \n pub struct LanguageItems {\n-    items: Vec<Option<ast::DefId>> ,\n+    pub items: Vec<Option<ast::DefId>> ,\n }\n \n impl LanguageItems {"}, {"sha": "97f5cca1cabb5d025465dc891db880dc12594f08", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -135,9 +135,9 @@ pub enum level {\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n pub struct LintSpec {\n-    default: level,\n-    lint: Lint,\n-    desc: &'static str,\n+    pub default: level,\n+    pub lint: Lint,\n+    pub desc: &'static str,\n }\n \n pub type LintDict = HashMap<&'static str, LintSpec>;"}, {"sha": "3604499add6936040caf4a8ddc109b4b937e42e0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -90,8 +90,8 @@ pub enum categorization {\n \n #[deriving(Eq)]\n pub struct CopiedUpvar {\n-    upvar_id: ast::NodeId,\n-    onceness: ast::Onceness,\n+    pub upvar_id: ast::NodeId,\n+    pub onceness: ast::Onceness,\n }\n \n // different kinds of pointers:\n@@ -147,11 +147,11 @@ pub enum MutabilityCategory {\n // fashion. For more details, see the method `cat_pattern`\n #[deriving(Eq)]\n pub struct cmt_ {\n-    id: ast::NodeId,          // id of expr/pat producing this value\n-    span: Span,                // span of same expr/pat\n-    cat: categorization,       // categorization of expr\n-    mutbl: MutabilityCategory, // mutability of expr as lvalue\n-    ty: ty::t                  // type of the expr (*see WARNING above*)\n+    pub id: ast::NodeId,          // id of expr/pat producing this value\n+    pub span: Span,                // span of same expr/pat\n+    pub cat: categorization,       // categorization of expr\n+    pub mutbl: MutabilityCategory, // mutability of expr as lvalue\n+    pub ty: ty::t                  // type of the expr (*see WARNING above*)\n }\n \n pub type cmt = @cmt_;\n@@ -242,7 +242,7 @@ impl ast_node for ast::Pat {\n }\n \n pub struct MemCategorizationContext<TYPER> {\n-    typer: TYPER\n+    pub typer: TYPER\n }\n \n pub type McResult<T> = Result<T, ()>;"}, {"sha": "f3ecfdefa75cea8b248a66540c89fac7641e31a8", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -153,25 +153,25 @@ pub enum CaptureMode {\n \n #[deriving(Encodable, Decodable)]\n pub struct CaptureVar {\n-    def: Def,         // Variable being accessed free\n-    span: Span,       // Location of an access to this variable\n-    mode: CaptureMode // How variable is being accessed\n+    pub def: Def,         // Variable being accessed free\n+    pub span: Span,       // Location of an access to this variable\n+    pub mode: CaptureMode // How variable is being accessed\n }\n \n pub type CaptureMap = NodeMap<Rc<Vec<CaptureVar>>>;\n \n /** See the section Output on the module comment for explanation. */\n #[deriving(Clone)]\n pub struct MoveMaps {\n-    moves_map: NodeSet,\n+    pub moves_map: NodeSet,\n     /**\n      * Set of variable node-ids that are moved.\n      *\n-     * Note: The `moves_map` stores expression ids that are moves,\n+     * pub Note: The `moves_map` stores expression ids that are moves,\n      * whereas this set stores the ids of the variables that are\n      * moved at some point */\n-    moved_variables_set: NodeSet,\n-    capture_map: CaptureMap\n+    pub moved_variables_set: NodeSet,\n+    pub capture_map: CaptureMap\n }\n \n #[deriving(Clone)]"}, {"sha": "247209539127cf0bdd067e0cbcc973a154522d97", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -75,11 +75,11 @@ The region maps encode information about region relationships.\n   for dynamic checks and/or arbitrary amounts of stack space.\n */\n pub struct RegionMaps {\n-    priv scope_map: RefCell<NodeMap<ast::NodeId>>,\n-    priv var_map: RefCell<NodeMap<ast::NodeId>>,\n-    priv free_region_map: RefCell<HashMap<FreeRegion, Vec<FreeRegion> >>,\n-    priv rvalue_scopes: RefCell<NodeMap<ast::NodeId>>,\n-    priv terminating_scopes: RefCell<HashSet<ast::NodeId>>,\n+    scope_map: RefCell<NodeMap<ast::NodeId>>,\n+    var_map: RefCell<NodeMap<ast::NodeId>>,\n+    free_region_map: RefCell<HashMap<FreeRegion, Vec<FreeRegion> >>,\n+    rvalue_scopes: RefCell<NodeMap<ast::NodeId>>,\n+    terminating_scopes: RefCell<HashSet<ast::NodeId>>,\n }\n \n #[deriving(Clone)]"}, {"sha": "3e1c1828b6c483aa2402f77bfd66863570fb3f78", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -55,8 +55,8 @@ pub type TraitMap = NodeMap<Vec<DefId> >;\n pub type ExportMap2 = @RefCell<NodeMap<Vec<Export2> >>;\n \n pub struct Export2 {\n-    name: ~str,        // The name of the target.\n-    def_id: DefId,     // The definition of the target.\n+    pub name: ~str,        // The name of the target.\n+    pub def_id: DefId,     // The definition of the target.\n }\n \n // This set contains all exported definitions from external crates. The set does\n@@ -73,10 +73,10 @@ pub enum LastPrivate {\n     // and whether the import is in fact used for each.\n     // If the Option<PrivateDep> fields are None, it means there is no defintion\n     // in that namespace.\n-    LastImport{value_priv: Option<PrivateDep>,\n-               value_used: ImportUse,\n-               type_priv: Option<PrivateDep>,\n-               type_used: ImportUse},\n+    LastImport{pub value_priv: Option<PrivateDep>,\n+               pub value_used: ImportUse,\n+               pub type_priv: Option<PrivateDep>,\n+               pub type_used: ImportUse},\n }\n \n pub enum PrivateDep {\n@@ -5408,11 +5408,11 @@ impl<'a> Resolver<'a> {\n }\n \n pub struct CrateMap {\n-    def_map: DefMap,\n-    exp_map2: ExportMap2,\n-    trait_map: TraitMap,\n-    external_exports: ExternalExports,\n-    last_private_map: LastPrivateMap,\n+    pub def_map: DefMap,\n+    pub exp_map2: ExportMap2,\n+    pub trait_map: TraitMap,\n+    pub external_exports: ExternalExports,\n+    pub last_private_map: LastPrivateMap,\n }\n \n /// Entry point to crate resolution."}, {"sha": "c727744b4c76574170236390dfa91aa0615a83a3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -82,7 +82,7 @@ pub enum Repr {\n      * General-case enums: for each case there is a struct, and they\n      * all start with a field for the discriminant.\n      */\n-    General(IntType, Vec<Struct> ),\n+    General(IntType, Vec<Struct>),\n     /**\n      * Two cases distinguished by a nullable pointer: the case with discriminant\n      * `nndiscr` is represented by the struct `nonnull`, where the `ptrfield`th\n@@ -94,16 +94,21 @@ pub enum Repr {\n      * is represented such that `None` is a null pointer and `Some` is the\n      * identity function.\n      */\n-    NullablePointer{ nonnull: Struct, nndiscr: Disr, ptrfield: uint,\n-                     nullfields: Vec<ty::t> }\n+    NullablePointer {\n+        pub nonnull: Struct,\n+        pub nndiscr: Disr,\n+        pub ptrfield: uint,\n+        pub nullfields: Vec<ty::t>,\n+    }\n }\n \n /// For structs, and struct-like parts of anything fancier.\n pub struct Struct {\n-    size: u64,\n-    align: u64,\n-    packed: bool,\n-    fields: Vec<ty::t> }\n+    pub size: u64,\n+    pub align: u64,\n+    pub packed: bool,\n+    pub fields: Vec<ty::t>,\n+}\n \n /**\n  * Convenience for `represent_type`.  There should probably be more or"}, {"sha": "8ac7bd1b66b683638da3a3bc601331f78240ae09", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -413,9 +413,9 @@ pub fn malloc_raw<'a>(bcx: &'a Block<'a>, t: ty::t, heap: heap)\n }\n \n pub struct MallocResult<'a> {\n-    bcx: &'a Block<'a>,\n-    smart_ptr: ValueRef,\n-    body: ValueRef\n+    pub bcx: &'a Block<'a>,\n+    pub smart_ptr: ValueRef,\n+    pub body: ValueRef\n }\n \n // malloc_general_dyn: usefully wraps malloc_raw_dyn; allocates a smart\n@@ -1647,7 +1647,7 @@ pub fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n }\n \n pub struct TransItemVisitor<'a> {\n-    ccx: &'a CrateContext,\n+    pub ccx: &'a CrateContext,\n }\n \n impl<'a> Visitor<()> for TransItemVisitor<'a> {"}, {"sha": "2703ddddc8b7fe32d094a6912929ad57cdf2ef45", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -23,8 +23,8 @@ use std::libc::{c_uint, c_ulonglong, c_char};\n use syntax::codemap::Span;\n \n pub struct Builder<'a> {\n-    llbuilder: BuilderRef,\n-    ccx: &'a CrateContext,\n+    pub llbuilder: BuilderRef,\n+    pub ccx: &'a CrateContext,\n }\n \n // This is a really awful way to get a zero-length c-string, but better (and a"}, {"sha": "9ce277a7de904691b6cd0f261f640271982cb607", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -35,15 +35,15 @@ pub enum ArgKind {\n /// This is borrowed from clang's ABIInfo.h\n #[deriving(Clone)]\n pub struct ArgType {\n-    kind: ArgKind,\n+    pub kind: ArgKind,\n     /// Original LLVM type\n-    ty: Type,\n+    pub ty: Type,\n     /// Coerced LLVM Type\n-    cast: option::Option<Type>,\n+    pub cast: option::Option<Type>,\n     /// Dummy argument, which is emitted before the real argument\n-    pad: option::Option<Type>,\n+    pub pad: option::Option<Type>,\n     /// LLVM attribute of argument\n-    attr: option::Option<Attribute>\n+    pub attr: option::Option<Attribute>\n }\n \n impl ArgType {\n@@ -99,10 +99,10 @@ impl ArgType {\n /// comments are reverse-engineered and may be inaccurate. -NDM\n pub struct FnType {\n     /// The LLVM types of each argument.\n-    arg_tys: Vec<ArgType> ,\n+    pub arg_tys: Vec<ArgType> ,\n \n     /// LLVM return type.\n-    ret_ty: ArgType,\n+    pub ret_ty: ArgType,\n }\n \n pub fn compute_abi_info(ccx: &CrateContext,"}, {"sha": "dae48512ac2a787b1ef454612c55855aac0b2554", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -54,8 +54,8 @@ use syntax::abi::AbiSet;\n use syntax::ast_map;\n \n pub struct MethodData {\n-    llfn: ValueRef,\n-    llself: ValueRef,\n+    pub llfn: ValueRef,\n+    pub llself: ValueRef,\n }\n \n pub enum CalleeData {\n@@ -70,8 +70,8 @@ pub enum CalleeData {\n }\n \n pub struct Callee<'a> {\n-    bcx: &'a Block<'a>,\n-    data: CalleeData\n+    pub bcx: &'a Block<'a>,\n+    pub data: CalleeData\n }\n \n fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {"}, {"sha": "06869d50fc4d657bb3537228552a7f3317e93ea9", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -42,7 +42,7 @@ pub struct CleanupScope<'a> {\n }\n \n pub struct CustomScopeIndex {\n-    priv index: uint\n+    index: uint\n }\n \n pub static EXIT_BREAK: uint = 0;"}, {"sha": "dce4750969d19de2acc563ba3b8e50f1aeacb5f9", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -111,12 +111,12 @@ pub fn gensym_name(name: &str) -> PathElem {\n }\n \n pub struct tydesc_info {\n-    ty: ty::t,\n-    tydesc: ValueRef,\n-    size: ValueRef,\n-    align: ValueRef,\n-    name: ValueRef,\n-    visit_glue: Cell<Option<ValueRef>>,\n+    pub ty: ty::t,\n+    pub tydesc: ValueRef,\n+    pub size: ValueRef,\n+    pub align: ValueRef,\n+    pub name: ValueRef,\n+    pub visit_glue: Cell<Option<ValueRef>>,\n }\n \n /*\n@@ -146,31 +146,31 @@ pub struct tydesc_info {\n  */\n \n pub struct NodeInfo {\n-    id: ast::NodeId,\n-    span: Span,\n+    pub id: ast::NodeId,\n+    pub span: Span,\n }\n \n pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n \n pub struct Stats {\n-    n_static_tydescs: Cell<uint>,\n-    n_glues_created: Cell<uint>,\n-    n_null_glues: Cell<uint>,\n-    n_real_glues: Cell<uint>,\n-    n_fns: Cell<uint>,\n-    n_monos: Cell<uint>,\n-    n_inlines: Cell<uint>,\n-    n_closures: Cell<uint>,\n-    n_llvm_insns: Cell<uint>,\n-    llvm_insns: RefCell<HashMap<~str, uint>>,\n+    pub n_static_tydescs: Cell<uint>,\n+    pub n_glues_created: Cell<uint>,\n+    pub n_null_glues: Cell<uint>,\n+    pub n_real_glues: Cell<uint>,\n+    pub n_fns: Cell<uint>,\n+    pub n_monos: Cell<uint>,\n+    pub n_inlines: Cell<uint>,\n+    pub n_closures: Cell<uint>,\n+    pub n_llvm_insns: Cell<uint>,\n+    pub llvm_insns: RefCell<HashMap<~str, uint>>,\n     // (ident, time-in-ms, llvm-instructions)\n-    fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n+    pub fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n }\n \n pub struct BuilderRef_res {\n-    b: BuilderRef,\n+    pub b: BuilderRef,\n }\n \n impl Drop for BuilderRef_res {\n@@ -192,10 +192,10 @@ pub type ExternMap = HashMap<~str, ValueRef>;\n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n pub struct param_substs {\n-    tys: Vec<ty::t> ,\n-    self_ty: Option<ty::t>,\n-    vtables: Option<typeck::vtable_res>,\n-    self_vtables: Option<typeck::vtable_param_res>\n+    pub tys: Vec<ty::t> ,\n+    pub self_ty: Option<ty::t>,\n+    pub vtables: Option<typeck::vtable_res>,\n+    pub self_vtables: Option<typeck::vtable_param_res>\n }\n \n impl param_substs {\n@@ -228,69 +228,69 @@ pub struct FunctionContext<'a> {\n     // address of the first instruction in the sequence of\n     // instructions for this function that will go in the .text\n     // section of the executable we're generating.\n-    llfn: ValueRef,\n+    pub llfn: ValueRef,\n \n     // The environment argument in a closure.\n-    llenv: Option<ValueRef>,\n+    pub llenv: Option<ValueRef>,\n \n     // The place to store the return value. If the return type is immediate,\n     // this is an alloca in the function. Otherwise, it's the hidden first\n     // parameter to the function. After function construction, this should\n     // always be Some.\n-    llretptr: Cell<Option<ValueRef>>,\n+    pub llretptr: Cell<Option<ValueRef>>,\n \n-    entry_bcx: RefCell<Option<&'a Block<'a>>>,\n+    pub entry_bcx: RefCell<Option<&'a Block<'a>>>,\n \n-    // These elements: \"hoisted basic blocks\" containing\n+    // These pub elements: \"hoisted basic blocks\" containing\n     // administrative activities that have to happen in only one place in\n     // the function, due to LLVM's quirks.\n     // A marker for the place where we want to insert the function's static\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n-    alloca_insert_pt: Cell<Option<ValueRef>>,\n-    llreturn: Cell<Option<BasicBlockRef>>,\n+    pub alloca_insert_pt: Cell<Option<ValueRef>>,\n+    pub llreturn: Cell<Option<BasicBlockRef>>,\n \n     // The a value alloca'd for calls to upcalls.rust_personality. Used when\n     // outputting the resume instruction.\n-    personality: Cell<Option<ValueRef>>,\n+    pub personality: Cell<Option<ValueRef>>,\n \n     // True if the caller expects this fn to use the out pointer to\n     // return. Either way, your code should write into llretptr, but if\n     // this value is false, llretptr will be a local alloca.\n-    caller_expects_out_pointer: bool,\n+    pub caller_expects_out_pointer: bool,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: RefCell<NodeMap<LvalueDatum>>,\n+    pub llargs: RefCell<NodeMap<LvalueDatum>>,\n \n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: RefCell<NodeMap<LvalueDatum>>,\n+    pub lllocals: RefCell<NodeMap<LvalueDatum>>,\n \n     // Same as above, but for closure upvars\n-    llupvars: RefCell<NodeMap<ValueRef>>,\n+    pub llupvars: RefCell<NodeMap<ValueRef>>,\n \n     // The NodeId of the function, or -1 if it doesn't correspond to\n     // a user-defined function.\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    param_substs: Option<@param_substs>,\n+    pub param_substs: Option<@param_substs>,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n-    span: Option<Span>,\n+    pub span: Option<Span>,\n \n     // The arena that blocks are allocated from.\n-    block_arena: &'a TypedArena<Block<'a>>,\n+    pub block_arena: &'a TypedArena<Block<'a>>,\n \n     // This function's enclosing crate context.\n-    ccx: &'a CrateContext,\n+    pub ccx: &'a CrateContext,\n \n     // Used and maintained by the debuginfo module.\n-    debug_context: debuginfo::FunctionDebugContext,\n+    pub debug_context: debuginfo::FunctionDebugContext,\n \n     // Cleanup scopes.\n-    scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n+    pub scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n }\n \n impl<'a> FunctionContext<'a> {\n@@ -405,20 +405,20 @@ pub struct Block<'a> {\n     // block to the function pointed to by llfn.  We insert\n     // instructions into that block by way of this block context.\n     // The block pointing to this one in the function's digraph.\n-    llbb: BasicBlockRef,\n-    terminated: Cell<bool>,\n-    unreachable: Cell<bool>,\n+    pub llbb: BasicBlockRef,\n+    pub terminated: Cell<bool>,\n+    pub unreachable: Cell<bool>,\n \n     // Is this block part of a landing pad?\n-    is_lpad: bool,\n+    pub is_lpad: bool,\n \n     // AST node-id associated with this block, if any. Used for\n     // debugging purposes only.\n-    opt_node_id: Option<ast::NodeId>,\n+    pub opt_node_id: Option<ast::NodeId>,\n \n     // The function context for the function to which this block is\n     // attached.\n-    fcx: &'a FunctionContext<'a>,\n+    pub fcx: &'a FunctionContext<'a>,\n }\n \n impl<'a> Block<'a> {\n@@ -493,8 +493,8 @@ impl<'a> Block<'a> {\n }\n \n pub struct Result<'a> {\n-    bcx: &'a Block<'a>,\n-    val: ValueRef\n+    pub bcx: &'a Block<'a>,\n+    pub val: ValueRef\n }\n \n pub fn rslt<'a>(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> {\n@@ -744,8 +744,8 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct mono_id_ {\n-    def: ast::DefId,\n-    params: Vec<mono_param_id> }\n+    pub def: ast::DefId,\n+    pub params: Vec<mono_param_id> }\n \n pub type mono_id = @mono_id_;\n "}, {"sha": "a7fed4fa60d3fe728a57342006d5b971aa7f72d2", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -37,39 +37,39 @@ use syntax::ast;\n use syntax::parse::token::InternedString;\n \n pub struct CrateContext {\n-    llmod: ModuleRef,\n-    llcx: ContextRef,\n-    metadata_llmod: ModuleRef,\n-    td: TargetData,\n-    tn: TypeNames,\n-    externs: RefCell<ExternMap>,\n-    intrinsics: HashMap<&'static str, ValueRef>,\n-    item_vals: RefCell<NodeMap<ValueRef>>,\n-    exp_map2: resolve::ExportMap2,\n-    reachable: NodeSet,\n-    item_symbols: RefCell<NodeMap<~str>>,\n-    link_meta: LinkMeta,\n-    drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n-    tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n+    pub llmod: ModuleRef,\n+    pub llcx: ContextRef,\n+    pub metadata_llmod: ModuleRef,\n+    pub td: TargetData,\n+    pub tn: TypeNames,\n+    pub externs: RefCell<ExternMap>,\n+    pub intrinsics: HashMap<&'static str, ValueRef>,\n+    pub item_vals: RefCell<NodeMap<ValueRef>>,\n+    pub exp_map2: resolve::ExportMap2,\n+    pub reachable: NodeSet,\n+    pub item_symbols: RefCell<NodeMap<~str>>,\n+    pub link_meta: LinkMeta,\n+    pub drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n+    pub tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n     // Set when running emit_tydescs to enforce that no more tydescs are\n     // created.\n-    finished_tydescs: Cell<bool>,\n+    pub finished_tydescs: Cell<bool>,\n     // Track mapping of external ids to local items imported for inlining\n-    external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n+    pub external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n     // Backwards version of the `external` map (inlined items to where they\n     // came from)\n-    external_srcs: RefCell<NodeMap<ast::DefId>>,\n+    pub external_srcs: RefCell<NodeMap<ast::DefId>>,\n     // A set of static items which cannot be inlined into other crates. This\n     // will pevent in IIItem() structures from being encoded into the metadata\n     // that is generated\n-    non_inlineable_statics: RefCell<NodeSet>,\n+    pub non_inlineable_statics: RefCell<NodeSet>,\n     // Cache instances of monomorphized functions\n-    monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n-    monomorphizing: RefCell<DefIdMap<uint>>,\n+    pub monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n+    pub monomorphizing: RefCell<DefIdMap<uint>>,\n     // Cache generated vtables\n-    vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n+    pub vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n     // Cache of constant strings,\n-    const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n+    pub const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n \n     // Reverse-direction for const ptrs cast from globals.\n     // Key is an int, cast from a ValueRef holding a *T,\n@@ -79,36 +79,36 @@ pub struct CrateContext {\n     // when we ptrcast, and we have to ptrcast during translation\n     // of a [T] const because we form a slice, a [*T,int] pair, not\n     // a pointer to an LLVM array type.\n-    const_globals: RefCell<HashMap<int, ValueRef>>,\n+    pub const_globals: RefCell<HashMap<int, ValueRef>>,\n \n     // Cache of emitted const values\n-    const_values: RefCell<NodeMap<ValueRef>>,\n+    pub const_values: RefCell<NodeMap<ValueRef>>,\n \n     // Cache of external const values\n-    extern_const_values: RefCell<DefIdMap<ValueRef>>,\n+    pub extern_const_values: RefCell<DefIdMap<ValueRef>>,\n \n-    impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n+    pub impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n \n     // Cache of closure wrappers for bare fn's.\n-    closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n+    pub closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n \n-    lltypes: RefCell<HashMap<ty::t, Type>>,\n-    llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n-    adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n-    symbol_hasher: RefCell<Sha256>,\n-    type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n-    all_llvm_symbols: RefCell<HashSet<~str>>,\n-    tcx: ty::ctxt,\n-    maps: astencode::Maps,\n-    stats: @Stats,\n-    int_type: Type,\n-    opaque_vec_type: Type,\n-    builder: BuilderRef_res,\n+    pub lltypes: RefCell<HashMap<ty::t, Type>>,\n+    pub llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n+    pub adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n+    pub symbol_hasher: RefCell<Sha256>,\n+    pub type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n+    pub all_llvm_symbols: RefCell<HashSet<~str>>,\n+    pub tcx: ty::ctxt,\n+    pub maps: astencode::Maps,\n+    pub stats: @Stats,\n+    pub int_type: Type,\n+    pub opaque_vec_type: Type,\n+    pub builder: BuilderRef_res,\n     // Set when at least one function uses GC. Needed so that\n     // decl_gc_metadata knows whether to link to the module metadata, which\n     // is not emitted by LLVM's GC pass when no functions use GC.\n-    uses_gc: bool,\n-    dbg_cx: Option<debuginfo::CrateDebugContext>,\n+    pub uses_gc: bool,\n+    pub dbg_cx: Option<debuginfo::CrateDebugContext>,\n }\n \n impl CrateContext {"}, {"sha": "9f48e4714d60dbdbd0b40709c83b8b24bfbee864", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -41,18 +41,18 @@ use syntax::codemap::Span;\n pub struct Datum<K> {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `kind` below.\n-    val: ValueRef,\n+    pub val: ValueRef,\n \n     /// The rust type of the value.\n-    ty: ty::t,\n+    pub ty: ty::t,\n \n     /// Indicates whether this is by-ref or by-value.\n-    kind: K,\n+    pub kind: K,\n }\n \n pub struct DatumBlock<'a, K> {\n-    bcx: &'a Block<'a>,\n-    datum: Datum<K>,\n+    pub bcx: &'a Block<'a>,\n+    pub datum: Datum<K>,\n }\n \n pub enum Expr {\n@@ -70,7 +70,7 @@ pub enum Expr {\n pub struct Lvalue;\n \n pub struct Rvalue {\n-    mode: RvalueMode\n+    pub mode: RvalueMode\n }\n \n pub fn Rvalue(m: RvalueMode) -> Rvalue {"}, {"sha": "8236d6efb29a85fbb195ef1eff66136ecba9229b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -173,15 +173,15 @@ static DW_ATE_unsigned_char: c_uint = 0x08;\n \n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct CrateDebugContext {\n-    priv llcontext: ContextRef,\n-    priv builder: DIBuilderRef,\n-    priv current_debug_location: Cell<DebugLocation>,\n-    priv created_files: RefCell<HashMap<~str, DIFile>>,\n-    priv created_types: RefCell<HashMap<uint, DIType>>,\n-    priv namespace_map: RefCell<HashMap<Vec<ast::Name> , @NamespaceTreeNode>>,\n+    llcontext: ContextRef,\n+    builder: DIBuilderRef,\n+    current_debug_location: Cell<DebugLocation>,\n+    created_files: RefCell<HashMap<~str, DIFile>>,\n+    created_types: RefCell<HashMap<uint, DIType>>,\n+    namespace_map: RefCell<HashMap<Vec<ast::Name> , @NamespaceTreeNode>>,\n     // This collection is used to assert that composite types (structs, enums, ...) have their\n     // members only set once:\n-    priv composite_types_completed: RefCell<HashSet<DIType>>,\n+    composite_types_completed: RefCell<HashSet<DIType>>,\n }\n \n impl CrateDebugContext {"}, {"sha": "4aac50c5355af9c10c09d45a9b43b3c306e7aae9", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -143,11 +143,11 @@ pub fn make_drop_glue_unboxed<'a>(\n }\n \n pub struct VecTypes {\n-    vec_ty: ty::t,\n-    unit_ty: ty::t,\n-    llunit_ty: Type,\n-    llunit_size: ValueRef,\n-    llunit_alloc_size: u64\n+    pub vec_ty: ty::t,\n+    pub unit_ty: ty::t,\n+    pub llunit_ty: Type,\n+    pub llunit_size: ValueRef,\n+    pub llunit_alloc_size: u64\n }\n \n impl VecTypes {"}, {"sha": "ca01c0532fc39f1cac3d73bdd7d10ce168886aba", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -26,7 +26,7 @@ use std::libc::{c_uint};\n \n #[deriving(Clone, Eq, Show)]\n pub struct Type {\n-    priv rf: TypeRef\n+    rf: TypeRef\n }\n \n macro_rules! ty ("}, {"sha": "f66a393a50f9d98c48b8323897aadafcff26a0b6", "filename": "src/librustc/middle/trans/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -152,7 +152,7 @@ impl Use {\n \n /// Iterator for the users of a value\n pub struct Users {\n-    priv next: Option<Use>\n+    next: Option<Use>\n }\n \n impl Iterator<Value> for Users {"}, {"sha": "8a616496f064d05fb2b3fc3ac103d8e3f44d779a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 143, "deletions": 142, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -63,8 +63,8 @@ pub static INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct field {\n-    ident: ast::Ident,\n-    mt: mt\n+    pub ident: ast::Ident,\n+    pub mt: mt\n }\n \n #[deriving(Clone)]\n@@ -75,16 +75,16 @@ pub enum MethodContainer {\n \n #[deriving(Clone)]\n pub struct Method {\n-    ident: ast::Ident,\n-    generics: ty::Generics,\n-    fty: BareFnTy,\n-    explicit_self: ast::ExplicitSelf_,\n-    vis: ast::Visibility,\n-    def_id: ast::DefId,\n-    container: MethodContainer,\n+    pub ident: ast::Ident,\n+    pub generics: ty::Generics,\n+    pub fty: BareFnTy,\n+    pub explicit_self: ast::ExplicitSelf_,\n+    pub vis: ast::Visibility,\n+    pub def_id: ast::DefId,\n+    pub container: MethodContainer,\n \n     // If this method is provided, we need to know where it came from\n-    provided_source: Option<ast::DefId>\n+    pub provided_source: Option<ast::DefId>\n }\n \n impl Method {\n@@ -118,14 +118,15 @@ impl Method {\n }\n \n pub struct Impl {\n-    did: DefId,\n-    ident: Ident,\n-    methods: Vec<@Method> }\n+    pub did: DefId,\n+    pub ident: Ident,\n+    pub methods: Vec<@Method>,\n+}\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct mt {\n-    ty: t,\n-    mutbl: ast::Mutability,\n+    pub ty: t,\n+    pub mutbl: ast::Mutability,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash, Show)]\n@@ -142,18 +143,18 @@ pub enum TraitStore {\n }\n \n pub struct field_ty {\n-    name: Name,\n-    id: DefId,\n-    vis: ast::Visibility,\n+    pub name: Name,\n+    pub id: DefId,\n+    pub vis: ast::Visibility,\n }\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n #[deriving(Eq, TotalEq, Hash)]\n pub struct creader_cache_key {\n-    cnum: CrateNum,\n-    pos: uint,\n-    len: uint\n+    pub cnum: CrateNum,\n+    pub pos: uint,\n+    pub len: uint\n }\n \n pub type creader_cache = RefCell<HashMap<creader_cache_key, t>>;\n@@ -191,9 +192,9 @@ pub enum ast_ty_to_ty_cache_entry {\n \n #[deriving(Clone, Eq, Decodable, Encodable)]\n pub struct ItemVariances {\n-    self_param: Option<Variance>,\n-    type_params: OwnedSlice<Variance>,\n-    region_params: OwnedSlice<Variance>\n+    pub self_param: Option<Variance>,\n+    pub type_params: OwnedSlice<Variance>,\n+    pub region_params: OwnedSlice<Variance>\n }\n \n #[deriving(Clone, Eq, Decodable, Encodable, Show)]\n@@ -216,8 +217,8 @@ pub enum AutoAdjustment {\n \n #[deriving(Decodable, Encodable)]\n pub struct AutoDerefRef {\n-    autoderefs: uint,\n-    autoref: Option<AutoRef>\n+    pub autoderefs: uint,\n+    pub autoref: Option<AutoRef>\n }\n \n #[deriving(Decodable, Encodable, Eq, Show)]\n@@ -247,112 +248,112 @@ pub enum AutoRef {\n pub struct ctxt {\n     // Specifically use a speedy hash algorithm for this hash map, it's used\n     // quite often.\n-    interner: RefCell<FnvHashMap<intern_key, ~t_box_>>,\n-    next_id: Cell<uint>,\n-    sess: Session,\n-    def_map: resolve::DefMap,\n+    pub interner: RefCell<FnvHashMap<intern_key, ~t_box_>>,\n+    pub next_id: Cell<uint>,\n+    pub sess: Session,\n+    pub def_map: resolve::DefMap,\n \n-    named_region_map: resolve_lifetime::NamedRegionMap,\n+    pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n-    region_maps: middle::region::RegionMaps,\n+    pub region_maps: middle::region::RegionMaps,\n \n     // Stores the types for various nodes in the AST.  Note that this table\n     // is not guaranteed to be populated until after typeck.  See\n     // typeck::check::fn_ctxt for details.\n-    node_types: node_type_table,\n+    pub node_types: node_type_table,\n \n     // Stores the type parameters which were substituted to obtain the type\n     // of this node.  This only applies to nodes that refer to entities\n     // parameterized by type parameters, such as generic fns, types, or\n     // other items.\n-    node_type_substs: RefCell<NodeMap<Vec<t>>>,\n+    pub node_type_substs: RefCell<NodeMap<Vec<t>>>,\n \n     // Maps from a method to the method \"descriptor\"\n-    methods: RefCell<DefIdMap<@Method>>,\n+    pub methods: RefCell<DefIdMap<@Method>>,\n \n     // Maps from a trait def-id to a list of the def-ids of its methods\n-    trait_method_def_ids: RefCell<DefIdMap<@Vec<DefId> >>,\n+    pub trait_method_def_ids: RefCell<DefIdMap<@Vec<DefId> >>,\n \n     // A cache for the trait_methods() routine\n-    trait_methods_cache: RefCell<DefIdMap<@Vec<@Method> >>,\n-\n-    impl_trait_cache: RefCell<DefIdMap<Option<@ty::TraitRef>>>,\n-\n-    trait_refs: RefCell<NodeMap<@TraitRef>>,\n-    trait_defs: RefCell<DefIdMap<@TraitDef>>,\n-\n-    map: ast_map::Map,\n-    intrinsic_defs: RefCell<DefIdMap<t>>,\n-    freevars: RefCell<freevars::freevar_map>,\n-    tcache: type_cache,\n-    rcache: creader_cache,\n-    short_names_cache: RefCell<HashMap<t, ~str>>,\n-    needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n-    tc_cache: RefCell<HashMap<uint, TypeContents>>,\n-    ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry>>,\n-    enum_var_cache: RefCell<DefIdMap<@Vec<@VariantInfo> >>,\n-    ty_param_defs: RefCell<NodeMap<TypeParameterDef>>,\n-    adjustments: RefCell<NodeMap<@AutoAdjustment>>,\n-    normalized_cache: RefCell<HashMap<t, t>>,\n-    lang_items: @middle::lang_items::LanguageItems,\n+    pub trait_methods_cache: RefCell<DefIdMap<@Vec<@Method> >>,\n+\n+    pub impl_trait_cache: RefCell<DefIdMap<Option<@ty::TraitRef>>>,\n+\n+    pub trait_refs: RefCell<NodeMap<@TraitRef>>,\n+    pub trait_defs: RefCell<DefIdMap<@TraitDef>>,\n+\n+    pub map: ast_map::Map,\n+    pub intrinsic_defs: RefCell<DefIdMap<t>>,\n+    pub freevars: RefCell<freevars::freevar_map>,\n+    pub tcache: type_cache,\n+    pub rcache: creader_cache,\n+    pub short_names_cache: RefCell<HashMap<t, ~str>>,\n+    pub needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n+    pub tc_cache: RefCell<HashMap<uint, TypeContents>>,\n+    pub ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry>>,\n+    pub enum_var_cache: RefCell<DefIdMap<@Vec<@VariantInfo> >>,\n+    pub ty_param_defs: RefCell<NodeMap<TypeParameterDef>>,\n+    pub adjustments: RefCell<NodeMap<@AutoAdjustment>>,\n+    pub normalized_cache: RefCell<HashMap<t, t>>,\n+    pub lang_items: @middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n-    provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n-    supertraits: RefCell<DefIdMap<@Vec<@TraitRef> >>,\n+    pub provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n+    pub supertraits: RefCell<DefIdMap<@Vec<@TraitRef> >>,\n \n     // Maps from def-id of a type or region parameter to its\n     // (inferred) variance.\n-    item_variance_map: RefCell<DefIdMap<@ItemVariances>>,\n+    pub item_variance_map: RefCell<DefIdMap<@ItemVariances>>,\n \n     // A mapping from the def ID of an enum or struct type to the def ID\n     // of the method that implements its destructor. If the type is not\n     // present in this map, it does not have a destructor. This map is\n     // populated during the coherence phase of typechecking.\n-    destructor_for_type: RefCell<DefIdMap<ast::DefId>>,\n+    pub destructor_for_type: RefCell<DefIdMap<ast::DefId>>,\n \n     // A method will be in this list if and only if it is a destructor.\n-    destructors: RefCell<DefIdSet>,\n+    pub destructors: RefCell<DefIdSet>,\n \n     // Maps a trait onto a list of impls of that trait.\n-    trait_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n+    pub trait_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n \n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n+    pub inherent_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n \n     // Maps a def_id of an impl to an Impl structure.\n     // Note that this contains all of the impls that we know about,\n     // including ones in other crates. It's not clear that this is the best\n     // way to do it.\n-    impls: RefCell<DefIdMap<@Impl>>,\n+    pub impls: RefCell<DefIdMap<@Impl>>,\n \n     // Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n     // present in this set can be warned about.\n-    used_unsafe: RefCell<NodeSet>,\n+    pub used_unsafe: RefCell<NodeSet>,\n \n     // Set of nodes which mark locals as mutable which end up getting used at\n     // some point. Local variable definitions not in this set can be warned\n     // about.\n-    used_mut_nodes: RefCell<NodeSet>,\n+    pub used_mut_nodes: RefCell<NodeSet>,\n \n     // vtable resolution information for impl declarations\n-    impl_vtables: typeck::impl_vtable_map,\n+    pub impl_vtables: typeck::impl_vtable_map,\n \n     // The set of external nominal types whose implementations have been read.\n     // This is used for lazy resolution of methods.\n-    populated_external_types: RefCell<DefIdSet>,\n+    pub populated_external_types: RefCell<DefIdSet>,\n \n     // The set of external traits whose implementations have been read. This\n     // is used for lazy resolution of traits.\n-    populated_external_traits: RefCell<DefIdSet>,\n+    pub populated_external_traits: RefCell<DefIdSet>,\n \n     // Borrows\n-    upvar_borrow_map: RefCell<UpvarBorrowMap>,\n+    pub upvar_borrow_map: RefCell<UpvarBorrowMap>,\n \n     // These two caches are used by const_eval when decoding external statics\n     // and variants that are found.\n-    extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n-    extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n+    pub extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n+    pub extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n }\n \n pub enum tbox_flag {\n@@ -363,17 +364,17 @@ pub enum tbox_flag {\n     has_ty_err = 16,\n     has_ty_bot = 32,\n \n-    // a meta-flag: subst may be required if the type has parameters, a self\n+    // a meta-pub flag: subst may be required if the type has parameters, a self\n     // type, or references bound regions\n     needs_subst = 1 | 2 | 8\n }\n \n pub type t_box = &'static t_box_;\n \n pub struct t_box_ {\n-    sty: sty,\n-    id: uint,\n-    flags: uint,\n+    pub sty: sty,\n+    pub id: uint,\n+    pub flags: uint,\n }\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n@@ -385,7 +386,7 @@ enum t_opaque {}\n \n #[allow(raw_pointer_deriving)]\n #[deriving(Clone, Eq, TotalEq, Hash)]\n-pub struct t { priv inner: *t_opaque }\n+pub struct t { inner: *t_opaque }\n \n impl fmt::Show for t {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -417,19 +418,19 @@ pub fn type_id(t: t) -> uint { get(t).id }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct BareFnTy {\n-    purity: ast::Purity,\n-    abis: AbiSet,\n-    sig: FnSig\n+    pub purity: ast::Purity,\n+    pub abis: AbiSet,\n+    pub sig: FnSig\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct ClosureTy {\n-    purity: ast::Purity,\n-    sigil: ast::Sigil,\n-    onceness: ast::Onceness,\n-    region: Region,\n-    bounds: BuiltinBounds,\n-    sig: FnSig,\n+    pub purity: ast::Purity,\n+    pub sigil: ast::Sigil,\n+    pub onceness: ast::Onceness,\n+    pub region: Region,\n+    pub bounds: BuiltinBounds,\n+    pub sig: FnSig,\n }\n \n /**\n@@ -446,16 +447,16 @@ pub struct ClosureTy {\n  */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct FnSig {\n-    binder_id: ast::NodeId,\n-    inputs: Vec<t>,\n-    output: t,\n-    variadic: bool\n+    pub binder_id: ast::NodeId,\n+    pub inputs: Vec<t>,\n+    pub output: t,\n+    pub variadic: bool\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct param_ty {\n-    idx: uint,\n-    def_id: DefId\n+    pub idx: uint,\n+    pub def_id: DefId\n }\n \n /// Representation of regions:\n@@ -502,8 +503,8 @@ pub enum Region {\n  */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct UpvarId {\n-    var_id: ast::NodeId,\n-    closure_expr_id: ast::NodeId,\n+    pub var_id: ast::NodeId,\n+    pub closure_expr_id: ast::NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n@@ -603,8 +604,8 @@ pub enum BorrowKind {\n  */\n #[deriving(Eq, Clone)]\n pub struct UpvarBorrow {\n-    kind: BorrowKind,\n-    region: ty::Region,\n+    pub kind: BorrowKind,\n+    pub region: ty::Region,\n }\n \n pub type UpvarBorrowMap = HashMap<UpvarId, UpvarBorrow>;\n@@ -621,8 +622,8 @@ impl Region {\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n pub struct FreeRegion {\n-    scope_id: NodeId,\n-    bound_region: BoundRegion\n+    pub scope_id: NodeId,\n+    pub bound_region: BoundRegion\n }\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n@@ -669,9 +670,9 @@ pub enum RegionSubsts {\n  *   always substituted away to the implementing type for a trait. */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct substs {\n-    self_ty: Option<ty::t>,\n-    tps: Vec<t>,\n-    regions: RegionSubsts,\n+    pub self_ty: Option<ty::t>,\n+    pub tps: Vec<t>,\n+    pub regions: RegionSubsts,\n }\n \n mod primitives {\n@@ -759,17 +760,17 @@ pub enum sty {\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct TyTrait {\n-    def_id: DefId,\n-    substs: substs,\n-    store: TraitStore,\n-    mutability: ast::Mutability,\n-    bounds: BuiltinBounds\n+    pub def_id: DefId,\n+    pub substs: substs,\n+    pub store: TraitStore,\n+    pub mutability: ast::Mutability,\n+    pub bounds: BuiltinBounds\n }\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct TraitRef {\n-    def_id: DefId,\n-    substs: substs\n+    pub def_id: DefId,\n+    pub substs: substs\n }\n \n #[deriving(Clone, Eq)]\n@@ -788,8 +789,8 @@ pub enum terr_vstore_kind {\n \n #[deriving(Clone, Show)]\n pub struct expected_found<T> {\n-    expected: T,\n-    found: T\n+    pub expected: T,\n+    pub found: T\n }\n \n // Data structures used in type unification\n@@ -830,8 +831,8 @@ pub enum type_err {\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct ParamBounds {\n-    builtin_bounds: BuiltinBounds,\n-    trait_bounds: Vec<@TraitRef> }\n+    pub builtin_bounds: BuiltinBounds,\n+    pub trait_bounds: Vec<@TraitRef> }\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n@@ -878,7 +879,7 @@ pub struct FloatVid(uint);\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct RegionVid {\n-    id: uint\n+    pub id: uint\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n@@ -983,28 +984,28 @@ impl fmt::Show for IntVarValue {\n \n #[deriving(Clone)]\n pub struct TypeParameterDef {\n-    ident: ast::Ident,\n-    def_id: ast::DefId,\n-    bounds: @ParamBounds,\n-    default: Option<ty::t>\n+    pub ident: ast::Ident,\n+    pub def_id: ast::DefId,\n+    pub bounds: @ParamBounds,\n+    pub default: Option<ty::t>\n }\n \n #[deriving(Encodable, Decodable, Clone)]\n pub struct RegionParameterDef {\n-    name: ast::Name,\n-    def_id: ast::DefId,\n+    pub name: ast::Name,\n+    pub def_id: ast::DefId,\n }\n \n /// Information about the type/lifetime parameters associated with an item.\n /// Analogous to ast::Generics.\n #[deriving(Clone)]\n pub struct Generics {\n     /// List of type parameters declared on the item.\n-    type_param_defs: Rc<Vec<TypeParameterDef> >,\n+    pub type_param_defs: Rc<Vec<TypeParameterDef>>,\n \n     /// List of region parameters declared on the item.\n     /// For a fn or method, only includes *early-bound* lifetimes.\n-    region_param_defs: Rc<Vec<RegionParameterDef> >,\n+    pub region_param_defs: Rc<Vec<RegionParameterDef>>,\n }\n \n impl Generics {\n@@ -1037,13 +1038,13 @@ pub struct ParameterEnvironment {\n     /// In general, this means converting from bound parameters to\n     /// free parameters. Since we currently represent bound/free type\n     /// parameters in the same way, this only has an affect on regions.\n-    free_substs: ty::substs,\n+    pub free_substs: ty::substs,\n \n     /// Bound on the Self parameter\n-    self_param_bound: Option<@TraitRef>,\n+    pub self_param_bound: Option<@TraitRef>,\n \n     /// Bounds on each numbered type parameter\n-    type_param_bounds: Vec<ParamBounds> ,\n+    pub type_param_bounds: Vec<ParamBounds> ,\n }\n \n /// A polytype.\n@@ -1058,20 +1059,20 @@ pub struct ParameterEnvironment {\n ///   region `&self` or to (unsubstituted) ty_param types\n #[deriving(Clone)]\n pub struct ty_param_bounds_and_ty {\n-    generics: Generics,\n-    ty: t\n+    pub generics: Generics,\n+    pub ty: t\n }\n \n /// As `ty_param_bounds_and_ty` but for a trait ref.\n pub struct TraitDef {\n-    generics: Generics,\n-    bounds: BuiltinBounds,\n-    trait_ref: @ty::TraitRef,\n+    pub generics: Generics,\n+    pub bounds: BuiltinBounds,\n+    pub trait_ref: @ty::TraitRef,\n }\n \n pub struct ty_param_substs_and_ty {\n-    substs: ty::substs,\n-    ty: ty::t\n+    pub substs: ty::substs,\n+    pub ty: ty::t\n }\n \n pub type type_cache = RefCell<DefIdMap<ty_param_bounds_and_ty>>;\n@@ -1841,7 +1842,7 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n  * a type than to think about what is *not* contained within a type.\n  */\n pub struct TypeContents {\n-    bits: u64\n+    pub bits: u64\n }\n \n macro_rules! def_type_content_sets(\n@@ -3175,8 +3176,8 @@ impl AutoRef {\n }\n \n pub struct ParamsTy {\n-    params: Vec<t>,\n-    ty: t\n+    pub params: Vec<t>,\n+    pub ty: t\n }\n \n pub fn expr_ty_params_and_ty(cx: &ctxt,\n@@ -3850,13 +3851,13 @@ pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> {\n // Enum information\n #[deriving(Clone)]\n pub struct VariantInfo {\n-    args: Vec<t>,\n-    arg_names: Option<Vec<ast::Ident> >,\n-    ctor_ty: t,\n-    name: ast::Ident,\n-    id: ast::DefId,\n-    disr_val: Disr,\n-    vis: Visibility\n+    pub args: Vec<t>,\n+    pub arg_names: Option<Vec<ast::Ident> >,\n+    pub ctor_ty: t,\n+    pub name: ast::Ident,\n+    pub id: ast::DefId,\n+    pub disr_val: Disr,\n+    pub vis: Visibility\n }\n \n impl VariantInfo {"}, {"sha": "7eae2ce3d336461337e8a027f829e3f50d267e2c", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -219,8 +219,8 @@ pub fn super_fold_trait_store<T:TypeFolder>(this: &mut T,\n // Some sample folders\n \n pub struct BottomUpFolder<'a> {\n-    tcx: &'a ty::ctxt,\n-    fldop: 'a |ty::t| -> ty::t,\n+    pub tcx: &'a ty::ctxt,\n+    pub fldop: 'a |ty::t| -> ty::t,\n }\n \n impl<'a> TypeFolder for BottomUpFolder<'a> {"}, {"sha": "b6f81d94418e128d25f5f0608aa7136ca8c6c1b6", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -103,8 +103,8 @@ pub fn check_match(fcx: &FnCtxt,\n }\n \n pub struct pat_ctxt<'a> {\n-    fcx: &'a FnCtxt<'a>,\n-    map: PatIdMap,\n+    pub fcx: &'a FnCtxt<'a>,\n+    pub map: PatIdMap,\n }\n \n pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,"}, {"sha": "9aa98ee5f8e8c256cce98546e72bc4111496052d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -178,9 +178,9 @@ pub enum FnKind {\n \n #[deriving(Clone)]\n pub struct PurityState {\n-    def: ast::NodeId,\n-    purity: ast::Purity,\n-    priv from_fn: bool\n+    pub def: ast::NodeId,\n+    pub purity: ast::Purity,\n+    from_fn: bool\n }\n \n impl PurityState {"}, {"sha": "67cf14050ed732f0f80cbd569ca2e3f2abac9c8a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -65,8 +65,8 @@ use syntax::visit::Visitor;\n /// A vtable context includes an inference context, a crate context, and a\n /// callback function to call in case of type error.\n pub struct VtableContext<'a> {\n-    infcx: &'a infer::InferCtxt<'a>,\n-    param_env: &'a ty::ParameterEnvironment,\n+    pub infcx: &'a infer::InferCtxt<'a>,\n+    pub param_env: &'a ty::ParameterEnvironment,\n }\n \n impl<'a> VtableContext<'a> {"}, {"sha": "af84e915f70403d4d4901903a0020065ac2b39ba", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -331,9 +331,9 @@ pub trait Combine {\n }\n \n pub struct CombineFields<'a> {\n-    infcx: &'a InferCtxt<'a>,\n-    a_is_expected: bool,\n-    trace: TypeTrace,\n+    pub infcx: &'a InferCtxt<'a>,\n+    pub a_is_expected: bool,\n+    pub trace: TypeTrace,\n }\n \n pub fn expected_found<C:Combine,T>("}, {"sha": "41edc26e803d3118dc1b0d005cf2dc08e691f641", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -75,26 +75,26 @@ pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n pub type CoerceResult = cres<Option<@ty::AutoAdjustment>>;\n \n pub struct InferCtxt<'a> {\n-    tcx: &'a ty::ctxt,\n+    pub tcx: &'a ty::ctxt,\n \n     // We instantiate ValsAndBindings with bounds<ty::t> because the\n     // types that might instantiate a general type variable have an\n     // order, represented by its upper and lower bounds.\n-    ty_var_bindings: RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>>,\n-    ty_var_counter: Cell<uint>,\n+    pub ty_var_bindings: RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>>,\n+    pub ty_var_counter: Cell<uint>,\n \n     // Map from integral variable to the kind of integer it represents\n-    int_var_bindings: RefCell<ValsAndBindings<ty::IntVid,\n+    pub int_var_bindings: RefCell<ValsAndBindings<ty::IntVid,\n                                               Option<IntVarValue>>>,\n-    int_var_counter: Cell<uint>,\n+    pub int_var_counter: Cell<uint>,\n \n     // Map from floating variable to the kind of float it represents\n-    float_var_bindings: RefCell<ValsAndBindings<ty::FloatVid,\n+    pub float_var_bindings: RefCell<ValsAndBindings<ty::FloatVid,\n                                                 Option<ast::FloatTy>>>,\n-    float_var_counter: Cell<uint>,\n+    pub float_var_counter: Cell<uint>,\n \n     // For region variables.\n-    region_vars: RegionVarBindings<'a>,\n+    pub region_vars: RegionVarBindings<'a>,\n }\n \n /// Why did we require that the two types be related?"}, {"sha": "03b2ebcc2459c00b63918d2b8189a6047392ffc2", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -104,8 +104,8 @@ pub enum RegionResolutionError {\n /// 'a and 'b together inside a SameRegions struct\n #[deriving(Clone)]\n pub struct SameRegions {\n-    scope_id: ast::NodeId,\n-    regions: Vec<BoundRegion>\n+    pub scope_id: ast::NodeId,\n+    pub regions: Vec<BoundRegion>\n }\n \n impl SameRegions {"}, {"sha": "2ee4f8fedd25b8711e5cb857fa14e39464ef3265", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -26,14 +26,14 @@ pub enum VarValue<V, T> {\n }\n \n pub struct ValsAndBindings<V, T> {\n-    vals: SmallIntMap<VarValue<V, T>>,\n-    bindings: Vec<(V, VarValue<V, T>)> ,\n+    pub vals: SmallIntMap<VarValue<V, T>>,\n+    pub bindings: Vec<(V, VarValue<V, T>)> ,\n }\n \n pub struct Node<V, T> {\n-    root: V,\n-    possible_types: T,\n-    rank: uint,\n+    pub root: V,\n+    pub possible_types: T,\n+    pub rank: uint,\n }\n \n pub trait UnifyVid<T> {"}, {"sha": "efb556ecea6984e59eb2753c6247c2a53ea6f64b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -108,49 +108,49 @@ pub enum MethodOrigin {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct MethodParam {\n     // the trait containing the method to be invoked\n-    trait_id: ast::DefId,\n+    pub trait_id: ast::DefId,\n \n     // index of the method to be invoked amongst the trait's methods\n-    method_num: uint,\n+    pub method_num: uint,\n \n     // index of the type parameter (from those that are in scope) that is\n     // the type of the receiver\n-    param_num: param_index,\n+    pub param_num: param_index,\n \n     // index of the bound for this type parameter which specifies the trait\n-    bound_num: uint,\n+    pub bound_num: uint,\n }\n \n // details for a method invoked with a receiver whose type is an object\n #[deriving(Clone, Encodable, Decodable)]\n pub struct MethodObject {\n     // the (super)trait containing the method to be invoked\n-    trait_id: ast::DefId,\n+    pub trait_id: ast::DefId,\n \n     // the actual base trait id of the object\n-    object_trait_id: ast::DefId,\n+    pub object_trait_id: ast::DefId,\n \n     // index of the method to be invoked amongst the trait's methods\n-    method_num: uint,\n+    pub method_num: uint,\n \n     // index into the actual runtime vtable.\n     // the vtable is formed by concatenating together the method lists of\n     // the base object trait and all supertraits;  this is the index into\n     // that vtable\n-    real_index: uint,\n+    pub real_index: uint,\n }\n \n #[deriving(Clone)]\n pub struct MethodCallee {\n-    origin: MethodOrigin,\n-    ty: ty::t,\n-    substs: ty::substs\n+    pub origin: MethodOrigin,\n+    pub ty: ty::t,\n+    pub substs: ty::substs\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash, Show)]\n pub struct MethodCall {\n-    expr_id: ast::NodeId,\n-    autoderef: u32\n+    pub expr_id: ast::NodeId,\n+    pub autoderef: u32\n }\n \n impl MethodCall {\n@@ -224,9 +224,9 @@ pub type vtable_map = @RefCell<FnvHashMap<MethodCall, vtable_res>>;\n #[deriving(Clone)]\n pub struct impl_res {\n     // resolutions for any bounded params on the trait definition\n-    trait_vtables: vtable_res,\n+    pub trait_vtables: vtable_res,\n     // resolutions for the trait /itself/ (and for supertraits)\n-    self_vtables: vtable_param_res\n+    pub self_vtables: vtable_param_res\n }\n \n impl Repr for impl_res {"}, {"sha": "944b1e237f981ecb1860dee0fd4db4702b896d88", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fa141cd71a3b817ebc1b7c82522818f5280360/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=89fa141cd71a3b817ebc1b7c82522818f5280360", "patch": "@@ -473,7 +473,7 @@ impl Engine256 {\n \n /// The SHA-256 hash algorithm\n pub struct Sha256 {\n-    priv engine: Engine256\n+    engine: Engine256\n }\n \n impl Sha256 {"}]}