{"sha": "46766974c73ff17a3b2cd4f2fb2cb06b7845ded4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzY2OTc0YzczZmYxN2EzYjJjZDRmMmZiMmNiMDZiNzg0NWRlZDQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-20T00:55:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-20T00:55:34Z"}, "message": "doc: mention moved and copied types. cc: #4217", "tree": {"sha": "043835eb7fa817523ebbd4d6d814234cf7fd1fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043835eb7fa817523ebbd4d6d814234cf7fd1fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4", "html_url": "https://github.com/rust-lang/rust/commit/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb66fce3671f28a880ac7e8b2bfd8d76fe0eb4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb66fce3671f28a880ac7e8b2bfd8d76fe0eb4db", "html_url": "https://github.com/rust-lang/rust/commit/bb66fce3671f28a880ac7e8b2bfd8d76fe0eb4db"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "b521eb79835724759cc46b5b0483a9fb7469ad7b", "filename": "doc/rust.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/46766974c73ff17a3b2cd4f2fb2cb06b7845ded4/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=46766974c73ff17a3b2cd4f2fb2cb06b7845ded4", "patch": "@@ -1465,6 +1465,14 @@ when evaluated in an _rvalue context_, it denotes the value held _in_ that memor\n When an rvalue is used in lvalue context, a temporary un-named lvalue is created and used instead.\n A temporary's lifetime equals the largest lifetime of any borrowed pointer that points to it.\n \n+#### Moved and copied types\n+\n+When a [local variable](#memory-slots) is used as an [rvalue](#lvalues-rvalues-and-temporaries)\n+the variable will either be [moved](#move-expressions) or [copied](#copy-expressions),\n+depending on its type.\n+For types that contain mutable fields or [owning pointers](#owning-pointers), the variable is moved.\n+All other types are copied.\n+\n \n ### Literal expressions\n \n@@ -1787,7 +1795,7 @@ y.z <-> b.c;\n An _assignment expression_ consists of an [lvalue](#lvalues-rvalues-and-temporaries) expression followed by an\n equals sign (`=`) and an [rvalue](#lvalues-rvalues-and-temporaries) expression.\n \n-Evaluating an assignment expression copies the expression on the right-hand side and stores it in the location on the left-hand side.\n+Evaluating an assignment expression [either copies or moves](#moved-and-copied-types) its right-hand operand to its left-hand operand.\n \n ~~~~\n # let mut x = 0;\n@@ -1860,7 +1868,7 @@ copy.\n as are raw and borrowed pointers.\n [Owned boxes](#pointer-types), [owned vectors](#vector-types) and similar owned types are deep-copied.\n \n-Since the binary [assignment operator](#assignment-expressions) `=` performs a copy implicitly,\n+Since the binary [assignment operator](#assignment-expressions) `=` performs a copy or move implicitly,\n the unary copy operator is typically only used to cause an argument to a function to be copied and passed by value.\n \n An example of a copy expression:\n@@ -1884,13 +1892,17 @@ move_expr : \"move\" expr ;\n ~~~~~~~~\n \n A _unary move expression_ is similar to a [unary copy](#unary-copy-expressions) expression,\n-except that it can only be applied to an [lvalue](#lvalues-rvalues-and-temporaries),\n+except that it can only be applied to a [local variable](#memory-slots),\n and it performs a _move_ on its operand, rather than a copy.\n That is, the memory location denoted by its operand is de-initialized after evaluation,\n and the resulting value is a shallow copy of the operand,\n even if the operand is an [owning type](#type-kinds).\n \n \n+> **Note:** In future versions of Rust, `move` may be removed as a separate operator;\n+> moves are now [automatically performed](#moved-and-copied-types) for most cases `move` would be appropriate.\n+\n+\n ### Call expressions\n \n ~~~~~~~~ {.abnf .gram}"}]}