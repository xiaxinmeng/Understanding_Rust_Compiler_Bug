{"sha": "9c8037c43070ab93bb66d1351901d717319e79c2", "node_id": "C_kwDOAAsO6NoAKDljODAzN2M0MzA3MGFiOTNiYjY2ZDEzNTE5MDFkNzE3MzE5ZTc5YzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T19:53:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T20:24:41Z"}, "message": "Deduce closure signature from TAIT supertraits", "tree": {"sha": "b0ccec9570ea61e22f8b6150ca36cefb24ed9041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ccec9570ea61e22f8b6150ca36cefb24ed9041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c8037c43070ab93bb66d1351901d717319e79c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8037c43070ab93bb66d1351901d717319e79c2", "html_url": "https://github.com/rust-lang/rust/commit/9c8037c43070ab93bb66d1351901d717319e79c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c8037c43070ab93bb66d1351901d717319e79c2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033cf9880d00cb1632c152888a8a96e26021c047", "url": "https://api.github.com/repos/rust-lang/rust/commits/033cf9880d00cb1632c152888a8a96e26021c047", "html_url": "https://github.com/rust-lang/rust/commit/033cf9880d00cb1632c152888a8a96e26021c047"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "42a8102c8e0ede907c84eafa593994668ec8c156", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9c8037c43070ab93bb66d1351901d717319e79c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c8037c43070ab93bb66d1351901d717319e79c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=9c8037c43070ab93bb66d1351901d717319e79c2", "patch": "@@ -173,34 +173,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n-            ty::Opaque(def_id, substs) => {\n-                let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n-                let sig =\n-                    bounds.subst_iter_copied(self.tcx, substs).find_map(|(pred, span)| match pred\n-                        .kind()\n-                        .skip_binder()\n-                    {\n-                        ty::PredicateKind::Projection(proj_predicate) => self\n-                            .deduce_sig_from_projection(\n-                                Some(span),\n-                                pred.kind().rebind(proj_predicate),\n-                            ),\n-                        _ => None,\n-                    });\n-\n-                let kind = bounds\n-                    .0\n-                    .iter()\n-                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(tp) => {\n-                            self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n-                        }\n-                        _ => None,\n-                    })\n-                    .fold(None, |best, cur| Some(best.map_or(cur, |best| cmp::min(best, cur))));\n-                trace!(?sig, ?kind);\n-                (sig, kind)\n-            }\n+            ty::Opaque(def_id, substs) => self.deduce_signature_from_predicates(\n+                self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n+            ),\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n                     let pb = pb.with_self_ty(self.tcx, self.tcx.types.trait_object_dummy_self);\n@@ -211,7 +186,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .and_then(|did| self.tcx.fn_trait_kind_from_lang_item(did));\n                 (sig, kind)\n             }\n-            ty::Infer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n+            ty::Infer(ty::TyVar(vid)) => self.deduce_signature_from_predicates(\n+                self.obligations_for_self_ty(vid).map(|obl| (obl.predicate, obl.cause.span)),\n+            ),\n             ty::FnPtr(sig) => {\n                 let expected_sig = ExpectedSig { cause_span: None, sig };\n                 (Some(expected_sig), Some(ty::ClosureKind::Fn))\n@@ -220,19 +197,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn deduce_expectations_from_obligations(\n+    fn deduce_signature_from_predicates(\n         &self,\n-        expected_vid: ty::TyVid,\n+        predicates: impl DoubleEndedIterator<Item = (ty::Predicate<'tcx>, Span)>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         let mut expected_sig = None;\n         let mut expected_kind = None;\n \n-        for obligation in traits::elaborate_obligations(\n+        for obligation in traits::elaborate_predicates_with_span(\n             self.tcx,\n             // Reverse the obligations here, since `elaborate_*` uses a stack,\n             // and we want to keep inference generally in the same order of\n             // the registered obligations.\n-            self.obligations_for_self_ty(expected_vid).rev().collect(),\n+            predicates.rev(),\n         ) {\n             debug!(?obligation.predicate);\n             let bound_predicate = obligation.predicate.kind();"}, {"sha": "d2c3479203573a74397ee21fd36d9c23c5fd849a", "filename": "src/test/ui/impl-trait/deduce-signature-from-supertrait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c8037c43070ab93bb66d1351901d717319e79c2/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c8037c43070ab93bb66d1351901d717319e79c2/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs?ref=9c8037c43070ab93bb66d1351901d717319e79c2", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait SuperExpectation: Fn(i32) {}\n+\n+impl<T: Fn(i32)> SuperExpectation for T {}\n+\n+type Foo = impl SuperExpectation;\n+\n+fn main() {\n+    let _: Foo = |x| {\n+        let _ = x.to_string();\n+    };\n+}"}]}