{"sha": "e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "node_id": "C_kwDOAAsO6NoAKGUwMjljMWZkNDNiMTMwNjM1NWUyNzNkZWU5NGZmMGE1ZTZiMWVmM2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-23T09:50:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T09:50:16Z"}, "message": "Rollup merge of #101293 - compiler-errors:lt-is-actually-char, r=estebank\n\nRecover when unclosed char literal is parsed as a lifetime in some positions\n\nFixes #101278", "tree": {"sha": "1f2539afbb39106f8e038c7ac0d5882923e6679b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2539afbb39106f8e038c7ac0d5882923e6679b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVQ5YCRBK7hj4Ov3rIwAAISsIAEdXpO1cOHvcc9avpBLbIXgA\nYemvdgpx/6HjB2DxmUP6bl4YDvec7c6WGc+U5K+8uJyJZPjkuFyxrtRvwxBVo6Ki\nhyWvtV4gc+gd5BGDX+SD6eHk8DRgMIax5Sfg9Gv1MeZF8g8Q8zqSl46vBidhuz7q\nLTq7jqEJOmEl6GmyScqcPDNQ+6gfhx0nLU2agz47VmPTlnnqUW2N/MmZf1JCRoih\nzMjyw11VF+daQZa/r9LQnRH/TmyrmEyNPh5XwTankmYBo5B8pD/i1fed9l37OgY1\n36leTFLHk17QNW6+O1+2U19TJbZCVuEbjapo/TI2JS+wLkE64vCej4ZiYSiPlwU=\n=4vg0\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f2539afbb39106f8e038c7ac0d5882923e6679b\nparent faab68eb29121f25b577b50e2e00e33bafc60a36\nparent 0270b50eb093304c563e1def677ef38a72ac53c1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666518616 +0530\ncommitter GitHub <noreply@github.com> 1666518616 +0530\n\nRollup merge of #101293 - compiler-errors:lt-is-actually-char, r=estebank\n\nRecover when unclosed char literal is parsed as a lifetime in some positions\n\nFixes #101278\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "html_url": "https://github.com/rust-lang/rust/commit/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faab68eb29121f25b577b50e2e00e33bafc60a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/faab68eb29121f25b577b50e2e00e33bafc60a36", "html_url": "https://github.com/rust-lang/rust/commit/faab68eb29121f25b577b50e2e00e33bafc60a36"}, {"sha": "0270b50eb093304c563e1def677ef38a72ac53c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0270b50eb093304c563e1def677ef38a72ac53c1", "html_url": "https://github.com/rust-lang/rust/commit/0270b50eb093304c563e1def677ef38a72ac53c1"}], "stats": {"total": 232, "additions": 209, "deletions": 23}, "files": [{"sha": "0963ea71f80236ac51c1e7bc70781f069ea8a2ec", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -463,6 +463,9 @@ pub enum StashKey {\n     UnderscoreForArrayLengths,\n     EarlySyntaxWarning,\n     CallIntoMethod,\n+    /// When an invalid lifetime e.g. `'2` should be reinterpreted\n+    /// as a char literal in the parser\n+    LifetimeIsChar,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "462bce16ad717d424c9a16185f9405d41f19646b", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -3,7 +3,9 @@ use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult, StashKey,\n+};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::Cursor;\n use rustc_lexer::{Base, DocStyle, RawStrError};\n@@ -203,7 +205,10 @@ impl<'a> StringReader<'a> {\n                     // this is necessary.\n                     let lifetime_name = self.str_from(start);\n                     if starts_with_number {\n-                        self.err_span_(start, self.pos, \"lifetimes cannot start with a number\");\n+                        let span = self.mk_sp(start, self.pos);\n+                        let mut diag = self.sess.struct_err(\"lifetimes cannot start with a number\");\n+                        diag.set_span(span);\n+                        diag.stash(span, StashKey::LifetimeIsChar);\n                     }\n                     let ident = Symbol::intern(lifetime_name);\n                     token::Lifetime(ident)"}, {"sha": "98520a446a62f995de95dc087b56a3ad8b7e9951", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -42,8 +42,10 @@ use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast::{ClosureBinder, StmtKind};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::IntoDiagnostic;\n-use rustc_errors::{Applicability, Diagnostic, PResult};\n+use rustc_errors::{\n+    Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult,\n+    StashKey,\n+};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -1513,11 +1515,11 @@ impl<'a> Parser<'a> {\n     /// Parse `'label: $expr`. The label is already parsed.\n     fn parse_labeled_expr(\n         &mut self,\n-        label: Label,\n+        label_: Label,\n         mut consume_colon: bool,\n     ) -> PResult<'a, P<Expr>> {\n-        let lo = label.ident.span;\n-        let label = Some(label);\n+        let lo = label_.ident.span;\n+        let label = Some(label_);\n         let ate_colon = self.eat(&token::Colon);\n         let expr = if self.eat_keyword(kw::While) {\n             self.parse_while_expr(label, lo)\n@@ -1529,6 +1531,19 @@ impl<'a> Parser<'a> {\n             || self.token.is_whole_block()\n         {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default)\n+        } else if !ate_colon\n+            && (matches!(self.token.kind, token::CloseDelim(_) | token::Comma)\n+                || self.token.is_op())\n+        {\n+            let lit = self.recover_unclosed_char(label_.ident, |self_| {\n+                self_.sess.create_err(UnexpectedTokenAfterLabel {\n+                    span: self_.token.span,\n+                    remove_label: None,\n+                    enclose_in_block: None,\n+                })\n+            });\n+            consume_colon = false;\n+            Ok(self.mk_expr(lo, ExprKind::Lit(lit)))\n         } else if !ate_colon\n             && (self.check_noexpect(&TokenKind::Comma) || self.check_noexpect(&TokenKind::Gt))\n         {\n@@ -1603,6 +1618,39 @@ impl<'a> Parser<'a> {\n         Ok(expr)\n     }\n \n+    /// Emit an error when a char is parsed as a lifetime because of a missing quote\n+    pub(super) fn recover_unclosed_char(\n+        &mut self,\n+        lifetime: Ident,\n+        err: impl FnOnce(&mut Self) -> DiagnosticBuilder<'a, ErrorGuaranteed>,\n+    ) -> ast::Lit {\n+        if let Some(mut diag) =\n+            self.sess.span_diagnostic.steal_diagnostic(lifetime.span, StashKey::LifetimeIsChar)\n+        {\n+            diag.span_suggestion_verbose(\n+                lifetime.span.shrink_to_hi(),\n+                \"add `'` to close the char literal\",\n+                \"'\",\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n+        } else {\n+            err(self)\n+                .span_suggestion_verbose(\n+                    lifetime.span.shrink_to_hi(),\n+                    \"add `'` to close the char literal\",\n+                    \"'\",\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+        }\n+        ast::Lit {\n+            token_lit: token::Lit::new(token::LitKind::Char, lifetime.name, None),\n+            kind: ast::LitKind::Char(lifetime.name.as_str().chars().next().unwrap_or('_')),\n+            span: lifetime.span,\n+        }\n+    }\n+\n     /// Recover on the syntax `do catch { ... }` suggesting `try { ... }` instead.\n     fn recover_do_catch(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n@@ -1728,7 +1776,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {\n-        self.parse_opt_lit().ok_or_else(|| {\n+        self.parse_opt_lit().ok_or(()).or_else(|()| {\n             if let token::Interpolated(inner) = &self.token.kind {\n                 let expr = match inner.as_ref() {\n                     token::NtExpr(expr) => Some(expr),\n@@ -1740,12 +1788,22 @@ impl<'a> Parser<'a> {\n                         let mut err = InvalidInterpolatedExpression { span: self.token.span }\n                             .into_diagnostic(&self.sess.span_diagnostic);\n                         err.downgrade_to_delayed_bug();\n-                        return err;\n+                        return Err(err);\n                     }\n                 }\n             }\n-            let msg = format!(\"unexpected token: {}\", super::token_descr(&self.token));\n-            self.struct_span_err(self.token.span, &msg)\n+            let token = self.token.clone();\n+            let err = |self_: &mut Self| {\n+                let msg = format!(\"unexpected token: {}\", super::token_descr(&token));\n+                self_.struct_span_err(token.span, &msg)\n+            };\n+            // On an error path, eagerly consider a lifetime to be an unclosed character lit\n+            if self.token.is_lifetime() {\n+                let lt = self.expect_lifetime();\n+                Ok(self.recover_unclosed_char(lt.ident, err))\n+            } else {\n+                Err(err(self))\n+            }\n         })\n     }\n "}, {"sha": "52c11b4e35f34372b59e21ac27037cc38e9a7269", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -402,6 +402,25 @@ impl<'a> Parser<'a> {\n             } else {\n                 PatKind::Path(qself, path)\n             }\n+        } else if matches!(self.token.kind, token::Lifetime(_))\n+            // In pattern position, we're totally fine with using \"next token isn't colon\"\n+            // as a heuristic. We could probably just always try to recover if it's a lifetime,\n+            // because we never have `'a: label {}` in a pattern position anyways, but it does\n+            // keep us from suggesting something like `let 'a: Ty = ..` => `let 'a': Ty = ..`\n+            && !self.look_ahead(1, |token| matches!(token.kind, token::Colon))\n+        {\n+            // Recover a `'a` as a `'a'` literal\n+            let lt = self.expect_lifetime();\n+            let lit = self.recover_unclosed_char(lt.ident, |self_| {\n+                let expected = expected.unwrap_or(\"pattern\");\n+                let msg =\n+                    format!(\"expected {}, found {}\", expected, super::token_descr(&self_.token));\n+\n+                let mut err = self_.struct_span_err(self_.token.span, &msg);\n+                err.span_label(self_.token.span, format!(\"expected {}\", expected));\n+                err\n+            });\n+            PatKind::Lit(self.mk_expr(lo, ExprKind::Lit(lit)))\n         } else {\n             // Try to parse everything else as literal with optional minus\n             match self.parse_literal_maybe_minus() {\n@@ -799,6 +818,7 @@ impl<'a> Parser<'a> {\n                 || t.kind == token::Dot // e.g. `.5` for recovery;\n                 || t.can_begin_literal_maybe_minus() // e.g. `42`.\n                 || t.is_whole_expr()\n+                || t.is_lifetime() // recover `'a` instead of `'a'`\n             })\n     }\n "}, {"sha": "274245f1a465f33d807d57590a08396cf3ee9fcf", "filename": "src/test/ui/parser/issues/issue-93282.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -12,4 +12,5 @@ fn foo() {\n     let x = 1;\n     bar('y, x);\n     //~^ ERROR expected\n+    //~| ERROR mismatched types\n }"}, {"sha": "c6140bb821e48b985390c2ececf2adeeb7f9b152", "filename": "src/test/ui/parser/issues/issue-93282.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -3,6 +3,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     f<'a,>\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     f<'a',>\n+   |         +\n \n error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `}`, or an operator, found `,`\n   --> $DIR/issue-93282.rs:2:9\n@@ -20,6 +25,26 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     bar('y, x);\n    |           ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     bar('y', x);\n+   |           +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-93282.rs:13:9\n+   |\n+LL |     bar('y, x);\n+   |     --- ^^ expected `usize`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-93282.rs:7:4\n+   |\n+LL | fn bar(a: usize, b: usize) -> usize {\n+   |    ^^^ --------\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "183da603da43480a47051d4839e21cc282a09e64", "filename": "src/test/ui/parser/label-is-actually-char.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+    let c = 'a;\n+    //~^ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    //~| HELP add `'` to close the char literal\n+    match c {\n+        'a'..='b => {}\n+        //~^ ERROR unexpected token: `'b`\n+        //~| HELP add `'` to close the char literal\n+        _ => {}\n+    }\n+    let x = ['a, 'b];\n+    //~^ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    //~| ERROR expected `while`, `for`, `loop` or `{` after a label\n+    //~| HELP add `'` to close the char literal\n+    //~| HELP add `'` to close the char literal\n+}"}, {"sha": "28c8d2ada3adbb56dd1fc12ca34941ad0379c1c0", "filename": "src/test/ui/parser/label-is-actually-char.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-is-actually-char.stderr?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -0,0 +1,46 @@\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/label-is-actually-char.rs:2:15\n+   |\n+LL |     let c = 'a;\n+   |               ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     let c = 'a';\n+   |               +\n+\n+error: unexpected token: `'b`\n+  --> $DIR/label-is-actually-char.rs:6:15\n+   |\n+LL |         'a'..='b => {}\n+   |               ^^\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |         'a'..='b' => {}\n+   |                 +\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/label-is-actually-char.rs:11:16\n+   |\n+LL |     let x = ['a, 'b];\n+   |                ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     let x = ['a', 'b];\n+   |                +\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/label-is-actually-char.rs:11:20\n+   |\n+LL |     let x = ['a, 'b];\n+   |                    ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     let x = ['a, 'b'];\n+   |                    +\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "7c1bcb7263171d9b0d06d98feef52bae6501593f", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -1,3 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-lifetime.rs:6:20\n+   |\n+LL |     let x: usize = \"\";\n+   |            -----   ^^ expected `usize`, found `&str`\n+   |            |\n+   |            expected due to this\n+\n error: lifetimes cannot start with a number\n   --> $DIR/numeric-lifetime.rs:1:10\n    |\n@@ -10,14 +18,6 @@ error: lifetimes cannot start with a number\n LL | struct S<'1> { s: &'1 usize }\n    |                    ^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/numeric-lifetime.rs:6:20\n-   |\n-LL |     let x: usize = \"\";\n-   |            -----   ^^ expected `usize`, found `&str`\n-   |            |\n-   |            expected due to this\n-\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "5b90e905a64a2b55e29659bf54c4666edecd8c3c", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -23,11 +23,13 @@ fn main() {\n     //~^ ERROR expected one of\n     //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n     //~| ERROR expected\n+    //~| HELP add `'` to close the char literal\n \n     f<'_>();\n     //~^ comparison operators cannot be chained\n     //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n     //~| ERROR expected\n+    //~| HELP add `'` to close the char literal\n \n     let _ = f<u8>;\n     //~^ ERROR comparison operators cannot be chained"}, {"sha": "52e201c435c16d5f37ce44d08b761996e3acca38", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e029c1fd43b1306355e273dee94ff0a5e6b1ef3d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=e029c1fd43b1306355e273dee94ff0a5e6b1ef3d", "patch": "@@ -58,6 +58,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     let _ = f<'_, i8>();\n    |                 ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     let _ = f<'_', i8>();\n+   |                 +\n \n error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, or an operator, found `,`\n   --> $DIR/require-parens-for-chained-comparison.rs:22:17\n@@ -71,13 +76,18 @@ LL |     let _ = f::<'_, i8>();\n    |              ++\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/require-parens-for-chained-comparison.rs:27:9\n+  --> $DIR/require-parens-for-chained-comparison.rs:28:9\n    |\n LL |     f<'_>();\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: add `'` to close the char literal\n+   |\n+LL |     f<'_'>();\n+   |         +\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:27:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:28:6\n    |\n LL |     f<'_>();\n    |      ^  ^\n@@ -88,7 +98,7 @@ LL |     f::<'_>();\n    |      ++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:32:14\n+  --> $DIR/require-parens-for-chained-comparison.rs:34:14\n    |\n LL |     let _ = f<u8>;\n    |              ^  ^"}]}