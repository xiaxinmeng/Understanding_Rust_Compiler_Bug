{"sha": "47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "node_id": "C_kwDOAAsO6NoAKDQ3ZmFkMGVkNzMyOGYxYTM5ZGVmZTliMGU4NTdmZWM3ZTA0MmQ2YWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-21T17:37:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T17:37:56Z"}, "message": "Merge #11071 #11090\n\n11071: feat: Build and publish pre-release Code extension versions r=matklad a=lnicola\n\nCloses #11026\n\n11090: internal: Deduplicate lower ctx hygiene field r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e81f3b0a83bf0c9b161fee863a04c31f85707a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81f3b0a83bf0c9b161fee863a04c31f85707a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwhD1CRBK7hj4Ov3rIwAAz2cIAABaEuzE9qDG/HBKUJ1bJSZ9\n9bT2U05U+4id5R1Ir/0RnfuS5KuOhoq9UwIDdiPyj5NIM9Rq183Xix5bJM4xpEwl\nX39db/qOyiEdLPIRcqVoPufrs+oQzYx+u0S9HH9sUrENNTyWWavlBNssDd22QXTl\nGl+FUq2oVukfS+1DudRmggs0Mf/7ue4DCCju86yXhc+oNdVrTUD4BWnE9zcNAC/A\nANPMuNsXJz3geId8d4vJTzRrqOiKqHqh2YL+u7DTBkx805wZ11t6IoaUXAu/zpIV\nyt8a3yyPjlXVv+1wMLi+D6anGluKf5DN3x+E17C+v4/cOiSsoEzmxOiaQzJzKfI=\n=W+k7\n-----END PGP SIGNATURE-----\n", "payload": "tree e81f3b0a83bf0c9b161fee863a04c31f85707a05\nparent a9793783bc534aef69687ef0b3675d5dc3272824\nparent 89cecff2bd1748f9044792592806603dedf21290\nparent e76e0e843df1293dca40baa3790bfc7db993008d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640108276 +0000\ncommitter GitHub <noreply@github.com> 1640108276 +0000\n\nMerge #11071 #11090\n\n11071: feat: Build and publish pre-release Code extension versions r=matklad a=lnicola\n\nCloses #11026\n\n11090: internal: Deduplicate lower ctx hygiene field r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "html_url": "https://github.com/rust-lang/rust/commit/47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9793783bc534aef69687ef0b3675d5dc3272824", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9793783bc534aef69687ef0b3675d5dc3272824", "html_url": "https://github.com/rust-lang/rust/commit/a9793783bc534aef69687ef0b3675d5dc3272824"}, {"sha": "89cecff2bd1748f9044792592806603dedf21290", "url": "https://api.github.com/repos/rust-lang/rust/commits/89cecff2bd1748f9044792592806603dedf21290", "html_url": "https://github.com/rust-lang/rust/commit/89cecff2bd1748f9044792592806603dedf21290"}, {"sha": "e76e0e843df1293dca40baa3790bfc7db993008d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76e0e843df1293dca40baa3790bfc7db993008d", "html_url": "https://github.com/rust-lang/rust/commit/e76e0e843df1293dca40baa3790bfc7db993008d"}], "stats": {"total": 127, "additions": 81, "deletions": 46}, "files": [{"sha": "ad647d045c77ae3f5f2b45ddcbc2d12825d97b7c", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -100,14 +100,25 @@ jobs:\n       - run: npm ci\n         working-directory: editors/code\n \n-      - run: npx vsce package -o \"../../dist/rust-analyzer-${{ matrix.code-target }}.vsix\" --target ${{ matrix.code-target }}\n+      - name: Package Extension (release)\n+        if: github.ref == 'refs/heads/release'\n+        run: npx vsce package -o \"../../dist/rust-analyzer-${{ matrix.code-target }}.vsix\" --target ${{ matrix.code-target }}\n+        working-directory: editors/code\n+\n+      - name: Package Extension (nightly)\n+        if: github.ref != 'refs/heads/release'\n+        run: npx vsce package -o \"../../dist/rust-analyzer-${{ matrix.code-target }}.vsix\" --target ${{ matrix.code-target }} --pre-release\n         working-directory: editors/code\n \n       - if: matrix.target == 'x86_64-unknown-linux-gnu'\n         run: rm -rf editors/code/server\n \n-      - if: matrix.target == 'x86_64-unknown-linux-gnu'\n-        run: npx vsce package -o ../../dist/rust-analyzer.vsix\n+      - if: matrix.target == 'x86_64-unknown-linux-gnu' && github.ref == 'refs/heads/release'\n+        run: npx vsce package -o ../../dist/rust-analyzer-no-server.vsix\n+        working-directory: editors/code\n+\n+      - if: matrix.target == 'x86_64-unknown-linux-gnu' && github.ref != 'refs/heads/release'\n+        run: npx vsce package -o ../../dist/rust-analyzer-no-server.vsix --pre-release\n         working-directory: editors/code\n \n       - name: Run analysis-stats on rust-analyzer\n@@ -151,7 +162,14 @@ jobs:\n       - run: npm ci\n         working-directory: editors/code\n \n-      - run: npx vsce package -o \"../../dist/rust-analyzer-alpine-x64.vsix\" --target alpine-x64\n+      - name: Publish Extension (release)\n+        if: github.ref == 'refs/heads/release'\n+        run: npx vsce package -o \"../../dist/rust-analyzer-alpine-x64.vsix\" --target alpine-x64\n+        working-directory: editors/code\n+\n+      - name: Publish Extension (nightly)\n+        if: github.ref != 'refs/heads/release'\n+        run: npx vsce package -o \"../../dist/rust-analyzer-alpine-x64.vsix\" --target alpine-x64 --pre-release\n         working-directory: editors/code\n \n       - run: rm -rf editors/code/server\n@@ -223,11 +241,19 @@ jobs:\n           name: ${{ env.TAG }}\n           token: ${{ secrets.GITHUB_TOKEN }}\n \n+      - run: rm dist/rust-analyzer-no-server.vsix\n+\n       - run: npm ci\n         working-directory: ./editors/code\n \n-      - name: Publish Extension\n+      - name: Publish Extension (release)\n         if: github.ref == 'refs/heads/release'\n         working-directory: ./editors/code\n         # token from https://dev.azure.com/rust-analyzer/\n         run: npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ../../dist/rust-analyzer-*.vsix\n+\n+      - name: Publish Extension (nightly)\n+        # check specifically for nightly in case someone triggers a release on a feature branch\n+        if: github.ref == 'refs/heads/nightly'\n+        working-directory: ./editors/code\n+        run: npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ../../dist/rust-analyzer-*.vsix --pre-release"}, {"sha": "5e91a3df0a2b84d052b2747b90caad62834e8b54", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -72,29 +72,33 @@ impl ImportMap {\n \n         let mut import_map = collect_import_map(db, krate);\n \n-        let mut importables = import_map.map.iter().collect::<Vec<_>>();\n-        importables.sort_by_cached_key(|(_, import_info)| fst_path(&import_info.path));\n+        let mut importables = import_map\n+            .map\n+            .iter()\n+            .map(|(item, info)| (item, fst_path(&info.path)))\n+            .collect::<Vec<_>>();\n+        importables.sort_by(|(_, fst_path), (_, fst_path2)| fst_path.cmp(fst_path2));\n \n         // Build the FST, taking care not to insert duplicate values.\n \n         let mut builder = fst::MapBuilder::memory();\n         let mut last_batch_start = 0;\n \n         for idx in 0..importables.len() {\n-            let key = fst_path(&importables[last_batch_start].1.path);\n-            if let Some((_, next_import_info)) = importables.get(idx + 1) {\n-                if key == fst_path(&next_import_info.path) {\n+            let key = &importables[last_batch_start].1;\n+            if let Some((_, fst_path)) = importables.get(idx + 1) {\n+                if key == fst_path {\n                     continue;\n                 }\n             }\n \n-            builder.insert(key, last_batch_start as u64).unwrap();\n+            let _ = builder.insert(key, last_batch_start as u64);\n \n             last_batch_start = idx + 1;\n         }\n \n-        import_map.fst = fst::Map::new(builder.into_inner().unwrap()).unwrap();\n-        import_map.importables = importables.iter().map(|(item, _)| **item).collect();\n+        import_map.fst = builder.into_map();\n+        import_map.importables = importables.iter().map(|&(&item, _)| item).collect();\n \n         Arc::new(import_map)\n     }"}, {"sha": "45b374f338b9c09150c8a29f5212e7fc7a995ec1", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -56,6 +56,7 @@ use la_arena::{Arena, Idx, IdxRange, RawIdx};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n+use stdx::never;\n use syntax::{ast, match_ast, SyntaxKind};\n \n use crate::{\n@@ -109,18 +110,17 @@ impl ItemTree {\n             Some(node) => node,\n             None => return Default::default(),\n         };\n-        if syntax.kind() == SyntaxKind::ERROR {\n+        if never!(syntax.kind() == SyntaxKind::ERROR) {\n             // FIXME: not 100% sure why these crop up, but return an empty tree to avoid a panic\n             return Default::default();\n         }\n \n-        let hygiene = Hygiene::new(db.upcast(), file_id);\n-        let ctx = lower::Ctx::new(db, hygiene.clone(), file_id);\n+        let ctx = lower::Ctx::new(db, file_id);\n         let mut top_attrs = None;\n         let mut item_tree = match_ast! {\n             match syntax {\n                 ast::SourceFile(file) => {\n-                    top_attrs = Some(RawAttrs::new(db, &file, &hygiene));\n+                    top_attrs = Some(RawAttrs::new(db, &file, ctx.hygiene()));\n                     ctx.lower_module_items(&file)\n                 },\n                 ast::MacroItems(items) => {\n@@ -147,8 +147,7 @@ impl ItemTree {\n     fn block_item_tree(db: &dyn DefDatabase, block: BlockId) -> Arc<ItemTree> {\n         let loc = db.lookup_intern_block(block);\n         let block = loc.ast_id.to_node(db.upcast());\n-        let hygiene = Hygiene::new(db.upcast(), loc.ast_id.file_id);\n-        let ctx = lower::Ctx::new(db, hygiene, loc.ast_id.file_id);\n+        let ctx = lower::Ctx::new(db, loc.ast_id.file_id);\n         Arc::new(ctx.lower_block(&block))\n     }\n "}, {"sha": "f31fcf0d97b8db786a04025f6b5357255bca591e", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -19,24 +19,26 @@ fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n pub(super) struct Ctx<'a> {\n     db: &'a dyn DefDatabase,\n     tree: ItemTree,\n-    hygiene: Hygiene,\n     source_ast_id_map: Arc<AstIdMap>,\n     body_ctx: crate::body::LowerCtx<'a>,\n     forced_visibility: Option<RawVisibilityId>,\n }\n \n impl<'a> Ctx<'a> {\n-    pub(super) fn new(db: &'a dyn DefDatabase, hygiene: Hygiene, file: HirFileId) -> Self {\n+    pub(super) fn new(db: &'a dyn DefDatabase, file: HirFileId) -> Self {\n         Self {\n             db,\n             tree: ItemTree::default(),\n-            hygiene,\n             source_ast_id_map: db.ast_id_map(file),\n             body_ctx: crate::body::LowerCtx::new(db, file),\n             forced_visibility: None,\n         }\n     }\n \n+    pub(super) fn hygiene(&self) -> &Hygiene {\n+        self.body_ctx.hygiene()\n+    }\n+\n     pub(super) fn lower_module_items(mut self, item_owner: &dyn HasModuleItem) -> ItemTree {\n         self.tree.top_level =\n             item_owner.items().flat_map(|item| self.lower_mod_item(&item)).collect();\n@@ -88,7 +90,7 @@ impl<'a> Ctx<'a> {\n     }\n \n     fn lower_mod_item(&mut self, item: &ast::Item) -> Option<ModItem> {\n-        let attrs = RawAttrs::new(self.db, item, &self.hygiene);\n+        let attrs = RawAttrs::new(self.db, item, self.hygiene());\n         let item: ModItem = match item {\n             ast::Item::Struct(ast) => self.lower_struct(ast)?.into(),\n             ast::Item::Union(ast) => self.lower_union(ast)?.into(),\n@@ -162,7 +164,7 @@ impl<'a> Ctx<'a> {\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n                 let idx = self.data().fields.alloc(data);\n-                self.add_attrs(idx.into(), RawAttrs::new(self.db, &field, &self.hygiene));\n+                self.add_attrs(idx.into(), RawAttrs::new(self.db, &field, self.hygiene()));\n             }\n         }\n         let end = self.next_field_idx();\n@@ -182,7 +184,7 @@ impl<'a> Ctx<'a> {\n         for (i, field) in fields.fields().enumerate() {\n             let data = self.lower_tuple_field(i, &field);\n             let idx = self.data().fields.alloc(data);\n-            self.add_attrs(idx.into(), RawAttrs::new(self.db, &field, &self.hygiene));\n+            self.add_attrs(idx.into(), RawAttrs::new(self.db, &field, self.hygiene()));\n         }\n         let end = self.next_field_idx();\n         IdxRange::new(start..end)\n@@ -227,7 +229,7 @@ impl<'a> Ctx<'a> {\n         for variant in variants.variants() {\n             if let Some(data) = self.lower_variant(&variant) {\n                 let idx = self.data().variants.alloc(data);\n-                self.add_attrs(idx.into(), RawAttrs::new(self.db, &variant, &self.hygiene));\n+                self.add_attrs(idx.into(), RawAttrs::new(self.db, &variant, self.hygiene()));\n             }\n         }\n         let end = self.next_variant_idx();\n@@ -270,7 +272,7 @@ impl<'a> Ctx<'a> {\n                 };\n                 let ty = Interned::new(self_type);\n                 let idx = self.data().params.alloc(Param::Normal(None, ty));\n-                self.add_attrs(idx.into(), RawAttrs::new(self.db, &self_param, &self.hygiene));\n+                self.add_attrs(idx.into(), RawAttrs::new(self.db, &self_param, self.hygiene()));\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n@@ -294,7 +296,7 @@ impl<'a> Ctx<'a> {\n                         self.data().params.alloc(Param::Normal(name, ty))\n                     }\n                 };\n-                self.add_attrs(idx.into(), RawAttrs::new(self.db, &param, &self.hygiene));\n+                self.add_attrs(idx.into(), RawAttrs::new(self.db, &param, self.hygiene()));\n             }\n         }\n         let end_param = self.next_param_idx();\n@@ -427,7 +429,7 @@ impl<'a> Ctx<'a> {\n             self.with_inherited_visibility(visibility, |this| {\n                 list.assoc_items()\n                     .filter_map(|item| {\n-                        let attrs = RawAttrs::new(db, &item, &this.hygiene);\n+                        let attrs = RawAttrs::new(db, &item, this.hygiene());\n                         this.lower_assoc_item(&item).map(|item| {\n                             this.add_attrs(ModItem::from(item).into(), attrs);\n                             item\n@@ -465,7 +467,7 @@ impl<'a> Ctx<'a> {\n             .flat_map(|it| it.assoc_items())\n             .filter_map(|item| {\n                 let assoc = self.lower_assoc_item(&item)?;\n-                let attrs = RawAttrs::new(self.db, &item, &self.hygiene);\n+                let attrs = RawAttrs::new(self.db, &item, self.hygiene());\n                 self.add_attrs(ModItem::from(assoc).into(), attrs);\n                 Some(assoc)\n             })\n@@ -478,7 +480,7 @@ impl<'a> Ctx<'a> {\n     fn lower_use(&mut self, use_item: &ast::Use) -> Option<FileItemTreeId<Import>> {\n         let visibility = self.lower_visibility(use_item);\n         let ast_id = self.source_ast_id_map.ast_id(use_item);\n-        let (use_tree, _) = lower_use_tree(self.db, &self.hygiene, use_item.use_tree()?)?;\n+        let (use_tree, _) = lower_use_tree(self.db, self.hygiene(), use_item.use_tree()?)?;\n \n         let res = Import { visibility, ast_id, use_tree };\n         Some(id(self.data().imports.alloc(res)))\n@@ -500,7 +502,7 @@ impl<'a> Ctx<'a> {\n     }\n \n     fn lower_macro_call(&mut self, m: &ast::MacroCall) -> Option<FileItemTreeId<MacroCall>> {\n-        let path = Interned::new(ModPath::from_src(self.db, m.path()?, &self.hygiene)?);\n+        let path = Interned::new(ModPath::from_src(self.db, m.path()?, self.hygiene())?);\n         let ast_id = self.source_ast_id_map.ast_id(m);\n         let expand_to = hir_expand::ExpandTo::from_call_site(m);\n         let res = MacroCall { path, ast_id, expand_to };\n@@ -535,7 +537,7 @@ impl<'a> Ctx<'a> {\n                     // (in other words, the knowledge that they're in an extern block must not be used).\n                     // This is because an extern block can contain macros whose ItemTree's top-level items\n                     // should be considered to be in an extern block too.\n-                    let attrs = RawAttrs::new(self.db, &item, &self.hygiene);\n+                    let attrs = RawAttrs::new(self.db, &item, self.hygiene());\n                     let id: ModItem = match item {\n                         ast::ExternItem::Fn(ast) => {\n                             let func_id = self.lower_function(&ast)?;\n@@ -616,7 +618,9 @@ impl<'a> Ctx<'a> {\n     fn lower_visibility(&mut self, item: &dyn ast::HasVisibility) -> RawVisibilityId {\n         let vis = match self.forced_visibility {\n             Some(vis) => return vis,\n-            None => RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), &self.hygiene),\n+            None => {\n+                RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), self.hygiene())\n+            }\n         };\n \n         self.data().vis.alloc(vis)"}, {"sha": "2a1891c76b238eb0410ac2c4267caf9366326927", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -302,6 +302,7 @@ impl<'a> CompletionContext<'a> {\n \n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n     pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n+        let _p = profile::span(\"CompletionContext::process_all_names\");\n         self.scope.process_all_names(&mut |name, def| {\n             if self.is_scope_def_hidden(def) {\n                 return;\n@@ -422,6 +423,7 @@ impl<'a> CompletionContext<'a> {\n         mut offset: TextSize,\n         mut fake_ident_token: SyntaxToken,\n     ) {\n+        let _p = profile::span(\"CompletionContext::expand_and_fill\");\n         loop {\n             // Expand attributes\n             if let (Some(actual_item), Some(item_with_fake_ident)) = ("}, {"sha": "8728654662c6a25fe2b7565179d6611ffa3da8ea", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -17,7 +17,7 @@\n             },\n             \"devDependencies\": {\n                 \"@types/node\": \"~14.17.5\",\n-                \"@types/vscode\": \"~1.62.0\",\n+                \"@types/vscode\": \"~1.63.0\",\n                 \"@typescript-eslint/eslint-plugin\": \"^5.5.0\",\n                 \"@typescript-eslint/parser\": \"^5.5.0\",\n                 \"@vscode/test-electron\": \"^1.6.2\",\n@@ -29,7 +29,7 @@\n                 \"vsce\": \"^2.5.1\"\n             },\n             \"engines\": {\n-                \"vscode\": \"^1.62.0\"\n+                \"vscode\": \"^1.63.0\"\n             }\n         },\n         \"node_modules/@eslint/eslintrc\": {\n@@ -143,9 +143,9 @@\n             \"dev\": true\n         },\n         \"node_modules/@types/vscode\": {\n-            \"version\": \"1.62.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.62.0.tgz\",\n-            \"integrity\": \"sha512-iGlQJ1w5e3qPUryroO6v4lxg3ql1ztdTCwQW3xEwFawdyPLoeUSv48SYfMwc7kQA7h6ThUqflZIjgKAykeF9oA==\",\n+            \"version\": \"1.63.1\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.63.1.tgz\",\n+            \"integrity\": \"sha512-Z+ZqjRcnGfHP86dvx/BtSwWyZPKQ/LBdmAVImY82TphyjOw2KgTKcp7Nx92oNwCTsHzlshwexAG/WiY2JuUm3g==\",\n             \"dev\": true\n         },\n         \"node_modules/@typescript-eslint/eslint-plugin\": {\n@@ -4053,9 +4053,9 @@\n             \"dev\": true\n         },\n         \"@types/vscode\": {\n-            \"version\": \"1.62.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.62.0.tgz\",\n-            \"integrity\": \"sha512-iGlQJ1w5e3qPUryroO6v4lxg3ql1ztdTCwQW3xEwFawdyPLoeUSv48SYfMwc7kQA7h6ThUqflZIjgKAykeF9oA==\",\n+            \"version\": \"1.63.1\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.63.1.tgz\",\n+            \"integrity\": \"sha512-Z+ZqjRcnGfHP86dvx/BtSwWyZPKQ/LBdmAVImY82TphyjOw2KgTKcp7Nx92oNwCTsHzlshwexAG/WiY2JuUm3g==\",\n             \"dev\": true\n         },\n         \"@typescript-eslint/eslint-plugin\": {"}, {"sha": "9ab57d7dc5f387246fd5022329c09476321dddd9", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -21,7 +21,7 @@\n         \"Programming Languages\"\n     ],\n     \"engines\": {\n-        \"vscode\": \"^1.62.0\"\n+        \"vscode\": \"^1.63.0\"\n     },\n     \"enableProposedApi\": true,\n     \"scripts\": {\n@@ -44,7 +44,7 @@\n     },\n     \"devDependencies\": {\n         \"@types/node\": \"~14.17.5\",\n-        \"@types/vscode\": \"~1.62.0\",\n+        \"@types/vscode\": \"~1.63.0\",\n         \"@typescript-eslint/eslint-plugin\": \"^5.5.0\",\n         \"@typescript-eslint/parser\": \"^5.5.0\",\n         \"@vscode/test-electron\": \"^1.6.2\","}, {"sha": "28d8b2a5fd8561b394f66b4df0a43687cb275e54", "filename": "editors/code/src/ast_inspector.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -59,7 +59,7 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n         }\n     }\n \n-    private onDidChangeVisibleTextEditors(editors: vscode.TextEditor[]) {\n+    private onDidChangeVisibleTextEditors(editors: readonly vscode.TextEditor[]) {\n         if (!this.findAstTextEditor()) {\n             this.setRustEditor(undefined);\n             return;"}, {"sha": "9248bd1b6f6bcf6ee0e621d373bd7719e1bf7dc5", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/47fad0ed7328f1a39defe9b0e857fec7e042d6ae/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "patch": "@@ -125,7 +125,7 @@ export interface SsrParams {\n     parseOnly: boolean;\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position;\n-    selections: lc.Range[];\n+    selections: readonly lc.Range[];\n }\n export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>('experimental/ssr');\n "}]}