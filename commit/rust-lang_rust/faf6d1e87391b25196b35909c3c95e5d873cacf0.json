{"sha": "faf6d1e87391b25196b35909c3c95e5d873cacf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjZkMWU4NzM5MWIyNTE5NmIzNTkwOWMzYzk1ZTVkODczY2FjZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-26T00:42:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-26T00:42:08Z"}, "message": "Auto merge of #31065 - nrc:ident-correct, r=pnkfelix\n\nThis PR adds some minor error correction to the parser - if there is a missing ident, we recover and carry on. It also makes compilation more robust so that non-fatal errors (which is still most of them, unfortunately) in parsing do not cause us to abort compilation. The effect is that a program with a missing or incorrect ident can get all the way to type checking.", "tree": {"sha": "2bc19619fba5216c21015aee7cee4bec5b263b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc19619fba5216c21015aee7cee4bec5b263b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf6d1e87391b25196b35909c3c95e5d873cacf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf6d1e87391b25196b35909c3c95e5d873cacf0", "html_url": "https://github.com/rust-lang/rust/commit/faf6d1e87391b25196b35909c3c95e5d873cacf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf6d1e87391b25196b35909c3c95e5d873cacf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eceb96b40dedd903ddfca6df97bb1e5749b87787", "url": "https://api.github.com/repos/rust-lang/rust/commits/eceb96b40dedd903ddfca6df97bb1e5749b87787", "html_url": "https://github.com/rust-lang/rust/commit/eceb96b40dedd903ddfca6df97bb1e5749b87787"}, {"sha": "43b3681588ef40c78c794548d67a8f50101bc8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b3681588ef40c78c794548d67a8f50101bc8ad", "html_url": "https://github.com/rust-lang/rust/commit/43b3681588ef40c78c794548d67a8f50101bc8ad"}], "stats": {"total": 396, "additions": 233, "deletions": 163}, "files": [{"sha": "973fd65beb3d88031936d271563ede90c60465e4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -267,24 +267,28 @@ impl InlinedItem {\n \n // FIXME: find a better place for this?\n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let say = |s: &str| {\n-        match (sp, sess) {\n-            (_, None) => panic!(\"{}\", s),\n-            (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-            (None, Some(sess)) => sess.err(s),\n+    let mut err_count = 0;\n+    {\n+        let mut say = |s: &str| {\n+            match (sp, sess) {\n+                (_, None) => panic!(\"{}\", s),\n+                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+                (None, Some(sess)) => sess.err(s),\n+            }\n+            err_count += 1;\n+        };\n+        if s.is_empty() {\n+            say(\"crate name must not be empty\");\n+        }\n+        for c in s.chars() {\n+            if c.is_alphanumeric() { continue }\n+            if c == '_'  { continue }\n+            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n         }\n-    };\n-    if s.is_empty() {\n-        say(\"crate name must not be empty\");\n-    }\n-    for c in s.chars() {\n-        if c.is_alphanumeric() { continue }\n-        if c == '_'  { continue }\n-        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n     }\n-    match sess {\n-        Some(sess) => sess.abort_if_errors(),\n-        None => {}\n+\n+    if err_count > 0 {\n+        sess.unwrap().abort_if_errors();\n     }\n }\n "}, {"sha": "6e57d5dd1ba8d5f906e5ff777dc415863a1ca847", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -239,7 +239,6 @@ pub fn collect_language_items(session: &Session,\n     collector.collect(krate);\n     let LanguageItemCollector { mut items, .. } = collector;\n     weak_lang_items::check_crate(krate, session, &mut items);\n-    session.abort_if_errors();\n     items\n }\n "}, {"sha": "975ec0e709b7d272605e9c31b6f9c2fe057c6511", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -176,14 +176,15 @@ impl Session {\n     pub fn abort_if_errors(&self) {\n         self.diagnostic().abort_if_errors();\n     }\n-    pub fn abort_if_new_errors<F>(&self, mut f: F)\n-        where F: FnMut()\n+    pub fn abort_if_new_errors<F, T>(&self, f: F) -> T\n+        where F: FnOnce() -> T\n     {\n         let count = self.err_count();\n-        f();\n+        let result = f();\n         if self.err_count() > count {\n             self.abort_if_errors();\n         }\n+        result\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)"}, {"sha": "36074a7ae0225369e4de694b829eecc00b7389a0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 55, "deletions": 42, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -69,8 +69,8 @@ pub fn compile_input(sess: Session,\n         let state = $make_state;\n         (control.$point.callback)(state);\n \n-        $tsess.abort_if_errors();\n         if control.$point.stop == Compilation::Stop {\n+            $tsess.abort_if_errors();\n             return;\n         }\n     })}\n@@ -470,7 +470,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let mut feature_gated_cfgs = vec![];\n     krate = time(time_passes, \"configuration 1\", || {\n-        syntax::config::strip_unconfigured_items(sess.diagnostic(), krate, &mut feature_gated_cfgs)\n+        sess.abort_if_new_errors(|| {\n+            syntax::config::strip_unconfigured_items(sess.diagnostic(),\n+                                                     krate,\n+                                                     &mut feature_gated_cfgs)\n+        })\n     });\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n@@ -481,13 +485,15 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     });\n \n     time(time_passes, \"gated macro checking\", || {\n-        let features = syntax::feature_gate::check_crate_macros(sess.codemap(),\n-                                                                &sess.parse_sess.span_diagnostic,\n-                                                                &krate);\n-\n-        // these need to be set \"early\" so that expansion sees `quote` if enabled.\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features =\n+              syntax::feature_gate::check_crate_macros(sess.codemap(),\n+                                                       &sess.parse_sess.span_diagnostic,\n+                                                       &krate);\n+\n+            // these need to be set \"early\" so that expansion sees `quote` if enabled.\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n \n@@ -525,7 +531,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n                    llvm_passes, attributes, .. } = registry;\n \n-    {\n+    sess.abort_if_new_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n         for pass in early_lint_passes {\n             ls.register_early_pass(Some(sess), true, pass);\n@@ -540,17 +546,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n-    }\n+    });\n \n     // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n         super::describe_lints(&*sess.lint_store.borrow(), true);\n         return None;\n     }\n-    sess.lint_store.borrow_mut().process_command_line(sess);\n-\n-    // Abort if there are errors from lint processing or a plugin registrar.\n-    sess.abort_if_errors();\n+    sess.abort_if_new_errors(|| sess.lint_store.borrow_mut().process_command_line(sess));\n \n     krate = time(time_passes, \"expansion\", || {\n         // Windows dlls do not have rpaths, so they don't know how to find their\n@@ -594,29 +597,36 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // much as possible (e.g. help the programmer avoid platform\n     // specific differences)\n     time(time_passes, \"complete gated feature checking 1\", || {\n-        let features = syntax::feature_gate::check_crate(sess.codemap(),\n-                                                         &sess.parse_sess.span_diagnostic,\n-                                                         &krate,\n-                                                         &attributes,\n-                                                         sess.opts.unstable_features);\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features = syntax::feature_gate::check_crate(sess.codemap(),\n+                                                             &sess.parse_sess.span_diagnostic,\n+                                                             &krate,\n+                                                             &attributes,\n+                                                             sess.opts.unstable_features);\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n     // JBC: make CFG processing part of expansion to avoid this problem:\n \n     // strip again, in case expansion added anything with a #[cfg].\n-    krate = time(time_passes, \"configuration 2\", || {\n-        syntax::config::strip_unconfigured_items(sess.diagnostic(), krate, &mut feature_gated_cfgs)\n-    });\n+    krate = sess.abort_if_new_errors(|| {\n+        let krate = time(time_passes, \"configuration 2\", || {\n+            syntax::config::strip_unconfigured_items(sess.diagnostic(),\n+                                                     krate,\n+                                                     &mut feature_gated_cfgs)\n+        });\n \n-    time(time_passes, \"gated configuration checking\", || {\n-        let features = sess.features.borrow();\n-        feature_gated_cfgs.sort();\n-        feature_gated_cfgs.dedup();\n-        for cfg in &feature_gated_cfgs {\n-            cfg.check_and_emit(sess.diagnostic(), &features, sess.codemap());\n-        }\n+        time(time_passes, \"gated configuration checking\", || {\n+            let features = sess.features.borrow();\n+            feature_gated_cfgs.sort();\n+            feature_gated_cfgs.dedup();\n+            for cfg in &feature_gated_cfgs {\n+                cfg.check_and_emit(sess.diagnostic(), &features, sess.codemap());\n+            }\n+        });\n+\n+        krate\n     });\n \n     krate = time(time_passes, \"maybe building test harness\", || {\n@@ -639,13 +649,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // later, to make sure we've got everything (e.g. configuration\n     // can insert new attributes via `cfg_attr`)\n     time(time_passes, \"complete gated feature checking 2\", || {\n-        let features = syntax::feature_gate::check_crate(sess.codemap(),\n-                                                         &sess.parse_sess.span_diagnostic,\n-                                                         &krate,\n-                                                         &attributes,\n-                                                         sess.opts.unstable_features);\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features = syntax::feature_gate::check_crate(sess.codemap(),\n+                                                             &sess.parse_sess.span_diagnostic,\n+                                                             &krate,\n+                                                             &attributes,\n+                                                             sess.opts.unstable_features);\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n     time(time_passes,\n@@ -711,9 +722,11 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n          \"external crate/lib resolution\",\n          || LocalCrateReader::new(sess, cstore, &hir_map).read_crates(krate));\n \n-    let lang_items = time(time_passes,\n-                          \"language item collection\",\n-                          || middle::lang_items::collect_language_items(&sess, &hir_map));\n+    let lang_items = time(time_passes, \"language item collection\", || {\n+        sess.abort_if_new_errors(|| {\n+            middle::lang_items::collect_language_items(&sess, &hir_map)\n+        })\n+    });\n \n     let resolve::CrateMap {\n         def_map,"}, {"sha": "9c75007a8db764f72083fffe9e35f27edb3df636", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -258,15 +258,14 @@ impl<'a> CrateReader<'a> {\n                             metadata: &MetadataBlob) {\n         let crate_rustc_version = decoder::crate_rustc_version(metadata.as_slice());\n         if crate_rustc_version != Some(rustc_version()) {\n-            span_err!(self.sess, span, E0514,\n-                      \"the crate `{}` has been compiled with {}, which is \\\n-                       incompatible with this version of rustc\",\n-                      name,\n-                      crate_rustc_version\n-                          .as_ref().map(|s|&**s)\n-                          .unwrap_or(\"an old version of rustc\")\n+            span_fatal!(self.sess, span, E0514,\n+                        \"the crate `{}` has been compiled with {}, which is \\\n+                         incompatible with this version of rustc\",\n+                        name,\n+                        crate_rustc_version\n+                            .as_ref().map(|s|&**s)\n+                            .unwrap_or(\"an old version of rustc\")\n             );\n-            self.sess.abort_if_errors();\n         }\n     }\n \n@@ -511,7 +510,6 @@ impl<'a> CrateReader<'a> {\n                     }\n                 };\n                 let span = mk_sp(lo, p.last_span.hi);\n-                p.abort_if_errors();\n \n                 // Mark the attrs as used\n                 for attr in &attrs {\n@@ -554,8 +552,7 @@ impl<'a> CrateReader<'a> {\n                                   name,\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n-            span_err!(self.sess, span, E0456, \"{}\", &message[..]);\n-            self.sess.abort_if_errors();\n+            span_fatal!(self.sess, span, E0456, \"{}\", &message[..]);\n         }\n \n         let registrar ="}, {"sha": "f422a47572b8da45b3afcf7f39bd755b72543d36", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -18,8 +18,9 @@ use syntax::visit::{self, Visitor, FnKind};\n use syntax::codemap::Span;\n \n pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n-    visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n-    sess.abort_if_errors();\n+    sess.abort_if_new_errors(|| {\n+        visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n+    });\n }\n \n struct CheckConstFn<'a> {"}, {"sha": "c698f72955320b6b033a58967fc82ba2d80dda89", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -3037,6 +3037,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                           check_ribs: bool,\n                           record_used: bool)\n                           -> Option<LocalDef> {\n+        if identifier.name == special_idents::invalid.name {\n+            return Some(LocalDef::from_def(Def::Err));\n+        }\n+\n         // First, check to see whether the name is a primitive type.\n         if namespace == TypeNS {\n             if let Some(&prim_ty) = self.primitive_type_table\n@@ -4019,10 +4023,8 @@ pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n     resolver.callback = callback;\n \n     build_reduced_graph::build_reduced_graph(&mut resolver, krate);\n-    session.abort_if_errors();\n \n     resolve_imports::resolve_imports(&mut resolver);\n-    session.abort_if_errors();\n \n     resolver\n }"}, {"sha": "a8697f45d9156d9d4dd729b1ec947c25bc9aae9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -121,7 +121,7 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Spanned};\n use syntax::errors::DiagnosticBuilder;\n-use syntax::parse::token::{self, InternedString};\n+use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -2839,8 +2839,10 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 method_ty\n             }\n             Err(error) => {\n-                method::report_error(fcx, method_name.span, expr_t,\n-                                     method_name.node, Some(rcvr), error);\n+                if method_name.node != special_idents::invalid.name {\n+                    method::report_error(fcx, method_name.span, expr_t,\n+                                         method_name.node, Some(rcvr), error);\n+                }\n                 fcx.write_error(expr.id);\n                 fcx.tcx().types.err\n             }\n@@ -2938,6 +2940,11 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             None => {}\n         }\n \n+        if field.node == special_idents::invalid.name {\n+            fcx.write_error(expr.id);\n+            return;\n+        }\n+\n         if method::exists(fcx, field.span, field.node, expr_t, expr.id) {\n             fcx.type_error_struct(field.span,\n                                   |actual| {\n@@ -3788,8 +3795,9 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n                 Some((Some(ty), slice::ref_slice(item_segment), def))\n             }\n             Err(error) => {\n-                method::report_error(fcx, span, ty,\n-                                     item_name, None, error);\n+                if item_name != special_idents::invalid.name {\n+                    method::report_error(fcx, span, ty, item_name, None, error);\n+                }\n                 fcx.write_error(node_id);\n                 None\n             }\n@@ -4221,7 +4229,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n             }\n             // Check for unrepresentable discriminant values\n             match hint {\n-                attr::ReprAny | attr::ReprExtern => (),\n+                attr::ReprAny | attr::ReprExtern => {\n+                    disr_vals.push(current_disr_val);\n+                }\n                 attr::ReprInt(sp, ity) => {\n                     if !disr_in_range(ccx, ity, current_disr_val) {\n                         let mut err = struct_span_err!(ccx.tcx.sess, v.span, E0082,\n@@ -4231,14 +4241,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         err.emit();\n                     }\n                 }\n-                attr::ReprSimd => {\n-                    ccx.tcx.sess.bug(\"range_to_inttype: found ReprSimd on an enum\");\n-                }\n-                attr::ReprPacked => {\n-                    ccx.tcx.sess.bug(\"range_to_inttype: found ReprPacked on an enum\");\n-                }\n+                // Error reported elsewhere.\n+                attr::ReprSimd | attr::ReprPacked => {}\n             }\n-            disr_vals.push(current_disr_val);\n         }\n     }\n "}, {"sha": "a7a4ddc3b2a636e95767afd112ee8da449e557b7", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -555,6 +555,9 @@ impl Handler {\n pub enum Level {\n     Bug,\n     Fatal,\n+    // An error which while not immediately fatal, should stop the compiler\n+    // progressing beyond the current phase.\n+    PhaseFatal,\n     Error,\n     Warning,\n     Note,\n@@ -573,7 +576,7 @@ impl fmt::Display for Level {\n impl Level {\n     fn color(self) -> term::color::Color {\n         match self {\n-            Bug | Fatal | Error => term::color::BRIGHT_RED,\n+            Bug | Fatal | PhaseFatal | Error => term::color::BRIGHT_RED,\n             Warning => term::color::BRIGHT_YELLOW,\n             Note => term::color::BRIGHT_GREEN,\n             Help => term::color::BRIGHT_CYAN,\n@@ -584,7 +587,7 @@ impl Level {\n     fn to_str(self) -> &'static str {\n         match self {\n             Bug => \"error: internal compiler error\",\n-            Fatal | Error => \"error\",\n+            Fatal | PhaseFatal | Error => \"error\",\n             Warning => \"warning\",\n             Note => \"note\",\n             Help => \"help\","}, {"sha": "72537f6c7b26afa7dc3948a3fcdd1b8261739a22", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -1304,9 +1304,14 @@ pub fn expand_crate(mut cx: ExtCtxt,\n             expander.cx.syntax_env.insert(name, extension);\n         }\n \n+        let err_count = cx.parse_sess.span_diagnostic.err_count();\n         let mut ret = expander.fold_crate(c);\n         ret.exported_macros = expander.cx.exported_macros.clone();\n-        cx.parse_sess.span_diagnostic.abort_if_errors();\n+\n+        if cx.parse_sess.span_diagnostic.err_count() > err_count {\n+            cx.parse_sess.span_diagnostic.abort_if_errors();\n+        }\n+\n         ret\n     };\n     return (ret, cx.syntax_env.names);"}, {"sha": "32372ccc13b4727a3315540456e426e3bcf9b6b0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -98,7 +98,7 @@ pub fn parse_crate_from_source_str(name: String,\n                                            cfg,\n                                            name,\n                                            source);\n-    maybe_aborted(panictry!(p.parse_crate_mod()),p)\n+    panictry!(p.parse_crate_mod())\n }\n \n pub fn parse_crate_attrs_from_source_str(name: String,\n@@ -110,7 +110,7 @@ pub fn parse_crate_attrs_from_source_str(name: String,\n                                            cfg,\n                                            name,\n                                            source);\n-    maybe_aborted(panictry!(p.parse_inner_attributes()), p)\n+    panictry!(p.parse_inner_attributes())\n }\n \n pub fn parse_expr_from_source_str(name: String,\n@@ -119,7 +119,7 @@ pub fn parse_expr_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::Expr> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_expr()), p)\n+    panictry!(p.parse_expr())\n }\n \n pub fn parse_item_from_source_str(name: String,\n@@ -128,7 +128,7 @@ pub fn parse_item_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> Option<P<ast::Item>> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_item()), p)\n+    panictry!(p.parse_item())\n }\n \n pub fn parse_meta_from_source_str(name: String,\n@@ -137,7 +137,7 @@ pub fn parse_meta_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::MetaItem> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_meta_item()), p)\n+    panictry!(p.parse_meta_item())\n }\n \n pub fn parse_stmt_from_source_str(name: String,\n@@ -151,7 +151,7 @@ pub fn parse_stmt_from_source_str(name: String,\n         name,\n         source\n     );\n-    maybe_aborted(panictry!(p.parse_stmt()), p)\n+    panictry!(p.parse_stmt())\n }\n \n // Warning: This parses with quote_depth > 0, which is not the default.\n@@ -168,7 +168,7 @@ pub fn parse_tts_from_source_str(name: String,\n     );\n     p.quote_depth += 1;\n     // right now this is re-creating the token trees from ... token trees.\n-    maybe_aborted(panictry!(p.parse_all_token_trees()),p)\n+    panictry!(p.parse_all_token_trees())\n }\n \n // Create a new parser from a source string\n@@ -265,16 +265,10 @@ pub fn tts_to_parser<'a>(sess: &'a ParseSess,\n     p\n }\n \n-/// Abort if necessary\n-pub fn maybe_aborted<T>(result: T, p: Parser) -> T {\n-    p.abort_if_errors();\n-    result\n-}\n \n fn abort_if_errors<'a, T>(result: PResult<'a, T>, p: &Parser) -> T {\n     match result {\n         Ok(c) => {\n-            p.abort_if_errors();\n             c\n         }\n         Err(mut e) => {"}, {"sha": "acce6ed87d00b5a25c892fba351bdf499dfddb76", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 65, "deletions": 42, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -2355,6 +2355,59 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n+    // Assuming we have just parsed `.foo` (i.e., a dot and an ident), continue\n+    // parsing into an expression.\n+    fn parse_dot_suffix(&mut self,\n+                        ident: Ident,\n+                        ident_span: Span,\n+                        self_value: P<Expr>)\n+                        -> PResult<'a, P<Expr>> {\n+        let (_, tys, bindings) = if self.eat(&token::ModSep) {\n+            try!(self.expect_lt());\n+            try!(self.parse_generic_values_after_lt())\n+        } else {\n+            (Vec::new(), Vec::new(), Vec::new())\n+        };\n+\n+        if !bindings.is_empty() {\n+            let last_span = self.last_span;\n+            self.span_err(last_span, \"type bindings are only permitted on trait paths\");\n+        }\n+\n+        let lo = self_value.span.lo;\n+\n+        Ok(match self.token {\n+            // expr.f() method call.\n+            token::OpenDelim(token::Paren) => {\n+                let mut es = try!(self.parse_unspanned_seq(\n+                    &token::OpenDelim(token::Paren),\n+                    &token::CloseDelim(token::Paren),\n+                    seq_sep_trailing_allowed(token::Comma),\n+                    |p| Ok(try!(p.parse_expr()))\n+                ));\n+                let hi = self.last_span.hi;\n+\n+                es.insert(0, self_value);\n+                let id = spanned(ident_span.lo, ident_span.hi, ident);\n+                let nd = self.mk_method_call(id, tys, es);\n+                self.mk_expr(lo, hi, nd, None)\n+            }\n+            // Field access.\n+            _ => {\n+                if !tys.is_empty() {\n+                    let last_span = self.last_span;\n+                    self.span_err(last_span,\n+                                  \"field expressions may not \\\n+                                   have type parameters\");\n+                }\n+\n+                let id = spanned(ident_span.lo, ident_span.hi, ident);\n+                let field = self.mk_field(self_value, id);\n+                self.mk_expr(lo, ident_span.hi, field, None)\n+            }\n+        })\n+    }\n+\n     fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>) -> PResult<'a, P<Expr>> {\n         let mut e = e0;\n         let lo = e.span.lo;\n@@ -2364,50 +2417,11 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Dot) {\n                 match self.token {\n                   token::Ident(i, _) => {\n-                    let dot = self.last_span.hi;\n+                    let dot_pos = self.last_span.hi;\n                     hi = self.span.hi;\n                     self.bump();\n-                    let (_, tys, bindings) = if self.eat(&token::ModSep) {\n-                        try!(self.expect_lt());\n-                        try!(self.parse_generic_values_after_lt())\n-                    } else {\n-                        (Vec::new(), Vec::new(), Vec::new())\n-                    };\n-\n-                    if !bindings.is_empty() {\n-                        let last_span = self.last_span;\n-                        self.span_err(last_span, \"type bindings are only permitted on trait paths\");\n-                    }\n \n-                    // expr.f() method call\n-                    match self.token {\n-                        token::OpenDelim(token::Paren) => {\n-                            let mut es = try!(self.parse_unspanned_seq(\n-                                &token::OpenDelim(token::Paren),\n-                                &token::CloseDelim(token::Paren),\n-                                seq_sep_trailing_allowed(token::Comma),\n-                                |p| Ok(try!(p.parse_expr()))\n-                            ));\n-                            hi = self.last_span.hi;\n-\n-                            es.insert(0, e);\n-                            let id = spanned(dot, hi, i);\n-                            let nd = self.mk_method_call(id, tys, es);\n-                            e = self.mk_expr(lo, hi, nd, None);\n-                        }\n-                        _ => {\n-                            if !tys.is_empty() {\n-                                let last_span = self.last_span;\n-                                self.span_err(last_span,\n-                                              \"field expressions may not \\\n-                                               have type parameters\");\n-                            }\n-\n-                            let id = spanned(dot, hi, i);\n-                            let field = self.mk_field(e, id);\n-                            e = self.mk_expr(lo, hi, field, None);\n-                        }\n-                    }\n+                    e = try!(self.parse_dot_suffix(i, mk_sp(dot_pos, hi), e));\n                   }\n                   token::Literal(token::Integer(n), suf) => {\n                     let sp = self.span;\n@@ -2452,7 +2466,16 @@ impl<'a> Parser<'a> {\n                     self.abort_if_errors();\n \n                   }\n-                  _ => return self.unexpected()\n+                  _ => {\n+                    // FIXME Could factor this out into non_fatal_unexpected or something.\n+                    let actual = self.this_token_to_string();\n+                    self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));\n+\n+                    let dot_pos = self.last_span.hi;\n+                    e = try!(self.parse_dot_suffix(special_idents::invalid,\n+                                                   mk_sp(dot_pos, dot_pos),\n+                                                   e));\n+                  }\n                 }\n                 continue;\n             }"}, {"sha": "b3ef3d72ca3bf77a99f9a3f8205a40b77bdaa344", "filename": "src/test/compile-fail/cfg-non-opt-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(stmt_expr_attributes)]\n+\n fn main() {\n     let _ = #[cfg(unset)] ();\n     //~^ ERROR removing an expression is not supported in this position"}, {"sha": "d6d7dbb4aecd82e05328cddb799024e9c122356e", "filename": "src/test/compile-fail/double-type-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -20,5 +20,5 @@ mod foo {\n }\n \n fn main() {\n-    let _ = foo::X;\n+    let _ = foo::X; //~ ERROR unresolved name `foo::X`\n }"}, {"sha": "489bcfbdefdd6cf880a6224a5a6880e6c1d5cf9f", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -16,3 +16,4 @@ mod spam {\n }\n \n fn main() { ham(); eggs(); }\n+//~^ ERROR unresolved name `eggs`"}, {"sha": "86c4ce8b0380b008e6f98b3070a83c45eec46e50", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -16,4 +16,4 @@ use zed::baz;\n mod zed {\n     pub fn bar() { println!(\"bar\"); }\n }\n-fn main(args: Vec<String>) { bar(); }\n+fn main() { bar(); }"}, {"sha": "1d2aecd4e3b7ffa11774a2b6a4608bc248384baf", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -16,4 +16,5 @@ mod baz {}\n mod zed {\n     pub fn bar() { println!(\"bar3\"); }\n }\n-fn main(args: Vec<String>) { bar(); }\n+fn main() { bar(); }\n+//~^ ERROR unresolved name `bar`"}, {"sha": "ea2dfca0714fc5f35468f8b9293301a1f54a24b9", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "844955fb7e6647a760cb7548f9562c0ac8f370a5", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "381c22854e6545eac2d476d33496dfbc8ac546ea", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "5bb0b8759f486c4d0407bc6e750269355be36aa2", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:two_macros.rs\n \n+#![feature(macro_reexport)]\n+\n #[macro_use(macro_two)]\n #[macro_reexport(no_way)] //~ ERROR reexported macro not found\n extern crate two_macros;"}, {"sha": "39c09c6977963350b5903fb4d9728659c2f27233", "filename": "src/test/compile-fail/macro-use-bad-args-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n+\n #[macro_use(foo(bar))]  //~ ERROR bad macro import\n extern crate std;\n-\n-fn main() {\n-}"}, {"sha": "11a0108b99b89a30e8fa1a2cae690cb42b08291f", "filename": "src/test/compile-fail/macro-use-bad-args-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n+\n #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n extern crate std;\n-\n-fn main() {\n-}"}, {"sha": "7715ed41841cf3b4820cefd0d9304cb8ffcc7b5d", "filename": "src/test/compile-fail/parse-error-correct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the parser is error correcting missing idents. Despite a parsing\n+// error (or two), we still run type checking (and don't get extra errors there).\n+\n+fn main() {\n+    let y = 42;\n+    let x = y.;  //~ ERROR unexpected token\n+    let x = y.();  //~ ERROR unexpected token\n+    let x = y.foo; //~ ERROR no field\n+}"}, {"sha": "6a203993ccf2d2784d8c42cc42f2d955dd139158", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -28,6 +28,7 @@ fn test1() {\n     use bar::gpriv;\n     //~^ ERROR unresolved import `bar::gpriv`. There is no `gpriv` in `bar`\n     gpriv();\n+    //~^ ERROR unresolved name `gpriv`\n }\n \n #[start] fn main(_: isize, _: *const *const u8) -> isize { 3 }"}, {"sha": "e28197e81faf97804af90a6ee0d47fed23d11801", "filename": "src/test/compile-fail/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -29,6 +29,7 @@ pub fn main() {\n         //~^ ERROR expected identifier, found keyword `Self`\n         Self!() => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n+        //~^^ ERROR macro undefined: 'Self!'\n         Foo { x: Self } => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         Foo { Self } => (),"}, {"sha": "9cc3c92e2e376b22cd2b2e269202d788d664a16f", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6d1e87391b25196b35909c3c95e5d873cacf0/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=faf6d1e87391b25196b35909c3c95e5d873cacf0", "patch": "@@ -14,6 +14,7 @@ use foo::bar::{\n     Bar,\n     self\n //~^ NOTE another `self` import appears here\n+//~^^ ERROR a module named `bar` has already been imported in this module\n };\n \n use {self};"}]}