{"sha": "e69cad449a890feab89d52448f2f8586ff1721f4", "node_id": "C_kwDOAAsO6NoAKGU2OWNhZDQ0OWE4OTBmZWFiODlkNTI0NDhmMmY4NTg2ZmYxNzIxZjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T02:29:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-25T23:32:46Z"}, "message": "Use real inference variable in build_fn_sig_ty", "tree": {"sha": "16b6ab63ff7894b4616fe958275a1dcfef437bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b6ab63ff7894b4616fe958275a1dcfef437bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69cad449a890feab89d52448f2f8586ff1721f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69cad449a890feab89d52448f2f8586ff1721f4", "html_url": "https://github.com/rust-lang/rust/commit/e69cad449a890feab89d52448f2f8586ff1721f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69cad449a890feab89d52448f2f8586ff1721f4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c655d4b23362b812a39a205f89c2ecfc7578b6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c655d4b23362b812a39a205f89c2ecfc7578b6a3", "html_url": "https://github.com/rust-lang/rust/commit/c655d4b23362b812a39a205f89c2ecfc7578b6a3"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "c376593337b23bd5917937ce6c138f1c1b6374e0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e69cad449a890feab89d52448f2f8586ff1721f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69cad449a890feab89d52448f2f8586ff1721f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e69cad449a890feab89d52448f2f8586ff1721f4", "patch": "@@ -20,6 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -1584,32 +1585,38 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n+            infcx: &InferCtxt<'_, 'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n         ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n-                    if tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n+                    if infcx.tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n                 {\n-                    tcx.mk_fn_sig(\n+                    infcx.tcx.mk_fn_sig(\n                         inputs.iter(),\n-                        tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                        infcx.next_ty_var(TypeVariableOrigin {\n+                            span: DUMMY_SP,\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                        }),\n                         false,\n                         hir::Unsafety::Normal,\n                         abi::Abi::Rust,\n                     )\n                 }\n-                _ => tcx.mk_fn_sig(\n+                _ => infcx.tcx.mk_fn_sig(\n                     std::iter::once(inputs),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                    infcx.next_ty_var(TypeVariableOrigin {\n+                        span: DUMMY_SP,\n+                        kind: TypeVariableOriginKind::MiscVariable,\n+                    }),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,\n                 ),\n             };\n \n-            tcx.mk_fn_ptr(trait_ref.rebind(sig))\n+            infcx.tcx.mk_fn_ptr(trait_ref.rebind(sig))\n         }\n \n         let argument_kind = match expected.skip_binder().self_ty().kind() {\n@@ -1629,8 +1636,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let found_span = found_span.unwrap_or(span);\n         err.span_label(found_span, \"found signature defined here\");\n \n-        let expected = build_fn_sig_ty(self.tcx, expected);\n-        let found = build_fn_sig_ty(self.tcx, found);\n+        let expected = build_fn_sig_ty(self, expected);\n+        let found = build_fn_sig_ty(self, found);\n \n         let (expected_str, found_str) = self.cmp(expected, found);\n "}]}