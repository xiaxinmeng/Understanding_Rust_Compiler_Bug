{"sha": "54ecec9b7a0754077725081ef326646d95a8d954", "node_id": "C_kwDOAAsO6NoAKDU0ZWNlYzliN2EwNzU0MDc3NzI1MDgxZWYzMjY2NDZkOTVhOGQ5NTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T05:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T05:47:34Z"}, "message": "Rollup merge of #93569 - notriddle:notriddle/rustdoc-html-tags-generics, r=CraftSpider\n\nrustdoc: correct unclosed HTML tags as generics\n\nCC https://github.com/rust-lang/rust/issues/67799", "tree": {"sha": "479000104db530fe3206e450e2105d65afdfd255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479000104db530fe3206e450e2105d65afdfd255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ecec9b7a0754077725081ef326646d95a8d954", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAgP3CRBK7hj4Ov3rIwAAqmcIAFpimH7//DcWn+/aaAOmdxXa\nIOjVCaSv0pQG29gqcKynLrkPbYkIyNL48rtOkc1jtl+otSDytazq8YQv6obhSfaz\nFCW//4PSLJEPnVZpx4g6yWPRPklTxcg8NDXfnfWcl1UU31gPUtNvHLTzgOMErnkP\nST5TDTNkDSZ9lYx6U87Rm8C7jhZbozBg1Zz1+8jaSKkduhUbpGEYFm9o3vNkm2GM\n2h9/q8siHhfcwvCvvENdp3ARyLMuVr8CkaRrLw1vX7CCRwitnzJ6dbtaiX3l63wh\n4/rmfoZdJMuD7GM9gEGHe2AMjVdmlq/chidpNnUNQuj9weO021KLnhsFFmLqlj4=\n=Q1cq\n-----END PGP SIGNATURE-----\n", "payload": "tree 479000104db530fe3206e450e2105d65afdfd255\nparent 338979232af8c75fa05d88eeed17292cffc09967\nparent 76b5b27d88234d60a1609b86445b134c81b61cf2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644299254 +0100\ncommitter GitHub <noreply@github.com> 1644299254 +0100\n\nRollup merge of #93569 - notriddle:notriddle/rustdoc-html-tags-generics, r=CraftSpider\n\nrustdoc: correct unclosed HTML tags as generics\n\nCC https://github.com/rust-lang/rust/issues/67799\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ecec9b7a0754077725081ef326646d95a8d954", "html_url": "https://github.com/rust-lang/rust/commit/54ecec9b7a0754077725081ef326646d95a8d954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ecec9b7a0754077725081ef326646d95a8d954/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338979232af8c75fa05d88eeed17292cffc09967", "url": "https://api.github.com/repos/rust-lang/rust/commits/338979232af8c75fa05d88eeed17292cffc09967", "html_url": "https://github.com/rust-lang/rust/commit/338979232af8c75fa05d88eeed17292cffc09967"}, {"sha": "76b5b27d88234d60a1609b86445b134c81b61cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b5b27d88234d60a1609b86445b134c81b61cf2", "html_url": "https://github.com/rust-lang/rust/commit/76b5b27d88234d60a1609b86445b134c81b61cf2"}], "stats": {"total": 288, "additions": 279, "deletions": 9}, "files": [{"sha": "68028604fa463d36ad980268ec5462f71214b891", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -5,6 +5,7 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(assert_matches)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(box_syntax)]"}, {"sha": "9caadef3dec7c92c371a3600fed3c9fc4eeaaadd", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -38,7 +38,7 @@ fn drop_tag(\n     tags: &mut Vec<(String, Range<usize>)>,\n     tag_name: String,\n     range: Range<usize>,\n-    f: &impl Fn(&str, &Range<usize>),\n+    f: &impl Fn(&str, &Range<usize>, bool),\n ) {\n     let tag_name_low = tag_name.to_lowercase();\n     if let Some(pos) = tags.iter().rposition(|(t, _)| t.to_lowercase() == tag_name_low) {\n@@ -59,14 +59,42 @@ fn drop_tag(\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n             // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n             // have `h3`, meaning the tag wasn't closed as it should have.\n-            f(&format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span);\n+            f(&format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span, true);\n         }\n         // Remove the `tag_name` that was originally closed\n         tags.pop();\n     } else {\n         // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n         // but it helps for the visualization).\n-        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range);\n+        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range, false);\n+    }\n+}\n+\n+fn extract_path_backwards(text: &str, end_pos: usize) -> Option<usize> {\n+    use rustc_lexer::{is_id_continue, is_id_start};\n+    let mut current_pos = end_pos;\n+    loop {\n+        if current_pos >= 2 && text[..current_pos].ends_with(\"::\") {\n+            current_pos -= 2;\n+        }\n+        let new_pos = text[..current_pos]\n+            .char_indices()\n+            .rev()\n+            .take_while(|(_, c)| is_id_start(*c) || is_id_continue(*c))\n+            .reduce(|_accum, item| item)\n+            .and_then(|(new_pos, c)| is_id_start(c).then_some(new_pos));\n+        if let Some(new_pos) = new_pos {\n+            if current_pos != new_pos {\n+                current_pos = new_pos;\n+                continue;\n+            }\n+        }\n+        break;\n+    }\n+    if current_pos == end_pos {\n+        return None;\n+    } else {\n+        return Some(current_pos);\n     }\n }\n \n@@ -76,7 +104,7 @@ fn extract_html_tag(\n     range: &Range<usize>,\n     start_pos: usize,\n     iter: &mut Peekable<CharIndices<'_>>,\n-    f: &impl Fn(&str, &Range<usize>),\n+    f: &impl Fn(&str, &Range<usize>, bool),\n ) {\n     let mut tag_name = String::new();\n     let mut is_closing = false;\n@@ -140,7 +168,7 @@ fn extract_tags(\n     text: &str,\n     range: Range<usize>,\n     is_in_comment: &mut Option<Range<usize>>,\n-    f: &impl Fn(&str, &Range<usize>),\n+    f: &impl Fn(&str, &Range<usize>, bool),\n ) {\n     let mut iter = text.char_indices().peekable();\n \n@@ -178,14 +206,42 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n-            let report_diag = |msg: &str, range: &Range<usize>| {\n+            let report_diag = |msg: &str, range: &Range<usize>, is_open_tag: bool| {\n                 let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs)\n                 {\n                     Some(sp) => sp,\n                     None => item.attr_span(tcx),\n                 };\n                 tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n-                    lint.build(msg).emit()\n+                    use rustc_lint_defs::Applicability;\n+                    let mut diag = lint.build(msg);\n+                    // If a tag looks like `<this>`, it might actually be a generic.\n+                    // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n+                    // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n+                    if let Some(Some(generics_start)) = (is_open_tag\n+                        && dox[..range.end].ends_with(\">\"))\n+                    .then(|| extract_path_backwards(&dox, range.start))\n+                    {\n+                        let generics_sp = match super::source_span_for_markdown_range(\n+                            tcx,\n+                            &dox,\n+                            &(generics_start..range.end),\n+                            &item.attrs,\n+                        ) {\n+                            Some(sp) => sp,\n+                            None => item.attr_span(tcx),\n+                        };\n+                        // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n+                        diag.multipart_suggestion(\n+                            \"try marking as source code\",\n+                            vec![\n+                                (generics_sp.shrink_to_lo(), String::from(\"`\")),\n+                                (generics_sp.shrink_to_hi(), String::from(\"`\")),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    diag.emit()\n                 });\n             };\n \n@@ -210,11 +266,11 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 let t = t.to_lowercase();\n                 !ALLOWED_UNCLOSED.contains(&t.as_str())\n             }) {\n-                report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n+                report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range, true);\n             }\n \n             if let Some(range) = is_in_comment {\n-                report_diag(\"Unclosed HTML comment\", &range);\n+                report_diag(\"Unclosed HTML comment\", &range, false);\n             }\n         }\n "}, {"sha": "744b3071f1b8118c248a744890fe757d4c270bc4", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -0,0 +1,38 @@\n+#![deny(rustdoc::invalid_html_tags)]\n+\n+/// This Vec<32> thing!\n+// Numbers aren't valid HTML tags, so no error.\n+pub struct ConstGeneric;\n+\n+/// This Vec<i32, i32> thing!\n+// HTML tags cannot contain commas, so no error.\n+pub struct MultipleGenerics;\n+\n+/// This Vec<i32 class=\"test\"> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// HTML attributes shouldn't be treated as Rust syntax, so no suggestions.\n+pub struct TagWithAttributes;\n+\n+/// This Vec<i32></i32> thing!\n+// There should be no error, and no suggestion, since the tags are balanced.\n+pub struct DoNotWarnOnMatchingTags;\n+\n+/// This Vec</i32> thing!\n+//~^ERROR unopened HTML tag `i32`\n+// This should produce an error, but no suggestion.\n+pub struct EndTagsAreNotValidRustSyntax;\n+\n+/// This 123<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// This should produce an error, but no suggestion.\n+pub struct NumbersAreNotPaths;\n+\n+/// This Vec:<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// This should produce an error, but no suggestion.\n+pub struct InvalidTurbofish;\n+\n+/// This [link](https://rust-lang.org)<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// This should produce an error, but no suggestion.\n+pub struct BareTurbofish;"}, {"sha": "832b8b2cac79ade3733a693eaaf048363e75c3d8", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -0,0 +1,38 @@\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:11:13\n+   |\n+LL | /// This Vec<i32 class=\"test\"> thing!\n+   |             ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/html-as-generics-no-suggestions.rs:1:9\n+   |\n+LL | #![deny(rustdoc::invalid_html_tags)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unopened HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:20:13\n+   |\n+LL | /// This Vec</i32> thing!\n+   |             ^^^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:25:13\n+   |\n+LL | /// This 123<i32> thing!\n+   |             ^^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:30:14\n+   |\n+LL | /// This Vec:<i32> thing!\n+   |              ^^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:35:39\n+   |\n+LL | /// This [link](https://rust-lang.org)<i32> thing!\n+   |                                       ^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c0a0de24c5263c05542464a1467834a2c86fb895", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![deny(rustdoc::invalid_html_tags)]\n+\n+/// This `Vec<i32>` thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Generic;\n+\n+/// This `vec::Vec<i32>` thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericPath;\n+\n+/// This `i32<i32>` thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct PathsCanContainTrailingNumbers;\n+\n+/// This `Vec::<i32>` thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Turbofish;\n+\n+/// This [link](https://rust-lang.org)`::<i32>` thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct BareTurbofish;\n+\n+/// This <span>`Vec::<i32>`</span> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Nested;"}, {"sha": "0b6009b0e59c3574047aff463e452f54e18d06d8", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![deny(rustdoc::invalid_html_tags)]\n+\n+/// This Vec<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Generic;\n+\n+/// This vec::Vec<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericPath;\n+\n+/// This i32<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct PathsCanContainTrailingNumbers;\n+\n+/// This Vec::<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Turbofish;\n+\n+/// This [link](https://rust-lang.org)::<i32> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct BareTurbofish;\n+\n+/// This <span>Vec::<i32></span> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct Nested;"}, {"sha": "df54b71264ebcb770eae2b5aed806e6140e3a6ee", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54ecec9b7a0754077725081ef326646d95a8d954/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr?ref=54ecec9b7a0754077725081ef326646d95a8d954", "patch": "@@ -0,0 +1,73 @@\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:4:13\n+   |\n+LL | /// This Vec<i32> thing!\n+   |             ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/html-as-generics.rs:2:9\n+   |\n+LL | #![deny(rustdoc::invalid_html_tags)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try marking as source code\n+   |\n+LL | /// This `Vec<i32>` thing!\n+   |          +        +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:9:18\n+   |\n+LL | /// This vec::Vec<i32> thing!\n+   |                  ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `vec::Vec<i32>` thing!\n+   |          +             +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:14:13\n+   |\n+LL | /// This i32<i32> thing!\n+   |             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `i32<i32>` thing!\n+   |          +        +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:19:15\n+   |\n+LL | /// This Vec::<i32> thing!\n+   |               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `Vec::<i32>` thing!\n+   |          +          +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:24:41\n+   |\n+LL | /// This [link](https://rust-lang.org)::<i32> thing!\n+   |                                         ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [link](https://rust-lang.org)`::<i32>` thing!\n+   |                                       +       +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:29:21\n+   |\n+LL | /// This <span>Vec::<i32></span> thing!\n+   |                     ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This <span>`Vec::<i32>`</span> thing!\n+   |                +          +\n+\n+error: aborting due to 6 previous errors\n+"}]}