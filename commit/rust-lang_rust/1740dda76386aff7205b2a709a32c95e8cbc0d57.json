{"sha": "1740dda76386aff7205b2a709a32c95e8cbc0d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDBkZGE3NjM4NmFmZjcyMDViMmE3MDlhMzJjOTVlOGNiYzBkNTc=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-07-05T20:11:19Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-07-06T16:35:58Z"}, "message": "fix match_like_matches_macro in clippy", "tree": {"sha": "65583cc2c916d4f367567165eac0bdaa5897bfc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65583cc2c916d4f367567165eac0bdaa5897bfc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1740dda76386aff7205b2a709a32c95e8cbc0d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1740dda76386aff7205b2a709a32c95e8cbc0d57", "html_url": "https://github.com/rust-lang/rust/commit/1740dda76386aff7205b2a709a32c95e8cbc0d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1740dda76386aff7205b2a709a32c95e8cbc0d57/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8a1be444afc6a9b5137d3e7e4fdcfcb1f89e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8a1be444afc6a9b5137d3e7e4fdcfcb1f89e0d", "html_url": "https://github.com/rust-lang/rust/commit/2e8a1be444afc6a9b5137d3e7e4fdcfcb1f89e0d"}], "stats": {"total": 277, "additions": 91, "deletions": 186}, "files": [{"sha": "3d48bf739ebe643566ae457c02ce703ba5f434b5", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -237,6 +237,7 @@ fn is_commutative(op: hir::BinOpKind) -> bool {\n     use rustc_hir::BinOpKind::{\n         Add, And, BitAnd, BitOr, BitXor, Div, Eq, Ge, Gt, Le, Lt, Mul, Ne, Or, Rem, Shl, Shr, Sub,\n     };\n+    #[allow(clippy::match_like_matches_macro)]\n     match op {\n         Add | Mul | And | Or | BitXor | BitAnd | BitOr | Eq | Ne => true,\n         Sub | Div | Rem | Shl | Shr | Lt | Le | Ge | Gt => false,"}, {"sha": "25ccabc1c883e200811c69b2762d6c0f008a8349", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -122,8 +122,5 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n }\n \n fn kind_is_cmp(kind: BinOpKind) -> bool {\n-    match kind {\n-        BinOpKind::Lt | BinOpKind::Gt | BinOpKind::Eq => true,\n-        _ => false,\n-    }\n+    matches!(kind, BinOpKind::Lt | BinOpKind::Gt | BinOpKind::Eq)\n }"}, {"sha": "7839908fe4c91b98900e20b1a0813e6223f8e7cb", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -214,20 +214,20 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n }\n \n fn is_valid_operator(op: BinOp) -> bool {\n-    match op.node {\n+    matches!(\n+        op.node,\n         BinOpKind::Sub\n-        | BinOpKind::Div\n-        | BinOpKind::Eq\n-        | BinOpKind::Lt\n-        | BinOpKind::Le\n-        | BinOpKind::Gt\n-        | BinOpKind::Ge\n-        | BinOpKind::Ne\n-        | BinOpKind::And\n-        | BinOpKind::Or\n-        | BinOpKind::BitXor\n-        | BinOpKind::BitAnd\n-        | BinOpKind::BitOr => true,\n-        _ => false,\n-    }\n+            | BinOpKind::Div\n+            | BinOpKind::Eq\n+            | BinOpKind::Lt\n+            | BinOpKind::Le\n+            | BinOpKind::Gt\n+            | BinOpKind::Ge\n+            | BinOpKind::Ne\n+            | BinOpKind::And\n+            | BinOpKind::Or\n+            | BinOpKind::BitXor\n+            | BinOpKind::BitAnd\n+            | BinOpKind::BitOr\n+    )\n }"}, {"sha": "32fc01149d88167024ae0c1e739866005ce38a21", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -105,10 +105,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n         _ => return false,\n     }\n \n-    match map.find(map.get_parent_node(id)) {\n-        Some(Node::Param(_)) => true,\n-        _ => false,\n-    }\n+    matches!(map.find(map.get_parent_node(id)), Some(Node::Param(_)))\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {"}, {"sha": "fb26b9fc27d259793ed799f6d6d4888aaec85d3d", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -175,10 +175,7 @@ fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: def_id::DefId, self_a\n fn match_borrow_depth(lhs: Ty<'_>, rhs: Ty<'_>) -> bool {\n     match (&lhs.kind, &rhs.kind) {\n         (ty::Ref(_, t1, mut1), ty::Ref(_, t2, mut2)) => mut1 == mut2 && match_borrow_depth(&t1, &t2),\n-        (l, r) => match (l, r) {\n-            (ty::Ref(_, _, _), _) | (_, ty::Ref(_, _, _)) => false,\n-            (_, _) => true,\n-        },\n+        (l, r) => !matches!((l, r), (ty::Ref(_, _, _), _) | (_, ty::Ref(_, _, _))),\n     }\n }\n "}, {"sha": "1bd16e6cce53a3a5fae6dab1fb18b936c1679682", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -305,18 +305,10 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n }\n \n fn is_block(expr: &Expr) -> bool {\n-    if let ExprKind::Block(..) = expr.kind {\n-        true\n-    } else {\n-        false\n-    }\n+    matches!(expr.kind, ExprKind::Block(..))\n }\n \n /// Check if the expression is an `if` or `if let`\n fn is_if(expr: &Expr) -> bool {\n-    if let ExprKind::If(..) = expr.kind {\n-        true\n-    } else {\n-        false\n-    }\n+    matches!(expr.kind, ExprKind::If(..))\n }"}, {"sha": "63133a4872a3e76dd698cc3354a490cd2f0fdf91", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -645,13 +645,7 @@ fn is_mutated_static(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> bool {\n     use hir::ExprKind::{Field, Index, Path};\n \n     match e.kind {\n-        Path(ref qpath) => {\n-            if let Res::Local(_) = qpath_res(cx, qpath, e.hir_id) {\n-                false\n-            } else {\n-                true\n-            }\n-        },\n+        Path(ref qpath) => !matches!(qpath_res(cx, qpath, e.hir_id), Res::Local(_)),\n         Field(ref inner, _) | Index(ref inner, _) => is_mutated_static(cx, inner),\n         _ => false,\n     }"}, {"sha": "c4f1af8f4e414f9c891d349fb5708eb78605ce96", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -277,7 +277,6 @@ mod question_mark;\n mod ranges;\n mod redundant_clone;\n mod redundant_field_names;\n-mod redundant_pattern_matching;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n mod reference;\n@@ -623,11 +622,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &matches::INFALLIBLE_DESTRUCTURING_MATCH,\n         &matches::MATCH_AS_REF,\n         &matches::MATCH_BOOL,\n+        &matches::MATCH_LIKE_MATCHES_MACRO,\n         &matches::MATCH_OVERLAPPING_ARM,\n         &matches::MATCH_REF_PATS,\n         &matches::MATCH_SINGLE_BINDING,\n         &matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n         &matches::MATCH_WILD_ERR_ARM,\n+        &matches::REDUNDANT_PATTERN_MATCHING,\n         &matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n         &matches::SINGLE_MATCH,\n         &matches::SINGLE_MATCH_ELSE,\n@@ -757,7 +758,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n-        &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n         &reference::DEREF_ADDROF,\n@@ -956,7 +956,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box missing_doc::MissingDoc::new());\n     store.register_late_pass(|| box missing_inline::MissingInline);\n     store.register_late_pass(|| box if_let_some_result::OkIfLet);\n-    store.register_late_pass(|| box redundant_pattern_matching::RedundantPatternMatching);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n@@ -1295,9 +1294,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_AS_REF),\n+        LintId::of(&matches::MATCH_LIKE_MATCHES_MACRO),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_SINGLE_BINDING),\n+        LintId::of(&matches::REDUNDANT_PATTERN_MATCHING),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n@@ -1387,7 +1388,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n@@ -1488,8 +1488,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n         LintId::of(&map_clone::MAP_CLONE),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+        LintId::of(&matches::MATCH_LIKE_MATCHES_MACRO),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n+        LintId::of(&matches::REDUNDANT_PATTERN_MATCHING),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n@@ -1526,7 +1528,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr::PTR_ARG),\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::NEEDLESS_RETURN),"}, {"sha": "168f9f953e4d899b70174f8db6d06b55610f1a09", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -129,10 +129,10 @@ fn check_fn_inner<'tcx>(\n     }\n \n     let mut bounds_lts = Vec::new();\n-    let types = generics.params.iter().filter(|param| match param.kind {\n-        GenericParamKind::Type { .. } => true,\n-        _ => false,\n-    });\n+    let types = generics\n+        .params\n+        .iter()\n+        .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n     for typ in types {\n         for bound in typ.bounds {\n             let mut visitor = RefVisitor::new(cx);\n@@ -337,10 +337,10 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath<'_>, ty: &Ty<'_>) {\n         if let Some(ref last_path_segment) = last_path_segment(qpath).args {\n             if !last_path_segment.parenthesized\n-                && !last_path_segment.args.iter().any(|arg| match arg {\n-                    GenericArg::Lifetime(_) => true,\n-                    _ => false,\n-                })\n+                && !last_path_segment\n+                    .args\n+                    .iter()\n+                    .any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             {\n                 let hir_id = ty.hir_id;\n                 match self.cx.qpath_res(qpath, hir_id) {"}, {"sha": "396bb6591090321e80c534f2903f68d88b4b3b69", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -2091,17 +2091,11 @@ fn var_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<HirId> {\n }\n \n fn is_loop(expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Loop(..) => true,\n-        _ => false,\n-    }\n+    matches!(expr.kind, ExprKind::Loop(..))\n }\n \n fn is_conditional(expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Match(..) => true,\n-        _ => false,\n-    }\n+    matches!(expr.kind, ExprKind::Match(..))\n }\n \n fn is_nested(cx: &LateContext<'_>, match_expr: &Expr<'_>, iter_expr: &Expr<'_>) -> bool {"}, {"sha": "4c595029ff7bc32fd81c56a2e7c7c69af1943204", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -1844,10 +1844,10 @@ fn lint_expect_fun_call(\n                         ty::Ref(ty::ReStatic, ..)\n                     )\n                 }),\n-            hir::ExprKind::Path(ref p) => match cx.qpath_res(p, arg.hir_id) {\n-                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _) => true,\n-                _ => false,\n-            },\n+            hir::ExprKind::Path(ref p) => matches!(\n+                cx.qpath_res(p, arg.hir_id),\n+                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _)\n+            ),\n             _ => false,\n         }\n     }\n@@ -2028,13 +2028,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Exp\n                     .tables()\n                     .expr_adjustments(arg)\n                     .iter()\n-                    .filter(|adj| {\n-                        if let ty::adjustment::Adjust::Deref(_) = adj.kind {\n-                            true\n-                        } else {\n-                            false\n-                        }\n-                    })\n+                    .filter(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(_)))\n                     .count();\n                 let derefs: String = iter::repeat('*').take(deref_count).collect();\n                 snip = Some((\"try dereferencing it\", format!(\"{}{}\", derefs, snippet)));"}, {"sha": "400f4b609af7f577833d183d1bf3486ef2224a88", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -694,12 +694,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-\n-        if let ExpnKind::Macro(MacroKind::Attr, _) = data.kind {\n-            true\n-        } else {\n-            false\n-        }\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n     } else {\n         false\n     }"}, {"sha": "b84a1a3fe249449a81a574ea2be25118976bbd7e", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -641,28 +641,22 @@ fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n             );\n         }\n \n-        #[allow(clippy::trivially_copy_pass_by_ref)]\n-        fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n-            if let PatKind::Wild = pat.kind {\n-                true\n-            } else {\n-                false\n-            }\n-        }\n-\n         if let Some(rest_index) = patterns.iter().position(|pat| pat.is_rest()) {\n             if let Some((left_index, left_pat)) = patterns[..rest_index]\n                 .iter()\n                 .rev()\n-                .take_while(is_wild)\n+                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n                 .enumerate()\n                 .last()\n             {\n                 span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n             }\n \n-            if let Some((right_index, right_pat)) =\n-                patterns[rest_index + 1..].iter().take_while(is_wild).enumerate().last()\n+            if let Some((right_index, right_pat)) = patterns[rest_index + 1..]\n+                .iter()\n+                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n+                .enumerate()\n+                .last()\n             {\n                 span_lint(\n                     cx,"}, {"sha": "9c9626735370180deccffb545cc5579933943f59", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -71,10 +71,11 @@ fn check_missing_inline_attrs(cx: &LateContext<'_>, attrs: &[ast::Attribute], sp\n fn is_executable(cx: &LateContext<'_>) -> bool {\n     use rustc_session::config::CrateType;\n \n-    cx.tcx.sess.crate_types().iter().any(|t: &CrateType| match t {\n-        CrateType::Executable => true,\n-        _ => false,\n-    })\n+    cx.tcx\n+        .sess\n+        .crate_types()\n+        .iter()\n+        .any(|t: &CrateType| matches!(t, CrateType::Executable))\n }\n \n declare_lint_pass!(MissingInline => [MISSING_INLINE_IN_PUBLIC_ITEMS]);"}, {"sha": "621ebdef2f0b17462cbabee5e277f369899cf47a", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -80,10 +80,12 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // can't be implemented for unsafe new\n                             return;\n                         }\n-                        if impl_item.generics.params.iter().any(|gen| match gen.kind {\n-                            hir::GenericParamKind::Type { .. } => true,\n-                            _ => false,\n-                        }) {\n+                        if impl_item\n+                            .generics\n+                            .params\n+                            .iter()\n+                            .any(|gen| matches!(gen.kind, hir::GenericParamKind::Type { .. }))\n+                        {\n                             // when the result of `new()` depends on a type parameter we should not require\n                             // an\n                             // impl of `Default`"}, {"sha": "a3521c31a6be6b7f063703b911767113c7ed43b3", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -238,10 +238,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n             let ty = if needs_check_adjustment {\n                 let adjustments = cx.tables().expr_adjustments(dereferenced_expr);\n-                if let Some(i) = adjustments.iter().position(|adj| match adj.kind {\n-                    Adjust::Borrow(_) | Adjust::Deref(_) => true,\n-                    _ => false,\n-                }) {\n+                if let Some(i) = adjustments\n+                    .iter()\n+                    .position(|adj| matches!(adj.kind, Adjust::Borrow(_) | Adjust::Deref(_)))\n+                {\n                     if i == 0 {\n                         cx.tables().expr_ty(dereferenced_expr)\n                     } else {"}, {"sha": "04be96aa64cf52346cf097d611bf9d6beb698017", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -148,17 +148,11 @@ fn is_arith_expr(expr: &Expr) -> bool {\n #[must_use]\n fn is_bit_op(op: BinOpKind) -> bool {\n     use rustc_ast::ast::BinOpKind::{BitAnd, BitOr, BitXor, Shl, Shr};\n-    match op {\n-        BitXor | BitAnd | BitOr | Shl | Shr => true,\n-        _ => false,\n-    }\n+    matches!(op, BitXor | BitAnd | BitOr | Shl | Shr)\n }\n \n #[must_use]\n fn is_arith_op(op: BinOpKind) -> bool {\n     use rustc_ast::ast::BinOpKind::{Add, Div, Mul, Rem, Sub};\n-    match op {\n-        Add | Sub | Mul | Div | Rem => true,\n-        _ => false,\n-    }\n+    matches!(op, Add | Sub | Mul | Div | Rem)\n }"}, {"sha": "f204a0ffb2c7b92aed6041cfc80dbbcaf39a7bb7", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -99,12 +99,7 @@ fn is_trivial_regex(s: &regex_syntax::hir::Hir) -> Option<&'static str> {\n     use regex_syntax::hir::Anchor::{EndText, StartText};\n     use regex_syntax::hir::HirKind::{Alternation, Anchor, Concat, Empty, Literal};\n \n-    let is_literal = |e: &[regex_syntax::hir::Hir]| {\n-        e.iter().all(|e| match *e.kind() {\n-            Literal(_) => true,\n-            _ => false,\n-        })\n-    };\n+    let is_literal = |e: &[regex_syntax::hir::Hir]| e.iter().all(|e| matches!(*e.kind(), Literal(_)));\n \n     match *s.kind() {\n         Empty | Anchor(_) => Some(\"the regex is unlikely to be useful as it is\"),"}, {"sha": "194786c5c41451be22774b8db0ca7ba16350429b", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -165,10 +165,7 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n \n fn is_binding(cx: &LateContext<'_>, pat_id: HirId) -> bool {\n     let var_ty = cx.tables().node_type_opt(pat_id);\n-    var_ty.map_or(false, |var_ty| match var_ty.kind {\n-        ty::Adt(..) => false,\n-        _ => true,\n-    })\n+    var_ty.map_or(false, |var_ty| !matches!(var_ty.kind, ty::Adt(..)))\n }\n \n fn check_pat<'tcx>("}, {"sha": "1aeff1baa362e24a2362263c07a946e412abde46", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -25,13 +25,7 @@ declare_clippy_lint! {\n fn is_temporary(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     match &expr.kind {\n         ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n-        ExprKind::Path(qpath) => {\n-            if let Res::Def(DefKind::Const, ..) = cx.qpath_res(qpath, expr.hir_id) {\n-                true\n-            } else {\n-                false\n-            }\n-        },\n+        ExprKind::Path(qpath) => matches!(cx.qpath_res(qpath, expr.hir_id), Res::Def(DefKind::Const, ..)),\n         _ => false,\n     }\n }"}, {"sha": "71207caecf585fac77088729776b2049d443f14a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -775,11 +775,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitArg {\n                     .iter()\n                     .filter(|arg| {\n                         if is_unit(cx.tables().expr_ty(arg)) && !is_unit_literal(arg) {\n-                            if let ExprKind::Match(.., MatchSource::TryDesugar) = &arg.kind {\n-                                false\n-                            } else {\n-                                true\n-                            }\n+                            !matches!(&arg.kind, ExprKind::Match(.., MatchSource::TryDesugar))\n                         } else {\n                             false\n                         }\n@@ -899,17 +895,11 @@ fn is_questionmark_desugar_marked_call(expr: &Expr<'_>) -> bool {\n }\n \n fn is_unit(ty: Ty<'_>) -> bool {\n-    match ty.kind {\n-        ty::Tuple(slice) if slice.is_empty() => true,\n-        _ => false,\n-    }\n+    matches!(ty.kind, ty::Tuple(slice) if slice.is_empty())\n }\n \n fn is_unit_literal(expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Tup(ref slice) if slice.is_empty() => true,\n-        _ => false,\n-    }\n+    matches!(expr.kind, ExprKind::Tup(ref slice) if slice.is_empty())\n }\n \n declare_clippy_lint! {\n@@ -1154,10 +1144,7 @@ fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n }\n \n fn is_isize_or_usize(typ: Ty<'_>) -> bool {\n-    match typ.kind {\n-        ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize) => true,\n-        _ => false,\n-    }\n+    matches!(typ.kind, ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize))\n }\n \n fn span_precision_loss_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to_f64: bool) {\n@@ -1737,10 +1724,10 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n \n             TyKind::TraitObject(ref param_bounds, _) => {\n                 let has_lifetime_parameters = param_bounds.iter().any(|bound| {\n-                    bound.bound_generic_params.iter().any(|gen| match gen.kind {\n-                        GenericParamKind::Lifetime { .. } => true,\n-                        _ => false,\n-                    })\n+                    bound\n+                        .bound_generic_params\n+                        .iter()\n+                        .any(|gen| matches!(gen.kind, GenericParamKind::Lifetime { .. }))\n                 });\n                 if has_lifetime_parameters {\n                     // complex trait bounds like A<'a, 'b>"}, {"sha": "25d136e564d3ee8bd8e4633d3c33915ef502c91f", "filename": "clippy_lints/src/unnamed_address.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -58,10 +58,10 @@ declare_lint_pass!(UnnamedAddress => [FN_ADDRESS_COMPARISONS, VTABLE_ADDRESS_COM\n impl LateLintPass<'_> for UnnamedAddress {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         fn is_comparison(binop: BinOpKind) -> bool {\n-            match binop {\n-                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt => true,\n-                _ => false,\n-            }\n+            matches!(\n+                binop,\n+                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt\n+            )\n         }\n \n         fn is_trait_ptr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n@@ -72,11 +72,7 @@ impl LateLintPass<'_> for UnnamedAddress {\n         }\n \n         fn is_fn_def(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-            if let ty::FnDef(..) = cx.tables().expr_ty(expr).kind {\n-                true\n-            } else {\n-                false\n-            }\n+            matches!(cx.tables().expr_ty(expr).kind, ty::FnDef(..))\n         }\n \n         if_chain! {"}, {"sha": "776c6bc57ca6f857c4d86b699d99a4d5f2351f41", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -169,10 +169,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = parameters.as_ref().map_or(\n                     true,\n-                    |params| !params.parenthesized && !params.args.iter().any(|arg| match arg {\n-                        GenericArg::Lifetime(_) => true,\n-                        _ => false,\n-                    })\n+                    |params| !params.parenthesized\n+                        &&!params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n                 );\n \n                 if should_check {"}, {"sha": "58c1103da9f7dfed78e7039b107944057e7eecb9", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -387,10 +387,7 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n }\n \n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n-    match (l, r) {\n-        (Defaultness::Final, Defaultness::Final) | (Defaultness::Default(_), Defaultness::Default(_)) => true,\n-        _ => false,\n-    }\n+    matches!((l, r), (Defaultness::Final, Defaultness::Final) | (Defaultness::Default(_), Defaultness::Default(_)))\n }\n \n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {"}, {"sha": "0b4cba3fc42dc2e83a2bbb4fd0526cb770d4a84e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -102,11 +102,7 @@ pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n #[must_use]\n pub fn in_macro(span: Span) -> bool {\n     if span.from_expansion() {\n-        if let ExpnKind::Desugaring(..) = span.ctxt().outer_expn_data().kind {\n-            false\n-        } else {\n-            true\n-        }\n+        !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n     } else {\n         false\n     }\n@@ -127,10 +123,7 @@ pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n \n /// Checks if given pattern is a wildcard (`_`)\n pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n-    match pat.kind {\n-        PatKind::Wild => true,\n-        _ => false,\n-    }\n+    matches!(pat.kind, PatKind::Wild)\n }\n \n /// Checks if type is struct, enum or union type with the given def path."}, {"sha": "87cb454f654bcfb9a2a8ad70c4cceac6ccbd3253", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -51,7 +51,7 @@ impl<'a> NumericLiteral<'a> {\n     pub fn from_lit_kind(src: &'a str, lit_kind: &LitKind) -> Option<NumericLiteral<'a>> {\n         if lit_kind.is_numeric() && src.chars().next().map_or(false, |c| c.is_digit(10)) {\n             let (unsuffixed, suffix) = split_suffix(&src, lit_kind);\n-            let float = if let LitKind::Float(..) = lit_kind { true } else { false };\n+            let float = matches!(lit_kind, LitKind::Float(..));\n             Some(NumericLiteral::new(unsuffixed, suffix, float))\n         } else {\n             None"}, {"sha": "47315fa64cd8019cba3c508de3d960a6c50ebcc0", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1740dda76386aff7205b2a709a32c95e8cbc0d57/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1740dda76386aff7205b2a709a32c95e8cbc0d57/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=1740dda76386aff7205b2a709a32c95e8cbc0d57", "patch": "@@ -382,13 +382,8 @@ pub fn main() {\n \n         let should_describe_lints = || {\n             let args: Vec<_> = env::args().collect();\n-            args.windows(2).any(|args| {\n-                args[1] == \"help\"\n-                    && match args[0].as_str() {\n-                        \"-W\" | \"-A\" | \"-D\" | \"-F\" => true,\n-                        _ => false,\n-                    }\n-            })\n+            args.windows(2)\n+                .any(|args| args[1] == \"help\" && matches!(args[0].as_str(), \"-W\" | \"-A\" | \"-D\" | \"-F\"))\n         };\n \n         if !wrapper_mode && should_describe_lints() {"}]}