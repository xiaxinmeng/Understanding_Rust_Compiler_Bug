{"sha": "775246e3297ef49ae361a43fc5ce469f1cc26c96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NTI0NmUzMjk3ZWY0OWFlMzYxYTQzZmM1Y2U0NjlmMWNjMjZjOTY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T19:07:08Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T19:08:12Z"}, "message": "Add method to consume std::io::Result", "tree": {"sha": "f16dd8c924f502a653ccf875447b7a19d9e2def6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f16dd8c924f502a653ccf875447b7a19d9e2def6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775246e3297ef49ae361a43fc5ce469f1cc26c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775246e3297ef49ae361a43fc5ce469f1cc26c96", "html_url": "https://github.com/rust-lang/rust/commit/775246e3297ef49ae361a43fc5ce469f1cc26c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775246e3297ef49ae361a43fc5ce469f1cc26c96/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "html_url": "https://github.com/rust-lang/rust/commit/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "c75d3d5ea223a1ce2dfc621f655aa3c4a055bdcd", "filename": "src/shims/io.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/775246e3297ef49ae361a43fc5ce469f1cc26c96/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775246e3297ef49ae361a43fc5ce469f1cc26c96/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=775246e3297ef49ae361a43fc5ce469f1cc26c96", "patch": "@@ -48,21 +48,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .memory()\n             .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n         let path = std::str::from_utf8(path_bytes)\n-            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?;\n-\n-        match File::open(path) {\n-            Ok(file) => {\n-                let mut fh = &mut this.machine.file_handler;\n-                fh.low += 1;\n-                fh.handles.insert(fh.low, FileHandle{ file, flag});\n-                Ok(fh.low)\n-            }\n-\n-            Err(e) => {\n-                this.machine.last_error = e.raw_os_error().unwrap() as u32;\n-                Ok(-1)\n-            }\n-        }\n+            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?\n+            .to_owned();\n+        let fd = File::open(&path).map(|file| {\n+            let mut fh = &mut this.machine.file_handler;\n+            fh.low += 1;\n+            fh.handles.insert(fh.low, FileHandle{ file, flag});\n+            fh.low\n+        });\n+\n+        this.consume_result::<i32>(fd, -1)\n     }\n \n     fn fcntl(\n@@ -116,13 +111,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n-            match handle.file.sync_all() {\n-                Ok(()) => Ok(0),\n-                Err(e) => {\n-                    this.machine.last_error = e.raw_os_error().unwrap() as u32;\n-                    Ok(-1)\n-                }\n-            }\n+            this.consume_result::<i32>(handle.file.sync_all().map(|_| 0), -1)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n             Ok(-1)\n@@ -147,26 +136,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n-        if let Some(FileHandle { file, ..}) = this.machine.file_handler.handles.get_mut(&fd) {\n-            let mut bytes = vec![0; count as usize];\n-            match file.read(&mut bytes) {\n-                Ok(read_bytes) => {\n-                    bytes.truncate(read_bytes);\n-\n-                    this.memory_mut()\n-                        .get_mut(buf.alloc_id)?\n-                        .write_bytes(tcx, buf, &bytes)?;\n+        let mut bytes = vec![0; count as usize];\n \n-                    Ok(read_bytes as i64)\n-                }\n-                Err(e) => {\n-                    this.machine.last_error = e.raw_os_error().unwrap() as u32;\n-                    Ok(-1)\n-                }\n-            }\n+        let read_result = if let Some(FileHandle { file, ..}) = this.machine.file_handler.handles.get_mut(&fd) {\n+            file.read(&mut bytes).map(|bytes| bytes as i64)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            Ok(-1)\n+            return Ok(-1);\n+        };\n+\n+        let read_bytes = this.consume_result::<i64>(read_result, -1)?;\n+        if read_bytes != -1 {\n+            bytes.truncate(read_bytes as usize);\n+            this.memory_mut()\n+                .get_mut(buf.alloc_id)?\n+                .write_bytes(tcx, buf, &bytes)?;\n+        }\n+        Ok(read_bytes)\n+    }\n+\n+    fn consume_result<T>(&mut self, result: std::io::Result<T>, t: T) -> InterpResult<'tcx, T> {\n+        match result {\n+            Ok(ok) => Ok(ok),\n+            Err(e) => {\n+                self.eval_context_mut().machine.last_error = e.raw_os_error().unwrap() as u32;\n+                Ok(t)\n+            }\n         }\n     }\n }"}]}