{"sha": "dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZGJiZGRkMTYzMGE0ZWQwMTkwNmMyYWZmMGUyYjY1ZWQ5OWE1OTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T11:17:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T12:40:47Z"}, "message": "Simplify TS reload logic\n\nFixes #3164", "tree": {"sha": "e02793bf82f2956bf7c61dfbd7adfcfdf4df191b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02793bf82f2956bf7c61dfbd7adfcfdf4df191b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "html_url": "https://github.com/rust-lang/rust/commit/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf15cc05afaeda6880664777ff2a3db342ea088", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf15cc05afaeda6880664777ff2a3db342ea088", "html_url": "https://github.com/rust-lang/rust/commit/fcf15cc05afaeda6880664777ff2a3db342ea088"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "d05f40d67af8c4cbad29c3dcb2a5f7fb90124286", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -51,10 +51,3 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n         }\n     };\n }\n-\n-export function reload(ctx: Ctx): Cmd {\n-    return async () => {\n-        vscode.window.showInformationMessage('Reloading rust-analyzer...');\n-        await ctx.restartServer();\n-    };\n-}"}, {"sha": "1eff88df2a49e3b66cd2def14ec6d2467fbd721b", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import { strict as assert } from \"assert\";\n \n import { Config } from './config';\n import { createClient } from './client';\n@@ -16,19 +17,16 @@ export class Ctx {\n     // on the event loop to get a better picture of what we can do here)\n     client: lc.LanguageClient | null = null;\n     private extCtx: vscode.ExtensionContext;\n-    private onDidRestartHooks: Array<(client: lc.LanguageClient) => void> = [];\n+    private onStartHooks: Array<(client: lc.LanguageClient) => void> = [];\n \n     constructor(extCtx: vscode.ExtensionContext) {\n         this.config = new Config(extCtx);\n         this.extCtx = extCtx;\n     }\n \n-    async restartServer() {\n-        const old = this.client;\n-        if (old) {\n-            await old.stop();\n-        }\n-        this.client = null;\n+    async startServer() {\n+        assert(this.client == null);\n+\n         const client = await createClient(this.config);\n         if (!client) {\n             throw new Error(\n@@ -41,7 +39,7 @@ export class Ctx {\n         await client.onReady();\n \n         this.client = client;\n-        for (const hook of this.onDidRestartHooks) {\n+        for (const hook of this.onStartHooks) {\n             hook(client);\n         }\n     }\n@@ -72,8 +70,13 @@ export class Ctx {\n         this.extCtx.subscriptions.push(d);\n     }\n \n-    onDidRestart(hook: (client: lc.LanguageClient) => void) {\n-        this.onDidRestartHooks.push(hook);\n+    onStart(hook: (client: lc.LanguageClient) => void) {\n+        const client = this.client;\n+        if (client == null) {\n+            this.onStartHooks.push(hook);\n+        } else {\n+            hook(client)\n+        }\n     }\n }\n "}, {"sha": "f693fb8ba78a3d8fda835b096d0076f5f7c456d2", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -7,7 +7,7 @@ import { Ctx, sendRequestWithRetry } from './ctx';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    ctx.onDidRestart(client => {\n+    ctx.onStart(client => {\n         client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {"}, {"sha": "9e400fabec0156573b0ddf0629e56f9adfa98c31", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -27,9 +27,15 @@ export function activateInlayHints(ctx: Ctx) {\n         ctx.subscriptions\n     );\n \n+    ctx.pushCleanup({\n+        dispose() {\n+            hintsUpdater.clear()\n+        }\n+    })\n+\n     // We pass async function though it will not be awaited when called,\n     // thus Promise rejections won't be handled, but this should never throw in fact...\n-    ctx.onDidRestart(async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n+    ctx.onStart(async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n }\n \n interface InlayHintsParams {\n@@ -61,16 +67,23 @@ class HintsUpdater {\n \n     constructor(ctx: Ctx) {\n         this.ctx = ctx;\n-        this.enabled = ctx.config.displayInlayHints;\n+        this.enabled = false;\n     }\n \n     async setEnabled(enabled: boolean): Promise<void> {\n+        console.log({ enabled, prev: this.enabled });\n+\n         if (this.enabled == enabled) return;\n         this.enabled = enabled;\n \n         if (this.enabled) {\n             return await this.refresh();\n+        } else {\n+            return this.clear();\n         }\n+    }\n+\n+    clear() {\n         this.allEditors.forEach(it => {\n             this.setTypeDecorations(it, []);\n             this.setParameterDecorations(it, []);\n@@ -79,6 +92,8 @@ class HintsUpdater {\n \n     async refresh() {\n         if (!this.enabled) return;\n+        console.log(\"freshin!\");\n+\n         await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n     }\n "}, {"sha": "ec488c340558f3dc66aa75a057c49af54d5dc976", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -11,6 +11,23 @@ let ctx: Ctx | undefined;\n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);\n \n+    ctx.registerCommand('reload', (ctx) => {\n+        return async () => {\n+            vscode.window.showInformationMessage('Reloading rust-analyzer...');\n+            // @DanTup maneuver\n+            // https://github.com/microsoft/vscode/issues/45774#issuecomment-373423895\n+            await deactivate()\n+            for (const sub of ctx.subscriptions) {\n+                try {\n+                    sub.dispose();\n+                } catch (e) {\n+                    console.error(e);\n+                }\n+            }\n+            await activate(context)\n+        }\n+    })\n+\n     // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n@@ -20,7 +37,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n-    ctx.registerCommand('reload', commands.reload);\n     ctx.registerCommand('onEnter', commands.onEnter);\n     ctx.registerCommand('ssr', commands.ssr)\n \n@@ -38,7 +54,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     //\n     // This a horribly, horribly wrong way to deal with this problem.\n     try {\n-        await ctx.restartServer();\n+        await ctx.startServer();\n     } catch (e) {\n         vscode.window.showErrorMessage(e.message);\n     }\n@@ -47,4 +63,5 @@ export async function activate(context: vscode.ExtensionContext) {\n \n export async function deactivate() {\n     await ctx?.client?.stop();\n+    ctx = undefined;\n }"}, {"sha": "326b5217b5b35568df945303515f658dceae89db", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "patch": "@@ -9,7 +9,7 @@ const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\n export function activateStatusDisplay(ctx: Ctx) {\n     const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n     ctx.pushCleanup(statusDisplay);\n-    ctx.onDidRestart(client => ctx.pushCleanup(client.onProgress(\n+    ctx.onStart(client => ctx.pushCleanup(client.onProgress(\n         WorkDoneProgress.type,\n         'rustAnalyzer/cargoWatcher',\n         params => statusDisplay.handleProgressNotification(params)"}]}