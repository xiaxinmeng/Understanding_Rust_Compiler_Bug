{"sha": "d21bfff78cd949ce72be57d3528c4f6985190feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWJmZmY3OGNkOTQ5Y2U3MmJlNTdkMzUyOGM0ZjY5ODUxOTBmZWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-10T05:17:08Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T00:16:46Z"}, "message": "Remove hir::ExprParen", "tree": {"sha": "da9512bf339842c6a1c8d877df1e6bb55a53e8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9512bf339842c6a1c8d877df1e6bb55a53e8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21bfff78cd949ce72be57d3528c4f6985190feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21bfff78cd949ce72be57d3528c4f6985190feb", "html_url": "https://github.com/rust-lang/rust/commit/d21bfff78cd949ce72be57d3528c4f6985190feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21bfff78cd949ce72be57d3528c4f6985190feb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c6fb91938fb15c8814b47c402dc08b79108670", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c6fb91938fb15c8814b47c402dc08b79108670", "html_url": "https://github.com/rust-lang/rust/commit/70c6fb91938fb15c8814b47c402dc08b79108670"}], "stats": {"total": 121, "additions": 18, "deletions": 103}, "files": [{"sha": "60aebd9cd42266bd68a2316768df49720eccbb14", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -354,7 +354,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprAddrOf(_, ref e) |\n             hir::ExprCast(ref e, _) |\n             hir::ExprUnary(_, ref e) |\n-            hir::ExprParen(ref e) |\n             hir::ExprField(ref e, _) |\n             hir::ExprTupField(ref e, _) => {\n                 self.straightline(expr, pred, Some(&**e).into_iter())"}, {"sha": "7da2c8f1492df25dddb0e24b611edfede9c76c75", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -678,7 +678,6 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n             let mut callee = &**callee;\n             loop {\n                 callee = match callee.node {\n-                    hir::ExprParen(ref inner) => &**inner,\n                     hir::ExprBlock(ref block) => match block.expr {\n                         Some(ref tail) => &**tail,\n                         None => break\n@@ -763,7 +762,6 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |\n         hir::ExprVec(_) |\n-        hir::ExprParen(..) |\n         hir::ExprTup(..) => {}\n \n         // Conditional control flow (possible to implement)."}, {"sha": "8f5cf36278d52f031d271d77f29b7d035a456eba", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -996,7 +996,6 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       hir::ExprLit(ref lit) => {\n           lit_to_const(&**lit, ety)\n       }\n-      hir::ExprParen(ref e) => try!(eval_const_expr_partial(tcx, &**e, ty_hint)),\n       hir::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => try!(eval_const_expr_partial(tcx, &**expr, ty_hint)),"}, {"sha": "c067c9b4d6313a3d5b9ea87583214a088966333a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -362,9 +362,6 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         let cmt = return_if_err!(self.mc.cat_expr(expr));\n         self.delegate.borrow(expr.id, expr.span, cmt, r, bk, cause);\n \n-        // Note: Unlike consume, we can ignore ExprParen. cat_expr\n-        // already skips over them, and walk will uncover any\n-        // attachments or whatever.\n         self.walk_expr(expr)\n     }\n \n@@ -378,10 +375,6 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         self.walk_adjustment(expr);\n \n         match expr.node {\n-            hir::ExprParen(ref subexpr) => {\n-                self.walk_expr(&**subexpr)\n-            }\n-\n             hir::ExprPath(..) => { }\n \n             hir::ExprUnary(hir::UnDeref, ref base) => {      // *base"}, {"sha": "9bb19bb37d8e419198f9d0d61a4a4c543378ddc7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -495,7 +495,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       hir::ExprAgain(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n-      hir::ExprParen(..) | hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n+      hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n       hir::ExprRange(..) => {\n           visit::walk_expr(ir, expr);\n       }\n@@ -1161,8 +1161,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprBox(None, ref e) |\n           hir::ExprAddrOf(_, ref e) |\n           hir::ExprCast(ref e, _) |\n-          hir::ExprUnary(_, ref e) |\n-          hir::ExprParen(ref e) => {\n+          hir::ExprUnary(_, ref e) => {\n             self.propagate_through_expr(&**e, succ)\n           }\n \n@@ -1435,7 +1434,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprRet(..) |\n       hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n-      hir::ExprStruct(..) | hir::ExprRepeat(..) | hir::ExprParen(..) |\n+      hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(..) | hir::ExprBox(..) |\n       hir::ExprRange(..) => {\n         visit::walk_expr(this, expr);"}, {"sha": "2078ee2c57b8f65a4c2fddab64c77a2ad320227f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -519,10 +519,6 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n-          hir::ExprParen(ref e) => {\n-            self.cat_expr(&**e)\n-          }\n-\n           hir::ExprAddrOf(..) | hir::ExprCall(..) |\n           hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n           hir::ExprClosure(..) | hir::ExprRet(..) |"}, {"sha": "c26982ff5ede15f436db54c4870fb93083c8b634", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -997,8 +997,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n             hir::ExprUnary(hir::UnUniq, ref subexpr) => {\n                 record_rvalue_scope_if_borrow_expr(visitor, &**subexpr, blk_id);\n             }\n-            hir::ExprCast(ref subexpr, _) |\n-            hir::ExprParen(ref subexpr) => {\n+            hir::ExprCast(ref subexpr, _) => {\n                 record_rvalue_scope_if_borrow_expr(visitor, &**subexpr, blk_id)\n             }\n             hir::ExprBlock(ref block) => {\n@@ -1047,8 +1046,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                 hir::ExprUnary(hir::UnDeref, ref subexpr) |\n                 hir::ExprField(ref subexpr, _) |\n                 hir::ExprTupField(ref subexpr, _) |\n-                hir::ExprIndex(ref subexpr, _) |\n-                hir::ExprParen(ref subexpr) => {\n+                hir::ExprIndex(ref subexpr, _) => {\n                     expr = &**subexpr;\n                 }\n                 _ => {"}, {"sha": "7134066d08ce78f54a97b4757d15a96825d31e27", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -249,7 +249,6 @@ mod svh_visitor {\n         SawExprInlineAsm(&'a hir::InlineAsm),\n         SawExprStruct,\n         SawExprRepeat,\n-        SawExprParen,\n     }\n \n     fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n@@ -283,7 +282,6 @@ mod svh_visitor {\n             ExprInlineAsm(ref asm)   => SawExprInlineAsm(asm),\n             ExprStruct(..)           => SawExprStruct,\n             ExprRepeat(..)           => SawExprRepeat,\n-            ExprParen(..)            => SawExprParen,\n         }\n     }\n "}, {"sha": "0693092c04a4025bac0146d2850053b6686bbefe", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -1164,7 +1164,6 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                         fields.move_map(|x| folder.fold_field(x)),\n                         maybe_expr.map(|x| folder.fold_expr(x)))\n             },\n-            ExprParen(ex) => ExprParen(folder.fold_expr(ex))\n         },\n         span: folder.new_span(span)\n     }"}, {"sha": "8bc8bda9e066cabda89413acb28fa7a8a58b0c4f", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -703,9 +703,6 @@ pub enum Expr_ {\n     /// For example, `[1u8; 5]`. The first expression is the element\n     /// to be repeated; the second is the number of times to repeat it.\n     ExprRepeat(P<Expr>, P<Expr>),\n-\n-    /// No-op: used solely so we can pretty-print faithfully\n-    ExprParen(P<Expr>)\n }\n \n /// The explicit Self type in a \"qualified path\". The actual"}, {"sha": "4f5f892043b0853f765a14816d61a19996f5b05a", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -810,7 +810,9 @@ pub fn lower_expr(e: &Expr) -> P<hir::Expr> {\n                             fields.iter().map(|x| lower_field(x)).collect(),\n                             maybe_expr.as_ref().map(|x| lower_expr(x)))\n                 },\n-                ExprParen(ref ex) => hir::ExprParen(lower_expr(ex)),\n+                ExprParen(ref ex) => {\n+                    return lower_expr(ex);\n+                }\n                 ExprIfLet(..) |\n                 ExprWhileLet(..) |\n                 ExprForLoop(..) |"}, {"sha": "d4a52a5ed8eb0af3492afa241e94e6d85ffe248e", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -1556,11 +1556,6 @@ impl<'a> State<'a> {\n \n                 try!(self.pclose());\n             }\n-            hir::ExprParen(ref e) => {\n-                try!(self.popen());\n-                try!(self.print_expr(&**e));\n-                try!(self.pclose());\n-            }\n         }\n         try!(self.ann.post(self, NodeExpr(expr)));\n         self.end()"}, {"sha": "d9b4f37411420b7fe583846d7f565915edf015ac", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -814,9 +814,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprRet(ref optional_expression) => {\n             walk_expr_opt(visitor, optional_expression)\n         }\n-        ExprParen(ref subexpression) => {\n-            visitor.visit_expr(&**subexpression)\n-        }\n         ExprInlineAsm(ref ia) => {\n             for input in &ia.inputs {\n                 let (_, ref input) = *input;"}, {"sha": "556acf44b45d1f3d75a36a4dc33139313651d134", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -154,9 +154,6 @@ impl LintPass for TypeLimits {\n                     self.negated_expr_id = expr.id;\n                 }\n             },\n-            hir::ExprParen(ref expr) if self.negated_expr_id == e.id => {\n-                self.negated_expr_id = expr.id;\n-            },\n             hir::ExprBinary(binop, ref l, ref r) => {\n                 if is_comparison(binop) && !check_limits(cx.tcx, binop, &**l, &**r) {\n                     cx.span_lint(UNUSED_COMPARISONS, e.span,"}, {"sha": "5d20fe4bab4fd85303d20154be2cecafb4f99b3e", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -33,9 +33,6 @@ impl<H:Hair> Builder<H> {\n             ExprKind::Scope { extent: _, value } => {\n                 return this.as_constant(value);\n             }\n-            ExprKind::Paren { arg } => {\n-                return this.as_constant(arg);\n-            }\n             ExprKind::Literal { literal } => {\n                 ConstantKind::Literal(literal)\n             }"}, {"sha": "ffbb9781bdce5cec4aeb7d703c62cc950eb947df", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -43,9 +43,6 @@ impl<H:Hair> Builder<H> {\n                     this.as_lvalue(block, value)\n                 })\n             }\n-            ExprKind::Paren { arg } => {\n-                this.as_lvalue(block, arg)\n-            }\n             ExprKind::Field { lhs, name } => {\n                 let lvalue = unpack!(block = this.as_lvalue(block, lhs));\n                 let lvalue = lvalue.field(name);"}, {"sha": "0b236f3a1dcc359b59dbf9619c190a4a33ccd23e", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -39,16 +39,10 @@ impl<H:Hair> Builder<H> {\n                block, expr);\n         let this = self;\n \n-        match expr.kind {\n-            ExprKind::Scope { extent, value } => {\n-                return this.in_scope(extent, block, |this| {\n-                    this.as_operand(block, value)\n-                });\n-            }\n-            ExprKind::Paren { arg } => {\n-                return this.as_operand(block, arg);\n-            }\n-            _ => { }\n+        if let ExprKind::Scope { extent, value } = expr.kind {\n+            return this.in_scope(extent, block, |this| {\n+                this.as_operand(block, value)\n+            });\n         }\n \n         let category = Category::of(&expr.kind).unwrap();"}, {"sha": "d03028ffea6753b9f59053831683baabc685be26", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -46,9 +46,6 @@ impl<H:Hair> Builder<H> {\n                     this.as_rvalue(block, value)\n                 })\n             }\n-            ExprKind::Paren { arg } => {\n-                this.as_rvalue(block, arg)\n-            }\n             ExprKind::InlineAsm { asm } => {\n                 block.and(Rvalue::InlineAsm(asm))\n             }"}, {"sha": "cb652c8a5945ef4b7cb811a62380f9f667c01408", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -37,16 +37,10 @@ impl<H:Hair> Builder<H> {\n                block, expr);\n         let this = self;\n \n-        match expr.kind {\n-            ExprKind::Scope { extent, value } => {\n-                return this.in_scope(extent, block, |this| {\n-                    this.as_temp(block, value)\n-                });\n-            }\n-            ExprKind::Paren { arg } => {\n-                return this.as_temp(block, arg);\n-            }\n-            _ => { }\n+        if let ExprKind::Scope { extent, value } = expr.kind {\n+            return this.in_scope(extent, block, |this| {\n+                this.as_temp(block, value)\n+            });\n         }\n \n         let expr_ty = expr.ty.clone();"}, {"sha": "9cab2976b2c6182423e516c2f7ea01d716a6a7be", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -43,9 +43,7 @@ pub enum RvalueFunc {\n impl Category {\n     pub fn of<H:Hair>(ek: &ExprKind<H>) -> Option<Category> {\n         match *ek {\n-            ExprKind::Scope { .. } |\n-            ExprKind::Paren { .. } =>\n-                None,\n+            ExprKind::Scope { .. } => None,\n \n             ExprKind::Field { .. } |\n             ExprKind::Deref { .. } |"}, {"sha": "72e505f2b6edd8cec7fe276dbb0f03872017d513", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -40,9 +40,6 @@ impl<H:Hair> Builder<H> {\n                     this.into(destination, block, value)\n                 })\n             }\n-            ExprKind::Paren { arg } => {\n-                this.into(destination, block, arg)\n-            }\n             ExprKind::Block { body: ast_block } => {\n                 this.ast_block(destination, block, ast_block)\n             }"}, {"sha": "f1450522dd83ea8ad0af97c02a7d58118b50235c", "filename": "src/librustc_mir/hair.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fhair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Fhair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -171,7 +171,6 @@ pub struct Expr<H:Hair> {\n #[derive(Clone, Debug)]\n pub enum ExprKind<H:Hair> {\n     Scope { extent: H::CodeExtent, value: ExprRef<H> },\n-    Paren { arg: ExprRef<H> }, // ugh. should be able to remove this!\n     Box { place: Option<ExprRef<H>>, value: ExprRef<H> },\n     Call { fun: ExprRef<H>, args: Vec<ExprRef<H>> },\n     Deref { arg: ExprRef<H> }, // NOT overloaded!"}, {"sha": "7e68993b1309be25532bcd4e337f824f4ea2b161", "filename": "src/librustc_mir/tcx/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -267,8 +267,6 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for &'tcx hir::Expr {\n \n             // Now comes the rote stuff:\n \n-            hir::ExprParen(ref p) =>\n-                ExprKind::Paren { arg: p.to_ref() },\n             hir::ExprRepeat(ref v, ref c) =>\n                 ExprKind::Repeat { value: v.to_ref(), count: c.to_ref() },\n             hir::ExprRet(ref v) =>"}, {"sha": "1d0c5137eceaad82caefd093ea37d9f8be9aead4", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -703,7 +703,6 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let mut cur = sub;\n             loop {\n                 match cur.node {\n-                    hir::ExprParen(ref sub) => cur = sub,\n                     hir::ExprBlock(ref blk) => {\n                         if let Some(ref sub) = blk.expr {\n                             cur = sub;\n@@ -830,7 +829,6 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let mut callee = &**callee;\n             loop {\n                 callee = match callee.node {\n-                    hir::ExprParen(ref inner) => &**inner,\n                     hir::ExprBlock(ref block) => match block.expr {\n                         Some(ref tail) => &**tail,\n                         None => break,\n@@ -870,7 +868,6 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             const_fn_call(cx, MethodCallKey(method_call),\n                           method_did, &arg_vals, param_substs)\n         },\n-        hir::ExprParen(ref e) => const_expr(cx, &**e, param_substs, fn_args).0,\n         hir::ExprBlock(ref block) => {\n             match block.expr {\n                 Some(ref expr) => const_expr(cx, &**expr, param_substs, fn_args).0,"}, {"sha": "828086800499a80d14d4dfd8ff05170f2eac8b12", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -322,8 +322,7 @@ fn walk_expr(cx: &CrateContext,\n         hir::ExprCast(ref sub_exp, _)     |\n         hir::ExprAddrOf(_, ref sub_exp)  |\n         hir::ExprField(ref sub_exp, _) |\n-        hir::ExprTupField(ref sub_exp, _) |\n-        hir::ExprParen(ref sub_exp) =>\n+        hir::ExprTupField(ref sub_exp, _) =>\n             walk_expr(cx, &**sub_exp, scope_stack, scope_map),\n \n         hir::ExprBox(ref place, ref sub_expr) => {"}, {"sha": "d8397b3c0176614b73bc3c91bdc0bbdb0c7ab0f9", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -630,9 +630,6 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_datum_unadjusted\");\n \n     match expr.node {\n-        hir::ExprParen(ref e) => {\n-            trans(bcx, &**e)\n-        }\n         hir::ExprPath(..) => {\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n@@ -934,9 +931,6 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     match expr.node {\n-        hir::ExprParen(ref e) => {\n-            trans_into(bcx, &**e, Ignore)\n-        }\n         hir::ExprBreak(label_opt) => {\n             controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node))\n         }\n@@ -1050,9 +1044,6 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     match expr.node {\n-        hir::ExprParen(ref e) => {\n-            trans_into(bcx, &**e, dest)\n-        }\n         hir::ExprPath(..) => {\n             trans_def_dps_unadjusted(bcx, expr, bcx.def(expr.id), dest)\n         }\n@@ -2750,7 +2741,5 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n                 ExprKind::RvalueDps\n             }\n         }\n-\n-        hir::ExprParen(ref e) => expr_kind(tcx, &**e),\n     }\n }"}, {"sha": "abdcbf099a57a4104f75dee658b94e5107ac8dc2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -468,7 +468,6 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         loop {\n             let last = exprs[exprs.len() - 1];\n             match last.node {\n-                hir::ExprParen(ref expr) |\n                 hir::ExprField(ref expr, _) |\n                 hir::ExprTupField(ref expr, _) |\n                 hir::ExprIndex(ref expr, _) |"}, {"sha": "e5dbfdf176739eb29d5479fb7c2a5dd9f84a1421", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21bfff78cd949ce72be57d3528c4f6985190feb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d21bfff78cd949ce72be57d3528c4f6985190feb", "patch": "@@ -3444,13 +3444,6 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n         fcx.write_ty(id, fcx.infcx().next_diverging_ty_var());\n       }\n-      hir::ExprParen(ref a) => {\n-        check_expr_with_expectation_and_lvalue_pref(fcx,\n-                                                    &**a,\n-                                                    expected,\n-                                                    lvalue_pref);\n-        fcx.write_ty(id, fcx.expr_ty(&**a));\n-      }\n       hir::ExprAssign(ref lhs, ref rhs) => {\n         check_expr_with_lvalue_pref(fcx, &**lhs, PreferMutLvalue);\n "}]}