{"sha": "ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMWJiMmU0NjVhMWI4M2JkZTkzN2NlMDViN2NmODRjZjk0OWYxYjM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-11-03T00:23:56Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-11-03T00:29:54Z"}, "message": "Cache the TLS model in the crate context", "tree": {"sha": "17701c674e6c8b1faafc5660270a71d42fcfc6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17701c674e6c8b1faafc5660270a71d42fcfc6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "html_url": "https://github.com/rust-lang/rust/commit/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b233a6e0968c48719c066b8ba4d247925071f680", "url": "https://api.github.com/repos/rust-lang/rust/commits/b233a6e0968c48719c066b8ba4d247925071f680", "html_url": "https://github.com/rust-lang/rust/commit/b233a6e0968c48719c066b8ba4d247925071f680"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "4ae289cfada00a4b6746c0edb07211d7c5c61b53", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "patch": "@@ -23,7 +23,6 @@ use monomorphize::Instance;\n use type_::Type;\n use type_of;\n use rustc::ty;\n-use context::get_tls_model;\n \n use rustc::hir;\n \n@@ -197,7 +196,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n \n         for attr in attrs {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n+                llvm::set_thread_local_mode(g, ccx.tls_model());\n             }\n         }\n \n@@ -216,7 +215,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n         // symbol and another one doesn't.\n         for attr in ccx.tcx().get_attrs(def_id).iter() {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n+                llvm::set_thread_local_mode(g, ccx.tls_model());\n             }\n         }\n         if ccx.use_dll_storage_attrs() && !ccx.tcx().is_foreign_item(def_id) {\n@@ -307,7 +306,7 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         debuginfo::create_global_var_metadata(ccx, id, g);\n \n         if attr::contains_name(attrs, \"thread_local\") {\n-            llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n+            llvm::set_thread_local_mode(g, ccx.tls_model());\n         }\n \n         base::set_link_section(ccx, g, attrs);"}, {"sha": "0089dd67121cb0b9e7d0d6e5cc43cb4497c79951", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "patch": "@@ -52,6 +52,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     check_overflow: bool,\n     use_dll_storage_attrs: bool,\n+    tls_model: llvm::ThreadLocalMode,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -166,7 +167,7 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n     }\n }\n \n-pub fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n+fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     let tls_model_arg = match sess.opts.cg.tls_model {\n         Some(ref s) => &s[..],\n         None => &sess.target.target.options.tls_model[..],\n@@ -299,10 +300,13 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n+        let tls_model = get_tls_model(&tcx.sess);\n+\n         SharedCrateContext {\n             tcx,\n             check_overflow,\n             use_dll_storage_attrs,\n+            tls_model,\n         }\n     }\n \n@@ -544,6 +548,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.shared.use_dll_storage_attrs()\n     }\n \n+    pub fn tls_model(&self) -> llvm::ThreadLocalMode {\n+        self.shared.tls_model\n+    }\n+\n     /// Generate a new symbol name with the given prefix. This symbol name must\n     /// only be used for definitions with `internal` or `private` linkage.\n     pub fn generate_local_symbol_name(&self, prefix: &str) -> String {"}]}