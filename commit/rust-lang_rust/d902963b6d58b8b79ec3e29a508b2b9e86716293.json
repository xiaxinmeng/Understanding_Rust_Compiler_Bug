{"sha": "d902963b6d58b8b79ec3e29a508b2b9e86716293", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDI5NjNiNmQ1OGI4Yjc5ZWMzZTI5YTUwOGIyYjllODY3MTYyOTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-14T23:08:53Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-15T20:50:02Z"}, "message": "Refactor `syntax::ext::base::Resolver::resolve_invoc`.", "tree": {"sha": "08ef1afb169b1677a172d0840d218bc73c4cdd7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ef1afb169b1677a172d0840d218bc73c4cdd7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d902963b6d58b8b79ec3e29a508b2b9e86716293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d902963b6d58b8b79ec3e29a508b2b9e86716293", "html_url": "https://github.com/rust-lang/rust/commit/d902963b6d58b8b79ec3e29a508b2b9e86716293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d902963b6d58b8b79ec3e29a508b2b9e86716293/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34318dd538bf4c9175e4138b3e4188ea8211620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34318dd538bf4c9175e4138b3e4188ea8211620", "html_url": "https://github.com/rust-lang/rust/commit/d34318dd538bf4c9175e4138b3e4188ea8211620"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "6741197b79cd8628ec0d78d8ae954505d8296c1b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d902963b6d58b8b79ec3e29a508b2b9e86716293", "patch": "@@ -19,7 +19,7 @@ use syntax::ast;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy, MultiModifier, MultiDecorator, MultiItemModifier};\n use syntax::ext::base::{NormalTT, SyntaxExtension};\n-use syntax::ext::expand::{Expansion, Invocation, InvocationKind};\n+use syntax::ext::expand::Expansion;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::parse::token::intern;\n@@ -162,30 +162,22 @@ impl<'a> base::Resolver for Resolver<'a> {\n         None\n     }\n \n-    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation, force: bool)\n+    fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n-        let (name, span) = match invoc.kind {\n-            InvocationKind::Bang { ref mac, .. } => {\n-                let path = &mac.node.path;\n-                if path.segments.len() > 1 || path.global ||\n-                   !path.segments[0].parameters.is_empty() {\n-                    self.session.span_err(path.span,\n-                                          \"expected macro name without module separators\");\n-                    return Err(Determinacy::Determined);\n-                }\n-                (path.segments[0].identifier.name, path.span)\n-            }\n-            InvocationKind::Attr { ref attr, .. } => (intern(&*attr.name()), attr.span),\n-        };\n+        if path.segments.len() > 1 || path.global || !path.segments[0].parameters.is_empty() {\n+            self.session.span_err(path.span, \"expected macro name without module separators\");\n+            return Err(Determinacy::Determined);\n+        }\n+        let name = path.segments[0].identifier.name;\n \n         let invocation = self.invocations[&scope];\n         if let LegacyScope::Expansion(parent) = invocation.legacy_scope.get() {\n             invocation.legacy_scope.set(LegacyScope::simplify_expansion(parent));\n         }\n         self.resolve_macro_name(invocation.legacy_scope.get(), name, true).ok_or_else(|| {\n             if force {\n-                let mut err =\n-                    self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n+                let msg = format!(\"macro undefined: '{}!'\", name);\n+                let mut err = self.session.struct_span_err(path.span, &msg);\n                 self.suggest_macro_name(&name.as_str(), &mut err);\n                 err.emit();\n                 Determinacy::Determined"}, {"sha": "99b883d26d870f7a1beed3b223dcda18ab26732c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d902963b6d58b8b79ec3e29a508b2b9e86716293", "patch": "@@ -15,7 +15,7 @@ use attr::HasAttrs;\n use codemap::{self, CodeMap, ExpnInfo, Spanned, respan};\n use syntax_pos::{Span, ExpnId, NO_EXPANSION};\n use errors::DiagnosticBuilder;\n-use ext::expand::{self, Invocation, Expansion};\n+use ext::expand::{self, Expansion};\n use ext::hygiene::Mark;\n use fold::{self, Folder};\n use parse::{self, parser};\n@@ -522,7 +522,7 @@ pub trait Resolver {\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n     fn find_attr_invoc(&mut self, attrs: &mut Vec<Attribute>) -> Option<Attribute>;\n-    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation, force: bool)\n+    fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy>;\n     fn resolve_derive_mode(&mut self, ident: ast::Ident) -> Option<Rc<MultiItemModifier>>;\n }\n@@ -546,7 +546,7 @@ impl Resolver for DummyResolver {\n \n     fn find_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>) -> Option<Attribute> { None }\n     fn resolve_derive_mode(&mut self, _ident: ast::Ident) -> Option<Rc<MultiItemModifier>> { None }\n-    fn resolve_invoc(&mut self, _scope: Mark, _invoc: &Invocation, _force: bool)\n+    fn resolve_macro(&mut self, _scope: Mark, _path: &ast::Path, _force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n         Err(Determinacy::Determined)\n     }"}, {"sha": "3a5b3ab832861540dfffa7d16bd4b2a9ea568603", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902963b6d58b8b79ec3e29a508b2b9e86716293/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d902963b6d58b8b79ec3e29a508b2b9e86716293", "patch": "@@ -240,7 +240,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n             let scope =\n                 if self.monotonic { invoc.expansion_data.mark } else { orig_expansion_data.mark };\n-            let ext = match self.cx.resolver.resolve_invoc(scope, &invoc, force) {\n+            let resolution = match invoc.kind {\n+                InvocationKind::Bang { ref mac, .. } => {\n+                    self.cx.resolver.resolve_macro(scope, &mac.node.path, force)\n+                }\n+                InvocationKind::Attr { ref attr, .. } => {\n+                    let ident = ast::Ident::with_empty_ctxt(intern(&*attr.name()));\n+                    let path = ast::Path::from_ident(attr.span, ident);\n+                    self.cx.resolver.resolve_macro(scope, &path, force)\n+                }\n+            };\n+            let ext = match resolution {\n                 Ok(ext) => Some(ext),\n                 Err(Determinacy::Determined) => None,\n                 Err(Determinacy::Undetermined) => {"}]}