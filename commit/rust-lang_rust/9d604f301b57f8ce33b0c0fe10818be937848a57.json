{"sha": "9d604f301b57f8ce33b0c0fe10818be937848a57", "node_id": "C_kwDOAAsO6NoAKDlkNjA0ZjMwMWI1N2Y4Y2UzM2IwYzBmZTEwODE4YmU5Mzc4NDhhNTc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-27T01:43:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T17:20:56Z"}, "message": "fix an outdated machine hook name", "tree": {"sha": "cc06d1c4e6b6f316a6a8f49a07f0e1398ecc31a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc06d1c4e6b6f316a6a8f49a07f0e1398ecc31a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d604f301b57f8ce33b0c0fe10818be937848a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d604f301b57f8ce33b0c0fe10818be937848a57", "html_url": "https://github.com/rust-lang/rust/commit/9d604f301b57f8ce33b0c0fe10818be937848a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d604f301b57f8ce33b0c0fe10818be937848a57/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983f4daddf238d114c4adc4751c5528fc6695a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/983f4daddf238d114c4adc4751c5528fc6695a5a", "html_url": "https://github.com/rust-lang/rust/commit/983f4daddf238d114c4adc4751c5528fc6695a5a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "bf01ae6a3a850734aad00401bf8d6eb24fdf52d8", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d604f301b57f8ce33b0c0fe10818be937848a57/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d604f301b57f8ce33b0c0fe10818be937848a57/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=9d604f301b57f8ce33b0c0fe10818be937848a57", "patch": "@@ -123,11 +123,11 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether memory accesses should be alignment-checked.\n     fn enforce_alignment(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n-    /// Whether, when checking alignment, we should `force_int` and thus support\n+    /// Whether, when checking alignment, we should look at the actual address and thus support\n     /// custom alignment logic based on whatever the integer address happens to be.\n     ///\n-    /// Requires Provenance::OFFSET_IS_ADDR to be true.\n-    fn force_int_for_alignment_check(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    /// If this returns true, Provenance::OFFSET_IS_ADDR must be true.\n+    fn use_addr_for_alignment_check(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n@@ -437,8 +437,8 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type FrameExtra = ();\n \n     #[inline(always)]\n-    fn force_int_for_alignment_check(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        // We do not support `force_int`.\n+    fn use_addr_for_alignment_check(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        // We do not support `use_addr`.\n         false\n     }\n "}, {"sha": "692022c0babe65f84a2e4cefeac0c3abe4553f8b", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d604f301b57f8ce33b0c0fe10818be937848a57/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d604f301b57f8ce33b0c0fe10818be937848a57/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=9d604f301b57f8ce33b0c0fe10818be937848a57", "patch": "@@ -445,8 +445,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {\n-                    if M::force_int_for_alignment_check(self) {\n-                        // `force_int_for_alignment_check` can only be true if `OFFSET_IS_ADDR` is true.\n+                    if M::use_addr_for_alignment_check(self) {\n+                        // `use_addr_for_alignment_check` can only be true if `OFFSET_IS_ADDR` is true.\n                         check_offset_align(ptr.addr().bytes(), align)?;\n                     } else {\n                         // Check allocation alignment and offset alignment."}]}