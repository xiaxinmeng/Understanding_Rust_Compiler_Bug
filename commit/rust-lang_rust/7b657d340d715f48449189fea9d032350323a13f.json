{"sha": "7b657d340d715f48449189fea9d032350323a13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjU3ZDM0MGQ3MTVmNDg0NDkxODlmZWE5ZDAzMjM1MDMyM2ExM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T06:22:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T06:22:35Z"}, "message": "Auto merge of #70800 - Dylan-DPC:rollup-9jjoptp, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #70635 (rustc_target: Some cleanup to `no_default_libraries`)\n - #70748 (Do not disable field reordering on enums with big discriminant)\n - #70752 (Add slice::fill)\n - #70766 (use ManuallyDrop instead of forget inside collections)\n - #70768 (macro_rules: `NtLifetime` cannot start with an identifier)\n - #70783 (comment refers to removed type)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1b090e20669f59fc9fafd1a0a1e1bdf09082597e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b090e20669f59fc9fafd1a0a1e1bdf09082597e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b657d340d715f48449189fea9d032350323a13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b657d340d715f48449189fea9d032350323a13f", "html_url": "https://github.com/rust-lang/rust/commit/7b657d340d715f48449189fea9d032350323a13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b657d340d715f48449189fea9d032350323a13f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e129923b7e4d58a92c8a0530cd6eaa5be548342d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e129923b7e4d58a92c8a0530cd6eaa5be548342d", "html_url": "https://github.com/rust-lang/rust/commit/e129923b7e4d58a92c8a0530cd6eaa5be548342d"}, {"sha": "5c42fafaf9823d284917d64c18d5e98d5d705888", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c42fafaf9823d284917d64c18d5e98d5d705888", "html_url": "https://github.com/rust-lang/rust/commit/5c42fafaf9823d284917d64c18d5e98d5d705888"}], "stats": {"total": 149, "additions": 100, "deletions": 49}, "files": [{"sha": "db7420954a0918d11dfa944403d48df0c0f04570", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -469,8 +469,8 @@ impl<T: ?Sized> Box<T> {\n     #[inline]\n     #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n+        let b = mem::ManuallyDrop::new(b);\n         let mut unique = b.0;\n-        mem::forget(b);\n         // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n         // Stacked Borrows.  This function here corresponds to \"reborrowing to\n         // a raw pointer\", but there is no actual reborrow here -- so"}, {"sha": "36770ee416cb96b76b77504ec2324b3a53a47c9e", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -4,9 +4,10 @@ use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n use core::iter::{FromIterator, FusedIterator, Peekable};\n use core::marker::PhantomData;\n+use core::mem::{self, ManuallyDrop};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, RangeBounds};\n-use core::{fmt, mem, ptr};\n+use core::{fmt, ptr};\n \n use super::node::{self, marker, ForceResult::*, Handle, InsertResult::*, NodeRef};\n use super::search::{self, SearchResult::*};\n@@ -190,9 +191,9 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n                             // We can't destructure subtree directly\n                             // because BTreeMap implements Drop\n                             let (subroot, sublength) = unsafe {\n+                                let subtree = ManuallyDrop::new(subtree);\n                                 let root = ptr::read(&subtree.root);\n                                 let length = subtree.length;\n-                                mem::forget(subtree);\n                                 (root, length)\n                             };\n \n@@ -1515,15 +1516,14 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type IntoIter = IntoIter<K, V>;\n \n     fn into_iter(self) -> IntoIter<K, V> {\n-        if self.root.is_none() {\n-            mem::forget(self);\n+        let me = ManuallyDrop::new(self);\n+        if me.root.is_none() {\n             return IntoIter { front: None, back: None, length: 0 };\n         }\n \n-        let root1 = unsafe { unwrap_unchecked(ptr::read(&self.root)).into_ref() };\n-        let root2 = unsafe { unwrap_unchecked(ptr::read(&self.root)).into_ref() };\n-        let len = self.length;\n-        mem::forget(self);\n+        let root1 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n+        let root2 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n+        let len = me.length;\n \n         IntoIter {\n             front: Some(root1.first_leaf_edge()),"}, {"sha": "c17a37c7bae12f0fa268f2a2afe3a32692955ded", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -12,7 +12,7 @@ use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::iter::{once, repeat_with, FromIterator, FusedIterator};\n-use core::mem::{self, replace};\n+use core::mem::{self, replace, ManuallyDrop};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, IndexMut, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -2898,12 +2898,12 @@ impl<T> From<Vec<T>> for VecDeque<T> {\n     /// This avoids reallocating where possible, but the conditions for that are\n     /// strict, and subject to change, and so shouldn't be relied upon unless the\n     /// `Vec<T>` came from `From<VecDeque<T>>` and hasn't been reallocated.\n-    fn from(mut other: Vec<T>) -> Self {\n+    fn from(other: Vec<T>) -> Self {\n         unsafe {\n+            let mut other = ManuallyDrop::new(other);\n             let other_buf = other.as_mut_ptr();\n             let mut buf = RawVec::from_raw_parts(other_buf, other.capacity());\n             let len = other.len();\n-            mem::forget(other);\n \n             // We need to extend the buf if it's not a power of two, too small\n             // or doesn't have at least one free space\n@@ -2955,16 +2955,15 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n         other.make_contiguous();\n \n         unsafe {\n+            let other = ManuallyDrop::new(other);\n             let buf = other.buf.ptr();\n             let len = other.len();\n             let cap = other.cap();\n \n             if other.head != 0 {\n                 ptr::copy(buf.add(other.tail), buf, len);\n             }\n-            let out = Vec::from_raw_parts(buf, len, cap);\n-            mem::forget(other);\n-            out\n+            Vec::from_raw_parts(buf, len, cap)\n         }\n     }\n }"}, {"sha": "12e32fd9d352c77811c8cb00cf4f7a411eccb566", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -3,7 +3,7 @@\n \n use core::alloc::MemoryBlock;\n use core::cmp;\n-use core::mem::{self, MaybeUninit};\n+use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::Drop;\n use core::ptr::{NonNull, Unique};\n use core::slice;\n@@ -112,11 +112,10 @@ impl<T> RawVec<T, Global> {\n     }\n \n     /// Converts a `Box<[T]>` into a `RawVec<T>`.\n-    pub fn from_box(mut slice: Box<[T]>) -> Self {\n+    pub fn from_box(slice: Box<[T]>) -> Self {\n         unsafe {\n-            let result = RawVec::from_raw_parts(slice.as_mut_ptr(), slice.len());\n-            mem::forget(slice);\n-            result\n+            let mut slice = ManuallyDrop::new(slice);\n+            RawVec::from_raw_parts(slice.as_mut_ptr(), slice.len())\n         }\n     }\n }\n@@ -579,11 +578,10 @@ impl<T> RawVec<T, Global> {\n             \"`len` must be smaller than or equal to `self.capacity()`\"\n         );\n \n+        let me = ManuallyDrop::new(self);\n         // NOTE: not calling `capacity()` here; actually using the real `cap` field!\n-        let slice = slice::from_raw_parts_mut(self.ptr() as *mut MaybeUninit<T>, len);\n-        let output = Box::from_raw(slice);\n-        mem::forget(self);\n-        output\n+        let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n+        Box::from_raw(slice)\n     }\n }\n "}, {"sha": "80574efe06276f21cc53e4ec821c068807316323", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -66,7 +66,7 @@ use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::marker::PhantomData;\n-use core::mem;\n+use core::mem::{self, ManuallyDrop};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Index, IndexMut, RangeBounds};\n use core::ptr::{self, NonNull};\n@@ -392,7 +392,7 @@ impl<T> Vec<T> {\n     /// ```\n     #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n     pub fn into_raw_parts(self) -> (*mut T, usize, usize) {\n-        let mut me = mem::ManuallyDrop::new(self);\n+        let mut me = ManuallyDrop::new(self);\n         (me.as_mut_ptr(), me.len(), me.capacity())\n     }\n \n@@ -678,9 +678,9 @@ impl<T> Vec<T> {\n     pub fn into_boxed_slice(mut self) -> Box<[T]> {\n         unsafe {\n             self.shrink_to_fit();\n-            let buf = ptr::read(&self.buf);\n-            let len = self.len();\n-            mem::forget(self);\n+            let me = ManuallyDrop::new(self);\n+            let buf = ptr::read(&me.buf);\n+            let len = me.len();\n             buf.into_box(len).assume_init()\n         }\n     }\n@@ -1949,16 +1949,16 @@ impl<T> IntoIterator for Vec<T> {\n     /// }\n     /// ```\n     #[inline]\n-    fn into_iter(mut self) -> IntoIter<T> {\n+    fn into_iter(self) -> IntoIter<T> {\n         unsafe {\n-            let begin = self.as_mut_ptr();\n+            let mut me = ManuallyDrop::new(self);\n+            let begin = me.as_mut_ptr();\n             let end = if mem::size_of::<T>() == 0 {\n-                arith_offset(begin as *const i8, self.len() as isize) as *const T\n+                arith_offset(begin as *const i8, me.len() as isize) as *const T\n             } else {\n-                begin.add(self.len()) as *const T\n+                begin.add(me.len()) as *const T\n             };\n-            let cap = self.buf.capacity();\n-            mem::forget(self);\n+            let cap = me.buf.capacity();\n             IntoIter {\n                 buf: NonNull::new_unchecked(begin),\n                 phantom: PhantomData,\n@@ -2081,9 +2081,8 @@ impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n         // has not been advanced at all.\n         if iterator.buf.as_ptr() as *const _ == iterator.ptr {\n             unsafe {\n-                let vec = Vec::from_raw_parts(iterator.buf.as_ptr(), iterator.len(), iterator.cap);\n-                mem::forget(iterator);\n-                vec\n+                let it = ManuallyDrop::new(iterator);\n+                Vec::from_raw_parts(it.buf.as_ptr(), it.len(), it.cap)\n             }\n         } else {\n             let mut vector = Vec::new();"}, {"sha": "66aad3246183f5ee39f5de92d6a8ac150a19268f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -23,6 +23,7 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n+use crate::borrow::Borrow;\n use crate::cmp;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::fmt;\n@@ -2145,6 +2146,29 @@ impl<T> [T] {\n         }\n     }\n \n+    /// Fills `self` with elements by cloning `value`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_fill)]\n+    ///\n+    /// let mut buf = vec![0; 10];\n+    /// buf.fill(1);\n+    /// assert_eq!(buf, vec![1; 10]);\n+    /// ```\n+    #[unstable(feature = \"slice_fill\", issue = \"70758\")]\n+    pub fn fill<V>(&mut self, value: V)\n+    where\n+        V: Borrow<T>,\n+        T: Clone,\n+    {\n+        let value = value.borrow();\n+        for el in self {\n+            el.clone_from(value)\n+        }\n+    }\n+\n     /// Copies the elements from `src` into `self`.\n     ///\n     /// The length of `src` must be the same as `self`."}, {"sha": "acf8f1adbc2e862d6efd7a9a7a3da4a893addb23", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -136,7 +136,6 @@ pub fn diagnostics_registry() -> Registry {\n }\n \n // Parse args and run the compiler. This is the primary entry point for rustc.\n-// See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler(\n     at_args: &[String],"}, {"sha": "5fb800972c78340cb01721d92a30006ff21c14ab", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -768,7 +768,7 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n     /// Checks whether the non-terminal may contain a single (non-keyword) identifier.\n     fn may_be_ident(nt: &token::Nonterminal) -> bool {\n         match *nt {\n-            token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) => false,\n+            token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_) => false,\n             _ => true,\n         }\n     }"}, {"sha": "5740f8cc091c42c65568fcb564ce447059267cbd", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -285,11 +285,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n-        let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n-        if let StructKind::Prefixed(_, align) = kind {\n-            optimize &= align.bytes() == 1;\n-        }\n-\n+        let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n             let end =\n                 if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n@@ -307,6 +303,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     });\n                 }\n                 StructKind::Prefixed(..) => {\n+                    // Sort in ascending alignment so that the layout stay optimal\n+                    // regardless of the prefix\n                     optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n                 }\n             }"}, {"sha": "3f9dad689fd590d67765f118005ca8ca16d0a1fe", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -14,7 +14,6 @@ pub fn opts() -> TargetOptions {\n         has_elf_tls: true,\n         linker_is_gnu: true,\n         pre_link_args,\n-        no_default_libraries: true,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n         relocation_model: \"static\".to_string(),"}, {"sha": "650219c21ac4047132b2a739f246fa397353e6c5", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -15,7 +15,6 @@ pub fn opts() -> TargetOptions {\n         has_elf_tls: true,\n         linker_is_gnu: true,\n         pre_link_args,\n-        no_default_libraries: true,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n         relocation_model: \"static\".to_string(),"}, {"sha": "34fcdf251b89b7961325ad7daecaa205faa17366", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -77,7 +77,6 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n-        no_default_libraries: true,\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,"}, {"sha": "f19bd10dc0bbd1986611f304157d6cdca0efec48", "filename": "src/librustc_target/spec/windows_uwp_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -43,7 +43,6 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: \"lib\".to_string(),\n         staticlib_suffix: \".a\".to_string(),\n-        no_default_libraries: true,\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,"}, {"sha": "407094d55ffef63d3dbceaa8eea7f3c9c1df3a29", "filename": "src/test/ui/macros/issue-70446.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Ftest%2Fui%2Fmacros%2Fissue-70446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Ftest%2Fui%2Fmacros%2Fissue-70446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-70446.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+macro_rules! foo {\n+    ($(: $p:path)? $(: $l:lifetime)? ) => { bar! {$(: $p)? $(: $l)? } };\n+}\n+\n+macro_rules! bar {\n+    ($(: $p:path)? $(: $l:lifetime)? ) => {};\n+}\n+\n+foo! {: 'a }\n+\n+fn main() {}"}, {"sha": "6a3f3c98f127a96d1b5e0a3c93e7d1e1f95b0018", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7b657d340d715f48449189fea9d032350323a13f/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b657d340d715f48449189fea9d032350323a13f/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=7b657d340d715f48449189fea9d032350323a13f", "patch": "@@ -37,6 +37,29 @@ enum ReorderedEnum {\n     B(u8, u16, u8),\n }\n \n+enum ReorderedEnum2 {\n+    A(u8, u32, u8),\n+    B(u16, u8, u16, u8),\n+\n+    // 0x100 niche variants.\n+    _00, _01, _02, _03, _04, _05, _06, _07, _08, _09, _0A, _0B, _0C, _0D, _0E, _0F,\n+    _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _1A, _1B, _1C, _1D, _1E, _1F,\n+    _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _2A, _2B, _2C, _2D, _2E, _2F,\n+    _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _3A, _3B, _3C, _3D, _3E, _3F,\n+    _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _4A, _4B, _4C, _4D, _4E, _4F,\n+    _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _5A, _5B, _5C, _5D, _5E, _5F,\n+    _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _6A, _6B, _6C, _6D, _6E, _6F,\n+    _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _7A, _7B, _7C, _7D, _7E, _7F,\n+    _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _8A, _8B, _8C, _8D, _8E, _8F,\n+    _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _9A, _9B, _9C, _9D, _9E, _9F,\n+    _A0, _A1, _A2, _A3, _A4, _A5, _A6, _A7, _A8, _A9, _AA, _AB, _AC, _AD, _AE, _AF,\n+    _B0, _B1, _B2, _B3, _B4, _B5, _B6, _B7, _B8, _B9, _BA, _BB, _BC, _BD, _BE, _BF,\n+    _C0, _C1, _C2, _C3, _C4, _C5, _C6, _C7, _C8, _C9, _CA, _CB, _CC, _CD, _CE, _CF,\n+    _D0, _D1, _D2, _D3, _D4, _D5, _D6, _D7, _D8, _D9, _DA, _DB, _DC, _DD, _DE, _DF,\n+    _E0, _E1, _E2, _E3, _E4, _E5, _E6, _E7, _E8, _E9, _EA, _EB, _EC, _ED, _EE, _EF,\n+    _F0, _F1, _F2, _F3, _F4, _F5, _F6, _F7, _F8, _F9, _FA, _FB, _FC, _FD, _FE, _FF,\n+}\n+\n enum EnumEmpty {}\n \n enum EnumSingle1 {\n@@ -104,6 +127,8 @@ pub fn main() {\n     assert_eq!(size_of::<e3>(), 4 as usize);\n     assert_eq!(size_of::<ReorderedStruct>(), 4);\n     assert_eq!(size_of::<ReorderedEnum>(), 6);\n+    assert_eq!(size_of::<ReorderedEnum2>(), 8);\n+\n \n     assert_eq!(size_of::<EnumEmpty>(), 0);\n     assert_eq!(size_of::<EnumSingle1>(), 0);"}]}