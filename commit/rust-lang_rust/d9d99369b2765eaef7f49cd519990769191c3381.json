{"sha": "d9d99369b2765eaef7f49cd519990769191c3381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDk5MzY5YjI3NjVlYWVmN2Y0OWNkNTE5OTkwNzY5MTkxYzMzODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-15T23:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T23:12:59Z"}, "message": "Merge #2271\n\n2271: Force passing Source when creating a SourceAnalyzer r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5685e9db16e4a35c7ff3158d5c09becf9a45b31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5685e9db16e4a35c7ff3158d5c09becf9a45b31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d99369b2765eaef7f49cd519990769191c3381", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzzD7CRBK7hj4Ov3rIwAAdHIIAFjqVQtJ6xB2jDj2DUnlyFF0\n7in44LWS2mtFQOEpeqxo5oRGDahtw61C9V9t7eAvtcMoAoX/GQpFGQ3Rv4bTMZtz\nz3Cx3X4XDXF8tpOIonLcipVin9OO+QH8q/0bH8AOY9sAD2/RGvOAUGQknkZ4vSZE\nUDBynaN2lfD5UpC8gD3z6yrKNclFPtVAo7ioKm1OChfbCZPj8r1gRYJgrJkYXtxA\nvCLAdoxPI/xk10Cr4aYrcnBTFldwlBt+wQ58HgBDLQ7neRzgUgbM+srxHszKE1Ac\nIIye5gHhAKOT6BKr8AXU1NiufqeKW99kz0eKNl66NVmoxdVf4IqJlj6MK5W8nSY=\n=4qOe\n-----END PGP SIGNATURE-----\n", "payload": "tree 5685e9db16e4a35c7ff3158d5c09becf9a45b31d\nparent 69f3b01dc5dd70d9bdf6de4d859ad593a689395d\nparent d898ecb8f2c19eb041bcb27c7ce9edd9d891f2c2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573859579 +0000\ncommitter GitHub <noreply@github.com> 1573859579 +0000\n\nMerge #2271\n\n2271: Force passing Source when creating a SourceAnalyzer r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d99369b2765eaef7f49cd519990769191c3381", "html_url": "https://github.com/rust-lang/rust/commit/d9d99369b2765eaef7f49cd519990769191c3381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d99369b2765eaef7f49cd519990769191c3381/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f3b01dc5dd70d9bdf6de4d859ad593a689395d", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f3b01dc5dd70d9bdf6de4d859ad593a689395d", "html_url": "https://github.com/rust-lang/rust/commit/69f3b01dc5dd70d9bdf6de4d859ad593a689395d"}, {"sha": "d898ecb8f2c19eb041bcb27c7ce9edd9d891f2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d898ecb8f2c19eb041bcb27c7ce9edd9d891f2c2", "html_url": "https://github.com/rust-lang/rust/commit/d898ecb8f2c19eb041bcb27c7ce9edd9d891f2c2"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "0ea84d5488d017676e61c5bf0760c66c73caafeb", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -117,7 +117,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        SourceAnalyzer::new(self.db, self.frange.file_id, node, offset)\n+        SourceAnalyzer::new(self.db, hir::Source::new(self.frange.file_id.into(), node), offset)\n     }\n \n     pub(crate) fn covering_node_for_range(&self, range: TextRange) -> SyntaxElement {"}, {"sha": "5764dc26d1ec3df803cbdd9e5a396ceaf25e3b33", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -12,7 +12,6 @@ use hir_def::{\n     path::known,\n };\n use hir_expand::{name::AsName, Source};\n-use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n@@ -30,38 +29,32 @@ use crate::{\n     HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n };\n \n-fn try_get_resolver_for_node(\n-    db: &impl HirDatabase,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n-) -> Option<Resolver> {\n+fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n     match_ast! {\n-        match node {\n+        match (node.ast) {\n             ast::Module(it) => {\n-                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                let src = node.with_ast(it);\n                 Some(crate::Module::from_declaration(db, src)?.resolver(db))\n             },\n              ast::SourceFile(it) => {\n-                let src =\n-                    crate::Source { file_id: file_id.into(), ast: crate::ModuleSource::SourceFile(it) };\n+                let src = node.with_ast(crate::ModuleSource::SourceFile(it));\n                 Some(crate::Module::from_definition(db, src)?.resolver(db))\n             },\n             ast::StructDef(it) => {\n-                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                let src = node.with_ast(it);\n                 Some(Struct::from_source(db, src)?.resolver(db))\n             },\n             ast::EnumDef(it) => {\n-                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                let src = node.with_ast(it);\n                 Some(Enum::from_source(db, src)?.resolver(db))\n             },\n-            _ => {\n-                if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n-                    Some(def_with_body_from_child_node(db, Source::new(file_id.into(), node))?.resolver(db))\n-                } else {\n-                    // FIXME add missing cases\n-                    None\n+            _ => match node.ast.kind() {\n+                FN_DEF | CONST_DEF | STATIC_DEF => {\n+                    Some(def_with_body_from_child_node(db, node)?.resolver(db))\n                 }\n-            },\n+                // FIXME add missing cases\n+                _ => None\n+            }\n         }\n     }\n }\n@@ -90,7 +83,6 @@ fn def_with_body_from_child_node(\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n-    // FIXME: this doesn't handle macros at all\n     file_id: HirFileId,\n     resolver: Resolver,\n     body_owner: Option<DefWithBody>,\n@@ -137,20 +129,16 @@ pub struct ReferenceDescriptor {\n impl SourceAnalyzer {\n     pub fn new(\n         db: &impl HirDatabase,\n-        file_id: FileId,\n-        node: &SyntaxNode,\n+        node: Source<&SyntaxNode>,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let node_source = Source::new(file_id.into(), node);\n-        let def_with_body = def_with_body_from_child_node(db, node_source);\n+        let def_with_body = def_with_body_from_child_node(db, node);\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n             let scopes = def.expr_scopes(db);\n             let scope = match offset {\n-                None => scope_for(&scopes, &source_map, node_source),\n-                Some(offset) => {\n-                    scope_for_offset(&scopes, &source_map, Source::new(file_id.into(), offset))\n-                }\n+                None => scope_for(&scopes, &source_map, node),\n+                Some(offset) => scope_for_offset(&scopes, &source_map, node.with_ast(offset)),\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n@@ -159,19 +147,20 @@ impl SourceAnalyzer {\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n-                file_id: file_id.into(),\n+                file_id: node.file_id,\n             }\n         } else {\n             SourceAnalyzer {\n                 resolver: node\n+                    .ast\n                     .ancestors()\n-                    .find_map(|node| try_get_resolver_for_node(db, file_id, &node))\n+                    .find_map(|it| try_get_resolver_for_node(db, node.with_ast(&it)))\n                     .unwrap_or_default(),\n                 body_owner: None,\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n-                file_id: file_id.into(),\n+                file_id: node.file_id,\n             }\n         }\n     }"}, {"sha": "9a26e02fa27b3bf31fc7e035bc6686adb9e2f8f3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -1,3 +1,6 @@\n+mod never_type;\n+mod coercion;\n+\n use std::fmt::Write;\n use std::sync::Arc;\n \n@@ -11,17 +14,14 @@ use ra_syntax::{\n use test_utils::covers;\n \n use crate::{\n-    expr::BodySourceMap, test_db::TestDB, ty::display::HirDisplay, ty::InferenceResult,\n+    expr::BodySourceMap, test_db::TestDB, ty::display::HirDisplay, ty::InferenceResult, Source,\n     SourceAnalyzer,\n };\n \n // These tests compare the inference results for all expressions in a file\n // against snapshots of the expected results using insta. Use cargo-insta to\n // update the snapshots.\n \n-mod never_type;\n-mod coercion;\n-\n #[test]\n fn cfg_impl_block() {\n     let (db, pos) = TestDB::with_position(\n@@ -4609,7 +4609,8 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n fn type_at_pos(db: &TestDB, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();\n-    let analyzer = SourceAnalyzer::new(db, pos.file_id, expr.syntax(), Some(pos.offset));\n+    let analyzer =\n+        SourceAnalyzer::new(db, Source::new(pos.file_id.into(), expr.syntax()), Some(pos.offset));\n     let ty = analyzer.type_of(db, &expr).unwrap();\n     ty.display(db).to_string()\n }\n@@ -4674,7 +4675,7 @@ fn infer(content: &str) -> String {\n \n     for node in source_file.syntax().descendants() {\n         if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n-            let analyzer = SourceAnalyzer::new(&db, file_id, &node, None);\n+            let analyzer = SourceAnalyzer::new(&db, Source::new(file_id.into(), &node), None);\n             infer_def(analyzer.inference_result(), analyzer.body_source_map());\n         }\n     }\n@@ -4715,7 +4716,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         let file = db.parse(pos.file_id).ok().unwrap();\n         let node = file.syntax().token_at_offset(pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n-            SourceAnalyzer::new(&db, pos.file_id, &node, None);\n+            SourceAnalyzer::new(&db, Source::new(pos.file_id.into(), &node), None);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"infer\"))\n     }\n@@ -4735,7 +4736,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         let file = db.parse(pos.file_id).ok().unwrap();\n         let node = file.syntax().token_at_offset(pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n-            SourceAnalyzer::new(&db, pos.file_id, &node, None);\n+            SourceAnalyzer::new(&db, Source::new(pos.file_id.into(), &node), None);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n     }"}, {"sha": "41ee81511219bced3e8a43a6cdabfe83424538db", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -19,7 +19,11 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let calling_node = FnCallNode::with_node(&syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n \n-    let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n+    let analyzer = hir::SourceAnalyzer::new(\n+        db,\n+        hir::Source::new(position.file_id.into(), name_ref.syntax()),\n+        None,\n+    );\n     let (mut call_info, has_self) = match &calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst"}, {"sha": "0906a4e1b6382d6ddd60be391dbd134d2fd2cb43", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -58,8 +58,11 @@ impl<'a> CompletionContext<'a> {\n         );\n         let token =\n             original_parse.tree().syntax().token_at_offset(position.offset).left_biased()?;\n-        let analyzer =\n-            hir::SourceAnalyzer::new(db, position.file_id, &token.parent(), Some(position.offset));\n+        let analyzer = hir::SourceAnalyzer::new(\n+            db,\n+            hir::Source::new(position.file_id.into(), &token.parent()),\n+            Some(position.offset),\n+        );\n         let mut ctx = CompletionContext {\n             db,\n             analyzer,"}, {"sha": "2327cb1e71bde23074bd1dc8f175c9a34e730709", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -18,7 +18,8 @@ pub(crate) fn goto_type_definition(\n             .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())\n     })?;\n \n-    let analyzer = hir::SourceAnalyzer::new(db, position.file_id, &node, None);\n+    let analyzer =\n+        hir::SourceAnalyzer::new(db, hir::Source::new(position.file_id.into(), &node), None);\n \n     let ty: hir::Ty = if let Some(ty) =\n         ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))"}, {"sha": "92b4b1f79b1ebb4e48609aa9c1b1120276bbd582", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -230,7 +230,8 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n         .ancestors()\n         .take_while(|it| it.text_range() == leaf_node.text_range())\n         .find(|it| ast::Expr::cast(it.clone()).is_some() || ast::Pat::cast(it.clone()).is_some())?;\n-    let analyzer = hir::SourceAnalyzer::new(db, frange.file_id, &node, None);\n+    let analyzer =\n+        hir::SourceAnalyzer::new(db, hir::Source::new(frange.file_id.into(), &node), None);\n     let ty = if let Some(ty) = ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))\n     {\n         ty"}, {"sha": "0cd95984835cf0be9b43e6e9c63fd23cb6285959", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -32,18 +32,17 @@ fn get_inlay_hints(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<Vec<InlayHint>> {\n+    let analyzer = SourceAnalyzer::new(db, hir::Source::new(file_id.into(), node), None);\n     match_ast! {\n         match node {\n             ast::LetStmt(it) => {\n                 if it.ascribed_type().is_some() {\n                     return None;\n                 }\n                 let pat = it.pat()?;\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 Some(get_pat_type_hints(db, &analyzer, pat, false))\n             },\n             ast::LambdaExpr(it) => {\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 it.param_list().map(|param_list| {\n                     param_list\n                         .params()\n@@ -56,21 +55,17 @@ fn get_inlay_hints(\n             },\n             ast::ForExpr(it) => {\n                 let pat = it.pat()?;\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 Some(get_pat_type_hints(db, &analyzer, pat, false))\n             },\n             ast::IfExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 Some(get_pat_type_hints(db, &analyzer, pat, true))\n             },\n             ast::WhileExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 Some(get_pat_type_hints(db, &analyzer, pat, true))\n             },\n             ast::MatchArmList(it) => {\n-                let analyzer = SourceAnalyzer::new(db, file_id, it.syntax(), None);\n                 Some(\n                     it\n                         .arms()"}, {"sha": "f12b58cb9f84f341cbdae4b88284352200813c89", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -129,7 +129,8 @@ pub(crate) fn classify_name_ref(\n     let _p = profile(\"classify_name_ref\");\n \n     let parent = name_ref.syntax().parent()?;\n-    let analyzer = SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n+    let analyzer =\n+        SourceAnalyzer::new(db, hir::Source::new(file_id.into(), name_ref.syntax()), None);\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n         tested_by!(goto_definition_works_for_methods);"}, {"sha": "9931fec84730629c665e122643fb7b0db9f3e6e8", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d99369b2765eaef7f49cd519990769191c3381/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=d9d99369b2765eaef7f49cd519990769191c3381", "patch": "@@ -176,9 +176,11 @@ impl SourceFile {\n /// ```\n #[macro_export]\n macro_rules! match_ast {\n-    (match $node:ident {\n+    (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n+\n+    (match ($node:expr) {\n         $( ast::$ast:ident($it:ident) => $res:block, )*\n-        _ => $catch_all:expr,\n+        _ => $catch_all:expr $(,)?\n     }) => {{\n         $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n         { $catch_all }"}]}