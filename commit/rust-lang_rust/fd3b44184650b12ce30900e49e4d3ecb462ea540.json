{"sha": "fd3b44184650b12ce30900e49e4d3ecb462ea540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkM2I0NDE4NDY1MGIxMmNlMzA5MDBlNDllNGQzZWNiNDYyZWE1NDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-28T08:27:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: move `fresh_binding`.", "tree": {"sha": "bb4c2d1309e76db85db4ca481aac652c566e7e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4c2d1309e76db85db4ca481aac652c566e7e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3b44184650b12ce30900e49e4d3ecb462ea540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3b44184650b12ce30900e49e4d3ecb462ea540", "html_url": "https://github.com/rust-lang/rust/commit/fd3b44184650b12ce30900e49e4d3ecb462ea540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3b44184650b12ce30900e49e4d3ecb462ea540/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f343e84f402fa25e45f29606398fb50d69a9a07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f343e84f402fa25e45f29606398fb50d69a9a07e", "html_url": "https://github.com/rust-lang/rust/commit/f343e84f402fa25e45f29606398fb50d69a9a07e"}], "stats": {"total": 107, "additions": 52, "deletions": 55}, "files": [{"sha": "1b550bd7b0f5640cb3406bb5d839813682dd897c", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/fd3b44184650b12ce30900e49e4d3ecb462ea540/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3b44184650b12ce30900e49e4d3ecb462ea540/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=fd3b44184650b12ce30900e49e4d3ecb462ea540", "patch": "@@ -1272,35 +1272,71 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         debug!(\"(resolving block) leaving block\");\n     }\n \n-    fn fresh_binding(&mut self,\n-                     ident: Ident,\n-                     pat_id: NodeId,\n-                     outer_pat_id: NodeId,\n-                     pat_src: PatternSource,\n-                     bindings: &mut IdentMap<NodeId>)\n-                     -> Res {\n-        // Add the binding to the local ribs, if it\n-        // doesn't already exist in the bindings map. (We\n-        // must not add it if it's in the bindings map\n-        // because that breaks the assumptions later\n-        // passes make about or-patterns.)\n+    fn resolve_pattern(\n+        &mut self,\n+        pat: &Pat,\n+        pat_src: PatternSource,\n+        // Maps idents to the node ID for the outermost pattern that binds them.\n+        bindings: &mut IdentMap<NodeId>,\n+    ) {\n+        // Visit all direct subpatterns of this pattern.\n+        let outer_pat_id = pat.id;\n+        pat.walk(&mut |pat| {\n+            debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.node);\n+            match pat.node {\n+                PatKind::Ident(bmode, ident, ref sub) => {\n+                    // First try to resolve the identifier as some existing entity,\n+                    // then fall back to a fresh binding.\n+                    let has_sub = sub.is_some();\n+                    let res = self.try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n+                        .unwrap_or_else(|| {\n+                            self.fresh_binding(ident, pat.id, outer_pat_id, pat_src, bindings)\n+                        });\n+                    self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                }\n+                PatKind::TupleStruct(ref path, ..) => {\n+                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct);\n+                }\n+                PatKind::Path(ref qself, ref path) => {\n+                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);\n+                }\n+                PatKind::Struct(ref path, ..) => {\n+                    self.smart_resolve_path(pat.id, None, path, PathSource::Struct);\n+                }\n+                _ => {}\n+            }\n+            true\n+        });\n+\n+        visit::walk_pat(self, pat);\n+    }\n+\n+    fn fresh_binding(\n+        &mut self,\n+        ident: Ident,\n+        pat_id: NodeId,\n+        outer_pat_id: NodeId,\n+        pat_src: PatternSource,\n+        bindings: &mut IdentMap<NodeId>,\n+    ) -> Res {\n+        // Add the binding to the local ribs, if it doesn't already exist in the bindings map.\n+        // (We must not add it if it's in the bindings map because that breaks the assumptions\n+        // later passes make about or-patterns.)\n         let ident = ident.modern_and_legacy();\n         let mut res = Res::Local(pat_id);\n         match bindings.get(&ident).cloned() {\n             Some(id) if id == outer_pat_id => {\n                 // `Variant(a, a)`, error\n                 self.r.report_error(\n                     ident.span,\n-                    ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(\n-                        &ident.as_str())\n+                    ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(&ident.as_str()),\n                 );\n             }\n             Some(..) if pat_src == PatternSource::FnParam => {\n                 // `fn f(a: u8, a: u8)`, error\n                 self.r.report_error(\n                     ident.span,\n-                    ResolutionError::IdentifierBoundMoreThanOnceInParameterList(\n-                        &ident.as_str())\n+                    ResolutionError::IdentifierBoundMoreThanOnceInParameterList(&ident.as_str()),\n                 );\n             }\n             Some(..) if pat_src == PatternSource::Match ||\n@@ -1329,45 +1365,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         &mut self.ribs[ns].last_mut().unwrap().bindings\n     }\n \n-    fn resolve_pattern(\n-        &mut self,\n-        pat: &Pat,\n-        pat_src: PatternSource,\n-        // Maps idents to the node ID for the outermost pattern that binds them.\n-        bindings: &mut IdentMap<NodeId>,\n-    ) {\n-        // Visit all direct subpatterns of this pattern.\n-        let outer_pat_id = pat.id;\n-        pat.walk(&mut |pat| {\n-            debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.node);\n-            match pat.node {\n-                PatKind::Ident(bmode, ident, ref sub) => {\n-                    // First try to resolve the identifier as some existing entity,\n-                    // then fall back to a fresh binding.\n-                    let has_sub = sub.is_some();\n-                    let res = self.try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n-                        .unwrap_or_else(|| {\n-                            self.fresh_binding(ident, pat.id, outer_pat_id, pat_src, bindings)\n-                        });\n-                    self.r.record_partial_res(pat.id, PartialRes::new(res));\n-                }\n-                PatKind::TupleStruct(ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct);\n-                }\n-                PatKind::Path(ref qself, ref path) => {\n-                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);\n-                }\n-                PatKind::Struct(ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, None, path, PathSource::Struct);\n-                }\n-                _ => {}\n-            }\n-            true\n-        });\n-\n-        visit::walk_pat(self, pat);\n-    }\n-\n     fn try_resolve_as_non_binding(\n         &mut self,\n         pat_src: PatternSource,"}]}