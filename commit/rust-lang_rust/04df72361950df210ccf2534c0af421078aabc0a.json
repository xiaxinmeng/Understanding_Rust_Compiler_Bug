{"sha": "04df72361950df210ccf2534c0af421078aabc0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZGY3MjM2MTk1MGRmMjEwY2NmMjUzNGMwYWY0MjEwNzhhYWJjMGE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2012-12-11T22:34:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:27:06Z"}, "message": "priority_queue: fix siftup/siftdown naming", "tree": {"sha": "baff403bd01d2fbb45b4560ced4338679f405a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baff403bd01d2fbb45b4560ced4338679f405a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04df72361950df210ccf2534c0af421078aabc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04df72361950df210ccf2534c0af421078aabc0a", "html_url": "https://github.com/rust-lang/rust/commit/04df72361950df210ccf2534c0af421078aabc0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04df72361950df210ccf2534c0af421078aabc0a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd0d7155495486b35c67772eb96c930af2cf7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd0d7155495486b35c67772eb96c930af2cf7d0", "html_url": "https://github.com/rust-lang/rust/commit/7bd0d7155495486b35c67772eb96c930af2cf7d0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "fba9a8577a8706e882a42f24c4d2aa0328e2db8d", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04df72361950df210ccf2534c0af421078aabc0a/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df72361950df210ccf2534c0af421078aabc0a/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=04df72361950df210ccf2534c0af421078aabc0a", "patch": "@@ -39,7 +39,7 @@ impl <T: Copy Ord> PriorityQueue<T> {\n     /// Pop the greatest item from the queue - fails if empty\n     fn pop(&mut self) -> T {\n         let mut item = self.data.pop();\n-        if self.is_not_empty() { item <-> self.data[0]; self.siftup(0); }\n+        if self.is_not_empty() { item <-> self.data[0]; self.siftdown(0); }\n         item\n     }\n \n@@ -51,15 +51,15 @@ impl <T: Copy Ord> PriorityQueue<T> {\n     /// Push an item onto the queue\n     fn push(&mut self, item: T) {\n         self.data.push(item);\n-        self.siftdown(0, self.len() - 1);\n+        self.siftup(0, self.len() - 1);\n     }\n \n     /// Optimized version of a push followed by a pop\n     fn push_pop(&mut self, item: T) -> T {\n         let mut item = item;\n         if self.is_not_empty() && self.data[0] > item {\n             item <-> self.data[0];\n-            self.siftup(0);\n+            self.siftdown(0);\n         }\n         item\n     }\n@@ -68,7 +68,7 @@ impl <T: Copy Ord> PriorityQueue<T> {\n     fn replace(&mut self, item: T) -> T {\n         let mut item = item;\n         item <-> self.data[0];\n-        self.siftup(0);\n+        self.siftdown(0);\n         item\n     }\n \n@@ -82,7 +82,7 @@ impl <T: Copy Ord> PriorityQueue<T> {\n         while end > 1 {\n             end -= 1;\n             q.data[end] <-> q.data[0];\n-            unsafe { q.siftup_range(0, end) } // purity-checking workaround\n+            unsafe { q.siftdown_range(0, end) } // purity-checking workaround\n         }\n         q.to_vec()\n     }\n@@ -92,12 +92,12 @@ impl <T: Copy Ord> PriorityQueue<T> {\n         let mut n = q.len() / 2;\n         while n > 0 {\n             n -= 1;\n-            unsafe { q.siftup(n) }; // purity-checking workaround\n+            unsafe { q.siftdown(n) }; // purity-checking workaround\n         }\n         q\n     }\n \n-    priv fn siftdown(&mut self, startpos: uint, pos: uint) {\n+    priv fn siftup(&mut self, startpos: uint, pos: uint) {\n         let mut pos = pos;\n         let newitem = self.data[pos];\n \n@@ -114,7 +114,7 @@ impl <T: Copy Ord> PriorityQueue<T> {\n         self.data[pos] = newitem;\n     }\n \n-    priv fn siftup_range(&mut self, pos: uint, endpos: uint) {\n+    priv fn siftdown_range(&mut self, pos: uint, endpos: uint) {\n         let mut pos = pos;\n         let startpos = pos;\n         let newitem = self.data[pos];\n@@ -131,11 +131,11 @@ impl <T: Copy Ord> PriorityQueue<T> {\n             childpos = 2 * pos + 1;\n         }\n         self.data[pos] = newitem;\n-        self.siftdown(startpos, pos);\n+        self.siftup(startpos, pos);\n     }\n \n-    priv fn siftup(&mut self, pos: uint) {\n-        self.siftup_range(pos, self.len());\n+    priv fn siftdown(&mut self, pos: uint) {\n+        self.siftdown_range(pos, self.len());\n     }\n }\n "}]}