{"sha": "db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjA0YjIwYWI1ZWQ3ZjI3MDI3YTk1Yzc2YzZkNmU3NGViNDQzZDY=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-01T06:23:41Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-01T10:10:43Z"}, "message": "syntax::diagnostic: Remove @ from Emitter", "tree": {"sha": "4de53ab9c26435bd416daafe9abbcef1e0e89faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de53ab9c26435bd416daafe9abbcef1e0e89faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "html_url": "https://github.com/rust-lang/rust/commit/db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db204b20ab5ed7f27027a95c76c6d6e74eb443d6/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe10c63326eee6220900dcbb92197ccf26e2025b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe10c63326eee6220900dcbb92197ccf26e2025b", "html_url": "https://github.com/rust-lang/rust/commit/fe10c63326eee6220900dcbb92197ccf26e2025b"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "e6afdf7fe1466f306ef0bbf17e43f36ad8ba67a0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db204b20ab5ed7f27027a95c76c6d6e74eb443d6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db204b20ab5ed7f27027a95c76c6d6e74eb443d6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "patch": "@@ -348,7 +348,7 @@ struct RustcEmitter {\n \n impl diagnostic::Emitter for RustcEmitter {\n     fn emit(&self,\n-            cmsp: Option<(@codemap::CodeMap, codemap::Span)>,\n+            cmsp: Option<(&codemap::CodeMap, codemap::Span)>,\n             msg: &str,\n             lvl: diagnostic::level) {\n         if lvl == diagnostic::fatal {"}, {"sha": "c905281cdb235c17e3bfe6581a817aa80a83d70a", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db204b20ab5ed7f27027a95c76c6d6e74eb443d6/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db204b20ab5ed7f27027a95c76c6d6e74eb443d6/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=db204b20ab5ed7f27027a95c76c6d6e74eb443d6", "patch": "@@ -21,7 +21,7 @@ static BUG_REPORT_URL: &'static str =\n \n pub trait Emitter {\n     fn emit(&self,\n-            cmsp: Option<(@codemap::CodeMap, Span)>,\n+            cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level);\n }\n@@ -36,18 +36,18 @@ pub struct SpanHandler {\n \n impl SpanHandler {\n     pub fn span_fatal(@mut self, sp: Span, msg: &str) -> ! {\n-        self.handler.emit(Some((self.cm, sp)), msg, fatal);\n+        self.handler.emit(Some((&*self.cm, sp)), msg, fatal);\n         fail!();\n     }\n     pub fn span_err(@mut self, sp: Span, msg: &str) {\n-        self.handler.emit(Some((self.cm, sp)), msg, error);\n+        self.handler.emit(Some((&*self.cm, sp)), msg, error);\n         self.handler.bump_err_count();\n     }\n     pub fn span_warn(@mut self, sp: Span, msg: &str) {\n-        self.handler.emit(Some((self.cm, sp)), msg, warning);\n+        self.handler.emit(Some((&*self.cm, sp)), msg, warning);\n     }\n     pub fn span_note(@mut self, sp: Span, msg: &str) {\n-        self.handler.emit(Some((self.cm, sp)), msg, note);\n+        self.handler.emit(Some((&*self.cm, sp)), msg, note);\n     }\n     pub fn span_bug(@mut self, sp: Span, msg: &str) -> ! {\n         self.span_fatal(sp, ice_msg(msg));\n@@ -111,7 +111,7 @@ impl Handler {\n         self.bug(~\"unimplemented \" + msg);\n     }\n     pub fn emit(@mut self,\n-            cmsp: Option<(@codemap::CodeMap, Span)>,\n+            cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level) {\n         self.emit.emit(cmsp, msg, lvl);\n@@ -227,7 +227,7 @@ pub struct DefaultEmitter;\n \n impl Emitter for DefaultEmitter {\n     fn emit(&self,\n-            cmsp: Option<(@codemap::CodeMap, Span)>,\n+            cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level) {\n         match cmsp {\n@@ -244,20 +244,20 @@ impl Emitter for DefaultEmitter {\n     }\n }\n \n-fn highlight_lines(cm: @codemap::CodeMap,\n+fn highlight_lines(cm: &codemap::CodeMap,\n                    sp: Span,\n                    lvl: level,\n-                   lines: @codemap::FileLines) {\n+                   lines: &codemap::FileLines) {\n     let fm = lines.file;\n     let mut err = io::stderr();\n     let err = &mut err as &mut io::Writer;\n \n     // arbitrarily only print up to six lines of the error\n     let max_lines = 6u;\n     let mut elided = false;\n-    let mut display_lines = /* FIXME (#2543) */ lines.lines.clone();\n+    let mut display_lines = lines.lines.as_slice();\n     if display_lines.len() > max_lines {\n-        display_lines = display_lines.slice(0u, max_lines).to_owned();\n+        display_lines = display_lines.slice(0u, max_lines);\n         elided = true;\n     }\n     // Print the offending lines\n@@ -311,7 +311,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n     }\n }\n \n-fn print_macro_backtrace(cm: @codemap::CodeMap, sp: Span) {\n+fn print_macro_backtrace(cm: &codemap::CodeMap, sp: Span) {\n     for ei in sp.expn_info.iter() {\n         let ss = ei.callee.span.as_ref().map_default(~\"\", |span| cm.span_to_str(*span));\n         let (pre, post) = match ei.callee.format {"}]}