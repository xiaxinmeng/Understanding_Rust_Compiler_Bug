{"sha": "03936115eff4c1aa2be1ceeea87238ec7c822d90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTM2MTE1ZWZmNGMxYWEyYmUxY2VlZWE4NzIzOGVjN2M4MjJkOTA=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-01-01T20:42:12Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-01-01T21:05:29Z"}, "message": "Check all repr hints together when checking for mis-applied attributes\n\nFixes #47094\n\nBesides fixing that bug, this change has a user-visible effect on the spans in the \"incompatible repr hints\" warning and another error: they now point at `foo` and/or `bar` in `repr(foo, bar)` instead of the whole attribute. This is sometimes more precise (e.g., `#[repr(C, packed)]` on an enum points at the `packed`) but sometimes not. I moved a compile-fail test to a ui test to illustrate how it now looks in the common case of only one attribute.", "tree": {"sha": "9282db8809c7cc7d86fc75d63e6fd1941b15e9ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9282db8809c7cc7d86fc75d63e6fd1941b15e9ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03936115eff4c1aa2be1ceeea87238ec7c822d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03936115eff4c1aa2be1ceeea87238ec7c822d90", "html_url": "https://github.com/rust-lang/rust/commit/03936115eff4c1aa2be1ceeea87238ec7c822d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03936115eff4c1aa2be1ceeea87238ec7c822d90/comments", "author": null, "committer": null, "parents": [{"sha": "00fbfcce961c9e2acb82473234140a376e093a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/00fbfcce961c9e2acb82473234140a376e093a7a", "html_url": "https://github.com/rust-lang/rust/commit/00fbfcce961c9e2acb82473234140a376e093a7a"}], "stats": {"total": 174, "additions": 130, "deletions": 44}, "files": [{"sha": "7792726006859c58da0b177b040858e0e93bc88f", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -47,14 +47,15 @@ struct CheckAttrVisitor<'a> {\n \n impl<'a> CheckAttrVisitor<'a> {\n     /// Check any attribute.\n-    fn check_attribute(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n-        if let Some(name) = attr.name() {\n-            match &*name.as_str() {\n-                \"inline\" => self.check_inline(attr, item, target),\n-                \"repr\" => self.check_repr(attr, item, target),\n-                _ => (),\n+    fn check_attributes(&self, item: &ast::Item, target: Target) {\n+        for attr in &item.attrs {\n+            if let Some(name) = attr.name() {\n+                if name == \"inline\" {\n+                    self.check_inline(attr, item, target)\n+                }\n             }\n         }\n+        self.check_repr(item, target);\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n@@ -66,63 +67,67 @@ impl<'a> CheckAttrVisitor<'a> {\n         }\n     }\n \n-    /// Check if an `#[repr]` attr is valid.\n-    fn check_repr(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n-        let words = match attr.meta_item_list() {\n-            Some(words) => words,\n-            None => {\n-                return;\n-            }\n-        };\n+    /// Check if the `#[repr]` attributes on `item` are valid.\n+    fn check_repr(&self, item: &ast::Item, target: Target) {\n+        // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n+        // ```\n+        // #[repr(foo)]\n+        // #[repr(bar, align(8))]\n+        // ```\n+        let hints: Vec<_> = item.attrs\n+            .iter()\n+            .filter(|attr| match attr.name() {\n+                Some(name) => name == \"repr\",\n+                None => false,\n+            })\n+            .filter_map(|attr| attr.meta_item_list())\n+            .flat_map(|hints| hints)\n+            .collect();\n \n         let mut int_reprs = 0;\n         let mut is_c = false;\n         let mut is_simd = false;\n \n-        for word in words {\n-\n-            let name = match word.name() {\n-                Some(word) => word,\n-                None => continue,\n+        for hint in &hints {\n+            let name = if let Some(name) = hint.name() {\n+                name\n+            } else {\n+                // Invalid repr hint like repr(42). We don't check for unrecognized hints here\n+                // (libsyntax does that), so just ignore it.\n+                continue;\n             };\n \n-            let (message, label) = match &*name.as_str() {\n+            let (article, allowed_targets) = match &*name.as_str() {\n                 \"C\" => {\n                     is_c = true;\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n-                                (\"attribute should be applied to struct, enum or union\",\n-                                 \"a struct, enum or union\")\n+                                (\"a\", \"struct, enum or union\")\n                     } else {\n                         continue\n                     }\n                 }\n                 \"packed\" => {\n-                    // Do not increment conflicting_reprs here, because \"packed\"\n-                    // can be used to modify another repr hint\n                     if target != Target::Struct &&\n                             target != Target::Union {\n-                                (\"attribute should be applied to struct or union\",\n-                                 \"a struct or union\")\n+                                (\"a\", \"struct or union\")\n                     } else {\n                         continue\n                     }\n                 }\n                 \"simd\" => {\n                     is_simd = true;\n                     if target != Target::Struct {\n-                        (\"attribute should be applied to struct\",\n-                         \"a struct\")\n+                        (\"a\", \"struct\")\n                     } else {\n                         continue\n                     }\n                 }\n                 \"align\" => {\n                     if target != Target::Struct &&\n                             target != Target::Union {\n-                        (\"attribute should be applied to struct or union\",\n-                         \"a struct or union\")\n+                        (\"a\", \"struct or union\")\n                     } else {\n                         continue\n                     }\n@@ -132,24 +137,27 @@ impl<'a> CheckAttrVisitor<'a> {\n                 \"isize\" | \"usize\" => {\n                     int_reprs += 1;\n                     if target != Target::Enum {\n-                        (\"attribute should be applied to enum\",\n-                         \"an enum\")\n+                        (\"an\", \"enum\")\n                     } else {\n                         continue\n                     }\n                 }\n                 _ => continue,\n             };\n-            struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n-                .span_label(item.span, format!(\"not {}\", label))\n+            struct_span_err!(self.sess, hint.span, E0517,\n+                             \"attribute should be applied to {}\", allowed_targets)\n+                .span_label(item.span, format!(\"not {} {}\", article, allowed_targets))\n                 .emit();\n         }\n \n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n            || (is_simd && is_c)\n            || (int_reprs == 1 && is_c && is_c_like_enum(item)) {\n-            span_warn!(self.sess, attr.span, E0566,\n+            // Just point at all repr hints. This is not ideal, but tracking precisely which ones\n+            // are at fault is a huge hassle.\n+            let spans: Vec<_> = hints.iter().map(|hint| hint.span).collect();\n+            span_warn!(self.sess, spans, E0566,\n                        \"conflicting representation hints\");\n         }\n     }\n@@ -158,9 +166,7 @@ impl<'a> CheckAttrVisitor<'a> {\n impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         let target = Target::from_item(item);\n-        for attr in &item.attrs {\n-            self.check_attribute(attr, item, target);\n-        }\n+        self.check_attributes(item, target);\n         visit::walk_item(self, item);\n     }\n }"}, {"sha": "db5cd47fe0efab84bcaab41a373eafeb49516728", "filename": "src/test/ui/attr-usage-repr.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n #![feature(attr_literals)]\n #![feature(repr_simd)]\n ", "previous_filename": "src/test/compile-fail/attr-usage-repr.rs"}, {"sha": "b9c012630e9f35022befc7947e7abe86f64b2428", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -0,0 +1,42 @@\n+error[E0517]: attribute should be applied to struct, enum or union\n+  --> $DIR/attr-usage-repr.rs:14:8\n+   |\n+14 | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n+   |        ^\n+15 | fn f() {}\n+   | --------- not a struct, enum or union\n+\n+error[E0517]: attribute should be applied to enum\n+  --> $DIR/attr-usage-repr.rs:26:8\n+   |\n+26 | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n+   |        ^^\n+27 | struct SInt(f64, f64);\n+   | ---------------------- not an enum\n+\n+error[E0517]: attribute should be applied to struct or union\n+  --> $DIR/attr-usage-repr.rs:32:8\n+   |\n+32 | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n+   |        ^^^^^^^^\n+33 | enum EAlign { A, B }\n+   | -------------------- not a struct or union\n+\n+error[E0517]: attribute should be applied to struct or union\n+  --> $DIR/attr-usage-repr.rs:35:8\n+   |\n+35 | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n+   |        ^^^^^^\n+36 | enum EPacked { A, B }\n+   | --------------------- not a struct or union\n+\n+error[E0517]: attribute should be applied to struct\n+  --> $DIR/attr-usage-repr.rs:38:8\n+   |\n+38 | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n+   |        ^^^^\n+39 | enum ESimd { A, B }\n+   | ------------------- not a struct\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "a603658d3161015f4a56551d7c90260ba5f43161", "filename": "src/test/ui/feature-gate-simd-ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -13,7 +13,6 @@\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-#[repr(C)]\n struct LocalSimd(u8, u8);\n \n extern {"}, {"sha": "ab1ebefa333ea702dcdb72aa74f60d7f7cc17383", "filename": "src/test/ui/feature-gate-simd-ffi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -1,15 +1,15 @@\n error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n-  --> $DIR/feature-gate-simd-ffi.rs:20:17\n+  --> $DIR/feature-gate-simd-ffi.rs:19:17\n    |\n-20 |     fn baz() -> LocalSimd; //~ ERROR use of SIMD type\n+19 |     fn baz() -> LocalSimd; //~ ERROR use of SIMD type\n    |                 ^^^^^^^^^\n    |\n    = help: add #![feature(simd_ffi)] to the crate attributes to enable\n \n error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n-  --> $DIR/feature-gate-simd-ffi.rs:21:15\n+  --> $DIR/feature-gate-simd-ffi.rs:20:15\n    |\n-21 |     fn qux(x: LocalSimd); //~ ERROR use of SIMD type\n+20 |     fn qux(x: LocalSimd); //~ ERROR use of SIMD type\n    |               ^^^^^^^^^\n    |\n    = help: add #![feature(simd_ffi)] to the crate attributes to enable"}, {"sha": "3ab9d4e6d5a8f9088933320c8f3085d388714eea", "filename": "src/test/ui/issue-47094.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fissue-47094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fissue-47094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47094.rs?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#[repr(C,u8)]\n+enum Foo {\n+    A,\n+    B,\n+}\n+\n+#[repr(C)]\n+#[repr(u8)]\n+enum Bar {\n+    A,\n+    B,\n+}\n+\n+fn main() {}"}, {"sha": "5276b881e4c6b6731a6939f7d626bdbc7117836c", "filename": "src/test/ui/issue-47094.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fissue-47094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03936115eff4c1aa2be1ceeea87238ec7c822d90/src%2Ftest%2Fui%2Fissue-47094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47094.stderr?ref=03936115eff4c1aa2be1ceeea87238ec7c822d90", "patch": "@@ -0,0 +1,14 @@\n+warning[E0566]: conflicting representation hints\n+  --> $DIR/issue-47094.rs:13:8\n+   |\n+13 | #[repr(C,u8)]\n+   |        ^ ^^\n+\n+warning[E0566]: conflicting representation hints\n+  --> $DIR/issue-47094.rs:19:8\n+   |\n+19 | #[repr(C)]\n+   |        ^\n+20 | #[repr(u8)]\n+   |        ^^\n+"}]}