{"sha": "5b070610118a98d96869af4cad79575d4edc5941", "node_id": "C_kwDOAAsO6NoAKDViMDcwNjEwMTE4YTk4ZDk2ODY5YWY0Y2FkNzk1NzVkNGVkYzU5NDE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-10T10:24:01Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-10T10:40:40Z"}, "message": "Test `TokenTree`s' equality modulo `Punct`s' spacing", "tree": {"sha": "4d8aa6c4af799bb96300ec137acd9132fe670871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8aa6c4af799bb96300ec137acd9132fe670871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b070610118a98d96869af4cad79575d4edc5941", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNs1TEACgkQ4laYqTBY\nYXEZmRAAqhg19lvbUaQ9VQGQHKasjzoY4MUaJmbd8+2rwCMZ1K4OlQ6fIhsdbooB\nA+k7U/8L+/50cr0ZEUSV5vQgKznVWsjCl3F/Ntlso0/U7BAjotV1tO8fK8hF5OJ1\nWVZYF80UdUa8N9CIcvkFswLs4IN+IEu8zCceuNZtjPHaM0TpyjHybyfLsHpOydTS\nXtl+usQfGpvS8ju9qtOOwSkyr5LIHGqBbtugN0IxzKDDJFk7Aztjo/ruB7xDePv+\nrLbhzUYgANS1oRhkXxjBqqprfy+9dEZPHjh5OF7+LT/nd5RsIAIPajqaRhJTqr2k\nVtyCTk1rA6jUp9JdC4uqWn0gqHdVDsKjpY5+3BhdaihXKDyXJsfFrQkhIH3m1BKG\nMS76gJwyry8xoGRiAyS8cymK2WLn3DIM6ne/vQiyVO7remP2t+qGQC+cTrcYkidV\nLt5fQYk2tFOEqLnpQWYiaaN7ynUc+rl/ZQDC6x+cSKXFNUqQMghaf1eIPpwKb0Ws\nqy5DKaP0l57tJIu32mormepmok8m41EjTQumed0Jo7SylfO0z5+osHNvYMpIq18t\nquOTVL3tdzLx9lYxFDBLl4eg6p9trsoha2ZUBN3LgHNHFtOwOaOjBIN+UuexNXY6\nU95bHuiZUJG7RpFhPu91QTBqDqrQZ2++EApa3yM0MBNDhZy1DM4=\n=xUGn\n-----END PGP SIGNATURE-----", "payload": "tree 4d8aa6c4af799bb96300ec137acd9132fe670871\nparent 4f415fc3489d5a8e910a035455d7d33f15928ed7\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1668075841 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1668076840 +0900\n\nTest `TokenTree`s' equality modulo `Punct`s' spacing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b070610118a98d96869af4cad79575d4edc5941", "html_url": "https://github.com/rust-lang/rust/commit/5b070610118a98d96869af4cad79575d4edc5941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b070610118a98d96869af4cad79575d4edc5941/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f415fc3489d5a8e910a035455d7d33f15928ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f415fc3489d5a8e910a035455d7d33f15928ed7", "html_url": "https://github.com/rust-lang/rust/commit/4f415fc3489d5a8e910a035455d7d33f15928ed7"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "a4abe75626e6dcacf24df7e822857e404eecc919", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5b070610118a98d96869af4cad79575d4edc5941/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b070610118a98d96869af4cad79575d4edc5941/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=5b070610118a98d96869af4cad79575d4edc5941", "patch": "@@ -329,6 +329,31 @@ mod tests {\n \n     use super::reverse_fixups;\n \n+    // The following three functions are only meant to check partial structural equivalence of\n+    // `TokenTree`s, see the last assertion in `check()`.\n+    fn check_leaf_eq(a: &tt::Leaf, b: &tt::Leaf) -> bool {\n+        match (a, b) {\n+            (tt::Leaf::Literal(a), tt::Leaf::Literal(b)) => a.text == b.text,\n+            (tt::Leaf::Punct(a), tt::Leaf::Punct(b)) => a.char == b.char,\n+            (tt::Leaf::Ident(a), tt::Leaf::Ident(b)) => a.text == b.text,\n+            _ => false,\n+        }\n+    }\n+\n+    fn check_subtree_eq(a: &tt::Subtree, b: &tt::Subtree) -> bool {\n+        a.delimiter.map(|it| it.kind) == b.delimiter.map(|it| it.kind)\n+            && a.token_trees.len() == b.token_trees.len()\n+            && a.token_trees.iter().zip(&b.token_trees).all(|(a, b)| check_tt_eq(a, b))\n+    }\n+\n+    fn check_tt_eq(a: &tt::TokenTree, b: &tt::TokenTree) -> bool {\n+        match (a, b) {\n+            (tt::TokenTree::Leaf(a), tt::TokenTree::Leaf(b)) => check_leaf_eq(a, b),\n+            (tt::TokenTree::Subtree(a), tt::TokenTree::Subtree(b)) => check_subtree_eq(a, b),\n+            _ => false,\n+        }\n+    }\n+\n     #[track_caller]\n     fn check(ra_fixture: &str, mut expect: Expect) {\n         let parsed = syntax::SourceFile::parse(ra_fixture);\n@@ -341,8 +366,7 @@ mod tests {\n             fixups.append,\n         );\n \n-        let mut actual = tt.to_string();\n-        actual.push('\\n');\n+        let actual = format!(\"{}\\n\", tt);\n \n         expect.indent(false);\n         expect.assert_eq(&actual);\n@@ -358,9 +382,12 @@ mod tests {\n         reverse_fixups(&mut tt, &tmap, &fixups.undo_info);\n \n         // the fixed-up + reversed version should be equivalent to the original input\n-        // (but token IDs don't matter)\n+        // modulo token IDs and `Punct`s' spacing.\n         let (original_as_tt, _) = mbe::syntax_node_to_token_tree(&parsed.syntax_node());\n-        assert_eq!(tt.to_string(), original_as_tt.to_string());\n+        assert!(\n+            check_subtree_eq(&tt, &original_as_tt),\n+            \"different token tree: {tt:?}, {original_as_tt:?}\"\n+        );\n     }\n \n     #[test]\n@@ -483,7 +510,6 @@ fn foo () {a . __ra_fixup}\n     }\n \n     #[test]\n-    #[ignore]\n     fn incomplete_field_expr_2() {\n         check(\n             r#\"\n@@ -492,13 +518,12 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-fn foo () {a .__ra_fixup ;}\n+fn foo () {a . __ra_fixup ;}\n \"#]],\n         )\n     }\n \n     #[test]\n-    #[ignore]\n     fn incomplete_field_expr_3() {\n         check(\n             r#\"\n@@ -508,7 +533,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-fn foo () {a .__ra_fixup ; bar () ;}\n+fn foo () {a . __ra_fixup ; bar () ;}\n \"#]],\n         )\n     }"}]}