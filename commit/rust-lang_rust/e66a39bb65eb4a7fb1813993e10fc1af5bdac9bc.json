{"sha": "e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NmEzOWJiNjVlYjRhN2ZiMTgxMzk5M2UxMGZjMWFmNWJkYWM5YmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T10:52:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: tweak `parse_item_` for more reuse.", "tree": {"sha": "c75175d4a7f6765c01c19ff515e95cfd6b4d5a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c75175d4a7f6765c01c19ff515e95cfd6b4d5a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "html_url": "https://github.com/rust-lang/rust/commit/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62930d31514d6d9b4b0df3755d643f06f0d4212a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62930d31514d6d9b4b0df3755d643f06f0d4212a", "html_url": "https://github.com/rust-lang/rust/commit/62930d31514d6d9b4b0df3755d643f06f0d4212a"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "c85b4c22d010af9ff56ebb65482f724d25afb260", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "patch": "@@ -25,21 +25,15 @@ pub(super) type ItemInfo = (Ident, ItemKind);\n \n impl<'a> Parser<'a> {\n     pub fn parse_item(&mut self) -> PResult<'a, Option<P<Item>>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        self.parse_item_(attrs, true, false)\n+        self.parse_item_(|_| true).map(|i| i.map(P))\n     }\n \n-    pub(super) fn parse_item_(\n-        &mut self,\n-        attrs: Vec<Attribute>,\n-        macros_allowed: bool,\n-        attributes_allowed: bool,\n-    ) -> PResult<'a, Option<P<Item>>> {\n-        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n-        Ok(item.map(P))\n+    fn parse_item_(&mut self, req_name: ReqName) -> PResult<'a, Option<Item>> {\n+        let attrs = self.parse_outer_attributes()?;\n+        self.parse_item_common(attrs, true, false, req_name)\n     }\n \n-    fn parse_item_common(\n+    pub(super) fn parse_item_common(\n         &mut self,\n         mut attrs: Vec<Attribute>,\n         mac_allowed: bool,\n@@ -653,9 +647,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses associated items.\n     fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        let it = self.parse_item_common(attrs, true, false, req_name)?;\n-        Ok(it.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n+        Ok(self.parse_item_(req_name)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n             let kind = match kind {\n                 ItemKind::Mac(a) => AssocItemKind::Macro(a),\n                 ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n@@ -844,9 +836,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n         maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n \n-        let attrs = self.parse_outer_attributes()?;\n-        let item = self.parse_item_common(attrs, true, false, |_| true)?;\n-        Ok(item.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n+        Ok(self.parse_item_(|_| true)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n             let kind = match kind {\n                 ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n                 ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),"}, {"sha": "bbfbe9c20df9446a58ceff711c8d76cc56e2a77f", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "patch": "@@ -81,11 +81,11 @@ impl<'a> Parser<'a> {\n         // FIXME: Bad copy of attrs\n         let old_directory_ownership =\n             mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n-        let item = self.parse_item_(attrs.clone(), false, true)?;\n+        let item = self.parse_item_common(attrs.clone(), false, true, |_| true)?;\n         self.directory.ownership = old_directory_ownership;\n \n         if let Some(item) = item {\n-            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(item))));\n+            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))));\n         }\n \n         // Do not attempt to parse an expression if we're done here."}]}