{"sha": "3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "node_id": "C_kwDOAAsO6NoAKDNkNmVhZThjZDIxMzRmMWRiMGI0Y2JkMTNjZTcwMmFjYmE2ZjM2YzQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T14:31:57Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T15:40:34Z"}, "message": "Move defs and bounds from Universal to LoweringContext", "tree": {"sha": "bd2d7882e9fee85da96c0c4a9d2cf37d09f2ed5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2d7882e9fee85da96c0c4a9d2cf37d09f2ed5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWNvQACgkQgTGiTgx5\n768x8Q//fJTlP6+GWVqeaApyR6HMhnnYPtGy+OO79KzP+l2GFRag8GuPiKIUu/it\nA0Cc+W1Su8J4wTMpN4o1Nduai1DbwETw6Uj/X85wfuni/i+BPI3s27bG+nEm1Kq2\nHhvD7c8UwvWXMdyYGS6GXBsXNgAwVeL53eYIVplCkvfMqc0GEIXoKAitbPC1XioO\nuK7S1G32TJOJnokE38PRA9kHXaP06dBuFX4gAlG4Y2Nqjgb1rauJREc3XJhoVU8f\nM57+BIcimWxTLkxPjkmYOHXi2dRcsi9qa6X6FddR/tzHrIQ0kUnFmM0BDL6TBNH5\nTnJUPqPItfdR/F+Gg4iyNpeoEqMDRqHtEHR/HmISdelQRBB4bs18oDYF8EbHhJ7g\njQ/uk7L3b4CAlHOIlExqJt3cD0BX2SZV98338vza9RzIRj3m1YtuLx94BYrJOk+g\nZ6Sdrb/ogd082ghmNuQxkVzrEuPvUqb5sxHI4TXS0Ffp4xWS3UqkkpHSz9cF9/RB\nr26iCmATRKGgbHMJGibMI12JY5luayOT6rVyas/gfNlD90xuECQ3uHZZZp9LGtBh\nGHESlASplJFJHBT+dv5SDvVt/hcc737z4zKdSv3hEfQiW9A1ZserlEZZXWdYhvSh\nqubiTL8nFCFEnsWfaBJ82oTsm2z9IWhU9R0eYe8Mfzm1jC5a0UU=\n=FJD/\n-----END PGP SIGNATURE-----", "payload": "tree bd2d7882e9fee85da96c0c4a9d2cf37d09f2ed5c\nparent 4a8d2e3856c0c75c71998b6c85937203839b946d\nauthor Santiago Pastorino <spastorino@gmail.com> 1654007517 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654011634 -0300\n\nMove defs and bounds from Universal to LoweringContext\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "html_url": "https://github.com/rust-lang/rust/commit/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8d2e3856c0c75c71998b6c85937203839b946d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8d2e3856c0c75c71998b6c85937203839b946d", "html_url": "https://github.com/rust-lang/rust/commit/4a8d2e3856c0c75c71998b6c85937203839b946d"}], "stats": {"total": 147, "additions": 60, "deletions": 87}, "files": [{"sha": "e12a3ad3b7963802b15a7c08363dee31f54766b0", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "patch": "@@ -83,6 +83,8 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             task_context: None,\n             current_item: None,\n             captured_lifetimes: None,\n+            impl_trait_defs: Vec::new(),\n+            impl_trait_bounds: Vec::new(),\n             allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),\n             allow_gen_future: Some([sym::gen_future][..].into()),\n             allow_into_future: Some([sym::into_future][..].into()),\n@@ -264,16 +266,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let (generics, decl) =\n-                        this.add_implicit_generics(generics, id, |this, idty, idpb| {\n-                            let ret_id = asyncness.opt_return_id();\n-                            this.lower_fn_decl(\n-                                &decl,\n-                                Some((id, idty, idpb)),\n-                                FnDeclKind::Fn,\n-                                ret_id,\n-                            )\n-                        });\n+                    let (generics, decl) = this.add_implicit_generics(generics, id, |this| {\n+                        let ret_id = asyncness.opt_return_id();\n+                        this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n+                    });\n                     let sig = hir::FnSig {\n                         decl,\n                         header: this.lower_fn_header(header),\n@@ -387,7 +383,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.add_implicit_generics(ast_generics, id, |this, _, _| {\n+                    self.add_implicit_generics(ast_generics, id, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n@@ -652,7 +648,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.add_implicit_generics(generics, i.id, |this, _, _| {\n+                        self.add_implicit_generics(generics, i.id, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n@@ -1231,8 +1227,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let (generics, decl) = self.add_implicit_generics(generics, id, |this, idty, idpb| {\n-            this.lower_fn_decl(&sig.decl, Some((id, idty, idpb)), kind, is_async)\n+        let (generics, decl) = self.add_implicit_generics(generics, id, |this| {\n+            this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n@@ -1292,7 +1288,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_generics_mut(\n         &mut self,\n         generics: &Generics,\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> GenericsCtor<'hir> {\n         // Error if `?Trait` bounds in where clauses don't refer directly to type parameters.\n         // Note: we used to clone these bounds directly onto the type parameter (and avoid lowering\n@@ -1372,7 +1368,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_generics(\n         &mut self,\n         generics: &Generics,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> &'hir hir::Generics<'hir> {\n         let generics_ctor = self.lower_generics_mut(generics, itctx);\n         generics_ctor.into_generics(self.arena)"}, {"sha": "fb846249103edb41bed144c8ad6bdab2518f8d9a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 45, "deletions": 68, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "patch": "@@ -121,6 +121,9 @@ struct LoweringContext<'a, 'hir: 'a> {\n     local_id_to_def_id: SortedMap<ItemLocalId, LocalDefId>,\n     trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,\n \n+    impl_trait_defs: Vec<hir::GenericParam<'hir>>,\n+    impl_trait_bounds: Vec<hir::WherePredicate<'hir>>,\n+\n     /// NodeIds that are lowered inside the current HIR owner.\n     node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,\n \n@@ -244,13 +247,13 @@ pub trait ResolverAstLowering {\n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,\n /// and if so, what meaning it has.\n #[derive(Debug)]\n-enum ImplTraitContext<'b, 'a> {\n+enum ImplTraitContext {\n     /// Treat `impl Trait` as shorthand for a new universal generic parameter.\n     /// Example: `fn foo(x: impl Debug)`, where `impl Debug` is conceptually\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n     ///\n     /// Newly generated parameters should be inserted into the given `Vec`.\n-    Universal(&'b mut Vec<hir::GenericParam<'a>>, &'b mut Vec<hir::WherePredicate<'a>>, LocalDefId),\n+    Universal(LocalDefId),\n \n     /// Treat `impl Trait` as shorthand for a new opaque type.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -290,11 +293,11 @@ enum ImplTraitPosition {\n     ImplReturn,\n }\n \n-impl<'a> ImplTraitContext<'_, 'a> {\n-    fn reborrow<'this>(&'this mut self) -> ImplTraitContext<'this, 'a> {\n+impl ImplTraitContext {\n+    fn reborrow<'this>(&'this mut self) -> ImplTraitContext {\n         use self::ImplTraitContext::*;\n         match self {\n-            Universal(params, bounds, parent) => Universal(params, bounds, *parent),\n+            Universal(parent) => Universal(*parent),\n             ReturnPositionOpaqueTy { origin } => ReturnPositionOpaqueTy { origin: *origin },\n             TypeAliasesOpaqueTy => TypeAliasesOpaqueTy,\n             Disallowed(pos) => Disallowed(*pos),\n@@ -701,34 +704,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,\n-        f: impl FnOnce(\n-            &mut Self,\n-            &mut Vec<hir::GenericParam<'hir>>,\n-            &mut Vec<hir::WherePredicate<'hir>>,\n-        ) -> T,\n+        f: impl FnOnce(&mut Self) -> T,\n     ) -> (&'hir hir::Generics<'hir>, T) {\n-        let mut impl_trait_defs = Vec::new();\n-        let mut impl_trait_bounds = Vec::new();\n-        let mut lowered_generics = self.lower_generics_mut(\n-            generics,\n-            ImplTraitContext::Universal(\n-                &mut impl_trait_defs,\n-                &mut impl_trait_bounds,\n-                self.current_hir_id_owner,\n-            ),\n-        );\n-        let res = f(self, &mut impl_trait_defs, &mut impl_trait_bounds);\n+        let mut lowered_generics = self\n+            .lower_generics_mut(generics, ImplTraitContext::Universal(self.current_hir_id_owner));\n+        let res = f(self);\n \n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n+        let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n         lowered_generics.params.extend(\n             extra_lifetimes\n                 .into_iter()\n                 .filter_map(|(ident, node_id, res)| {\n                     self.lifetime_res_to_generic_param(ident, node_id, res)\n                 })\n-                .chain(impl_trait_defs),\n+                .chain(impl_trait_defs.into_iter()),\n         );\n-        lowered_generics.predicates.extend(impl_trait_bounds);\n+        let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);\n+        lowered_generics.predicates.extend(impl_trait_bounds.into_iter());\n \n         let lowered_generics = lowered_generics.into_generics(self.arena);\n         (lowered_generics, res)\n@@ -898,7 +891,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n@@ -962,7 +955,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal(_, _, parent) if self.is_in_dyn_type => {\n+                    ImplTraitContext::Universal(parent) if self.is_in_dyn_type => {\n                         parent_def_id = parent;\n                         (true, itctx)\n                     }\n@@ -1036,7 +1029,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> hir::GenericArg<'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n@@ -1103,7 +1096,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext<'_, 'hir>) -> &'hir hir::Ty<'hir> {\n+    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n \n@@ -1113,7 +1106,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         path: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n         let id = self.lower_node_id(t.id);\n         let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n@@ -1128,7 +1121,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext<'_, 'hir>) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1235,40 +1228,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             |this| this.lower_param_bounds(bounds, nested_itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal(\n-                        in_band_ty_params,\n-                        in_band_ty_bounds,\n-                        parent_def_id,\n-                    ) => {\n+                    ImplTraitContext::Universal(parent_def_id) => {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        let hir_bounds = self.lower_param_bounds(\n-                            bounds,\n-                            ImplTraitContext::Universal(\n-                                in_band_ty_params,\n-                                in_band_ty_bounds,\n-                                parent_def_id,\n-                            ),\n-                        );\n+                        let hir_bounds = self\n+                            .lower_param_bounds(bounds, ImplTraitContext::Universal(parent_def_id));\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n-                        in_band_ty_params.push(hir::GenericParam {\n+                        let param = hir::GenericParam {\n                             hir_id: self.lower_node_id(def_node_id),\n                             name: ParamName::Plain(self.lower_ident(ident)),\n                             pure_wrt_drop: false,\n                             span: self.lower_span(span),\n                             kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n                             colon_span: None,\n-                        });\n+                        };\n+                        self.impl_trait_defs.push(param);\n+\n                         if let Some(preds) = self.lower_generic_bound_predicate(\n                             ident,\n                             def_node_id,\n                             &GenericParamKind::Type { default: None },\n                             hir_bounds,\n                             hir::PredicateOrigin::ImplTrait,\n                         ) {\n-                            in_band_ty_bounds.push(preds)\n+                            self.impl_trait_bounds.push(preds)\n                         }\n \n                         hir::TyKind::Path(hir::QPath::Resolved(\n@@ -1442,21 +1427,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n-        mut in_band_ty_params: Option<(\n-            NodeId,\n-            &mut Vec<hir::GenericParam<'hir>>,\n-            &mut Vec<hir::WherePredicate<'hir>>,\n-        )>,\n+        fn_node_id: Option<NodeId>,\n         kind: FnDeclKind,\n         make_ret_async: Option<NodeId>,\n     ) -> &'hir hir::FnDecl<'hir> {\n         debug!(\n             \"lower_fn_decl(\\\n             fn_decl: {:?}, \\\n-            in_band_ty_params: {:?}, \\\n+            fn_node_id: {:?}, \\\n             kind: {:?}, \\\n             make_ret_async: {:?})\",\n-            decl, in_band_ty_params, kind, make_ret_async,\n+            decl, fn_node_id, kind, make_ret_async,\n         );\n \n         let c_variadic = decl.c_variadic();\n@@ -1469,10 +1450,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs = &inputs[..inputs.len() - 1];\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n-            if let Some((_, ibty, ibpb)) = &mut in_band_ty_params {\n+            if fn_node_id.is_some() {\n                 self.lower_ty_direct(\n                     &param.ty,\n-                    ImplTraitContext::Universal(ibty, ibpb, self.current_hir_id_owner),\n+                    ImplTraitContext::Universal(self.current_hir_id_owner),\n                 )\n             } else {\n                 self.lower_ty_direct(\n@@ -1494,15 +1475,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let output = if let Some(ret_id) = make_ret_async {\n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n-                in_band_ty_params.expect(\"`make_ret_async` but no `fn_def_id`\").0,\n+                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n                 ret_id,\n             )\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n-                    let context = match in_band_ty_params {\n-                        Some((node_id, _, _)) if kind.impl_trait_return_allowed() => {\n-                            let fn_def_id = self.resolver.local_def_id(node_id);\n+                    let context = match fn_node_id {\n+                        Some(fn_node_id) if kind.impl_trait_return_allowed() => {\n+                            let fn_def_id = self.resolver.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                             }\n@@ -1788,7 +1769,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         match tpb {\n             GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n@@ -1966,11 +1947,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_trait_ref(\n-        &mut self,\n-        p: &TraitRef,\n-        itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> hir::TraitRef<'hir> {\n+    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n             qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n@@ -1982,7 +1959,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n         let bound_generic_params = self.lower_generic_params(&p.bound_generic_params);\n \n@@ -1993,22 +1970,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n-    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext<'_, 'hir>) -> hir::MutTy<'hir> {\n+    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy<'hir> {\n         hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n     }\n \n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> hir::GenericBounds<'hir> {\n         self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n     }\n \n     fn lower_param_bounds_mut<'s>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n-        mut itctx: ImplTraitContext<'s, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx.reborrow()))\n     }"}, {"sha": "0827fc8173e5de6716f19229e719b96e6e85c01b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=3d6eae8cd2134f1db0b4cbd13ce702acba6f36c4", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n         debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n@@ -180,7 +180,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         segment: &PathSegment,\n         param_mode: ParamMode,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        itctx: ImplTraitContext,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\"path_span: {:?}, lower_path_segment(segment: {:?})\", path_span, segment,);\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n@@ -318,7 +318,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         let has_non_lt_args = data.args.iter().any(|arg| match arg {\n             AngleBracketedArg::Arg(ast::GenericArg::Lifetime(_))"}]}