{"sha": "264e1b2edbba5fcb4dc0866fa168f434fe54876b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGUxYjJlZGJiYTVmY2I0ZGMwODY2ZmExNjhmNDM0ZmU1NDg3NmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T19:28:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T19:29:27Z"}, "message": "libcore: De-mode at_vec", "tree": {"sha": "1bbb3f467e6d3a5147a470cda766439315ac1862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bbb3f467e6d3a5147a470cda766439315ac1862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264e1b2edbba5fcb4dc0866fa168f434fe54876b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264e1b2edbba5fcb4dc0866fa168f434fe54876b", "html_url": "https://github.com/rust-lang/rust/commit/264e1b2edbba5fcb4dc0866fa168f434fe54876b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264e1b2edbba5fcb4dc0866fa168f434fe54876b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7db161eed68566db4ab8502f73e397fdf6b8e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7db161eed68566db4ab8502f73e397fdf6b8e7c", "html_url": "https://github.com/rust-lang/rust/commit/a7db161eed68566db4ab8502f73e397fdf6b8e7c"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "535aa4e37ec8e1f98f147ea99f37ac00460bc178", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/264e1b2edbba5fcb4dc0866fa168f434fe54876b/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264e1b2edbba5fcb4dc0866fa168f434fe54876b/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=264e1b2edbba5fcb4dc0866fa168f434fe54876b", "patch": "@@ -4,6 +4,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use cast::transmute;\n use ptr::addr_of;\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n@@ -48,10 +49,10 @@ pub pure fn capacity<T>(v: @[const T]) -> uint {\n #[inline(always)]\n pub pure fn build_sized<A>(size: uint,\n                            builder: &fn(push: pure fn(+v: A))) -> @[A] {\n-    let mut vec = @[];\n-    unsafe { raw::reserve(vec, size); }\n-    builder(|+x| unsafe { raw::push(vec, move x) });\n-    return vec;\n+    let mut vec: @[const A] = @[];\n+    unsafe { raw::reserve(&mut vec, size); }\n+    builder(|+x| unsafe { raw::push(&mut vec, move x) });\n+    return unsafe { transmute(vec) };\n }\n \n /**\n@@ -125,10 +126,10 @@ pub pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n  */\n-pub pure fn from_elem<T: Copy>(n_elts: uint, t: &T) -> @[T] {\n+pub pure fn from_elem<T: Copy>(n_elts: uint, +t: T) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n-        while i < n_elts { push(copy *t); i += 1u; }\n+        while i < n_elts { push(copy t); i += 1u; }\n     }\n }\n \n@@ -165,8 +166,8 @@ pub mod raw {\n     }\n \n     #[inline(always)]\n-    pub unsafe fn push<T>(v: @[const T], +initval: T) {\n-        let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n+    pub unsafe fn push<T>(v: &mut @[const T], +initval: T) {\n+        let repr: **VecRepr = ::cast::reinterpret_cast(&v);\n         let fill = (**repr).unboxed.fill;\n         if (**repr).unboxed.alloc > fill {\n             push_fast(v, move initval);\n@@ -177,16 +178,16 @@ pub mod raw {\n     }\n     // This doesn't bother to make sure we have space.\n     #[inline(always)] // really pretty please\n-    pub unsafe fn push_fast<T>(v: @[const T], +initval: T) {\n-        let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n+    pub unsafe fn push_fast<T>(v: &mut @[const T], +initval: T) {\n+        let repr: **VecRepr = ::cast::reinterpret_cast(&v);\n         let fill = (**repr).unboxed.fill;\n         (**repr).unboxed.fill += sys::size_of::<T>();\n         let p = ptr::addr_of((**repr).unboxed.data);\n         let p = ptr::offset(p, fill) as *mut T;\n         rusti::move_val_init(*p, move initval);\n     }\n \n-    pub unsafe fn push_slow<T>(v: @[const T], +initval: T) {\n+    pub unsafe fn push_slow<T>(v: &mut @[const T], +initval: T) {\n         reserve_at_least(v, v.len() + 1u);\n         push_fast(v, move initval);\n     }\n@@ -202,10 +203,10 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    pub unsafe fn reserve<T>(v: @[const T], n: uint) {\n+    pub unsafe fn reserve<T>(v: &mut @[const T], n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n-        if capacity(v) < n {\n-            let ptr = addr_of(v) as **VecRepr;\n+        if capacity(*v) < n {\n+            let ptr: **VecRepr = transmute(copy v);\n             rustrt::vec_reserve_shared_actual(sys::get_type_desc::<T>(),\n                                               ptr, n as libc::size_t);\n         }\n@@ -226,7 +227,7 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    pub unsafe fn reserve_at_least<T>(v: @[const T], n: uint) {\n+    pub unsafe fn reserve_at_least<T>(v: &mut @[const T], n: uint) {\n         reserve(v, uint::next_power_of_two(n));\n     }\n "}, {"sha": "f9c023597c4a812a37235ad1aa808886e92f381f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/264e1b2edbba5fcb4dc0866fa168f434fe54876b/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264e1b2edbba5fcb4dc0866fa168f434fe54876b/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=264e1b2edbba5fcb4dc0866fa168f434fe54876b", "patch": "@@ -70,9 +70,9 @@ struct Arena {\n }\n \n fn chunk(size: uint, is_pod: bool) -> Chunk {\n-    let mut v = @[];\n-    unsafe { at_vec::raw::reserve(v, size); }\n-    { data: v, mut fill: 0u, is_pod: is_pod }\n+    let mut v: @[const u8] = @[];\n+    unsafe { at_vec::raw::reserve(&mut v, size); }\n+    { data: unsafe { cast::transmute(v) }, mut fill: 0u, is_pod: is_pod }\n }\n \n fn arena_with_size(initial_size: uint) -> Arena {"}]}