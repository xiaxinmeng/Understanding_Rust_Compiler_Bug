{"sha": "1f15ce5f9748d523f3c1835da12b05b15648aa68", "node_id": "C_kwDOAAsO6NoAKDFmMTVjZTVmOTc0OGQ1MjNmM2MxODM1ZGExMmIwNWIxNTY0OGFhNjg", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-05-02T18:34:12Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-05-04T19:03:01Z"}, "message": "rustdoc-json: Fix HRTBs for WherePredicate::BoundPredicate", "tree": {"sha": "bf7741c364b6baef3cc540bb32d74f2d4af81fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7741c364b6baef3cc540bb32d74f2d4af81fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f15ce5f9748d523f3c1835da12b05b15648aa68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f15ce5f9748d523f3c1835da12b05b15648aa68", "html_url": "https://github.com/rust-lang/rust/commit/1f15ce5f9748d523f3c1835da12b05b15648aa68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f15ce5f9748d523f3c1835da12b05b15648aa68/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7121355756cc97bf1273a01d0206585d951699b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7121355756cc97bf1273a01d0206585d951699b", "html_url": "https://github.com/rust-lang/rust/commit/b7121355756cc97bf1273a01d0206585d951699b"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "412387313dc1719343e3809eaa3714472daf6cd5", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f15ce5f9748d523f3c1835da12b05b15648aa68/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f15ce5f9748d523f3c1835da12b05b15648aa68/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1f15ce5f9748d523f3c1835da12b05b15648aa68", "patch": "@@ -350,10 +350,16 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n     fn from_tcx(predicate: clean::WherePredicate, tcx: TyCtxt<'_>) -> Self {\n         use clean::WherePredicate::*;\n         match predicate {\n-            BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n+            BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-                // FIXME: add `bound_params` to rustdoc-json-params?\n+                generic_params: bound_params\n+                    .into_iter()\n+                    .map(|x| GenericParamDef {\n+                        name: x.0.to_string(),\n+                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                    })\n+                    .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n                 lifetime: lifetime.0.to_string(),"}, {"sha": "eb2c8e5bae1c43c7b81c6d5a641f11326f1386a5", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f15ce5f9748d523f3c1835da12b05b15648aa68/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f15ce5f9748d523f3c1835da12b05b15648aa68/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=1f15ce5f9748d523f3c1835da12b05b15648aa68", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 14;\n+pub const FORMAT_VERSION: u32 = 15;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -391,6 +391,14 @@ pub enum WherePredicate {\n         #[serde(rename = \"type\")]\n         type_: Type,\n         bounds: Vec<GenericBound>,\n+        /// Used for Higher-Rank Trait Bounds (HRTBs)\n+        /// ```plain\n+        /// where for<'a> &'a T: Iterator,\"\n+        ///       ^^^^^^^\n+        ///       |\n+        ///       this part\n+        /// ```\n+        generic_params: Vec<GenericParamDef>,\n     },\n     RegionPredicate {\n         lifetime: String,"}]}