{"sha": "e755963cbdbdfb97994eb861360f1aa0de1888c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTU5NjNjYmRiZGZiOTc5OTRlYjg2MTM2MGYxYWEwZGUxODg4YzI=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-10-29T15:19:16Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-10-29T15:25:37Z"}, "message": "save-analysis: Account for async desugaring in async fn return types", "tree": {"sha": "aa71854b46ece73d23c216eeca7479908564330a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa71854b46ece73d23c216eeca7479908564330a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e755963cbdbdfb97994eb861360f1aa0de1888c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e755963cbdbdfb97994eb861360f1aa0de1888c2", "html_url": "https://github.com/rust-lang/rust/commit/e755963cbdbdfb97994eb861360f1aa0de1888c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e755963cbdbdfb97994eb861360f1aa0de1888c2/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5ef813f0d6e3fe8edd3abb046a18f5b1a8cc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5ef813f0d6e3fe8edd3abb046a18f5b1a8cc48", "html_url": "https://github.com/rust-lang/rust/commit/eb5ef813f0d6e3fe8edd3abb046a18f5b1a8cc48"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "a372106d3795b57dc5c8a7615a4c9ca1828a20f4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e755963cbdbdfb97994eb861360f1aa0de1888c2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e755963cbdbdfb97994eb861360f1aa0de1888c2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e755963cbdbdfb97994eb861360f1aa0de1888c2", "patch": "@@ -300,7 +300,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n \n             if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n-                v.visit_ty(ret_ty);\n+                // In async functions, return types are desugared and redefined\n+                // as an `impl Trait` existential type. Because of this, to match\n+                // the definition paths when resolving nested types we need to\n+                // start walking from the newly-created definition.\n+                match sig.header.asyncness.node {\n+                    ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                        v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                    }\n+                    _ => v.visit_ty(ret_ty)\n+                }\n             }\n \n             // walk the fn body\n@@ -369,6 +378,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         &mut self,\n         item: &'l ast::Item,\n         decl: &'l ast::FnDecl,\n+        header: &'l ast::FnHeader,\n         ty_params: &'l ast::Generics,\n         body: &'l ast::Block,\n     ) {\n@@ -391,7 +401,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // FIXME: Opaque type desugaring prevents us from easily\n                     // processing trait bounds. See `visit_ty` for more details.\n                 } else {\n-                    v.visit_ty(&ret_ty);\n+                    // In async functions, return types are desugared and redefined\n+                    // as an `impl Trait` existential type. Because of this, to match\n+                    // the definition paths when resolving nested types we need to\n+                    // start walking from the newly-created definition.\n+                    match header.asyncness.node {\n+                        ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                            v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                        }\n+                        _ => v.visit_ty(ret_ty)\n+                    }\n                 }\n             }\n \n@@ -1315,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, .., ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, ty_params, &body)\n+            Fn(ref decl, ref header, ref ty_params, ref body) => {\n+                self.process_fn(item, &decl, &header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "27874f8655e56c7bde9c5af7b305c75004c3d85c", "filename": "src/test/ui/save-analysis/issue-65590.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e755963cbdbdfb97994eb861360f1aa0de1888c2/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e755963cbdbdfb97994eb861360f1aa0de1888c2/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs?ref=e755963cbdbdfb97994eb861360f1aa0de1888c2", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// compile-flags: -Zsave-analysis\n+// edition:2018\n+\n+// Async desugaring for return types in (associated) functions introduces a\n+// separate definition internally, which we need to take into account\n+// (or else we ICE).\n+trait Trait { type Assoc; }\n+struct Struct;\n+\n+async fn foobar<T: Trait>() -> T::Assoc {\n+    unimplemented!()\n+}\n+\n+impl Struct {\n+    async fn foo<T: Trait>(&self) -> T::Assoc {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}]}