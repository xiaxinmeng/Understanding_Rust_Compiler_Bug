{"sha": "4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZWI2ZWZiNmQ1ODRhZTc2MzI3ODdlZGZmNjBmM2Q5ZTRlYjczODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T14:13:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "replace use of DebruijnIndex in `for_each_free_region`\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "80eb6ea87da55719ef132aca784c048a7c747cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80eb6ea87da55719ef132aca784c048a7c747cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "html_url": "https://github.com/rust-lang/rust/commit/4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aeb6efb6d584ae7632787edff60f3d9e4eb7384/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c9ae77f74eae4ff50bd10f422986d6da372013", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c9ae77f74eae4ff50bd10f422986d6da372013", "html_url": "https://github.com/rust-lang/rust/commit/34c9ae77f74eae4ff50bd10f422986d6da372013"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "00fa1a545587512bea0737f9d27df56bd6816bda", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4aeb6efb6d584ae7632787edff60f3d9e4eb7384/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aeb6efb6d584ae7632787edff60f3d9e4eb7384/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "patch": "@@ -243,27 +243,47 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         where F: FnMut(ty::Region<'tcx>),\n               T: TypeFoldable<'tcx>,\n     {\n-        value.visit_with(&mut RegionVisitor { current_depth: 0, callback });\n+        value.visit_with(&mut RegionVisitor {\n+            outer_index: ty::DebruijnIndex::INNERMOST,\n+            callback\n+        });\n \n         struct RegionVisitor<F> {\n-            current_depth: u32,\n+            /// The index of a binder *just outside* the things we have\n+            /// traversed. If we encounter a bound region bound by this\n+            /// binder or one outer to it, it appears free. Example:\n+            ///\n+            /// ```\n+            ///    for<'a> fn(for<'b> fn(), T)\n+            /// ^          ^          ^     ^\n+            /// |          |          |     | here, would be shifted in 1\n+            /// |          |          | here, would be shifted in 2\n+            /// |          | here, would be INNTERMOST shifted in by 1\n+            /// | here, initially, binder would be INNERMOST\n+            /// ```\n+            ///\n+            /// You see that, initially, *any* bound value is free,\n+            /// because we've not traversed any binders. As we pass\n+            /// through a binder, we shift the `outer_index` by 1 to\n+            /// account for the new binder that encloses us.\n+            outer_index: ty::DebruijnIndex,\n             callback: F,\n         }\n \n         impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n             where F : FnMut(ty::Region<'tcx>)\n         {\n             fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-                self.current_depth += 1;\n+                self.outer_index.shift_in(1);\n                 t.skip_binder().visit_with(self);\n-                self.current_depth -= 1;\n+                self.outer_index.shift_out(1);\n \n                 false // keep visiting\n             }\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n                 match *r {\n-                    ty::ReLateBound(debruijn, _) if debruijn.depth <= self.current_depth => {\n+                    ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n                         /* ignore bound regions */\n                     }\n                     _ => (self.callback)(r),"}]}