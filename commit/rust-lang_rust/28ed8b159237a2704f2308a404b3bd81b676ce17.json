{"sha": "28ed8b159237a2704f2308a404b3bd81b676ce17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWQ4YjE1OTIzN2EyNzA0ZjIzMDhhNDA0YjNiZDgxYjY3NmNlMTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-15T18:28:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-17T22:07:32Z"}, "message": "Fix #[derive] for empty tuple structs/variants", "tree": {"sha": "50a387623e012f39c2a41a7145a0177c0943c47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a387623e012f39c2a41a7145a0177c0943c47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ed8b159237a2704f2308a404b3bd81b676ce17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ed8b159237a2704f2308a404b3bd81b676ce17", "html_url": "https://github.com/rust-lang/rust/commit/28ed8b159237a2704f2308a404b3bd81b676ce17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ed8b159237a2704f2308a404b3bd81b676ce17/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "html_url": "https://github.com/rust-lang/rust/commit/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "7600bff96952db91b34313bf8d78490b6bc19577", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=28ed8b159237a2704f2308a404b3bd81b676ce17", "patch": "@@ -844,7 +844,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>>) -> P<ast::Pat> {\n         let pat = if subpats.is_empty() {\n-            PatKind::Path(None, path)\n+            PatKind::Struct(path, Vec::new(), false)\n         } else {\n             PatKind::TupleStruct(path, subpats, None)\n         };"}, {"sha": "f395f7bd0c4c4e9b6ce1a2c75250204a591a1b0c", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=28ed8b159237a2704f2308a404b3bd81b676ce17", "patch": "@@ -110,7 +110,7 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n             let nfields = match *summary {\n-                Unnamed(ref fields) => fields.len(),\n+                Unnamed(ref fields, _) => fields.len(),\n                 Named(ref fields) => fields.len(),\n             };\n             let read_struct_field = cx.ident_of(\"read_struct_field\");\n@@ -193,9 +193,9 @@ fn decode_static_fields<F>(cx: &mut ExtCtxt,\n     where F: FnMut(&mut ExtCtxt, Span, InternedString, usize) -> P<Expr>\n {\n     match *fields {\n-        Unnamed(ref fields) => {\n+        Unnamed(ref fields, is_tuple) => {\n             let path_expr = cx.expr_path(outer_pat_path);\n-            if fields.is_empty() {\n+            if !is_tuple {\n                 path_expr\n             } else {\n                 let fields = fields.iter()"}, {"sha": "449c1ff066b3b9d9b4574c110c232cb5d3237757", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=28ed8b159237a2704f2308a404b3bd81b676ce17", "patch": "@@ -57,8 +57,8 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n             match *summary {\n-                Unnamed(ref fields) => {\n-                    if fields.is_empty() {\n+                Unnamed(ref fields, is_tuple) => {\n+                    if !is_tuple {\n                         cx.expr_ident(trait_span, substr.type_ident)\n                     } else {\n                         let exprs = fields.iter().map(|sp| default_call(*sp)).collect();"}, {"sha": "22e98fb213f952dfa6225df1eb385a09debe81b0", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=28ed8b159237a2704f2308a404b3bd81b676ce17", "patch": "@@ -294,8 +294,8 @@ pub struct FieldInfo<'a> {\n \n /// Fields for a static method\n pub enum StaticFields {\n-    /// Tuple structs/enum variants like this.\n-    Unnamed(Vec<Span>),\n+    /// Tuple and unit structs/enum variants like this.\n+    Unnamed(Vec<Span>, bool /*is tuple*/),\n     /// Normal structs/struct variants.\n     Named(Vec<(Ident, Span)>),\n }\n@@ -1470,7 +1470,7 @@ impl<'a> TraitDef<'a> {\n             (_, false) => Named(named_idents),\n             // empty structs\n             _ if struct_def.is_struct() => Named(named_idents),\n-            _ => Unnamed(just_spans),\n+            _ => Unnamed(just_spans, struct_def.is_tuple()),\n         }\n     }\n "}, {"sha": "66ffff94333e9fe19ed869c3739e105f6852c96f", "filename": "src/test/run-pass-fulldeps/empty-struct-braces-derive.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ed8b159237a2704f2308a404b3bd81b676ce17/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs?ref=28ed8b159237a2704f2308a404b3bd81b676ce17", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// `#[derive(Trait)]` works for empty structs/variants with braces\n+// `#[derive(Trait)]` works for empty structs/variants with braces or parens.\n \n+#![feature(relaxed_adts)]\n #![feature(rustc_private)]\n \n extern crate serialize as rustc_serialize;\n@@ -18,11 +19,16 @@ extern crate serialize as rustc_serialize;\n          Default, Debug, RustcEncodable, RustcDecodable)]\n struct S {}\n \n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         Default, Debug, RustcEncodable, RustcDecodable)]\n+struct Z();\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n          Debug, RustcEncodable, RustcDecodable)]\n enum E {\n     V {},\n     U,\n+    W(),\n }\n \n fn main() {\n@@ -34,11 +40,27 @@ fn main() {\n     assert!(!(s < s1));\n     assert_eq!(format!(\"{:?}\", s), \"S\");\n \n+    let z = Z();\n+    let z1 = z;\n+    let z2 = z.clone();\n+    assert_eq!(z, z1);\n+    assert_eq!(z, z2);\n+    assert!(!(z < z1));\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+\n     let e = E::V {};\n     let e1 = e;\n     let e2 = e.clone();\n     assert_eq!(e, e1);\n     assert_eq!(e, e2);\n     assert!(!(e < e1));\n     assert_eq!(format!(\"{:?}\", e), \"V\");\n+\n+    let e = E::W();\n+    let e1 = e;\n+    let e2 = e.clone();\n+    assert_eq!(e, e1);\n+    assert_eq!(e, e2);\n+    assert!(!(e < e1));\n+    assert_eq!(format!(\"{:?}\", e), \"W\");\n }"}]}