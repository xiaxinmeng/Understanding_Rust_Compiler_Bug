{"sha": "4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZGI0YmVkZmQyMzk1ZTFlMWViYjkyM2IxMDE2NWI4NTBlNjA2NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T20:16:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T20:16:21Z"}, "message": "Auto merge of #44009 - pnkfelix:mir-borrowck-as-query, r=arielb1\n\nMir borrowck as query\n\nTurn the `mir-borrowck` pass (aka \"transform\") into a query.\n\n(If I had realized how relatively easy this was going to be, I would have made it part of #43108. `let hindsight = 20/20;`)", "tree": {"sha": "ebd3119697c9434962c16f54ba5c12a1afe71a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd3119697c9434962c16f54ba5c12a1afe71a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "html_url": "https://github.com/rust-lang/rust/commit/4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80be2f8697e869e75b0b341b0c1eecef694ee5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/80be2f8697e869e75b0b341b0c1eecef694ee5b9", "html_url": "https://github.com/rust-lang/rust/commit/80be2f8697e869e75b0b341b0c1eecef694ee5b9"}, {"sha": "224c6ca2ee31d717a412d6c1901fac04ab780edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/224c6ca2ee31d717a412d6c1901fac04ab780edb", "html_url": "https://github.com/rust-lang/rust/commit/224c6ca2ee31d717a412d6c1901fac04ab780edb"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "9e5d40812311d992a35a47fec8087ecfdb5fd61d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -411,6 +411,8 @@ define_dep_nodes!( <'tcx>\n \n     [] BorrowCheckKrate,\n     [] BorrowCheck(DefId),\n+    [] MirBorrowCheck(DefId),\n+\n     [] RvalueCheck(DefId),\n     [] Reachability,\n     [] MirKeys,"}, {"sha": "26b51630d93e0d1da168020e87fdf2ac56476864", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -923,6 +923,8 @@ define_maps! { <'tcx>\n     [] coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n     [] borrowck: BorrowCheck(DefId) -> (),\n+    // FIXME: shouldn't this return a `Result<(), BorrowckErrors>` instead?\n+    [] mir_borrowck: MirBorrowCheck(DefId) -> (),\n \n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence."}, {"sha": "246fc7fc5241b9c3a8d31b03abd48162800e128e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -983,10 +983,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     // borrowck runs between MIR_VALIDATED and MIR_OPTIMIZED.\n \n-    // FIXME: niko says this should be a query (see rustc::ty::maps)\n-    // instead of a pass.\n-    passes.push_pass(MIR_VALIDATED, mir::transform::borrow_check::BorrowckMir);\n-\n     // These next passes must be executed together\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n@@ -1075,6 +1071,10 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"borrow checking\",\n              || borrowck::check_crate(tcx));\n \n+        time(time_passes,\n+             \"MIR borrow checking\",\n+             || for def_id in tcx.body_owners() { tcx.mir_borrowck(def_id) });\n+\n         // Avoid overwhelming user with errors if type checking failed.\n         // I'm not sure how helpful this is, to be honest, but it avoids\n         // a"}, {"sha": "5ae3bee3267001de68b7f4c4d96202f1a1a117ad", "filename": "src/librustc_mir/borrow_check.rs", "status": "renamed", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This pass borrow-checks the MIR to (further) ensure it is not broken.\n+//! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n+use rustc::hir::def_id::{DefId};\n use rustc::infer::{InferCtxt};\n use rustc::ty::{self, TyCtxt, ParamEnv};\n+use rustc::ty::maps::Providers;\n use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::{MirSource};\n \n use rustc_data_structures::indexed_set::{self, IdxSetBuf};\n use rustc_data_structures::indexed_vec::{Idx};\n@@ -34,35 +36,25 @@ use util::borrowck_errors::{BorrowckErrors, Origin};\n use self::MutateMode::{JustWrite, WriteAndRead};\n use self::ConsumeKind::{Consume};\n \n-pub struct BorrowckMir;\n \n-impl MirPass for BorrowckMir {\n-    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n-\n-        // let err_count = tcx.sess.err_count();\n-        // if err_count > 0 {\n-        //     // compiling a broken program can obviously result in a\n-        //     // broken MIR, so try not to report duplicate errors.\n-        //     debug!(\"skipping BorrowckMir: {} due to {} previous errors\",\n-        //            tcx.node_path_str(src.item_id()), err_count);\n-        //     return;\n-        // }\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        mir_borrowck,\n+        ..*providers\n+    };\n+}\n \n-        debug!(\"run_pass BorrowckMir: {}\", tcx.node_path_str(src.item_id()));\n+fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n+    let mir = tcx.mir_validated(def_id);\n+    let src = MirSource::from_local_def_id(tcx, def_id);\n+    debug!(\"run query mir_borrowck: {}\", tcx.node_path_str(src.item_id()));\n \n-        let def_id = tcx.hir.local_def_id(src.item_id());\n-        if tcx.has_attr(def_id, \"rustc_mir_borrowck\") || tcx.sess.opts.debugging_opts.borrowck_mir {\n-            borrowck_mir(tcx, src, mir);\n-        }\n+    let mir: &Mir<'tcx> = &mir.borrow();\n+    if !tcx.has_attr(def_id, \"rustc_mir_borrowck\") || !tcx.sess.opts.debugging_opts.borrowck_mir {\n+        return;\n     }\n-}\n \n-fn borrowck_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &Mir<'tcx>)\n-{\n     let id = src.item_id();\n-    let def_id = tcx.hir.local_def_id(id);\n-    debug!(\"borrowck_mir({}) UNIMPLEMENTED\", tcx.item_path_str(def_id));\n-\n     let attributes = tcx.get_attrs(def_id);\n     let param_env = tcx.param_env(def_id);\n     tcx.infer_ctxt().enter(|_infcx| {\n@@ -96,7 +88,7 @@ fn borrowck_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &Mir\n         mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n     });\n \n-    debug!(\"borrowck_mir done\");\n+    debug!(\"mir_borrowck done\");\n }\n \n #[allow(dead_code)]", "previous_filename": "src/librustc_mir/transform/borrow_check.rs"}, {"sha": "7aa4679992471fa436bd11324728b22f8ebc25ed", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -45,6 +45,7 @@ extern crate core; // for NonZero\n \n mod diagnostics;\n \n+mod borrow_check;\n mod build;\n mod dataflow;\n mod hair;\n@@ -55,6 +56,7 @@ pub mod util;\n use rustc::ty::maps::Providers;\n \n pub fn provide(providers: &mut Providers) {\n+    borrow_check::provide(providers);\n     shim::provide(providers);\n     transform::provide(providers);\n }"}, {"sha": "d8dffa036621a7d466702d07e472ac4a36baeb09", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdb4bedfd2395e1e1ebb923b10165b850e6064c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=4fdb4bedfd2395e1e1ebb923b10165b850e6064c", "patch": "@@ -31,7 +31,6 @@ pub mod simplify;\n pub mod erase_regions;\n pub mod no_landing_pads;\n pub mod type_check;\n-pub mod borrow_check;\n pub mod rustc_peek;\n pub mod elaborate_drops;\n pub mod add_call_guards;\n@@ -123,8 +122,9 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n }\n \n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n-    // Borrowck uses `mir_validated`, so we have to force it to\n+    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n+    ty::queries::mir_borrowck::force(tcx, DUMMY_SP, def_id);\n     ty::queries::borrowck::force(tcx, DUMMY_SP, def_id);\n \n     let mut mir = tcx.mir_validated(def_id).steal();"}]}