{"sha": "3070439c00d1f6c105b4b9cf6ca655892ec18571", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzA0MzljMDBkMWY2YzEwNWI0YjljZjZjYTY1NTg5MmVjMTg1NzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T18:29:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T18:34:15Z"}, "message": "Encode/decode a crate's externel dependencies. Issue #632\n\nThe encoding is very simple right now, just the crate name. Ultimately this\nwon't be enough for our versioning needs, but it should fill our immediate\nneed of being able to correlate encoded crate numbers to actual crates.", "tree": {"sha": "eaa6e61b2dd9d7d2685f3ae936ba6d1a3724f70d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaa6e61b2dd9d7d2685f3ae936ba6d1a3724f70d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3070439c00d1f6c105b4b9cf6ca655892ec18571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3070439c00d1f6c105b4b9cf6ca655892ec18571", "html_url": "https://github.com/rust-lang/rust/commit/3070439c00d1f6c105b4b9cf6ca655892ec18571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3070439c00d1f6c105b4b9cf6ca655892ec18571/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c66894a71988c72998d0584f82cf356d1068723", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c66894a71988c72998d0584f82cf356d1068723", "html_url": "https://github.com/rust-lang/rust/commit/7c66894a71988c72998d0584f82cf356d1068723"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "58db989cba30f1092c36242cc38caad1719f5e77", "filename": "src/comp/metadata/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcommon.rs?ref=3070439c00d1f6c105b4b9cf6ca655892ec18571", "patch": "@@ -56,6 +56,12 @@ const uint tag_meta_item_word = 0x23u;\n \n const uint tag_meta_item_list = 0x24u;\n \n+// The list of crates that this crate depends on\n+const uint tag_crate_deps = 0x25u;\n+\n+// A single crate dependency\n+const uint tag_crate_dep = 0x26u;\n+\n // djb's cdb hashes.\n fn hash_node_id(&int node_id) -> uint { ret 177573u ^ (node_id as uint); }\n "}, {"sha": "8aab0e739fcf8714dcb63e2c850ccf91e8b2e321", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=3070439c00d1f6c105b4b9cf6ca655892ec18571", "patch": "@@ -327,7 +327,7 @@ fn list_meta_items(&ebml::doc meta_items, io::writer out) {\n }\n \n fn list_crate_attributes(&ebml::doc md, io::writer out) {\n-    out.write_str(\"=Crate=\");\n+    out.write_str(\"=Crate Attributes=\");\n \n     for (ast::attribute attr in get_attributes(md)) {\n         out.write_str(#fmt(\"%s\", pprust::attribute_to_str(attr)));\n@@ -340,6 +340,32 @@ fn get_crate_attributes(&vec[u8] data) -> ast::attribute[] {\n     ret get_attributes(ebml::new_doc(data));\n }\n \n+type crate_dep = tup(ast::crate_num, str);\n+\n+fn get_crate_deps(&vec[u8] data) -> vec[crate_dep] {\n+    let vec[crate_dep] deps = [];\n+    auto cratedoc = ebml::new_doc(data);\n+    auto depsdoc = ebml::get_doc(cratedoc, tag_crate_deps);\n+    auto crate_num = 1;\n+    for each (ebml::doc depdoc in\n+              ebml::tagged_docs(depsdoc, tag_crate_dep)) {\n+        auto depname = str::unsafe_from_bytes(ebml::doc_data(depdoc));\n+        deps += [tup(crate_num, depname)];\n+        crate_num += 1;\n+    }\n+    ret deps;\n+}\n+\n+fn list_crate_deps(&vec[u8] data, io::writer out) {\n+    out.write_str(\"=External Dependencies=\\n\");\n+\n+    for (crate_dep dep in get_crate_deps(data)) {\n+        out.write_str(#fmt(\"%d %s\\n\", dep._0, dep._1));\n+    }\n+\n+    out.write_str(\"\\n\");\n+}\n+\n fn list_crate_items(vec[u8] bytes, &ebml::doc md, io::writer out) {\n     out.write_str(\"=Items=\\n\");\n     auto paths = ebml::get_doc(md, tag_paths);\n@@ -364,6 +390,7 @@ fn list_crate_items(vec[u8] bytes, &ebml::doc md, io::writer out) {\n fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n     auto md = ebml::new_doc(bytes);\n     list_crate_attributes(md, out);\n+    list_crate_deps(bytes, out);\n     list_crate_items(bytes, md, out);\n }\n "}, {"sha": "89634d233bff91cf924371b925c44595b4ee7696", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3070439c00d1f6c105b4b9cf6ca655892ec18571/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=3070439c00d1f6c105b4b9cf6ca655892ec18571", "patch": "@@ -520,6 +520,49 @@ fn synthesize_crate_attrs(&@encode_ctxt ecx,\n     ret attrs;\n }\n \n+fn encode_crate_deps(&ebml::writer ebml_w, &cstore::cstore cstore) {\n+\n+    fn get_ordered_names(&cstore::cstore cstore) -> vec[str] {\n+        type hashkv = @tup(crate_num, cstore::crate_metadata);\n+        type numname = tup(crate_num, str);\n+\n+        // Pull the cnums and names out of cstore\n+        let vec[mutable numname] pairs = [mutable];\n+        for each (hashkv hashkv in cstore.metas.items()) {\n+            pairs += [mutable tup(hashkv._0, hashkv._1.name)];\n+        }\n+\n+        // Sort by cnum\n+        fn lteq(&numname kv1, &numname kv2) -> bool { kv1._0 <= kv2._0 }\n+        std::sort::quick_sort(lteq, pairs);\n+\n+        // Sanity-check the crate numbers\n+        auto expected_cnum = 1;\n+        for (numname n in pairs) {\n+            assert n._0 == expected_cnum;\n+            expected_cnum += 1;\n+        }\n+\n+        // Return just the names\n+        fn name(&numname kv) -> str { kv._1 }\n+        // mutable -> immutable hack for vec::map\n+        auto immpairs = vec::slice(pairs, 0u, vec::len(pairs));\n+        ret vec::map(name, immpairs);\n+    }\n+\n+    // We're just going to write a list of crate names, with the assumption\n+    // that they are numbered 1 to n.\n+    // FIXME: This is not nearly enough to support correct versioning\n+    // but is enough to get transitive crate dependencies working.\n+    ebml::start_tag(ebml_w, tag_crate_deps);\n+    for (str cname in get_ordered_names(cstore)) {\n+        ebml::start_tag(ebml_w, tag_crate_dep);\n+        ebml_w.writer.write(str::bytes(cname));\n+        ebml::end_tag(ebml_w);\n+    }\n+    ebml::end_tag(ebml_w);\n+}\n+\n fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n \n     auto abbrevs = map::mk_hashmap(ty::hash_ty, ty::eq_ty);\n@@ -531,6 +574,9 @@ fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n \n     auto crate_attrs = synthesize_crate_attrs(ecx, crate);\n     encode_attributes(ebml_w, crate_attrs);\n+\n+    encode_crate_deps(ebml_w, cx.sess.get_cstore());\n+\n     // Encode and index the paths.\n \n     ebml::start_tag(ebml_w, tag_paths);"}]}