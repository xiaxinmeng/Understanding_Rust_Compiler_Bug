{"sha": "403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwM2E2M2QyYjQ5YTVkYzA4MGQxMGJiZDZiYmI0OGFjYzZlMTVkNTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T21:11:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T21:11:31Z"}, "message": "Don't classify attribute macros as their path unless it's a function with the proc_macro_attribute attribute", "tree": {"sha": "6e84e6e40f498a2c7f0bf4c2c6941b62895f5f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e84e6e40f498a2c7f0bf4c2c6941b62895f5f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "html_url": "https://github.com/rust-lang/rust/commit/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205e72f34d26898779c8ab11c8500e74fd8ce28b", "url": "https://api.github.com/repos/rust-lang/rust/commits/205e72f34d26898779c8ab11c8500e74fd8ce28b", "html_url": "https://github.com/rust-lang/rust/commit/205e72f34d26898779c8ab11c8500e74fd8ce28b"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "17086f7d48c83f5b024566916883eb60c253e333", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "patch": "@@ -1127,4 +1127,39 @@ impl Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_attr_differs_from_fn_with_same_name() {\n+        check(\n+            r#\"\n+#[test]\n+fn test$0() {\n+    test();\n+}\n+\"#,\n+            expect![[r#\"\n+                test Function FileId(0) 0..33 11..15\n+\n+                FileId(0) 24..28\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_attr_matches_proc_macro_fn() {\n+        check(\n+            r#\"\n+#[proc_macro_attribute]\n+fn my_proc_macro() {}\n+\n+#[my_proc_macro$0]\n+fn test() {}\n+\"#,\n+            expect![[r#\"\n+                my_proc_macro Function FileId(0) 0..45 27..40\n+\n+                FileId(0) 49..62\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "ff612b7d00a95198885e4f3e88ac7cd06499e827", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403a63d2b49a5dc080d10bbd6bbb48acc6e15d55/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=403a63d2b49a5dc080d10bbd6bbb48acc6e15d55", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef,\n-    Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n+    db::HirDatabase, Crate, Field, GenericParam, HasAttrs, HasVisibility, Impl, Label, Local,\n+    MacroDef, Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode, PathSegmentKind},\n@@ -366,7 +366,15 @@ impl NameRefClass {\n \n         if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n             if let Some(resolved) = sema.resolve_path(&path) {\n-                return Some(NameRefClass::Definition(resolved.into()));\n+                if path.syntax().parent().and_then(ast::Attr::cast).is_some() {\n+                    if let PathResolution::Def(ModuleDef::Function(func)) = resolved {\n+                        if func.attrs(sema.db).by_key(\"proc_macro_attribute\").exists() {\n+                            return Some(NameRefClass::Definition(resolved.into()));\n+                        }\n+                    }\n+                } else {\n+                    return Some(NameRefClass::Definition(resolved.into()));\n+                }\n             }\n         }\n "}]}