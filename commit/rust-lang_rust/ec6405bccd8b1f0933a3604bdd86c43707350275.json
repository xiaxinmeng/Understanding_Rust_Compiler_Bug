{"sha": "ec6405bccd8b1f0933a3604bdd86c43707350275", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjQwNWJjY2Q4YjFmMDkzM2EzNjA0YmRkODZjNDM3MDczNTAyNzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-25T20:23:13Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:44Z"}, "message": "identify when implemented for \"some specific lifetime\"", "tree": {"sha": "f08e569a71e03f80311dfdc01f094eb7acadc398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f08e569a71e03f80311dfdc01f094eb7acadc398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6405bccd8b1f0933a3604bdd86c43707350275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6405bccd8b1f0933a3604bdd86c43707350275", "html_url": "https://github.com/rust-lang/rust/commit/ec6405bccd8b1f0933a3604bdd86c43707350275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6405bccd8b1f0933a3604bdd86c43707350275/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab80162e3ffe52ded81917b8f0c032c9bc9d3c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab80162e3ffe52ded81917b8f0c032c9bc9d3c58", "html_url": "https://github.com/rust-lang/rust/commit/ab80162e3ffe52ded81917b8f0c032c9bc9d3c58"}], "stats": {"total": 273, "additions": 134, "deletions": 139}, "files": [{"sha": "f5c51f8ee26083341ceec63d7e9054e33aee58bd", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 120, "deletions": 127, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=ec6405bccd8b1f0933a3604bdd86c43707350275", "patch": "@@ -34,19 +34,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n-                    cause,\n-                    Some(sub_placeholder),\n-                    Some(sup_placeholder),\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                cause,\n+                Some(sub_placeholder),\n+                Some(sup_placeholder),\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -58,19 +54,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n-                    cause,\n-                    Some(sub_placeholder),\n-                    None,\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                cause,\n+                Some(sub_placeholder),\n+                None,\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -82,19 +74,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n-                    cause,\n-                    None,\n-                    Some(*sup_placeholder),\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                cause,\n+                None,\n+                Some(*sup_placeholder),\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -106,19 +94,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n-                    cause,\n-                    None,\n-                    Some(*sup_placeholder),\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                cause,\n+                None,\n+                Some(*sup_placeholder),\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n@@ -127,19 +111,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region @ ty::RePlaceholder(_),\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    None,\n-                    cause,\n-                    Some(*sub_region),\n-                    Some(*sup_region),\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                None,\n+                cause,\n+                Some(*sub_region),\n+                Some(*sup_region),\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n@@ -148,19 +128,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region,\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(sup_region),\n-                    cause,\n-                    Some(*sub_region),\n-                    None,\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(sup_region),\n+                cause,\n+                Some(*sub_region),\n+                None,\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n@@ -169,19 +145,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 }),\n                 sub_region,\n                 sup_region @ ty::RePlaceholder(_),\n-            ))\n-                if expected.def_id == found.def_id =>\n-            {\n-                Some(self.try_report_placeholders_trait(\n-                    Some(sub_region),\n-                    cause,\n-                    None,\n-                    Some(*sup_region),\n-                    expected.def_id,\n-                    expected.substs,\n-                    found.substs,\n-                ))\n-            }\n+            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+                Some(sub_region),\n+                cause,\n+                None,\n+                Some(*sup_region),\n+                expected.def_id,\n+                expected.substs,\n+                found.substs,\n+            )),\n \n             _ => None,\n         }\n@@ -206,14 +178,16 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         expected_substs: &'tcx Substs<'tcx>,\n         actual_substs: &'tcx Substs<'tcx>,\n     ) -> ErrorReported {\n-        debug!(\"try_report_placeholders_trait(\\\n-                vid={:?}, \\\n-                sub_placeholder={:?}, \\\n-                sup_placeholder={:?}, \\\n-                trait_def_id={:?}, \\\n-                expected_substs={:?}, \\\n-                actual_substs={:?})\",\n-               vid, sub_placeholder, sup_placeholder, trait_def_id, expected_substs, actual_substs);\n+        debug!(\n+            \"try_report_placeholders_trait(\\\n+             vid={:?}, \\\n+             sub_placeholder={:?}, \\\n+             sup_placeholder={:?}, \\\n+             trait_def_id={:?}, \\\n+             expected_substs={:?}, \\\n+             actual_substs={:?})\",\n+            vid, sub_placeholder, sup_placeholder, trait_def_id, expected_substs, actual_substs\n+        );\n \n         let mut err = self.tcx().sess.struct_span_err(\n             cause.span(&self.tcx()),\n@@ -233,18 +207,14 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             _ => (),\n         }\n \n-        let expected_trait_ref = self.infcx.resolve_type_vars_if_possible(\n-            &ty::TraitRef {\n-                def_id: trait_def_id,\n-                substs: expected_substs,\n-            }\n-        );\n-        let actual_trait_ref = self.infcx.resolve_type_vars_if_possible(\n-            &ty::TraitRef {\n-                def_id: trait_def_id,\n-                substs: actual_substs,\n-            }\n-        );\n+        let expected_trait_ref = self.infcx.resolve_type_vars_if_possible(&ty::TraitRef {\n+            def_id: trait_def_id,\n+            substs: expected_substs,\n+        });\n+        let actual_trait_ref = self.infcx.resolve_type_vars_if_possible(&ty::TraitRef {\n+            def_id: trait_def_id,\n+            substs: actual_substs,\n+        });\n \n         // Search the expected and actual trait references to see (a)\n         // whether the sub/sup placeholders appear in them (sometimes\n@@ -285,19 +255,28 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             .tcx()\n             .any_free_region_meets(&actual_trait_ref.self_ty(), |r| Some(r) == vid);\n \n-        debug!(\"try_report_placeholders_trait: actual_has_vid={:?}\", actual_has_vid);\n-        debug!(\"try_report_placeholders_trait: expected_has_vid={:?}\", expected_has_vid);\n+        debug!(\n+            \"try_report_placeholders_trait: actual_has_vid={:?}\",\n+            actual_has_vid\n+        );\n+        debug!(\n+            \"try_report_placeholders_trait: expected_has_vid={:?}\",\n+            expected_has_vid\n+        );\n         debug!(\"try_report_placeholders_trait: has_sub={:?}\", has_sub);\n         debug!(\"try_report_placeholders_trait: has_sup={:?}\", has_sup);\n-        debug!(\"try_report_placeholders_trait: self_ty_has_vid={:?}\", self_ty_has_vid);\n+        debug!(\n+            \"try_report_placeholders_trait: self_ty_has_vid={:?}\",\n+            self_ty_has_vid\n+        );\n \n         RegionHighlightMode::maybe_highlighting_region(sub_placeholder, has_sub, || {\n             RegionHighlightMode::maybe_highlighting_region(sup_placeholder, has_sup, || {\n                 match (has_sub, has_sup) {\n                     (Some(n1), Some(n2)) => {\n                         err.note(&format!(\n                             \"`{}` would have to be implemented for the type `{}`, \\\n-                            for any two lifetimes `'{}` and `'{}`\",\n+                             for any two lifetimes `'{}` and `'{}`\",\n                             expected_trait_ref,\n                             expected_trait_ref.self_ty(),\n                             std::cmp::min(n1, n2),\n@@ -307,40 +286,54 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                     (Some(n), _) | (_, Some(n)) => {\n                         err.note(&format!(\n                             \"`{}` would have to be implemented for the type `{}`, \\\n-                            for any lifetime `'{}`\",\n+                             for any lifetime `'{}`\",\n                             expected_trait_ref,\n                             expected_trait_ref.self_ty(),\n                             n,\n                         ));\n                     }\n-                    (None, None) => {\n-                        err.note(&format!(\n-                            \"`{}` would have to be implemented for the type `{}`\",\n-                            expected_trait_ref,\n-                            expected_trait_ref.self_ty(),\n-                        ));\n-                    }\n+                    (None, None) => RegionHighlightMode::maybe_highlighting_region(\n+                        vid,\n+                        expected_has_vid,\n+                        || {\n+                            if let Some(n) = expected_has_vid {\n+                                err.note(&format!(\n+                                    \"`{}` would have to be implemented for the type `{}`, \\\n+                                     for some specific lifetime `'{}`\",\n+                                    expected_trait_ref,\n+                                    expected_trait_ref.self_ty(),\n+                                    n,\n+                                ));\n+                            } else {\n+                                err.note(&format!(\n+                                    \"`{}` would have to be implemented for the type `{}`\",\n+                                    expected_trait_ref,\n+                                    expected_trait_ref.self_ty(),\n+                                ));\n+                            }\n+                        },\n+                    ),\n                 }\n             })\n         });\n \n         RegionHighlightMode::maybe_highlighting_region(\n             vid,\n-            actual_has_vid.or(expected_has_vid),\n+            actual_has_vid,\n             || match actual_has_vid {\n                 Some(n) => {\n                     if self_ty_has_vid {\n                         err.note(&format!(\n                             \"but `{}` is actually implemented for the type `{}`, \\\n-                            for the specific lifetime `'{}`\",\n+                             for the specific lifetime `'{}`\",\n                             actual_trait_ref,\n                             actual_trait_ref.self_ty(),\n                             n\n                         ));\n                     } else {\n                         err.note(&format!(\n                             \"but `{}` is actually implemented for the type `{}`, \\\n-                            for some lifetime `'{}`\",\n+                             for some lifetime `'{}`\",\n                             actual_trait_ref,\n                             actual_trait_ref.self_ty(),\n                             n\n@@ -355,7 +348,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                         actual_trait_ref.self_ty(),\n                     ));\n                 }\n-            }\n+            },\n         );\n \n         err.emit();"}, {"sha": "06946bcf744a75a6f6fa09a4b27c6a8da4ba3c7f", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=ec6405bccd8b1f0933a3604bdd86c43707350275", "patch": "@@ -1,20 +1,11 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/issue-57362.rs:20:7\n+  --> $DIR/issue-57362-1.rs:20:7\n    |\n LL |     a.f(); //~ ERROR not general enough\n    |       ^\n    |\n-   = note: `Trait` would have to be implemented for the type `fn(&u8)`\n+   = note: `Trait` would have to be implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n    = note: but `Trait` is actually implemented for the type `for<'r> fn(&'r u8)`\n \n-error: implementation of `X` is not general enough\n-  --> $DIR/issue-57362.rs:38:13\n-   |\n-LL |     let x = <fn (&())>::make_g(); //~ ERROR not general enough\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n-   = note: but `X` is actually implemented for the type `fn(&'0 ())`, for the specific lifetime `'0`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "782c78da3a22c05859bf74c2c6d8528d29f165ac", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec6405bccd8b1f0933a3604bdd86c43707350275/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=ec6405bccd8b1f0933a3604bdd86c43707350275", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `X` is not general enough\n+  --> $DIR/issue-57362-2.rs:22:13\n+   |\n+LL |     let x = <fn (&())>::make_g(); //~ ERROR not general enough\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: but `X` is actually implemented for the type `fn(&'0 ())`, for the specific lifetime `'0`\n+\n+error: aborting due to previous error\n+"}]}