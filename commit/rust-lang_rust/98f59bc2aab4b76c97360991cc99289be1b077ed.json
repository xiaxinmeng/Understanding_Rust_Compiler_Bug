{"sha": "98f59bc2aab4b76c97360991cc99289be1b077ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjU5YmMyYWFiNGI3NmM5NzM2MDk5MWNjOTkyODliZTFiMDc3ZWQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-09T22:06:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-09T22:06:02Z"}, "message": "Rollup merge of #76515 - jumbatm:issue76496-reproducibility-regression, r=oli-obk\n\nSessionDiagnostic: Fix non-determinism in generated format string.\n\nFixes #76496.\n\nr? @oli-obk", "tree": {"sha": "6b42c39ca40eb7dbfc3b7d47163ef22c32bdeacd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b42c39ca40eb7dbfc3b7d47163ef22c32bdeacd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f59bc2aab4b76c97360991cc99289be1b077ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWVHKCRBK7hj4Ov3rIwAAdHIIAKZGAMNtYnCb3HC8R8CRfFpg\nKScsffbughi3AI8awe2d98EwfyVlS07nYJGNN/udllYb/hh3VeAxvmDQ89ilBOBf\n9G38CQ7JsnalK118kMPAFOvK9boDXB2eDBXglYbJ1RzT6H5bUOK3NKVZn0RQF+y4\nwxXZxFE0Qzy+s0pXsaNOLMaBPdtFD8u1e0ea9mX+IwD5jsCN6PZsLVeNf9bBySyk\na9weJ1E1sccLH+9KLjWMwaGcqQM/EVsQ8MaVf6sfDJlH6R0g3febilmbGsd9zw7M\nJ6Ppg7wJy4LvZ+tKYi1O/OdiauwOPVk4V98uvTW5r22RXYQsrHTWDciJTDvJf9Y=\n=gmAp\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b42c39ca40eb7dbfc3b7d47163ef22c32bdeacd\nparent c18fa460a41066fee1489b725425e8d0eb8e8f0c\nparent 8b392505ae8e5645f3f254caa8aff2a932df4d72\nauthor Tyler Mandry <tmandry@gmail.com> 1599689162 -0700\ncommitter GitHub <noreply@github.com> 1599689162 -0700\n\nRollup merge of #76515 - jumbatm:issue76496-reproducibility-regression, r=oli-obk\n\nSessionDiagnostic: Fix non-determinism in generated format string.\n\nFixes #76496.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f59bc2aab4b76c97360991cc99289be1b077ed", "html_url": "https://github.com/rust-lang/rust/commit/98f59bc2aab4b76c97360991cc99289be1b077ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f59bc2aab4b76c97360991cc99289be1b077ed/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c18fa460a41066fee1489b725425e8d0eb8e8f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c18fa460a41066fee1489b725425e8d0eb8e8f0c", "html_url": "https://github.com/rust-lang/rust/commit/c18fa460a41066fee1489b725425e8d0eb8e8f0c"}, {"sha": "8b392505ae8e5645f3f254caa8aff2a932df4d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b392505ae8e5645f3f254caa8aff2a932df4d72", "html_url": "https://github.com/rust-lang/rust/commit/8b392505ae8e5645f3f254caa8aff2a932df4d72"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "610b9155cfc182059d58a39901bd3be03dd46585", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98f59bc2aab4b76c97360991cc99289be1b077ed/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f59bc2aab4b76c97360991cc99289be1b077ed/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=98f59bc2aab4b76c97360991cc99289be1b077ed", "patch": "@@ -1,11 +1,9 @@\n #![deny(unused_must_use)]\n-use quote::format_ident;\n-use quote::quote;\n-\n use proc_macro::Diagnostic;\n+use quote::{format_ident, quote};\n use syn::spanned::Spanned;\n \n-use std::collections::{HashMap, HashSet};\n+use std::collections::{BTreeSet, HashMap};\n \n /// Implements #[derive(SessionDiagnostic)], which allows for errors to be specified as a struct, independent\n /// from the actual diagnostics emitting code.\n@@ -577,7 +575,10 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     /// ```\n     /// This function builds the entire call to format!.\n     fn build_format(&self, input: &String, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n-        let mut referenced_fields: HashSet<String> = HashSet::new();\n+        // This set is used later to generate the final format string. To keep builds reproducible,\n+        // the iteration order needs to be deterministic, hence why we use a BTreeSet here instead\n+        // of a HashSet.\n+        let mut referenced_fields: BTreeSet<String> = BTreeSet::new();\n \n         // At this point, we can start parsing the format string.\n         let mut it = input.chars().peekable();"}]}