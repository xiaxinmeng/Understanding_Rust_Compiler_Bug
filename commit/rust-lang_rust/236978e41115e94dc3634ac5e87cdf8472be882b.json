{"sha": "236978e41115e94dc3634ac5e87cdf8472be882b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjk3OGU0MTExNWU5NGRjMzYzNGFjNWU4N2NkZjg0NzJiZTg4MmI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-20T05:39:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-20T05:39:53Z"}, "message": "Rollup merge of #41214 - estebank:less-multiline, r=petrochenkov\n\nAdd a way to get shorter spans until `char` for pointing at defs\n\n```rust\nerror[E0072]: recursive type `X` has infinite size\n  --> file.rs:10:1\n   |\n10 | struct X {\n   | ^^^^^^^^ recursive type has infinite size\n   |\n   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `X` representable\n```\n\nvs\n\n```rust\nerror[E0072]: recursive type `X` has infinite size\n  --> file.rs:10:1\n   |\n10 |   struct X {\n   |  _^ starting here...\n11 | |     x: X,\n12 | | }\n   | |_^ ...ending here: recursive type has infinite size\n   |\n   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `X` representable\n```\n\nRe: #35965,  #38246. Follow up to #38328.\n\nr? @jonathandturner", "tree": {"sha": "26b19539360f9e4789aa9435be1a48583de993b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b19539360f9e4789aa9435be1a48583de993b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/236978e41115e94dc3634ac5e87cdf8472be882b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/236978e41115e94dc3634ac5e87cdf8472be882b", "html_url": "https://github.com/rust-lang/rust/commit/236978e41115e94dc3634ac5e87cdf8472be882b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/236978e41115e94dc3634ac5e87cdf8472be882b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb1530239c801bb46b705eb2874ac4e5b213e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb1530239c801bb46b705eb2874ac4e5b213e54", "html_url": "https://github.com/rust-lang/rust/commit/1bb1530239c801bb46b705eb2874ac4e5b213e54"}, {"sha": "439ff69d909a0add54b1ea1e093bc838693d1e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/439ff69d909a0add54b1ea1e093bc838693d1e4e", "html_url": "https://github.com/rust-lang/rust/commit/439ff69d909a0add54b1ea1e093bc838693d1e4e"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "ba340a40692c71d0a39c80235871260d54b146c2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -329,22 +329,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 Some(val) => Some(val),\n                                 None => {\n                                     span_err!(self.tcx.sess, err_sp, E0272,\n-                                                    \"the #[rustc_on_unimplemented] \\\n-                                                            attribute on \\\n-                                                            trait definition for {} refers to \\\n-                                                            non-existent type parameter {}\",\n-                                                            trait_str, s);\n+                                              \"the #[rustc_on_unimplemented] attribute on trait \\\n+                                               definition for {} refers to non-existent type \\\n+                                               parameter {}\",\n+                                              trait_str, s);\n                                     errored = true;\n                                     None\n                                 }\n                             },\n                             _ => {\n                                 span_err!(self.tcx.sess, err_sp, E0273,\n-                                            \"the #[rustc_on_unimplemented] attribute \\\n-                                            on trait definition for {} must have \\\n-                                            named format arguments, eg \\\n-                                            `#[rustc_on_unimplemented = \\\n-                                            \\\"foo {{T}}\\\"]`\", trait_str);\n+                                          \"the #[rustc_on_unimplemented] attribute on trait \\\n+                                           definition for {} must have named format arguments, eg \\\n+                                           `#[rustc_on_unimplemented = \\\"foo {{T}}\\\"]`\",\n+                                          trait_str);\n                                 errored = true;\n                                 None\n                             }\n@@ -485,8 +483,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                              \"impl has stricter requirements than trait\");\n \n         if let Some(trait_item_span) = self.tcx.hir.span_if_local(trait_item_def_id) {\n-            err.span_label(trait_item_span,\n-                           &format!(\"definition of `{}` from trait\", item_name));\n+            let span = self.tcx.sess.codemap().def_span(trait_item_span);\n+            err.span_label(span, &format!(\"definition of `{}` from trait\", item_name));\n         }\n \n         err.span_label(\n@@ -692,6 +690,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         assert!(type_def_id.is_local());\n         let span = self.hir.span_if_local(type_def_id).unwrap();\n+        let span = self.sess.codemap().def_span(span);\n         let mut err = struct_span_err!(self.sess, span, E0072,\n                                        \"recursive type `{}` has infinite size\",\n                                        self.item_path_str(type_def_id));\n@@ -709,13 +708,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                       -> DiagnosticBuilder<'tcx>\n     {\n         let trait_str = self.item_path_str(trait_def_id);\n+        let span = self.sess.codemap().def_span(span);\n         let mut err = struct_span_err!(\n             self.sess, span, E0038,\n             \"the trait `{}` cannot be made into an object\",\n             trait_str);\n-        err.span_label(span, &format!(\n-            \"the trait `{}` cannot be made into an object\", trait_str\n-        ));\n+        err.span_label(span, &format!(\"the trait `{}` cannot be made into an object\", trait_str));\n \n         let mut reported_violations = FxHashSet();\n         for violation in violations {"}, {"sha": "da2d0a33d1a10deeb1f175041aa3710758c25805", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -441,6 +441,25 @@ impl CodeMap {\n         }\n     }\n \n+    /// Given a `Span`, try to get a shorter span ending before the first occurrence of `c` `char`\n+    pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n+        match self.span_to_snippet(sp) {\n+            Ok(snippet) => {\n+                let snippet = snippet.split(c).nth(0).unwrap_or(\"\").trim_right();\n+                if snippet.len() > 0 && !snippet.contains('\\n') {\n+                    Span { hi: BytePos(sp.lo.0 + snippet.len() as u32), ..sp }\n+                } else {\n+                    sp\n+                }\n+            }\n+            _ => sp,\n+        }\n+    }\n+\n+    pub fn def_span(&self, sp: Span) -> Span {\n+        self.span_until_char(sp, '{')\n+    }\n+\n     pub fn get_filemap(&self, filename: &str) -> Option<Rc<FileMap>> {\n         for fm in self.files.borrow().iter() {\n             if filename == fm.name {"}, {"sha": "2ef8c830eb2fe5173c8f774a0a1053f75d74a33c", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n   --> $DIR/issue-3907-2.rs:20:1\n    |\n 20 | fn bar(_x: Foo) {}\n-   | ^^^^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n    = note: method `bar` has no receiver\n "}, {"sha": "18ade4f1ab68ef424fdae04d554d0c1c3318192e", "filename": "src/test/ui/span/E0072.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2FE0072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2FE0072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.rs?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct ListNode { //~ ERROR E0072\n-                  //~| NOTE recursive type has infinite size\n+struct ListNode {\n     head: u8,\n     tail: Option<ListNode>,\n }", "previous_filename": "src/test/compile-fail/E0072.rs"}, {"sha": "5204390ef9d2a8ace3ca0ff18d4c7b47859462e0", "filename": "src/test/ui/span/E0072.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.stderr?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -0,0 +1,10 @@\n+error[E0072]: recursive type `ListNode` has infinite size\n+  --> $DIR/E0072.rs:11:1\n+   |\n+11 | struct ListNode {\n+   | ^^^^^^^^^^^^^^^ recursive type has infinite size\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n+\n+error: aborting due to previous error\n+"}, {"sha": "323e7fb5a42c09bc893880b6bcb19a537fe2583c", "filename": "src/test/ui/span/multiline-span-E0072.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.rs?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// It should just use the entire body instead of pointing at the next two lines\n+struct\n+ListNode\n+{\n+    head: u8,\n+    tail: Option<ListNode>,\n+}\n+\n+fn main() {\n+}"}, {"sha": "58cdc50230063cc99470275eadd2b8cda8ad8973", "filename": "src/test/ui/span/multiline-span-E0072.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/236978e41115e94dc3634ac5e87cdf8472be882b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr?ref=236978e41115e94dc3634ac5e87cdf8472be882b", "patch": "@@ -0,0 +1,16 @@\n+error[E0072]: recursive type `ListNode` has infinite size\n+  --> $DIR/multiline-span-E0072.rs:12:1\n+   |\n+12 |   struct\n+   |  _^ starting here...\n+13 | | ListNode\n+14 | | {\n+15 | |     head: u8,\n+16 | |     tail: Option<ListNode>,\n+17 | | }\n+   | |_^ ...ending here: recursive type has infinite size\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n+\n+error: aborting due to previous error\n+"}]}