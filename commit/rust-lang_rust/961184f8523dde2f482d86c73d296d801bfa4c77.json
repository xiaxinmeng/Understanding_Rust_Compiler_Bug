{"sha": "961184f8523dde2f482d86c73d296d801bfa4c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTE4NGY4NTIzZGRlMmY0ODJkODZjNzNkMjk2ZDgwMWJmYTRjNzc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T21:03:54Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T21:03:54Z"}, "message": "dlist: Use inline on very small functions and iterator functions", "tree": {"sha": "19e4b2c32b7d33001b16e3694cabb003b5101f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e4b2c32b7d33001b16e3694cabb003b5101f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961184f8523dde2f482d86c73d296d801bfa4c77", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961184f8523dde2f482d86c73d296d801bfa4c77", "html_url": "https://github.com/rust-lang/rust/commit/961184f8523dde2f482d86c73d296d801bfa4c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961184f8523dde2f482d86c73d296d801bfa4c77/comments", "author": null, "committer": null, "parents": [{"sha": "7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "url": "https://api.github.com/repos/rust-lang/rust/commits/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422", "html_url": "https://github.com/rust-lang/rust/commit/7681cf62e3d7e5dedb4bff455cd4fe8f7340d422"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "9eacddd90028b8ccdcfe6d2f75407dbce9fcde74", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/961184f8523dde2f482d86c73d296d801bfa4c77/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961184f8523dde2f482d86c73d296d801bfa4c77/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=961184f8523dde2f482d86c73d296d801bfa4c77", "patch": "@@ -101,10 +101,12 @@ fn link_with_prev<T>(mut next: ~Node<T>, prev: Rawlink<Node<T>>) -> Link<T> {\n \n impl<T> Container for DList<T> {\n     /// O(1)\n+    #[inline]\n     fn is_empty(&self) -> bool {\n         self.list_head.is_none()\n     }\n     /// O(1)\n+    #[inline]\n     fn len(&self) -> uint {\n         self.length\n     }\n@@ -114,28 +116,33 @@ impl<T> Mutable for DList<T> {\n     /// Remove all elements from the DList\n     ///\n     /// O(N)\n+    #[inline]\n     fn clear(&mut self) {\n         *self = DList::new()\n     }\n }\n \n impl<T> Deque<T> for DList<T> {\n     /// Provide a reference to the front element, or None if the list is empty\n+    #[inline]\n     fn front<'a>(&'a self) -> Option<&'a T> {\n         self.list_head.map(|head| &head.value)\n     }\n \n     /// Provide a mutable reference to the front element, or None if the list is empty\n+    #[inline]\n     fn front_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n         self.list_head.map_mut(|head| &mut head.value)\n     }\n \n     /// Provide a reference to the back element, or None if the list is empty\n+    #[inline]\n     fn back<'a>(&'a self) -> Option<&'a T> {\n         self.list_tail.resolve_immut().map(|tail| &tail.value)\n     }\n \n     /// Provide a mutable reference to the back element, or None if the list is empty\n+    #[inline]\n     fn back_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n         self.list_tail.resolve().map_mut(|tail| &mut tail.value)\n     }\n@@ -158,7 +165,6 @@ impl<T> Deque<T> for DList<T> {\n     /// Remove the last element and return it, or None if the list is empty\n     ///\n     /// O(1)\n-    #[inline]\n     fn pop_back(&mut self) -> Option<T> {\n         match self.list_tail.resolve() {\n             None => None,\n@@ -250,6 +256,7 @@ impl<T> DList<T> {\n     /// Add all elements from `other` to the beginning of the list\n     ///\n     /// O(1)\n+    #[inline]\n     pub fn prepend(&mut self, mut other: DList<T>) {\n         util::swap(self, &mut other);\n         self.append(other);\n@@ -259,7 +266,6 @@ impl<T> DList<T> {\n     /// or at the end.\n     ///\n     /// O(N)\n-    #[inline]\n     pub fn insert_when(&mut self, elt: T, f: &fn(&T, &T) -> bool) {\n         {\n             let mut it = self.mut_iter();\n@@ -300,16 +306,19 @@ impl<T> DList<T> {\n \n \n     /// Provide a forward iterator\n+    #[inline]\n     pub fn iter<'a>(&'a self) -> DListIterator<'a, T> {\n         DListIterator{nelem: self.len(), head: &self.list_head, tail: self.list_tail}\n     }\n \n     /// Provide a reverse iterator\n+    #[inline]\n     pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, DListIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n     /// Provide a forward iterator with mutable references\n+    #[inline]\n     pub fn mut_iter<'a>(&'a mut self) -> MutDListIterator<'a, T> {\n         let head_raw = match self.list_head {\n             Some(ref mut h) => Rawlink::some(*h),\n@@ -323,18 +332,21 @@ impl<T> DList<T> {\n         }\n     }\n     /// Provide a reverse iterator with mutable references\n+    #[inline]\n     pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<&'a mut T,\n                                                 MutDListIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n \n \n     /// Consume the list into an iterator yielding elements by value\n+    #[inline]\n     pub fn consume_iter(self) -> ConsumeIterator<T> {\n         ConsumeIterator{list: self}\n     }\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n+    #[inline]\n     pub fn consume_rev_iter(self) -> InvertIterator<T, ConsumeIterator<T>> {\n         self.consume_iter().invert()\n     }\n@@ -344,6 +356,7 @@ impl<T: cmp::TotalOrd> DList<T> {\n     /// Insert `elt` sorted in ascending order\n     ///\n     /// O(N)\n+    #[inline]\n     pub fn insert_ordered(&mut self, elt: T) {\n         self.insert_when(elt, |a, b| a.cmp(b) != cmp::Less);\n     }\n@@ -365,12 +378,14 @@ impl<'self, A> Iterator<&'self A> for DListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.nelem, Some(self.nelem))\n     }\n }\n \n impl<'self, A> DoubleEndedIterator<&'self A> for DListIterator<'self, A> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<&'self A> {\n         if self.nelem == 0 {\n             return None;\n@@ -405,6 +420,7 @@ impl<'self, A> Iterator<&'self mut A> for MutDListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.nelem, Some(self.nelem))\n     }\n@@ -457,6 +473,7 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n         }\n     }\n \n+    #[inline]\n     fn peek_next<'a>(&'a mut self) -> Option<&'a mut A> {\n         match self.head.resolve() {\n             None => None,\n@@ -466,13 +483,17 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n }\n \n impl<A> Iterator<A> for ConsumeIterator<A> {\n+    #[inline]\n     fn next(&mut self) -> Option<A> { self.list.pop_front() }\n+\n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         (self.list.length, Some(self.list.length))\n     }\n }\n \n impl<A> DoubleEndedIterator<A> for ConsumeIterator<A> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n@@ -489,6 +510,8 @@ impl<A: Eq> Eq for DList<A> {\n         self.len() == other.len() &&\n             self.iter().zip(other.iter()).all(|(a, b)| a.eq(b))\n     }\n+\n+    #[inline]\n     fn ne(&self, other: &DList<A>) -> bool {\n         !self.eq(other)\n     }"}]}