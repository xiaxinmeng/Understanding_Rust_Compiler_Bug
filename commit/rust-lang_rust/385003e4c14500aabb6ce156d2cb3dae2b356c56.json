{"sha": "385003e4c14500aabb6ce156d2cb3dae2b356c56", "node_id": "C_kwDOAAsO6NoAKDM4NTAwM2U0YzE0NTAwYWFiYjZjZTE1NmQyY2IzZGFlMmIzNTZjNTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T11:55:23Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T11:55:23Z"}, "message": "Sync from rust 8e9c93df464b7ada3fc7a1c8ccddd9dcb24ee0a0", "tree": {"sha": "746677ea4b11b544594b8a14ab2238279619dbbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746677ea4b11b544594b8a14ab2238279619dbbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/385003e4c14500aabb6ce156d2cb3dae2b356c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/385003e4c14500aabb6ce156d2cb3dae2b356c56", "html_url": "https://github.com/rust-lang/rust/commit/385003e4c14500aabb6ce156d2cb3dae2b356c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/385003e4c14500aabb6ce156d2cb3dae2b356c56/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82b696594c39d5f463e4560b68d7a2d4e33b2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82b696594c39d5f463e4560b68d7a2d4e33b2f0", "html_url": "https://github.com/rust-lang/rust/commit/d82b696594c39d5f463e4560b68d7a2d4e33b2f0"}, {"sha": "7e250da20fd6ac20c554397bcb0e69bc6c235dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e250da20fd6ac20c554397bcb0e69bc6c235dac", "html_url": "https://github.com/rust-lang/rust/commit/7e250da20fd6ac20c554397bcb0e69bc6c235dac"}], "stats": {"total": 75, "additions": 32, "deletions": 43}, "files": [{"sha": "de74a91dd8fbc2979da40412a427837d69c69f00", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=385003e4c14500aabb6ce156d2cb3dae2b356c56", "patch": "@@ -850,6 +850,7 @@ pub(crate) fn codegen_place<'tcx>(\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }\n+            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }"}, {"sha": "9fbb08a9cb998ae07b53614fea60d238e2871c11", "filename": "src/constant.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=385003e4c14500aabb6ce156d2cb3dae2b356c56", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n@@ -41,36 +40,22 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let const_ = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => ct,\n+        let unevaluated = match fx.monomorphize(constant.literal) {\n+            ConstantKind::Ty(_) => unreachable!(),\n+            ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.kind() {\n-            ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(unevaluated) => {\n-                if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n-                {\n-                    all_constants_ok = false;\n-                    match err {\n-                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n-                            fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        ErrorHandled::TooGeneric => {\n-                            span_bug!(\n-                                constant.span,\n-                                \"codegen encountered polymorphic constant: {:?}\",\n-                                err\n-                            );\n-                        }\n-                    }\n+\n+        if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n+            all_constants_ok = false;\n+            match err {\n+                ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n+                    fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+                }\n+                ErrorHandled::TooGeneric => {\n+                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n                 }\n             }\n-            ConstKind::Param(_)\n-            | ConstKind::Infer(_)\n-            | ConstKind::Bound(_, _)\n-            | ConstKind::Placeholder(_)\n-            | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n         }\n     }\n     all_constants_ok\n@@ -122,36 +107,28 @@ pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = match fx.monomorphize(constant.literal) {\n-        ConstantKind::Ty(ct) => ct,\n-        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n-    };\n-    let const_val = match const_.kind() {\n-        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+    let (const_val, ty) = match fx.monomorphize(constant.literal) {\n+        ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n+        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(ty)).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(unevaluated) => {\n+        ConstantKind::Unevaluated(unevaluated, ty) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n-                Ok(const_val) => const_val,\n+                Ok(const_val) => (const_val, ty),\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n                 }\n             }\n         }\n-        ConstKind::Param(_)\n-        | ConstKind::Infer(_)\n-        | ConstKind::Bound(_, _)\n-        | ConstKind::Placeholder(_)\n-        | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n+        ConstantKind::Val(val, ty) => (val, ty),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty())\n+    codegen_const_value(fx, const_val, ty)\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -496,6 +473,9 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                 .eval_for_mir(fx.tcx, ParamEnv::reveal_all())\n                 .try_to_value(fx.tcx),\n             ConstantKind::Val(val, _) => Some(val),\n+            ConstantKind::Unevaluated(uv, _) => {\n+                fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), uv, None).ok()\n+            }\n         },\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n         // inside a temporary before being passed to the intrinsic requiring the const argument."}, {"sha": "c9eb005e045d30621c66a4d740ab4b12d8add8ea", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385003e4c14500aabb6ce156d2cb3dae2b356c56/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=385003e4c14500aabb6ce156d2cb3dae2b356c56", "patch": "@@ -625,6 +625,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn place_opaque_cast(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n+    }\n+\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}]}