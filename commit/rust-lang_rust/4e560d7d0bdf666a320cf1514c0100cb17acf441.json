{"sha": "4e560d7d0bdf666a320cf1514c0100cb17acf441", "node_id": "C_kwDOAAsO6NoAKDRlNTYwZDdkMGJkZjY2NmEzMjBjZjE1MTRjMDEwMGNiMTdhY2Y0NDE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-28T21:37:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-02T11:59:04Z"}, "message": "Put backtick content from rustdoc search errors into a <code> elements", "tree": {"sha": "931a6b4055e2b6b4bd245cfdbce941105d703734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931a6b4055e2b6b4bd245cfdbce941105d703734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e560d7d0bdf666a320cf1514c0100cb17acf441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e560d7d0bdf666a320cf1514c0100cb17acf441", "html_url": "https://github.com/rust-lang/rust/commit/4e560d7d0bdf666a320cf1514c0100cb17acf441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e560d7d0bdf666a320cf1514c0100cb17acf441/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18caf88956ecf454e24307e598b8ac9967f10b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/18caf88956ecf454e24307e598b8ac9967f10b07", "html_url": "https://github.com/rust-lang/rust/commit/18caf88956ecf454e24307e598b8ac9967f10b07"}], "stats": {"total": 139, "additions": 99, "deletions": 40}, "files": [{"sha": "1a34530c2d16ebf32210af00282533485659722c", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -90,7 +90,6 @@ module.exports = {\n         \"no-return-assign\": \"error\",\n         \"no-script-url\": \"error\",\n         \"no-sequences\": \"error\",\n-        \"no-throw-literal\": \"error\",\n         \"no-div-regex\": \"error\",\n     }\n };"}, {"sha": "95528e70e3519ef1d2821767e7f9da889aa561d7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -1260,6 +1260,11 @@ a.tooltip:hover::after {\n \tcolor: var(--search-tab-title-count-color);\n }\n \n+#search .error code {\n+\tborder-radius: 3px;\n+\tbackground-color: var(--search-error-code-background-color);\n+}\n+\n #src-sidebar-toggle {\n \tposition: sticky;\n \ttop: 0;"}, {"sha": "90cf689ad3372923389378865e9216793a514e01", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -43,6 +43,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--search-result-link-focus-background-color: #3c3c3c;\n \t--search-result-border-color: #aaa3;\n \t--search-color: #fff;\n+\t--search-error-code-background-color: #4f4c4c;\n \t--search-results-alias-color: #c5c5c5;\n \t--search-results-grey-color: #999;\n \t--search-tab-title-count-color: #888;"}, {"sha": "e8cd06931392088859d1e0c4e8b41fff99108ec0", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -38,6 +38,7 @@\n \t--search-result-link-focus-background-color: #616161;\n \t--search-result-border-color: #aaa3;\n \t--search-color: #111;\n+\t--search-error-code-background-color: #484848;\n \t--search-results-alias-color: #fff;\n \t--search-results-grey-color: #ccc;\n \t--search-tab-title-count-color: #888;"}, {"sha": "5e3f14e483faed6884b4a01d54f9c19e204dd7d6", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -38,6 +38,7 @@\n \t--search-result-link-focus-background-color: #ccc;\n \t--search-result-border-color: #aaa3;\n \t--search-color: #000;\n+\t--search-error-code-background-color: #d0cccc;\n \t--search-results-alias-color: #000;\n \t--search-results-grey-color: #999;\n \t--search-tab-title-count-color: #888;"}, {"sha": "5a46729156d19353c7b10b666843e96836c7f45c", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 91, "deletions": 39, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/4e560d7d0bdf666a320cf1514c0100cb17acf441/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=4e560d7d0bdf666a320cf1514c0100cb17acf441", "patch": "@@ -144,7 +144,7 @@ function initSearch(rawSearchIndex) {\n     function itemTypeFromName(typename) {\n         const index = itemTypes.findIndex(i => i === typename);\n         if (index < 0) {\n-            throw new Error(\"Unknown type filter `\" + typename + \"`\");\n+            throw [\"Unknown type filter \", typename];\n         }\n         return index;\n     }\n@@ -164,21 +164,21 @@ function initSearch(rawSearchIndex) {\n      */\n     function getStringElem(query, parserState, isInGenerics) {\n         if (isInGenerics) {\n-            throw new Error(\"`\\\"` cannot be used in generics\");\n+            throw [\"Unexpected \", \"\\\"\", \" in generics\"];\n         } else if (query.literalSearch) {\n-            throw new Error(\"Cannot have more than one literal search element\");\n+            throw [\"Cannot have more than one literal search element\"];\n         } else if (parserState.totalElems - parserState.genericsElems > 0) {\n-            throw new Error(\"Cannot use literal search when there is more than one element\");\n+            throw [\"Cannot use literal search when there is more than one element\"];\n         }\n         parserState.pos += 1;\n         const start = parserState.pos;\n         const end = getIdentEndPosition(parserState);\n         if (parserState.pos >= parserState.length) {\n-            throw new Error(\"Unclosed `\\\"`\");\n+            throw [\"Unclosed \", \"\\\"\"];\n         } else if (parserState.userQuery[end] !== \"\\\"\") {\n-            throw new Error(`Unexpected \\`${parserState.userQuery[end]}\\` in a string element`);\n+            throw [\"Unexpected \", parserState.userQuery[end], \" in a string element\"];\n         } else if (start === end) {\n-            throw new Error(\"Cannot have empty string element\");\n+            throw [\"Cannot have empty string element\"];\n         }\n         // To skip the quote at the end.\n         parserState.pos += 1;\n@@ -257,7 +257,7 @@ function initSearch(rawSearchIndex) {\n             return;\n         }\n         if (query.literalSearch && parserState.totalElems - parserState.genericsElems > 0) {\n-            throw new Error(\"You cannot have more than one element if you use quotes\");\n+            throw [\"You cannot have more than one element if you use quotes\"];\n         }\n         const pathSegments = name.split(\"::\");\n         if (pathSegments.length > 1) {\n@@ -266,17 +266,17 @@ function initSearch(rawSearchIndex) {\n \n                 if (pathSegment.length === 0) {\n                     if (i === 0) {\n-                        throw new Error(\"Paths cannot start with `::`\");\n+                        throw [\"Paths cannot start with \", \"::\"];\n                     } else if (i + 1 === len) {\n-                        throw new Error(\"Paths cannot end with `::`\");\n+                        throw [\"Paths cannot end with \", \"::\"];\n                     }\n-                    throw new Error(\"Unexpected `::::`\");\n+                    throw [\"Unexpected \", \"::::\"];\n                 }\n             }\n         }\n         // In case we only have something like `<p>`, there is no name.\n         if (pathSegments.length === 0 || (pathSegments.length === 1 && pathSegments[0] === \"\")) {\n-            throw new Error(\"Found generics without a path\");\n+            throw [\"Found generics without a path\"];\n         }\n         parserState.totalElems += 1;\n         if (isInGenerics) {\n@@ -308,15 +308,15 @@ function initSearch(rawSearchIndex) {\n             if (!isIdentCharacter(c)) {\n                 if (c === \"!\") {\n                     if (foundExclamation !== -1) {\n-                        throw new Error(\"Cannot have more than one `!` in an ident\");\n+                        throw [\"Cannot have more than one \", \"!\", \" in an ident\"];\n                     } else if (parserState.pos + 1 < parserState.length &&\n                         isIdentCharacter(parserState.userQuery[parserState.pos + 1])\n                     ) {\n-                        throw new Error(\"`!` can only be at the end of an ident\");\n+                        throw [\"Unexpected \", \"!\", \": it can only be at the end of an ident\"];\n                     }\n                     foundExclamation = parserState.pos;\n                 } else if (isErrorCharacter(c)) {\n-                    throw new Error(`Unexpected \\`${c}\\``);\n+                    throw [\"Unexpected \", c];\n                 } else if (\n                     isStopCharacter(c) ||\n                     isSpecialStartCharacter(c) ||\n@@ -329,7 +329,7 @@ function initSearch(rawSearchIndex) {\n                     }\n                     if (foundExclamation !== -1) {\n                         if (start <= (end - 2)) {\n-                            throw new Error(\"Cannot have associated items in macros\");\n+                            throw [\"Cannot have associated items in macros\"];\n                         } else {\n                             // if start == end - 1, we got the never type\n                             // while the never type has no associated macros, we still\n@@ -340,7 +340,7 @@ function initSearch(rawSearchIndex) {\n                     // Skip current \":\".\n                     parserState.pos += 1;\n                 } else {\n-                    throw new Error(`Unexpected \\`${c}\\``);\n+                    throw [\"Unexpected \", c];\n                 }\n             }\n             parserState.pos += 1;\n@@ -351,8 +351,13 @@ function initSearch(rawSearchIndex) {\n             if (parserState.typeFilter === null) {\n                 parserState.typeFilter = \"macro\";\n             } else if (parserState.typeFilter !== \"macro\") {\n-                throw new Error(\"Invalid search type: macro `!` and \" +\n-                    `\\`${parserState.typeFilter}\\` both specified`);\n+                throw [\n+                    \"Invalid search type: macro \",\n+                    \"!\",\n+                    \" and \",\n+                    parserState.typeFilter,\n+                    \" both specified\",\n+                ];\n             }\n             end = foundExclamation;\n         }\n@@ -382,9 +387,9 @@ function initSearch(rawSearchIndex) {\n             parserState.userQuery[parserState.pos] === \"<\"\n         ) {\n             if (isInGenerics) {\n-                throw new Error(\"Unexpected `<` after `<`\");\n+                throw [\"Unexpected \", \"<\", \" after \", \"<\"];\n             } else if (start >= end) {\n-                throw new Error(\"Found generics without a path\");\n+                throw [\"Found generics without a path\"];\n             }\n             parserState.pos += 1;\n             getItemsBefore(query, parserState, generics, \">\");\n@@ -428,21 +433,39 @@ function initSearch(rawSearchIndex) {\n                 foundStopChar = true;\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n-                throw new Error(\"Unexpected `::`: paths cannot start with `::`\");\n+                throw [\"Unexpected \", \"::\", \": paths cannot start with \", \"::\"];\n             } else if (c === \":\" || isEndCharacter(c)) {\n                 let extra = \"\";\n                 if (endChar === \">\") {\n-                    extra = \"`<`\";\n+                    extra = \"<\";\n                 } else if (endChar === \"\") {\n-                    extra = \"`->`\";\n+                    extra = \"->\";\n+                } else {\n+                    extra = endChar;\n                 }\n-                throw new Error(\"Unexpected `\" + c + \"` after \" + extra);\n+                throw [\"Unexpected \", c, \" after \", extra];\n             }\n             if (!foundStopChar) {\n                 if (endChar !== \"\") {\n-                    throw new Error(`Expected \\`,\\`, \\` \\` or \\`${endChar}\\`, found \\`${c}\\``);\n+                    throw [\n+                        \"Expected \",\n+                        \",\", // comma\n+                        \", \",\n+                        \"&nbsp;\", // whitespace\n+                        \" or \",\n+                        endChar,\n+                        \", found \",\n+                        c,\n+                    ];\n                 }\n-                throw new Error(`Expected \\`,\\` or \\` \\`, found \\`${c}\\``);\n+                throw [\n+                    \"Expected \",\n+                    \",\", // comma\n+                    \" or \",\n+                    \"&nbsp;\", // whitespace\n+                    \", found \",\n+                    c,\n+                ];\n             }\n             const posBefore = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n@@ -470,7 +493,7 @@ function initSearch(rawSearchIndex) {\n \n         for (let pos = 0; pos < parserState.pos; ++pos) {\n             if (!isIdentCharacter(query[pos]) && !isWhitespaceCharacter(query[pos])) {\n-                throw new Error(`Unexpected \\`${query[pos]}\\` in type filter`);\n+                throw [\"Unexpected \", query[pos], \" in type filter\"];\n             }\n         }\n     }\n@@ -496,19 +519,19 @@ function initSearch(rawSearchIndex) {\n                     if (isReturnArrow(parserState)) {\n                         break;\n                     }\n-                    throw new Error(`Unexpected \\`${c}\\` (did you mean \\`->\\`?)`);\n+                    throw [\"Unexpected \", c, \" (did you mean \", \"->\", \"?)\"];\n                 }\n-                throw new Error(`Unexpected \\`${c}\\``);\n+                throw [\"Unexpected \", c];\n             } else if (c === \":\" && !isPathStart(parserState)) {\n                 if (parserState.typeFilter !== null) {\n-                    throw new Error(\"Unexpected `:`\");\n+                    throw [\"Unexpected \", \":\"];\n                 }\n                 if (query.elems.length === 0) {\n-                    throw new Error(\"Expected type filter before `:`\");\n+                    throw [\"Expected type filter before \", \":\"];\n                 } else if (query.elems.length !== 1 || parserState.totalElems !== 1) {\n-                    throw new Error(\"Unexpected `:`\");\n+                    throw [\"Unexpected \", \":\"];\n                 } else if (query.literalSearch) {\n-                    throw new Error(\"You cannot use quotes on type filter\");\n+                    throw [\"You cannot use quotes on type filter\"];\n                 }\n                 checkExtraTypeFilterCharacters(parserState);\n                 // The type filter doesn't count as an element since it's a modifier.\n@@ -521,9 +544,29 @@ function initSearch(rawSearchIndex) {\n             }\n             if (!foundStopChar) {\n                 if (parserState.typeFilter !== null) {\n-                    throw new Error(`Expected \\`,\\`, \\` \\` or \\`->\\`, found \\`${c}\\``);\n+                    throw [\n+                        \"Expected \",\n+                        \",\", // comma\n+                        \", \",\n+                        \"&nbsp;\", // whitespace\n+                        \" or \",\n+                        \"->\", // arrow\n+                        \", found \",\n+                        c,\n+                    ];\n                 }\n-                throw new Error(`Expected \\`,\\`, \\` \\`, \\`:\\` or \\`->\\`, found \\`${c}\\``);\n+                throw [\n+                    \"Expected \",\n+                    \",\", // comma\n+                    \", \",\n+                    \"&nbsp;\", // whitespace\n+                    \", \",\n+                    \":\", // colon\n+                    \" or \",\n+                    \"->\", // arrow\n+                    \", found \",\n+                    c,\n+                ];\n             }\n             const before = query.elems.length;\n             getNextElem(query, parserState, query.elems, false);\n@@ -540,7 +583,7 @@ function initSearch(rawSearchIndex) {\n                 getItemsBefore(query, parserState, query.returned, \"\");\n                 // Nothing can come afterward!\n                 if (query.returned.length === 0) {\n-                    throw new Error(\"Expected at least one item after `->`\");\n+                    throw [\"Expected at least one item after \", \"->\"];\n                 }\n                 break;\n             } else {\n@@ -694,7 +737,7 @@ function initSearch(rawSearchIndex) {\n             }\n         } catch (err) {\n             query = newParsedQuery(userQuery);\n-            query.error = err.message;\n+            query.error = err;\n             query.typeFilter = -1;\n             return query;\n         }\n@@ -1760,7 +1803,16 @@ function initSearch(rawSearchIndex) {\n \n         let output = `<h1 class=\"search-results-title\">Results${crates}</h1>`;\n         if (results.query.error !== null) {\n-            output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n+            const error = results.query.error;\n+            error.forEach((value, index) => {\n+                value = value.split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n+                if (index % 2 !== 0) {\n+                    error[index] = `<code>${value}</code>`;\n+                } else {\n+                    error[index] = value;\n+                }\n+            });\n+            output += `<h3 class=\"error\">Query parser error: \"${error.join(\"\")}\".</h3>`;\n             output += \"<div id=\\\"search-tabs\\\">\" +\n                 makeTabHeader(0, \"In Names\", ret_others[1]) +\n                 \"</div>\";"}]}