{"sha": "a24f636e60a5da57ab641d800ac5952bbde98b65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGY2MzZlNjBhNWRhNTdhYjY0MWQ4MDBhYzU5NTJiYmRlOThiNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-05T02:11:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-05T02:11:06Z"}, "message": "Auto merge of #64160 - Centril:rollup-vrfj1pt, r=Centril\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #62860 (Stabilize checked_duration_since for 1.38.0)\n - #63549 (Rev::rposition counts from the wrong end)\n - #63985 (Stabilize pin_into_inner in 1.39.0)\n - #64005 (Add a `Place::is_indirect` method to determine whether a `Place` contains a `Deref` projection)\n - #64031 (Harden `param_attrs` test wrt. usage of a proc macro `#[attr]`)\n - #64038 (Check impl trait substs when checking for recursive types)\n - #64043 (Add some more tests for underscore imports)\n - #64092 (Update xLTO compatibility table in rustc book.)\n - #64110 (Refer to \"`self` type\" instead of \"receiver type\")\n - #64120 (Move path parsing earlier)\n - #64123 (Added warning around code with reference to uninit bytes)\n - #64128 (unused_parens: account for or-patterns and `&(mut x)`)\n - #64141 (Minimize uses of `LocalInternedString`)\n - #64142 (Fix doc links in `std::cmp` module)\n - #64148 (fix a few typos in comments)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "df8c02fb78ed123bf2e2e65501a037753fe6f4fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8c02fb78ed123bf2e2e65501a037753fe6f4fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24f636e60a5da57ab641d800ac5952bbde98b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24f636e60a5da57ab641d800ac5952bbde98b65", "html_url": "https://github.com/rust-lang/rust/commit/a24f636e60a5da57ab641d800ac5952bbde98b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24f636e60a5da57ab641d800ac5952bbde98b65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f257c40b199198eacc65bb31f932ee04305e6d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/f257c40b199198eacc65bb31f932ee04305e6d41", "html_url": "https://github.com/rust-lang/rust/commit/f257c40b199198eacc65bb31f932ee04305e6d41"}, {"sha": "51ae5d053b6125027010faff963b333d8e48c77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ae5d053b6125027010faff963b333d8e48c77a", "html_url": "https://github.com/rust-lang/rust/commit/51ae5d053b6125027010faff963b333d8e48c77a"}], "stats": {"total": 1615, "additions": 1182, "deletions": 433}, "files": [{"sha": "6f1bbe60569fd4ccfeadcfceefb68c7ec97ced13", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -105,5 +105,6 @@ The following table shows known good combinations of toolchain versions.\n | Rust 1.34 |     \u2717     |     \u2713     |\n | Rust 1.35 |     \u2717     |     \u2713     |\n | Rust 1.36 |     \u2717     |     \u2713     |\n+| Rust 1.37 |     \u2717     |     \u2713     |\n \n Note that the compatibility policy for this feature might change in the future."}, {"sha": "7ec2295f97e368913b98dc4ce0b0fdde5f392655", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -9,14 +9,22 @@\n //! * [`Ord`] and [`PartialOrd`] are traits that allow you to define total and\n //!   partial orderings between values, respectively. Implementing them overloads\n //!   the `<`, `<=`, `>`, and `>=` operators.\n-//! * [`Ordering`][cmp::Ordering] is an enum returned by the\n-//!   main functions of [`Ord`] and [`PartialOrd`], and describes an ordering.\n-//! * [`Reverse`][cmp::Reverse] is a struct that allows you to easily reverse\n-//!   an ordering.\n-//! * [`max`][cmp::max] and [`min`][cmp::min] are functions that build off of\n-//!   [`Ord`] and allow you to find the maximum or minimum of two values.\n+//! * [`Ordering`] is an enum returned by the main functions of [`Ord`] and\n+//!   [`PartialOrd`], and describes an ordering.\n+//! * [`Reverse`] is a struct that allows you to easily reverse an ordering.\n+//! * [`max`] and [`min`] are functions that build off of [`Ord`] and allow you\n+//!   to find the maximum or minimum of two values.\n //!\n //! For more details, see the respective documentation of each item in the list.\n+//!\n+//! [`Eq`]: trait.Eq.html\n+//! [`PartialEq`]: trait.PartialEq.html\n+//! [`Ord`]: trait.Ord.html\n+//! [`PartialOrd`]: trait.PartialOrd.html\n+//! [`Ordering`]: enum.Ordering.html\n+//! [`Reverse`]: struct.Reverse.html\n+//! [`max`]: fn.max.html\n+//! [`min`]: fn.min.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8e1ac6082c8a8fa98de57c097e8c7d762a6dc088", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -66,13 +66,6 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     {\n         self.iter.rfind(predicate)\n     }\n-\n-    #[inline]\n-    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n-        P: FnMut(Self::Item) -> bool\n-    {\n-        self.iter.position(predicate)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1080fd32a8862dd697dee5ca4cca6212db7ec553", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -462,7 +462,7 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     /// can ignore the pinning invariants when unwrapping it.\n     ///\n     /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n-    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub fn into_inner(pin: Pin<P>) -> P {\n         pin.pointer\n@@ -569,7 +569,7 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n     /// [`Pin::into_inner`]: #method.into_inner\n-    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n         pin.pointer"}, {"sha": "8e0658d87c1fb466badfff3bb8c6b4d73797ed3d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1688,6 +1688,12 @@ fn test_rposition() {\n     assert!(v.iter().rposition(g).is_none());\n }\n \n+#[test]\n+fn test_rev_rposition() {\n+    let v = [0, 0, 1, 1];\n+    assert_eq!(v.iter().rev().rposition(|&x| x == 1), Some(1));\n+}\n+\n #[test]\n #[should_panic]\n fn test_rposition_panic() {"}, {"sha": "937a9ea6c1bd485150b91ac3e01e40f7848dfb7f", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -39,7 +39,7 @@ Generally, `Self: Sized` is used to indicate that the trait should not be used\n as a trait object. If the trait comes from your own crate, consider removing\n this restriction.\n \n-### Method references the `Self` type in its arguments or return type\n+### Method references the `Self` type in its parameters or return type\n \n This happens when a trait has a method like the following:\n "}, {"sha": "b8bd1d73fc28b4e12e786aea303dc12430ea2d2c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             });\n \n         let mut upstream_crates: Vec<_> = cstore.crates_untracked().iter().map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum).as_str();\n+            let name = cstore.crate_name_untracked(cnum).as_interned_str();\n             let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n             (name, disambiguator, hash)"}, {"sha": "ddfca3a4cfb725a0ec256fdd807358731552f056", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::{InternedString, LocalInternedString};\n+use syntax::symbol::InternedString;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -39,27 +39,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n-    #[inline]\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let s: &str = &**self;\n-        s.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n-    type KeyType = LocalInternedString;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n-        self.clone()\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "bf9cb79fb8a1060769e1a3862b9f231a5e4917b7", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1627,7 +1627,7 @@ impl<'tcx> ObligationCause<'tcx> {\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n-            MethodReceiver => Error0308(\"mismatched method receiver\"),\n+            MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n             // In the case where we have no more specific thing to\n             // say, also take a look at the error code, maybe we can"}, {"sha": "77df93080cd165cfeb9ea33870184163f4f92a0e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -33,7 +33,7 @@ use crate::util::common::time;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n+use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n use errors::DiagnosticBuilder;\n use crate::hir;\n use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -405,7 +405,7 @@ impl LintStore {\n     pub fn check_lint_name(\n         &self,\n         lint_name: &str,\n-        tool_name: Option<LocalInternedString>,\n+        tool_name: Option<Symbol>,\n     ) -> CheckLintNameResult<'_> {\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)"}, {"sha": "cbc6dbdba7e6cc9716f29a7c2e8c295291c483ea", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -291,7 +291,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue;\n                     }\n \n-                    Some(tool_ident.as_str())\n+                    Some(tool_ident.name)\n                 } else {\n                     None\n                 };"}, {"sha": "8956cbb2baefc360b874c65340263b3d8918d1c8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1808,6 +1808,23 @@ pub enum ProjectionElem<V, T> {\n     Downcast(Option<Symbol>, VariantIdx),\n }\n \n+impl<V, T> ProjectionElem<V, T> {\n+    /// Returns `true` if the target of this projection may refer to a different region of memory\n+    /// than the base.\n+    fn is_indirect(&self) -> bool {\n+        match self {\n+            Self::Deref => true,\n+\n+            | Self::Field(_, _)\n+            | Self::Index(_)\n+            | Self::ConstantIndex { .. }\n+            | Self::Subslice { .. }\n+            | Self::Downcast(_, _)\n+            => false\n+        }\n+    }\n+}\n+\n /// Alias for projections as they appear in places, where the base is a place\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n@@ -1869,6 +1886,14 @@ impl<'tcx> Place<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this `Place` contains a `Deref` projection.\n+    ///\n+    /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the\n+    /// same region of memory as its base.\n+    pub fn is_indirect(&self) -> bool {\n+        self.iterate(|_, mut projections| projections.any(|proj| proj.elem.is_indirect()))\n+    }\n+\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     //"}, {"sha": "03cc00d87e3cd3091843b68545bb2e32672efc5e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1384,7 +1384,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut reported_violations = FxHashSet::default();\n         for violation in violations {\n             if reported_violations.insert(violation.clone()) {\n-                err.note(&violation.error_msg());\n+                match violation.span() {\n+                    Some(span) => err.span_label(span, violation.error_msg()),\n+                    None => err.note(&violation.error_msg()),\n+                };\n             }\n         }\n         Some(err)"}, {"sha": "f7f459cd27f68d2d801e6d82a52c76119e7de820", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -20,7 +20,7 @@ use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n use syntax::symbol::InternedString;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n@@ -32,10 +32,10 @@ pub enum ObjectSafetyViolation {\n     SupertraitSelf,\n \n     /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode),\n+    Method(ast::Name, MethodViolationCode, Span),\n \n     /// Associated const.\n-    AssocConst(ast::Name),\n+    AssocConst(ast::Name, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -46,22 +46,35 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n                  in the supertraits or where-clauses\".into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n-                format!(\"method `{}` has no receiver\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n-                format!(\"method `{}` references the `Self` type \\\n-                         in its arguments or return type\", name).into(),\n-            ObjectSafetyViolation::Method(name,\n-                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n-                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) =>\n+                format!(\"associated function `{}` has no `self` parameter\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n+                \"method `{}` references the `Self` type in its parameters or return type\",\n+                name,\n+            ).into(),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                _,\n+            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n-                format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n-            ObjectSafetyViolation::AssocConst(name) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) =>\n+                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n+            ObjectSafetyViolation::AssocConst(name, _) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n+\n+    pub fn span(&self) -> Option<Span> {\n+        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n+        // diagnostics use a `note` instead of a `span_label`.\n+        match *self {\n+            ObjectSafetyViolation::AssocConst(_, span) |\n+            ObjectSafetyViolation::Method(_, _, span) if span != DUMMY_SP => Some(span),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Reasons a method might not be object-safe.\n@@ -74,7 +87,7 @@ pub enum MethodViolationCode {\n     ReferencesSelf,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n-    WhereClauseReferencesSelf(Span),\n+    WhereClauseReferencesSelf,\n \n     /// e.g., `fn foo<A>()`\n     Generic,\n@@ -88,9 +101,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// astconv -- currently, `Self` in supertraits. This is needed\n     /// because `object_safety_violations` can't be used during\n     /// type collection.\n-    pub fn astconv_object_safety_violations(self, trait_def_id: DefId)\n-                                            -> Vec<ObjectSafetyViolation>\n-    {\n+    pub fn astconv_object_safety_violations(\n+        self,\n+        trait_def_id: DefId,\n+    ) -> Vec<ObjectSafetyViolation> {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n         let violations = traits::supertrait_def_ids(self, trait_def_id)\n             .filter(|&def_id| self.predicates_reference_self(def_id, true))\n@@ -128,7 +142,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match self.virtual_call_violation_for_method(trait_def_id, method) {\n-            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n             Some(_) => false,\n         }\n     }\n@@ -138,12 +152,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n-                self.object_safety_violation_for_method(trait_def_id, &item)\n-                    .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n+                self.object_safety_violation_for_method(trait_def_id, &item).map(|code| {\n+                    ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span)\n+                })\n             ).filter(|violation| {\n-                if let ObjectSafetyViolation::Method(_,\n-                    MethodViolationCode::WhereClauseReferencesSelf(span)) = violation\n-                {\n+                if let ObjectSafetyViolation::Method(\n+                    _,\n+                    MethodViolationCode::WhereClauseReferencesSelf,\n+                    span,\n+                ) = violation {\n                     // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                     // It's also hard to get a use site span, so we use the method definition span.\n                     self.lint_node_note(\n@@ -169,7 +186,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         violations.extend(self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name)));\n+            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)));\n \n         debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n                trait_def_id,\n@@ -325,8 +342,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .visit_tys_shallow(|t| {\n                     self.contains_illegal_self_type_reference(trait_def_id, t)\n                 }) {\n-            let span = self.def_span(method.def_id);\n-            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf);\n         }\n \n         let receiver_ty = self.liberate_late_bound_regions("}, {"sha": "5a988d9509e800ee8cb903b36810b8c218c638a3", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -9,10 +9,9 @@ use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n-use syntax_pos::symbol::LocalInternedString;\n \n #[derive(Clone, Debug)]\n-pub struct OnUnimplementedFormatString(LocalInternedString);\n+pub struct OnUnimplementedFormatString(Symbol);\n \n #[derive(Debug)]\n pub struct OnUnimplementedDirective {\n@@ -89,19 +88,19 @@ impl<'tcx> OnUnimplementedDirective {\n             if item.check_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n                     message = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, message_.as_str(), span)?);\n+                        tcx, trait_def_id, message_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n                     label = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, label_.as_str(), span)?);\n+                        tcx, trait_def_id, label_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n                     note = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, note_.as_str(), span)?);\n+                        tcx, trait_def_id, note_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::on) && is_root &&\n@@ -154,7 +153,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                    tcx, trait_def_id, value, attr.span)?),\n                 note: None,\n             }))\n         } else {\n@@ -218,7 +217,7 @@ impl<'tcx> OnUnimplementedFormatString {\n     fn try_parse(\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n-        from: LocalInternedString,\n+        from: Symbol,\n         err_sp: Span,\n     ) -> Result<Self, ErrorReported> {\n         let result = OnUnimplementedFormatString(from);\n@@ -234,7 +233,8 @@ impl<'tcx> OnUnimplementedFormatString {\n     ) -> Result<(), ErrorReported> {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -294,7 +294,8 @@ impl<'tcx> OnUnimplementedFormatString {\n         }).collect::<FxHashMap<Symbol, String>>();\n         let empty_string = String::new();\n \n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         parser.map(|p|\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "2da50f37409ae2a68433f11e86ff98628761442d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -46,7 +46,7 @@ use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol, LocalInternedString, InternedString};\n+use syntax::symbol::{kw, sym, Symbol, InternedString};\n use syntax_pos::Span;\n \n use smallvec;\n@@ -3386,10 +3386,6 @@ impl SymbolName {\n             name: InternedString::intern(name)\n         }\n     }\n-\n-    pub fn as_str(&self) -> LocalInternedString {\n-        self.name.as_str()\n-    }\n }\n \n impl fmt::Display for SymbolName {"}, {"sha": "a08c82a0ae82fdd7a559b14a7520d1f7dacd1263", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -709,8 +709,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 substs: SubstsRef<'tcx>,\n             ) -> Option<Ty<'tcx>> {\n                 if self.found_recursion {\n-                    None\n-                } else if self.seen_opaque_tys.insert(def_id) {\n+                    return None;\n+                }\n+                let substs = substs.fold_with(self);\n+                if self.seen_opaque_tys.insert(def_id) {\n                     let generic_ty = self.tcx.type_of(def_id);\n                     let concrete_ty = generic_ty.subst(self.tcx, substs);\n                     let expanded_ty = self.fold_ty(concrete_ty);"}, {"sha": "fc23ef1d47e5b63436e56cf7edb8fe8f267a98ae", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -5,7 +5,6 @@ use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use syntax::symbol::LocalInternedString;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -24,6 +23,7 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n+use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -1082,8 +1082,8 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n \n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "35d5107842d5b3464b2d7b6f8a86b6bffdb62f12", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -37,7 +37,7 @@ pub fn get_fn(\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance).as_str();\n+    let sym = tcx.symbol_name(instance).name.as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n     // Create a fn pointer with the substituted signature."}, {"sha": "c337e35460e1829e0f0c9ebda938bf825ce2aab6", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -17,7 +17,7 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_uint, c_char};\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::ast::Mutability;\n \n pub use crate::context::CodegenCx;\n@@ -122,17 +122,18 @@ impl CodegenCx<'ll, 'tcx> {\n \n     fn const_cstr(\n         &self,\n-        s: LocalInternedString,\n+        s: Symbol,\n         null_terminated: bool,\n     ) -> &'ll Value {\n         unsafe {\n             if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n                 return llval;\n             }\n \n+            let s_str = s.as_str();\n             let sc = llvm::LLVMConstStringInContext(self.llcx,\n-                                                    s.as_ptr() as *const c_char,\n-                                                    s.len() as c_uint,\n+                                                    s_str.as_ptr() as *const c_char,\n+                                                    s_str.len() as c_uint,\n                                                     !null_terminated as Bool);\n             let sym = self.generate_local_symbol_name(\"str\");\n             let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n@@ -147,8 +148,8 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n-        let len = s.len();\n+    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n+        let len = s.as_str().len();\n         let cs = consts::ptrcast(self.const_cstr(s, false),\n             self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n         self.const_fat_ptr(cs, self.const_usize(len as u64))"}, {"sha": "e71d1fc16924bb1ed966d99935c2b3114aa63059", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -11,12 +11,11 @@ use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n     Pointer, ErrorHandled, GlobalId};\n use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n-use syntax_pos::Span;\n use rustc_target::abi::HasDataLayout;\n-use syntax::symbol::sym;\n-use syntax_pos::symbol::LocalInternedString;\n use rustc::ty::{self, Ty, Instance};\n use rustc_codegen_ssa::traits::*;\n+use syntax::symbol::{Symbol, sym};\n+use syntax_pos::Span;\n \n use rustc::ty::layout::{self, Size, Align, LayoutOf};\n \n@@ -122,10 +121,11 @@ fn check_and_apply_linkage(\n     cx: &CodegenCx<'ll, 'tcx>,\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n-    sym: LocalInternedString,\n+    sym: Symbol,\n     span: Span\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n+    let sym = sym.as_str();\n     if let Some(linkage) = attrs.linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n@@ -221,7 +221,7 @@ impl CodegenCx<'ll, 'tcx> {\n                  def_id);\n \n         let ty = instance.ty(self.tcx);\n-        let sym = self.tcx.symbol_name(instance).as_str();\n+        let sym = self.tcx.symbol_name(instance).name.as_symbol();\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n \n@@ -232,11 +232,12 @@ impl CodegenCx<'ll, 'tcx> {\n                 Node::Item(&hir::Item {\n                     ref attrs, span, node: hir::ItemKind::Static(..), ..\n                 }) => {\n-                    if self.get_declared_value(&sym[..]).is_some() {\n+                    let sym_str = sym.as_str();\n+                    if self.get_declared_value(&sym_str).is_some() {\n                         span_bug!(span, \"Conflicting symbol names for static?\");\n                     }\n \n-                    let g = self.define_global(&sym[..], llty).unwrap();\n+                    let g = self.define_global(&sym_str, llty).unwrap();\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}, {"sha": "58ce97039099e7bc7dc0477a84e483d82ac6d268", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -29,7 +29,7 @@ use std::cell::{Cell, RefCell};\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::source_map::{DUMMY_SP, Span};\n use crate::abi::Abi;\n \n@@ -52,7 +52,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,"}, {"sha": "d0b607bd88ee4f9d5023b8d653d5b80b6768c694", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -2251,7 +2251,7 @@ pub fn create_global_var_metadata(\n         None\n     } else {\n         let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id));\n-        Some(SmallCStr::new(&linkage_name.as_str()))\n+        Some(SmallCStr::new(&linkage_name.name.as_str()))\n     };\n \n     let global_align = cx.align_of(variable_type);"}, {"sha": "cad2bcdc05fc948a491230f5bfd3ce1383ecf370", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -290,7 +290,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let scope_line = span_start(self, span).line;\n \n         let function_name = CString::new(name).unwrap();\n-        let linkage_name = SmallCStr::new(&linkage_name.as_str());\n+        let linkage_name = SmallCStr::new(&linkage_name.name.as_str());\n \n         let mut flags = DIFlags::FlagPrototyped;\n "}, {"sha": "7e700e6819426c2ba29170df616edd1dd6be74fb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -121,7 +121,7 @@ fn reachable_non_generics_provider(\n         })\n         .map(|def_id| {\n             let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).name.as_str();\n                 // We can probably do better here by just ensuring that\n                 // it has hidden visibility rather than public\n                 // visibility, as this is primarily here to ensure it's"}, {"sha": "134c321456b6cc9ddda02d2bafde2d9ef9579e42", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -14,7 +14,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n@@ -397,7 +397,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+        let filename = Symbol::intern(&loc.file.name.to_string());\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n@@ -418,8 +418,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = msg.description();\n-                let msg_str = LocalInternedString::intern(str);\n+                let msg_str = Symbol::intern(msg.description());\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -531,15 +530,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+                let filename = Symbol::intern(&loc.file.name.to_string());\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n-                let msg_str = LocalInternedString::intern(&str);\n+                let msg_str = Symbol::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "5801963c101ef1079dc773e837b7ca58c50fa656", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        let symbol_name = self.symbol_name(cx.tcx()).as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).name.as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "73c4c053979173449661ba4e0714b330f2d2ed4f", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,5 +1,5 @@\n use super::BackendTypes;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -12,8 +12,8 @@ pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "51269be4e9f409f25f5165939b858adb677a894a", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -40,7 +40,7 @@ impl SymbolNamesTest<'tcx> {\n                 let instance = Instance::mono(tcx, def_id);\n                 let mangled = self.tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n-                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.as_str()) {\n+                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.name.as_str()) {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling({})\", demangling));\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }"}, {"sha": "39c0698aeec9fd611e25939ee3aa3d4779d32f30", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -398,18 +398,37 @@ impl UnusedParens {\n         }\n     }\n \n-    fn check_unused_parens_pat(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Pat,\n-                                msg: &str) {\n-        if let ast::PatKind::Paren(_) = value.node {\n+    fn check_unused_parens_pat(\n+        &self,\n+        cx: &EarlyContext<'_>,\n+        value: &ast::Pat,\n+        avoid_or: bool,\n+        avoid_mut: bool,\n+    ) {\n+        use ast::{PatKind, BindingMode::ByValue, Mutability::Mutable};\n+\n+        if let PatKind::Paren(inner) = &value.node {\n+            match inner.node {\n+                // The lint visitor will visit each subpattern of `p`. We do not want to lint\n+                // any range pattern no matter where it occurs in the pattern. For something like\n+                // `&(a..=b)`, there is a recursive `check_pat` on `a` and `b`, but we will assume\n+                // that if there are unnecessary parens they serve a purpose of readability.\n+                PatKind::Range(..) => return,\n+                // Avoid `p0 | .. | pn` if we should.\n+                PatKind::Or(..) if avoid_or => return,\n+                // Avoid `mut x` and `mut x @ p` if we should:\n+                PatKind::Ident(ByValue(Mutable), ..) if avoid_mut => return,\n+                // Otherwise proceed with linting.\n+                _ => {}\n+            }\n+\n             let pattern_text = if let Ok(snippet) = cx.sess().source_map()\n                 .span_to_snippet(value.span) {\n                     snippet\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, \"pattern\", (false, false));\n         }\n     }\n \n@@ -474,6 +493,13 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n         let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            Let(ref pats, ..) => {\n+                for p in pats {\n+                    self.check_unused_parens_pat(cx, p, false, false);\n+                }\n+                return;\n+            }\n+\n             If(ref cond, ref block, ..) => {\n                 let left = e.span.lo() + syntax_pos::BytePos(2);\n                 let right = block.span.lo();\n@@ -486,7 +512,8 @@ impl EarlyLintPass for UnusedParens {\n                 (cond, \"`while` condition\", true, Some(left), Some(right))\n             },\n \n-            ForLoop(_, ref cond, ref block, ..) => {\n+            ForLoop(ref pat, ref cond, ref block, ..) => {\n+                self.check_unused_parens_pat(cx, pat, false, false);\n                 (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n             }\n \n@@ -531,26 +558,46 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n-        use ast::PatKind::{Paren, Range};\n-        // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n-        // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n-        // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n-        // unnecessary parens they serve a purpose of readability.\n-        if let Paren(ref pat) = p.node {\n-            match pat.node {\n-                Range(..) => {}\n-                _ => self.check_unused_parens_pat(cx, &p, \"pattern\")\n-            }\n+        use ast::{PatKind::*, Mutability};\n+        match &p.node {\n+            // Do not lint on `(..)` as that will result in the other arms being useless.\n+            Paren(_)\n+            // The other cases do not contain sub-patterns.\n+            | Wild | Rest | Lit(..) | Mac(..) | Range(..) | Ident(.., None) | Path(..) => return,\n+            // These are list-like patterns; parens can always be removed.\n+            TupleStruct(_, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n+                self.check_unused_parens_pat(cx, p, false, false);\n+            },\n+            Struct(_, fps, _) => for f in fps {\n+                self.check_unused_parens_pat(cx, &f.pat, false, false);\n+            },\n+            // Avoid linting on `i @ (p0 | .. | pn)` and `box (p0 | .. | pn)`, #64106.\n+            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false),\n+            // Avoid linting on `&(mut x)` as `&mut x` has a different meaning, #55342.\n+            // Also avoid linting on `& mut? (p0 | .. | pn)`, #64106.\n+            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Immutable),\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n+            self.check_unused_parens_pat(cx, &local.pat, false, false);\n+\n             if let Some(ref value) = local.init {\n                 self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }\n+\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, param: &ast::Param) {\n+        self.check_unused_parens_pat(cx, &param.pat, true, false);\n+    }\n+\n+    fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n+        for p in &arm.pats {\n+            self.check_unused_parens_pat(cx, p, false, false);\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "62a3757757b800f9ca77d60cdbe1ed62d7aba071", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -54,15 +54,15 @@ fn main() {\n     // LLVM are compiled the same way, but for us that's typically the case.\n     //\n     // We *want* detect this cross compiling situation by asking llvm-config\n-    // what it's host-target is. If that's not the TARGET, then we're cross\n+    // what its host-target is. If that's not the TARGET, then we're cross\n     // compiling. Unfortunately `llvm-config` seems either be buggy, or we're\n     // misconfiguring it, because the `i686-pc-windows-gnu` build of LLVM will\n     // report itself with a `--host-target` of `x86_64-pc-windows-gnu`. This\n     // tricks us into thinking we're doing a cross build when we aren't, so\n     // havoc ensues.\n     //\n     // In any case, if we're cross compiling, this generally just means that we\n-    // can't trust all the output of llvm-config becaues it might be targeted\n+    // can't trust all the output of llvm-config because it might be targeted\n     // for the host rather than the target. As a result a bunch of blocks below\n     // are gated on `if !is_crossed`\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -166,7 +166,7 @@ fn main() {\n \n     let (llvm_kind, llvm_link_arg) = detect_llvm_link();\n \n-    // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n+    // Link in all LLVM libraries, if we're using the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);"}, {"sha": "9f25e98052ec49934581b628002fc66d2a64fe17", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -336,7 +336,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let local = &self.body.local_decls[local_index];\n         match local.name {\n             Some(name) if !local.from_compiler_desugaring() => {\n-                buf.push_str(name.as_str().get());\n+                buf.push_str(&name.as_str());\n                 Ok(())\n             }\n             _ => Err(()),"}, {"sha": "bac08090817d952d98ca59d7be60294a8d3f343c", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::places_conflict;\n use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase};\n-use rustc::mir::{ProjectionElem, BorrowKind};\n+use rustc::mir::BorrowKind;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::graph::dominators::Dominators;\n \n@@ -133,20 +133,11 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n-    place.iterate(|place_base, place_projection| {\n-        match place_base {\n-            PlaceBase::Static(..) => return false,\n-            PlaceBase::Local(..) => {},\n-        }\n-\n-        for proj in place_projection {\n-            // Reborrow of already borrowed data is ignored\n-            // Any errors will be caught on the initial borrow\n-            if proj.elem == ProjectionElem::Deref {\n-                return false;\n-            }\n-        }\n+    match place.base {\n+        PlaceBase::Static(_) => false,\n \n-        true\n-    })\n+        // Reborrow of already borrowed data is ignored\n+        // Any errors will be caught on the initial borrow\n+        PlaceBase::Local(_) => !place.is_indirect(),\n+    }\n }"}, {"sha": "1c43a553cc3c9edc681224df761c7f19f1cabe24", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -93,19 +93,10 @@ struct BorrowedLocalsVisitor<'gk> {\n }\n \n fn find_local(place: &Place<'_>) -> Option<Local> {\n-    place.iterate(|place_base, place_projection| {\n-        for proj in place_projection {\n-            if proj.elem == ProjectionElem::Deref {\n-                return None;\n-            }\n-        }\n-\n-        if let PlaceBase::Local(local) = place_base {\n-            Some(*local)\n-        } else {\n-            None\n-        }\n-    })\n+    match place.base {\n+        PlaceBase::Local(local) if !place.is_indirect() => Some(local),\n+        _ => None,\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowedLocalsVisitor<'_> {"}, {"sha": "c193911247e2bea5bb4219c1461214ab7476bf5d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -777,7 +777,7 @@ where\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).as_str();\n+                let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "9644815f805d992191fcabcd024dfe95ff63ce4e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -19,7 +19,7 @@ use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n-use syntax::symbol::{Symbol, LocalInternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 // prevent all specified fields from being suggested\n-                let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n+                let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);\n                 if let Some(field_name) = Self::suggest_field_name(\n                     variant,\n                     &field.ident.as_str(),\n@@ -1288,11 +1288,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &str,\n-                          skip: Vec<LocalInternedString>)\n+                          skip: Vec<Symbol>)\n                           -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|x| *x == field.ident.as_str()) ||\n+            if skip.iter().any(|&x| x == field.ident.name) ||\n                (!variant.def_id.is_local() && field.vis != Visibility::Public)\n             {\n                 None"}, {"sha": "b3ce92cb7d922c48963e39247734280dd4e599f7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1420,8 +1420,8 @@ fn check_opaque_for_cycles<'tcx>(\n                 tcx.sess, span, E0733,\n                 \"recursion in an `async fn` requires boxing\",\n             )\n-            .span_label(span, \"an `async fn` cannot invoke itself directly\")\n-            .note(\"a recursive `async fn` must be rewritten to return a boxed future.\")\n+            .span_label(span, \"recursive `async fn`\")\n+            .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\")\n             .emit();\n         } else {\n             let mut err = struct_span_err!("}, {"sha": "ac8ee43dd0801670797b165e48e1b7eba5a30237", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -762,19 +762,19 @@ fn check_opaque_types<'fcx, 'tcx>(\n     substituted_predicates\n }\n \n+const HELP_FOR_SELF_TYPE: &str =\n+    \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+     `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+     of the previous types except `Self`)\";\n+\n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     method_sig: &hir::MethodSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n-    const HELP_FOR_SELF_TYPE: &str =\n-        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n-         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n-         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n-    debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n-           method, self_ty);\n+    debug!(\"check_method_receiver({:?}, self_ty={:?})\", method, self_ty);\n \n     if !method.method_has_self_argument {\n         return;\n@@ -805,12 +805,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n             // Report error; `arbitrary_self_types` was enabled.\n-            fcx.tcx.sess.diagnostic().mut_span_err(\n-                span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-            ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(HELP_FOR_SELF_TYPE)\n-            .code(DiagnosticId::Error(\"E0307\".into()))\n-            .emit();\n+            e0307(fcx, span, receiver_ty);\n         }\n     } else {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n@@ -830,17 +825,22 @@ fn check_method_receiver<'fcx, 'tcx>(\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n-                fcx.tcx.sess.diagnostic().mut_span_err(\n-                    span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-                ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(HELP_FOR_SELF_TYPE)\n-                .code(DiagnosticId::Error(\"E0307\".into()))\n-                .emit();\n+                e0307(fcx, span, receiver_ty);\n             }\n         }\n     }\n }\n \n+fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+    fcx.tcx.sess.diagnostic().mut_span_err(\n+        span,\n+        &format!(\"invalid `self` parameter type: {:?}\", receiver_ty)\n+    ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n+    .help(HELP_FOR_SELF_TYPE)\n+    .code(DiagnosticId::Error(\"E0307\".into()))\n+    .emit();\n+}\n+\n /// Returns whether `receiver_ty` would be considered a valid receiver type for `self_ty`. If\n /// `arbitrary_self_types` is enabled, `receiver_ty` must transitively deref to `self_ty`, possibly\n /// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more"}, {"sha": "093446d28533e21c6bad37611e4e96566074c6d5", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -212,7 +212,7 @@ match string {\n E0033: r##\"\n This error indicates that a pointer to a trait type cannot be implicitly\n dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementors isn't fixed, this type has no compile-time size.\n+size of trait implementers isn't fixed, this type has no compile-time size.\n Therefore, all accesses to trait types must be through pointers. If you\n encounter this error you should try to avoid dereferencing the pointer.\n \n@@ -2425,6 +2425,87 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n+E0307: r##\"\n+This error indicates that the `self` parameter in a method has an invalid\n+\"reciever type\".\n+\n+Methods take a special first parameter, of which there are three variants:\n+`self`, `&self`, and `&mut self`. These are syntactic sugar for\n+`self: Self`, `self: &Self`, and `self: &mut Self` respectively.\n+\n+```\n+# struct Foo;\n+trait Trait {\n+    fn foo(&self);\n+//         ^^^^^ `self` here is a reference to the receiver object\n+}\n+\n+impl Trait for Foo {\n+    fn foo(&self) {}\n+//         ^^^^^ the receiver type is `&Foo`\n+}\n+```\n+\n+The type `Self` acts as an alias to the type of the current trait\n+implementer, or \"receiver type\". Besides the already mentioned `Self`,\n+`&Self` and `&mut Self` valid receiver types, the following are also valid:\n+`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n+(where P is one of the previous types except `Self`). Note that `Self` can\n+also be the underlying implementing type, like `Foo` in the following\n+example:\n+\n+```\n+# struct Foo;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Foo) {}\n+}\n+```\n+\n+E0307 will be emitted by the compiler when using an invalid reciver type,\n+like in the following example:\n+\n+```compile_fail,E0307\n+# struct Foo;\n+# struct Bar;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Bar) {}\n+}\n+```\n+\n+The nightly feature [Arbintrary self types][AST] extends the accepted\n+set of receiver types to also include any type that can dereference to\n+`Self`:\n+\n+```\n+#![feature(arbitrary_self_types)]\n+\n+struct Foo;\n+struct Bar;\n+\n+// Because you can dereference `Bar` into `Foo`...\n+impl std::ops::Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &Foo\n+    }\n+}\n+\n+impl Foo {\n+    fn foo(self: Bar) {}\n+//         ^^^^^^^^^ ...it can be used as the receiver type\n+}\n+```\n+\n+[AST]: https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html\n+\"##,\n+\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -4851,7 +4932,6 @@ register_diagnostics! {\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412\n //  E0249,\n-    E0307, // invalid method `self` type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion"}, {"sha": "0386dbd490d0301dc50606a3a7af8c4620265cf3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -371,6 +371,14 @@ where\n     loop {\n         if g.len == g.buf.len() {\n             unsafe {\n+                // FIXME(danielhenrymantilla): #42788\n+                //\n+                //   - This creates a (mut) reference to a slice of\n+                //     _uninitialized_ integers, which is **undefined behavior**\n+                //\n+                //   - Only the standard library gets to soundly \"ignore\" this,\n+                //     based on its privileged knowledge of unstable rustc\n+                //     internals;\n                 g.buf.reserve(reservation_size(r));\n                 let capacity = g.buf.capacity();\n                 g.buf.set_len(capacity);"}, {"sha": "71050b0dcd1f5725e09e796c6e3ae9c94dcc3c2a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -244,7 +244,6 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n-#![feature(checked_duration_since)]\n #![feature(clamp)]\n #![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]"}, {"sha": "d59085cd44a6f4e8fe17d4d6711655a45e08b4d5", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -221,7 +221,6 @@ impl Instant {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(checked_duration_since)]\n     /// use std::time::{Duration, Instant};\n     /// use std::thread::sleep;\n     ///\n@@ -231,7 +230,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.checked_duration_since(now));\n     /// println!(\"{:?}\", now.checked_duration_since(new_now)); // None\n     /// ```\n-    #[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\n+    #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {\n         self.0.checked_sub_instant(&earlier.0)\n     }\n@@ -242,7 +241,6 @@ impl Instant {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(checked_duration_since)]\n     /// use std::time::{Duration, Instant};\n     /// use std::thread::sleep;\n     ///\n@@ -252,7 +250,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.saturating_duration_since(now));\n     /// println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n     /// ```\n-    #[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\n+    #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {\n         self.checked_duration_since(earlier).unwrap_or(Duration::new(0, 0))\n     }"}, {"sha": "e502a08f4b253a879fa46a583b424fb2f3e716ef", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -889,6 +889,36 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n+                if self.token.is_path_start() {\n+                    let path = self.parse_path(PathStyle::Expr)?;\n+\n+                    // `!`, as an operator, is prefix, so we know this isn't that\n+                    if self.eat(&token::Not) {\n+                        // MACRO INVOCATION expression\n+                        let (delim, tts) = self.expect_delimited_token_tree()?;\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Mac(Mac {\n+                            path,\n+                            tts,\n+                            delim,\n+                            span: lo.to(hi),\n+                            prior_type_ascription: self.last_type_ascription,\n+                        });\n+                    } else if self.check(&token::OpenDelim(token::Brace)) {\n+                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+                            return expr;\n+                        } else {\n+                            hi = path.span;\n+                            ex = ExprKind::Path(None, path);\n+                        }\n+                    } else {\n+                        hi = path.span;\n+                        ex = ExprKind::Path(None, path);\n+                    }\n+\n+                    let expr = self.mk_expr(lo.to(hi), ex, attrs);\n+                    return self.maybe_recover_from_bad_qpath(expr, true);\n+                }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_lambda_expr(attrs);\n                 }\n@@ -1007,32 +1037,6 @@ impl<'a> Parser<'a> {\n                     let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n-                } else if self.token.is_path_start() {\n-                    let path = self.parse_path(PathStyle::Expr)?;\n-\n-                    // `!`, as an operator, is prefix, so we know this isn't that\n-                    if self.eat(&token::Not) {\n-                        // MACRO INVOCATION expression\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Mac(Mac {\n-                            path,\n-                            tts,\n-                            delim,\n-                            span: lo.to(hi),\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                    } else if self.check(&token::OpenDelim(token::Brace)) {\n-                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n-                            return expr;\n-                        } else {\n-                            hi = path.span;\n-                            ex = ExprKind::Path(None, path);\n-                        }\n-                    } else {\n-                        hi = path.span;\n-                        ex = ExprKind::Path(None, path);\n-                    }\n                 } else {\n                     if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                         // Don't complain about bare semicolons after unclosed braces"}, {"sha": "3a4dc1f5a096bcfb546e65637abe6b2617df2043", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -818,10 +818,14 @@ impl Ident {\n         with_interner(|interner| interner.is_gensymed(self.name))\n     }\n \n+    /// Convert the name to a `LocalInternedString`. This is a slowish\n+    /// operation because it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n \n+    /// Convert the name to an `InternedString`. This is a slowish operation\n+    /// because it requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         self.name.as_interned_str()\n     }\n@@ -916,6 +920,25 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n+    /// Access the symbol's chars. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self))\n+        })\n+    }\n+\n+    /// Access two symbols' chars. This is a slowish operation because it\n+    /// requires locking the symbol interner, but it is faster than calling\n+    /// `with()` twice.\n+    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self), interner.get(other))\n+        })\n+    }\n+\n+    /// Convert to a `LocalInternedString`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n@@ -924,6 +947,8 @@ impl Symbol {\n         })\n     }\n \n+    /// Convert to an `InternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         with_interner(|interner| InternedString {\n             symbol: interner.interned(self)\n@@ -1152,39 +1177,11 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }\n \n-impl LocalInternedString {\n-    /// Maps a string to its interned representation.\n-    pub fn intern(string: &str) -> Self {\n-        let string = with_interner(|interner| {\n-            let symbol = interner.intern(string);\n-            interner.strings[symbol.0.as_usize()]\n-        });\n-        LocalInternedString {\n-            string: unsafe { std::mem::transmute::<&str, &str>(string) }\n-        }\n-    }\n-\n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString {\n-            symbol: Symbol::intern(self.string)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn get(&self) -> &str {\n-        // This returns a valid string since we ensure that `self` outlives the interner\n-        // by creating the interner on a thread which outlives threads which can access it.\n-        // This type cannot move to a thread which outlives the interner since it does\n-        // not implement Send.\n-        self.string\n-    }\n-}\n-\n impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n@@ -1246,18 +1243,6 @@ impl fmt::Display for LocalInternedString {\n     }\n }\n \n-impl Decodable for LocalInternedString {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n-        Ok(LocalInternedString::intern(&d.read_str()?))\n-    }\n-}\n-\n-impl Encodable for LocalInternedString {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self.string)\n-    }\n-}\n-\n /// An alternative to `Symbol` that is focused on string contents. It has two\n /// main differences to `Symbol`.\n ///\n@@ -1285,28 +1270,19 @@ impl InternedString {\n     }\n \n     pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        let str = with_interner(|interner| {\n-            interner.get(self.symbol) as *const str\n-        });\n-        // This is safe because the interner keeps string alive until it is dropped.\n-        // We can access it because we know the interner is still alive since we use a\n-        // scoped thread local to access it, and it was alive at the beginning of this scope\n-        unsafe { f(&*str) }\n+        self.symbol.with(f)\n     }\n \n     fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        let (self_str, other_str) = with_interner(|interner| {\n-            (interner.get(self.symbol) as *const str,\n-             interner.get(other.symbol) as *const str)\n-        });\n-        // This is safe for the same reason that `with` is safe.\n-        unsafe { f(&*self_str, &*other_str) }\n+        self.symbol.with2(other.symbol, f)\n     }\n \n     pub fn as_symbol(self) -> Symbol {\n         self.symbol\n     }\n \n+    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.symbol.as_str()\n     }"}, {"sha": "a5d7fc5b7024685e0d7d9b677bb7a6853f3f8934", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL |     const N: usize;\n+   |           - the trait cannot contain associated consts like `N`\n+...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `N`\n \n error: aborting due to previous error\n "}, {"sha": "bb2a61f03ce1f46e54d33741741df75762cda59f", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden when using `async` and `await`.\n+\n+async fn rec_1() { //~ ERROR recursion in an `async fn`\n+    rec_2().await;\n+}\n+\n+async fn rec_2() { //~ ERROR recursion in an `async fn`\n+    rec_1().await;\n+}\n+\n+fn main() {}"}, {"sha": "9249308936e5452b4503c2f4ccaf14bde509958b", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,19 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:5:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "9ee014021804e168da5543c7f0294c978ea19af9", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -2,9 +2,9 @@ error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ an `async fn` cannot invoke itself directly\n+   |                                        ^^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed future.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "5b384045a486abce4305ac22682809efd07ead89", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -61,8 +61,9 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n LL | impl dyn X {\n    |      ^^^^^ the trait `X` cannot be made into an object\n-   |\n-   = note: method `xxx` has no receiver\n+...\n+LL |     fn xxx() { ### }\n+   |        --- associated function `xxx` has no `self` parameter\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19439651394234071986e9fd56e3f16f9a4b1a12", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,14 +1,13 @@\n // compile-flags: -Z teach\n \n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "80f3d4441bd9faf6acfd0bc1350aa7b79a8cedc4", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033-teach.rs:13:9\n+  --> $DIR/E0033-teach.rs:12:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "e5f0530f45ff86ae0a5550512d394184db90fe58", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,12 +1,11 @@\n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "c2843796cc851b82c578555ab57ccfbf1ce9dc66", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:11:9\n+  --> $DIR/E0033.rs:10:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "5c4d6d53c4626bc01c8d3685372c6696a77eb8ee", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n+LL |     fn foo(&self) -> Self;\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "9ab8e13893bc77b5b63bfb9b575b7dd4fd843faa", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -6,11 +6,11 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch"}, {"sha": "4bf2d573d4f967580eb8aa07333eb077e963b8ff", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>\n@@ -17,7 +17,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>"}, {"sha": "cfd9c0ec5b45bab47c0813922f7ec11902452e3a", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,25 @@\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden. Even when there's an opaque type in another crate\n+// hiding this.\n+\n+fn id<T>(t: T) -> impl Sized { t }\n+\n+fn recursive_id() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id2())\n+}\n+\n+fn recursive_id2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id())\n+}\n+\n+fn wrap<T>(t: T) -> impl Sized { (t,) }\n+\n+fn recursive_wrap() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap2())\n+}\n+\n+fn recursive_wrap2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap())\n+}\n+\n+fn main() {}"}, {"sha": "7572c6c1bf0570f0169eb1f86350d488bb4d9d8d", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,35 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:7:22\n+   |\n+LL | fn recursive_id() -> impl Sized {\n+   |                      ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:11:23\n+   |\n+LL | fn recursive_id2() -> impl Sized {\n+   |                       ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:17:24\n+   |\n+LL | fn recursive_wrap() -> impl Sized {\n+   |                        ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:21:25\n+   |\n+LL | fn recursive_wrap2() -> impl Sized {\n+   |                         ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "b47568400c3b702b5fd381647a59d2ee8bfd32f6", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -4,11 +4,11 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched method receiver\n+    //~^ mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch\n-    //~| mismatched method receiver\n+    //~| mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch"}, {"sha": "b8a0a0676319a292aa5ac9888fc9f3b7336ca303", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {\n@@ -23,7 +23,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl <'a> Foo<'a>{\n    |       ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {"}, {"sha": "44279cc867b46e268a4a5e58f76bf937f0990fb7", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -6,8 +6,8 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n-//~^ ERROR mismatched method receiver\n-//~| ERROR mismatched method receiver\n+//~^ ERROR mismatched `self` parameter type\n+//~| ERROR mismatched `self` parameter type\n         println!(\"{:?}\", self);\n     }\n }"}, {"sha": "585bc9c14883bfb867afe9f9e22eed6a44ab15d3", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n@@ -21,7 +21,7 @@ note: ...does not necessarily outlive the lifetime '_ as defined on the impl at\n LL |     &str,\n    |     ^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {"}, {"sha": "d5e7092801ecd9b3806bc9fa5360f7b39940b20e", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:1\n    |\n+LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+   |                    --- method `foo` has generic type parameters\n+...\n LL | fn foo(b: &dyn Bar) {\n    | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error: aborting due to previous error\n "}, {"sha": "92bfdf1f26e93828b4eb0796d05086b17dc7826d", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL |   fn qiz();\n+   |      --- associated function `qiz` has no `self` parameter\n+...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n-   |\n-   = note: method `qiz` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "5415a45f7d621c41812f53ed39eb7bd0ed9fae59", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n-   = note: method `foo` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n \n error: aborting due to 2 previous errors"}, {"sha": "02475ea97e3d1fe81fd8a95851f873912b24bffc", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,8 +1,8 @@\n error: the trait `X` cannot be made into an object\n-  --> $DIR/issue-50781.rs:6:5\n+  --> $DIR/issue-50781.rs:6:8\n    |\n LL |     fn foo(&self) where Self: Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-50781.rs:1:9"}, {"sha": "b1dac26d65a15552b0171de954b53273a0e4f8f0", "filename": "src/test/ui/issues/issue-56806.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,7 +1,6 @@\n pub trait Trait {\n     fn dyn_instead_of_self(self: Box<dyn Trait>);\n-    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+    //~^ ERROR invalid `self` parameter type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "a4f9aadcfef3ee3f1bb5e1e74cd4668c93dc1a4d", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+error[E0307]: invalid `self` parameter type: std::boxed::Box<(dyn Trait + 'static)>\n   --> $DIR/issue-56806.rs:2:34\n    |\n LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "c442c39fe010ebf6c0402fb73c14b1837c4217ef", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,25 +1,75 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+#![feature(box_patterns)]\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete\n \n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unused_variables)]\n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n+\n+fn lint_on_top_level() {\n+    let (a) = 0; //~ ERROR unnecessary parentheses around pattern\n+    for (a) in 0..1 {} //~ ERROR unnecessary parentheses around pattern\n+    if let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    while let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    fn foo((a): u8) {} //~ ERROR unnecessary parentheses around pattern\n+    let _ = |(a): u8| 0; //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint in these cases (#64106).\n+fn or_patterns_no_lint() {\n+    match Box::new(0) {\n+        box (0 | 1) => {} // Should not lint as `box 0 | 1` binds as `(box 0) | 1`.\n+        _ => {}\n+    }\n+\n+    match 0 {\n+        x @ (0 | 1) => {} // Should not lint as `x @ 0 | 1` binds as `(x @ 0) | 1`.\n+        _ => {}\n+    }\n+\n+    if let &(0 | 1) = &0 {} // Should also not lint.\n+    if let &mut (0 | 1) = &mut 0 {} // Same.\n+\n+    fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+    //~^ ERROR identifier `a` is bound more than once\n+\n+    let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+    //~^ ERROR identifier `a` is bound more than once\n+}\n+\n+fn or_patterns_will_lint() {\n+    if let (0 | 1) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    if let ((0 | 1),) = (0,) {} //~ ERROR unnecessary parentheses around pattern\n+    if let [(0 | 1)] = [0] {} //~ ERROR unnecessary parentheses around pattern\n+    if let 0 | (1 | 2) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    struct TS(u8);\n+    if let TS((0 | 1)) = TS(0) {} //~ ERROR unnecessary parentheses around pattern\n+    struct NS { f: u8 }\n+    if let NS { f: (0 | 1) } = (NS { f: 0 }) {} //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint on `&(mut x)` because `&mut x` means something else (#55342).\n+fn deref_mut_binding_no_lint() {\n+    let &(mut x) = &0;\n+}\n \n fn main() {\n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1...2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1...2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1...2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1...2) => {} // Non ambiguous range pattern should not warn\n         e @ (3...4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n-        &(1...2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1...2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1...2) => {} // Ambiguous range pattern should not warn\n+        &(1...2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {\n@@ -28,19 +78,19 @@ fn main() {\n     }\n \n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1..=2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1..=2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1..=2) => {} // Non ambiguous range pattern should not warn\n         e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1..=2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1..=2) => {}   // Ambiguous range pattern should not warn\n-        &(1..=2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1..=2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1..=2) => {} // Ambiguous range pattern should not warn\n+        &(1..=2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {"}, {"sha": "a3e0fb938b3c60fef2f21a3526cd664d1b0abbc5", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 122, "deletions": 27, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,78 +1,173 @@\n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:10:9\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:35:25\n    |\n-LL |         (_) => {}\n+LL |     fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+   |                         ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:38:27\n+   |\n+LL |     let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+   |                           ^ used in a pattern more than once\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-54538-unused-parens-lint.rs:3:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+   |\n+LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:6:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:9:9\n    |\n-LL | #![warn(unused_parens)]\n+LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+   |\n+LL |     for (a) in 0..1 {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:14:12\n+   |\n+LL |     if let (a) = 0 {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:15\n+   |\n+LL |     while let (a) = 0 {}\n+   |               ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:16:12\n+   |\n+LL |     fn foo((a): u8) {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:14\n+   |\n+LL |     let _ = |(a): u8| 0;\n+   |              ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:43:12\n+   |\n+LL |     if let (0 | 1) = 0 {}\n+   |            ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:44:13\n+   |\n+LL |     if let ((0 | 1),) = (0,) {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:45:13\n+   |\n+LL |     if let [(0 | 1)] = [0] {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:46:16\n+   |\n+LL |     if let 0 | (1 | 2) = 0 {}\n+   |                ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:48:15\n+   |\n+LL |     if let TS((0 | 1)) = TS(0) {}\n+   |               ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:20\n+   |\n+LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n+   |                    ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:60:9\n+   |\n+LL |         (_) => {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:61:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:62:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:63:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:20:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:70:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:31:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:81:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:32:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:33:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:83:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:34:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:84:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:40:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:41:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n+error: aborting due to 26 previous errors\n+\n+For more information about this error, try `rustc --explain E0416`."}, {"sha": "7d5aa00356e0b5b767cedf8af3c89e84c12d41f4", "filename": "src/test/ui/object-safety/object-safety-associated-consts.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:9:1\n    |\n+LL |     const X: usize;\n+   |           - the trait cannot contain associated consts like `X`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `X`\n \n error: aborting due to previous error\n "}, {"sha": "b25e0052e4163f98c46a95c955af2671a7b68cad", "filename": "src/test/ui/object-safety/object-safety-generics.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:14:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:19:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "971e79cb0210f240b6536b0f4cdaadc7dcb2fd5a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:17:1\n    |\n+LL |     fn bar(&self, x: &Self);\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n+LL |     fn bar(&self) -> Self;\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0de783f60ea4743fd9c5a61ecc14c1a5bcdf502a", "filename": "src/test/ui/object-safety/object-safety-no-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:8:1\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL | fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "63ac11dc8ae01b463a4269b14dbbdd3ca092fd8e", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: method `bar` has no receiver\n+   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "b62cf31205fd3748c424dabdc64ea11629af73bc", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/ident-mac.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,11 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn id(_: TokenStream, input: TokenStream) -> TokenStream { input }"}, {"sha": "8defa26e48d8d20a15ef28d702762d4546c6d1c1", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,60 @@\n+// aux-build:ident-mac.rs\n+\n+#![feature(param_attrs)]\n+#![feature(c_variadic)]\n+\n+extern crate ident_mac;\n+use ident_mac::id;\n+\n+struct W(u8);\n+\n+extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+//~^ ERROR the attribute `id` is currently unknown to the compiler\n+//~| ERROR the attribute `id` is currently unknown to the compiler\n+\n+unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n+//~^ ERROR the attribute `id` is currently unknown to the compiler\n+\n+type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+\n+fn free(#[id] arg1: u8) {\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    let lam = |#[id] W(x), #[id] y| ();\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+impl W {\n+    fn inherent1(#[id] self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+trait A {\n+    fn trait1(#[id] self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait2(#[id] &self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+fn main() {}"}, {"sha": "69b9a46b3d502a9e8efc0f9d81add32fce6de4db", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,228 @@\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:21\n+   |\n+LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+   |                     ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:38\n+   |\n+LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:15:38\n+   |\n+LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:28\n+   |\n+LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:38\n+   |\n+LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:22:9\n+   |\n+LL | fn free(#[id] arg1: u8) {\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:16\n+   |\n+LL |     let lam = |#[id] W(x), #[id] y| ();\n+   |                ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:28\n+   |\n+LL |     let lam = |#[id] W(x), #[id] y| ();\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:18\n+   |\n+LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n+   |                  ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:30\n+   |\n+LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n+   |                              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:18\n+   |\n+LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+   |                  ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:31\n+   |\n+LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+   |                               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:22\n+   |\n+LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+   |                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:42\n+   |\n+LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+   |                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:22\n+   |\n+LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+   |                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:45\n+   |\n+LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+   |                                             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:45:15\n+   |\n+LL |     fn trait1(#[id] self, #[id] arg1: u8);\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:45:27\n+   |\n+LL |     fn trait1(#[id] self, #[id] arg1: u8);\n+   |                           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:15\n+   |\n+LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:28\n+   |\n+LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:19\n+   |\n+LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+   |                   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:39\n+   |\n+LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+   |                                       ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:19\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:42\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:58\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error: aborting due to 25 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e6eba377a9578c9178a282268ee3c866e92c556e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo`'s receiver cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo`'s receiver cannot be dispatched on\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors"}, {"sha": "7a0cfb679ed67f84c4c14919f3a8921f7b856550", "filename": "src/test/ui/span/issue-27522.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -3,7 +3,7 @@\n struct SomeType {}\n \n trait Foo {\n-    fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n+    fn handler(self: &SomeType); //~ ERROR invalid `self` parameter type\n }\n \n fn main() {}"}, {"sha": "8a254a9685543d6af60ca50aa544ba82d81c0ea0", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: &SomeType\n+error[E0307]: invalid `self` parameter type: &SomeType\n   --> $DIR/issue-27522.rs:6:22\n    |\n LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "16ea7bdb0807d19bd48c85f85d4bfee1d8f97f60", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -110,12 +110,17 @@ LL |     C::A;\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n+LL |         const A: u8 = 0;\n+   |               - the trait cannot contain associated consts like `A`\n+...\n+LL |         const B: u8 = 0;\n+   |               - the trait cannot contain associated consts like `B`\n+...\n+LL |         const C: u8 = 0;\n+   |               - the trait cannot contain associated consts like `C`\n+...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `C`\n-   = note: the trait cannot contain associated consts like `B`\n-   = note: the trait cannot contain associated consts like `A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "3ac1e96b30c95121989a9d3fdd11a980864f3a6b", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,19 +1,22 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to 2 previous errors\n "}, {"sha": "83c2c06527493782371e1dcc11977027411c49b8", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -13,20 +13,25 @@ LL |     10.blah::<i32, i32>();\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n-   |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n \n error: aborting due to 4 previous errors"}, {"sha": "b315fe9df8afd349073f6fed2855a5b635ebcab3", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -13,10 +13,11 @@ LL |     let y = x as dyn MyAdd<i32>;\n error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n+LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+   |                            --- method `add` references the `Self` type in its parameters or return type\n+...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n-   |\n-   = note: method `add` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdb8e197fbe498e1980562de3e00fc19f4d237bf", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -6,7 +6,7 @@ struct Foo {\n \n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         self.f + x\n     }\n }\n@@ -17,11 +17,11 @@ struct Bar<T> {\n \n impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n     fn bar(self: &Bar<usize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n }\n@@ -34,14 +34,14 @@ trait SomeTrait {\n \n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n-    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched method receiver\n-    //~^ ERROR mismatched method receiver\n+    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched `self` parameter type\n+    //~^ ERROR mismatched `self` parameter type\n     fn dummy3(self: &&Bar<T>) {}\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch"}, {"sha": "b2fe1b281fc999ee0ed8324d1b536abab6a2dc7f", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,31 +1,31 @@\n-error[E0307]: invalid method receiver type: isize\n+error[E0307]: invalid `self` parameter type: isize\n   --> $DIR/ufcs-explicit-self-bad.rs:8:18\n    |\n LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: Bar<isize>\n+error[E0307]: invalid `self` parameter type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n    |\n LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: &Bar<usize>\n+error[E0307]: invalid `self` parameter type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n    |\n LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -44,7 +44,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -63,7 +63,7 @@ note: ...does not necessarily outlive the anonymous lifetime #1 defined on the m\n LL |     fn dummy2(self: &Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -82,7 +82,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -103,4 +103,5 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0307, E0308.\n+For more information about an error, try `rustc --explain E0307`."}, {"sha": "92d741b6a26631a89a809df0bd32fb7032515db5", "filename": "src/test/ui/underscore-imports/auxiliary/duplicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/duplicate.rs"}, {"sha": "c335336bee8e3ab800aee18e01836512c023569c", "filename": "src/test/ui/underscore-imports/auxiliary/underscore-imports.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/underscore-imports.rs"}, {"sha": "4766d75c8f412209fae536288290fcad0509c7b0", "filename": "src/test/ui/underscore-imports/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/basic.rs"}, {"sha": "9ca60e8e0a95596f46e60d1ff0909137ce345c0e", "filename": "src/test/ui/underscore-imports/basic.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr"}, {"sha": "bacf9b2d5a96a326f61b4c780d005e3de27b7f7f", "filename": "src/test/ui/underscore-imports/cycle.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,18 @@\n+// Check that cyclic glob imports are allowed with underscore imports\n+\n+// check-pass\n+\n+mod x {\n+    pub use crate::y::*;\n+    pub use std::ops::Deref as _;\n+}\n+\n+mod y {\n+    pub use crate::x::*;\n+    pub use std::ops::Deref as _;\n+}\n+\n+pub fn main() {\n+    use x::*;\n+    (&0).deref();\n+}"}, {"sha": "3662a466ded146a9910636fdebfc21cfd8dcbec3", "filename": "src/test/ui/underscore-imports/duplicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/duplicate.rs"}, {"sha": "1cccc67e9ab63d8251b80ddccc5ad08e8a11c768", "filename": "src/test/ui/underscore-imports/intercrate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/intercrate.rs"}, {"sha": "325f2001b9ede58425a4da040d374e7dbfb86798", "filename": "src/test/ui/underscore-imports/shadow.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,23 @@\n+// Check that underscore imports don't cause glob imports to be unshadowed\n+\n+mod a {\n+    pub use std::ops::Deref as Shadow;\n+}\n+\n+mod b {\n+    pub use crate::a::*;\n+    macro_rules! m {\n+        ($i:ident) => { pub struct $i; }\n+    }\n+    m!(Shadow);\n+}\n+\n+mod c {\n+    use crate::b::Shadow as _; // Only imports the struct\n+\n+    fn f(x: &()) {\n+        x.deref(); //~ ERROR no method named `deref` found\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "92adca2c70490e598eadf664670aa7ec91726c76", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `deref` found for type `&()` in the current scope\n+  --> $DIR/shadow.rs:19:11\n+   |\n+LL |         x.deref();\n+   |           ^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use std::ops::Deref;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "d06a26a5f116664b5ce0094e594d5e50b4a5c4c0", "filename": "src/test/ui/underscore-imports/unused-2018.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.rs"}, {"sha": "861b3f1d4fd1e202f02aabf5cc3ce7e4034148e6", "filename": "src/test/ui/underscore-imports/unused-2018.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr"}, {"sha": "0d8441f87e7e776618a5d3979208478dbcb91f7e", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL |     fn foo(&self, _x: &Self);\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "994523ac1abce2ccaaf51e7efb91d0bc39f7f852", "filename": "src/tools/tidy/src/features/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24f636e60a5da57ab641d800ac5952bbde98b65/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs?ref=a24f636e60a5da57ab641d800ac5952bbde98b65", "patch": "@@ -2,8 +2,8 @@ use super::*;\n \n #[test]\n fn test_find_attr_val() {\n-    let s = r#\"#[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\"#;\n-    assert_eq!(find_attr_val(s, \"feature\"), Some(\"checked_duration_since\"));\n+    let s = r#\"#[unstable(feature = \"tidy_test_never_used_anywhere_else\", issue = \"58402\")]\"#;\n+    assert_eq!(find_attr_val(s, \"feature\"), Some(\"tidy_test_never_used_anywhere_else\"));\n     assert_eq!(find_attr_val(s, \"issue\"), Some(\"58402\"));\n     assert_eq!(find_attr_val(s, \"since\"), None);\n }"}]}