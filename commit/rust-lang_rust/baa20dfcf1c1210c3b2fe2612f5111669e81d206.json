{"sha": "baa20dfcf1c1210c3b2fe2612f5111669e81d206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTIwZGZjZjFjMTIxMGMzYjJmZTI2MTJmNTExMTY2OWU4MWQyMDY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-08T04:40:10Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-08T04:50:03Z"}, "message": "Format a macro call with a single item-like argument", "tree": {"sha": "f603baa2ffc855798386f8a30bcd0f0d348e07df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f603baa2ffc855798386f8a30bcd0f0d348e07df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa20dfcf1c1210c3b2fe2612f5111669e81d206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa20dfcf1c1210c3b2fe2612f5111669e81d206", "html_url": "https://github.com/rust-lang/rust/commit/baa20dfcf1c1210c3b2fe2612f5111669e81d206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa20dfcf1c1210c3b2fe2612f5111669e81d206/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a925bdf0920dda2e05af1fe099028051b4bfb2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a925bdf0920dda2e05af1fe099028051b4bfb2e5", "html_url": "https://github.com/rust-lang/rust/commit/a925bdf0920dda2e05af1fe099028051b4bfb2e5"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "7348e7a0315cdcfe0b645a4df43791a8a8cafb56", "filename": "src/macros.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/baa20dfcf1c1210c3b2fe2612f5111669e81d206/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa20dfcf1c1210c3b2fe2612f5111669e81d206/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=baa20dfcf1c1210c3b2fe2612f5111669e81d206", "patch": "@@ -44,6 +44,7 @@ use shape::{Indent, Shape};\n use source_map::SpanUtils;\n use spanned::Spanned;\n use utils::{format_visibility, mk_sp, rewrite_ident, wrap_str};\n+use visitor::FmtVisitor;\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n \n@@ -271,6 +272,24 @@ pub fn rewrite_macro_inner(\n         }\n     }\n \n+    if !arg_vec.is_empty() && arg_vec.iter().all(|arg| {\n+        if let MacroArg::Item(..) = arg {\n+            true\n+        } else {\n+            false\n+        }\n+    }) {\n+        return rewrite_macro_with_items(\n+            context,\n+            &arg_vec,\n+            &macro_name,\n+            shape,\n+            style,\n+            position,\n+            mac.span,\n+        );\n+    }\n+\n     match style {\n         DelimToken::Paren => {\n             // Format macro invocation as function call, preserve the trailing\n@@ -1428,3 +1447,45 @@ fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream)\n \n     Some(result)\n }\n+\n+fn rewrite_macro_with_items(\n+    context: &RewriteContext,\n+    items: &[MacroArg],\n+    macro_name: &str,\n+    shape: Shape,\n+    style: DelimToken,\n+    position: MacroPosition,\n+    span: Span,\n+) -> Option<String> {\n+    let (opener, closer) = match style {\n+        DelimToken::Paren => (\"(\", \")\"),\n+        DelimToken::Bracket => (\"[\", \"]\"),\n+        DelimToken::Brace => (\" {\", \"}\"),\n+        _ => return None,\n+    };\n+    let trailing_semicolon = match style {\n+        DelimToken::Paren | DelimToken::Bracket if position == MacroPosition::Item => \";\",\n+        _ => \"\",\n+    };\n+\n+    let mut visitor = FmtVisitor::from_context(context);\n+    visitor.block_indent = shape.indent.block_indent(context.config);\n+    visitor.last_pos = context.snippet_provider.span_after(span, opener.trim());\n+    for item in items {\n+        let item = match item {\n+            MacroArg::Item(item) => item,\n+            _ => return None,\n+        };\n+        visitor.visit_item(&item);\n+    }\n+\n+    let mut result = String::with_capacity(256);\n+    result.push_str(&macro_name);\n+    result.push_str(opener);\n+    result.push_str(&visitor.block_indent.to_string_with_newline(context.config));\n+    result.push_str(visitor.buffer.trim());\n+    result.push_str(&shape.indent.to_string_with_newline(context.config));\n+    result.push_str(closer);\n+    result.push_str(trailing_semicolon);\n+    return Some(result);\n+}"}]}