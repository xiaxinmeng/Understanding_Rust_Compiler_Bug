{"sha": "e0c74868c3964abdd6898886e7d12041c8b3139d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYzc0ODY4YzM5NjRhYmRkNjg5ODg4NmU3ZDEyMDQxYzhiMzEzOWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-29T00:46:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:41Z"}, "message": "Fix stability", "tree": {"sha": "d4da68a90fb0a47ebd9e132b55de9cc364c0c14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4da68a90fb0a47ebd9e132b55de9cc364c0c14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c74868c3964abdd6898886e7d12041c8b3139d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c74868c3964abdd6898886e7d12041c8b3139d", "html_url": "https://github.com/rust-lang/rust/commit/e0c74868c3964abdd6898886e7d12041c8b3139d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c74868c3964abdd6898886e7d12041c8b3139d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "html_url": "https://github.com/rust-lang/rust/commit/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "f849580871c845c563e836334c1e9c67b1a0c58f", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -102,7 +102,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, block: &hir::Block) {\n         let old_unsafe_context = self.unsafe_context;\n         match block.rules {\n-            hir::DefaultBlock => {}\n             hir::UnsafeBlock(source) => {\n                 // By default only the outermost `unsafe` block is\n                 // \"used\" and so nested unsafe blocks are pointless\n@@ -131,6 +130,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 self.unsafe_context.push_unsafe_count =\n                     self.unsafe_context.push_unsafe_count.checked_sub(1).unwrap();\n             }\n+            hir::DefaultBlock | hir::PushUnstableBlock | hir:: PopUnstableBlock => {}\n         }\n \n         visit::walk_block(self, block);"}, {"sha": "c2235591ceef10d5408131aa82aa8e096fcb2458", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -270,7 +270,8 @@ pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n     let mut checker = Checker {\n         tcx: tcx,\n         active_features: active_features,\n-        used_features: FnvHashMap()\n+        used_features: FnvHashMap(),\n+        in_skip_block: 0,\n     };\n \n     let krate = tcx.map.krate();\n@@ -283,14 +284,23 @@ pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n struct Checker<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     active_features: FnvHashSet<InternedString>,\n-    used_features: FnvHashMap<InternedString, attr::StabilityLevel>\n+    used_features: FnvHashMap<InternedString, attr::StabilityLevel>,\n+    // Within a block where feature gate checking can be skipped.\n+    in_skip_block: u32,\n }\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check(&mut self, id: DefId, span: Span, stab: &Option<&Stability>) {\n         // Only the cross-crate scenario matters when checking unstable APIs\n         let cross_crate = !id.is_local();\n-        if !cross_crate { return }\n+        if !cross_crate {\n+            return\n+        }\n+\n+        // We don't need to check for stability - presumably compiler generated code.\n+        if self.in_skip_block > 0 {\n+            return;\n+        }\n \n         match *stab {\n             Some(&Stability { level: attr::Unstable, ref feature, ref reason, issue, .. }) => {\n@@ -369,6 +379,21 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n                   &mut |id, sp, stab| self.check(id, sp, stab));\n         visit::walk_pat(self, pat)\n     }\n+\n+    fn visit_block(&mut self, b: &hir::Block) {\n+        let old_skip_count = self.in_skip_block;\n+        match b.rules {\n+            hir::BlockCheckMode::PushUnstableBlock => {\n+                self.in_skip_block += 1;\n+            }\n+            hir::BlockCheckMode::PopUnstableBlock => {\n+                self.in_skip_block = self.in_skip_block.checked_sub(1).unwrap();\n+            }\n+            _ => {}\n+        }\n+        visit::walk_block(self, b);\n+        self.in_skip_block = old_skip_count;\n+    }\n }\n \n /// Helper for discovering nodes to check for stability"}, {"sha": "c9f13da063303d4ee8667a1ee2df6a6e083f0149", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -574,6 +574,9 @@ pub enum BlockCheckMode {\n     UnsafeBlock(UnsafeSource),\n     PushUnsafeBlock(UnsafeSource),\n     PopUnsafeBlock(UnsafeSource),\n+    // Within this block (but outside a PopUnstableBlock), we suspend checking of stability.\n+    PushUnstableBlock,\n+    PopUnstableBlock,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "2b63e0615ee5311a08c39b942bca2436601438a6", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -749,12 +749,28 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n             id: e.id,\n             node: match e.node {\n+                // Issue #22181:\n+                // Eventually a desugaring for `box EXPR`\n+                // (similar to the desugaring above for `in PLACE BLOCK`)\n+                // should go here, desugaring\n+                //\n+                // to:\n+                //\n+                // let mut place = BoxPlace::make_place();\n+                // let raw_place = Place::pointer(&mut place);\n+                // let value = $value;\n+                // unsafe {\n+                //     ::std::ptr::write(raw_place, value);\n+                //     Boxed::finalize(place)\n+                // }\n+                //\n+                // But for now there are type-inference issues doing that.\n                 ExprBox(ref e) => {\n                     hir::ExprBox(lower_expr(lctx, e))\n                 }\n \n                 // Desugar ExprBox: `in (PLACE) EXPR`\n-                ExprInPlace(Some(ref placer), ref value_expr) => {\n+                ExprInPlace(ref placer, ref value_expr) => {\n                     // to:\n                     //\n                     // let p = PLACE;\n@@ -810,23 +826,43 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     };\n \n                     // pop_unsafe!(EXPR));\n-                    let pop_unsafe_expr = pop_unsafe_expr(lctx, value_expr, e.span);\n+                    let pop_unsafe_expr =\n+                        signal_block_expr(lctx,\n+                                          vec![],\n+                                          signal_block_expr(lctx,\n+                                                            vec![],\n+                                                            value_expr,\n+                                                            e.span,\n+                                                            hir::PopUnstableBlock),\n+                                          e.span,\n+                                          hir::PopUnsafeBlock(hir::CompilerGenerated));\n \n                     // push_unsafe!({\n-                    //     ptr::write(p_ptr, pop_unsafe!(<value_expr>));\n+                    //     std::intrinsics::move_val_init(raw_place, pop_unsafe!( EXPR ));\n                     //     InPlace::finalize(place)\n                     // })\n                     let expr = {\n-                        let call_move_val_init = hir::StmtSemi(make_call(\n-                            lctx, &move_val_init, vec![expr_ident(lctx, e.span, p_ptr_ident), pop_unsafe_expr]), lctx.next_id());\n+                        let call_move_val_init =\n+                            hir::StmtSemi(make_call(lctx,\n+                                                    &move_val_init,\n+                                                    vec![expr_ident(lctx, e.span, p_ptr_ident),\n+                                                         pop_unsafe_expr]),\n+                                          lctx.next_id());\n                         let call_move_val_init = respan(e.span, call_move_val_init);\n \n                         let call = make_call(lctx, &inplace_finalize, vec![expr_ident(lctx, e.span, agent_ident)]);\n-                        Some(push_unsafe_expr(lctx, vec![P(call_move_val_init)], call, e.span))\n+                        signal_block_expr(lctx,\n+                                          vec![P(call_move_val_init)],\n+                                          call,\n+                                          e.span,\n+                                          hir::PushUnsafeBlock(hir::CompilerGenerated))\n                     };\n \n-                    let block = block_all(lctx, e.span, vec![s1, s2, s3], expr);\n-                    return expr_block(lctx, block);\n+                    return signal_block_expr(lctx,\n+                                             vec![s1, s2, s3],\n+                                             expr,\n+                                             e.span,\n+                                             hir::PushUnstableBlock);\n                 }\n                 \n                 ExprVec(ref exprs) => {\n@@ -1475,21 +1511,9 @@ fn core_path(lctx: &LoweringContext, span: Span, components: &[&str]) -> hir::Pa\n     path_global(span, idents)\n }\n \n-fn push_unsafe_expr(lctx: &LoweringContext, stmts: Vec<P<hir::Stmt>>,\n-                    expr: P<hir::Expr>, span: Span)\n-                    -> P<hir::Expr> {\n-    let rules = hir::PushUnsafeBlock(hir::CompilerGenerated);\n+fn signal_block_expr(lctx: &LoweringContext, stmts: Vec<P<hir::Stmt>>, expr: P<hir::Expr>, span: Span, rule: hir::BlockCheckMode) -> P<hir::Expr> {\n     expr_block(lctx, P(hir::Block {\n-        rules: rules, span: span, id: lctx.next_id(),\n+        rules: rule, span: span, id: lctx.next_id(),\n         stmts: stmts, expr: Some(expr),\n     }))\n }\n-\n-fn pop_unsafe_expr(lctx: &LoweringContext, expr: P<hir::Expr>, span: Span)\n-                   -> P<hir::Expr> {\n-    let rules = hir::PopUnsafeBlock(hir::CompilerGenerated);\n-    expr_block(lctx, P(hir::Block {\n-        rules: rules, span: span, id: lctx.next_id(),\n-        stmts: vec![], expr: Some(expr),\n-    }))\n-}"}, {"sha": "80b0a984681a310184560b8a41ff2363226f1d66", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -1089,8 +1089,12 @@ impl<'a> State<'a> {\n                                       close_box: bool)\n                                       -> io::Result<()> {\n         match blk.rules {\n-            hir::UnsafeBlock(..) | hir::PushUnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n-            hir::DefaultBlock | hir::PopUnsafeBlock(..) => (),\n+            hir::UnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n+            hir::PushUnsafeBlock(..) => try!(self.word_space(\"push_unsafe\")),\n+            hir::PopUnsafeBlock(..) => try!(self.word_space(\"pop_unsafe\")),\n+            hir::PushUnstableBlock => try!(self.word_space(\"push_unstable\")),\n+            hir::PopUnstableBlock => try!(self.word_space(\"pop_unstable\")),\n+            hir::DefaultBlock => (),\n         }\n         try!(self.maybe_print_comment(blk.span.lo));\n         try!(self.ann.pre(self, NodeBlock(blk)));"}, {"sha": "0978ea2295bc7ac1accd299a24b3f5fdf415cda9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -269,7 +269,7 @@ impl UnsafetyState {\n                         (unsafety, blk.id, self.unsafe_push_count.checked_sub(1).unwrap()),\n                     hir::UnsafeBlock(..) =>\n                         (hir::Unsafety::Unsafe, blk.id, self.unsafe_push_count),\n-                    hir::DefaultBlock =>\n+                    hir::DefaultBlock | hir::PushUnstableBlock | hir:: PopUnstableBlock =>\n                         (unsafety, self.def, self.unsafe_push_count),\n                 };\n                 UnsafetyState{ def: def,"}, {"sha": "72d89e246ad1d28e39a85f814be035a994894eb0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -70,7 +70,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             let placer = fld.fold_expr(placer);\n             let value_expr = fld.fold_expr(value_expr);\n-            fld.cx.expr(span, ast::ExprBox(Some(placer), value_expr))\n+            fld.cx.expr(span, ast::ExprInPlace(placer, value_expr))\n         }\n \n         ast::ExprWhile(cond, body, opt_ident) => {"}, {"sha": "49835afbfa5f789101899e1b11669eb40e8f591f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c74868c3964abdd6898886e7d12041c8b3139d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e0c74868c3964abdd6898886e7d12041c8b3139d", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n }\n \n struct PostExpansionVisitor<'a> {\n-    context: &'a Context<'a>\n+    context: &'a Context<'a>,\n }\n \n impl<'a> PostExpansionVisitor<'a> {"}]}