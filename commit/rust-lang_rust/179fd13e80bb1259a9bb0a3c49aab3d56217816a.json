{"sha": "179fd13e80bb1259a9bb0a3c49aab3d56217816a", "node_id": "C_kwDOAAsO6NoAKDE3OWZkMTNlODBiYjEyNTlhOWJiMGEzYzQ5YWFiM2Q1NjIxNzgxNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-17T17:27:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-17T17:27:08Z"}, "message": "Rollup merge of #101873 - WaffleLapkin:x-build-proc-macro-srv, r=jyn514\n\nAllow building `rust-analyzer-proc-macro-srv` as a standalone tool\n\nThis PR allows building `rust-analyzer-proc-macro-srv` as a standalone tool via `x b proc-macro-srv-cli` (I thought that `x b rust-analyzer-proc-macro-srv` should work, but it doesn't for some reason...). Also this PR adds a copy of `rust-analyzer-proc-macro-srv` binary to `build/{triple}/{stage}/libexec/` when building `rust-analyzer-proc-macro-srv`, so that r-a can pick it up.\n\nThis is useful to make r-a (and I assume Intellij IDEA) to expand macros when using a custom, build from source toolchain.\n\nr? ``@jyn514``\n[_zulip thread_](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/How.20to.20fix.20.60UnsupportedABI.60.20for.20custom.20toolchains.3F/near/299040175)", "tree": {"sha": "df8dcb43e66d5ff2de399d13dc79c2e8b5eabb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8dcb43e66d5ff2de399d13dc79c2e8b5eabb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179fd13e80bb1259a9bb0a3c49aab3d56217816a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJgNsCRBK7hj4Ov3rIwAAh08IADczlsv7ncsoe8abQDj7sjjm\ninETHeE/fI3aQE1xCB/gsSSL7uyRhbGpuXlMyi78BweKpO1Dwj3tY1h32k0wnnOe\n17dxQEMEQ89wImdLzvvqzPEYX8VRaWUCOqxHsVEvQPgGLVkrHqZ2PGSTljpqu8HN\n/dRyaJBhZhMuDtmi9aJAMVV4v4UxHk00URv5mXeZ58qciKwYxfGPResaIwC+CFFK\nhsHIqFs/AFZBNtqWpyZIuriC5gWSyL0YcKhmC77UVXQPSyu+VJ6RNj5XgPPFMdMu\nLqs7X3//O3TR9jibE8OMiOzRCkJHM8YguP1+5dqURzTvt42PUmHQTMl2h9WNNhA=\n=gXoi\n-----END PGP SIGNATURE-----\n", "payload": "tree df8dcb43e66d5ff2de399d13dc79c2e8b5eabb3f\nparent 92d8bf918c6bc6b8e52043a66fea6e97c443436c\nparent 9c3c88c94563ed9c42b7c6549c89e5fc8cc5615e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663435628 +0200\ncommitter GitHub <noreply@github.com> 1663435628 +0200\n\nRollup merge of #101873 - WaffleLapkin:x-build-proc-macro-srv, r=jyn514\n\nAllow building `rust-analyzer-proc-macro-srv` as a standalone tool\n\nThis PR allows building `rust-analyzer-proc-macro-srv` as a standalone tool via `x b proc-macro-srv-cli` (I thought that `x b rust-analyzer-proc-macro-srv` should work, but it doesn't for some reason...). Also this PR adds a copy of `rust-analyzer-proc-macro-srv` binary to `build/{triple}/{stage}/libexec/` when building `rust-analyzer-proc-macro-srv`, so that r-a can pick it up.\n\nThis is useful to make r-a (and I assume Intellij IDEA) to expand macros when using a custom, build from source toolchain.\n\nr? ``@jyn514``\n[_zulip thread_](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/How.20to.20fix.20.60UnsupportedABI.60.20for.20custom.20toolchains.3F/near/299040175)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179fd13e80bb1259a9bb0a3c49aab3d56217816a", "html_url": "https://github.com/rust-lang/rust/commit/179fd13e80bb1259a9bb0a3c49aab3d56217816a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179fd13e80bb1259a9bb0a3c49aab3d56217816a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d8bf918c6bc6b8e52043a66fea6e97c443436c", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d8bf918c6bc6b8e52043a66fea6e97c443436c", "html_url": "https://github.com/rust-lang/rust/commit/92d8bf918c6bc6b8e52043a66fea6e97c443436c"}, {"sha": "9c3c88c94563ed9c42b7c6549c89e5fc8cc5615e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3c88c94563ed9c42b7c6549c89e5fc8cc5615e", "html_url": "https://github.com/rust-lang/rust/commit/9c3c88c94563ed9c42b7c6549c89e5fc8cc5615e"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "5d0c7d2bd9d44c49a9682e79a08ca2cfcc6b56d1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/179fd13e80bb1259a9bb0a3c49aab3d56217816a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179fd13e80bb1259a9bb0a3c49aab3d56217816a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=179fd13e80bb1259a9bb0a3c49aab3d56217816a", "patch": "@@ -746,14 +746,18 @@ impl Step for RustAnalyzerProcMacroSrv {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/tools/rust-analyzer\").default_condition(\n-            builder.config.extended\n-                && builder\n-                    .config\n-                    .tools\n-                    .as_ref()\n-                    .map_or(true, |tools| tools.iter().any(|tool| tool == \"rust-analyzer\")),\n-        )\n+\n+        // Allow building `rust-analyzer-proc-macro-srv` both as part of the `rust-analyzer` and as a stand-alone tool.\n+        run.path(\"src/tools/rust-analyzer\")\n+            .path(\"src/tools/rust-analyzer/crates/proc-macro-srv-cli\")\n+            .default_condition(\n+                builder.config.extended\n+                    && builder.config.tools.as_ref().map_or(true, |tools| {\n+                        tools.iter().any(|tool| {\n+                            tool == \"rust-analyzer\" || tool == \"rust-analyzer-proc-macro-srv\"\n+                        })\n+                    }),\n+            )\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -764,7 +768,7 @@ impl Step for RustAnalyzerProcMacroSrv {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        builder.ensure(ToolBuild {\n+        let path = builder.ensure(ToolBuild {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"rust-analyzer-proc-macro-srv\",\n@@ -773,7 +777,15 @@ impl Step for RustAnalyzerProcMacroSrv {\n             extra_features: vec![\"proc-macro-srv/sysroot-abi\".to_owned()],\n             is_optional_tool: false,\n             source_type: SourceType::InTree,\n-        })\n+        })?;\n+\n+        // Copy `rust-analyzer-proc-macro-srv` to `<sysroot>/libexec/`\n+        // so that r-a can use it.\n+        let libexec_path = builder.sysroot(self.compiler).join(\"libexec\");\n+        t!(fs::create_dir_all(&libexec_path));\n+        builder.copy(&path, &libexec_path.join(\"rust-analyzer-proc-macro-srv\"));\n+\n+        Some(path)\n     }\n }\n "}]}