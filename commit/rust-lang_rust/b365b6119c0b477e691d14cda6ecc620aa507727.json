{"sha": "b365b6119c0b477e691d14cda6ecc620aa507727", "node_id": "C_kwDOAAsO6NoAKGIzNjViNjExOWMwYjQ3N2U2OTFkMTRjZGE2ZWNjNjIwYWE1MDc3Mjc", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-07T16:31:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-07T16:31:26Z"}, "message": "Treat extern blocks as item containers", "tree": {"sha": "721075ea7773104adc9be679b744b97a737383c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721075ea7773104adc9be679b744b97a737383c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b365b6119c0b477e691d14cda6ecc620aa507727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b365b6119c0b477e691d14cda6ecc620aa507727", "html_url": "https://github.com/rust-lang/rust/commit/b365b6119c0b477e691d14cda6ecc620aa507727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b365b6119c0b477e691d14cda6ecc620aa507727/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7afb6fc6ce6c94379c57d3bb64fea2a2064eeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7afb6fc6ce6c94379c57d3bb64fea2a2064eeac", "html_url": "https://github.com/rust-lang/rust/commit/b7afb6fc6ce6c94379c57d3bb64fea2a2064eeac"}], "stats": {"total": 380, "additions": 216, "deletions": 164}, "files": [{"sha": "54e95cf7c3d53b072138b72df3034d3af17842d8", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -137,6 +137,7 @@ fn resolve_doc_path(\n         AttrDefId::TraitId(it) => it.resolver(db.upcast()),\n         AttrDefId::TypeAliasId(it) => it.resolver(db.upcast()),\n         AttrDefId::ImplId(it) => it.resolver(db.upcast()),\n+        AttrDefId::ExternBlockId(it) => it.resolver(db.upcast()),\n         AttrDefId::GenericParamId(it) => match it {\n             GenericParamId::TypeParamId(it) => it.parent,\n             GenericParamId::LifetimeParamId(it) => it.parent,"}, {"sha": "3e04ea8da9aa1db9fa35f74cee2b99b8e5c71b8c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -114,11 +114,11 @@ pub use {\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n         AdtId,\n-        AssocContainerId,\n         AssocItemId,\n         AssocItemLoc,\n         DefWithBodyId,\n         ImplId,\n+        ItemContainerId,\n         ItemLoc,\n         Lookup,\n         ModuleDefId,\n@@ -1550,7 +1550,7 @@ impl Static {\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let data = db.static_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n-        let krate = self.id.lookup(db.upcast()).container.krate();\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let ty = ctx.lower_ty(&data.type_ref);\n         Type::new_with_resolver_inner(db, krate, &resolver, ty)\n@@ -1820,8 +1820,8 @@ where\n     AST: ItemTreeNode,\n {\n     match id.lookup(db.upcast()).container {\n-        AssocContainerId::TraitId(_) | AssocContainerId::ImplId(_) => Some(ctor(DEF::from(id))),\n-        AssocContainerId::ModuleId(_) => None,\n+        ItemContainerId::TraitId(_) | ItemContainerId::ImplId(_) => Some(ctor(DEF::from(id))),\n+        ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => None,\n     }\n }\n \n@@ -1847,9 +1847,11 @@ impl AssocItem {\n             AssocItem::TypeAlias(it) => it.id.lookup(db.upcast()).container,\n         };\n         match container {\n-            AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n-            AssocContainerId::ImplId(id) => AssocItemContainer::Impl(id.into()),\n-            AssocContainerId::ModuleId(_) => panic!(\"invalid AssocItem\"),\n+            ItemContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n+            ItemContainerId::ImplId(id) => AssocItemContainer::Impl(id.into()),\n+            ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => {\n+                panic!(\"invalid AssocItem\")\n+            }\n         }\n     }\n "}, {"sha": "36e46a103c1b8807a1f51561f16f4e9f73a47d55", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -362,6 +362,7 @@ impl AttrsWithOwner {\n                     RawAttrs::from_attrs_owner(db, src.with_value(&src.value[it.local_id]))\n                 }\n             },\n+            AttrDefId::ExternBlockId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n         };\n \n         let attrs = raw_attrs.filter(db, def.krate(db));\n@@ -443,6 +444,7 @@ impl AttrsWithOwner {\n                     .child_source(db)\n                     .map(|source| ast::AnyHasAttrs::new(source[id.local_id].clone())),\n             },\n+            AttrDefId::ExternBlockId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n         };\n \n         AttrSourceMap::new(owner.as_ref().map(|node| node as &dyn HasAttrs))"}, {"sha": "ad1c1f2ce5d93c6d35fe4729cf6ce2fc0cea521e", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -13,8 +13,8 @@ use crate::{\n     item_tree::{self, AssocItem, FnFlags, ItemTreeId, ModItem, Param},\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n-    AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n-    Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId, Intern,\n+    ItemContainerId, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -54,6 +54,10 @@ impl FunctionData {\n             flags.bits |= FnFlags::IS_VARARGS;\n         }\n \n+        if matches!(loc.container, ItemContainerId::ExternBlockId(_)) {\n+            flags.bits |= FnFlags::IS_IN_EXTERN_BLOCK;\n+        }\n+\n         Arc::new(FunctionData {\n             name: func.name.clone(),\n             params: enabled_params\n@@ -130,7 +134,7 @@ impl TypeAliasData {\n             name: typ.name.clone(),\n             type_ref: typ.type_ref.clone(),\n             visibility: item_tree[typ.visibility].clone(),\n-            is_extern: typ.is_extern,\n+            is_extern: matches!(loc.container, ItemContainerId::ExternBlockId(_)),\n             bounds: typ.bounds.to_vec(),\n         })\n     }\n@@ -162,7 +166,7 @@ impl TraitData {\n         let is_auto = tr_def.is_auto;\n         let is_unsafe = tr_def.is_unsafe;\n         let module_id = tr_loc.container;\n-        let container = AssocContainerId::TraitId(tr);\n+        let container = ItemContainerId::TraitId(tr);\n         let visibility = item_tree[tr_def.visibility].clone();\n         let mut expander = Expander::new(db, tr_loc.id.file_id(), module_id);\n         let skip_array_during_method_dispatch = item_tree\n@@ -231,7 +235,7 @@ impl ImplData {\n         let self_ty = impl_def.self_ty.clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container;\n-        let container = AssocContainerId::ImplId(id);\n+        let container = ItemContainerId::ImplId(id);\n         let mut expander = Expander::new(db, impl_loc.id.file_id(), module_id);\n \n         let items = collect_items(\n@@ -282,16 +286,16 @@ pub struct StaticData {\n \n impl StaticData {\n     pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {\n-        let node = konst.lookup(db);\n-        let item_tree = node.id.item_tree(db);\n-        let statik = &item_tree[node.id.value];\n+        let loc = konst.lookup(db);\n+        let item_tree = loc.id.item_tree(db);\n+        let statik = &item_tree[loc.id.value];\n \n         Arc::new(StaticData {\n             name: statik.name.clone(),\n             type_ref: statik.type_ref.clone(),\n             visibility: item_tree[statik.visibility].clone(),\n             mutable: statik.mutable,\n-            is_extern: statik.is_extern,\n+            is_extern: matches!(loc.container, ItemContainerId::ExternBlockId(_)),\n         })\n     }\n }\n@@ -302,7 +306,7 @@ fn collect_items(\n     expander: &mut Expander,\n     assoc_items: impl Iterator<Item = AssocItem>,\n     tree_id: item_tree::TreeId,\n-    container: AssocContainerId,\n+    container: ItemContainerId,\n     limit: usize,\n ) -> Vec<(Name, AssocItemId)> {\n     if limit == 0 {"}, {"sha": "7946558311a27f4fcc0090eca2fdee8fc0066444", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -19,10 +19,10 @@ use crate::{\n     lang_item::{LangItemTarget, LangItems},\n     nameres::DefMap,\n     visibility::{self, Visibility},\n-    AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId,\n-    FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId,\n-    StaticLoc, StructId, StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId,\n-    UnionLoc, VariantId,\n+    AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, ExternBlockId,\n+    ExternBlockLoc, FunctionId, FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId,\n+    LocalFieldId, StaticId, StaticLoc, StructId, StructLoc, TraitId, TraitLoc, TypeAliasId,\n+    TypeAliasLoc, UnionId, UnionLoc, VariantId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -46,6 +46,8 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_impl(&self, loc: ImplLoc) -> ImplId;\n     #[salsa::interned]\n+    fn intern_extern_block(&self, loc: ExternBlockLoc) -> ExternBlockId;\n+    #[salsa::interned]\n     fn intern_block(&self, loc: BlockLoc) -> BlockId;\n }\n "}, {"sha": "27a05b87c1d0d942ee4581a85ac158edd34dc5b0", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -468,7 +468,7 @@ mod tests {\n     use base_db::{fixture::WithFixture, SourceDatabase, Upcast};\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_db::TestDB, AssocContainerId, Lookup};\n+    use crate::{test_db::TestDB, ItemContainerId, Lookup};\n \n     use super::*;\n \n@@ -563,7 +563,7 @@ mod tests {\n         };\n \n         match container {\n-            AssocContainerId::TraitId(it) => Some(ItemInNs::Types(it.into())),\n+            ItemContainerId::TraitId(it) => Some(ItemInNs::Types(it.into())),\n             _ => None,\n         }\n     }"}, {"sha": "405cc2d00f8851a4190d2322505df8fbaad0e287", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -660,8 +660,6 @@ pub struct Static {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     pub mutable: bool,\n-    /// Whether the static is in an `extern` block.\n-    pub is_extern: bool,\n     pub type_ref: Interned<TypeRef>,\n     pub ast_id: FileAstId<ast::Static>,\n }\n@@ -695,7 +693,6 @@ pub struct TypeAlias {\n     pub bounds: Box<[Interned<TypeBound>]>,\n     pub generic_params: Interned<GenericParams>,\n     pub type_ref: Option<Interned<TypeRef>>,\n-    pub is_extern: bool,\n     pub ast_id: FileAstId<ast::TypeAlias>,\n }\n "}, {"sha": "e9af991785d0ecc4bfc6095d31134f66a35e0c29", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -360,7 +360,6 @@ impl<'a> Ctx<'a> {\n             generic_params,\n             type_ref,\n             ast_id,\n-            is_extern: false,\n         };\n         Some(id(self.data().type_aliases.alloc(res)))\n     }\n@@ -371,7 +370,7 @@ impl<'a> Ctx<'a> {\n         let visibility = self.lower_visibility(static_);\n         let mutable = static_.mut_token().is_some();\n         let ast_id = self.source_ast_id_map.ast_id(static_);\n-        let res = Static { name, visibility, mutable, type_ref, ast_id, is_extern: false };\n+        let res = Static { name, visibility, mutable, type_ref, ast_id };\n         Some(id(self.data().statics.alloc(res)))\n     }\n \n@@ -525,27 +524,23 @@ impl<'a> Ctx<'a> {\n         let children: Box<[_]> = block.extern_item_list().map_or(Box::new([]), |list| {\n             list.extern_items()\n                 .filter_map(|item| {\n+                    // Note: All items in an `extern` block need to be lowered as if they're outside of one\n+                    // (in other words, the knowledge that they're in an extern block must not be used).\n+                    // This is because an extern block can contain macros whose ItemTree's top-level items\n+                    // should be considered to be in an extern block too.\n                     let attrs = RawAttrs::new(self.db, &item, &self.hygiene);\n                     let id: ModItem = match item {\n                         ast::ExternItem::Fn(ast) => {\n                             let func_id = self.lower_function(&ast)?;\n                             let func = &mut self.data().functions[func_id.index];\n                             if is_intrinsic_fn_unsafe(&func.name) {\n+                                // FIXME: this breaks in macros\n                                 func.flags.bits |= FnFlags::IS_UNSAFE;\n                             }\n-                            func.flags.bits |= FnFlags::IS_IN_EXTERN_BLOCK;\n                             func_id.into()\n                         }\n-                        ast::ExternItem::Static(ast) => {\n-                            let statik = self.lower_static(&ast)?;\n-                            self.data().statics[statik.index].is_extern = true;\n-                            statik.into()\n-                        }\n-                        ast::ExternItem::TypeAlias(ty) => {\n-                            let foreign_ty = self.lower_type_alias(&ty)?;\n-                            self.data().type_aliases[foreign_ty.index].is_extern = true;\n-                            foreign_ty.into()\n-                        }\n+                        ast::ExternItem::Static(ast) => self.lower_static(&ast)?.into(),\n+                        ast::ExternItem::TypeAlias(ty) => self.lower_type_alias(&ty)?.into(),\n                         ast::ExternItem::MacroCall(call) => {\n                             // FIXME: we need some way of tracking that the macro call is in an\n                             // extern block"}, {"sha": "4b4628374364e2bddb4a8750ef8a20f576dc742e", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -328,8 +328,7 @@ impl<'a> Printer<'a> {\n                 wln!(self, \" = _;\");\n             }\n             ModItem::Static(it) => {\n-                let Static { name, visibility, mutable, is_extern, type_ref, ast_id: _ } =\n-                    &self.tree[it];\n+                let Static { name, visibility, mutable, type_ref, ast_id: _ } = &self.tree[it];\n                 self.print_visibility(*visibility);\n                 w!(self, \"static \");\n                 if *mutable {\n@@ -338,9 +337,6 @@ impl<'a> Printer<'a> {\n                 w!(self, \"{}: \", name);\n                 self.print_type_ref(type_ref);\n                 w!(self, \" = _;\");\n-                if *is_extern {\n-                    w!(self, \"  // extern\");\n-                }\n                 wln!(self);\n             }\n             ModItem::Trait(it) => {\n@@ -393,15 +389,8 @@ impl<'a> Printer<'a> {\n                 wln!(self, \"}}\");\n             }\n             ModItem::TypeAlias(it) => {\n-                let TypeAlias {\n-                    name,\n-                    visibility,\n-                    bounds,\n-                    type_ref,\n-                    is_extern,\n-                    generic_params,\n-                    ast_id: _,\n-                } = &self.tree[it];\n+                let TypeAlias { name, visibility, bounds, type_ref, generic_params, ast_id: _ } =\n+                    &self.tree[it];\n                 self.print_visibility(*visibility);\n                 w!(self, \"type {}\", name);\n                 self.print_generic_params(generic_params);\n@@ -415,9 +404,6 @@ impl<'a> Printer<'a> {\n                 }\n                 self.print_where_clause(generic_params);\n                 w!(self, \";\");\n-                if *is_extern {\n-                    w!(self, \"  // extern\");\n-                }\n                 wln!(self);\n             }\n             ModItem::Mod(it) => {"}, {"sha": "1969913bf949ad33eee1b0b8ef1b187f00e3c54f", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -70,13 +70,13 @@ extern \"C\" {\n             #[on_extern_block]  // AttrId { is_doc_comment: false, ast_index: 0 }\n             extern \"C\" {\n                 #[on_extern_type]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-                pub(self) type ExType;  // extern\n+                pub(self) type ExType;\n \n                 #[on_extern_static]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-                pub(self) static EX_STATIC: u8 = _;  // extern\n+                pub(self) static EX_STATIC: u8 = _;\n \n                 #[on_extern_fn]  // AttrId { is_doc_comment: false, ast_index: 0 }\n-                // flags = 0x60\n+                // flags = 0x20\n                 pub(self) fn ex_fn() -> ();\n             }\n         \"##]],"}, {"sha": "c8e60032dfaf1b436b6198fd0509f2ee85588fdb", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -65,6 +65,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     AstId, ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n+use item_tree::ExternBlock;\n use la_arena::Idx;\n use nameres::DefMap;\n use path::ModPath;\n@@ -153,7 +154,7 @@ impl<N: ItemTreeNode> Hash for ItemLoc<N> {\n \n #[derive(Debug)]\n pub struct AssocItemLoc<N: ItemTreeNode> {\n-    pub container: AssocContainerId,\n+    pub container: ItemContainerId,\n     pub id: ItemTreeId<N>,\n }\n \n@@ -244,7 +245,7 @@ impl_intern!(ConstId, ConstLoc, intern_const, lookup_intern_const);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n-pub type StaticLoc = ItemLoc<Static>;\n+pub type StaticLoc = AssocItemLoc<Static>;\n impl_intern!(StaticId, StaticLoc, intern_static, lookup_intern_static);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -262,6 +263,11 @@ pub struct ImplId(salsa::InternId);\n type ImplLoc = ItemLoc<Impl>;\n impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub struct ExternBlockId(salsa::InternId);\n+type ExternBlockLoc = ItemLoc<ExternBlock>;\n+impl_intern!(ExternBlockId, ExternBlockLoc, intern_extern_block, lookup_intern_extern_block);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub struct BlockId(salsa::InternId);\n #[derive(Debug, Hash, PartialEq, Eq, Clone)]\n@@ -295,12 +301,13 @@ pub struct ConstParamId {\n pub type LocalConstParamId = Idx<generics::ConstParamData>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum AssocContainerId {\n+pub enum ItemContainerId {\n+    ExternBlockId(ExternBlockId),\n     ModuleId(ModuleId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n }\n-impl_from!(ModuleId for AssocContainerId);\n+impl_from!(ModuleId for ItemContainerId);\n \n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -427,6 +434,7 @@ pub enum AttrDefId {\n     MacroDefId(MacroDefId),\n     ImplId(ImplId),\n     GenericParamId(GenericParamId),\n+    ExternBlockId(ExternBlockId),\n }\n \n impl_from!(\n@@ -445,12 +453,13 @@ impl_from!(\n     for AttrDefId\n );\n \n-impl From<AssocContainerId> for AttrDefId {\n-    fn from(acid: AssocContainerId) -> Self {\n+impl From<ItemContainerId> for AttrDefId {\n+    fn from(acid: ItemContainerId) -> Self {\n         match acid {\n-            AssocContainerId::ModuleId(mid) => AttrDefId::ModuleId(mid),\n-            AssocContainerId::ImplId(iid) => AttrDefId::ImplId(iid),\n-            AssocContainerId::TraitId(tid) => AttrDefId::TraitId(tid),\n+            ItemContainerId::ModuleId(mid) => AttrDefId::ModuleId(mid),\n+            ItemContainerId::ImplId(iid) => AttrDefId::ImplId(iid),\n+            ItemContainerId::TraitId(tid) => AttrDefId::TraitId(tid),\n+            ItemContainerId::ExternBlockId(id) => AttrDefId::ExternBlockId(id),\n         }\n     }\n }\n@@ -505,12 +514,13 @@ pub trait HasModule {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId;\n }\n \n-impl HasModule for AssocContainerId {\n+impl HasModule for ItemContainerId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match *self {\n-            AssocContainerId::ModuleId(it) => it,\n-            AssocContainerId::ImplId(it) => it.lookup(db).container,\n-            AssocContainerId::TraitId(it) => it.lookup(db).container,\n+            ItemContainerId::ModuleId(it) => it,\n+            ItemContainerId::ImplId(it) => it.lookup(db).container,\n+            ItemContainerId::TraitId(it) => it.lookup(db).container,\n+            ItemContainerId::ExternBlockId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -587,12 +597,6 @@ impl HasModule for TraitId {\n     }\n }\n \n-impl HasModule for StaticLoc {\n-    fn module(&self, _db: &dyn db::DefDatabase) -> ModuleId {\n-        self.container\n-    }\n-}\n-\n impl ModuleDefId {\n     /// Returns the module containing `self` (or `self`, if `self` is itself a module).\n     ///\n@@ -604,7 +608,7 @@ impl ModuleDefId {\n             ModuleDefId::AdtId(id) => id.module(db),\n             ModuleDefId::EnumVariantId(id) => id.parent.lookup(db).container,\n             ModuleDefId::ConstId(id) => id.lookup(db).container.module(db),\n-            ModuleDefId::StaticId(id) => id.lookup(db).container,\n+            ModuleDefId::StaticId(id) => id.lookup(db).module(db),\n             ModuleDefId::TraitId(id) => id.lookup(db).container,\n             ModuleDefId::TypeAliasId(id) => id.lookup(db).module(db),\n             ModuleDefId::BuiltinType(_) => return None,\n@@ -625,6 +629,7 @@ impl AttrDefId {\n             AttrDefId::TraitId(it) => it.lookup(db).container.krate,\n             AttrDefId::TypeAliasId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::ImplId(it) => it.lookup(db).container.krate,\n+            AttrDefId::ExternBlockId(it) => it.lookup(db).container.krate,\n             AttrDefId::GenericParamId(it) => {\n                 match it {\n                     GenericParamId::TypeParamId(it) => it.parent,"}, {"sha": "8c0ba3c0564896e9b2698c6275353986defe5126", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -44,9 +44,9 @@ use crate::{\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n-    LocalModuleId, ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n-    UnresolvedMacro,\n+    AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, ExternBlockLoc, FunctionLoc,\n+    ImplLoc, Intern, ItemContainerId, LocalModuleId, ModuleDefId, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc, UnresolvedMacro,\n };\n \n static GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n@@ -213,6 +213,7 @@ struct MacroDirective {\n     module_id: LocalModuleId,\n     depth: usize,\n     kind: MacroDirectiveKind,\n+    container: ItemContainerId,\n }\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n@@ -306,7 +307,7 @@ impl DefCollector<'_> {\n                 item_tree: &item_tree,\n                 mod_dir: ModDir::root(),\n             }\n-            .collect(item_tree.top_level_items());\n+            .collect_in_top_module(item_tree.top_level_items());\n         }\n     }\n \n@@ -327,7 +328,7 @@ impl DefCollector<'_> {\n                 item_tree: &item_tree,\n                 mod_dir: ModDir::root(),\n             }\n-            .collect(item_tree.top_level_items());\n+            .collect_in_top_module(item_tree.top_level_items());\n         }\n     }\n \n@@ -433,7 +434,7 @@ impl DefCollector<'_> {\n                     item_tree: &item_tree,\n                     mod_dir,\n                 }\n-                .collect(&[*mod_item]);\n+                .collect(&[*mod_item], directive.container);\n                 true\n             } else {\n                 false\n@@ -1053,7 +1054,12 @@ impl DefCollector<'_> {\n                         &mut |_err| (),\n                     );\n                     if let Ok(Ok(call_id)) = call_id {\n-                        resolved.push((directive.module_id, call_id, directive.depth));\n+                        resolved.push((\n+                            directive.module_id,\n+                            call_id,\n+                            directive.depth,\n+                            directive.container,\n+                        ));\n                         res = ReachedFixedPoint::No;\n                         return false;\n                     }\n@@ -1073,7 +1079,12 @@ impl DefCollector<'_> {\n                             *derive_attr,\n                         );\n \n-                        resolved.push((directive.module_id, call_id, directive.depth));\n+                        resolved.push((\n+                            directive.module_id,\n+                            call_id,\n+                            directive.depth,\n+                            directive.container,\n+                        ));\n                         res = ReachedFixedPoint::No;\n                         return false;\n                     }\n@@ -1096,7 +1107,7 @@ impl DefCollector<'_> {\n                             item_tree: &item_tree,\n                             mod_dir,\n                         }\n-                        .collect(&[*mod_item]);\n+                        .collect(&[*mod_item], directive.container);\n                         res = ReachedFixedPoint::No;\n                         false\n                     };\n@@ -1144,6 +1155,7 @@ impl DefCollector<'_> {\n                                             ast_id,\n                                             derive_attr: attr.id,\n                                         },\n+                                        container: directive.container,\n                                     });\n                                 }\n                             }\n@@ -1199,7 +1211,12 @@ impl DefCollector<'_> {\n                                 .scope\n                                 .add_attr_macro_invoc(ast_id, call_id);\n \n-                            resolved.push((directive.module_id, call_id, directive.depth));\n+                            resolved.push((\n+                                directive.module_id,\n+                                call_id,\n+                                directive.depth,\n+                                directive.container,\n+                            ));\n                             res = ReachedFixedPoint::No;\n                             return false;\n                         }\n@@ -1213,8 +1230,8 @@ impl DefCollector<'_> {\n         // Attribute resolution can add unresolved macro invocations, so concatenate the lists.\n         self.unresolved_macros.extend(macros);\n \n-        for (module_id, macro_call_id, depth) in resolved {\n-            self.collect_macro_expansion(module_id, macro_call_id, depth);\n+        for (module_id, macro_call_id, depth, container) in resolved {\n+            self.collect_macro_expansion(module_id, macro_call_id, depth, container);\n         }\n \n         res\n@@ -1225,6 +1242,7 @@ impl DefCollector<'_> {\n         module_id: LocalModuleId,\n         macro_call_id: MacroCallId,\n         depth: usize,\n+        container: ItemContainerId,\n     ) {\n         if EXPANSION_DEPTH_LIMIT.check(depth).is_err() {\n             cov_mark::hit!(macro_expansion_overflow);\n@@ -1276,7 +1294,7 @@ impl DefCollector<'_> {\n             item_tree: &item_tree,\n             mod_dir,\n         }\n-        .collect(item_tree.top_level_items());\n+        .collect(item_tree.top_level_items(), container);\n     }\n \n     fn finish(mut self) -> DefMap {\n@@ -1372,7 +1390,12 @@ struct ModCollector<'a, 'b> {\n }\n \n impl ModCollector<'_, '_> {\n-    fn collect(&mut self, items: &[ModItem]) {\n+    fn collect_in_top_module(&mut self, items: &[ModItem]) {\n+        let module = self.def_collector.def_map.module_id(self.module_id);\n+        self.collect(items, module.into())\n+    }\n+\n+    fn collect(&mut self, items: &[ModItem], container: ItemContainerId) {\n         struct DefData<'a> {\n             id: ModuleDefId,\n             name: &'a Name,\n@@ -1423,7 +1446,7 @@ impl ModCollector<'_, '_> {\n                 }\n             }\n \n-            if let Err(()) = self.resolve_attributes(&attrs, item) {\n+            if let Err(()) = self.resolve_attributes(&attrs, item, container) {\n                 // Do not process the item. It has at least one non-builtin attribute, so the\n                 // fixed-point algorithm is required to resolve the rest of them.\n                 continue;\n@@ -1462,8 +1485,17 @@ impl ModCollector<'_, '_> {\n                         status: PartialResolvedImport::Unresolved,\n                     })\n                 }\n-                ModItem::ExternBlock(block) => self.collect(&self.item_tree[block].children),\n-                ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac]),\n+                ModItem::ExternBlock(block) => self.collect(\n+                    &self.item_tree[block].children,\n+                    ItemContainerId::ExternBlockId(\n+                        ExternBlockLoc {\n+                            container: module,\n+                            id: ItemTreeId::new(self.tree_id, block),\n+                        }\n+                        .intern(self.def_collector.db),\n+                    ),\n+                ),\n+                ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac], container),\n                 ModItem::MacroRules(id) => self.collect_macro_rules(id),\n                 ModItem::MacroDef(id) => self.collect_macro_def(id),\n                 ModItem::Impl(imp) => {\n@@ -1480,12 +1512,9 @@ impl ModCollector<'_, '_> {\n                     self.collect_proc_macro_def(&func.name, ast_id, &attrs);\n \n                     def = Some(DefData {\n-                        id: FunctionLoc {\n-                            container: module.into(),\n-                            id: ItemTreeId::new(self.tree_id, id),\n-                        }\n-                        .intern(self.def_collector.db)\n-                        .into(),\n+                        id: FunctionLoc { container, id: ItemTreeId::new(self.tree_id, id) }\n+                            .intern(self.def_collector.db)\n+                            .into(),\n                         name: &func.name,\n                         visibility: &self.item_tree[func.visibility],\n                         has_constructor: false,\n@@ -1529,11 +1558,8 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::Const(id) => {\n                     let it = &self.item_tree[id];\n-                    let const_id = ConstLoc {\n-                        container: module.into(),\n-                        id: ItemTreeId::new(self.tree_id, id),\n-                    }\n-                    .intern(self.def_collector.db);\n+                    let const_id = ConstLoc { container, id: ItemTreeId::new(self.tree_id, id) }\n+                        .intern(self.def_collector.db);\n \n                     match &it.name {\n                         Some(name) => {\n@@ -1556,7 +1582,7 @@ impl ModCollector<'_, '_> {\n                     let it = &self.item_tree[id];\n \n                     def = Some(DefData {\n-                        id: StaticLoc { container: module, id: ItemTreeId::new(self.tree_id, id) }\n+                        id: StaticLoc { container, id: ItemTreeId::new(self.tree_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,\n@@ -1580,12 +1606,9 @@ impl ModCollector<'_, '_> {\n                     let it = &self.item_tree[id];\n \n                     def = Some(DefData {\n-                        id: TypeAliasLoc {\n-                            container: module.into(),\n-                            id: ItemTreeId::new(self.tree_id, id),\n-                        }\n-                        .intern(self.def_collector.db)\n-                        .into(),\n+                        id: TypeAliasLoc { container, id: ItemTreeId::new(self.tree_id, id) }\n+                            .intern(self.def_collector.db)\n+                            .into(),\n                         name: &it.name,\n                         visibility: &self.item_tree[it.visibility],\n                         has_constructor: false,\n@@ -1633,7 +1656,7 @@ impl ModCollector<'_, '_> {\n                         item_tree: self.item_tree,\n                         mod_dir,\n                     }\n-                    .collect(&*items);\n+                    .collect_in_top_module(&*items);\n                     if is_macro_use {\n                         self.import_all_legacy_macros(module_id);\n                     }\n@@ -1666,7 +1689,7 @@ impl ModCollector<'_, '_> {\n                                 item_tree: &item_tree,\n                                 mod_dir,\n                             }\n-                            .collect(item_tree.top_level_items());\n+                            .collect_in_top_module(item_tree.top_level_items());\n                             let is_macro_use = is_macro_use\n                                 || item_tree\n                                     .top_level_attrs(db, self.def_collector.def_map.krate)\n@@ -1734,7 +1757,12 @@ impl ModCollector<'_, '_> {\n     ///\n     /// If `ignore_up_to` is `Some`, attributes preceding and including that attribute will be\n     /// assumed to be resolved already.\n-    fn resolve_attributes(&mut self, attrs: &Attrs, mod_item: ModItem) -> Result<(), ()> {\n+    fn resolve_attributes(\n+        &mut self,\n+        attrs: &Attrs,\n+        mod_item: ModItem,\n+        container: ItemContainerId,\n+    ) -> Result<(), ()> {\n         let mut ignore_up_to =\n             self.def_collector.skip_attrs.get(&InFile::new(self.file_id(), mod_item)).copied();\n         let iter = attrs\n@@ -1777,6 +1805,7 @@ impl ModCollector<'_, '_> {\n                     mod_item,\n                     tree: self.tree_id,\n                 },\n+                container,\n             });\n \n             return Err(());\n@@ -1951,7 +1980,7 @@ impl ModCollector<'_, '_> {\n         );\n     }\n \n-    fn collect_macro_call(&mut self, mac: &MacroCall) {\n+    fn collect_macro_call(&mut self, mac: &MacroCall, container: ItemContainerId) {\n         let ast_id = AstIdWithPath::new(self.file_id(), mac.ast_id, ModPath::clone(&mac.path));\n \n         // Case 1: try to resolve in legacy scope and expand macro_rules\n@@ -1981,6 +2010,7 @@ impl ModCollector<'_, '_> {\n                     self.module_id,\n                     macro_call_id,\n                     self.macro_depth + 1,\n+                    container,\n                 );\n \n                 if let Some(err) = error {\n@@ -2011,6 +2041,7 @@ impl ModCollector<'_, '_> {\n             module_id: self.module_id,\n             depth: self.macro_depth + 1,\n             kind: MacroDirectiveKind::FnLike { ast_id, expand_to: mac.expand_to },\n+            container,\n         });\n     }\n "}, {"sha": "8b2eea9d586266a6069a6739182855893f15a008", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -22,8 +22,8 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n-    EnumVariantId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId,\n+    AdtId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, ExternBlockId,\n+    FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n     TypeParamId, VariantId,\n };\n@@ -802,6 +802,13 @@ impl HasResolver for ImplId {\n     }\n }\n \n+impl HasResolver for ExternBlockId {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        // Same as parent's\n+        self.lookup(db).container.resolver(db)\n+    }\n+}\n+\n impl HasResolver for DefWithBodyId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         match self {\n@@ -812,12 +819,13 @@ impl HasResolver for DefWithBodyId {\n     }\n }\n \n-impl HasResolver for AssocContainerId {\n+impl HasResolver for ItemContainerId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         match self {\n-            AssocContainerId::ModuleId(it) => it.resolver(db),\n-            AssocContainerId::TraitId(it) => it.resolver(db),\n-            AssocContainerId::ImplId(it) => it.resolver(db),\n+            ItemContainerId::ModuleId(it) => it.resolver(db),\n+            ItemContainerId::TraitId(it) => it.resolver(db),\n+            ItemContainerId::ImplId(it) => it.resolver(db),\n+            ItemContainerId::ExternBlockId(it) => it.resolver(db),\n         }\n     }\n }"}, {"sha": "dc5dcd163c369a91217b78a0e19389714713ff0f", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -11,7 +11,7 @@ use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n use base_db::CrateId;\n use hir_def::{\n     lang_item::{lang_attr, LangItemTarget},\n-    AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, ModuleId, TypeAliasId,\n+    AssocItemId, GenericDefId, HasModule, ItemContainerId, Lookup, ModuleId, TypeAliasId,\n };\n use hir_expand::name::name;\n \n@@ -396,7 +396,7 @@ pub(crate) fn associated_ty_data_query(\n     debug!(\"associated_ty_data {:?}\", id);\n     let type_alias: TypeAliasId = from_assoc_type_id(id);\n     let trait_ = match type_alias.lookup(db.upcast()).container {\n-        AssocContainerId::TraitId(t) => t,\n+        ItemContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n     };\n \n@@ -634,7 +634,7 @@ fn type_alias_associated_ty_value(\n ) -> Arc<AssociatedTyValue> {\n     let type_alias_data = db.type_alias_data(type_alias);\n     let impl_id = match type_alias.lookup(db.upcast()).container {\n-        AssocContainerId::ImplId(it) => it,\n+        ItemContainerId::ImplId(it) => it,\n         _ => panic!(\"assoc ty value should be in impl\"),\n     };\n "}, {"sha": "653c4d5ec8441acacad296ed2ab55fe32a7574f5", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -4,7 +4,7 @@ use chalk_ir::{FloatTy, IntTy, Mutability, Scalar, UintTy};\n use hir_def::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinType, BuiltinUint},\n     type_ref::Rawness,\n-    AssocContainerId, FunctionId, GenericDefId, HasModule, Lookup, TraitId,\n+    FunctionId, GenericDefId, HasModule, ItemContainerId, Lookup, TraitId,\n };\n \n use crate::{\n@@ -268,7 +268,7 @@ impl TyExt for Ty {\n         match self.kind(&Interner) {\n             TyKind::AssociatedType(id, ..) => {\n                 match from_assoc_type_id(*id).lookup(db.upcast()).container {\n-                    AssocContainerId::TraitId(trait_id) => Some(trait_id),\n+                    ItemContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n             }\n@@ -277,7 +277,7 @@ impl TyExt for Ty {\n                     .lookup(db.upcast())\n                     .container\n                 {\n-                    AssocContainerId::TraitId(trait_id) => Some(trait_id),\n+                    ItemContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n             }\n@@ -331,7 +331,7 @@ impl ProjectionTyExt for ProjectionTy {\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n         match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n-            AssocContainerId::TraitId(it) => it,\n+            ItemContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n     }"}, {"sha": "a1e7198bc2c76291740964ca242aa94e557a7a57", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -178,6 +178,7 @@ impl<'a> DeclValidator<'a> {\n                 AttrDefId::ConstId(cid) => Some(cid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::TraitId(tid) => Some(tid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::ImplId(iid) => Some(iid.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::ExternBlockId(id) => Some(id.lookup(self.db.upcast()).container.into()),\n                 // These warnings should not explore macro definitions at all\n                 AttrDefId::MacroDefId(_) => None,\n                 // Will never occur under an enum/struct/union/type alias"}, {"sha": "307323690a5d54d002d420d136b03f44c2d50465", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -16,7 +16,7 @@ use hir_def::{\n     path::{Path, PathKind},\n     type_ref::{TraitBoundModifier, TypeBound, TypeRef},\n     visibility::Visibility,\n-    AssocContainerId, HasModule, Lookup, ModuleId, TraitId,\n+    HasModule, ItemContainerId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::{hygiene::Hygiene, name::Name};\n use itertools::Itertools;\n@@ -576,7 +576,7 @@ impl HirDisplay for Ty {\n             TyKind::AssociatedType(assoc_type_id, parameters) => {\n                 let type_alias = from_assoc_type_id(*assoc_type_id);\n                 let trait_ = match type_alias.lookup(f.db.upcast()).container {\n-                    AssocContainerId::TraitId(it) => it,\n+                    ItemContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_ = f.db.trait_data(trait_);"}, {"sha": "56e554736e21587410b1854f410021afc10a1010", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -521,7 +521,7 @@ impl<'a> InferenceContext<'a> {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n                 let trait_ = match res_assoc_ty.lookup(self.db.upcast()).container {\n-                    hir_def::AssocContainerId::TraitId(trait_) => trait_,\n+                    hir_def::ItemContainerId::TraitId(trait_) => trait_,\n                     _ => panic!(\"resolve_associated_type called with non-associated type\"),\n                 };\n                 let ty = self.table.new_type_var();"}, {"sha": "90c68c9d3f701d0dbefa57a1d6e174942a1358d1", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     },\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    AssocContainerId, FieldId, FunctionId, Lookup,\n+    FieldId, FunctionId, ItemContainerId, Lookup,\n };\n use hir_expand::name::{name, Name};\n use stdx::always;\n@@ -1167,8 +1167,7 @@ impl<'a> InferenceContext<'a> {\n             // add obligation for trait implementation, if this is a trait method\n             match def {\n                 CallableDefId::FunctionId(f) => {\n-                    if let AssocContainerId::TraitId(trait_) = f.lookup(self.db.upcast()).container\n-                    {\n+                    if let ItemContainerId::TraitId(trait_) = f.lookup(self.db.upcast()).container {\n                         // construct a TraitRef\n                         let substs = crate::subst_prefix(\n                             &*parameters,"}, {"sha": "a84501fa54d24a56a54d7b0b7fbc48d0192992cc", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -6,7 +6,7 @@ use chalk_ir::cast::Cast;\n use hir_def::{\n     path::{Path, PathSegment},\n     resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n-    AdtId, AssocContainerId, AssocItemId, EnumVariantId, Lookup,\n+    AdtId, AssocItemId, EnumVariantId, ItemContainerId, Lookup,\n };\n use hir_expand::name::Name;\n \n@@ -241,7 +241,7 @@ impl<'a> InferenceContext<'a> {\n                     AssocItemId::TypeAliasId(_) => unreachable!(),\n                 };\n                 let substs = match container {\n-                    AssocContainerId::ImplId(impl_id) => {\n+                    ItemContainerId::ImplId(impl_id) => {\n                         let impl_substs = TyBuilder::subst_for_def(self.db, impl_id)\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n@@ -250,7 +250,7 @@ impl<'a> InferenceContext<'a> {\n                         self.unify(&impl_self_ty, &ty);\n                         Some(impl_substs)\n                     }\n-                    AssocContainerId::TraitId(trait_) => {\n+                    ItemContainerId::TraitId(trait_) => {\n                         // we're picking this method\n                         let trait_ref = TyBuilder::trait_ref(self.db, trait_)\n                             .push(ty.clone())\n@@ -259,7 +259,7 @@ impl<'a> InferenceContext<'a> {\n                         self.push_obligation(trait_ref.clone().cast(&Interner));\n                         Some(trait_ref.substitution)\n                     }\n-                    AssocContainerId::ModuleId(_) => None,\n+                    ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item);"}, {"sha": "99267e085fae2725a7165a4bd201113b8aa9ae09", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -19,8 +19,8 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TraitBoundModifier, TraitRef as HirTraitRef, TypeBound, TypeRef},\n-    AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n+    AdtId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    HasModule, ImplId, ItemContainerId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n     TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::{name::Name, ExpandResult};\n@@ -1125,7 +1125,7 @@ pub(crate) fn trait_environment_query(\n         }\n     }\n \n-    let container: Option<AssocContainerId> = match def {\n+    let container: Option<ItemContainerId> = match def {\n         // FIXME: is there a function for this?\n         GenericDefId::FunctionId(f) => Some(f.lookup(db.upcast()).container),\n         GenericDefId::AdtId(_) => None,\n@@ -1135,7 +1135,7 @@ pub(crate) fn trait_environment_query(\n         GenericDefId::EnumVariantId(_) => None,\n         GenericDefId::ConstId(c) => Some(c.lookup(db.upcast()).container),\n     };\n-    if let Some(AssocContainerId::TraitId(trait_id)) = container {\n+    if let Some(ItemContainerId::TraitId(trait_id)) = container {\n         // add `Self: Trait<T1, T2, ...>` to the environment in trait\n         // function default implementations (and speculative code\n         // inside consts or type aliases)"}, {"sha": "6b3f48b1945bf9faf8b84f1073388f26e220b45c", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -8,8 +8,8 @@ use arrayvec::ArrayVec;\n use base_db::{CrateId, Edition};\n use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n-    lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, BlockId, FunctionId,\n-    GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId,\n+    lang_item::LangItemTarget, nameres::DefMap, AssocItemId, BlockId, FunctionId, GenericDefId,\n+    HasModule, ImplId, ItemContainerId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -979,18 +979,19 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db.upcast()).container {\n-        AssocContainerId::TraitId(_) => TyBuilder::subst_for_def(db, function_id)\n+        ItemContainerId::TraitId(_) => TyBuilder::subst_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        AssocContainerId::ImplId(impl_id) => {\n+        ItemContainerId::ImplId(impl_id) => {\n             let impl_substs = inherent_impl_substs(db, env, impl_id, self_ty)?;\n             TyBuilder::subst_for_def(db, function_id)\n                 .use_parent_substs(&impl_substs)\n                 .fill_with_unknown()\n                 .build()\n         }\n-        AssocContainerId::ModuleId(_) => unreachable!(),\n+        // No receiver\n+        ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.map(|s| s.params()[0].clone()).substitute(&Interner, &substs))"}, {"sha": "18a07f2c6402f091ebad7b231a677d8a34bc04d6", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     chalk_db, db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, mapping::from_chalk,\n     CallableDefId, Interner,\n };\n-use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n+use hir_def::{AdtId, ItemContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n \n@@ -45,7 +45,7 @@ impl DebugContext<'_> {\n         let type_alias: TypeAliasId = from_assoc_type_id(id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n-            AssocContainerId::TraitId(t) => t,\n+            ItemContainerId::TraitId(t) => t,\n             _ => panic!(\"associated type not in trait\"),\n         };\n         let trait_data = self.0.trait_data(trait_);\n@@ -60,7 +60,7 @@ impl DebugContext<'_> {\n         let type_alias = from_assoc_type_id(projection_ty.associated_ty_id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n-            AssocContainerId::TraitId(t) => t,\n+            ItemContainerId::TraitId(t) => t,\n             _ => panic!(\"associated type not in trait\"),\n         };\n         let trait_data = self.0.trait_data(trait_);"}, {"sha": "a0837377c6e0ef672554082fa5931ffeac764466", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::{TraitBoundModifier, TypeRef},\n-    AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId,\n+    GenericDefId, ItemContainerId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n use hir_expand::name::{name, Name};\n use rustc_hash::FxHashSet;\n@@ -296,8 +296,8 @@ fn parent_generic_def(db: &dyn DefDatabase, def: GenericDefId) -> Option<Generic\n     };\n \n     match container {\n-        AssocContainerId::ImplId(it) => Some(it.into()),\n-        AssocContainerId::TraitId(it) => Some(it.into()),\n-        AssocContainerId::ModuleId(_) => None,\n+        ItemContainerId::ImplId(it) => Some(it.into()),\n+        ItemContainerId::TraitId(it) => Some(it.into()),\n+        ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => None,\n     }\n }"}, {"sha": "62f4a819107d417d83aff6c350164d93d79cc79a", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -36,8 +36,8 @@ use either::Either;\n use fst::{self, Streamer};\n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    AdtId, AssocContainerId, AssocItemId, AssocItemLoc, DefHasSource, DefWithBodyId, HasSource,\n-    HirFileId, ImplId, InFile, ItemLoc, ItemTreeNode, Lookup, MacroDef, Module, ModuleDefId,\n+    AdtId, AssocItemId, AssocItemLoc, DefHasSource, DefWithBodyId, HasSource, HirFileId, ImplId,\n+    InFile, ItemContainerId, ItemLoc, ItemTreeNode, Lookup, MacroDef, Module, ModuleDefId,\n     ModuleId, Semantics, TraitId,\n };\n use rayon::prelude::*;\n@@ -508,7 +508,7 @@ impl<'a> SymbolCollector<'a> {\n                     self.collect_from_body(id);\n                 }\n                 ModuleDefId::StaticId(id) => {\n-                    self.push_decl(id, FileSymbolKind::Static);\n+                    self.push_decl_assoc(id, FileSymbolKind::Static);\n                     self.collect_from_body(id);\n                 }\n                 ModuleDefId::TraitId(id) => {\n@@ -610,17 +610,17 @@ impl<'a> SymbolCollector<'a> {\n         T: ItemTreeNode,\n         <T as ItemTreeNode>::Source: HasName,\n     {\n-        fn container_name(db: &dyn HirDatabase, container: AssocContainerId) -> Option<SmolStr> {\n+        fn container_name(db: &dyn HirDatabase, container: ItemContainerId) -> Option<SmolStr> {\n             match container {\n-                AssocContainerId::ModuleId(module_id) => {\n+                ItemContainerId::ModuleId(module_id) => {\n                     let module = Module::from(module_id);\n                     module.name(db).and_then(|name| name.as_text())\n                 }\n-                AssocContainerId::TraitId(trait_id) => {\n+                ItemContainerId::TraitId(trait_id) => {\n                     let trait_data = db.trait_data(trait_id);\n                     trait_data.name.as_text()\n                 }\n-                AssocContainerId::ImplId(_) => None,\n+                ItemContainerId::ImplId(_) | ItemContainerId::ExternBlockId(_) => None,\n             }\n         }\n "}, {"sha": "3206a63a9027ef4f3e090e61dfd32b315f93784f", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b365b6119c0b477e691d14cda6ecc620aa507727/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=b365b6119c0b477e691d14cda6ecc620aa507727", "patch": "@@ -397,6 +397,24 @@ extern {\n         );\n     }\n \n+    #[test]\n+    fn ignores_extern_items_from_macro() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! m {\n+    () => {\n+        fn NonSnakeCaseName(SOME_VAR: u8) -> u8;\n+        pub static SomeStatic: u8 = 10;\n+    }\n+}\n+\n+extern {\n+    m!();\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn bug_traits_arent_checked() {\n         // FIXME: Traits and functions in traits aren't currently checked by"}]}