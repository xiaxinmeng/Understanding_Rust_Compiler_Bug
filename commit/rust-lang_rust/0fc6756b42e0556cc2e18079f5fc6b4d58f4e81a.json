{"sha": "0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzY3NTZiNDJlMDU1NmNjMmUxODA3OWY1ZmM2YjRkNThmNGU4MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-08T20:52:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-08T20:52:54Z"}, "message": "Auto merge of #81889 - m-ou-se:rollup-k63log3, r=m-ou-se\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #71531 (Move treat err as bug tests to ui)\n - #81356 (libtest: allow multiple filters)\n - #81735 (faster few span methods)\n - #81779 (improve error message for disallowed ptr-to-int casts in const eval)\n - #81817 (Add option to emit compiler stderr per bitwidth.)\n - #81828 (parse_format: treat r\" as a literal)\n - #81840 (fix formatting of std::iter::Map)\n - #81861 (Show MIR bytes separately in -Zmeta-stats output)\n - #81865 (Clean up weird Option mapping)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b772cfec476469c0839bdcc49ef177f0a5229ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b772cfec476469c0839bdcc49ef177f0a5229ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "html_url": "https://github.com/rust-lang/rust/commit/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921ec4b3fca17cc777766c240038d7d50ba98e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/921ec4b3fca17cc777766c240038d7d50ba98e0d", "html_url": "https://github.com/rust-lang/rust/commit/921ec4b3fca17cc777766c240038d7d50ba98e0d"}, {"sha": "9d1e8fe045d8512309fa3303d188ccbf06b9542f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1e8fe045d8512309fa3303d188ccbf06b9542f", "html_url": "https://github.com/rust-lang/rust/commit/9d1e8fe045d8512309fa3303d188ccbf06b9542f"}], "stats": {"total": 274, "additions": 203, "deletions": 71}, "files": [{"sha": "14ca51008bec558cebdbfc058f8c3a0fcbc066fe", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -572,10 +572,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n+        // Encode MIR.\n+        i = self.position();\n+        self.encode_mir();\n+        let mir_bytes = self.position() - i;\n+\n         // Encode the items.\n         i = self.position();\n         self.encode_def_ids();\n-        self.encode_mir();\n         self.encode_info_for_items();\n         let item_bytes = self.position() - i;\n \n@@ -700,6 +704,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             println!(\" proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n+            println!(\"             mir bytes: {}\", mir_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n             println!(\"           table bytes: {}\", tables_bytes);\n             println!(\"         hygiene bytes: {}\", hygiene_bytes);"}, {"sha": "88af9391cadfe3d9c3d69092a59cbc8e16959422", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -16,6 +16,7 @@ use crate::interpret::{\n #[derive(Clone, Debug)]\n pub enum ConstEvalErrKind {\n     NeedsRfc(String),\n+    PtrToIntCast,\n     ConstAccessesStatic,\n     ModifiedGlobal,\n     AssertFailure(AssertKind<ConstInt>),\n@@ -39,6 +40,12 @@ impl fmt::Display for ConstEvalErrKind {\n             NeedsRfc(ref msg) => {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg)\n             }\n+            PtrToIntCast => {\n+                write!(\n+                    f,\n+                    \"cannot cast pointer to integer because it was not created by cast from integer\"\n+                )\n+            }\n             ConstAccessesStatic => write!(f, \"constant accesses static\"),\n             ModifiedGlobal => {\n                 write!(f, \"modifying a static's initial value from another static's initializer\")"}, {"sha": "f6b950c08c78e05a6bbc31d0e8ed8b492d0744ec", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -352,7 +352,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"pointer-to-integer cast\".to_string()).into())\n+        Err(ConstEvalErrKind::PtrToIntCast.into())\n     }\n \n     fn binary_ptr_op("}, {"sha": "92d974690b51486238c2f9082d248e589d3077e7", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -730,7 +730,7 @@ fn find_skips_from_snippet(\n     str_style: Option<usize>,\n ) -> (Vec<usize>, bool) {\n     let snippet = match snippet {\n-        Some(ref s) if s.starts_with('\"') || s.starts_with(\"r#\") => s,\n+        Some(ref s) if s.starts_with('\"') || s.starts_with(\"r\\\"\") || s.starts_with(\"r#\") => s,\n         _ => return (vec![], false),\n     };\n "}, {"sha": "79c5c7f110c4f39bf3e5a91ce3cd7dc9611437a7", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -22,6 +22,7 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(option_expect_none)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "298c995b1660b1320ba7b055552855c8294241a8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -539,7 +539,7 @@ impl SourceMap {\n \n     pub fn is_line_before_span_empty(&self, sp: Span) -> bool {\n         match self.span_to_prev_source(sp) {\n-            Ok(s) => s.split('\\n').last().map_or(false, |l| l.trim_start().is_empty()),\n+            Ok(s) => s.rsplit_once('\\n').unwrap_or((\"\", &s)).1.trim_start().is_empty(),\n             Err(_) => false,\n         }\n     }\n@@ -632,10 +632,11 @@ impl SourceMap {\n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n         match self.span_to_prev_source(sp) {\n             Err(_) => None,\n-            Ok(source) => source\n-                .split('\\n')\n-                .last()\n-                .map(|last_line| last_line.len() - last_line.trim_start().len()),\n+            Ok(source) => {\n+                let last_line = source.rsplit_once('\\n').unwrap_or((\"\", &source)).1;\n+\n+                Some(last_line.len() - last_line.trim_start().len())\n+            }\n         }\n     }\n \n@@ -651,7 +652,7 @@ impl SourceMap {\n     pub fn span_extend_to_prev_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n             let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\");\n-            if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+            if !prev_source.is_empty() && (accept_newlines || !prev_source.contains('\\n')) {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n         }\n@@ -673,7 +674,7 @@ impl SourceMap {\n                 let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n                 if prev_source.is_empty() && sp.lo().0 != 0 {\n                     return sp.with_lo(BytePos(sp.lo().0 - 1));\n-                } else if !prev_source.contains('\\n') || accept_newlines {\n+                } else if accept_newlines || !prev_source.contains('\\n') {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n             }\n@@ -693,7 +694,7 @@ impl SourceMap {\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {\n             let next_source = next_source.split(c).next().unwrap_or(\"\");\n-            if !next_source.is_empty() && (!next_source.contains('\\n') || accept_newlines) {\n+            if !next_source.is_empty() && (accept_newlines || !next_source.contains('\\n')) {\n                 return sp.with_hi(BytePos(sp.hi().0 + next_source.len() as u32));\n             }\n         }"}, {"sha": "9692b0524e7ecb043b252fa8cf69571d7cbe7cdf", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -285,13 +285,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_eq_type(&e, ty);\n                 ty\n             }\n-            ExprKind::If(ref cond, ref then_expr, ref opt_else_expr) => self.check_then_else(\n-                &cond,\n-                then_expr,\n-                opt_else_expr.as_ref().map(|e| &**e),\n-                expr.span,\n-                expected,\n-            ),\n+            ExprKind::If(cond, then_expr, opt_else_expr) => {\n+                self.check_then_else(cond, then_expr, opt_else_expr, expr.span, expected)\n+            }\n             ExprKind::DropTemps(ref e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(ref args) => self.check_expr_array(args, expected, expr),\n             ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,"}, {"sha": "f238baf743c555c6218dc03442302dafd79d06d5", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -60,6 +60,7 @@ pub struct Map<I, F> {\n     iter: I,\n     f: F,\n }\n+\n impl<I, F> Map<I, F> {\n     pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {\n         Map { iter, f }"}, {"sha": "c0b5197e997bbc0dd9ee671eccc1745f954e6fcd", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -10,7 +10,7 @@ use super::time::TestTimeOptions;\n #[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n-    pub filter: Option<String>,\n+    pub filters: Vec<String>,\n     pub filter_exact: bool,\n     pub force_run_in_process: bool,\n     pub exclude_should_panic: bool,\n@@ -148,12 +148,13 @@ fn optgroups() -> getopts::Options {\n }\n \n fn usage(binary: &str, options: &getopts::Options) {\n-    let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n+    let message = format!(\"Usage: {} [OPTIONS] [FILTERS...]\", binary);\n     println!(\n         r#\"{usage}\n \n The FILTER string is tested against the name of all tests, and only those\n-tests whose names contain the filter are run.\n+tests whose names contain the filter are run. Multiple filter strings may\n+be passed, which will run all tests matching any of the filters.\n \n By default, all tests are run in parallel. This can be altered with the\n --test-threads flag or the RUST_TEST_THREADS environment variable when running\n@@ -243,7 +244,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let logfile = get_log_file(&matches)?;\n     let run_ignored = get_run_ignored(&matches, include_ignored)?;\n-    let filter = get_filter(&matches)?;\n+    let filters = matches.free.clone();\n     let nocapture = get_nocapture(&matches)?;\n     let test_threads = get_test_threads(&matches)?;\n     let color = get_color_config(&matches)?;\n@@ -253,7 +254,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let test_opts = TestOpts {\n         list,\n-        filter,\n+        filters,\n         filter_exact: exact,\n         force_run_in_process,\n         exclude_should_panic,\n@@ -397,12 +398,6 @@ fn get_run_ignored(matches: &getopts::Matches, include_ignored: bool) -> OptPart\n     Ok(run_ignored)\n }\n \n-fn get_filter(matches: &getopts::Matches) -> OptPartRes<Option<String>> {\n-    let filter = if !matches.free.is_empty() { Some(matches.free[0].clone()) } else { None };\n-\n-    Ok(filter)\n-}\n-\n fn get_allow_unstable(matches: &getopts::Matches) -> OptPartRes<bool> {\n     let mut allow_unstable = false;\n "}, {"sha": "c38a8c965be6137829a31bc4df8e7c133e5448cd", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -396,8 +396,8 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     };\n \n     // Remove tests that don't match the test filter\n-    if let Some(ref filter) = opts.filter {\n-        filtered.retain(|test| matches_filter(test, filter));\n+    if !opts.filters.is_empty() {\n+        filtered.retain(|test| opts.filters.iter().any(|filter| matches_filter(test, filter)));\n     }\n \n     // Skip tests that match any of the skip filters"}, {"sha": "e3c9b3869154a35d80f7113c96da17964dc54414", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -34,7 +34,7 @@ impl TestOpts {\n     fn new() -> TestOpts {\n         TestOpts {\n             list: false,\n-            filter: None,\n+            filters: vec![],\n             filter_exact: false,\n             force_run_in_process: false,\n             exclude_should_panic: false,\n@@ -473,43 +473,60 @@ pub fn exact_filter_match() {\n     }\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n-    let substr = filter_tests(&TestOpts { filter: Some(\"bas\".into()), ..TestOpts::new() }, tests());\n+    let substr =\n+        filter_tests(&TestOpts { filters: vec![\"bas\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n+    let substr = filter_tests(\n+        &TestOpts { filters: vec![\"test1\".into(), \"test2\".into()], ..TestOpts::new() },\n+        tests(),\n+    );\n+    assert_eq!(substr.len(), 2);\n+\n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"bas\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"bas\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n+\n+    let exact = filter_tests(\n+        &TestOpts {\n+            filters: vec![\"base\".into(), \"base::test\".into()],\n+            filter_exact: true,\n+            ..TestOpts::new()\n+        },\n+        tests(),\n+    );\n+    assert_eq!(exact.len(), 2);\n }\n \n #[test]"}, {"sha": "57cac76aec2a5384243aa2d6fed45add8a19c416", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/Makefile", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile?ref=921ec4b3fca17cc777766c240038d7d50ba98e0d", "patch": "@@ -1,7 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) err.rs -Z treat-err-as-bug 2>&1 \\\n-\t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\"\n-\t$(RUSTC) delay_span_bug.rs -Z treat-err-as-bug 2>&1 \\\n-\t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\""}, {"sha": "dad33e498b52fb57eb49660aef11acbf0de48242", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/delay_span_bug.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs?ref=921ec4b3fca17cc777766c240038d7d50ba98e0d", "patch": "@@ -1,4 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_error(delay_span_bug_from_inside_query)]\n-fn main() {}"}, {"sha": "136b2f3070299687bd28b1577ea3f287fb1c29f1", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/err.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921ec4b3fca17cc777766c240038d7d50ba98e0d/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Ferr.rs?ref=921ec4b3fca17cc777766c240038d7d50ba98e0d", "patch": "@@ -1,3 +0,0 @@\n-#![crate_type=\"rlib\"]\n-\n-pub static C: u32 = 0-1;"}, {"sha": "bf1e790b5dc29270a92c743ab2b92bc122a2a031", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_raw_ptr_to_usize_cast)]\n+\n+fn main() {\n+    const OK: usize = unsafe { 0 as *const i32 as usize };\n+\n+    const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n+    //~^ ERROR [const_err]\n+    //~| NOTE cannot cast pointer to integer because it was not created by cast from integer\n+    //~| NOTE\n+    //~| NOTE `#[deny(const_err)]` on by default\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE see issue #71800\n+}"}, {"sha": "48255860bb53fd1f0b5331866dbe70ea6544de4d", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,14 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_to_usize_cast.rs:6:36\n+   |\n+LL |     const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n+   |     -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                    |\n+   |                                    cannot cast pointer to integer because it was not created by cast from integer\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error\n+"}, {"sha": "df8b33a0898f659deab953e1a3b9e7614a8a5dcd", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n    | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n    |                            |\n-   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                            cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "d571eb549630f948ffb25569946f6463603bc160", "filename": "src/test/ui/consts/issue-51559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const FOO: usize = unsafe { BAR as usize };\n    | --------------------------------^^^^^^^^^^^^---\n    |                                 |\n-   |                                 \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                                 cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "29998950552cd502c761a8b287a533c39ff4522a", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-52432.rs:7:10\n    |\n LL |     [(); &(static || {}) as *const _ as usize];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot cast pointer to integer because it was not created by cast from integer\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aae6d837204e3a2e596bb5a2774f46944c39640e", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -15,7 +15,7 @@ static INT_PTR_ARITH: () = unsafe {\n     let x: usize = std::mem::transmute(&0);\n     let _v = x + 0;\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE pointer-to-integer cast\n+    //~| NOTE cannot cast pointer to integer\n };\n \n fn main() {}"}, {"sha": "8ac4aa87f642a41df642fdf73ee2538901d77380", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -8,7 +8,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:16:14\n    |\n LL |     let _v = x + 0;\n-   |              ^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |              ^^^^^ cannot cast pointer to integer because it was not created by cast from integer\n \n warning: skipping const checks\n    |"}, {"sha": "0fbe55f972ee543f24cc433f7e86436b67744610", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -71,14 +71,14 @@ const _: *const u8 =\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE \"pointer-to-integer cast\" needs an rfc\n+//~| NOTE cannot cast pointer to integer\n //~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n //~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE \"pointer-to-integer cast\" needs an rfc\n+//~| NOTE cannot cast pointer to integer\n //~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n //~| NOTE"}, {"sha": "9ec009c55c443e4d1984e280342652c435254a59", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -36,7 +36,7 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                           cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -47,7 +47,7 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                           cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>"}, {"sha": "6c97a807b052b34890f0e3ff43d303c8aedc1063", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -5,6 +5,7 @@\n fn main() {\n     named_argument_takes_precedence_to_captured();\n     formatting_parameters_can_be_captured();\n+    capture_raw_strings_and_idents();\n \n     #[cfg(panic = \"unwind\")]\n     {\n@@ -25,6 +26,16 @@ fn named_argument_takes_precedence_to_captured() {\n     assert_eq!(&s, \"positional-named-captured\");\n }\n \n+fn capture_raw_strings_and_idents() {\n+    let r#type = \"apple\";\n+    let s = format!(r#\"The fruit is an {type}\"#);\n+    assert_eq!(&s, \"The fruit is an apple\");\n+\n+    let r#type = \"orange\";\n+    let s = format!(r\"The fruit is an {type}\");\n+    assert_eq!(&s, \"The fruit is an orange\");\n+}\n+\n #[cfg(panic = \"unwind\")]\n fn panic_with_single_argument_does_not_get_formatted() {\n     // panic! with a single argument does not perform string formatting."}, {"sha": "10c952006c208d196305c636d0b3c6be4a7e76f3", "filename": "src/test/ui/issues/issue-75307.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -1,8 +1,8 @@\n error: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n-  --> $DIR/issue-75307.rs:2:13\n+  --> $DIR/issue-75307.rs:2:17\n    |\n LL |     format!(r\"{}{}{}\", named_arg=1);\n-   |             ^^^^^^^^^\n+   |                 ^^^^\n    |\n    = note: positional arguments are zero-based\n "}, {"sha": "04dd83b7fd0f79a4c43ac9272aa92f3b01fc0e5a", "filename": "src/test/ui/test-attrs/test-filter-multiple.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// compile-flags: --test\n+// run-flags: --test-threads=1 test1 test2\n+// check-run-results\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// ignore-emscripten no threads support\n+\n+#[test]\n+fn test1() {}\n+\n+#[test]\n+fn test2() {}\n+\n+#[test]\n+fn test3() {\n+    panic!(\"this should not run\");\n+}"}, {"sha": "1aa684ed5073a53dcacc2d54a600e6327b216da4", "filename": "src/test/ui/test-attrs/test-filter-multiple.run.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test test1 ... ok\n+test test2 ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in $TIME\n+"}, {"sha": "67846336acaaf27d337cdea040c668e1216a3216", "filename": "src/test/ui/treat-err-as-bug/delay_span_bug.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztreat-err-as-bug\n+// failure-status: 101\n+// error-pattern: aborting due to `-Z treat-err-as-bug=1`\n+// error-pattern: [trigger_delay_span_bug] trigger a delay span bug\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_error(delay_span_bug_from_inside_query)]\n+fn main() {}"}, {"sha": "ed65b69ebcab1a6ad0adcdf6fdce0cec78ee6dbd", "filename": "src/test/ui/treat-err-as-bug/delay_span_bug.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,11 @@\n+error: internal compiler error: delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\n+  --> $DIR/delay_span_bug.rs:11:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: internal compiler error: unexpected panic\n+\n+query stack during panic:\n+#0 [trigger_delay_span_bug] trigger a delay span bug\n+end of query stack"}, {"sha": "5442d8585941b7f4f9fbd33019bbaa1135ff8f4c", "filename": "src/test/ui/treat-err-as-bug/err.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztreat-err-as-bug\n+// failure-status: 101\n+// error-pattern: aborting due to `-Z treat-err-as-bug=1`\n+// error-pattern: [eval_to_allocation_raw] const-evaluating + checking `C`\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+\n+#![crate_type = \"rlib\"]\n+\n+pub static C: u32 = 0 - 1;\n+//~^ ERROR could not evaluate static initializer"}, {"sha": "61eb85c40a112c549c55f81e9437f7e64e503063", "filename": "src/test/ui/treat-err-as-bug/err.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftreat-err-as-bug%2Ferr.stderr?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -0,0 +1,12 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/err.rs:10:21\n+   |\n+LL | pub static C: u32 = 0 - 1;\n+   |                     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+\n+error: internal compiler error: unexpected panic\n+\n+query stack during panic:\n+#0 [eval_to_allocation_raw] const-evaluating + checking `C`\n+#1 [eval_to_allocation_raw] const-evaluating + checking `C`\n+end of query stack"}, {"sha": "cde4bfe288d2e1b66ea180f2ed28f9750b83ba54", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -240,8 +240,8 @@ pub struct Config {\n     /// Run ignored tests\n     pub run_ignored: bool,\n \n-    /// Only run tests that match this filter\n-    pub filter: Option<String>,\n+    /// Only run tests that match these filters\n+    pub filters: Vec<String>,\n \n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,"}, {"sha": "429a8c98cd57cd5f3fdb70e33ed46bdccea6a563", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -333,6 +333,8 @@ pub struct TestProps {\n     pub assembly_output: Option<String>,\n     // If true, the test is expected to ICE\n     pub should_ice: bool,\n+    // If true, the stderr is expected to be different across bit-widths.\n+    pub stderr_per_bitwidth: bool,\n }\n \n impl TestProps {\n@@ -372,6 +374,7 @@ impl TestProps {\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n             should_ice: false,\n+            stderr_per_bitwidth: false,\n         }\n     }\n \n@@ -538,6 +541,10 @@ impl TestProps {\n                 if self.assembly_output.is_none() {\n                     self.assembly_output = config.parse_assembly_output(ln);\n                 }\n+\n+                if !self.stderr_per_bitwidth {\n+                    self.stderr_per_bitwidth = config.parse_stderr_per_bitwidth(ln);\n+                }\n             });\n         }\n \n@@ -774,6 +781,10 @@ impl Config {\n         self.parse_name_directive(line, \"ignore-pass\")\n     }\n \n+    fn parse_stderr_per_bitwidth(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"stderr-per-bitwidth\")\n+    }\n+\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\").map(|r| r.trim().to_string())\n     }"}, {"sha": "3fde24e8a7fbaf0adbb88f552041ef2b81685311", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -221,7 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         suite: matches.opt_str(\"suite\").unwrap(),\n         debugger: None,\n         run_ignored,\n-        filter: matches.free.first().cloned(),\n+        filters: matches.free.clone(),\n         filter_exact: matches.opt_present(\"exact\"),\n         force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n             mode.parse::<PassMode>()\n@@ -280,7 +280,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"stage_id: {}\", config.stage_id));\n     logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n+    logv(c, format!(\"filters: {:?}\", config.filters));\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(\n         c,\n@@ -465,7 +465,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         exclude_should_panic: false,\n-        filter: config.filter.clone(),\n+        filters: config.filters.clone(),\n         filter_exact: config.filter_exact,\n         run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n         format: if config.quiet { test::OutputFormat::Terse } else { test::OutputFormat::Pretty },"}, {"sha": "1ec32184d9898e8ba5f11a383c31e2e294493279", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "patch": "@@ -3124,7 +3124,12 @@ impl<'test> TestCx<'test> {\n                     errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n                 }\n                 if !self.props.dont_check_compiler_stderr {\n-                    errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+                    let kind = if self.props.stderr_per_bitwidth {\n+                        format!(\"{}bit.stderr\", get_pointer_width(&self.config.target))\n+                    } else {\n+                        String::from(\"stderr\")\n+                    };\n+                    errors += self.compare_output(&kind, &normalized_stderr, &expected_stderr);\n                 }\n             }\n             TestOutput::Run => {"}]}