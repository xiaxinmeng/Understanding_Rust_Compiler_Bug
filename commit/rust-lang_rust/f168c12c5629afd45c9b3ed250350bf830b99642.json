{"sha": "f168c12c5629afd45c9b3ed250350bf830b99642", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjhjMTJjNTYyOWFmZDQ1YzliM2VkMjUwMzUwYmY4MzBiOTk2NDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-25T20:57:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-25T20:57:10Z"}, "message": "auto merge of #18293 : thestinger/rust/heap, r=cmr", "tree": {"sha": "c63b7afee6afdf35f857470a1878f40a86a6aadc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c63b7afee6afdf35f857470a1878f40a86a6aadc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f168c12c5629afd45c9b3ed250350bf830b99642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f168c12c5629afd45c9b3ed250350bf830b99642", "html_url": "https://github.com/rust-lang/rust/commit/f168c12c5629afd45c9b3ed250350bf830b99642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f168c12c5629afd45c9b3ed250350bf830b99642/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336", "html_url": "https://github.com/rust-lang/rust/commit/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336"}, {"sha": "a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "html_url": "https://github.com/rust-lang/rust/commit/a9e85100cd598ddb9395b2ad31b31e0f9df84f22"}], "stats": {"total": 164, "additions": 61, "deletions": 103}, "files": [{"sha": "c780170d47aaf0b7320efab683deecb01c876f53", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 49, "deletions": 40, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -28,8 +28,8 @@ pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n /// size on the platform.\n ///\n /// The `old_size` and `align` parameters are the parameters that were used to\n-/// create the allocation referenced by `ptr`. The `old_size` parameter may also\n-/// be the value returned by `usable_size` for the requested size.\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may be\n+/// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n     imp::reallocate(ptr, old_size, size, align)\n@@ -38,8 +38,8 @@ pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint)\n /// Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\n /// memory in-place.\n ///\n-/// Returns true if successful, otherwise false if the allocation was not\n-/// altered.\n+/// If the operation succeeds, it returns `usable_size(size, align)` and if it\n+/// fails (or is a no-op) it returns `usable_size(old_size, align)`.\n ///\n /// Behavior is undefined if the requested size is 0 or the alignment is not a\n /// power of 2. The alignment must be no larger than the largest supported page\n@@ -49,20 +49,20 @@ pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint)\n /// create the allocation referenced by `ptr`. The `old_size` parameter may be\n /// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n-pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> bool {\n+pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> uint {\n     imp::reallocate_inplace(ptr, old_size, size, align)\n }\n \n /// Deallocates the memory referenced by `ptr`.\n ///\n /// The `ptr` parameter must not be null.\n ///\n-/// The `size` and `align` parameters are the parameters that were used to\n-/// create the allocation referenced by `ptr`. The `size` parameter may also be\n-/// the value returned by `usable_size` for the requested size.\n+/// The `old_size` and `align` parameters are the parameters that were used to\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may be\n+/// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n-pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n-    imp::deallocate(ptr, size, align)\n+pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n+    imp::deallocate(ptr, old_size, align)\n }\n \n /// Returns the usable size of an allocation created with the specified the\n@@ -102,8 +102,8 @@ unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n #[cfg(not(test))]\n #[lang=\"exchange_free\"]\n #[inline]\n-unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n-    deallocate(ptr, size, align);\n+unsafe fn exchange_free(ptr: *mut u8, old_size: uint, align: uint) {\n+    deallocate(ptr, old_size, align);\n }\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n@@ -112,10 +112,10 @@ unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n #[cfg(any(target_arch = \"arm\",\n           target_arch = \"mips\",\n           target_arch = \"mipsel\"))]\n-static MIN_ALIGN: uint = 8;\n+const MIN_ALIGN: uint = 8;\n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n-static MIN_ALIGN: uint = 16;\n+const MIN_ALIGN: uint = 16;\n \n #[cfg(jemalloc)]\n mod imp {\n@@ -178,22 +178,16 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n-                                     align: uint) -> bool {\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8, _old_size: uint, size: uint,\n+                                     align: uint) -> uint {\n         let flags = align_to_flags(align);\n-        let new_size = je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as uint;\n-        // checking for failure to shrink is tricky\n-        if size < old_size {\n-            usable_size(size, align) == new_size as uint\n-        } else {\n-            new_size >= size\n-        }\n+        je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as uint\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n         let flags = align_to_flags(align);\n-        je_sdallocx(ptr as *mut c_void, size as size_t, flags)\n+        je_sdallocx(ptr as *mut c_void, old_size as size_t, flags)\n     }\n \n     #[inline]\n@@ -213,8 +207,8 @@ mod imp {\n mod imp {\n     use core::cmp;\n     use core::ptr;\n+    use core::ptr::RawPtr;\n     use libc;\n-    use libc_heap;\n     use super::MIN_ALIGN;\n \n     extern {\n@@ -226,7 +220,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::malloc_raw(size)\n+            let ptr = libc::malloc(size as libc::size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let mut out = 0 as *mut libc::c_void;\n             let ret = posix_memalign(&mut out,\n@@ -242,7 +240,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::realloc_raw(ptr, size)\n+            let ptr = libc::realloc(ptr as *mut libc::c_void, size as libc::size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let new_ptr = allocate(size, align);\n             ptr::copy_memory(new_ptr, ptr as *const u8, cmp::min(size, old_size));\n@@ -252,13 +254,13 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, size: uint,\n-                                     _align: uint) -> bool {\n-        size == old_size\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, _size: uint,\n+                                     _align: uint) -> uint {\n+        old_size\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, _align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, _old_size: uint, _align: uint) {\n         libc::free(ptr as *mut libc::c_void)\n     }\n \n@@ -274,7 +276,6 @@ mod imp {\n mod imp {\n     use libc::{c_void, size_t};\n     use libc;\n-    use libc_heap;\n     use core::ptr::RawPtr;\n     use super::MIN_ALIGN;\n \n@@ -288,7 +289,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::malloc_raw(size)\n+            let ptr = libc::malloc(size as size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let ptr = _aligned_malloc(size as size_t, align as size_t);\n             if ptr.is_null() {\n@@ -301,7 +306,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn reallocate(ptr: *mut u8, _old_size: uint, size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::realloc_raw(ptr, size)\n+            let ptr = libc::realloc(ptr as *mut c_void, size as size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let ptr = _aligned_realloc(ptr as *mut c_void, size as size_t,\n                                        align as size_t);\n@@ -313,13 +322,13 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, size: uint,\n-                                     _align: uint) -> bool {\n-        size == old_size\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, _size: uint,\n+                                     _align: uint) -> uint {\n+        old_size\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, _old_size: uint, align: uint) {\n         if align <= MIN_ALIGN {\n             libc::free(ptr as *mut libc::c_void)\n         } else {\n@@ -348,7 +357,7 @@ mod test {\n             let ptr = heap::allocate(size, 8);\n             let ret = heap::reallocate_inplace(ptr, size, size, 8);\n             heap::deallocate(ptr, size, 8);\n-            assert!(ret);\n+            assert_eq!(ret, heap::usable_size(size, 8));\n         }\n     }\n "}, {"sha": "c721649ca9d4fbc659638dbe46f682056db014b2", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -54,11 +54,8 @@\n //!\n //! ## Heap interfaces\n //!\n-//! The [`heap`](heap/index.html) and [`libc_heap`](libc_heap/index.html)\n-//! modules are the unsafe interfaces to the underlying allocation systems. The\n-//! `heap` module is considered the default heap, and is not necessarily backed\n-//! by libc malloc/free.  The `libc_heap` module is defined to be wired up to\n-//! the system malloc/free.\n+//! The [`heap`](heap/index.html) module defines the low-level interface to the\n+//! default global allocator. It is not compatible with the libc allocator API.\n \n #![crate_name = \"alloc\"]\n #![experimental]\n@@ -90,7 +87,6 @@ pub use boxed as owned;\n // Heaps provided for low-level allocation strategies\n \n pub mod heap;\n-pub mod libc_heap;\n \n // Primitive types using the heaps above\n "}, {"sha": "4f6400630fd9c14aceb5e963c01c1d26c3020db9", "filename": "src/liballoc/libc_heap.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336/src%2Fliballoc%2Flibc_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336/src%2Fliballoc%2Flibc_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flibc_heap.rs?ref=80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-//! The global (exchange) heap.\n-\n-use libc::{c_void, size_t, free, malloc, realloc};\n-use core::ptr::{RawPtr, null_mut};\n-\n-/// A wrapper around libc::malloc, aborting on out-of-memory.\n-#[inline]\n-pub unsafe fn malloc_raw(size: uint) -> *mut u8 {\n-    // `malloc(0)` may allocate, but it may also return a null pointer\n-    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html\n-    if size == 0 {\n-        null_mut()\n-    } else {\n-        let p = malloc(size as size_t);\n-        if p.is_null() {\n-            ::oom();\n-        }\n-        p as *mut u8\n-    }\n-}\n-\n-/// A wrapper around libc::realloc, aborting on out-of-memory.\n-#[inline]\n-pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 {\n-    // `realloc(ptr, 0)` may allocate, but it may also return a null pointer\n-    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/realloc.html\n-    if size == 0 {\n-        free(ptr as *mut c_void);\n-        null_mut()\n-    } else {\n-        let p = realloc(ptr as *mut c_void, size as size_t);\n-        if p.is_null() {\n-            ::oom();\n-        }\n-        p as *mut u8\n-    }\n-}"}, {"sha": "6a33777a413c5d5fa8394c47e18271095b913856", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -71,7 +71,6 @@ fn main() {\n \n */\n \n-use alloc::libc_heap::malloc_raw;\n use collections::string::String;\n use collections::hash;\n use core::fmt;\n@@ -101,7 +100,8 @@ impl Clone for CString {\n     /// with C's allocator API, rather than the usual shallow clone.\n     fn clone(&self) -> CString {\n         let len = self.len() + 1;\n-        let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n+        let buf = unsafe { libc::malloc(len as libc::size_t) } as *mut libc::c_char;\n+        if buf.is_null() { fail!(\"out of memory\") }\n         unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, len); }\n         CString { buf: buf as *const libc::c_char, owns_buffer_: true }\n     }\n@@ -393,7 +393,8 @@ impl<'a> ToCStr for &'a [u8] {\n \n     unsafe fn to_c_str_unchecked(&self) -> CString {\n         let self_len = self.len();\n-        let buf = malloc_raw(self_len + 1);\n+        let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n+        if buf.is_null() { fail!(\"out of memory\") }\n \n         ptr::copy_memory(buf, self.as_ptr(), self_len);\n         *buf.offset(self_len as int) = 0;"}, {"sha": "838dfd6b7abe6b5807dfc0e6e5df06b5ebae1743", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -516,7 +516,7 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    use alloc::libc_heap::malloc_raw;\n+    use alloc::heap;\n     use core::atomic;\n     use core::ptr;\n     use libc::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES, c_void, DWORD, LPCSTR};\n@@ -607,7 +607,7 @@ mod imp {\n     }\n \n     pub unsafe fn init_lock() -> uint {\n-        let block = malloc_raw(CRIT_SECTION_SIZE as uint) as *mut c_void;\n+        let block = heap::allocate(CRIT_SECTION_SIZE, 8) as *mut c_void;\n         InitializeCriticalSectionAndSpinCount(block, SPIN_COUNT);\n         return block as uint;\n     }\n@@ -619,7 +619,7 @@ mod imp {\n \n     pub unsafe fn free_lock(h: uint) {\n         DeleteCriticalSection(h as LPCRITICAL_SECTION);\n-        libc::free(h as *mut c_void);\n+        heap::deallocate(h as *mut u8, CRIT_SECTION_SIZE, 8);\n     }\n \n     pub unsafe fn free_cond(h: uint) {"}, {"sha": "7ec25acb17308af454bb12f65c99d1ec08bc667d", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -165,11 +165,11 @@ mod tests {\n     use super::CVec;\n     use libc;\n     use ptr;\n-    use rt::libc_heap::malloc_raw;\n \n     fn malloc(n: uint) -> CVec<u8> {\n         unsafe {\n-            let mem = malloc_raw(n);\n+            let mem = libc::malloc(n as libc::size_t);\n+            if mem.is_null() { fail!(\"out of memory\") }\n \n             CVec::new_with_dtor(mem as *mut u8, n,\n                 proc() { libc::free(mem as *mut libc::c_void); })"}, {"sha": "a91c6c572e686c0f8ff073b342846f8c3a9b08ce", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f168c12c5629afd45c9b3ed250350bf830b99642/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=f168c12c5629afd45c9b3ed250350bf830b99642", "patch": "@@ -62,7 +62,7 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n \n // Reexport functionality from librustrt and other crates underneath the\n // standard library which work together to create the entire runtime.\n-pub use alloc::{heap, libc_heap};\n+pub use alloc::heap;\n pub use rustrt::{task, local, mutex, exclusive, stack, args, rtio, thread};\n pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n pub use rustrt::{bookkeeping, at_exit, unwind, DEFAULT_ERROR_CODE, Runtime};"}]}