{"sha": "01162d86c533cfb08221bb9475042ca94d1fd002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTYyZDg2YzUzM2NmYjA4MjIxYmI5NDc1MDQyY2E5NGQxZmQwMDI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-26T04:12:53Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-26T17:13:48Z"}, "message": "Implement useful steps_between for all integers\n\nWe can use `usize::try_from` to convert steps from any size of integer.\nThis enables a meaningful `size_hint()` for larger ranges, rather than\nalways just `(0, None)`. Now they return the true `(len, Some(len))`\nwhen it fits, otherwise `(usize::MAX, None)` for overflow.", "tree": {"sha": "e6f0ab70e4169ddb797700643a2debfad846c44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f0ab70e4169ddb797700643a2debfad846c44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01162d86c533cfb08221bb9475042ca94d1fd002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01162d86c533cfb08221bb9475042ca94d1fd002", "html_url": "https://github.com/rust-lang/rust/commit/01162d86c533cfb08221bb9475042ca94d1fd002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01162d86c533cfb08221bb9475042ca94d1fd002/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d91b32b4dc9db066ab7deedbc51dc62ba597524b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91b32b4dc9db066ab7deedbc51dc62ba597524b", "html_url": "https://github.com/rust-lang/rust/commit/d91b32b4dc9db066ab7deedbc51dc62ba597524b"}], "stats": {"total": 106, "additions": 57, "deletions": 49}, "files": [{"sha": "145fde0350e682ad8ca08b78044c9d72d33e615b", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 8, "deletions": 49, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/01162d86c533cfb08221bb9475042ca94d1fd002/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01162d86c533cfb08221bb9475042ca94d1fd002/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=01162d86c533cfb08221bb9475042ca94d1fd002", "patch": "@@ -68,11 +68,9 @@ macro_rules! step_impl_unsigned {\n                    issue = \"42168\")]\n         impl Step for $t {\n             #[inline]\n-            #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t) -> Option<usize> {\n                 if *start < *end {\n-                    // Note: We assume $t <= usize here\n-                    Some((*end - *start) as usize)\n+                    usize::try_from(*end - *start).ok()\n                 } else {\n                     Some(0)\n                 }\n@@ -98,13 +96,11 @@ macro_rules! step_impl_signed {\n                    issue = \"42168\")]\n         impl Step for $t {\n             #[inline]\n-            #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t) -> Option<usize> {\n                 if *start < *end {\n-                    // Note: We assume $t <= isize here\n-                    // Use .wrapping_sub and cast to usize to compute the\n-                    // difference that may not fit inside the range of isize.\n-                    Some((*end as isize).wrapping_sub(*start as isize) as usize)\n+                    // Use .wrapping_sub and cast to unsigned to compute the\n+                    // difference that may not fit inside the range of $t.\n+                    usize::try_from(end.wrapping_sub(*start) as $unsigned).ok()\n                 } else {\n                     Some(0)\n                 }\n@@ -134,46 +130,9 @@ macro_rules! step_impl_signed {\n     )*)\n }\n \n-macro_rules! step_impl_no_between {\n-    ($($t:ty)*) => ($(\n-        #[unstable(feature = \"step_trait\",\n-                   reason = \"likely to be replaced by finer-grained traits\",\n-                   issue = \"42168\")]\n-        impl Step for $t {\n-            #[inline]\n-            fn steps_between(_start: &Self, _end: &Self) -> Option<usize> {\n-                None\n-            }\n-\n-            #[inline]\n-            fn add_usize(&self, n: usize) -> Option<Self> {\n-                self.checked_add(n as $t)\n-            }\n-\n-            step_identical_methods!();\n-        }\n-    )*)\n-}\n-\n-step_impl_unsigned!(usize u8 u16);\n-#[cfg(not(target_pointer_width = \"16\"))]\n-step_impl_unsigned!(u32);\n-#[cfg(target_pointer_width = \"16\")]\n-step_impl_no_between!(u32);\n+step_impl_unsigned!(usize u8 u16 u32 u64 u128);\n step_impl_signed!([isize: usize] [i8: u8] [i16: u16]);\n-#[cfg(not(target_pointer_width = \"16\"))]\n-step_impl_signed!([i32: u32]);\n-#[cfg(target_pointer_width = \"16\")]\n-step_impl_no_between!(i32);\n-#[cfg(target_pointer_width = \"64\")]\n-step_impl_unsigned!(u64);\n-#[cfg(target_pointer_width = \"64\")]\n-step_impl_signed!([i64: u64]);\n-// If the target pointer width is not 64-bits, we\n-// assume here that it is less than 64-bits.\n-#[cfg(not(target_pointer_width = \"64\"))]\n-step_impl_no_between!(u64 i64);\n-step_impl_no_between!(u128 i128);\n+step_impl_signed!([i32: u32] [i64: u64] [i128: u128]);\n \n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n@@ -229,7 +188,7 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         match Step::steps_between(&self.start, &self.end) {\n             Some(hint) => (hint, Some(hint)),\n-            None => (0, None)\n+            None => (usize::MAX, None)\n         }\n     }\n \n@@ -350,7 +309,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n         match Step::steps_between(&self.start, &self.end) {\n             Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n-            None => (0, None),\n+            None => (usize::MAX, None),\n         }\n     }\n "}, {"sha": "bcf0b7ec46318b6144e37968430c0da062c29470", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/01162d86c533cfb08221bb9475042ca94d1fd002/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01162d86c533cfb08221bb9475042ca94d1fd002/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=01162d86c533cfb08221bb9475042ca94d1fd002", "patch": "@@ -1,4 +1,5 @@\n use core::cell::Cell;\n+use core::convert::TryFrom;\n use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n@@ -1800,6 +1801,54 @@ fn test_range_inclusive_folds() {\n     assert!(it.is_empty());\n }\n \n+#[test]\n+fn test_range_size_hint() {\n+    use core::usize::MAX as UMAX;\n+    assert_eq!((0..100usize).size_hint(), (100, Some(100)));\n+    assert_eq!((0..UMAX).size_hint(), (UMAX, Some(UMAX)));\n+\n+    let umax = u128::try_from(UMAX).unwrap();\n+    assert_eq!((0..100u128).size_hint(), (100, Some(100)));\n+    assert_eq!((0..umax).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..umax + 1).size_hint(), (UMAX, None));\n+\n+    use core::isize::{MAX as IMAX, MIN as IMIN};\n+    assert_eq!((-100..100isize).size_hint(), (200, Some(200)));\n+    assert_eq!((IMIN..IMAX).size_hint(), (UMAX, Some(UMAX)));\n+\n+    let imin = i128::try_from(IMIN).unwrap();\n+    let imax = i128::try_from(IMAX).unwrap();\n+    assert_eq!((-100..100i128).size_hint(), (200, Some(200)));\n+    assert_eq!((imin..imax).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((imin..imax + 1).size_hint(), (UMAX, None));\n+}\n+\n+#[test]\n+fn test_range_inclusive_size_hint() {\n+    use core::usize::MAX as UMAX;\n+    assert_eq!((0..=100usize).size_hint(), (101, Some(101)));\n+    assert_eq!((0..=UMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..=UMAX).size_hint(), (UMAX, None));\n+\n+    let umax = u128::try_from(UMAX).unwrap();\n+    assert_eq!((0..=100u128).size_hint(), (101, Some(101)));\n+    assert_eq!((0..=umax - 1).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..=umax).size_hint(), (UMAX, None));\n+    assert_eq!((0..=umax + 1).size_hint(), (UMAX, None));\n+\n+    use core::isize::{MAX as IMAX, MIN as IMIN};\n+    assert_eq!((-100..=100isize).size_hint(), (201, Some(201)));\n+    assert_eq!((IMIN..=IMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((IMIN..=IMAX).size_hint(), (UMAX, None));\n+\n+    let imin = i128::try_from(IMIN).unwrap();\n+    let imax = i128::try_from(IMAX).unwrap();\n+    assert_eq!((-100..=100i128).size_hint(), (201, Some(201)));\n+    assert_eq!((imin..=imax - 1).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((imin..=imax).size_hint(), (UMAX, None));\n+    assert_eq!((imin..=imax + 1).size_hint(), (UMAX, None));\n+}\n+\n #[test]\n fn test_repeat() {\n     let mut it = repeat(42);"}]}