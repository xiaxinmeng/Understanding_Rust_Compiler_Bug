{"sha": "8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNDNmYTA5ODkzYjY2NGU0Y2ViNGNjOGM3ODE1ZmE1YWIyMGMxMGU=", "commit": {"author": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2020-09-09T18:39:48Z"}, "committer": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2020-09-09T18:39:48Z"}, "message": "Add WeakInner<'_> and have Weak::inner() return it\n\nThis avoids overlapping a reference covering the data field,\nwhich may be changed due in concurrent conditions. This fully\nfixed the UB mainfested with `new_cyclic`.", "tree": {"sha": "209b6a7559a512d6a2f96621026a2a1d6993e5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209b6a7559a512d6a2f96621026a2a1d6993e5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e", "html_url": "https://github.com/rust-lang/rust/commit/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e/comments", "author": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493c037699603388a00010d96339d84e84e361c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/493c037699603388a00010d96339d84e84e361c6", "html_url": "https://github.com/rust-lang/rust/commit/493c037699603388a00010d96339d84e84e361c6"}], "stats": {"total": 109, "additions": 70, "deletions": 39}, "files": [{"sha": "43cf3fe6fb6ac9fddfc8139344cc6436be1766ec", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=8f43fa09893b664e4ceb4cc8c7815fa5ab20c10e", "patch": "@@ -469,7 +469,7 @@ impl<T> Rc<T> {\n                 // the strong count, and then remove the implicit \"strong weak\"\n                 // pointer while also handling drop logic by just crafting a\n                 // fake Weak.\n-                this.dec_strong();\n+                this.inner().dec_strong();\n                 let _weak = Weak { ptr: this.ptr };\n                 forget(this);\n                 Ok(val)\n@@ -735,7 +735,7 @@ impl<T: ?Sized> Rc<T> {\n     /// ```\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n-        this.inc_weak();\n+        this.inner().inc_weak();\n         // Make sure we do not create a dangling Weak\n         debug_assert!(!is_dangling(this.ptr));\n         Weak { ptr: this.ptr }\n@@ -756,7 +756,7 @@ impl<T: ?Sized> Rc<T> {\n     #[inline]\n     #[stable(feature = \"rc_counts\", since = \"1.15.0\")]\n     pub fn weak_count(this: &Self) -> usize {\n-        this.weak() - 1\n+        this.inner().weak() - 1\n     }\n \n     /// Gets the number of strong (`Rc`) pointers to this allocation.\n@@ -774,7 +774,7 @@ impl<T: ?Sized> Rc<T> {\n     #[inline]\n     #[stable(feature = \"rc_counts\", since = \"1.15.0\")]\n     pub fn strong_count(this: &Self) -> usize {\n-        this.strong()\n+        this.inner().strong()\n     }\n \n     /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to\n@@ -844,7 +844,16 @@ impl<T: ?Sized> Rc<T> {\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n-        unsafe { &mut this.ptr.as_mut().value }\n+        // We are careful to *not* create a reference covering the \"count\" fields, as\n+        // this would alias with reenterant access to the reference counts (e.g. by `Weak`).\n+        unsafe { &mut (*this.ptr.as_ptr()).value }\n+    }\n+\n+    #[inline]\n+    fn inner(&self) -> &RcBox<T> {\n+        // This unsafety is ok because while this Rc is alive we're guaranteed\n+        // that the inner pointer is valid.\n+        unsafe { self.ptr.as_ref() }\n     }\n \n     #[inline]\n@@ -931,10 +940,10 @@ impl<T: Clone> Rc<T> {\n             unsafe {\n                 let mut swap = Rc::new(ptr::read(&this.ptr.as_ref().value));\n                 mem::swap(this, &mut swap);\n-                swap.dec_strong();\n+                swap.inner().dec_strong();\n                 // Remove implicit strong-weak ref (no need to craft a fake\n                 // Weak here -- we know other Weaks can clean up for us)\n-                swap.dec_weak();\n+                swap.inner().dec_weak();\n                 forget(swap);\n             }\n         }\n@@ -1192,16 +1201,16 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            self.dec_strong();\n-            if self.strong() == 0 {\n+            self.inner().dec_strong();\n+            if self.inner().strong() == 0 {\n                 // destroy the contained object\n                 ptr::drop_in_place(Self::get_mut_unchecked(self));\n \n                 // remove the implicit \"strong weak\" pointer now that we've\n                 // destroyed the contents.\n-                self.dec_weak();\n+                self.inner().dec_weak();\n \n-                if self.weak() == 0 {\n+                if self.inner().weak() == 0 {\n                     Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));\n                 }\n             }\n@@ -1227,7 +1236,7 @@ impl<T: ?Sized> Clone for Rc<T> {\n     /// ```\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n-        self.inc_strong();\n+        self.inner().inc_strong();\n         Self::from_inner(self.ptr)\n     }\n }\n@@ -1851,6 +1860,13 @@ pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n     address == usize::MAX\n }\n \n+/// Helper type to allow accessing the reference counts without\n+/// making any assertions about the data field.\n+struct WeakInner<'a> {\n+    weak: &'a Cell<usize>,\n+    strong: &'a Cell<usize>,\n+}\n+\n impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n     /// dropping of the inner value if successful.\n@@ -1910,11 +1926,21 @@ impl<T: ?Sized> Weak<T> {\n             .unwrap_or(0)\n     }\n \n-    /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`\n+    /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n-    fn inner(&self) -> Option<&RcBox<T>> {\n-        if is_dangling(self.ptr) { None } else { Some(unsafe { self.ptr.as_ref() }) }\n+    fn inner(&self) -> Option<WeakInner<'_>> {\n+        if is_dangling(self.ptr) {\n+            None\n+        } else {\n+            // We are careful to *not* create a reference covering the \"data\" field, as\n+            // the field may be mutated concurrently (for example, if the last `Rc`\n+            // is dropped, the data field will be dropped in-place).\n+            Some(unsafe {\n+                let ptr = self.ptr.as_ptr();\n+                WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }\n+            })\n+        }\n     }\n \n     /// Returns `true` if the two `Weak`s point to the same allocation (similar to\n@@ -1992,14 +2018,14 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// assert!(other_weak_foo.upgrade().is_none());\n     /// ```\n     fn drop(&mut self) {\n-        if let Some(inner) = self.inner() {\n-            inner.dec_weak();\n-            // the weak count starts at 1, and will only go to zero if all\n-            // the strong pointers have disappeared.\n-            if inner.weak() == 0 {\n-                unsafe {\n-                    Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));\n-                }\n+        let inner = if let Some(inner) = self.inner() { inner } else { return };\n+        \n+        inner.dec_weak();\n+        // the weak count starts at 1, and will only go to zero if all\n+        // the strong pointers have disappeared.\n+        if inner.weak() == 0 {\n+            unsafe {\n+                Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));\n             }\n         }\n     }\n@@ -2065,12 +2091,13 @@ impl<T> Default for Weak<T> {\n // clone these much in Rust thanks to ownership and move-semantics.\n \n #[doc(hidden)]\n-trait RcBoxPtr<T: ?Sized> {\n-    fn inner(&self) -> &RcBox<T>;\n+trait RcInnerPtr {\n+    fn weak_ref(&self) -> &Cell<usize>;\n+    fn strong_ref(&self) -> &Cell<usize>;\n \n     #[inline]\n     fn strong(&self) -> usize {\n-        self.inner().strong.get()\n+        self.strong_ref().get()\n     }\n \n     #[inline]\n@@ -2084,17 +2111,17 @@ trait RcBoxPtr<T: ?Sized> {\n         if strong == 0 || strong == usize::MAX {\n             abort();\n         }\n-        self.inner().strong.set(strong + 1);\n+        self.strong_ref().set(strong + 1);\n     }\n \n     #[inline]\n     fn dec_strong(&self) {\n-        self.inner().strong.set(self.strong() - 1);\n+        self.strong_ref().set(self.strong() - 1);\n     }\n \n     #[inline]\n     fn weak(&self) -> usize {\n-        self.inner().weak.get()\n+        self.weak_ref().get()\n     }\n \n     #[inline]\n@@ -2108,26 +2135,30 @@ trait RcBoxPtr<T: ?Sized> {\n         if weak == 0 || weak == usize::MAX {\n             abort();\n         }\n-        self.inner().weak.set(weak + 1);\n+        self.weak_ref().set(weak + 1);\n     }\n \n     #[inline]\n     fn dec_weak(&self) {\n-        self.inner().weak.set(self.weak() - 1);\n+        self.weak_ref().set(self.weak() - 1);\n     }\n }\n \n-impl<T: ?Sized> RcBoxPtr<T> for Rc<T> {\n-    #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> {\n-        unsafe { self.ptr.as_ref() }\n+impl <T: ?Sized> RcInnerPtr for RcBox<T> {\n+    fn weak_ref(&self) -> &Cell<usize> {\n+        &self.weak\n+    }\n+    fn strong_ref(&self) -> &Cell<usize> {\n+        &self.strong\n     }\n }\n \n-impl<T: ?Sized> RcBoxPtr<T> for RcBox<T> {\n-    #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> {\n-        self\n+impl<'a> RcInnerPtr for WeakInner<'a> {\n+    fn weak_ref(&self) -> &Cell<usize> {\n+        self.weak\n+    }\n+    fn strong_ref(&self) -> &Cell<usize> {\n+        self.strong\n     }\n }\n "}]}