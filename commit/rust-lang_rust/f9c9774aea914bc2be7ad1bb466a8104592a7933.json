{"sha": "f9c9774aea914bc2be7ad1bb466a8104592a7933", "node_id": "C_kwDOAAsO6NoAKGY5Yzk3NzRhZWE5MTRiYzJiZTdhZDFiYjQ2NmE4MTA0NTkyYTc5MzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-14T14:06:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-14T14:06:43Z"}, "message": "Rollup merge of #89390 - tmandry:issue-72117, r=estebank\n\nFix incorrect Box::pin suggestion\n\nThe suggestion checked if `Pin<Box<T>>` could be coeerced to the expected\ntype, but did not check predicates created by the coercion. We now\nlook for predicates that definitely cannot be satisfied before giving\nthe suggestion.\n\nThe suggestion is still marked MaybeIncorrect because we allow predicates that\nare still ambiguous and can't be proven.\n\nFixes #72117.", "tree": {"sha": "c5ad82823424d658d32b96dc63f2eaba2276a80b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ad82823424d658d32b96dc63f2eaba2276a80b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c9774aea914bc2be7ad1bb466a8104592a7933", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaDlzCRBK7hj4Ov3rIwAAufoIAITiRxIEW4uVFxGQ60IEt6ns\nedCzDEwoqwNWF8BHSloXDNlyslvWSqprjV+mgYnD+NwfrIofD1+c5/ztz7/4ErZC\njAoTy82KuRN+PtglP8qc1NQy6gefmV0gtUYyjqOFp85Dt80xJ2uTT5jIXJPOgksi\nfgSR8LpskhusrA0aY19zvInZxFKVzOCvH3jDv6leZ5B8IUQzx/FNV46fGuVHfIDR\nxQETeMk8iEiMHfqN1SBkdQCsvtZPu9flPSdu1g0k8wAb7VMzt5AhLy//XiLrYBCs\nVXCZH8GsHYC64XsNlKQiscZ8KLXbcOChUqtad0PGTIArtPoIhoZypaD5E3/sAY8=\n=OIzT\n-----END PGP SIGNATURE-----\n", "payload": "tree c5ad82823424d658d32b96dc63f2eaba2276a80b\nparent c34ac8747ca96d09cb08b8f5adddead826e77c06\nparent a8558e9efabc6640e8c1b1c353e62c233624f616\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634220403 +0200\ncommitter GitHub <noreply@github.com> 1634220403 +0200\n\nRollup merge of #89390 - tmandry:issue-72117, r=estebank\n\nFix incorrect Box::pin suggestion\n\nThe suggestion checked if `Pin<Box<T>>` could be coeerced to the expected\ntype, but did not check predicates created by the coercion. We now\nlook for predicates that definitely cannot be satisfied before giving\nthe suggestion.\n\nThe suggestion is still marked MaybeIncorrect because we allow predicates that\nare still ambiguous and can't be proven.\n\nFixes #72117.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c9774aea914bc2be7ad1bb466a8104592a7933", "html_url": "https://github.com/rust-lang/rust/commit/f9c9774aea914bc2be7ad1bb466a8104592a7933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c9774aea914bc2be7ad1bb466a8104592a7933/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34ac8747ca96d09cb08b8f5adddead826e77c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34ac8747ca96d09cb08b8f5adddead826e77c06", "html_url": "https://github.com/rust-lang/rust/commit/c34ac8747ca96d09cb08b8f5adddead826e77c06"}, {"sha": "a8558e9efabc6640e8c1b1c353e62c233624f616", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8558e9efabc6640e8c1b1c353e62c233624f616", "html_url": "https://github.com/rust-lang/rust/commit/a8558e9efabc6640e8c1b1c353e62c233624f616"}], "stats": {"total": 113, "additions": 85, "deletions": 28}, "files": [{"sha": "a87318ff34e6dc0a20d1e8718e6d262350a15c94", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -42,7 +42,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n-use rustc_infer::traits::Obligation;\n+use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -146,6 +146,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))\n     }\n \n+    #[instrument(skip(self))]\n     fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n         // First, remove any resolved type variables (at the top level, at least):\n         let a = self.shallow_resolve(a);\n@@ -933,14 +934,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n+    ///\n+    /// Returns false if the coercion creates any obligations that result in\n+    /// errors.\n     pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n         let source = self.resolve_vars_with_obligations(expr_ty);\n-        debug!(\"coercion::can({:?} -> {:?})\", source, target);\n+        debug!(\"coercion::can_with_predicates({:?} -> {:?})\", source, target);\n \n         let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n         // We don't ever need two-phase here since we throw out the result of the coercion\n         let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n-        self.probe(|_| coerce.coerce(source, target)).is_ok()\n+        self.probe(|_| {\n+            let ok = match coerce.coerce(source, target) {\n+                Ok(ok) => ok,\n+                _ => return false,\n+            };\n+            let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n+            fcx.register_predicate_obligations(self, ok.obligations);\n+            fcx.select_where_possible(&self).is_ok()\n+        })\n     }\n \n     /// Given a type and a target type, this function will calculate and return"}, {"sha": "339c46616a590b944c01528381c3b174a1b299f5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -341,7 +341,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for (sp, label) in spans_and_labels {\n                     multi_span.push_span_label(sp, label);\n                 }\n-                err.span_note(multi_span, \"closures can only be coerced to `fn` types if they do not capture any variables\");\n+                err.span_note(\n+                    multi_span,\n+                    \"closures can only be coerced to `fn` types if they do not capture any variables\"\n+                );\n             }\n         }\n     }\n@@ -361,15 +364,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n         let pin_did = self.tcx.lang_items().pin_type();\n+        // This guards the `unwrap` and `mk_box` below.\n+        if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() {\n+            return false;\n+        }\n         match expected.kind() {\n-            ty::Adt(def, _) if Some(def.did) != pin_did => return false,\n-            // This guards the `unwrap` and `mk_box` below.\n-            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return false,\n-            _ => {}\n+            ty::Adt(def, _) if Some(def.did) == pin_did => (),\n+            _ => return false,\n         }\n-        let boxed_found = self.tcx.mk_box(found);\n-        let new_found = self.tcx.mk_lang_item(boxed_found, LangItem::Pin).unwrap();\n-        if self.can_coerce(new_found, expected) {\n+        let box_found = self.tcx.mk_box(found);\n+        let pin_box_found = self.tcx.mk_lang_item(box_found, LangItem::Pin).unwrap();\n+        let pin_found = self.tcx.mk_lang_item(found, LangItem::Pin).unwrap();\n+        if self.can_coerce(pin_box_found, expected) {\n+            debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n                     err.help(\"use `Box::pin`\");\n@@ -381,11 +388,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n                         ],\n-                        Applicability::MachineApplicable,\n+                        Applicability::MaybeIncorrect,\n                     );\n                 }\n             }\n             true\n+        } else if self.can_coerce(pin_found, expected) {\n+            match found.kind() {\n+                ty::Adt(def, _) if def.is_box() => {\n+                    err.help(\"use `Box::pin`\");\n+                    true\n+                }\n+                _ => false,\n+            }\n         } else {\n             false\n         }"}, {"sha": "81f309eae087c9755687a1dc426efa5c6e535528", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |             ----------   ^\n-   |             |            |\n-   |             |            expected `&dyn Trait`, found struct `Box`\n-   |             |            help: consider borrowing here: `&x`\n+   |             ----------   ^ expected `&dyn Trait`, found struct `Box`\n+   |             |\n    |             expected due to this\n    |\n    = note: expected reference `&dyn Trait`"}, {"sha": "01f862ed516e9d9ef25735436c67c6e8891cc65b", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -13,10 +13,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`\n@@ -37,10 +35,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`"}, {"sha": "d49819fcb14cfe9832d853e6c37e2a5b2dbd0a55", "filename": "src/test/ui/suggestions/box-future-wrong-output.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -0,0 +1,22 @@\n+// Issue #72117\n+// edition:2018\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+\n+pub type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+\n+impl<T: ?Sized> FutureExt for T where T: Future {}\n+trait FutureExt: Future {\n+    fn boxed<'a>(self) -> BoxFuture<'a, Self::Output>\n+    where\n+        Self: Sized + Send + 'a,\n+    {\n+        Box::pin(self)\n+    }\n+}\n+\n+fn main() {\n+    let _: BoxFuture<'static, bool> = async {}.boxed();\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "e0c57af25b3d2c4cc52fb52eaa74c037bfef3e64", "filename": "src/test/ui/suggestions/box-future-wrong-output.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/box-future-wrong-output.rs:20:39\n+   |\n+LL |     let _: BoxFuture<'static, bool> = async {}.boxed();\n+   |            ------------------------   ^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Pin<Box<(dyn Future<Output = bool> + Send + 'static)>>`\n+              found struct `Pin<Box<dyn Future<Output = ()> + Send>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "89a36e89b0acf513c92f6588b5e4323aae4b4d79", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -11,13 +11,13 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-// This case is still subpar:\n-// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n-// Should suggest changing the code from `Pin::new` to `Box::pin`.\n fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Box::new(x) //~ ERROR mismatched types\n }\n \n+// This case is still subpar:\n+// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n+// Should suggest changing the code from `Pin::new` to `Box::pin`.\n fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Pin::new(x) //~ ERROR mismatched types\n     //~^ ERROR E0277"}, {"sha": "f0af37e0cbe8af7e47f7b276e0ceb804c04a9dcf", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9774aea914bc2be7ad1bb466a8104592a7933/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=f9c9774aea914bc2be7ad1bb466a8104592a7933", "patch": "@@ -15,7 +15,7 @@ LL |     Box::pin(x)\n    |     +++++++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:15:5\n    |\n LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |                                                         ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type"}]}