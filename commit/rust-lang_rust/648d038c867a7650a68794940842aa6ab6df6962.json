{"sha": "648d038c867a7650a68794940842aa6ab6df6962", "node_id": "C_kwDOAAsO6NoAKDY0OGQwMzhjODY3YTc2NTBhNjg3OTQ5NDA4NDJhYTZhYjZkZjY5NjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-24T12:28:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-24T12:28:19Z"}, "message": "Auto merge of #94123 - bjorn3:cg_ssa_singleton_builder, r=tmiasko\n\nPartially move cg_ssa towards using a single builder\n\nNot all codegen backends can handle hopping between blocks well. For example Cranelift requires blocks to be terminated before switching to building a new block. Rust-gpu requires a `RefCell` to allow hopping between blocks and cg_gcc currently has a buggy implementation of hopping between blocks. This PR reduces the amount of cases where cg_ssa switches between blocks before they are finished and mostly fixes the block hopping in cg_gcc. (~~only `scalar_to_backend` doesn't handle it correctly yet in cg_gcc~~ fixed that one.)\n\n`@antoyo` please review the cg_gcc changes.", "tree": {"sha": "f34d7f10fd2d84cb6c76785f16e22f67eba6345e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f34d7f10fd2d84cb6c76785f16e22f67eba6345e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648d038c867a7650a68794940842aa6ab6df6962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648d038c867a7650a68794940842aa6ab6df6962", "html_url": "https://github.com/rust-lang/rust/commit/648d038c867a7650a68794940842aa6ab6df6962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648d038c867a7650a68794940842aa6ab6df6962/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e855e2d15c8fcb4d6b9ffddb5f408acf008cc96f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e855e2d15c8fcb4d6b9ffddb5f408acf008cc96f", "html_url": "https://github.com/rust-lang/rust/commit/e855e2d15c8fcb4d6b9ffddb5f408acf008cc96f"}, {"sha": "18c34e41a40f0d4ae531211364d81c47867d9067", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c34e41a40f0d4ae531211364d81c47867d9067", "html_url": "https://github.com/rust-lang/rust/commit/18c34e41a40f0d4ae531211364d81c47867d9067"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "b430dc329cb9aacc7f79bd1a4a9f4bca4259b1eb", "filename": "src/builder.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/648d038c867a7650a68794940842aa6ab6df6962/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d038c867a7650a68794940842aa6ab6df6962/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=648d038c867a7650a68794940842aa6ab6df6962", "patch": "@@ -390,11 +390,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         bx\n     }\n \n-    fn build_sibling_block(&mut self, name: &str) -> Self {\n-        let block = self.append_sibling_block(name);\n-        Self::build(self.cx, block)\n-    }\n-\n     fn llbb(&self) -> Block<'gcc> {\n         self.block.expect(\"block\")\n     }\n@@ -409,6 +404,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         func.new_block(name)\n     }\n \n+    fn switch_to_block(&mut self, block: Self::BasicBlock) {\n+        *self.cx.current_block.borrow_mut() = Some(block);\n+        self.block = Some(block);\n+    }\n+\n     fn ret_void(&mut self) {\n         self.llbb().end_with_void_return(None)\n     }\n@@ -880,28 +880,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let start = dest.project_index(&mut self, zero).llval;\n         let end = dest.project_index(&mut self, count).llval;\n \n-        let mut header_bx = self.build_sibling_block(\"repeat_loop_header\");\n-        let mut body_bx = self.build_sibling_block(\"repeat_loop_body\");\n-        let next_bx = self.build_sibling_block(\"repeat_loop_next\");\n+        let header_bb = self.append_sibling_block(\"repeat_loop_header\");\n+        let body_bb = self.append_sibling_block(\"repeat_loop_body\");\n+        let next_bb = self.append_sibling_block(\"repeat_loop_next\");\n \n         let ptr_type = start.get_type();\n         let current = self.llbb().get_function().new_local(None, ptr_type, \"loop_var\");\n         let current_val = current.to_rvalue();\n         self.assign(current, start);\n \n-        self.br(header_bx.llbb());\n+        self.br(header_bb);\n \n-        let keep_going = header_bx.icmp(IntPredicate::IntNE, current_val, end);\n-        header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n+        self.switch_to_block(header_bb);\n+        let keep_going = self.icmp(IntPredicate::IntNE, current_val, end);\n+        self.cond_br(keep_going, body_bb, next_bb);\n \n+        self.switch_to_block(body_bb);\n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n-        cg_elem.val.store(&mut body_bx, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n+        cg_elem.val.store(&mut self, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n \n-        let next = body_bx.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n-        body_bx.llbb().add_assignment(None, current, next);\n-        body_bx.br(header_bx.llbb());\n+        let next = self.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n+        self.llbb().add_assignment(None, current, next);\n+        self.br(header_bb);\n \n-        next_bx\n+        self.switch_to_block(next_bb);\n+        self\n     }\n \n     fn range_metadata(&mut self, _load: RValue<'gcc>, _range: WrappingRange) {"}]}