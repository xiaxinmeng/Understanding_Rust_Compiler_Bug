{"sha": "5b6795f50b521b11393d39f823d8a3e5b262b134", "node_id": "C_kwDOAAsO6NoAKDViNjc5NWY1MGI1MjFiMTEzOTNkMzlmODIzZDhhM2U1YjI2MmIxMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T15:15:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T15:15:54Z"}, "message": "Auto merge of #10338 - mkrasnitski:synthetic-params, r=flip1995\n\nIgnore synthetic type parameters for `extra_unused_type_parameters`\n\nThere was a minor bug around calculating spans when forming the help message. An example:\n\n```rust\nfn unused_opaque<A, B>(dummy: impl Default) {}\n//               ^^ ^\n```\n\nIn this case, the entire list of generics should be highlighted, instead of each individual parameter. The culprit is the `impl Default`, which registers as a type parameter but doesn't live within the `<...>`. Because synthetic parameters can't ever be manually created, we just ignore them for this lint.\n\nr? `@flip1995`\nchangelog: none\n<!-- changelog_checked -->", "tree": {"sha": "0583893b1a43381f82acfb6da442267075ff0e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0583893b1a43381f82acfb6da442267075ff0e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b6795f50b521b11393d39f823d8a3e5b262b134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6795f50b521b11393d39f823d8a3e5b262b134", "html_url": "https://github.com/rust-lang/rust/commit/5b6795f50b521b11393d39f823d8a3e5b262b134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b6795f50b521b11393d39f823d8a3e5b262b134/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595f783f2212a551fe513c05922d4eda0b8bda7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/595f783f2212a551fe513c05922d4eda0b8bda7b", "html_url": "https://github.com/rust-lang/rust/commit/595f783f2212a551fe513c05922d4eda0b8bda7b"}, {"sha": "1ee4651ca1c31b39f106079e7546a47d00a3d945", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee4651ca1c31b39f106079e7546a47d00a3d945", "html_url": "https://github.com/rust-lang/rust/commit/1ee4651ca1c31b39f106079e7546a47d00a3d945"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "040473c9ffc6230f64c35de4c0e4880cec54a077", "filename": "clippy_lints/src/extra_unused_type_parameters.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b6795f50b521b11393d39f823d8a3e5b262b134/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6795f50b521b11393d39f823d8a3e5b262b134/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs?ref=5b6795f50b521b11393d39f823d8a3e5b262b134", "patch": "@@ -23,7 +23,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // unused type parameters\n     /// fn unused_ty<T>(x: u8) {\n     ///     // ..\n     /// }\n@@ -45,7 +44,7 @@ declare_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n /// trait bounds those parameters have.\n struct TypeWalker<'cx, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n-    /// Collection of all the type parameters and their spans.\n+    /// Collection of all the function's type parameters.\n     ty_params: FxHashMap<DefId, Span>,\n     /// Collection of any (inline) trait bounds corresponding to each type parameter.\n     bounds: FxHashMap<DefId, Span>,\n@@ -69,8 +68,8 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n             .params\n             .iter()\n             .filter_map(|param| {\n-                if let GenericParamKind::Type { .. } = param.kind {\n-                    Some((param.def_id.into(), param.span))\n+                if let GenericParamKind::Type { synthetic, .. } = param.kind {\n+                    (!synthetic).then_some((param.def_id.into(), param.span))\n                 } else {\n                     if !param.is_elided_lifetime() {\n                         all_params_unused = false;"}, {"sha": "2894fda2f4717ae56389ddce713b5da525693abb", "filename": "tests/ui/extra_unused_type_parameters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b6795f50b521b11393d39f823d8a3e5b262b134/tests%2Fui%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6795f50b521b11393d39f823d8a3e5b262b134/tests%2Fui%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.rs?ref=5b6795f50b521b11393d39f823d8a3e5b262b134", "patch": "@@ -71,6 +71,8 @@ where\n         .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n }\n \n+fn unused_opaque<A, B>(dummy: impl Default) {}\n+\n mod issue10319 {\n     fn assert_send<T: Send>() {}\n "}, {"sha": "aea3ee310f7dddcf1a8df5dd5a0a87fd3abeb50f", "filename": "tests/ui/extra_unused_type_parameters.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b6795f50b521b11393d39f823d8a3e5b262b134/tests%2Fui%2Fextra_unused_type_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6795f50b521b11393d39f823d8a3e5b262b134/tests%2Fui%2Fextra_unused_type_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.stderr?ref=5b6795f50b521b11393d39f823d8a3e5b262b134", "patch": "@@ -55,5 +55,13 @@ LL |     fn unused_ty_impl<T>(&self) {}\n    |\n    = help: consider removing the parameter\n \n-error: aborting due to 7 previous errors\n+error: type parameters go unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:74:17\n+   |\n+LL | fn unused_opaque<A, B>(dummy: impl Default) {}\n+   |                 ^^^^^^\n+   |\n+   = help: consider removing the parameters\n+\n+error: aborting due to 8 previous errors\n "}]}