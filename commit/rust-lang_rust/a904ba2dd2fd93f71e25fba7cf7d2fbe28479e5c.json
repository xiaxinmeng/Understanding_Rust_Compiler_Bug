{"sha": "a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDRiYTJkZDJmZDkzZjcxZTI1ZmJhN2NmN2QyZmJlMjg0NzllNWM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-28T15:58:47Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-06T00:30:53Z"}, "message": "Refactor away `ParsePub` and make errors for unnecessary visibility qualifiers consistent", "tree": {"sha": "75dd47ded15a1392b5778b3b3394d952bd33022a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75dd47ded15a1392b5778b3b3394d952bd33022a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c", "html_url": "https://github.com/rust-lang/rust/commit/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3029e0918de00162932132a7972e566f3a3372f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3029e0918de00162932132a7972e566f3a3372f5", "html_url": "https://github.com/rust-lang/rust/commit/3029e0918de00162932132a7972e566f3a3372f5"}], "stats": {"total": 44, "additions": 10, "deletions": 34}, "files": [{"sha": "5e5991bfebfb62110dda55d8ff47f23be465f072", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a904ba2dd2fd93f71e25fba7cf7d2fbe28479e5c", "patch": "@@ -99,13 +99,6 @@ pub enum BoundParsingMode {\n     Modified,\n }\n \n-/// `pub` should be parsed in struct fields and not parsed in variant fields\n-#[derive(Clone, Copy, PartialEq)]\n-pub enum ParsePub {\n-    Yes,\n-    No,\n-}\n-\n #[derive(Clone, Copy, PartialEq)]\n pub enum SemiColonMode {\n     Break,\n@@ -5093,20 +5086,17 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n-                                    ast::DUMMY_NODE_ID)\n+                VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n-                                ast::DUMMY_NODE_ID)\n+            VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::Yes)),\n-                                          ast::DUMMY_NODE_ID);\n+            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body()), ast::DUMMY_NODE_ID);\n             generics.where_clause = try!(self.parse_where_clause());\n             try!(self.expect(&token::Semi));\n             body\n@@ -5119,13 +5109,11 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Struct(vdata, generics), None))\n     }\n \n-    pub fn parse_record_struct_body(&mut self,\n-                                    parse_pub: ParsePub)\n-                                    -> PResult<'a, Vec<StructField>> {\n+    pub fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         let mut fields = Vec::new();\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(try!(self.parse_struct_decl_field(parse_pub)));\n+                fields.push(try!(self.parse_struct_decl_field()));\n             }\n \n             self.bump();\n@@ -5139,9 +5127,7 @@ impl<'a> Parser<'a> {\n         Ok(fields)\n     }\n \n-    pub fn parse_tuple_struct_body(&mut self,\n-                                   parse_pub: ParsePub)\n-                                   -> PResult<'a, Vec<StructField>> {\n+    pub fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         let fields = try!(self.parse_unspanned_seq(\n@@ -5152,13 +5138,7 @@ impl<'a> Parser<'a> {\n                 let attrs = try!(p.parse_outer_attributes());\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n-                    kind: UnnamedField (\n-                        if parse_pub == ParsePub::Yes {\n-                            try!(p.parse_visibility())\n-                        } else {\n-                            Visibility::Inherited\n-                        }\n-                    ),\n+                    kind: UnnamedField(try!(p.parse_visibility())),\n                     id: ast::DUMMY_NODE_ID,\n                     ty: try!(p.parse_ty_sum()),\n                     attrs: attrs,\n@@ -5193,15 +5173,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an element of a struct definition\n-    fn parse_struct_decl_field(&mut self, parse_pub: ParsePub) -> PResult<'a, StructField> {\n+    fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n \n         let attrs = try!(self.parse_outer_attributes());\n \n         if self.eat_keyword(keywords::Pub) {\n-            if parse_pub == ParsePub::No {\n-                let span = self.last_span;\n-                self.span_err(span, \"`pub` is not allowed here\");\n-            }\n             return self.parse_single_struct_field(Visibility::Public, attrs);\n         }\n \n@@ -5567,11 +5543,11 @@ impl<'a> Parser<'a> {\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::No)),\n+                struct_def = VariantData::Struct(try!(self.parse_record_struct_body()),\n                                                  ast::DUMMY_NODE_ID);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::No)),\n+                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body()),\n                                                 ast::DUMMY_NODE_ID);\n             } else if self.eat(&token::Eq) {\n                 disr_expr = Some(try!(self.parse_expr()));"}]}