{"sha": "8e3467c2150eddc636e88346255bec20feb38b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzQ2N2MyMTUwZWRkYzYzNmU4ODM0NjI1NWJlYzIwZmViMzhiM2E=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-03T20:41:37Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-05T17:36:50Z"}, "message": "Link to libgcc dynamically on windows-gnu when using dylib crates", "tree": {"sha": "7eb749f55ddd0b0a1e47c5048670cd0d7c1ad95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb749f55ddd0b0a1e47c5048670cd0d7c1ad95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3467c2150eddc636e88346255bec20feb38b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3467c2150eddc636e88346255bec20feb38b3a", "html_url": "https://github.com/rust-lang/rust/commit/8e3467c2150eddc636e88346255bec20feb38b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3467c2150eddc636e88346255bec20feb38b3a/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c950e5c6f85422283bb23bb4bad07ae6c3d2fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c950e5c6f85422283bb23bb4bad07ae6c3d2fe1", "html_url": "https://github.com/rust-lang/rust/commit/1c950e5c6f85422283bb23bb4bad07ae6c3d2fe1"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "fb0205dffe7c83eff44abe20ec8cffacbf98af56", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=8e3467c2150eddc636e88346255bec20feb38b3a", "patch": "@@ -490,6 +490,11 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n     let (linker, flavor) = linker_and_flavor(sess);\n \n+    let any_dynamic_crate = crate_type == config::CrateType::Dylib\n+        || codegen_results.crate_info.dependency_formats.iter().any(|(ty, list)| {\n+            *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n+        });\n+\n     // The invocations of cc share some flags across platforms\n     let (pname, mut cmd) = get_linker(sess, &linker, flavor);\n \n@@ -555,6 +560,15 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if any_dynamic_crate {\n+        if let Some(args) = sess.target.target.options.late_link_args_dynamic.get(&flavor) {\n+            cmd.args(args);\n+        }\n+    } else {\n+        if let Some(args) = sess.target.target.options.late_link_args_static.get(&flavor) {\n+            cmd.args(args);\n+        }\n+    }\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(get_file_path(sess, obj));\n     }"}, {"sha": "9c3d760451ceed69e47269e5a8d37423f8ca3c1f", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=8e3467c2150eddc636e88346255bec20feb38b3a", "patch": "@@ -579,6 +579,12 @@ pub struct TargetOptions {\n     /// user-defined but before post_link_objects. Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n+    /// Linker arguments used in addition to `late_link_args` if at least one\n+    /// Rust dependency is dynamically linked.\n+    pub late_link_args_dynamic: LinkArgs,\n+    /// Linker arguments used in addition to `late_link_args` if aall Rust\n+    /// dependencies are statically linked.\n+    pub late_link_args_static: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n     pub post_link_objects: Vec<String>, // ... unconditionally\n@@ -858,6 +864,8 @@ impl Default for TargetOptions {\n             post_link_objects: Vec::new(),\n             post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n+            late_link_args_dynamic: LinkArgs::new(),\n+            late_link_args_static: LinkArgs::new(),\n             link_env: Vec::new(),\n             link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -1136,6 +1144,8 @@ impl Target {\n         key!(pre_link_objects_exe_crt, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n+        key!(late_link_args_dynamic, link_args);\n+        key!(late_link_args_static, link_args);\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n@@ -1363,6 +1373,8 @@ impl ToJson for Target {\n         target_option_val!(pre_link_objects_exe_crt);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n+        target_option_val!(link_args - late_link_args_dynamic);\n+        target_option_val!(link_args - late_link_args_static);\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);"}, {"sha": "188548b41fe75fda00784adf71f26e4f4ff2e0e8", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=8e3467c2150eddc636e88346255bec20feb38b3a", "patch": "@@ -17,12 +17,13 @@ pub fn opts() -> TargetOptions {\n     );\n \n     let mut late_link_args = LinkArgs::new();\n+    let mut late_link_args_dynamic = LinkArgs::new();\n+    let mut late_link_args_static = LinkArgs::new();\n     late_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n             \"-lmingwex\".to_string(),\n             \"-lmingw32\".to_string(),\n-            \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n             \"-lmsvcrt\".to_string(),\n             // mingw's msvcrt is a weird hybrid import library and static library.\n             // And it seems that the linker fails to use import symbols from msvcrt\n@@ -37,6 +38,31 @@ pub fn opts() -> TargetOptions {\n             \"-lkernel32\".to_string(),\n         ],\n     );\n+    late_link_args_dynamic.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // If any of our crates are dynamically linked then we need to use\n+            // the shared libgcc_s-dw2-1.dll. This is required to support\n+            // unwinding across DLL boundaries.\n+            \"-lgcc_s\".to_string(),\n+            \"-lgcc\".to_string(),\n+            \"-lkernel32\".to_string(),\n+        ],\n+    );\n+    late_link_args_static.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // If all of our crates are statically linked then we can get away\n+            // with statically linking the libgcc unwinding code. This allows\n+            // binaries to be redistributed without the libgcc_s-dw2-1.dll\n+            // dependency, but unfortunately break unwinding across DLL\n+            // boundaries when unwinding across FFI boundaries.\n+            \"-lgcc\".to_string(),\n+            \"-lgcc_eh\".to_string(),\n+            \"-lpthread\".to_string(),\n+            \"-lkernel32\".to_string(),\n+        ],\n+    );\n \n     TargetOptions {\n         // FIXME(#13846) this should be enabled for windows\n@@ -63,8 +89,9 @@ pub fn opts() -> TargetOptions {\n             \"rsbegin.o\".to_string(),\n         ],\n         late_link_args,\n+        late_link_args_dynamic,\n+        late_link_args_static,\n         post_link_objects: vec![\"rsend.o\".to_string()],\n-        custom_unwind_resume: true,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,"}, {"sha": "0628e5d2fc03af7737ec617321a14cb65d571e0c", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3467c2150eddc636e88346255bec20feb38b3a/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=8e3467c2150eddc636e88346255bec20feb38b3a", "patch": "@@ -33,8 +33,13 @@ fn main() {\n     } else if target.contains(\"dragonfly\") {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n     } else if target.contains(\"pc-windows-gnu\") {\n-        println!(\"cargo:rustc-link-lib=static-nobundle=gcc_eh\");\n-        println!(\"cargo:rustc-link-lib=static-nobundle=pthread\");\n+        // This is handled in the target spec with late_link_args_[static|dynamic]\n+\n+        // cfg!(bootstrap) doesn't work in build scripts\n+        if env::var(\"RUSTC_STAGE\").ok() == Some(\"0\".to_string()) {\n+            println!(\"cargo:rustc-link-lib=static-nobundle=gcc_eh\");\n+            println!(\"cargo:rustc-link-lib=static-nobundle=pthread\");\n+        }\n     } else if target.contains(\"uwp-windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=unwind\");\n     } else if target.contains(\"fuchsia\") {"}]}