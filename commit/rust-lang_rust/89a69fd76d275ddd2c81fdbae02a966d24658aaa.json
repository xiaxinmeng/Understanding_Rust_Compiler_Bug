{"sha": "89a69fd76d275ddd2c81fdbae02a966d24658aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YTY5ZmQ3NmQyNzVkZGQyYzgxZmRiYWUwMmE5NjZkMjQ2NThhYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T18:01:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T18:01:44Z"}, "message": "Rollup merge of #64139 - Mark-Simulacrum:strip-legacy-proc-macro, r=petrochenkov\n\nMigrate internal diagnostic registration to macro_rules\n\nReview is best done commit-by-commit.\n\nFixes #64132.", "tree": {"sha": "b191b0475521f0d20bf4aaad612c28a4d9a8d952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b191b0475521f0d20bf4aaad612c28a4d9a8d952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a69fd76d275ddd2c81fdbae02a966d24658aaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc/CICRBK7hj4Ov3rIwAAdHIIAEtUbLuJLFprovsts1QReTRh\n6po51Js1AI1GFr0NhOFdQLA1FpoPcy9yeQ3TxczMSGj12WfP6s4yoXfMGaXd58Ud\nnoqLGFDQft++1/yYODtILEt65gOtjVCzymM4TtNBV2SSaQLTtHNhqRLqHGykljli\nU3rxTpQNZpFOfDJXol69zpdpUvoS2gjeJeZxbt9pxyt2ojxr1f0G70mZHtcpW6Cl\nRM03sjSF5Ent+xn8OmYcWYAtSqmVspenABzrQXbkoGZH0cyPAuArAcD29zcOfnyT\nDFoPYaO7wKZS3l4JDblLB0KkhZKNAsGyM8vRX7saKsq1UZaig0whcJfAOsrMFng=\n=VREa\n-----END PGP SIGNATURE-----\n", "payload": "tree b191b0475521f0d20bf4aaad612c28a4d9a8d952\nparent 3c4a58622128887778c6fd7c35de66f3fa463708\nparent 5153db136e8419beb217340500a97db553ddabbe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567879304 +0200\ncommitter GitHub <noreply@github.com> 1567879304 +0200\n\nRollup merge of #64139 - Mark-Simulacrum:strip-legacy-proc-macro, r=petrochenkov\n\nMigrate internal diagnostic registration to macro_rules\n\nReview is best done commit-by-commit.\n\nFixes #64132.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a69fd76d275ddd2c81fdbae02a966d24658aaa", "html_url": "https://github.com/rust-lang/rust/commit/89a69fd76d275ddd2c81fdbae02a966d24658aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a69fd76d275ddd2c81fdbae02a966d24658aaa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4a58622128887778c6fd7c35de66f3fa463708", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4a58622128887778c6fd7c35de66f3fa463708", "html_url": "https://github.com/rust-lang/rust/commit/3c4a58622128887778c6fd7c35de66f3fa463708"}, {"sha": "5153db136e8419beb217340500a97db553ddabbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5153db136e8419beb217340500a97db553ddabbe", "html_url": "https://github.com/rust-lang/rust/commit/5153db136e8419beb217340500a97db553ddabbe"}], "stats": {"total": 665, "additions": 176, "deletions": 489}, "files": [{"sha": "2236cdb3f04e91d395fddc5074459762b9ef4e5d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -3129,11 +3129,7 @@ dependencies = [\n name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n- \"cc\",\n- \"memmap\",\n- \"num_cpus\",\n  \"rustc_llvm\",\n- \"tempfile\",\n ]\n \n [[package]]"}, {"sha": "00d87f3841cfffd04af86c5c3139f36591aa3565", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1327,7 +1327,10 @@ impl Step for Compiletest {\n             cmd.env(\"RUSTC_PROFILER_SUPPORT\", \"1\");\n         }\n \n-        cmd.env(\"RUST_TEST_TMPDIR\", builder.out.join(\"tmp\"));\n+        let tmp = builder.out.join(\"tmp\");\n+        std::fs::create_dir_all(&tmp).unwrap();\n+        cmd.env(\"RUST_TEST_TMPDIR\", tmp);\n+\n \n         cmd.arg(\"--adb-path\").arg(\"adb\");\n         cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);"}, {"sha": "eee33846139e673dcdea38ac9a8977807ae573af", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,7 +1,8 @@\n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+syntax::register_diagnostics! {\n E0038: r##\"\n Trait objects like `Box<Trait>` can only be constructed when certain\n requirements are satisfied by the trait in question.\n@@ -2183,11 +2184,7 @@ Examples of erroneous code:\n static X: u32 = 42;\n ```\n \"##,\n-\n-}\n-\n-\n-register_diagnostics! {\n+;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282\n //  E0102, // replaced with E0282\n@@ -2206,7 +2203,8 @@ register_diagnostics! {\n //  E0305, // expected constant\n     E0311, // thing may not live long enough\n     E0312, // lifetime of reference outlives lifetime of borrowed content\n-    E0313, // lifetime of borrowed pointer outlives lifetime of captured variable\n+    E0313, // lifetime of borrowed pointer outlives lifetime of captured\n+           // variable\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n@@ -2223,12 +2221,13 @@ register_diagnostics! {\n     E0483, // lifetime of operand does not outlive the operation\n     E0484, // reference is not valid at the time of borrow\n     E0485, // automatically reference is not valid at the time of borrow\n-    E0486, // type of expression contains references that are not valid during...\n+    E0486, // type of expression contains references that are not valid during..\n     E0487, // unsafe use of destructor: destructor might be called while...\n     E0488, // lifetime of variable does not enclose its declaration\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n+    E0495, // cannot infer an appropriate lifetime due to conflicting\n+           // requirements\n     E0566, // conflicting representation hints\n     E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit parameters\n@@ -2239,7 +2238,8 @@ register_diagnostics! {\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n     E0697, // closures cannot be static\n     E0707, // multiple elided lifetimes used in arguments of `async fn`\n-    E0708, // `async` non-`move` closures with parameters are not currently supported\n+    E0708, // `async` non-`move` closures with parameters are not currently\n+           // supported\n     E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes"}, {"sha": "63ef82a7401a3b33666adf5715d3bf96f6b7559e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -45,7 +45,6 @@\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(range_is_empty)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n@@ -88,8 +87,6 @@ mod tests;\n #[macro_use]\n mod macros;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n pub mod error_codes;\n \n #[macro_use]\n@@ -142,6 +139,3 @@ pub mod util {\n \n // Allows macros to refer to this crate as `::rustc`\n extern crate self as rustc;\n-\n-// Build the diagnostics array at the end so that the metadata includes error use sites.\n-__build_diagnostic_array! { librustc, DIAGNOSTICS }"}, {"sha": "98efa6a5804bd352d4617912ecdaaf58f099df4a", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -11,11 +11,7 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-cc = \"1.0.1\" # Used to locate MSVC\n-num_cpus = \"1.0\"\n-tempfile = \"3.0\"\n rustc_llvm = { path = \"../librustc_llvm\" }\n-memmap = \"0.6\"\n \n [features]\n # This is used to convince Cargo to separately cache builds of `rustc_codegen_llvm`"}, {"sha": "042e51ed2ba7a4e95e0f4bacd7e16142947df71c", "filename": "src/librustc_codegen_llvm/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+register_diagnostics! {\n \n E0511: r##\"\n Invalid monomorphization of an intrinsic function was used. Erroneous code"}, {"sha": "9f2c303145dc8e28eba27d63b60ad603d2fc6cf1", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -14,7 +14,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(libc)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(optin_builtin_traits)]\n #![feature(concat_idents)]\n #![feature(link_args)]\n@@ -256,7 +255,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn diagnostics(&self) -> &[(&'static str, &'static str)] {\n-        &DIAGNOSTICS\n+        &error_codes::DIAGNOSTICS\n     }\n \n     fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n@@ -425,5 +424,3 @@ impl Drop for ModuleLlvm {\n         }\n     }\n }\n-\n-__build_diagnostic_array! { librustc_codegen_llvm, DIAGNOSTICS }"}, {"sha": "8ff41c275a8f45283e387847e7d5861dd3abd94b", "filename": "src/librustc_codegen_ssa/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0668: r##\"\n Malformed inline assembly rejected by LLVM."}, {"sha": "90bf964ceaa1302e3494894f0cf3373227fd033d", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(libc)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(stmt_expr_attributes)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n@@ -35,8 +34,6 @@ use rustc_data_structures::svh::Svh;\n use rustc::middle::cstore::{LibSource, CrateSource, NativeLibrary};\n use syntax_pos::symbol::Symbol;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n mod error_codes;\n \n pub mod common;\n@@ -158,5 +155,3 @@ pub struct CodegenResults {\n     pub linker_info: back::linker::LinkerInfo,\n     pub crate_info: CrateInfo,\n }\n-\n-__build_diagnostic_array! { librustc_codegen_ssa, DIAGNOSTICS }"}, {"sha": "1201446afb53128dddbd1b0a52134801ae72d6ff", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -10,7 +10,6 @@\n #![feature(core_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(in_band_lifetimes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "a912ea3c358215cae6f9f49788b6bf535579a71b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -9,7 +9,6 @@\n #![feature(box_syntax)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n #![feature(no_debug)]\n #![feature(integer_atomics)]"}, {"sha": "3cfae1686dfdf911761869c25c49b0f7646bacf8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -34,7 +34,7 @@ use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_traits;\n use rustc_typeck as typeck;\n-use syntax::{self, ast, diagnostics, visit};\n+use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::ext::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n@@ -283,21 +283,6 @@ pub fn register_plugins<'a>(\n     let mut registry = Registry::new(sess, krate.span);\n \n     time(sess, \"plugin registration\", || {\n-        if sess.features_untracked().rustc_diagnostic_macros {\n-            registry.register_macro(\n-                \"__diagnostic_used\",\n-                diagnostics::plugin::expand_diagnostic_used,\n-            );\n-            registry.register_macro(\n-                \"__register_diagnostic\",\n-                diagnostics::plugin::expand_register_diagnostic,\n-            );\n-            registry.register_macro(\n-                \"__build_diagnostic_array\",\n-                diagnostics::plugin::expand_build_diagnostic_array,\n-            );\n-        }\n-\n         for registrar in registrars {\n             registry.args_hidden = Some(registrar.args);\n             (registrar.fun)(&mut registry);"}, {"sha": "9eaf7b77716f3f0d62c25d3d4e2f6c54839de019", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -43,17 +43,17 @@ use std::{thread, panic};\n \n pub fn diagnostics_registry() -> Registry {\n     let mut all_errors = Vec::new();\n-    all_errors.extend_from_slice(&rustc::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_typeck::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_resolve::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_typeck::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_resolve::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_privacy::error_codes::DIAGNOSTICS);\n     // FIXME: need to figure out a way to get these back in here\n     // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n-    all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_passes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_plugin::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_mir::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&syntax::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_metadata::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_passes::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_plugin::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_mir::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&syntax::error_codes::DIAGNOSTICS);\n \n     Registry::new(&all_errors)\n }"}, {"sha": "ea2e1d9ecc53f46553207c643ec5eed7c560de96", "filename": "src/librustc_lint/error_codes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_lint%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_lint%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,5 +1,4 @@\n-use syntax::register_diagnostics;\n-\n-register_diagnostics! {\n+syntax::register_diagnostics! {\n+;\n     E0721, // `await` keyword\n }"}, {"sha": "4ee6551f787818c3dba16abe60de8f368b3b9dbe", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -15,7 +15,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "cd8e95e6c3a1101786cd08bc55fba6b8bc0c7a37", "filename": "src/librustc_metadata/error_codes.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_metadata%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_metadata%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,6 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n E0454: r##\"\n A link name was given with an empty name. Erroneous code example:\n \n@@ -84,10 +82,7 @@ You need to link your code to the relevant crate in order to be able to use it\n (through Cargo or the `-L` option of rustc example). Plugins are crates as\n well, and you link to them the same way.\n \"##,\n-\n-}\n-\n-register_diagnostics! {\n+;\n     E0456, // plugin `..` is not available for triple `..`\n     E0457, // plugin `..` only found in rlib format, but must be available...\n     E0514, // metadata version mismatch\n@@ -97,5 +92,6 @@ register_diagnostics! {\n     E0464, // multiple matching crates for `..`\n     E0465, // multiple .. candidates for `..` found\n     E0519, // local crate and dependency have same (crate-name, disambiguator)\n-    E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n+    // two dependencies have same (crate-name, disambiguator) but different SVH\n+    E0523,\n }"}, {"sha": "e6104e629e9fbfefbec87db6c2dc3a602e2137e9", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -8,7 +8,6 @@\n #![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n@@ -23,7 +22,7 @@ extern crate rustc;\n #[macro_use]\n extern crate rustc_data_structures;\n \n-mod error_codes;\n+pub mod error_codes;\n \n mod index;\n mod encoder;\n@@ -68,5 +67,3 @@ pub fn validate_crate_name(\n         sess.unwrap().abort_if_errors();\n     }\n }\n-\n-__build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "d80449ac2372476c8af7bc9137c2592506a8ae72", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n \n E0001: r##\"\n@@ -2448,9 +2448,9 @@ information.\n \n There are some known bugs that trigger this message.\n \"##,\n-}\n \n-register_diagnostics! {\n+;\n+\n //  E0298, // cannot compare constants\n //  E0299, // mismatched types between arms\n //  E0471, // constant evaluation error (in pattern)"}, {"sha": "f27db351b74dbbf124eba38a733e2ec85f00e9b8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -14,7 +14,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(const_fn)]\n #![feature(decl_macro)]\n #![feature(exhaustive_patterns)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n@@ -32,7 +31,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #[macro_use] extern crate rustc_data_structures;\n #[macro_use] extern crate syntax;\n \n-mod error_codes;\n+pub mod error_codes;\n \n mod borrow_check;\n mod build;\n@@ -62,5 +61,3 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n     providers.type_name = interpret::type_name;\n }\n-\n-__build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}, {"sha": "af07c790e2a8799a35e82878719ab7d1af97d0f4", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,6 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n /*\n E0014: r##\"\n Constants can only be initialized by a constant value or, in a future\n@@ -320,10 +318,8 @@ async fn foo() {}\n ```\n \n Switch to the Rust 2018 edition to use `async fn`.\n-\"##\n-}\n-\n-register_diagnostics! {\n+\"##,\n+;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types"}, {"sha": "cf2da4ffa2af08989dced816605512e411a951f6", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -9,7 +9,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n-#![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n@@ -18,16 +17,14 @@ extern crate rustc;\n \n use rustc::ty::query::Providers;\n \n-mod error_codes;\n+pub mod error_codes;\n \n pub mod ast_validation;\n pub mod rvalue_promotion;\n pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n \n-__build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n-\n pub fn provide(providers: &mut Providers<'_>) {\n     rvalue_promotion::provide(providers);\n     loops::provide(providers);"}, {"sha": "7b3f01c0ee11144b6cea496836470e049e398462", "filename": "src/librustc_plugin/error_codes.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_plugin%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_plugin%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,9 +1,4 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n-register_long_diagnostics! {\n-\n-}\n-\n-register_diagnostics! {\n-    E0498  // malformed plugin attribute\n+syntax::register_diagnostics! {\n+;\n+    E0498,  // malformed plugin attribute\n }"}, {"sha": "4e1a47c503e59fd3675e8f576714dbbf74b8a3e2", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -54,15 +54,12 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n pub use registry::Registry;\n \n-mod error_codes;\n+pub mod error_codes;\n pub mod registry;\n pub mod load;\n pub mod build;\n-\n-__build_diagnostic_array! { librustc_plugin, DIAGNOSTICS }"}, {"sha": "67066466f1d222d0d0af63a786a193a46f45f137", "filename": "src/librustc_privacy/error_codes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_privacy%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_privacy%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,4 +1,4 @@\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0445: r##\"\n A private trait was used on a public type parameter bound. Erroneous code\n@@ -154,8 +154,5 @@ let f = Bar::Foo::new(); // ok!\n ```\n \"##,\n \n-}\n-\n-register_diagnostics! {\n //  E0450, moved into resolve\n }"}, {"sha": "1e61f78c357dfa5d3260c4c5cbf7f31cb750608c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n@@ -31,7 +30,7 @@ use syntax_pos::Span;\n use std::{cmp, fmt, mem};\n use std::marker::PhantomData;\n \n-mod error_codes;\n+pub mod error_codes;\n \n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below.\n@@ -2035,5 +2034,3 @@ fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n     };\n     krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }\n-\n-__build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "adbff67cc8dac2942728becb3c9039b9533023a2", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,9 +1,7 @@\n-use syntax::{register_diagnostics, register_long_diagnostics};\n-\n // Error messages for EXXXX errors.  Each message should start and end with a\n // new line, and be wrapped to 80 characters.  In vim you can `:set tw=80` and\n // use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0128: r##\"\n Type parameter defaults can only use parameters that occur before them.\n@@ -1662,10 +1660,7 @@ fn const_id<T, const N: T>() -> T { // error: const parameter\n }\n ```\n \"##,\n-\n-}\n-\n-register_diagnostics! {\n+;\n //  E0153, unused error code\n //  E0157, unused error code\n //  E0257,"}, {"sha": "aae283b74523650aebf14d07eed96a9040273bd2", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -298,18 +298,18 @@ impl<'a> PathSource<'a> {\n     }\n \n     fn error_code(self, has_unexpected_resolution: bool) -> &'static str {\n-        __diagnostic_used!(E0404);\n-        __diagnostic_used!(E0405);\n-        __diagnostic_used!(E0412);\n-        __diagnostic_used!(E0422);\n-        __diagnostic_used!(E0423);\n-        __diagnostic_used!(E0425);\n-        __diagnostic_used!(E0531);\n-        __diagnostic_used!(E0532);\n-        __diagnostic_used!(E0573);\n-        __diagnostic_used!(E0574);\n-        __diagnostic_used!(E0575);\n-        __diagnostic_used!(E0576);\n+        syntax::diagnostic_used!(E0404);\n+        syntax::diagnostic_used!(E0405);\n+        syntax::diagnostic_used!(E0412);\n+        syntax::diagnostic_used!(E0422);\n+        syntax::diagnostic_used!(E0423);\n+        syntax::diagnostic_used!(E0425);\n+        syntax::diagnostic_used!(E0531);\n+        syntax::diagnostic_used!(E0532);\n+        syntax::diagnostic_used!(E0573);\n+        syntax::diagnostic_used!(E0574);\n+        syntax::diagnostic_used!(E0575);\n+        syntax::diagnostic_used!(E0576);\n         match (self, has_unexpected_resolution) {\n             (PathSource::Trait(_), true) => \"E0404\",\n             (PathSource::Trait(_), false) => \"E0405\","}, {"sha": "0c86d8494fde833afcf0f92760d8b8821a14c219", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -113,7 +113,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n-            __diagnostic_used!(E0411);\n+            syntax::diagnostic_used!(E0411);\n             err.code(DiagnosticId::Error(\"E0411\".into()));\n             err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n                                           and type definitions\"));\n@@ -122,7 +122,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_value(path, ns) {\n             debug!(\"smart_resolve_path_fragment: E0424, source={:?}\", source);\n \n-            __diagnostic_used!(E0424);\n+            syntax::diagnostic_used!(E0424);\n             err.code(DiagnosticId::Error(\"E0424\".into()));\n             err.span_label(span, match source {\n                 PathSource::Pat => {"}, {"sha": "e980b8d01f7a8f34c217b2bd286532ab4aba44c5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -14,7 +14,6 @@\n #![feature(label_break_value)]\n #![feature(mem_take)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n@@ -68,9 +67,7 @@ use macros::{LegacyBinding, LegacyScope};\n \n type Res = def::Res<NodeId>;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n-mod error_codes;\n+pub mod error_codes;\n mod diagnostics;\n mod late;\n mod macros;\n@@ -2840,5 +2837,3 @@ impl CrateLint {\n         }\n     }\n }\n-\n-__build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "e11dcfafb8f8b1f10b31972b543b838fd716e0f2", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-register_long_diagnostics! {\n+syntax::register_diagnostics! {\n \n E0023: r##\"\n A pattern used to match against an enum variant must provide a sub-pattern for\n@@ -4870,10 +4870,7 @@ fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n The `Box<...>` ensures that the result is of known size,\n and the pin is required to keep it in the same place in memory.\n \"##,\n-\n-}  // (end of detailed error messages)\n-\n-register_diagnostics! {\n+;\n //  E0035, merged into E0087/E0089\n //  E0036, merged into E0087/E0089\n //  E0068,\n@@ -4930,15 +4927,16 @@ register_diagnostics! {\n //  E0245, // not a trait\n //  E0246, // invalid recursive type\n //  E0247,\n-//  E0248, // value used as a type, now reported earlier during resolution as E0412\n+//  E0248, // value used as a type, now reported earlier during resolution\n+           // as E0412\n //  E0249,\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n //  E0558, // replaced with a generic attribute input check\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n-//  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n+//  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0587, // type has conflicting packed and align representation hints\n@@ -4947,8 +4945,8 @@ register_diagnostics! {\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n     E0627, // yield statement outside of generator literal\n-    E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n-           // argument position.\n+    E0632, // cannot provide explicit type parameters when `impl Trait` is used\n+           // in argument position.\n     E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind"}, {"sha": "959483e4439ff1a68f36a640f4f7889e6302e139", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -65,7 +65,6 @@ This API is completely unstable and subject to change.\n #![feature(exhaustive_patterns)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(never_type)]\n #![feature(inner_deref)]\n@@ -78,9 +77,7 @@ This API is completely unstable and subject to change.\n \n #[macro_use] extern crate rustc;\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n-mod error_codes;\n+pub mod error_codes;\n \n mod astconv;\n mod check;\n@@ -389,5 +386,3 @@ pub fn hir_trait_to_predicates<'tcx>(\n \n     bounds\n }\n-\n-__build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "273a36edc56ff47068cd4b38518e7c12a189cdd1", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n     fn session(&self) -> &Session { self.sess }\n \n     fn code(&self) -> DiagnosticId {\n-        __diagnostic_used!(E0617);\n+        syntax::diagnostic_used!(E0617);\n         DiagnosticId::Error(\"E0617\".to_owned())\n     }\n \n@@ -104,7 +104,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n     fn session(&self) -> &Session { self.sess }\n \n     fn code(&self) -> DiagnosticId {\n-        __diagnostic_used!(E0607);\n+        syntax::diagnostic_used!(E0607);\n         DiagnosticId::Error(\"E0607\".to_owned())\n     }\n "}, {"sha": "c95c5bd5d02d4d20479a9b6ec806985c19dd2989", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,13 +1,14 @@\n #[macro_export]\n-macro_rules! register_diagnostic {\n-    ($code:tt, $description:tt) => (__register_diagnostic! { $code, $description });\n-    ($code:tt) => (__register_diagnostic! { $code })\n+macro_rules! diagnostic_used {\n+    ($code:ident) => (\n+        let _ = crate::error_codes::$code;\n+    )\n }\n \n #[macro_export]\n macro_rules! span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_fatal_with_code(\n             $span,\n             &format!($($message)*),\n@@ -19,7 +20,7 @@ macro_rules! span_fatal {\n #[macro_export]\n macro_rules! span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_err_with_code(\n             $span,\n             &format!($($message)*),\n@@ -31,7 +32,7 @@ macro_rules! span_err {\n #[macro_export]\n macro_rules! span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.span_warn_with_code(\n             $span,\n             &format!($($message)*),\n@@ -43,7 +44,7 @@ macro_rules! span_warn {\n #[macro_export]\n macro_rules! struct_err {\n     ($session:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_err_with_code(\n             &format!($($message)*),\n             $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n@@ -54,7 +55,7 @@ macro_rules! struct_err {\n #[macro_export]\n macro_rules! span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         if $is_warning {\n             $session.span_warn_with_code(\n                 $span,\n@@ -74,7 +75,7 @@ macro_rules! span_err_or_warn {\n #[macro_export]\n macro_rules! struct_span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_fatal_with_code(\n             $span,\n             &format!($($message)*),\n@@ -86,7 +87,7 @@ macro_rules! struct_span_fatal {\n #[macro_export]\n macro_rules! struct_span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_err_with_code(\n             $span,\n             &format!($($message)*),\n@@ -98,7 +99,7 @@ macro_rules! struct_span_err {\n #[macro_export]\n macro_rules! stringify_error_code {\n     ($code:ident) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $crate::errors::DiagnosticId::Error(stringify!($code).to_owned())\n     })\n }\n@@ -117,7 +118,7 @@ macro_rules! type_error_struct {\n #[macro_export]\n macro_rules! struct_span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         $session.struct_span_warn_with_code(\n             $span,\n             &format!($($message)*),\n@@ -129,7 +130,7 @@ macro_rules! struct_span_warn {\n #[macro_export]\n macro_rules! struct_span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n+        $crate::diagnostic_used!($code);\n         if $is_warning {\n             $session.struct_span_warn_with_code(\n                 $span,\n@@ -169,20 +170,22 @@ macro_rules! help {\n \n #[macro_export]\n macro_rules! register_diagnostics {\n-    ($($code:tt),*) => (\n-        $($crate::register_diagnostic! { $code })*\n+    ($($ecode:ident: $message:expr,)*) => (\n+        $crate::register_diagnostics!{$($ecode:$message,)* ;}\n     );\n-    ($($code:tt),*,) => (\n-        $($crate::register_diagnostic! { $code })*\n-    )\n-}\n \n-#[macro_export]\n-macro_rules! register_long_diagnostics {\n-    ($($code:tt: $description:tt),*) => (\n-        $($crate::register_diagnostic! { $code, $description })*\n-    );\n-    ($($code:tt: $description:tt),*,) => (\n-        $($crate::register_diagnostic! { $code, $description })*\n+    ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n+        pub static DIAGNOSTICS: &[(&str, &str)] = &[\n+            $( (stringify!($ecode), $message), )*\n+        ];\n+\n+        $(\n+            #[deny(unused)]\n+            pub(crate) const $ecode: &str = $message;\n+        )*\n+        $(\n+            #[deny(unused)]\n+            pub(crate) const $code: () = ();\n+        )*\n     )\n }"}, {"sha": "5de39c8d14d17d2af304947be1489049c0914f49", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "removed", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=3c4a58622128887778c6fd7c35de66f3fa463708", "patch": "@@ -1,185 +0,0 @@\n-use std::collections::BTreeMap;\n-\n-use crate::ast::{self, Ident, Name};\n-use crate::source_map;\n-use crate::ext::base::{ExtCtxt, MacEager, MacResult};\n-use crate::parse::token::{self, Token};\n-use crate::ptr::P;\n-use crate::symbol::kw;\n-use crate::tokenstream::{TokenTree, TokenStream};\n-\n-use smallvec::smallvec;\n-use syntax_pos::Span;\n-\n-pub use errors::*;\n-\n-// Maximum width of any line in an extended error description (inclusive).\n-const MAX_DESCRIPTION_WIDTH: usize = 80;\n-\n-/// Error information type.\n-pub struct ErrorInfo {\n-    pub description: Option<Name>,\n-    pub use_site: Option<Span>\n-}\n-\n-/// Mapping from error codes to metadata.\n-pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n-\n-pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                   span: Span,\n-                                   tts: TokenStream)\n-                                   -> Box<dyn MacResult+'cx> {\n-    assert_eq!(tts.len(), 1);\n-    let code = match tts.into_trees().next() {\n-        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n-        _ => unreachable!()\n-    };\n-\n-    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-        match diagnostics.get_mut(&code) {\n-            // Previously used errors.\n-            Some(&mut ErrorInfo { description: _, use_site: Some(previous_span) }) => {\n-                ecx.struct_span_warn(span, &format!(\n-                    \"diagnostic code {} already used\", code\n-                )).span_note(previous_span, \"previous invocation\")\n-                  .emit();\n-            }\n-            // Newly used errors.\n-            Some(ref mut info) => {\n-                info.use_site = Some(span);\n-            }\n-            // Unregistered errors.\n-            None => {\n-                ecx.span_err(span, &format!(\n-                    \"used diagnostic code {} not registered\", code\n-                ));\n-            }\n-        }\n-    });\n-    MacEager::expr(ecx.expr_tuple(span, Vec::new()))\n-}\n-\n-pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                       span: Span,\n-                                       tts: TokenStream)\n-                                       -> Box<dyn MacResult+'cx> {\n-    assert!(tts.len() == 1 || tts.len() == 3);\n-    let mut cursor = tts.into_trees();\n-    let code = match cursor.next() {\n-        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n-        _ => unreachable!()\n-    };\n-    let description = match  (cursor.next(), cursor.next()) {\n-        (None, None) => None,\n-        (\n-            Some(TokenTree::Token(Token { kind: token::Comma, .. })),\n-            Some(TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..}))\n-        ) => {\n-            Some(symbol)\n-        },\n-        _ => unreachable!()\n-    };\n-\n-    // Check that the description starts and ends with a newline and doesn't\n-    // overflow the maximum line width.\n-    description.map(|raw_msg| {\n-        let msg = raw_msg.as_str();\n-        if !msg.starts_with(\"\\n\") || !msg.ends_with(\"\\n\") {\n-            ecx.span_err(span, &format!(\n-                \"description for error code {} doesn't start and end with a newline\",\n-                code\n-            ));\n-        }\n-\n-        // URLs can be unavoidably longer than the line limit, so we allow them.\n-        // Allowed format is: `[name]: https://www.rust-lang.org/`\n-        let is_url = |l: &str| l.starts_with(\"[\") && l.contains(\"]:\") && l.contains(\"http\");\n-\n-        if msg.lines().any(|line| line.len() > MAX_DESCRIPTION_WIDTH && !is_url(line)) {\n-            ecx.span_err(span, &format!(\n-                \"description for error code {} contains a line longer than {} characters.\\n\\\n-                 if you're inserting a long URL use the footnote style to bypass this check.\",\n-                code, MAX_DESCRIPTION_WIDTH\n-            ));\n-        }\n-    });\n-    // Add the error to the map.\n-    ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-        let info = ErrorInfo {\n-            description,\n-            use_site: None\n-        };\n-        if diagnostics.insert(code, info).is_some() {\n-            ecx.span_err(span, &format!(\n-                \"diagnostic code {} already registered\", code\n-            ));\n-        }\n-    });\n-\n-    MacEager::items(smallvec![])\n-}\n-\n-pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                                          span: Span,\n-                                          tts: TokenStream)\n-                                          -> Box<dyn MacResult+'cx> {\n-    assert_eq!(tts.len(), 3);\n-    let ident = match tts.into_trees().nth(2) {\n-        // DIAGNOSTICS ident.\n-        Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }))\n-        => Ident::new(name, span),\n-        _ => unreachable!()\n-    };\n-\n-    // Construct the output expression.\n-    let (count, expr) =\n-        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-            let descriptions: Vec<P<ast::Expr>> =\n-                diagnostics.iter().filter_map(|(&code, info)| {\n-                    info.description.map(|description| {\n-                        ecx.expr_tuple(span, vec![\n-                            ecx.expr_str(span, code),\n-                            ecx.expr_str(span, description)\n-                        ])\n-                    })\n-                }).collect();\n-            (descriptions.len(), ecx.expr_vec(span, descriptions))\n-        });\n-\n-    let static_ = ecx.lifetime(span, Ident::with_dummy_span(kw::StaticLifetime));\n-    let ty_str = ecx.ty_rptr(\n-        span,\n-        ecx.ty_ident(span, ecx.ident_of(\"str\")),\n-        Some(static_),\n-        ast::Mutability::Immutable,\n-    );\n-\n-    let ty = ecx.ty(\n-        span,\n-        ast::TyKind::Array(\n-            ecx.ty(\n-                span,\n-                ast::TyKind::Tup(vec![ty_str.clone(), ty_str])\n-            ),\n-            ast::AnonConst {\n-                id: ast::DUMMY_NODE_ID,\n-                value: ecx.expr_usize(span, count),\n-            },\n-        ),\n-    );\n-\n-    MacEager::items(smallvec![\n-        P(ast::Item {\n-            ident,\n-            attrs: Vec::new(),\n-            id: ast::DUMMY_NODE_ID,\n-            node: ast::ItemKind::Const(\n-                ty,\n-                expr,\n-            ),\n-            vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n-            span,\n-            tokens: None,\n-        })\n-    ])\n-}"}, {"sha": "9925dd8ada0d51520cf413608243e35a690784dc", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,7 +1,8 @@\n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+register_diagnostics! {\n \n E0178: r##\"\n In types, the `+` type operator has low precedence, so it is often necessary\n@@ -420,9 +421,8 @@ Delete the offending feature attribute, or add it to the list of allowed\n features in the `-Z allow_features` flag.\n \"##,\n \n-}\n+;\n \n-register_diagnostics! {\n     E0539, // incorrect meta item\n     E0540, // multiple rustc_deprecated attributes\n     E0542, // missing 'since'\n@@ -432,17 +432,21 @@ register_diagnostics! {\n     E0546, // missing 'feature'\n     E0547, // missing 'issue'\n //  E0548, // replaced with a generic attribute input check\n-    E0549, // rustc_deprecated attribute must be paired with either stable or unstable attribute\n+    // rustc_deprecated attribute must be paired with either stable or unstable\n+    // attribute\n+    E0549,\n     E0550, // multiple deprecated attributes\n     E0551, // incorrect meta item\n     E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check\n     E0556, // malformed feature, expected just one word\n     E0584, // file for module `..` found at both .. and ..\n     E0629, // missing 'feature' (rustc_const_unstable)\n-    E0630, // rustc_const_unstable attribute must be paired with stable/unstable attribute\n+    // rustc_const_unstable attribute must be paired with stable/unstable\n+    // attribute\n+    E0630,\n     E0693, // incorrect `repr(align)` attribute format\n-    E0694, // an unknown tool name found in scoped attributes\n+//  E0694, // an unknown tool name found in scoped attributes\n     E0703, // invalid ABI\n     E0717, // rustc_promotable without stability attribute\n }"}, {"sha": "86979bdb1fb52777965d42c8a694186d88b12417", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -120,12 +120,6 @@ declare_features! (\n     /// macros disappear).\n     (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n-    /// Allows using the macros:\n-    /// + `__diagnostic_used`\n-    /// + `__register_diagnostic`\n-    /// +`__build_diagnostic_array`\n-    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n-\n     /// Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n     /// lets a function to be `const` when opted into with `#![feature(foo)]`.\n     (active, rustc_const_unstable, \"1.0.0\", None, None),"}, {"sha": "2c29e1ebf1493c4089fab7adaea5a7df4fcfa542", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -94,6 +94,11 @@ declare_features! (\n     /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n      Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n+    /// Allows using the macros:\n+    /// + `__diagnostic_used`\n+    /// + `__register_diagnostic`\n+    /// +`__build_diagnostic_array`\n+    (removed, rustc_diagnostic_macros, \"1.38.0\", None, None, None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "49efbce482fa36e29850d035b32d19fea0f6aef8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -18,7 +18,6 @@\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n \n@@ -123,11 +122,8 @@ scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n pub mod diagnostics {\n     #[macro_use]\n     pub mod macros;\n-    pub mod plugin;\n }\n \n-// N.B., this module needs to be declared first so diagnostics are\n-// registered before they are used.\n pub mod error_codes;\n \n pub mod util {\n@@ -182,5 +178,3 @@ pub mod ext {\n }\n \n pub mod early_buffered_lints;\n-\n-__build_diagnostic_array! { libsyntax, DIAGNOSTICS }"}, {"sha": "981f5f1f7b004ca6d209235962977d09c16e9fcd", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -8,7 +8,6 @@ use crate::parse::parser::Parser;\n use crate::parse::parser::emit_unclosed_delims;\n use crate::parse::token::TokenKind;\n use crate::tokenstream::{TokenStream, TokenTree};\n-use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust;\n use crate::symbol::Symbol;\n \n@@ -64,8 +63,6 @@ pub struct ParseSess {\n     pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n-    /// The registered diagnostics codes.\n-    crate registered_diagnostics: Lock<ErrorMap>,\n     /// Used to determine and report recursive module inclusions.\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n@@ -95,7 +92,6 @@ impl ParseSess {\n             config: FxHashSet::default(),\n             missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n-            registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),"}, {"sha": "2bc990574f7a878a838bec630a98415978506f96", "filename": "src/libsyntax_ext/error_codes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax_ext%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax_ext%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ferror_codes.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,9 +1,8 @@\n-use syntax::register_long_diagnostics;\n-\n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+syntax::register_diagnostics! {\n E0660: r##\"\n The argument to the `asm` macro is not well-formed.\n "}, {"sha": "631ab7a33106f2aa63ab765d78ab286ecab7545f", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -9,7 +9,6 @@\n #![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n-#![feature(rustc_diagnostic_macros)]\n \n extern crate proc_macro;\n "}, {"sha": "641e4b852e79f8441372d920b5c67088e325474a", "filename": "src/test/ui/feature-gate/allow-features-empty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Z allow_features=\n // Note: This test uses rustc internal flags because they will never stabilize.\n \n-#![feature(rustc_diagnostic_macros)] //~ ERROR\n-\n #![feature(rustc_const_unstable)] //~ ERROR\n \n #![feature(lang_items)] //~ ERROR"}, {"sha": "a87d105850327c911357c074af0e8b78fe908bbb", "filename": "src/test/ui/feature-gate/allow-features-empty.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,27 +1,21 @@\n-error[E0725]: the feature `rustc_diagnostic_macros` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:4:12\n-   |\n-LL | #![feature(rustc_diagnostic_macros)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:6:12\n+  --> $DIR/allow-features-empty.rs:4:12\n    |\n LL | #![feature(rustc_const_unstable)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error[E0725]: the feature `lang_items` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:8:12\n+  --> $DIR/allow-features-empty.rs:6:12\n    |\n LL | #![feature(lang_items)]\n    |            ^^^^^^^^^^\n \n error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:10:12\n+  --> $DIR/allow-features-empty.rs:8:12\n    |\n LL | #![feature(unknown_stdlib_feature)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0725`."}, {"sha": "de69e48a65fdfab5a04259db7d97f1de194c5ed1", "filename": "src/test/ui/feature-gate/allow-features.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,8 +1,6 @@\n-// compile-flags: -Z allow_features=rustc_diagnostic_macros,lang_items\n+// compile-flags: -Z allow_features=lang_items\n // Note: This test uses rustc internal flags because they will never stabilize.\n \n-#![feature(rustc_diagnostic_macros)]\n-\n #![feature(rustc_const_unstable)] //~ ERROR\n \n #![feature(lang_items)]"}, {"sha": "157dddf06ad1d6dbf28ebc214b1b16c0f4cbd9ee", "filename": "src/test/ui/feature-gate/allow-features.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -1,11 +1,11 @@\n error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n-  --> $DIR/allow-features.rs:6:12\n+  --> $DIR/allow-features.rs:4:12\n    |\n LL | #![feature(rustc_const_unstable)]\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features\n-  --> $DIR/allow-features.rs:10:12\n+  --> $DIR/allow-features.rs:8:12\n    |\n LL | #![feature(unknown_stdlib_feature)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "63c2c31fd30e625cc2368cc9074a2995cc4aeafb", "filename": "src/test/ui/feature-gates/feature-gate-rustc-diagnostic-macros.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.rs?ref=3c4a58622128887778c6fd7c35de66f3fa463708", "patch": "@@ -1,13 +0,0 @@\n-// Test that diagnostic macros are gated by `rustc_diagnostic_macros` feature\n-// gate\n-\n-__register_diagnostic!(E0001);\n-//~^ ERROR cannot find macro `__register_diagnostic!` in this scope\n-\n-fn main() {\n-    __diagnostic_used!(E0001);\n-    //~^ ERROR cannot find macro `__diagnostic_used!` in this scope\n-}\n-\n-__build_diagnostic_array!(DIAGNOSTICS);\n-//~^ ERROR cannot find macro `__build_diagnostic_array!` in this scope"}, {"sha": "676b8b9f056c1288c79909c5340a26eedffa3711", "filename": "src/test/ui/feature-gates/feature-gate-rustc-diagnostic-macros.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c4a58622128887778c6fd7c35de66f3fa463708/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr?ref=3c4a58622128887778c6fd7c35de66f3fa463708", "patch": "@@ -1,20 +0,0 @@\n-error: cannot find macro `__build_diagnostic_array!` in this scope\n-  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:12:1\n-   |\n-LL | __build_diagnostic_array!(DIAGNOSTICS);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: cannot find macro `__diagnostic_used!` in this scope\n-  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:8:5\n-   |\n-LL |     __diagnostic_used!(E0001);\n-   |     ^^^^^^^^^^^^^^^^^\n-\n-error: cannot find macro `__register_diagnostic!` in this scope\n-  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:4:1\n-   |\n-LL | __register_diagnostic!(E0001);\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "832aa3b1c8dfd3378d4b30ef74593f52fe733153", "filename": "src/tools/error_index_generator/build.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -14,9 +14,7 @@ fn main() {\n         if entry.file_name() == \"error_codes.rs\" {\n             println!(\"cargo:rerun-if-changed={}\", entry.path().to_str().unwrap());\n             let file = fs::read_to_string(entry.path()).unwrap()\n-                .replace(\"use syntax::{register_diagnostics, register_long_diagnostics};\", \"\")\n-                .replace(\"use syntax::register_diagnostics;\", \"\")\n-                .replace(\"use syntax::register_long_diagnostics;\", \"\");\n+                .replace(\"syntax::register_diagnostics!\", \"register_diagnostics!\");\n             let contents = format!(\"(|| {{\\n{}\\n}})();\", file);\n \n             fs::write(&out_dir.join(&format!(\"error_{}.rs\", idx)), &contents).unwrap();\n@@ -26,36 +24,31 @@ fn main() {\n     }\n \n     let mut all = String::new();\n-    all.push_str(\"fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\\n\");\n-    all.push_str(\"let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\\n\");\n-    all.push_str(r#\"\n-macro_rules! register_diagnostics {\n-    ($($code:tt),*) => {{\n-        long_codes.extend([$(\n-            stringify!($code),\n-        )*].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());\n-    }};\n-    ($($code:tt),*,) => {{\n-        long_codes.extend([$(\n-            stringify!($code),\n-        )*].iter().cloned().map(|s| (s, None)));\n-    }}\n-}\n+    all.push_str(r###\"\n+fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n+    let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n+    macro_rules! register_diagnostics {\n+        ($($ecode:ident: $message:expr,)*) => (\n+            register_diagnostics!{$($ecode:$message,)* ;}\n+        );\n \n-macro_rules! register_long_diagnostics {\n-    ($($code:tt: $description:tt),*) => {\n-        {long_codes.extend([$(\n-            (stringify!($code), Some(stringify!($description))),\n-        )*].iter());}\n-    };\n-    ($($code:tt: $description:tt),*,) => {\n-        {long_codes.extend([$(\n-            (stringify!($code), Some(stringify!($description))),\n-        )*].iter());}\n+        ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n+            $(\n+                {long_codes.extend([\n+                    (stringify!($ecode), Some(stringify!($message))),\n+                ].iter());}\n+            )*\n+            $(\n+                {long_codes.extend([\n+                    stringify!($code),\n+                ].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());}\n+            )*\n+        )\n     }\n-}\"#);\n+\"###);\n     for idx in 0..idx {\n         all.push_str(&format!(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/error_{}.rs\"));\"#, idx));\n+        all.push_str(\"\\n\");\n     }\n     all.push_str(\"\\nlong_codes\\n\");\n     all.push_str(\"}\\n\");"}, {"sha": "930290996861515c7317184a87b1a5bd39ba94ba", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a69fd76d275ddd2c81fdbae02a966d24658aaa/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=89a69fd76d275ddd2c81fdbae02a966d24658aaa", "patch": "@@ -15,6 +15,7 @@\n \n use std::path::Path;\n \n+const ERROR_CODE_COLS: usize = 80;\n const COLS: usize = 100;\n \n const LINES: usize = 3000;\n@@ -51,7 +52,13 @@ enum LIUState {\n /// Lines of this form are allowed to be overlength, because Markdown\n /// offers no way to split a line in the middle of a URL, and the lengths\n /// of URLs to external references are beyond our control.\n-fn line_is_url(line: &str) -> bool {\n+fn line_is_url(columns: usize, line: &str) -> bool {\n+    // more basic check for error_codes.rs, to avoid complexity in implementing two state machines\n+    if columns == ERROR_CODE_COLS {\n+        return line.starts_with(\"[\") &&\n+            line.contains(\"]:\") && line.contains(\"http\");\n+    }\n+\n     use self::LIUState::*;\n     let mut state: LIUState = EXP_COMMENT_START;\n     let is_url = |w: &str| w.starts_with(\"http://\") || w.starts_with(\"https://\");\n@@ -75,7 +82,7 @@ fn line_is_url(line: &str) -> bool {\n                 => state = EXP_END,\n \n             (_, w)\n-                if w.len() > COLS && is_url(w)\n+                if w.len() > columns && is_url(w)\n                 => state = EXP_END,\n \n             (_, _) => {}\n@@ -88,8 +95,8 @@ fn line_is_url(line: &str) -> bool {\n /// Returns `true` if `line` is allowed to be longer than the normal limit.\n /// Currently there is only one exception, for long URLs, but more\n /// may be added in the future.\n-fn long_line_is_ok(line: &str) -> bool {\n-    if line_is_url(line) {\n+fn long_line_is_ok(max_columns: usize, line: &str) -> bool {\n+    if line_is_url(max_columns, line) {\n         return true;\n     }\n \n@@ -144,6 +151,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n+        let max_columns = if filename == \"error_codes.rs\" {\n+            ERROR_CODE_COLS\n+        } else {\n+            COLS\n+        };\n+\n         let can_contain = contents.contains(\"// ignore-tidy-\") ||\n             contents.contains(\"# ignore-tidy-\");\n         let mut skip_cr = contains_ignore_directive(can_contain, &contents, \"cr\");\n@@ -162,11 +175,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n-            if line.chars().count() > COLS && !long_line_is_ok(line) {\n+            if line.chars().count() > max_columns &&\n+                !long_line_is_ok(max_columns, line) {\n                 suppressible_tidy_err!(\n                     err,\n                     skip_line_length,\n-                    &format!(\"line longer than {} chars\", COLS)\n+                    &format!(\"line longer than {} chars\", max_columns)\n                 );\n             }\n             if line.contains('\\t') {"}]}