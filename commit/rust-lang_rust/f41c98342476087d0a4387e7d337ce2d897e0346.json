{"sha": "f41c98342476087d0a4387e7d337ce2d897e0346", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MWM5ODM0MjQ3NjA4N2QwYTQzODdlN2QzMzdjZTJkODk3ZTAzNDY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T02:34:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T10:23:36Z"}, "message": "Don't complete non-macro item paths in impls and modules", "tree": {"sha": "1c9b8e9f5a3d26d921337f6f20501b38de6fcb94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9b8e9f5a3d26d921337f6f20501b38de6fcb94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41c98342476087d0a4387e7d337ce2d897e0346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41c98342476087d0a4387e7d337ce2d897e0346", "html_url": "https://github.com/rust-lang/rust/commit/f41c98342476087d0a4387e7d337ce2d897e0346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41c98342476087d0a4387e7d337ce2d897e0346/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "url": "https://api.github.com/repos/rust-lang/rust/commits/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "html_url": "https://github.com/rust-lang/rust/commit/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "df27e7a848a333e08ab431d38ff1a1e82f55eb25", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -110,7 +110,11 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if ctx.use_item_syntax.is_some() || ctx.is_path_disallowed() {\n+    if ctx.use_item_syntax.is_some()\n+        || ctx.is_path_disallowed()\n+        || ctx.expects_item()\n+        || ctx.expects_assoc_item()\n+    {\n         return None;\n     }\n     let potential_import_name = {"}, {"sha": "14d6ae54ecb3b6fa8444872b75371042765c7f10", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -49,35 +49,35 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n \n-    let has_trait_or_impl_parent = ctx.has_impl_or_trait_parent();\n+    let expects_assoc_item = ctx.expects_assoc_item();\n     let has_block_expr_parent = ctx.has_block_expr_parent();\n-    let has_item_list_parent = ctx.has_item_list_parent();\n+    let expects_item = ctx.expects_item();\n     if ctx.has_impl_or_trait_prev_sibling() {\n         add_keyword(ctx, acc, \"where\", \"where \");\n         return;\n     }\n     if ctx.previous_token_is(T![unsafe]) {\n-        if has_item_list_parent || has_block_expr_parent {\n+        if expects_item || has_block_expr_parent {\n             add_keyword(ctx, acc, \"fn\", \"fn $1($2) {\\n    $0\\n}\")\n         }\n \n-        if has_item_list_parent || has_block_expr_parent {\n+        if expects_item || has_block_expr_parent {\n             add_keyword(ctx, acc, \"trait\", \"trait $1 {\\n    $0\\n}\");\n             add_keyword(ctx, acc, \"impl\", \"impl $1 {\\n    $0\\n}\");\n         }\n \n         return;\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent {\n+    if expects_item || expects_assoc_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"fn\", \"fn $1($2) {\\n    $0\\n}\");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"use\", \"use \");\n         add_keyword(ctx, acc, \"impl\", \"impl $1 {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"trait\", \"trait $1 {\\n    $0\\n}\");\n     }\n \n-    if has_item_list_parent {\n+    if expects_item {\n         add_keyword(ctx, acc, \"enum\", \"enum $1 {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"struct\", \"struct $0\");\n         add_keyword(ctx, acc, \"union\", \"union $1 {\\n    $0\\n}\");\n@@ -101,24 +101,23 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"else\", \"else {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"else if\", \"else if $1 {\\n    $0\\n}\");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"mod\", \"mod $0\");\n     }\n     if ctx.has_ident_or_ref_pat_parent() {\n         add_keyword(ctx, acc, \"mut\", \"mut \");\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent {\n+    if expects_item || expects_assoc_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"const\", \"const \");\n         add_keyword(ctx, acc, \"type\", \"type \");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"static\", \"static \");\n     };\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"extern\", \"extern \");\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent || ctx.is_match_arm\n-    {\n+    if expects_item || expects_assoc_item || has_block_expr_parent || ctx.is_match_arm {\n         add_keyword(ctx, acc, \"unsafe\", \"unsafe \");\n     }\n     if ctx.in_loop_body {\n@@ -130,7 +129,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"break\", \"break\");\n         }\n     }\n-    if has_item_list_parent || ctx.has_impl_parent() || ctx.has_field_list_parent() {\n+    if expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_record_field() {\n         add_keyword(ctx, acc, \"pub(crate)\", \"pub(crate) \");\n         add_keyword(ctx, acc, \"pub\", \"pub \");\n     }"}, {"sha": "a90325e0675ee5c03c121dc2637752ac0d88ad2a", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -21,6 +21,18 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     };\n     let context_module = ctx.scope.module();\n \n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        if let PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n+            let module_scope = module.scope(ctx.db, context_module);\n+            for (name, def) in module_scope {\n+                if let ScopeDef::MacroDef(macro_def) = def {\n+                    acc.add_macro(ctx, Some(name.to_string()), macro_def);\n+                }\n+            }\n+        }\n+        return;\n+    }\n+\n     // Add associated types on type parameters and `Self`.\n     resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {\n         acc.add_type_alias(ctx, alias);"}, {"sha": "cbac88240744e4fc5dbd7eec262694664b25b6e8", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -12,6 +12,14 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.is_path_disallowed() {\n         return;\n     }\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        ctx.scope.process_all_names(&mut |name, def| {\n+            if let ScopeDef::MacroDef(macro_def) = def {\n+                acc.add_macro(ctx, Some(name.to_string()), macro_def);\n+            }\n+        });\n+        return;\n+    }\n \n     if let Some(hir::Adt::Enum(e)) =\n         ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n@@ -647,7 +655,7 @@ fn f() {}\n     }\n \n     #[test]\n-    fn completes_type_or_trait_in_impl_block() {\n+    fn completes_target_type_or_trait_in_impl_block() {\n         check(\n             r#\"\n trait MyTrait {}\n@@ -662,4 +670,21 @@ impl My$0\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn only_completes_macros_in_assoc_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+\n+impl MyStruct {\n+    $0\n+}\n+\"#,\n+            expect![[r#\"\n+                ma foo! macro_rules! foo\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "b7e116dba67e633c37d9abb3ed68c5cb43e0278a", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -127,6 +127,7 @@ pub(crate) struct CompletionContext<'a> {\n \n     no_completion_required: bool,\n }\n+\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a RootDatabase,\n@@ -281,33 +282,33 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }\n \n-    pub(crate) fn has_impl_or_trait_parent(&self) -> bool {\n+    pub(crate) fn expects_assoc_item(&self) -> bool {\n         matches!(\n             self.completion_location,\n             Some(ImmediateLocation::Trait) | Some(ImmediateLocation::Impl)\n         )\n     }\n \n-    pub(crate) fn has_block_expr_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::BlockExpr))\n+    pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n     }\n \n-    pub(crate) fn has_item_list_parent(&self) -> bool {\n+    pub(crate) fn expects_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n     }\n \n+    pub(crate) fn has_block_expr_parent(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::BlockExpr))\n+    }\n+\n     pub(crate) fn has_ident_or_ref_pat_parent(&self) -> bool {\n         matches!(\n             self.completion_location,\n             Some(ImmediateLocation::IdentPat) | Some(ImmediateLocation::RefPatOrExpr)\n         )\n     }\n \n-    pub(crate) fn has_impl_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n-    }\n-\n-    pub(crate) fn has_field_list_parent(&self) -> bool {\n+    pub(crate) fn expect_record_field(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::RecordFieldList))\n     }\n \n@@ -320,10 +321,10 @@ impl<'a> CompletionContext<'a> {\n             || self.record_pat_syntax.is_some()\n             || self.attribute_under_caret.is_some()\n             || self.mod_declaration_under_caret.is_some()\n-            || self.has_impl_or_trait_parent()\n     }\n \n     fn fill_keyword_patterns(&mut self, file_with_fake_ident: &SyntaxNode, offset: TextSize) {\n+        dbg!(file_with_fake_ident);\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n         self.previous_token = previous_token(syntax_element.clone());"}, {"sha": "f7bf4d638cfb77c4f2671ed608ceeb83a68d0bda", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41c98342476087d0a4387e7d337ce2d897e0346/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=f41c98342476087d0a4387e7d337ce2d897e0346", "patch": "@@ -92,9 +92,15 @@ fn test_has_ref_parent() {\n }\n \n pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> bool {\n-    match not_same_range_ancestor(element) {\n-        Some(it) => it.kind() == SOURCE_FILE || it.kind() == ITEM_LIST,\n-        None => true,\n+    let it = element\n+        .ancestors()\n+        .take_while(|it| it.text_range() == element.text_range())\n+        .last()\n+        .map(|it| (it.kind(), it.parent()));\n+    match it {\n+        Some((_, Some(it))) => it.kind() == SOURCE_FILE || it.kind() == ITEM_LIST,\n+        Some((MACRO_ITEMS, None) | (SOURCE_FILE, None)) => true,\n+        _ => false,\n     }\n }\n #[test]"}]}