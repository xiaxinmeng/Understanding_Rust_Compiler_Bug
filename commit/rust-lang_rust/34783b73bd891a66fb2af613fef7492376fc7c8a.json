{"sha": "34783b73bd891a66fb2af613fef7492376fc7c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzgzYjczYmQ4OTFhNjZmYjJhZjYxM2ZlZjc0OTIzNzZmYzdjOGE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T21:37:19Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T22:45:18Z"}, "message": "Remove outdated `IndirectlyMutableLocals`\n\n`MaybeMutBorrowedLocals` serves the same purpose and has a better name.", "tree": {"sha": "ea75cc470586cb1fbfcd0c713d899bdb4b5fcef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea75cc470586cb1fbfcd0c713d899bdb4b5fcef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34783b73bd891a66fb2af613fef7492376fc7c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34783b73bd891a66fb2af613fef7492376fc7c8a", "html_url": "https://github.com/rust-lang/rust/commit/34783b73bd891a66fb2af613fef7492376fc7c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34783b73bd891a66fb2af613fef7492376fc7c8a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d9dadcccca9efc63f30fa1c9adee00effb860d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9dadcccca9efc63f30fa1c9adee00effb860d4", "html_url": "https://github.com/rust-lang/rust/commit/7d9dadcccca9efc63f30fa1c9adee00effb860d4"}], "stats": {"total": 138, "additions": 0, "deletions": 138}, "files": [{"sha": "85bf342c8a39a95da5efd20d1367a1656cd88247", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/7d9dadcccca9efc63f30fa1c9adee00effb860d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9dadcccca9efc63f30fa1c9adee00effb860d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=7d9dadcccca9efc63f30fa1c9adee00effb860d4", "patch": "@@ -1,136 +0,0 @@\n-use rustc::mir::visit::Visitor;\n-use rustc::mir::{self, Local, Location};\n-use rustc::ty::{self, TyCtxt};\n-use rustc_index::bit_set::BitSet;\n-use rustc_span::DUMMY_SP;\n-\n-use crate::dataflow::{self, GenKillSet};\n-\n-/// Whether a borrow to a `Local` has been created that could allow that `Local` to be mutated\n-/// indirectly. This could either be a mutable reference (`&mut`) or a shared borrow if the type of\n-/// that `Local` allows interior mutability. Operations that can mutate local's indirectly include:\n-/// assignments through a pointer (`*p = 42`), function calls, drop terminators and inline assembly.\n-///\n-/// If this returns false for a `Local` at a given statement (or terminator), that `Local` could\n-/// not possibly have been mutated indirectly prior to that statement.\n-#[derive(Copy, Clone)]\n-pub struct IndirectlyMutableLocals<'mir, 'tcx> {\n-    body: &'mir mir::Body<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-}\n-\n-impl<'mir, 'tcx> IndirectlyMutableLocals<'mir, 'tcx> {\n-    pub fn new(\n-        tcx: TyCtxt<'tcx>,\n-        body: &'mir mir::Body<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> Self {\n-        IndirectlyMutableLocals { body, tcx, param_env }\n-    }\n-\n-    fn transfer_function<'a>(\n-        &self,\n-        trans: &'a mut GenKillSet<Local>,\n-    ) -> TransferFunction<'a, 'mir, 'tcx> {\n-        TransferFunction { body: self.body, tcx: self.tcx, param_env: self.param_env, trans }\n-    }\n-}\n-\n-impl<'mir, 'tcx> dataflow::BitDenotation<'tcx> for IndirectlyMutableLocals<'mir, 'tcx> {\n-    type Idx = Local;\n-\n-    fn name() -> &'static str {\n-        \"mut_borrowed_locals\"\n-    }\n-\n-    fn bits_per_block(&self) -> usize {\n-        self.body.local_decls.len()\n-    }\n-\n-    fn start_block_effect(&self, _entry_set: &mut BitSet<Local>) {\n-        // Nothing is borrowed on function entry\n-    }\n-\n-    fn statement_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n-        let stmt = &self.body[loc.block].statements[loc.statement_index];\n-        self.transfer_function(trans).visit_statement(stmt, loc);\n-    }\n-\n-    fn terminator_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n-        let terminator = self.body[loc.block].terminator();\n-        self.transfer_function(trans).visit_terminator(terminator, loc);\n-    }\n-\n-    fn propagate_call_return(\n-        &self,\n-        _in_out: &mut BitSet<Local>,\n-        _call_bb: mir::BasicBlock,\n-        _dest_bb: mir::BasicBlock,\n-        _dest_place: &mir::Place<'tcx>,\n-    ) {\n-        // Nothing to do when a call returns successfully\n-    }\n-}\n-\n-impl<'mir, 'tcx> dataflow::BottomValue for IndirectlyMutableLocals<'mir, 'tcx> {\n-    // bottom = unborrowed\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n-/// A `Visitor` that defines the transfer function for `IndirectlyMutableLocals`.\n-struct TransferFunction<'a, 'mir, 'tcx> {\n-    trans: &'a mut GenKillSet<Local>,\n-    body: &'mir mir::Body<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-}\n-\n-impl<'tcx> TransferFunction<'_, '_, 'tcx> {\n-    /// Returns `true` if this borrow would allow mutation of the `borrowed_place`.\n-    fn borrow_allows_mutation(\n-        &self,\n-        kind: mir::BorrowKind,\n-        borrowed_place: &mir::Place<'tcx>,\n-    ) -> bool {\n-        match kind {\n-            mir::BorrowKind::Mut { .. } => true,\n-\n-            mir::BorrowKind::Shared | mir::BorrowKind::Shallow | mir::BorrowKind::Unique => {\n-                !borrowed_place.ty(self.body, self.tcx).ty.is_freeze(\n-                    self.tcx,\n-                    self.param_env,\n-                    DUMMY_SP,\n-                )\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for TransferFunction<'_, '_, 'tcx> {\n-    fn visit_rvalue(&mut self, rvalue: &mir::Rvalue<'tcx>, location: Location) {\n-        if let mir::Rvalue::Ref(_, kind, ref borrowed_place) = *rvalue {\n-            if self.borrow_allows_mutation(kind, borrowed_place) {\n-                if !borrowed_place.is_indirect() {\n-                    self.trans.gen(borrowed_place.local);\n-                }\n-            }\n-        }\n-\n-        self.super_rvalue(rvalue, location);\n-    }\n-\n-    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n-        // This method purposely does nothing except call `super_terminator`. It exists solely to\n-        // document the subtleties around drop terminators.\n-\n-        self.super_terminator(terminator, location);\n-\n-        if let mir::TerminatorKind::Drop { location: _, .. }\n-        | mir::TerminatorKind::DropAndReplace { location: _, .. } = &terminator.kind\n-        {\n-            // Although drop terminators mutably borrow the location being dropped, that borrow\n-            // cannot live beyond the drop terminator because the dropped location is invalidated.\n-        }\n-    }\n-}"}, {"sha": "acea31857818bcc1fd89e4372275467b2a19303e", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34783b73bd891a66fb2af613fef7492376fc7c8a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34783b73bd891a66fb2af613fef7492376fc7c8a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=34783b73bd891a66fb2af613fef7492376fc7c8a", "patch": "@@ -20,11 +20,9 @@ use super::drop_flag_effects_for_location;\n use super::on_lookup_result_bits;\n \n mod borrowed_locals;\n-mod indirect_mutation;\n mod storage_liveness;\n \n pub use self::borrowed_locals::*;\n-pub use self::indirect_mutation::IndirectlyMutableLocals;\n pub use self::storage_liveness::*;\n \n pub(super) mod borrows;"}]}