{"sha": "c9f15013e0edc80989bf40b358bcefee14be5050", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjE1MDEzZTBlZGM4MDk4OWJmNDBiMzU4YmNlZmVlMTRiZTUwNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T10:49:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T10:49:14Z"}, "message": "Auto merge of #32883 - sanxiyn:nameless-defkey, r=arielb1\n\nDo not encode name when encoding DefKey\n\nSince name is encoded anyway, name in DefKey is redundant.\n\ncc #32719.", "tree": {"sha": "5abf4d0ff7bfd64897a3b0f0d6fde0f806dec05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abf4d0ff7bfd64897a3b0f0d6fde0f806dec05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f15013e0edc80989bf40b358bcefee14be5050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f15013e0edc80989bf40b358bcefee14be5050", "html_url": "https://github.com/rust-lang/rust/commit/c9f15013e0edc80989bf40b358bcefee14be5050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f15013e0edc80989bf40b358bcefee14be5050/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374d262b3a917df948df211eba44be1334f7236d", "url": "https://api.github.com/repos/rust-lang/rust/commits/374d262b3a917df948df211eba44be1334f7236d", "html_url": "https://github.com/rust-lang/rust/commit/374d262b3a917df948df211eba44be1334f7236d"}, {"sha": "2fd1f3e24a98d95b03ce74a480bca66dc6259fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd1f3e24a98d95b03ce74a480bca66dc6259fda", "html_url": "https://github.com/rust-lang/rust/commit/2fd1f3e24a98d95b03ce74a480bca66dc6259fda"}], "stats": {"total": 154, "additions": 132, "deletions": 22}, "files": [{"sha": "49512a5018e7db9c0d2cdaed95f87d7c2fbfc8dd", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=c9f15013e0edc80989bf40b358bcefee14be5050", "patch": "@@ -49,9 +49,9 @@ use std::fmt::Debug;\n use rbml::reader;\n use rbml::writer::Encoder;\n use rbml;\n-use serialize;\n-use serialize::{Decodable, Decoder, DecoderHelpers, Encodable};\n-use serialize::EncoderHelpers;\n+use rustc_serialize as serialize;\n+use rustc_serialize::{Decodable, Decoder, DecoderHelpers};\n+use rustc_serialize::{Encodable, EncoderHelpers};\n \n #[cfg(test)] use std::io::Cursor;\n #[cfg(test)] use syntax::parse;\n@@ -445,7 +445,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n                                   autoderef: u32,\n                                   method: &ty::MethodCallee<'tcx>) {\n-    use serialize::Encoder;\n+    use rustc_serialize::Encoder;\n \n     rbml_w.emit_struct(\"MethodCallee\", 4, |rbml_w| {\n         rbml_w.emit_struct_field(\"autoderef\", 0, |rbml_w| {\n@@ -561,7 +561,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n     }\n \n     fn emit_upvar_capture(&mut self, ecx: &e::EncodeContext, capture: &ty::UpvarCapture) {\n-        use serialize::Encoder;\n+        use rustc_serialize::Encoder;\n \n         self.emit_enum(\"UpvarCapture\", |this| {\n             match *capture {\n@@ -589,7 +589,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n     fn emit_auto_adjustment<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,\n                                 adj: &adjustment::AutoAdjustment<'tcx>) {\n-        use serialize::Encoder;\n+        use rustc_serialize::Encoder;\n \n         self.emit_enum(\"AutoAdjustment\", |this| {\n             match *adj {\n@@ -621,7 +621,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n     fn emit_autoref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,\n                         autoref: &adjustment::AutoRef<'tcx>) {\n-        use serialize::Encoder;\n+        use rustc_serialize::Encoder;\n \n         self.emit_enum(\"AutoRef\", |this| {\n             match autoref {\n@@ -643,7 +643,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n     fn emit_auto_deref_ref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,\n                                auto_deref_ref: &adjustment::AutoDerefRef<'tcx>) {\n-        use serialize::Encoder;\n+        use rustc_serialize::Encoder;\n \n         self.emit_struct(\"AutoDerefRef\", 2, |this| {\n             this.emit_struct_field(\"autoderefs\", 0, |this| auto_deref_ref.autoderefs.encode(this));"}, {"sha": "b5b27586a7f76481468576fc0cf15b328e0235da", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c9f15013e0edc80989bf40b358bcefee14be5050", "patch": "@@ -17,6 +17,7 @@ use self::Family::*;\n use astencode::decode_inlined_item;\n use cstore::{self, crate_metadata};\n use common::*;\n+use def_key;\n use encoder::def_to_u64;\n use index;\n use tls_context;\n@@ -49,7 +50,7 @@ use std::str;\n \n use rbml::reader;\n use rbml;\n-use serialize::Decodable;\n+use rustc_serialize::Decodable;\n use syntax::attr;\n use syntax::parse::token::{self, IdentInterner};\n use syntax::ast;\n@@ -1739,7 +1740,11 @@ pub fn def_key(cdata: Cmd, id: DefIndex) -> hir_map::DefKey {\n     match reader::maybe_get_doc(item_doc, tag_def_key) {\n         Some(def_key_doc) => {\n             let mut decoder = reader::Decoder::new(def_key_doc);\n-            hir_map::DefKey::decode(&mut decoder).unwrap()\n+            let simple_key = def_key::DefKey::decode(&mut decoder).unwrap();\n+            let name = reader::maybe_get_doc(item_doc, tag_paths_data_name).map(|name| {\n+                token::intern(name.as_str_slice())\n+            });\n+            def_key::recover_def_key(simple_key, name)\n         }\n         None => {\n             bug!(\"failed to find block with tag {:?} for item with family {:?}\","}, {"sha": "95fc932f8e111dcc437bc9d6f17ede04b658baa5", "filename": "src/librustc_metadata/def_key.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fdef_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fdef_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdef_key.rs?ref=c9f15013e0edc80989bf40b358bcefee14be5050", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefIndex;\n+use rustc::hir::map as hir_map;\n+use syntax::ast::Name;\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+pub struct DefKey {\n+    pub parent: Option<DefIndex>,\n+    pub disambiguated_data: DisambiguatedDefPathData,\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+pub struct DisambiguatedDefPathData {\n+    pub data: DefPathData,\n+    pub disambiguator: u32,\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+pub enum DefPathData {\n+    CrateRoot,\n+    Misc,\n+    Impl,\n+    TypeNs,\n+    ValueNs,\n+    MacroDef,\n+    ClosureExpr,\n+    TypeParam,\n+    LifetimeDef,\n+    EnumVariant,\n+    Field,\n+    StructCtor,\n+    Initializer,\n+    Binding,\n+}\n+\n+pub fn simplify_def_key(key: hir_map::DefKey) -> DefKey {\n+    let data = DisambiguatedDefPathData {\n+        data: simplify_def_path_data(key.disambiguated_data.data),\n+        disambiguator: key.disambiguated_data.disambiguator,\n+    };\n+    DefKey {\n+        parent: key.parent,\n+        disambiguated_data: data,\n+    }\n+}\n+\n+fn simplify_def_path_data(data: hir_map::DefPathData) -> DefPathData {\n+    match data {\n+        hir_map::DefPathData::CrateRoot => DefPathData::CrateRoot,\n+        hir_map::DefPathData::InlinedRoot(_) => bug!(\"unexpected DefPathData\"),\n+        hir_map::DefPathData::Misc => DefPathData::Misc,\n+        hir_map::DefPathData::Impl => DefPathData::Impl,\n+        hir_map::DefPathData::TypeNs(_) => DefPathData::TypeNs,\n+        hir_map::DefPathData::ValueNs(_) => DefPathData::ValueNs,\n+        hir_map::DefPathData::MacroDef(_) => DefPathData::MacroDef,\n+        hir_map::DefPathData::ClosureExpr => DefPathData::ClosureExpr,\n+        hir_map::DefPathData::TypeParam(_) => DefPathData::TypeParam,\n+        hir_map::DefPathData::LifetimeDef(_) => DefPathData::LifetimeDef,\n+        hir_map::DefPathData::EnumVariant(_) => DefPathData::EnumVariant,\n+        hir_map::DefPathData::Field(_) => DefPathData::Field,\n+        hir_map::DefPathData::StructCtor => DefPathData::StructCtor,\n+        hir_map::DefPathData::Initializer => DefPathData::Initializer,\n+        hir_map::DefPathData::Binding(_) => DefPathData::Binding,\n+    }\n+}\n+\n+pub fn recover_def_key(key: DefKey, name: Option<Name>) -> hir_map::DefKey {\n+    let data = hir_map::DisambiguatedDefPathData {\n+        data: recover_def_path_data(key.disambiguated_data.data, name),\n+        disambiguator: key.disambiguated_data.disambiguator,\n+    };\n+    hir_map::DefKey {\n+        parent: key.parent,\n+        disambiguated_data: data,\n+    }\n+}\n+\n+fn recover_def_path_data(data: DefPathData, name: Option<Name>) -> hir_map::DefPathData {\n+    match data {\n+        DefPathData::CrateRoot => hir_map::DefPathData::CrateRoot,\n+        DefPathData::Misc => hir_map::DefPathData::Misc,\n+        DefPathData::Impl => hir_map::DefPathData::Impl,\n+        DefPathData::TypeNs => hir_map::DefPathData::TypeNs(name.unwrap()),\n+        DefPathData::ValueNs => hir_map::DefPathData::ValueNs(name.unwrap()),\n+        DefPathData::MacroDef => hir_map::DefPathData::MacroDef(name.unwrap()),\n+        DefPathData::ClosureExpr => hir_map::DefPathData::ClosureExpr,\n+        DefPathData::TypeParam => hir_map::DefPathData::TypeParam(name.unwrap()),\n+        DefPathData::LifetimeDef => hir_map::DefPathData::LifetimeDef(name.unwrap()),\n+        DefPathData::EnumVariant => hir_map::DefPathData::EnumVariant(name.unwrap()),\n+        DefPathData::Field => hir_map::DefPathData::Field(name.unwrap()),\n+        DefPathData::StructCtor => hir_map::DefPathData::StructCtor,\n+        DefPathData::Initializer => hir_map::DefPathData::Initializer,\n+        DefPathData::Binding => hir_map::DefPathData::Binding(name.unwrap()),\n+    }\n+}"}, {"sha": "40a7f91154f97c58ebeb27f45dd3342bd65ede13", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c9f15013e0edc80989bf40b358bcefee14be5050", "patch": "@@ -17,6 +17,7 @@ use astencode::encode_inlined_item;\n use common::*;\n use cstore;\n use decoder;\n+use def_key;\n use tyencode;\n use index::{self, IndexData};\n \n@@ -35,7 +36,7 @@ use rustc::mir::mir_map::MirMap;\n use rustc::session::config;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n-use serialize::Encodable;\n+use rustc_serialize::Encodable;\n use std::cell::RefCell;\n use std::io::prelude::*;\n use std::io::{Cursor, SeekFrom};\n@@ -53,6 +54,7 @@ use rbml::writer::Encoder;\n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::Visitor;\n use rustc::hir::intravisit;\n+use rustc::hir::map::DefKey;\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n@@ -101,24 +103,22 @@ fn encode_def_id(rbml_w: &mut Encoder, id: DefId) {\n     rbml_w.wr_tagged_u64(tag_def_id, def_to_u64(id));\n }\n \n+fn encode_def_key(rbml_w: &mut Encoder, key: DefKey) {\n+    let simple_key = def_key::simplify_def_key(key);\n+    rbml_w.start_tag(tag_def_key);\n+    simple_key.encode(rbml_w);\n+    rbml_w.end_tag();\n+}\n+\n /// For every DefId that we create a metadata item for, we include a\n /// serialized copy of its DefKey, which allows us to recreate a path.\n fn encode_def_id_and_key(ecx: &EncodeContext,\n                          rbml_w: &mut Encoder,\n                          def_id: DefId)\n {\n     encode_def_id(rbml_w, def_id);\n-    encode_def_key(ecx, rbml_w, def_id);\n-}\n-\n-fn encode_def_key(ecx: &EncodeContext,\n-                  rbml_w: &mut Encoder,\n-                  def_id: DefId)\n-{\n-    rbml_w.start_tag(tag_def_key);\n     let def_key = ecx.tcx.map.def_key(def_id);\n-    def_key.encode(rbml_w);\n-    rbml_w.end_tag();\n+    encode_def_key(rbml_w, def_key);\n }\n \n fn encode_trait_ref<'a, 'tcx>(rbml_w: &mut Encoder,"}, {"sha": "f7ea60c4078dc6379c506ed63b62b8571913d469", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f15013e0edc80989bf40b358bcefee14be5050/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=c9f15013e0edc80989bf40b358bcefee14be5050", "patch": "@@ -31,7 +31,7 @@\n \n extern crate flate;\n extern crate rbml;\n-extern crate serialize;\n+extern crate serialize as rustc_serialize; // used by deriving\n \n #[macro_use]\n extern crate rustc;\n@@ -48,6 +48,7 @@ pub mod diagnostics;\n \n pub mod astencode;\n pub mod common;\n+pub mod def_key;\n pub mod tyencode;\n pub mod tydecode;\n pub mod encoder;"}]}