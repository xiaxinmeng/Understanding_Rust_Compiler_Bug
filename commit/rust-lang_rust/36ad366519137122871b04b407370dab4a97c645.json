{"sha": "36ad366519137122871b04b407370dab4a97c645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWQzNjY1MTkxMzcxMjI4NzFiMDRiNDA3MzcwZGFiNGE5N2M2NDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-08T21:52:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:14Z"}, "message": "core::rt: Add a test of standalone use of the runtime", "tree": {"sha": "b9fae688caebd9f82e9b409dc2b975f3c0737604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fae688caebd9f82e9b409dc2b975f3c0737604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ad366519137122871b04b407370dab4a97c645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ad366519137122871b04b407370dab4a97c645", "html_url": "https://github.com/rust-lang/rust/commit/36ad366519137122871b04b407370dab4a97c645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ad366519137122871b04b407370dab4a97c645/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd9aa9755149725e39d8024d693ed76f92a30df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd9aa9755149725e39d8024d693ed76f92a30df", "html_url": "https://github.com/rust-lang/rust/commit/bfd9aa9755149725e39d8024d693ed76f92a30df"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "5dee9a7773155c33b0f079a8fbf3929ae42ab688", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36ad366519137122871b04b407370dab4a97c645/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ad366519137122871b04b407370dab4a97c645/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=36ad366519137122871b04b407370dab4a97c645", "patch": "@@ -131,41 +131,21 @@ pub mod tube;\n ///\n /// # Arguments\n ///\n-/// * `main` - A C-abi function that takes no arguments and returns `c_void`.\n-///   It is a wrapper around the user-defined `main` function, and will be run\n-///   in a task.\n /// * `argc` & `argv` - The argument vector. On Unix this information is used\n ///   by os::args.\n /// * `crate_map` - Runtime information about the executing crate, mostly for logging\n ///\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n-pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n+pub fn start(_argc: int, _argv: **c_char, _crate_map: *u8, main: ~fn()) -> int {\n \n     use self::sched::{Scheduler, Task};\n     use self::uv::uvio::UvEventLoop;\n-    use sys::Closure;\n-    use ptr;\n-    use cast;\n \n     let loop_ = ~UvEventLoop::new();\n     let mut sched = ~Scheduler::new(loop_);\n-\n-    let main_task = ~do Task::new(&mut sched.stack_pool) {\n-\n-        unsafe {\n-            // `main` is an `fn() -> ()` that doesn't take an environment\n-            // XXX: Could also call this as an `extern \"Rust\" fn` once they work\n-            let main = Closure {\n-                code: main as *(),\n-                env: ptr::null(),\n-            };\n-            let mainfn: &fn() = cast::transmute(main);\n-\n-            mainfn();\n-        }\n-    };\n+    let main_task = ~Task::new(&mut sched.stack_pool, main);\n \n     sched.task_queue.push_back(main_task);\n     sched.run();"}, {"sha": "ce32cb4c282f219a5579813881f157a93b084d6f", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36ad366519137122871b04b407370dab4a97c645/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ad366519137122871b04b407370dab4a97c645/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=36ad366519137122871b04b407370dab4a97c645", "patch": "@@ -424,7 +424,10 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {\n     use libc::getenv;\n-    use rt::start;\n+    use rt;\n+    use sys::Closure;\n+    use ptr;\n+    use cast;\n \n     unsafe {\n         let use_old_rt = do str::as_c_str(\"RUST_NEWRT\") |s| {\n@@ -434,7 +437,19 @@ pub fn start(main: *u8, argc: int, argv: **c_char,\n             return rust_start(main as *c_void, argc as c_int, argv,\n                               crate_map as *c_void) as int;\n         } else {\n-            return start(main, argc, argv, crate_map);\n+            return do rt::start(argc, argv, crate_map) {\n+                unsafe {\n+                    // `main` is an `fn() -> ()` that doesn't take an environment\n+                    // XXX: Could also call this as an `extern \"Rust\" fn` once they work\n+                    let main = Closure {\n+                        code: main as *(),\n+                        env: ptr::null(),\n+                    };\n+                    let mainfn: &fn() = cast::transmute(main);\n+\n+                    mainfn();\n+                }\n+            };\n         }\n     }\n "}, {"sha": "fb08cda3b2577adae7db35058dbede475b96cde7", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36ad366519137122871b04b407370dab4a97c645/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ad366519137122871b04b407370dab4a97c645/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=36ad366519137122871b04b407370dab4a97c645", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A simple test of starting the runtime manually\n+\n+#[start]\n+fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n+    do core::rt::start(argc, argv, crate_map) {\n+        debug!(\"creating my own runtime is joy\");\n+    }\n+}\n\\ No newline at end of file"}]}