{"sha": "be4f9f5becf15d0319a2862f5e76b7993a56951a", "node_id": "C_kwDOAAsO6NoAKGJlNGY5ZjViZWNmMTVkMDMxOWEyODYyZjVlNzZiNzk5M2E1Njk1MWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-02T06:14:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-02T06:14:51Z"}, "message": "Rollup merge of #110512 - compiler-errors:fix-elaboration-with-associated-type-bounds, r=spastorino\n\nFix elaboration with associated type bounds\n\nWhen computing a trait's supertrait predicates, do not add any associated type *trait* bounds to that list of supertrait predicates. This is because supertrait predicates are expected to have the same `Self` type as the trait.\n\nFor example, given:\n\n```rust\ntrait Foo: Bar<Assoc: Send>\n```\n\nBefore, we would compute that the supertrait predicates of `T: Foo` are `T: Bar` and `<T as Bar>::Assoc: Send`. However, the last bound is a trait predicate for a totally different type than `T`, and existing code that uses supertrait bounds such as vtable construction, closure fn signature deduction, etc. all rely on the invariant that we have a list of predicates for self type `T`.\n\nFixes #76593\n\nThe reason for all the extra diagnostic noise is that we're recomputing predicates with a different filter now. These diagnostics should be deduplicated for any end-user though.\n\n---\n\nThis does bring up an interesting question -- is the predicate `<T as Bar>::Assoc: Send` an implied bound of `T: Foo`? Because currently the only bounds implied by a (non-alias) trait are its supertraits. I guess I could fix this too, but it would require even more changes, and I'm inclined to punt this question along.", "tree": {"sha": "2fa6834ca5a2e67f7ea99923e38b4bf6afda9d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa6834ca5a2e67f7ea99923e38b4bf6afda9d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be4f9f5becf15d0319a2862f5e76b7993a56951a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUKpbCRBK7hj4Ov3rIwAAE/IIAAtgZu9UZqu+dO621fpxaAkl\nwpPDELMFRu0Hg2wU4vZvCm5KXNUD/4ShBOCe+NJJe0cUJCysS1Me2lHznAnUp9AM\nUydqJR9HNsOMkNVobEzfw8jeDBiJRsyX5C1BUAKY9/xdlNc5mJL+WRCpi7KF52CL\nDPlFXuuxrXeH8k81W+PSwHM0vISTS8a336hzQHwRh+aAH9IviGCRiUctOpAHZeVb\nvcCTuxbC2XYsJnjCbctpP5OP5erfe+adft7dTJ57lK+DjW26f0AJbacQQPlMWyrQ\nind+TmJDmGCxqdtm3lOa8WQlVtygKn632TsvHcxNQXKoQKMCeeku62+fJVeT/VM=\n=LA8g\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fa6834ca5a2e67f7ea99923e38b4bf6afda9d56\nparent f379a58bf2aca99429870610529e24c97abaf1b8\nparent bec7193072649d7493091de1191fd739645037d6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683008091 +0530\ncommitter GitHub <noreply@github.com> 1683008091 +0530\n\nRollup merge of #110512 - compiler-errors:fix-elaboration-with-associated-type-bounds, r=spastorino\n\nFix elaboration with associated type bounds\n\nWhen computing a trait's supertrait predicates, do not add any associated type *trait* bounds to that list of supertrait predicates. This is because supertrait predicates are expected to have the same `Self` type as the trait.\n\nFor example, given:\n\n```rust\ntrait Foo: Bar<Assoc: Send>\n```\n\nBefore, we would compute that the supertrait predicates of `T: Foo` are `T: Bar` and `<T as Bar>::Assoc: Send`. However, the last bound is a trait predicate for a totally different type than `T`, and existing code that uses supertrait bounds such as vtable construction, closure fn signature deduction, etc. all rely on the invariant that we have a list of predicates for self type `T`.\n\nFixes #76593\n\nThe reason for all the extra diagnostic noise is that we're recomputing predicates with a different filter now. These diagnostics should be deduplicated for any end-user though.\n\n---\n\nThis does bring up an interesting question -- is the predicate `<T as Bar>::Assoc: Send` an implied bound of `T: Foo`? Because currently the only bounds implied by a (non-alias) trait are its supertraits. I guess I could fix this too, but it would require even more changes, and I'm inclined to punt this question along.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be4f9f5becf15d0319a2862f5e76b7993a56951a", "html_url": "https://github.com/rust-lang/rust/commit/be4f9f5becf15d0319a2862f5e76b7993a56951a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be4f9f5becf15d0319a2862f5e76b7993a56951a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f379a58bf2aca99429870610529e24c97abaf1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f379a58bf2aca99429870610529e24c97abaf1b8", "html_url": "https://github.com/rust-lang/rust/commit/f379a58bf2aca99429870610529e24c97abaf1b8"}, {"sha": "bec7193072649d7493091de1191fd739645037d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec7193072649d7493091de1191fd739645037d6", "html_url": "https://github.com/rust-lang/rust/commit/bec7193072649d7493091de1191fd739645037d6"}], "stats": {"total": 591, "additions": 445, "deletions": 146}, "files": [{"sha": "6cb008bc5f8a09118c78dc6732ff423282182f86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -56,6 +56,9 @@ use std::slice;\n #[derive(Debug)]\n pub struct PathSeg(pub DefId, pub usize);\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct OnlySelfBounds(pub bool);\n+\n pub trait AstConv<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx>;\n \n@@ -670,6 +673,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Ty<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let (substs, arg_count) = self.create_substs_for_ast_path(\n             trait_ref_span,\n@@ -706,6 +710,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n+                only_self_bounds,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -741,6 +746,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let hir_id = trait_ref.hir_ref_id;\n         let binding_span = None;\n@@ -766,6 +772,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         )\n     }\n \n@@ -777,6 +784,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         let binding_span = Some(span);\n         let constness = ty::BoundConstness::NotConst;\n@@ -799,6 +807,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         );\n     }\n \n@@ -947,6 +956,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ast_bounds: I,\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n@@ -964,11 +974,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         param_ty,\n                         bounds,\n                         false,\n+                        only_self_bounds,\n                     );\n                 }\n                 &hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => {\n                     self.instantiate_lang_item_trait_ref(\n-                        lang_item, span, hir_id, args, param_ty, bounds,\n+                        lang_item,\n+                        span,\n+                        hir_id,\n+                        args,\n+                        param_ty,\n+                        bounds,\n+                        only_self_bounds,\n                     );\n                 }\n                 hir::GenericBound::Outlives(lifetime) => {\n@@ -1006,8 +1023,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Bounds<'tcx> {\n-        self.compute_bounds_inner(param_ty, ast_bounds)\n+        let mut bounds = Bounds::default();\n+        self.add_bounds(\n+            param_ty,\n+            ast_bounds.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            only_self_bounds,\n+        );\n+        debug!(?bounds);\n+\n+        bounds\n     }\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n@@ -1029,17 +1057,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds_inner(param_ty, &result)\n-    }\n-\n-    fn compute_bounds_inner(\n-        &self,\n-        param_ty: Ty<'tcx>,\n-        ast_bounds: &[hir::GenericBound<'_>],\n-    ) -> Bounds<'tcx> {\n         let mut bounds = Bounds::default();\n-\n-        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(\n+            param_ty,\n+            result.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            OnlySelfBounds(true),\n+        );\n         debug!(?bounds);\n \n         bounds\n@@ -1062,6 +1087,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n         constness: ty::BoundConstness,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1361,8 +1387,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n-                self.add_bounds(param_ty, ast_bounds.iter(), bounds, projection_ty.bound_vars());\n+                //\n+                // NOTE: If `only_self_bounds` is true, do NOT expand this associated\n+                // type bound into a trait predicate, since we only want to add predicates\n+                // for the `Self` type.\n+                if !only_self_bounds.0 {\n+                    let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n+                    self.add_bounds(\n+                        param_ty,\n+                        ast_bounds.iter(),\n+                        bounds,\n+                        projection_ty.bound_vars(),\n+                        only_self_bounds,\n+                    );\n+                }\n             }\n         }\n         Ok(())\n@@ -1403,6 +1441,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 dummy_self,\n                 &mut bounds,\n                 false,\n+                // FIXME: This should be `true`, but we don't really handle\n+                // associated type bounds or type aliases in objects in a way\n+                // that makes this meaningful, I think.\n+                OnlySelfBounds(false),\n             ) {\n                 potential_assoc_types.extend(cur_potential_assoc_types);\n             }"}, {"sha": "948b903e509adf90925d74432a03697291492862", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,5 +1,5 @@\n use super::ItemCtxt;\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -26,7 +26,7 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n-    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n@@ -67,7 +67,7 @@ fn opaque_type_bounds<'tcx>(\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);"}, {"sha": "83470342a7660bfd9e2c5cbcb2578df43b1de0ba", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,4 +1,4 @@\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use crate::bounds::Bounds;\n use crate::collect::ItemCtxt;\n use crate::constrained_generic_params as cgp;\n@@ -14,9 +14,6 @@ use rustc_middle::ty::{GenericPredicates, ToPredicate};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n-#[derive(Debug)]\n-struct OnlySelfBounds(bool);\n-\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n@@ -99,8 +96,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n             | ItemKind::Struct(_, generics)\n             | ItemKind::Union(_, generics) => generics,\n \n-            ItemKind::Trait(_, _, generics, ..) | ItemKind::TraitAlias(generics, _) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id.to_def_id()));\n+            ItemKind::Trait(_, _, generics, self_bounds, ..)\n+            | ItemKind::TraitAlias(generics, self_bounds) => {\n+                is_trait = Some(self_bounds);\n                 generics\n             }\n             ItemKind::OpaqueTy(OpaqueTy { generics, .. }) => generics,\n@@ -122,10 +120,14 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n \n     // Below we'll consider the bounds on the type parameters (including `Self`)\n     // and the explicit where-clauses, but to get the full set of predicates\n-    // on a trait we need to add in the supertrait bounds and bounds found on\n-    // associated types.\n-    if let Some(_trait_ref) = is_trait {\n-        predicates.extend(tcx.implied_predicates_of(def_id).predicates.iter().cloned());\n+    // on a trait we must also consider the bounds that follow the trait's name,\n+    // like `trait Foo: A + B + C`.\n+    if let Some(self_bounds) = is_trait {\n+        predicates.extend(\n+            icx.astconv()\n+                .compute_bounds(tcx.types.self_param, self_bounds, OnlySelfBounds(false))\n+                .predicates(),\n+        );\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -225,7 +227,13 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                 }\n \n                 let mut bounds = Bounds::default();\n-                icx.astconv().add_bounds(ty, bound_pred.bounds.iter(), &mut bounds, bound_vars);\n+                icx.astconv().add_bounds(\n+                    ty,\n+                    bound_pred.bounds.iter(),\n+                    &mut bounds,\n+                    bound_vars,\n+                    OnlySelfBounds(false),\n+                );\n                 predicates.extend(bounds.predicates());\n             }\n \n@@ -608,7 +616,7 @@ pub(super) fn implied_predicates_with_filter(\n     let (superbounds, where_bounds_that_match) = match filter {\n         PredicateFilter::All => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(false)),\n             // Also include all where clause bounds\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -620,7 +628,7 @@ pub(super) fn implied_predicates_with_filter(\n         ),\n         PredicateFilter::SelfOnly => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(true)),\n             // Include where clause bounds for `Self`\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -774,32 +782,35 @@ impl<'tcx> ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        ast_generics\n-            .predicates\n-            .iter()\n-            .filter_map(|wp| match wp {\n-                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n-                _ => None,\n-            })\n-            .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n-                    Some(ty)\n-                } else if !only_self_bounds.0 {\n-                    Some(self.to_ty(bp.bounded_ty))\n-                } else {\n-                    None\n-                };\n-                let bvars = self.tcx.late_bound_vars(bp.hir_id);\n-\n-                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n-                    |(_, b, _)| match assoc_name {\n-                        Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n-                        None => true,\n-                    },\n-                )\n-            })\n-            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars))\n-            .collect()\n+        let mut bounds = Bounds::default();\n+\n+        for predicate in ast_generics.predicates {\n+            let hir::WherePredicate::BoundPredicate(predicate) = predicate else {\n+                continue;\n+            };\n+\n+            let bound_ty = if predicate.is_param_bound(param_def_id.to_def_id()) {\n+                ty\n+            } else if !only_self_bounds.0 {\n+                self.to_ty(predicate.bounded_ty)\n+            } else {\n+                continue;\n+            };\n+\n+            let bound_vars = self.tcx.late_bound_vars(predicate.hir_id);\n+            self.astconv().add_bounds(\n+                bound_ty,\n+                predicate.bounds.iter().filter(|bound| {\n+                    assoc_name\n+                        .map_or(true, |assoc_name| self.bound_defines_assoc_item(bound, assoc_name))\n+                }),\n+                &mut bounds,\n+                bound_vars,\n+                only_self_bounds,\n+            );\n+        }\n+\n+        bounds.predicates().collect()\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n@@ -817,19 +828,3 @@ impl<'tcx> ItemCtxt<'tcx> {\n         }\n     }\n }\n-\n-/// Converts a specific `GenericBound` from the AST into a set of\n-/// predicates that apply to the self type. A vector is returned\n-/// because this can be anywhere from zero predicates (`T: ?Sized` adds no\n-/// predicates) to one (`T: Foo`) to many (`T: Bar<X = i32>` adds `T: Bar`\n-/// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(\n-    astconv: &dyn AstConv<'tcx>,\n-    param_ty: Ty<'tcx>,\n-    bound: &'tcx hir::GenericBound<'tcx>,\n-    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n-) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-    let mut bounds = Bounds::default();\n-    astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n-    bounds.predicates().collect()\n-}"}, {"sha": "961457b75794aef72d41536dfd949bc768e11eb9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -116,7 +116,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::ops::Not;\n \n-use astconv::AstConv;\n+use astconv::{AstConv, OnlySelfBounds};\n use bounds::Bounds;\n \n fluent_messages! { \"../messages.ftl\" }\n@@ -531,6 +531,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         self_ty,\n         &mut bounds,\n         true,\n+        OnlySelfBounds(false),\n     );\n \n     bounds"}, {"sha": "1fbb70c7808ee9a8e74a9d2e642ae47640ce7932", "filename": "tests/rustdoc-ui/issues/issue-105742.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -19,13 +19,17 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Index<<Self as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Self as SVec>::Item> as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n@@ -34,11 +38,15 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n > {\n     type Item<'a, T>;\n "}, {"sha": "b63176c914905e81f2a3f3c697ad53e0e8cb0b17", "filename": "tests/rustdoc-ui/issues/issue-105742.stderr", "status": "modified", "additions": 163, "deletions": 35, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -5,7 +5,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -21,7 +21,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -31,13 +31,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -47,13 +47,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -63,13 +63,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -79,13 +79,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -95,13 +95,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -111,13 +111,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -133,7 +133,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -149,7 +149,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -165,7 +165,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -181,7 +181,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -191,13 +191,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -207,13 +207,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -223,13 +223,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -239,13 +239,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -255,13 +255,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -271,13 +271,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -317,13 +317,141 @@ LL | |  > {\n    | |__^ ...because it uses `Self` as a type parameter\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -333,13 +461,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -348,7 +476,7 @@ help: add missing generic argument\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n    |                                          +++\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 29 previous errors\n \n Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "4b8bf52c374929d7dc96e44dff93d6d48e1cb3e9", "filename": "tests/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -193,10 +193,13 @@ trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW1<T>\n where\n     T: Iterator<Item: Copy, Item: Send>,"}, {"sha": "08721eff7b0ced75456b0d1700bd7389b4c1691b", "filename": "tests/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -367,141 +367,165 @@ LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:196:34\n+  --> $DIR/duplicate.rs:194:34\n+   |\n+LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n+   |\n+LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:198:37\n+  --> $DIR/duplicate.rs:200:37\n+   |\n+LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:200:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:202:29\n+  --> $DIR/duplicate.rs:205:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Send>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:208:29\n+  --> $DIR/duplicate.rs:211:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Copy>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:214:32\n+  --> $DIR/duplicate.rs:217:32\n    |\n LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:252:40\n+  --> $DIR/duplicate.rs:255:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:254:44\n+  --> $DIR/duplicate.rs:257:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:256:43\n+  --> $DIR/duplicate.rs:259:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:240:34\n+  --> $DIR/duplicate.rs:243:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Send>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:244:34\n+  --> $DIR/duplicate.rs:247:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Copy>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:248:37\n+  --> $DIR/duplicate.rs:251:37\n    |\n LL |     type A: Iterator<Item: 'static, Item: 'static>;\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "b6f37cb908e4edc6770cf9494cc6add44d73ce1c", "filename": "tests/ui/associated-type-bounds/supertrait-defines-ty.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+// Make sure that we don't look into associated type bounds when looking for\n+// supertraits that define an associated type. Fixes #76593.\n+\n+#![feature(associated_type_bounds)]\n+\n+trait Load: Sized {\n+    type Blob;\n+}\n+\n+trait Primitive: Load<Blob = Self> {}\n+\n+trait BlobPtr: Primitive {}\n+\n+trait CleanPtr: Load<Blob: BlobPtr> {\n+    fn to_blob(&self) -> Self::Blob;\n+}\n+\n+impl Load for () {\n+    type Blob = Self;\n+}\n+impl Primitive for () {}\n+impl BlobPtr for () {}\n+\n+fn main() {}"}, {"sha": "bf8202ac15267e876507e96952eb9e08782e4110", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -10,6 +10,7 @@ pub trait Parse {\n \n pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n //~^ ERROR expected associated constant bound\n+//~| ERROR expected associated constant bound\n //~| ERROR expected type\n \n fn no_help() -> Mode::Cool {}"}, {"sha": "d7e5e50cba82d61ae46d6653f2bec2588ee381a9", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -8,7 +8,7 @@ LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n    |                                   help: try using the variant's enum: `Mode`\n \n error[E0573]: expected type, found variant `Mode::Cool`\n-  --> $DIR/assoc_const_eq_diagnostic.rs:15:17\n+  --> $DIR/assoc_const_eq_diagnostic.rs:16:17\n    |\n LL | fn no_help() -> Mode::Cool {}\n    |                 ^^^^^^^^^^\n@@ -28,6 +28,18 @@ note: associated constant defined here\n LL |     const MODE: Mode;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: expected associated constant bound, found type\n+  --> $DIR/assoc_const_eq_diagnostic.rs:11:28\n+   |\n+LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+   |                            ^^^^^^^^^^^^^^^^^ help: if equating a const, try wrapping with braces: `MODE = { const }`\n+   |\n+note: associated constant defined here\n+  --> $DIR/assoc_const_eq_diagnostic.rs:8:5\n+   |\n+LL |     const MODE: Mode;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0573`."}, {"sha": "cbf1bb219a07bc4258f372d8b45141570af968a0", "filename": "tests/ui/error-codes/E0719.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,5 +1,6 @@\n trait Foo: Iterator<Item = i32, Item = i32> {}\n //~^ ERROR is already specified\n+//~| ERROR is already specified\n \n type Unit = ();\n "}, {"sha": "e302f406d02b0d098d5605cd2547f5407fd2bec0", "filename": "tests/ui/error-codes/E0719.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -7,13 +7,21 @@ LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/E0719.rs:6:42\n+  --> $DIR/E0719.rs:1:33\n+   |\n+LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n+   |                     ----------  ^^^^^^^^^^ re-bound here\n+   |                     |\n+   |                     `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/E0719.rs:7:42\n    |\n LL | fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {\n    |                               ---------  ^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "ecb06271cd9b484f95972bf1851e5a1892d2989a", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -10,6 +10,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: Bar>(x: &T) {\n     x.a();"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "fdc6b805889ed7cc70b216fe050c8ab447233879", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -5,10 +5,16 @@ LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "7375b8c819ca74cd5703532c28e7b9a76c78219b", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "8cf64944ac1c3f32e2a6cecfec1fd93c9232f13d", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -11,6 +11,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: ~const Bar>(x: &T) {\n     //[yn,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`"}, {"sha": "7a152914b6964c475df28c22f40f3a17bf713dee", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -1,5 +1,5 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^"}, {"sha": "05921b2c36e46e16e0c940ee6ff480b9129b2c89", "filename": "tests/ui/traits/issue-38404.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftraits%2Fissue-38404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftraits%2Fissue-38404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -2,5 +2,6 @@ trait A<T>: std::ops::Add<Self> + Sized {}\n trait B<T>: A<T> {}\n trait C<T>: A<dyn B<T, Output=usize>> {}\n //~^ ERROR the trait `B` cannot be made into an object\n+//~| ERROR the trait `B` cannot be made into an object\n \n fn main() {}"}, {"sha": "f8625f53b78fa7c4aaf097c0f76b00b949af527a", "filename": "tests/ui/traits/issue-38404.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -12,6 +12,20 @@ LL | trait A<T>: std::ops::Add<Self> + Sized {}\n LL | trait B<T>: A<T> {}\n    |       - this trait cannot be made into an object...\n \n-error: aborting due to previous error\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/issue-38404.rs:3:15\n+   |\n+LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38404.rs:1:13\n+   |\n+LL | trait A<T>: std::ops::Add<Self> + Sized {}\n+   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n+LL | trait B<T>: A<T> {}\n+   |       - this trait cannot be made into an object...\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "e7e62c077394e8a3cd9f32a4303561db917df0fe", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -3,6 +3,7 @@ fn foo1<T:Copy<U>, U>(x: T) {}\n \n trait Trait: Copy<dyn Send> {}\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n+//~| ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "a3517af877cc727a7c60e8cefff5fb7e982cb9fb", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be4f9f5becf15d0319a2862f5e76b7993a56951a/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=be4f9f5becf15d0319a2862f5e76b7993a56951a", "patch": "@@ -15,37 +15,45 @@ LL | trait Trait: Copy<dyn Send> {}\n    |              expected 0 generic arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n+   |\n+LL | trait Trait: Copy<dyn Send> {}\n+   |              ^^^^---------- help: remove these generics\n+   |              |\n+   |              expected 0 generic arguments\n+\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:8:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n    |                     expected 0 generic arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:11:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n    |                         ^^^^---- help: remove these generics\n    |                         |\n    |                         expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^     - help: remove this generic argument\n    |               |\n    |               expected 0 generic arguments\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}