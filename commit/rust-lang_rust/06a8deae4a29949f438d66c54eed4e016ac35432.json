{"sha": "06a8deae4a29949f438d66c54eed4e016ac35432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YThkZWFlNGEyOTk0OWY0MzhkNjZjNTRlZWQ0ZTAxNmFjMzU0MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-08T11:55:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T11:55:27Z"}, "message": "Merge #1969\n\n1969: restore coloring of attributes r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "695c569cd28f84ca2dd1b75a8d4b3e71f1dabe09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695c569cd28f84ca2dd1b75a8d4b3e71f1dabe09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a8deae4a29949f438d66c54eed4e016ac35432", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnHkvCRBK7hj4Ov3rIwAAdHIIAJ67t81fp41c4f/lsWhnus+r\ntg95Bn2TbFmWJayu/ehFyMhC+bGmdJL1b/J7MnREpuwUbV1XBqM7D6KIDXoRAtUd\n8E9JS1WELh4q9hu/sEJz3JyuMF6GXALs5hALG80R7tvDRh42LgsDZnKsFMyfw/7h\n6V8LtI6Ew0cYWLBgdGD6Q0+KE7SYVqfBvC2mxPz11f+PMPVlxxWUI5WJzY3QdEdO\nhNW69Jal3UduZS2gGsOI5RMSPMvyZnwU7x0lPSk/lIkA2OB9Ggro0n9ySr4Z28up\n20liifnpK7GaOOGc1tjlCTAKEXh/SpggeSh8ZBY1csPeYV6OwAcbUuGnsjyGFWs=\n=SrC0\n-----END PGP SIGNATURE-----\n", "payload": "tree 695c569cd28f84ca2dd1b75a8d4b3e71f1dabe09\nparent 92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc\nparent 6503add6e3c900ea7ded37199ea58f43bb57b051\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570535727 +0000\ncommitter GitHub <noreply@github.com> 1570535727 +0000\n\nMerge #1969\n\n1969: restore coloring of attributes r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a8deae4a29949f438d66c54eed4e016ac35432", "html_url": "https://github.com/rust-lang/rust/commit/06a8deae4a29949f438d66c54eed4e016ac35432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a8deae4a29949f438d66c54eed4e016ac35432/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "html_url": "https://github.com/rust-lang/rust/commit/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc"}, {"sha": "6503add6e3c900ea7ded37199ea58f43bb57b051", "url": "https://api.github.com/repos/rust-lang/rust/commits/6503add6e3c900ea7ded37199ea58f43bb57b051", "html_url": "https://github.com/rust-lang/rust/commit/6503add6e3c900ea7ded37199ea58f43bb57b051"}], "stats": {"total": 127, "additions": 82, "deletions": 45}, "files": [{"sha": "602beb4394180ba72c45d8c9baeb898a1a6f233f", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -43,8 +43,12 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n     );\n \n     // FIXME: cfg options?\n-    let default_cfg_options =\n-        get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+    let default_cfg_options = {\n+        let mut opts = get_rustc_cfg_options();\n+        opts.insert_atom(\"test\".into());\n+        opts.insert_atom(\"debug_assertion\".into());\n+        opts\n+    };\n \n     let (crate_graph, _crate_names) =\n         ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {"}, {"sha": "1bee3eb995e8086ca9f00921a5c7837fdd683082", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -36,26 +36,20 @@ impl CfgOptions {\n         self.check(&parse_cfg(attr))\n     }\n \n-    pub fn atom(mut self, name: SmolStr) -> CfgOptions {\n-        self.atoms.insert(name);\n-        self\n+    pub fn insert_atom(&mut self, key: SmolStr) {\n+        self.atoms.insert(key);\n     }\n \n-    pub fn key_value(mut self, key: SmolStr, value: SmolStr) -> CfgOptions {\n-        self.key_values.insert((key, value));\n-        self\n+    pub fn remove_atom(&mut self, name: &str) {\n+        self.atoms.remove(name);\n     }\n \n-    /// Shortcut to set features\n-    pub fn features(mut self, iter: impl IntoIterator<Item = SmolStr>) -> CfgOptions {\n-        for feat in iter {\n-            self = self.key_value(\"feature\".into(), feat);\n-        }\n-        self\n+    pub fn insert_key_value(&mut self, key: SmolStr, value: SmolStr) {\n+        self.key_values.insert((key, value));\n     }\n \n-    pub fn remove_atom(mut self, name: &SmolStr) -> CfgOptions {\n-        self.atoms.remove(name);\n-        self\n+    /// Shortcut to set features\n+    pub fn insert_features(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n+        iter.into_iter().for_each(|feat| self.insert_key_value(\"feature\".into(), feat));\n     }\n }"}, {"sha": "827424983560f6cd876eb55a1183ac92409e894f", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -278,15 +278,30 @@ macro_rules! crate_graph {\n             $crate_path:literal,\n             $($edition:literal,)?\n             [$($dep:literal),*]\n-            $(,$cfg:expr)?\n+            $(, cfg = {\n+                $($key:literal $(= $value:literal)?),*\n+                $(,)?\n+            })?\n         ),\n     )*) => {{\n         let mut res = $crate::mock::CrateGraphFixture::default();\n         $(\n             #[allow(unused_mut, unused_assignments)]\n             let mut edition = ra_db::Edition::Edition2018;\n             $(edition = ra_db::Edition::from_string($edition);)?\n-            let cfg_options = { ::ra_cfg::CfgOptions::default() $(; $cfg)? };\n+            let cfg_options = {\n+                #[allow(unused_mut)]\n+                let mut cfg = ::ra_cfg::CfgOptions::default();\n+                $(\n+                    $(\n+                        if 0 == 0 $(+ { drop($value); 1})? {\n+                            cfg.insert_atom($key.into());\n+                        }\n+                        $(cfg.insert_key_value($key.into(), $value.into());)?\n+                    )*\n+                )?\n+                cfg\n+            };\n             res.0.push((\n                 $crate_name.to_string(),\n                 ($crate_path.to_string(), edition, cfg_options, vec![$($dep.to_string()),*])"}, {"sha": "8c6b40aaf2a0dfbbec6afa3382d664958d058442", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -7,7 +7,6 @@ mod mod_resolution;\n use std::sync::Arc;\n \n use insta::assert_snapshot;\n-use ra_cfg::CfgOptions;\n use ra_db::SourceDatabase;\n use test_utils::covers;\n \n@@ -561,12 +560,12 @@ fn cfg_test() {\n         \"#,\n         crate_graph! {\n             \"main\": (\"/main.rs\", [\"std\"]),\n-            \"std\": (\"/lib.rs\", [], CfgOptions::default()\n-                .atom(\"test\".into())\n-                .key_value(\"feature\".into(), \"foo\".into())\n-                .key_value(\"feature\".into(), \"bar\".into())\n-                .key_value(\"opt\".into(), \"42\".into())\n-            ),\n+            \"std\": (\"/lib.rs\", [], cfg = {\n+                \"test\",\n+                \"feature\" = \"foo\",\n+                \"feature\" = \"bar\",\n+                \"opt\" = \"42\",\n+            }),\n         },\n     );\n "}, {"sha": "c12326643c994ccec034f944451e27c05db6b619", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n \n use insta::assert_snapshot;\n \n-use ra_cfg::CfgOptions;\n use ra_db::{salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n     algo,\n@@ -62,7 +61,7 @@ impl S {\n \"#,\n     );\n     db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"foo\"], CfgOptions::default().atom(\"test\".into())),\n+        \"main\": (\"/main.rs\", [\"foo\"], cfg = { \"test\" }),\n         \"foo\": (\"/foo.rs\", []),\n     });\n     assert_eq!(\"(i32, {unknown}, i32, {unknown})\", type_at_pos(&db, pos));"}, {"sha": "2d92fe1c502cac7b1148971d34c8b9fd8fd0471c", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -325,7 +325,8 @@ impl Analysis {\n         let file_id = FileId(0);\n         // FIXME: cfg options\n         // Default to enable test for single file.\n-        let cfg_options = CfgOptions::default().atom(\"test\".into());\n+        let mut cfg_options = CfgOptions::default();\n+        cfg_options.insert_atom(\"test\".into());\n         crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);"}, {"sha": "b39c4d3717a7ad89efab4c42c15f5199bf8d6c82", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -19,7 +19,7 @@\n .keyword\\.unsafe   { color: #DFAF8F; }\n .keyword\\.control  { color: #F0DFAF; font-weight: bold; }\n </style>\n-<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute text\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"type\">Foo</span> {\n     <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"type\">i32</span>,\n     <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"type\">i32</span>,"}, {"sha": "1d290387c41883dca3753b1d9bcf378f106a35ec", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -97,6 +97,9 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n             ATTR => \"attribute\",\n             NAME_REF => {\n+                if node.ancestors().any(|it| it.kind() == ATTR) {\n+                    continue;\n+                }\n                 if let Some(name_ref) = node.as_node().cloned().and_then(ast::NameRef::cast) {\n                     // FIXME: try to reuse the SourceAnalyzers\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);"}, {"sha": "0eb684de5d41f4121cde7546eae1adb5318edff1", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -98,8 +98,12 @@ impl WorldState {\n         }\n \n         // FIXME: Read default cfgs from config\n-        let default_cfg_options =\n-            get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+        let default_cfg_options = {\n+            let mut opts = get_rustc_cfg_options();\n+            opts.insert_atom(\"test\".into());\n+            opts.insert_atom(\"debug_assertion\".into());\n+            opts\n+        };\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();"}, {"sha": "8b8663a78fcf1bfb9c535780cced76e7645a5c40", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a8deae4a29949f438d66c54eed4e016ac35432/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=06a8deae4a29949f438d66c54eed4e016ac35432", "patch": "@@ -134,13 +134,16 @@ impl ProjectWorkspace {\n                             json_project::Edition::Edition2015 => Edition::Edition2015,\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n                         };\n-                        let mut cfg_options = default_cfg_options.clone();\n-                        for name in &krate.atom_cfgs {\n-                            cfg_options = cfg_options.atom(name.into());\n-                        }\n-                        for (key, value) in &krate.key_value_cfgs {\n-                            cfg_options = cfg_options.key_value(key.into(), value.into());\n-                        }\n+                        let cfg_options = {\n+                            let mut opts = default_cfg_options.clone();\n+                            for name in &krate.atom_cfgs {\n+                                opts.insert_atom(name.into());\n+                            }\n+                            for (key, value) in &krate.key_value_cfgs {\n+                                opts.insert_key_value(key.into(), value.into());\n+                            }\n+                            opts\n+                        };\n                         crates.insert(\n                             crate_id,\n                             crate_graph.add_crate_root(file_id, edition, cfg_options),\n@@ -171,7 +174,12 @@ impl ProjectWorkspace {\n                 for krate in sysroot.crates() {\n                     if let Some(file_id) = load(krate.root(&sysroot)) {\n                         // Crates from sysroot have `cfg(test)` disabled\n-                        let cfg_options = default_cfg_options.clone().remove_atom(&\"test\".into());\n+                        let cfg_options = {\n+                            let mut opts = default_cfg_options.clone();\n+                            opts.remove_atom(\"test\");\n+                            opts\n+                        };\n+\n                         let crate_id =\n                             crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n                         sysroot_crates.insert(krate, crate_id);\n@@ -202,9 +210,11 @@ impl ProjectWorkspace {\n                         let root = tgt.root(&cargo);\n                         if let Some(file_id) = load(root) {\n                             let edition = pkg.edition(&cargo);\n-                            let cfg_options = default_cfg_options\n-                                .clone()\n-                                .features(pkg.features(&cargo).iter().map(Into::into));\n+                            let cfg_options = {\n+                                let mut opts = default_cfg_options.clone();\n+                                opts.insert_features(pkg.features(&cargo).iter().map(Into::into));\n+                                opts\n+                            };\n                             let crate_id =\n                                 crate_graph.add_crate_root(file_id, edition, cfg_options);\n                             names.insert(crate_id, pkg.name(&cargo).to_string());\n@@ -310,6 +320,14 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n pub fn get_rustc_cfg_options() -> CfgOptions {\n     let mut cfg_options = CfgOptions::default();\n \n+    // Some nightly-only cfgs, which are required for stdlib\n+    {\n+        cfg_options.insert_atom(\"target_thread_local\".into());\n+        for &target_has_atomic in [\"16\", \"32\", \"64\", \"8\", \"cas\", \"ptr\"].iter() {\n+            cfg_options.insert_key_value(\"target_has_atomic\".into(), target_has_atomic.into())\n+        }\n+    }\n+\n     match (|| -> Result<_> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n         let output = Command::new(\"rustc\").args(&[\"--print\", \"cfg\", \"-O\"]).output()?;\n@@ -321,11 +339,11 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n         Ok(rustc_cfgs) => {\n             for line in rustc_cfgs.lines() {\n                 match line.find('=') {\n-                    None => cfg_options = cfg_options.atom(line.into()),\n+                    None => cfg_options.insert_atom(line.into()),\n                     Some(pos) => {\n                         let key = &line[..pos];\n                         let value = line[pos + 1..].trim_matches('\"');\n-                        cfg_options = cfg_options.key_value(key.into(), value.into());\n+                        cfg_options.insert_key_value(key.into(), value.into());\n                     }\n                 }\n             }"}]}