{"sha": "e65214441dd9b6ec4eff3821d988818ecb53abf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTIxNDQ0MWRkOWI2ZWM0ZWZmMzgyMWQ5ODg4MThlY2I1M2FiZjY=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-10-03T10:27:42Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-08T09:23:12Z"}, "message": "Add `Option::filter()` according to RFC 2124", "tree": {"sha": "a43b09c4cac76d339f17ddae9ad07ae9ed4c349b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43b09c4cac76d339f17ddae9ad07ae9ed4c349b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65214441dd9b6ec4eff3821d988818ecb53abf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65214441dd9b6ec4eff3821d988818ecb53abf6", "html_url": "https://github.com/rust-lang/rust/commit/e65214441dd9b6ec4eff3821d988818ecb53abf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65214441dd9b6ec4eff3821d988818ecb53abf6/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "html_url": "https://github.com/rust-lang/rust/commit/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "63c846b25eca511f005b080cbe3c331b9fa02831", "filename": "src/libcore/option.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e65214441dd9b6ec4eff3821d988818ecb53abf6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65214441dd9b6ec4eff3821d988818ecb53abf6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e65214441dd9b6ec4eff3821d988818ecb53abf6", "patch": "@@ -607,6 +607,45 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns `None` if the option is `None`, otherwise calls `predicate`\n+    /// with the wrapped value and returns:\n+    ///\n+    /// - `Some(t)` if `predicate` returns `true` (where `t` is the wrapped\n+    ///   value), and\n+    /// - `None` if `predicate` returns `false`.\n+    ///\n+    /// This function works similar to `Iterator::filter()`. You can imagine\n+    /// the `Option<T>` being an iterator over one or zero elements. `filter()`\n+    /// lets you decide which elements to keep.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(option_filter)]\n+    ///\n+    /// fn is_even(n: &i32) -> bool {\n+    ///     n % 2 == 0\n+    /// }\n+    ///\n+    /// assert_eq!(None.filter(is_even), None);\n+    /// assert_eq!(Some(3).filter(is_even), None);\n+    /// assert_eq!(Some(4).filter(is_even), Some(4));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_filter\", issue = \"45860\")]\n+    pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n+        match self {\n+            Some(x) => {\n+                if predicate(&x) {\n+                    Some(x)\n+                } else {\n+                    None\n+                }\n+            }\n+            None => None,\n+        }\n+    }\n+\n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     ///\n     /// # Examples"}]}