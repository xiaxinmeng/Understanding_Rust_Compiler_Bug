{"sha": "d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "node_id": "C_kwDOAAsO6NoAKGQ4YjVhM2VhYTkyN2MwYjg3MzBkM2ZiM2U0Y2QwNzMxYmJlNDg4MTM", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T03:39:50Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T03:39:50Z"}, "message": "Fix to examples", "tree": {"sha": "b1472ac5eac53a945aaa9cc0955d2c4a4be37990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1472ac5eac53a945aaa9cc0955d2c4a4be37990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "html_url": "https://github.com/rust-lang/rust/commit/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e74f6ff54fc6c0d266387a3f04730abd43d69901", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74f6ff54fc6c0d266387a3f04730abd43d69901", "html_url": "https://github.com/rust-lang/rust/commit/e74f6ff54fc6c0d266387a3f04730abd43d69901"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "637b8dc53fefd6045253163f4eedde382035def8", "filename": "example/mini_core.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "patch": "@@ -17,6 +17,9 @@ pub trait Sized {}\n #[lang = \"destruct\"]\n pub trait Destruct {}\n \n+#[lang = \"tuple_trait\"]\n+pub trait Tuple {}\n+\n #[lang = \"unsize\"]\n pub trait Unsize<T: ?Sized> {}\n \n@@ -396,7 +399,7 @@ pub struct PhantomData<T: ?Sized>;\n \n #[lang = \"fn_once\"]\n #[rustc_paren_sugar]\n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: Tuple> {\n     #[lang = \"fn_once_output\"]\n     type Output;\n \n@@ -405,7 +408,7 @@ pub trait FnOnce<Args> {\n \n #[lang = \"fn_mut\"]\n #[rustc_paren_sugar]\n-pub trait FnMut<Args>: FnOnce<Args> {\n+pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n@@ -418,8 +421,8 @@ pub fn panic(_msg: &'static str) -> ! {\n     }\n }\n \n-#[lang = \"panic_no_unwind\"]\n-fn panic_no_unwind() -> ! {\n+#[lang = \"panic_cannot_unwind\"]\n+fn panic_cannot_unwind() -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n         intrinsics::abort();\n@@ -531,16 +534,22 @@ pub mod intrinsics {\n     use crate::Sized;\n \n     extern \"rust-intrinsic\" {\n+        #[rustc_safe_intrinsic]\n         pub fn abort() -> !;\n+        #[rustc_safe_intrinsic]\n         pub fn size_of<T>() -> usize;\n         pub fn size_of_val<T: ?Sized>(val: *const T) -> usize;\n+        #[rustc_safe_intrinsic]\n         pub fn min_align_of<T>() -> usize;\n         pub fn min_align_of_val<T: ?Sized>(val: *const T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn needs_drop<T: ?Sized>() -> bool;\n+        #[rustc_safe_intrinsic]\n         pub fn bitreverse<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n         pub fn unreachable() -> !;"}, {"sha": "993a31e68eabc1ce647b1177da81474a29670ace", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "patch": "@@ -85,6 +85,7 @@ fn start<T: Termination + 'static>(\n     main: fn() -> T,\n     argc: isize,\n     argv: *const *const u8,\n+    _sigpipe: u8,\n ) -> isize {\n     if argc == 3 {\n         unsafe { puts(*argv); }"}, {"sha": "12c0b39232347e63c6a18e0798e92482c98ddf6b", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d8b5a3eaa927c0b8730d3fb3e4cd0731bbe48813", "patch": "@@ -115,8 +115,8 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.const_uint(self.usize_type, i)\n     }\n \n-    fn const_u8(&self, _i: u8) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn const_u8(&self, i: u8) -> RValue<'gcc> {\n+        self.const_uint(self.type_u8(), i as u64)\n     }\n \n     fn const_real(&self, typ: Type<'gcc>, val: f64) -> RValue<'gcc> {"}]}