{"sha": "3d71e749a244890cd370d49963e747cf92f4a037", "node_id": "C_kwDOAAsO6NoAKDNkNzFlNzQ5YTI0NDg5MGNkMzcwZDQ5OTYzZTc0N2NmOTJmNGEwMzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T14:37:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T14:37:48Z"}, "message": "Auto merge of #90050 - michaelwoerister:fix-vtable-debug-name-crash-90019, r=wesleywiser\n\nErase late-bound regions before computing vtable debuginfo name.\n\nFixes #90019.\n\nThe `msvc_enum_fallback()` for computing enum type names needs to access the memory layout of niche enums in order to determine the type name. `compute_debuginfo_vtable_name()` did not properly erase regions before computing type names which made memory layout computation ICE when encountering un-erased regions.\n\nr? `@wesleywiser`", "tree": {"sha": "91367ad6fd885986b7bda1dfd975bc2a1ccb2751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91367ad6fd885986b7bda1dfd975bc2a1ccb2751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d71e749a244890cd370d49963e747cf92f4a037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d71e749a244890cd370d49963e747cf92f4a037", "html_url": "https://github.com/rust-lang/rust/commit/3d71e749a244890cd370d49963e747cf92f4a037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d71e749a244890cd370d49963e747cf92f4a037/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6162529a01473bbb2427fa27354cbafc3c514eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6162529a01473bbb2427fa27354cbafc3c514eee", "html_url": "https://github.com/rust-lang/rust/commit/6162529a01473bbb2427fa27354cbafc3c514eee"}, {"sha": "5929cf0d67c0678e599190007c6e62be6a6839f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5929cf0d67c0678e599190007c6e62be6a6839f7", "html_url": "https://github.com/rust-lang/rust/commit/5929cf0d67c0678e599190007c6e62be6a6839f7"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "accb54e464553292fcd567093f4743a4fa453122", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d71e749a244890cd370d49963e747cf92f4a037/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d71e749a244890cd370d49963e747cf92f4a037/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=3d71e749a244890cd370d49963e747cf92f4a037", "patch": "@@ -480,14 +480,11 @@ pub fn compute_debuginfo_vtable_name<'tcx>(\n     }\n \n     if let Some(trait_ref) = trait_ref {\n-        push_item_name(tcx, trait_ref.skip_binder().def_id, true, &mut vtable_name);\n+        let trait_ref =\n+            tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), trait_ref);\n+        push_item_name(tcx, trait_ref.def_id, true, &mut vtable_name);\n         visited.clear();\n-        push_generic_params_internal(\n-            tcx,\n-            trait_ref.skip_binder().substs,\n-            &mut vtable_name,\n-            &mut visited,\n-        );\n+        push_generic_params_internal(tcx, trait_ref.substs, &mut vtable_name, &mut visited);\n     } else {\n         vtable_name.push_str(\"_\");\n     }"}, {"sha": "1c8cc61f204ddfff178d1d86b55e288154429761", "filename": "src/test/codegen/debug-vtable.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d71e749a244890cd370d49963e747cf92f4a037/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d71e749a244890cd370d49963e747cf92f4a037/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs?ref=3d71e749a244890cd370d49963e747cf92f4a037", "patch": "@@ -18,6 +18,9 @@\n // MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n // CHECK: !DISubrange(count: 3\n \n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::bar::{closure#0} as core::ops::function::FnOnce<(core::option::Option<&dyn core::ops::function::Fn<(), Output=()>>)>>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::bar::closure$0, core::ops::function::FnOnce<tuple$<enum$<core::option::Option<ref$<dyn$<core::ops::function::Fn<tuple$<>,assoc$<Output,tuple$<> > > > > >, {{.*}}, {{.*}}, Some> > > >::vtable$\"\n+\n #![crate_type = \"lib\"]\n \n pub struct Foo;\n@@ -45,3 +48,10 @@ pub fn foo(x: &Foo) -> (u32, (u64, i8), &dyn Send) {\n     let z: &dyn SomeTraitWithGenerics<u64, i8> = x;\n     (y.method1(), z.method1(), x as &dyn Send)\n }\n+\n+// Constructing the debuginfo name for the FnOnce vtable below initially caused an ICE on MSVC\n+// because the trait type contains a late bound region that needed to be erased before the type\n+// layout for the niche enum `Option<&dyn Fn()>` could be computed.\n+pub fn bar() -> Box<dyn FnOnce(Option<&dyn Fn()>)> {\n+    Box::new(|_x: Option<&dyn Fn()>| {})\n+}"}]}