{"sha": "53de24bbd1b87cf37457568f67c2b483f196de9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZGUyNGJiZDFiODdjZjM3NDU3NTY4ZjY3YzJiNDgzZjE5NmRlOWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-19T06:51:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-24T00:43:19Z"}, "message": "Refactor away fields `MacroDef::{use_locally, export}`.", "tree": {"sha": "27b9a67951665a29f08322e7e2beb98da97bcfb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b9a67951665a29f08322e7e2beb98da97bcfb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53de24bbd1b87cf37457568f67c2b483f196de9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53de24bbd1b87cf37457568f67c2b483f196de9b", "html_url": "https://github.com/rust-lang/rust/commit/53de24bbd1b87cf37457568f67c2b483f196de9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53de24bbd1b87cf37457568f67c2b483f196de9b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4baeaa30da3736d9a85f24509319d7148c2feea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4baeaa30da3736d9a85f24509319d7148c2feea", "html_url": "https://github.com/rust-lang/rust/commit/e4baeaa30da3736d9a85f24509319d7148c2feea"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "562156e70bd99263c2e5853fbbd109a178570677", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -716,8 +716,6 @@ impl<'a> LoweringContext<'a> {\n             id: m.id,\n             span: m.span,\n             imported_from: m.imported_from.map(|x| x.name),\n-            export: m.export,\n-            use_locally: m.use_locally,\n             allow_internal_unstable: m.allow_internal_unstable,\n             body: m.body.clone().into(),\n         }"}, {"sha": "1de4355ccdfd483fc81791f72c1a763a8b25f757", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -458,8 +458,6 @@ pub struct MacroDef {\n     pub id: NodeId,\n     pub span: Span,\n     pub imported_from: Option<Name>,\n-    pub export: bool,\n-    pub use_locally: bool,\n     pub allow_internal_unstable: bool,\n     pub body: HirVec<TokenTree>,\n }"}, {"sha": "51c894e1b78f04a99ad322bc5a7dd68432580b4d", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -675,13 +675,11 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_macro_def(&mut self, macro_def: &'tcx MacroDef) {\n         debug!(\"visit_macro_def: st={:?}\", self.st);\n-        if macro_def.export {\n-            SawMacroDef.hash(self.st);\n-            hash_attrs!(self, &macro_def.attrs);\n-            visit::walk_macro_def(self, macro_def)\n-            // FIXME(mw): We should hash the body of the macro too but we don't\n-            //            have a stable way of doing so yet.\n-        }\n+        SawMacroDef.hash(self.st);\n+        hash_attrs!(self, &macro_def.attrs);\n+        visit::walk_macro_def(self, macro_def)\n+        // FIXME(mw): We should hash the body of the macro too but we don't\n+        //            have a stable way of doing so yet.\n     }\n }\n "}, {"sha": "33ed423520dfa5d8a52d57fde7b0e90169f34546", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -594,9 +594,6 @@ impl<'a> CrateLoader<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: local_span,\n                 imported_from: Some(item.ident),\n-                // overridden in plugin/load.rs\n-                export: false,\n-                use_locally: false,\n                 allow_internal_unstable: attr::contains_name(&def.attrs, \"allow_internal_unstable\"),\n                 attrs: def.attrs,\n                 body: body,"}, {"sha": "72e5823598ea1fde236654bf9c62abcaab766ca5", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -114,22 +114,22 @@ impl<'a> base::Resolver for Resolver<'a> {\n         invocation.expansion.set(visitor.legacy_scope);\n     }\n \n-    fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef) {\n+    fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef, export: bool) {\n         if &def.ident.name.as_str() == \"macro_rules\" {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n-        if def.use_locally {\n-            let invocation = self.invocations[&scope];\n-            let binding = self.arenas.alloc_legacy_binding(LegacyBinding {\n-                parent: invocation.legacy_scope.get(),\n-                name: def.ident.name,\n-                ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n-                span: def.span,\n-            });\n-            invocation.legacy_scope.set(LegacyScope::Binding(binding));\n-            self.macro_names.insert(def.ident.name);\n-        }\n-        if def.export {\n+\n+        let invocation = self.invocations[&scope];\n+        let binding = self.arenas.alloc_legacy_binding(LegacyBinding {\n+            parent: invocation.legacy_scope.get(),\n+            name: def.ident.name,\n+            ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n+            span: def.span,\n+        });\n+        invocation.legacy_scope.set(LegacyScope::Binding(binding));\n+        self.macro_names.insert(def.ident.name);\n+\n+        if export {\n             def.id = self.next_node_id();\n             self.exported_macros.push(def);\n         }"}, {"sha": "ae036e66c69036f86d50d3160ef5ccc124dd312a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -2012,8 +2012,6 @@ pub struct MacroDef {\n     pub id: NodeId,\n     pub span: Span,\n     pub imported_from: Option<Ident>,\n-    pub export: bool,\n-    pub use_locally: bool,\n     pub allow_internal_unstable: bool,\n     pub body: Vec<TokenTree>,\n }"}, {"sha": "c404c6d1162f90ebb3ea8d88d172a516381469de", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -519,7 +519,7 @@ pub trait Resolver {\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n-    fn add_macro(&mut self, scope: Mark, def: ast::MacroDef);\n+    fn add_macro(&mut self, scope: Mark, def: ast::MacroDef, export: bool);\n     fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n@@ -541,7 +541,7 @@ impl Resolver for DummyResolver {\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n-    fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef) {}\n+    fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef, _export: bool) {}\n     fn add_ext(&mut self, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}\n     fn add_expansions_at_stmt(&mut self, _id: ast::NodeId, _macros: Vec<Mark>) {}\n "}, {"sha": "ceca698f479abb77bbdb6aaed24a576206b38ace", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53de24bbd1b87cf37457568f67c2b483f196de9b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=53de24bbd1b87cf37457568f67c2b483f196de9b", "patch": "@@ -157,14 +157,13 @@ impl IdentMacroExpander for MacroRulesExpander {\n               tts: Vec<tokenstream::TokenTree>,\n               attrs: Vec<ast::Attribute>)\n               -> Box<MacResult> {\n+        let export = attr::contains_name(&attrs, \"macro_export\");\n         let def = ast::MacroDef {\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             span: span,\n             imported_from: None,\n-            use_locally: true,\n             body: tts,\n-            export: attr::contains_name(&attrs, \"macro_export\"),\n             allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n             attrs: attrs,\n         };\n@@ -176,7 +175,7 @@ impl IdentMacroExpander for MacroRulesExpander {\n             MacEager::items(placeholders::macro_scope_placeholder().make_items())\n         };\n \n-        cx.resolver.add_macro(cx.current_expansion.mark, def);\n+        cx.resolver.add_macro(cx.current_expansion.mark, def, export);\n         result\n     }\n }"}]}