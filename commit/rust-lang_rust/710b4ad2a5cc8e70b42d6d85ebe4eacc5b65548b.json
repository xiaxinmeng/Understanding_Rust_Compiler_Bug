{"sha": "710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMGI0YWQyYTVjYzhlNzBiNDJkNmQ4NWViZTRlYWNjNWI2NTU0OGI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-02T11:14:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-08T14:21:58Z"}, "message": "Store the GeneratorInterior in the new GeneratorSubsts", "tree": {"sha": "b0745808d96d623dbf514493d315518744a62b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0745808d96d623dbf514493d315518744a62b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "html_url": "https://github.com/rust-lang/rust/commit/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "html_url": "https://github.com/rust-lang/rust/commit/0edc8f4270589002fe12b9de9a2bd2b1220feb4d"}], "stats": {"total": 665, "additions": 357, "deletions": 308}, "files": [{"sha": "c71b10ce142c56da1153841fbbd933dc141e6072", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -483,10 +483,9 @@ for mir::AggregateKind<'gcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            mir::AggregateKind::Generator(def_id, ref substs, ref interior, movability) => {\n+            mir::AggregateKind::Generator(def_id, ref substs, movability) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n-                interior.hash_stable(hcx, hasher);\n                 movability.hash_stable(hcx, hasher);\n             }\n         }"}, {"sha": "42fde0a19030f7d0b173d69bf796369d071b6644", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -517,8 +517,7 @@ for ::middle::const_val::ErrKind<'gcx> {\n }\n \n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });\n-\n-impl_stable_hash_for!(struct ty::GeneratorInterior<'tcx> { witness });\n+impl_stable_hash_for!(struct ty::GeneratorSubsts<'tcx> { substs });\n \n impl_stable_hash_for!(struct ty::GenericPredicates<'tcx> {\n     parent,\n@@ -908,10 +907,9 @@ for ty::TypeVariants<'gcx>\n                 def_id.hash_stable(hcx, hasher);\n                 closure_substs.hash_stable(hcx, hasher);\n             }\n-            TyGenerator(def_id, closure_substs, interior, movability) => {\n+            TyGenerator(def_id, generator_substs, movability) => {\n                 def_id.hash_stable(hcx, hasher);\n-                closure_substs.hash_stable(hcx, hasher);\n-                interior.hash_stable(hcx, hasher);\n+                generator_substs.hash_stable(hcx, hasher);\n                 movability.hash_stable(hcx, hasher);\n             }\n             TyGeneratorWitness(types) => {\n@@ -1316,11 +1314,11 @@ for traits::VtableGeneratorData<'gcx, N> where N: HashStable<StableHashingContex\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         let traits::VtableGeneratorData {\n-            closure_def_id,\n+            generator_def_id,\n             substs,\n             ref nested,\n         } = *self;\n-        closure_def_id.hash_stable(hcx, hasher);\n+        generator_def_id.hash_stable(hcx, hasher);\n         substs.hash_stable(hcx, hasher);\n         nested.hash_stable(hcx, hasher);\n     }"}, {"sha": "cc9c5cadc9389f6ba67b58a3a4dd3e64e1d37468", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -27,7 +27,7 @@ use hir::def_id::DefId;\n use mir::visit::MirVisitable;\n use mir::interpret::{Value, PrimVal, EvalErrorKind};\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n+use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::TypeAndMut;\n use util::ppaux;\n@@ -1641,7 +1641,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<usize>),\n \n     Closure(DefId, ClosureSubsts<'tcx>),\n-    Generator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -1804,7 +1804,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }),\n \n-                    AggregateKind::Generator(def_id, _, _, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Generator(def_id, _, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n                             let name = format!(\"[generator@{:?}]\", tcx.hir.span(node_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n@@ -2375,11 +2375,8 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                         AggregateKind::Adt(def, v, substs.fold_with(folder), n),\n                     AggregateKind::Closure(id, substs) =>\n                         AggregateKind::Closure(id, substs.fold_with(folder)),\n-                    AggregateKind::Generator(id, substs, interior, movablity) =>\n-                        AggregateKind::Generator(id,\n-                                                 substs.fold_with(folder),\n-                                                 interior.fold_with(folder),\n-                                                 movablity),\n+                    AggregateKind::Generator(id, substs, movablity) =>\n+                        AggregateKind::Generator(id, substs.fold_with(folder), movablity),\n                 };\n                 Aggregate(kind, fields.fold_with(folder))\n             }\n@@ -2406,8 +2403,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                     AggregateKind::Tuple => false,\n                     AggregateKind::Adt(_, _, substs, _) => substs.visit_with(visitor),\n                     AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n-                    AggregateKind::Generator(_, substs, interior, _) => substs.visit_with(visitor) ||\n-                        interior.visit_with(visitor),\n+                    AggregateKind::Generator(_, substs, _) => substs.visit_with(visitor),\n                 }) || fields.visit_with(visitor)\n             }\n         }"}, {"sha": "6a9ff39c5f56b191163d8e59256b10a020501ade", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -184,10 +184,10 @@ impl<'tcx> Rvalue<'tcx> {\n                         tcx.type_of(def.did).subst(tcx, substs)\n                     }\n                     AggregateKind::Closure(did, substs) => {\n-                        tcx.mk_closure_from_closure_substs(did, substs)\n+                        tcx.mk_closure(did, substs)\n                     }\n-                    AggregateKind::Generator(did, substs, interior, movability) => {\n-                        tcx.mk_generator(did, substs, interior, movability)\n+                    AggregateKind::Generator(did, substs, movability) => {\n+                        tcx.mk_generator(did, substs, movability)\n                     }\n                 }\n             }"}, {"sha": "b647ba553dd6c1f782f8d0d69ca16754bd35d53a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::subst::Substs;\n-use ty::{CanonicalTy, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{CanonicalTy, ClosureSubsts, GeneratorSubsts, Region, Ty};\n use mir::*;\n use syntax_pos::Span;\n \n@@ -243,10 +243,10 @@ macro_rules! make_mir_visitor {\n                 self.super_closure_substs(substs);\n             }\n \n-            fn visit_generator_interior(&mut self,\n-                                    interior: & $($mutability)* GeneratorInterior<'tcx>,\n+            fn visit_generator_substs(&mut self,\n+                                      substs: & $($mutability)* GeneratorSubsts<'tcx>,\n                                     _: Location) {\n-                self.super_generator_interior(interior);\n+                self.super_generator_substs(substs);\n             }\n \n             fn visit_local_decl(&mut self,\n@@ -595,12 +595,10 @@ macro_rules! make_mir_visitor {\n                                 self.visit_closure_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(ref $($mutability)* def_id,\n-                                                     ref $($mutability)* closure_substs,\n-                                                     ref $($mutability)* interior,\n+                                                     ref $($mutability)* generator_substs,\n                                                      _movability) => {\n                                 self.visit_def_id(def_id, location);\n-                                self.visit_closure_substs(closure_substs, location);\n-                                self.visit_generator_interior(interior, location);\n+                                self.visit_generator_substs(generator_substs, location);\n                             }\n                         }\n \n@@ -787,8 +785,8 @@ macro_rules! make_mir_visitor {\n             fn super_substs(&mut self, _substs: & $($mutability)* &'tcx Substs<'tcx>) {\n             }\n \n-            fn super_generator_interior(&mut self,\n-                                    _interior: & $($mutability)* GeneratorInterior<'tcx>) {\n+            fn super_generator_substs(&mut self,\n+                                      _substs: & $($mutability)* GeneratorSubsts<'tcx>) {\n             }\n \n             fn super_closure_substs(&mut self,"}, {"sha": "26adbd82672917e71a58c20a6598ad0133c9887d", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -480,8 +480,8 @@ pub struct VtableImplData<'tcx, N> {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableGeneratorData<'tcx, N> {\n-    pub closure_def_id: DefId,\n-    pub substs: ty::ClosureSubsts<'tcx>,\n+    pub generator_def_id: DefId,\n+    pub substs: ty::GeneratorSubsts<'tcx>,\n     /// Nested obligations. This can be non-empty if the generator\n     /// signature contains associated types.\n     pub nested: Vec<N>\n@@ -989,7 +989,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n                 nested: p.nested.into_iter().map(f).collect(),\n             }),\n             VtableGenerator(c) => VtableGenerator(VtableGeneratorData {\n-                closure_def_id: c.closure_def_id,\n+                generator_def_id: c.generator_def_id,\n                 substs: c.substs,\n                 nested: c.nested.into_iter().map(f).collect(),\n             }),"}, {"sha": "bfa32f8e7faf3393058be9bc51da36c956081c1e", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -1288,7 +1288,7 @@ fn confirm_generator_candidate<'cx, 'gcx, 'tcx>(\n     vtable: VtableGeneratorData<'tcx, PredicateObligation<'tcx>>)\n     -> Progress<'tcx>\n {\n-    let gen_sig = vtable.substs.generator_poly_sig(vtable.closure_def_id, selcx.tcx());\n+    let gen_sig = vtable.substs.poly_sig(vtable.generator_def_id, selcx.tcx());\n     let Normalized {\n         value: gen_sig,\n         obligations"}, {"sha": "e73e11075d4d4f6ce9c40c96be281802e4481432", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -2280,8 +2280,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 substs.upvar_tys(def_id, self.tcx()).collect()\n             }\n \n-            ty::TyGenerator(def_id, ref substs, interior, _) => {\n-                substs.upvar_tys(def_id, self.tcx()).chain(iter::once(interior.witness)).collect()\n+            ty::TyGenerator(def_id, ref substs, _) => {\n+                let witness = substs.witness(def_id, self.tcx());\n+                substs.upvar_tys(def_id, self.tcx()).chain(iter::once(witness)).collect()\n             }\n \n             ty::TyGeneratorWitness(types) => {\n@@ -2755,18 +2756,18 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n-        let (closure_def_id, substs) = match self_ty.sty {\n-            ty::TyGenerator(id, substs, _, _) => (id, substs),\n+        let (generator_def_id, substs) = match self_ty.sty {\n+            ty::TyGenerator(id, substs, _) => (id, substs),\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation)\n         };\n \n         debug!(\"confirm_generator_candidate({:?},{:?},{:?})\",\n                obligation,\n-               closure_def_id,\n+               generator_def_id,\n                substs);\n \n         let trait_ref =\n-            self.generator_trait_ref_unnormalized(obligation, closure_def_id, substs);\n+            self.generator_trait_ref_unnormalized(obligation, generator_def_id, substs);\n         let Normalized {\n             value: trait_ref,\n             mut obligations\n@@ -2776,8 +2777,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                  obligation.recursion_depth+1,\n                                  &trait_ref);\n \n-        debug!(\"confirm_generator_candidate(closure_def_id={:?}, trait_ref={:?}, obligations={:?})\",\n-               closure_def_id,\n+        debug!(\"confirm_generator_candidate(generator_def_id={:?}, \\\n+                trait_ref={:?}, obligations={:?})\",\n+               generator_def_id,\n                trait_ref,\n                obligations);\n \n@@ -2788,7 +2790,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                         trait_ref)?);\n \n         Ok(VtableGeneratorData {\n-            closure_def_id: closure_def_id,\n+            generator_def_id: generator_def_id,\n             substs: substs.clone(),\n             nested: obligations\n         })\n@@ -3294,10 +3296,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn generator_trait_ref_unnormalized(&mut self,\n                                       obligation: &TraitObligation<'tcx>,\n                                       closure_def_id: DefId,\n-                                      substs: ty::ClosureSubsts<'tcx>)\n+                                      substs: ty::GeneratorSubsts<'tcx>)\n                                       -> ty::PolyTraitRef<'tcx>\n     {\n-        let gen_sig = substs.generator_poly_sig(closure_def_id, self.tcx());\n+        let gen_sig = substs.poly_sig(closure_def_id, self.tcx());\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an generator type and hence is"}, {"sha": "822ea17009b6b0fe60abf65f1391f7862b06e105", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -83,8 +83,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> {\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableGeneratorData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"VtableGenerator(closure_def_id={:?}, substs={:?}, nested={:?})\",\n-               self.closure_def_id,\n+        write!(f, \"VtableGenerator(generator_def_id={:?}, substs={:?}, nested={:?})\",\n+               self.generator_def_id,\n                self.substs,\n                self.nested)\n     }\n@@ -294,13 +294,13 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n             }\n             traits::VtableAutoImpl(t) => Some(traits::VtableAutoImpl(t)),\n             traits::VtableGenerator(traits::VtableGeneratorData {\n-                closure_def_id,\n+                generator_def_id,\n                 substs,\n                 nested\n             }) => {\n                 tcx.lift(&substs).map(|substs| {\n                     traits::VtableGenerator(traits::VtableGeneratorData {\n-                        closure_def_id: closure_def_id,\n+                        generator_def_id: generator_def_id,\n                         substs: substs,\n                         nested: nested\n                     })\n@@ -373,7 +373,7 @@ BraceStructTypeFoldableImpl! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableGeneratorData<'tcx, N> {\n-        closure_def_id, substs, nested\n+        generator_def_id, substs, nested\n     } where N: TypeFoldable<'tcx>\n }\n "}, {"sha": "139b23591191cf83b8e6d545be2759c10ffb46c9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -41,7 +41,7 @@ use traits;\n use traits::{Clause, Clauses, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n-use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorInterior, Region, Const};\n+use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use ty::RegionKind;\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n@@ -2436,27 +2436,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }))\n         }\n \n-    pub fn mk_closure(self,\n-                      closure_id: DefId,\n-                      substs: ClosureSubsts<'tcx>)\n-                      -> Ty<'tcx> {\n-        self.mk_closure_from_closure_substs(closure_id, substs)\n-    }\n-\n-    pub fn mk_closure_from_closure_substs(self,\n-                                          closure_id: DefId,\n-                                          closure_substs: ClosureSubsts<'tcx>)\n+    pub fn mk_closure(self, closure_id: DefId, closure_substs: ClosureSubsts<'tcx>)\n                                           -> Ty<'tcx> {\n         self.mk_ty(TyClosure(closure_id, closure_substs))\n     }\n \n     pub fn mk_generator(self,\n                         id: DefId,\n-                        closure_substs: ClosureSubsts<'tcx>,\n-                        interior: GeneratorInterior<'tcx>,\n+                        generator_substs: GeneratorSubsts<'tcx>,\n                         movability: hir::GeneratorMovability)\n                         -> Ty<'tcx> {\n-        self.mk_ty(TyGenerator(id, closure_substs, interior, movability))\n+        self.mk_ty(TyGenerator(id, generator_substs, movability))\n     }\n \n     pub fn mk_generator_witness(self, types: ty::Binder<&'tcx Slice<Ty<'tcx>>>) -> Ty<'tcx> {"}, {"sha": "31b3ca44700e96676f076782f02d0af0797279f1", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -90,7 +90,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }\n-        ty::TyGenerator(def_id, _, _, _) => {\n+        ty::TyGenerator(def_id, _, _) => {\n             Some(GeneratorSimplifiedType(def_id))\n         }\n         ty::TyGeneratorWitness(ref tys) => {"}, {"sha": "bb707c556c0a8771bcc9dd3365a66dd55e13784f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -87,11 +87,10 @@ impl FlagComputation {\n                 }\n             }\n \n-            &ty::TyGenerator(_, ref substs, ref interior, _) => {\n+            &ty::TyGenerator(_, ref substs, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);\n-                self.add_ty(interior.witness);\n             }\n \n             &ty::TyGeneratorWitness(ref ts) => {"}, {"sha": "e7b71ca2b228e2da11da91b1dd8ebf3a69072f14", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -270,10 +270,10 @@ fn resolve_associated_item<'a, 'tcx>(\n             let substs = tcx.erase_regions(&substs);\n             Some(ty::Instance::new(def_id, substs))\n         }\n-        traits::VtableGenerator(closure_data) => {\n+        traits::VtableGenerator(generator_data) => {\n             Some(Instance {\n-                def: ty::InstanceDef::Item(closure_data.closure_def_id),\n-                substs: closure_data.substs.substs\n+                def: ty::InstanceDef::Item(generator_data.generator_def_id),\n+                substs: generator_data.substs.substs\n             })\n         }\n         traits::VtableClosure(closure_data) => {\n@@ -356,8 +356,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n         .unwrap().def_id;\n     let def = ty::InstanceDef::ClosureOnceShim { call_once };\n \n-    let self_ty = tcx.mk_closure_from_closure_substs(\n-        closure_did, substs);\n+    let self_ty = tcx.mk_closure(closure_did, substs);\n \n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);"}, {"sha": "752b7f69a6a7ffc41d14c260d33f9eb6cf218db8", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -369,7 +369,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n \n         ty::TyFnDef(def_id, _) |\n         ty::TyClosure(def_id, _) |\n-        ty::TyGenerator(def_id, _, _, _) |\n+        ty::TyGenerator(def_id, _, _) |\n         ty::TyForeign(def_id) => Some(def_id),\n \n         ty::TyBool |"}, {"sha": "02c4b73efa1465fc89f3c2a36260b720651b7d0b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             }\n \n             // Tuples, generators and closures.\n-            ty::TyGenerator(def_id, ref substs, _, _) => {\n+            ty::TyGenerator(def_id, ref substs, _) => {\n                 let tys = substs.field_tys(def_id, tcx);\n                 univariant(&tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n                     &ReprOptions::default(),\n@@ -1603,7 +1603,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 substs.upvar_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n-            ty::TyGenerator(def_id, ref substs, _, _) => {\n+            ty::TyGenerator(def_id, ref substs, _) => {\n                 substs.field_tys(def_id, tcx).nth(i).unwrap()\n             }\n "}, {"sha": "3bca65ec8185b1d22349202b4e122e5e29f2dbc8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -63,7 +63,7 @@ use hir;\n pub use self::sty::{Binder, CanonicalVar, DebruijnIndex};\n pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n-pub use self::sty::{ClosureSubsts, GeneratorInterior, TypeAndMut};\n+pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TypeVariants, PolyTraitRef};\n pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};"}, {"sha": "ff99a4b7ff63828a17b5fd2d44cd4144e63b7428", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            ty::TyGenerator(def_id, ref substs, _, _) => {\n+            ty::TyGenerator(def_id, ref substs, _) => {\n                 // Same as the closure case\n                 for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);"}, {"sha": "8c3779b0c1e1113078dc2fadbebc1b0fc4c690dc", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -415,16 +415,15 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))\n         }\n \n-        (&ty::TyGenerator(a_id, a_substs, a_interior, movability),\n-         &ty::TyGenerator(b_id, b_substs, b_interior, _))\n+        (&ty::TyGenerator(a_id, a_substs, movability),\n+         &ty::TyGenerator(b_id, b_substs, _))\n             if a_id == b_id =>\n         {\n             // All TyGenerator types with the same id represent\n             // the (anonymous) type of the same generator expression. So\n             // all of their regions should be equated.\n             let substs = relation.relate(&a_substs, &b_substs)?;\n-            let interior = relation.relate(&a_interior, &b_interior)?;\n-            Ok(tcx.mk_generator(a_id, substs, interior, movability))\n+            Ok(tcx.mk_generator(a_id, substs, movability))\n         }\n \n         (&ty::TyGeneratorWitness(a_types), &ty::TyGeneratorWitness(b_types)) =>\n@@ -446,7 +445,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             // the (anonymous) type of the same closure expression. So\n             // all of their regions should be equated.\n             let substs = relation.relate(&a_substs, &b_substs)?;\n-            Ok(tcx.mk_closure_from_closure_substs(a_id, substs))\n+            Ok(tcx.mk_closure(a_id, substs))\n         }\n \n         (&ty::TyRawPtr(ref a_mt), &ty::TyRawPtr(ref b_mt)) =>\n@@ -607,19 +606,19 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n         let substs = relate_substs(relation, None, a.substs, b.substs)?;\n-        Ok(ty::ClosureSubsts { substs: substs })\n+        Ok(ty::ClosureSubsts { substs })\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ty::GeneratorInterior<'tcx> {\n+impl<'tcx> Relate<'tcx> for ty::GeneratorSubsts<'tcx> {\n     fn relate<'a, 'gcx, R>(relation: &mut R,\n-                           a: &ty::GeneratorInterior<'tcx>,\n-                           b: &ty::GeneratorInterior<'tcx>)\n-                           -> RelateResult<'tcx, ty::GeneratorInterior<'tcx>>\n+                           a: &ty::GeneratorSubsts<'tcx>,\n+                           b: &ty::GeneratorSubsts<'tcx>)\n+                           -> RelateResult<'tcx, ty::GeneratorSubsts<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        let witness = relation.relate(&a.witness, &b.witness)?;\n-        Ok(ty::GeneratorInterior { witness })\n+        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        Ok(ty::GeneratorSubsts { substs })\n     }\n }\n "}, {"sha": "933756dcd3d91d99d13cd091b8cec72d94abdb3c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -304,16 +304,16 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n     type Lifted = ty::ClosureSubsts<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n-            ty::ClosureSubsts { substs: substs }\n+            ty::ClosureSubsts { substs }\n         })\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorInterior<'a> {\n-    type Lifted = ty::GeneratorInterior<'tcx>;\n+impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorSubsts<'a> {\n+    type Lifted = ty::GeneratorSubsts<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.witness).map(|witness| {\n-            ty::GeneratorInterior { witness }\n+        tcx.lift(&self.substs).map(|substs| {\n+            ty::GeneratorSubsts { substs }\n         })\n     }\n }\n@@ -867,11 +867,10 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyRef(ref r, tm) => {\n                 ty::TyRef(r.fold_with(folder), tm.fold_with(folder))\n             }\n-            ty::TyGenerator(did, substs, interior, movability) => {\n+            ty::TyGenerator(did, substs, movability) => {\n                 ty::TyGenerator(\n                     did,\n                     substs.fold_with(folder),\n-                    interior.fold_with(folder),\n                     movability)\n             }\n             ty::TyGeneratorWitness(types) => ty::TyGeneratorWitness(types.fold_with(folder)),\n@@ -906,8 +905,8 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyFnDef(_, substs) => substs.visit_with(visitor),\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n-            ty::TyGenerator(_did, ref substs, ref interior, _) => {\n-                substs.visit_with(visitor) || interior.visit_with(visitor)\n+            ty::TyGenerator(_did, ref substs, _) => {\n+                substs.visit_with(visitor)\n             }\n             ty::TyGeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),\n@@ -984,8 +983,8 @@ BraceStructTypeFoldableImpl! {\n }\n \n BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::GeneratorInterior<'tcx> {\n-        witness,\n+    impl<'tcx> TypeFoldable<'tcx> for ty::GeneratorSubsts<'tcx> {\n+        substs,\n     }\n }\n "}, {"sha": "c7e67c974dd42c0c7f5347898262442a96219642", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 105, "deletions": 43, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -139,7 +139,7 @@ pub enum TypeVariants<'tcx> {\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n-    TyGenerator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>, hir::GeneratorMovability),\n+    TyGenerator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n \n     /// A type representin the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n@@ -328,37 +328,6 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n \n-    /// Returns the type representing the yield type of the generator.\n-    pub fn generator_yield_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n-        self.closure_kind_ty(def_id, tcx)\n-    }\n-\n-    /// Returns the type representing the return type of the generator.\n-    pub fn generator_return_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n-        self.closure_sig_ty(def_id, tcx)\n-    }\n-\n-    /// Return the \"generator signature\", which consists of its yield\n-    /// and return types.\n-    ///\n-    /// NB. Some bits of the code prefers to see this wrapped in a\n-    /// binder, but it never contains bound regions. Probably this\n-    /// function should be removed.\n-    pub fn generator_poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> PolyGenSig<'tcx> {\n-        ty::Binder::dummy(self.generator_sig(def_id, tcx))\n-    }\n-\n-    /// Return the \"generator signature\", which consists of its yield\n-    /// and return types.\n-    pub fn generator_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> GenSig<'tcx> {\n-        ty::GenSig {\n-            yield_ty: self.generator_yield_ty(def_id, tcx),\n-            return_ty: self.generator_return_ty(def_id, tcx),\n-        }\n-    }\n-}\n-\n-impl<'tcx> ClosureSubsts<'tcx> {\n     /// Returns the closure kind for this closure; only usable outside\n     /// of an inference context, because in that context we know that\n     /// there are no type variables.\n@@ -381,7 +350,84 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct GeneratorSubsts<'tcx> {\n+    pub substs: &'tcx Substs<'tcx>,\n+}\n+\n+struct SplitGeneratorSubsts<'tcx> {\n+    yield_ty: Ty<'tcx>,\n+    return_ty: Ty<'tcx>,\n+    witness: Ty<'tcx>,\n+    upvar_kinds: &'tcx [Kind<'tcx>],\n+}\n+\n+impl<'tcx> GeneratorSubsts<'tcx> {\n+    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitGeneratorSubsts<'tcx> {\n+        let generics = tcx.generics_of(def_id);\n+        let parent_len = generics.parent_count();\n+        SplitGeneratorSubsts {\n+            yield_ty: self.substs.type_at(parent_len),\n+            return_ty: self.substs.type_at(parent_len + 1),\n+            witness: self.substs.type_at(parent_len + 2),\n+            upvar_kinds: &self.substs[parent_len + 3..],\n+        }\n+    }\n+\n+    /// This describes the types that can be contained in a generator.\n+    /// It will be a type variable initially and unified in the last stages of typeck of a body.\n+    /// It contains a tuple of all the types that could end up on a generator frame.\n+    /// The state transformation MIR pass may only produce layouts which mention types\n+    /// in this tuple. Upvars are not counted here.\n+    pub fn witness(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).witness\n+    }\n+\n+    #[inline]\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n+        impl Iterator<Item=Ty<'tcx>> + 'tcx\n+    {\n+        let SplitGeneratorSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n+        upvar_kinds.iter().map(|t| {\n+            if let UnpackedKind::Type(ty) = t.unpack() {\n+                ty\n+            } else {\n+                bug!(\"upvar should be type\")\n+            }\n+        })\n+    }\n+\n+    /// Returns the type representing the yield type of the generator.\n+    pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).yield_ty\n+    }\n+\n+    /// Returns the type representing the return type of the generator.\n+    pub fn return_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).return_ty\n+    }\n+\n+    /// Return the \"generator signature\", which consists of its yield\n+    /// and return types.\n+    ///\n+    /// NB. Some bits of the code prefers to see this wrapped in a\n+    /// binder, but it never contains bound regions. Probably this\n+    /// function should be removed.\n+    pub fn poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> PolyGenSig<'tcx> {\n+        ty::Binder::dummy(self.sig(def_id, tcx))\n+    }\n+\n+    /// Return the \"generator signature\", which consists of its yield\n+    /// and return types.\n+    pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> GenSig<'tcx> {\n+        ty::GenSig {\n+            yield_ty: self.yield_ty(def_id, tcx),\n+            return_ty: self.return_ty(def_id, tcx),\n+        }\n+    }\n+}\n+\n+impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// This returns the types of the MIR locals which had to be stored across suspension points.\n     /// It is calculated in rustc_mir::transform::generator::StateTransform.\n     /// All the types here must be in the tuple in GeneratorInterior.\n@@ -412,14 +458,29 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n     }\n }\n \n-/// This describes the types that can be contained in a generator.\n-/// It will be a type variable initially and unified in the last stages of typeck of a body.\n-/// It contains a tuple of all the types that could end up on a generator frame.\n-/// The state transformation MIR pass may only produce layouts which mention types in this tuple.\n-/// Upvars are not counted here.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct GeneratorInterior<'tcx> {\n-    pub witness: Ty<'tcx>,\n+#[derive(Debug, Copy, Clone)]\n+pub enum UpvarSubsts<'tcx> {\n+    Closure(ClosureSubsts<'tcx>),\n+    Generator(GeneratorSubsts<'tcx>),\n+}\n+\n+impl<'tcx> UpvarSubsts<'tcx> {\n+    #[inline]\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n+        impl Iterator<Item=Ty<'tcx>> + 'tcx\n+    {\n+        let upvar_kinds = match self {\n+            UpvarSubsts::Closure(substs) => substs.split(def_id, tcx).upvar_kinds,\n+            UpvarSubsts::Generator(substs) => substs.split(def_id, tcx).upvar_kinds,\n+        };\n+        upvar_kinds.iter().map(|t| {\n+            if let UnpackedKind::Type(ty) = t.unpack() {\n+                ty\n+            } else {\n+                bug!(\"upvar should be type\")\n+            }\n+        })\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -1604,8 +1665,9 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyAdt(_, substs) | TyAnon(_, substs) => {\n                 substs.regions().collect()\n             }\n-            TyClosure(_, ref substs) | TyGenerator(_, ref substs, _, _) => {\n-                substs.substs.regions().collect()\n+            TyClosure(_, ClosureSubsts { ref substs }) |\n+            TyGenerator(_, GeneratorSubsts { ref substs }, _) => {\n+                substs.regions().collect()\n             }\n             TyProjection(ref data) => {\n                 data.substs.regions().collect()"}, {"sha": "4aa70e1f7e006964adef5cb1069a1ec8f885afc3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyRawPtr(m) |\n             TyRef(_, m) => self.hash(m.mutbl),\n             TyClosure(def_id, _) |\n-            TyGenerator(def_id, _, _, _) |\n+            TyGenerator(def_id, _, _) |\n             TyAnon(def_id, _) |\n             TyFnDef(def_id, _) => self.def_id(def_id),\n             TyAdt(d, _) => self.def_id(d.did),"}, {"sha": "4567baf5ef4d38004e403018d8835a80d8243138", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -118,8 +118,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyClosure(_, ref substs) => {\n             stack.extend(substs.substs.types().rev());\n         }\n-        ty::TyGenerator(_, ref substs, ref interior, _) => {\n-            stack.push(interior.witness);\n+        ty::TyGenerator(_, ref substs, _) => {\n             stack.extend(substs.substs.types().rev());\n         }\n         ty::TyGeneratorWitness(ts) => {"}, {"sha": "15e91404f6dc823d516e455a3322c47483f7a648", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -995,14 +995,6 @@ define_print! {\n     }\n }\n \n-define_print! {\n-    ('tcx) ty::GeneratorInterior<'tcx>, (self, f, cx) {\n-        display {\n-            self.witness.print(f, cx)\n-        }\n-    }\n-}\n-\n define_print! {\n     ('tcx) ty::TypeVariants<'tcx>, (self, f, cx) {\n         display {\n@@ -1110,8 +1102,9 @@ define_print! {\n                     })\n                 }\n                 TyStr => write!(f, \"str\"),\n-                TyGenerator(did, substs, interior, movability) => ty::tls::with(|tcx| {\n+                TyGenerator(did, substs, movability) => ty::tls::with(|tcx| {\n                     let upvar_tys = substs.upvar_tys(did, tcx);\n+                    let witness = substs.witness(did, tcx);\n                     if movability == hir::GeneratorMovability::Movable {\n                         write!(f, \"[generator\")?;\n                     } else {\n@@ -1145,7 +1138,7 @@ define_print! {\n                         }\n                     }\n \n-                    print!(f, cx, write(\" \"), print(interior), write(\"]\"))\n+                    print!(f, cx, write(\" \"), print(witness), write(\"]\"))\n                 }),\n                 TyGeneratorWitness(types) => {\n                     ty::tls::with(|tcx| cx.in_binder(f, tcx, &types, tcx.lift(&types)))"}, {"sha": "db2e078586eda95f346bd4eb11b6227821d44366", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -777,7 +777,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     self.describe_field_from_ty(&tnm.ty, field)\n                 }\n                 ty::TyArray(ty, _) | ty::TySlice(ty) => self.describe_field_from_ty(&ty, field),\n-                ty::TyClosure(def_id, _) | ty::TyGenerator(def_id, _, _, _) => {\n+                ty::TyClosure(def_id, _) | ty::TyGenerator(def_id, _, _) => {\n                     // Convert the def-id into a node-id. node-ids are only valid for\n                     // the local code in the current crate, so this returns an `Option` in case\n                     // the closure comes from another crate. But in that case we wouldn't"}, {"sha": "953238a721890775a502feb4ce349b5a3fc6e55f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -835,10 +835,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 tys.iter().cloned().enumerate()\n                     .for_each(|field| drop_field(self, field));\n             }\n-            // Closures and generators also have disjoint fields, but they are only\n-            // directly accessed in the body of the closure/generator.\n+            // Closures also have disjoint fields, but they are only\n+            // directly accessed in the body of the closure.\n             ty::TyClosure(def, substs)\n-            | ty::TyGenerator(def, substs, ..)\n+                if *drop_place == Place::Local(Local::new(1)) && !self.mir.upvar_decls.is_empty()\n+            => {\n+                substs.upvar_tys(def, self.tcx).enumerate()\n+                    .for_each(|field| drop_field(self, field));\n+            }\n+            // Generators also have disjoint fields, but they are only\n+            // directly accessed in the body of the generator.\n+            ty::TyGenerator(def, substs, _)\n                 if *drop_place == Place::Local(Local::new(1)) && !self.mir.upvar_decls.is_empty()\n             => {\n                 substs.upvar_tys(def, self.tcx).enumerate()"}, {"sha": "1191ee9f9fbc85b195130eaf564e60ac59f48574", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n use rustc::mir::{Local, PlaceProjection, ProjectionElem, Statement, Terminator};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, CanonicalTy, ClosureSubsts};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts};\n \n use super::region_infer::{Cause, RegionInferenceContext};\n use super::ToRegionVid;\n@@ -97,6 +97,13 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         self.super_ty(ty);\n     }\n \n+    /// We sometimes have `generator_substs` within an rvalue, or within a\n+    /// call. Make them live at the location where they appear.\n+    fn visit_generator_substs(&mut self, substs: &GeneratorSubsts<'tcx>, location: Location) {\n+        self.add_regular_live_constraint(*substs, location, Cause::LiveOther(location));\n+        self.super_generator_substs(substs);\n+    }\n+\n     /// We sometimes have `closure_substs` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n     fn visit_closure_substs(&mut self, substs: &ClosureSubsts<'tcx>, location: Location) {"}, {"sha": "fbff17e58985594bf59517d797bb6c225623934e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -30,12 +30,11 @@ impl<'gcx, 'tcx> RegionInferenceContext<'tcx> {\n                     &substs.substs[..]\n                 ));\n             }\n-            DefiningTy::Generator(def_id, substs, interior, _) => {\n+            DefiningTy::Generator(def_id, substs, _) => {\n                 err.note(&format!(\n-                    \"defining type: {:?} with closure substs {:#?} and interior {:?}\",\n+                    \"defining type: {:?} with generator substs {:#?}\",\n                     def_id,\n-                    &substs.substs[..],\n-                    interior\n+                    &substs.substs[..]\n                 ));\n             }\n             DefiningTy::FnDef(def_id, substs) => {"}, {"sha": "7edee42b78ff71eab23c338d74ffc0a662a082a9", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorInterior, Ty, TypeFoldable};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n use rustc::mir::{BasicBlock, Local, Location, Mir, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -90,19 +90,19 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         *constant = self.renumber_regions(ty_context, &*constant);\n     }\n \n-    fn visit_generator_interior(&mut self,\n-                                interior: &mut GeneratorInterior<'tcx>,\n-                                location: Location) {\n+    fn visit_generator_substs(&mut self,\n+                              substs: &mut GeneratorSubsts<'tcx>,\n+                              location: Location) {\n         debug!(\n-            \"visit_generator_interior(interior={:?}, location={:?})\",\n-            interior,\n+            \"visit_generator_substs(substs={:?}, location={:?})\",\n+            substs,\n             location,\n         );\n \n         let ty_context = TyContext::Location(location);\n-        *interior = self.renumber_regions(ty_context, interior);\n+        *substs = self.renumber_regions(ty_context, substs);\n \n-        debug!(\"visit_generator_interior: interior={:?}\", interior);\n+        debug!(\"visit_generator_substs: substs={:?}\", substs);\n     }\n \n     fn visit_closure_substs(&mut self, substs: &mut ClosureSubsts<'tcx>, location: Location) {"}, {"sha": "42a1745addff75de36333f0f7047e59e2af05aea", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -528,7 +528,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         }),\n                     }\n                 }\n-                ty::TyGenerator(def_id, substs, _, _) => {\n+                ty::TyGenerator(def_id, substs, _) => {\n                     // Try pre-transform fields first (upvars and current state)\n                     if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field.index()) {\n                         return Ok(ty);\n@@ -1254,7 +1254,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }),\n                 }\n             }\n-            AggregateKind::Generator(def_id, substs, _, _) => {\n+            AggregateKind::Generator(def_id, substs, _) => {\n                 // Try pre-transform fields first (upvars and current state)\n                 if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field_index) {\n                     Ok(ty)\n@@ -1497,7 +1497,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n             }\n \n-            AggregateKind::Generator(def_id, substs, _, _) => {\n+            AggregateKind::Generator(def_id, substs, _) => {\n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n             }\n "}, {"sha": "52ebf38c668c229c6c5f48ba6d7775ecae1366bc", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::outlives::bounds::{self, OutlivesBound};\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n-use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, RegionVid, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::FxHashMap;\n@@ -116,10 +116,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId,\n-              ty::ClosureSubsts<'tcx>,\n-              ty::GeneratorInterior<'tcx>,\n-              hir::GeneratorMovability),\n+    Generator(DefId, ty::GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n \n     /// The MIR is a fn item with the given def-id and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query.\n@@ -511,8 +508,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         );\n \n         let yield_ty = match defining_ty {\n-            DefiningTy::Generator(def_id, substs, _, _) => {\n-                Some(substs.generator_yield_ty(def_id, self.infcx.tcx))\n+            DefiningTy::Generator(def_id, substs, _) => {\n+                Some(substs.yield_ty(def_id, self.infcx.tcx))\n             }\n             _ => None,\n         };\n@@ -553,8 +550,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n \n                 match defining_ty.sty  {\n                     ty::TyClosure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n-                    ty::TyGenerator(def_id, substs, interior, movability) => {\n-                        DefiningTy::Generator(def_id, substs, interior, movability)\n+                    ty::TyGenerator(def_id, substs, movability) => {\n+                        DefiningTy::Generator(def_id, substs, movability)\n                     }\n                     ty::TyFnDef(def_id, substs) => DefiningTy::FnDef(def_id, substs),\n                     _ => span_bug!(\n@@ -590,17 +587,18 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n         let identity_substs = Substs::identity_for_item(gcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, substs) | DefiningTy::Generator(_, substs, _, _) => {\n+            DefiningTy::Closure(_, ClosureSubsts { ref substs }) |\n+            DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n                 // Therefore, when we zip together (below) with\n                 // `identity_substs`, we will get only those regions\n                 // that correspond to early-bound regions declared on\n                 // the `closure_base_def_id`.\n-                assert!(substs.substs.len() >= identity_substs.len());\n-                assert_eq!(substs.substs.regions().count(), identity_substs.regions().count());\n-                substs.substs\n+                assert!(substs.len() >= identity_substs.len());\n+                assert_eq!(substs.regions().count(), identity_substs.regions().count());\n+                substs\n             }\n \n             DefiningTy::FnDef(_, substs) | DefiningTy::Const(_, substs) => substs,\n@@ -651,10 +649,10 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 )\n             }\n \n-            DefiningTy::Generator(def_id, substs, interior, movability) => {\n+            DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let output = substs.generator_return_ty(def_id, tcx);\n-                let generator_ty = tcx.mk_generator(def_id, substs, interior, movability);\n+                let output = substs.return_ty(def_id, tcx);\n+                let generator_ty = tcx.mk_generator(def_id, substs, movability);\n                 let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)\n             }"}, {"sha": "648746b6e9047d9e21978a1940990ff77c0a9187", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -18,7 +18,7 @@ use build::expr::category::{Category, RvalueFunc};\n use hair::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, UpvarSubsts};\n use rustc::mir::*;\n use rustc::mir::interpret::{Value, PrimVal, EvalErrorKind};\n use syntax_pos::Span;\n@@ -185,28 +185,32 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n-            ExprKind::Closure { closure_id, substs, upvars, interior } => {\n+            ExprKind::Closure { closure_id, substs, upvars, movability } => {\n                 // see (*) above\n                 let mut operands: Vec<_> =\n                     upvars.into_iter()\n                           .map(|upvar| unpack!(block = this.as_operand(block, scope, upvar)))\n                           .collect();\n-                let result = if let Some((interior, movability)) = interior {\n-                    // Add the state operand since it follows the upvars in the generator\n-                    // struct. See librustc_mir/transform/generator.rs for more details.\n-                    operands.push(Operand::Constant(box Constant {\n-                        span: expr_span,\n-                        ty: this.hir.tcx().types.u32,\n-                        literal: Literal::Value {\n-                            value: this.hir.tcx().mk_const(ty::Const {\n-                                val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(0))),\n-                                ty: this.hir.tcx().types.u32\n-                            }),\n-                        },\n-                    }));\n-                    box AggregateKind::Generator(closure_id, substs, interior, movability)\n-                } else {\n-                    box AggregateKind::Closure(closure_id, substs)\n+                let result = match substs {\n+                    UpvarSubsts::Generator(substs) => {\n+                        let movability = movability.unwrap();\n+                        // Add the state operand since it follows the upvars in the generator\n+                        // struct. See librustc_mir/transform/generator.rs for more details.\n+                        operands.push(Operand::Constant(box Constant {\n+                            span: expr_span,\n+                            ty: this.hir.tcx().types.u32,\n+                            literal: Literal::Value {\n+                                value: this.hir.tcx().mk_const(ty::Const {\n+                                    val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(0))),\n+                                    ty: this.hir.tcx().types.u32\n+                                }),\n+                            },\n+                        }));\n+                        box AggregateKind::Generator(closure_id, substs, movability)\n+                    }\n+                    UpvarSubsts::Closure(substs) => {\n+                        box AggregateKind::Closure(closure_id, substs)\n+                    }\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))\n             }"}, {"sha": "afbcf100b056a010ee21c5e05d37f291dc898a50", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -130,7 +130,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             let (yield_ty, return_ty) = if body.is_generator {\n                 let gen_sig = match ty.sty {\n                     ty::TyGenerator(gen_def_id, gen_substs, ..) =>\n-                        gen_substs.generator_sig(gen_def_id, tcx),\n+                        gen_substs.sig(gen_def_id, tcx),\n                     _ =>\n                         span_bug!(tcx.hir.span(id), \"generator w/o generator type: {:?}\", ty),\n                 };"}, {"sha": "249497538215d453e953c8a9c26b5b5793038c75", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -470,10 +470,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         hir::ExprClosure(..) => {\n             let closure_ty = cx.tables().expr_ty(expr);\n-            let (def_id, substs, interior) = match closure_ty.sty {\n-                ty::TyClosure(def_id, substs) => (def_id, substs, None),\n-                ty::TyGenerator(def_id, substs, interior, movability) =>{\n-                    (def_id, substs, Some((interior, movability)))\n+            let (def_id, substs, movability) = match closure_ty.sty {\n+                ty::TyClosure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),\n+                ty::TyGenerator(def_id, substs, movability) => {\n+                    (def_id, UpvarSubsts::Generator(substs), Some(movability))\n                 }\n                 _ => {\n                     span_bug!(expr.span, \"closure expr w/o closure type: {:?}\", closure_ty);\n@@ -489,7 +489,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 closure_id: def_id,\n                 substs,\n                 upvars,\n-                interior,\n+                movability,\n             }\n         }\n "}, {"sha": "c27250267bbc822091615ac6badeace929dedb76", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -266,9 +266,9 @@ pub enum ExprKind<'tcx> {\n     },\n     Closure {\n         closure_id: DefId,\n-        substs: ClosureSubsts<'tcx>,\n+        substs: UpvarSubsts<'tcx>,\n         upvars: Vec<ExprRef<'tcx>>,\n-        interior: Option<(GeneratorInterior<'tcx>, hir::GeneratorMovability)>,\n+        movability: Option<hir::GeneratorMovability>,\n     },\n     Literal {\n         literal: Literal<'tcx>,"}, {"sha": "44f9542e7339428af0d84c6762865a54a6cd5ae4", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -18,7 +18,7 @@ use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::session::config::OptLevel;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::subst::Substs;\n use syntax::ast;\n use syntax::attr::InlineAttr;\n@@ -376,11 +376,11 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                     self.push_type_name(sig.output(), output);\n                 }\n             },\n-            ty::TyGenerator(def_id, ref closure_substs, _, _) |\n-            ty::TyClosure(def_id, ref closure_substs) => {\n+            ty::TyGenerator(def_id, GeneratorSubsts { ref substs }, _) |\n+            ty::TyClosure(def_id, ClosureSubsts { ref substs }) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n-                let substs = closure_substs.substs.truncate_to(self.tcx, generics);\n+                let substs = substs.truncate_to(self.tcx, generics);\n                 self.push_type_params(substs, iter::empty(), output);\n             }\n             ty::TyError |"}, {"sha": "04d4f7a3968eeace512f7f4af04e29a530340925", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -84,8 +84,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n         .unwrap().def_id;\n     let def = ty::InstanceDef::ClosureOnceShim { call_once };\n \n-    let self_ty = tcx.mk_closure_from_closure_substs(\n-        closure_did, substs);\n+    let self_ty = tcx.mk_closure(closure_did, substs);\n \n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);"}, {"sha": "699a5b17435bd2c4161d8033eee349992cfc0d9f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -166,7 +166,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n     // Check if this is a generator, if so, return the drop glue for it\n-    if let Some(&ty::TyS { sty: ty::TyGenerator(gen_def_id, substs, _, _), .. }) = ty {\n+    if let Some(&ty::TyS { sty: ty::TyGenerator(gen_def_id, substs, _), .. }) = ty {\n         let mir = &**tcx.optimized_mir(gen_def_id).generator_drop.as_ref().unwrap();\n         return mir.subst(tcx, substs.substs);\n     }"}, {"sha": "2bf5a49c97e8ff31eaf648f27dc810065de63878", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 &AggregateKind::Tuple |\n                 &AggregateKind::Adt(..) => {}\n                 &AggregateKind::Closure(def_id, _) |\n-                &AggregateKind::Generator(def_id, _, _, _) => {\n+                &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult {\n                         violations, unsafe_blocks\n                     } = self.tcx.unsafety_check_result(def_id);"}, {"sha": "cd5ebae2d9dfd375139378b93de2bd2b1cb52f53", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -54,12 +54,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n         *substs = self.tcx.erase_regions(substs);\n     }\n \n-    fn visit_closure_substs(&mut self,\n-                            substs: &mut ty::ClosureSubsts<'tcx>,\n-                            _: Location) {\n-        *substs = self.tcx.erase_regions(substs);\n-    }\n-\n     fn visit_statement(&mut self,\n                        block: BasicBlock,\n                        statement: &mut Statement<'tcx>,"}, {"sha": "c4e700cdd1f41aa2d62c720dc0a2d0ef5b2f9a72", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -64,7 +64,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutVisitor};\n-use rustc::ty::{self, TyCtxt, AdtDef, Ty, GeneratorInterior};\n+use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::Substs;\n use util::dump_mir;\n use util::liveness::{self, LivenessMode};\n@@ -464,7 +464,7 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             source: MirSource,\n                             upvars: Vec<Ty<'tcx>>,\n-                            interior: GeneratorInterior<'tcx>,\n+                            interior: Ty<'tcx>,\n                             movable: bool,\n                             mir: &mut Mir<'tcx>)\n     -> (HashMap<Local, (Ty<'tcx>, usize)>,\n@@ -479,7 +479,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Erase regions from the types passed in from typeck so we can compare them with\n     // MIR types\n     let allowed_upvars = tcx.erase_regions(&upvars);\n-    let allowed = match interior.witness.sty {\n+    let allowed = match interior.sty {\n         ty::TyGeneratorWitness(s) => tcx.erase_late_bound_regions(&s),\n         _ => bug!(),\n     };\n@@ -855,9 +855,9 @@ impl MirPass for StateTransform {\n \n         // Get the interior types and substs which typeck computed\n         let (upvars, interior, movable) = match gen_ty.sty {\n-            ty::TyGenerator(_, substs, interior, movability) => {\n+            ty::TyGenerator(_, substs, movability) => {\n                 (substs.upvar_tys(def_id, tcx).collect(),\n-                 interior,\n+                 substs.witness(def_id, tcx),\n                  movability == hir::GeneratorMovability::Movable)\n             }\n             _ => bug!(),"}, {"sha": "a641cf3d93ecfeff5dab38d05389ee2c448a5761", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -780,14 +780,17 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn open_drop<'a>(&mut self) -> BasicBlock {\n         let ty = self.place_ty(self.place);\n         match ty.sty {\n-            ty::TyClosure(def_id, substs) |\n+            ty::TyClosure(def_id, substs) => {\n+                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n+                self.open_drop_for_tuple(&tys)\n+            }\n             // Note that `elaborate_drops` only drops the upvars of a generator,\n             // and this is ok because `open_drop` here can only be reached\n             // within that own generator's resume function.\n             // This should only happen for the self argument on the resume function.\n             // It effetively only contains upvars until the generator transformation runs.\n             // See librustc_mir/transform/generator.rs for more details.\n-            ty::TyGenerator(def_id, substs, _, _) => {\n+            ty::TyGenerator(def_id, substs, _) => {\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }"}, {"sha": "71012ca6d5f7992045124a4af6997ed39a65351d", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -418,11 +418,10 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n                 }\n \n-                AggregateKind::Generator(def_id, substs, interior, movability) => {\n+                AggregateKind::Generator(def_id, substs, movability) => {\n                     self.push(&format!(\"generator\"));\n                     self.push(&format!(\"+ def_id: {:?}\", def_id));\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n-                    self.push(&format!(\"+ interior: {:?}\", interior));\n                     self.push(&format!(\"+ movability: {:?}\", movability));\n                 }\n "}, {"sha": "ce5707276ee1a543a73b96483fd453abec3c5740", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -193,7 +193,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),\n \n-        ty::TyGenerator(def_id, substs, _interior, _movability) => {\n+        ty::TyGenerator(def_id, substs, _movability) => {\n             // rust-lang/rust#49918: types can be constructed, stored\n             // in the interior, and sit idle when generator yields\n             // (and is subsequently dropped)."}, {"sha": "75b56be3c162aa20a4e983eef4e8f291e85a936c", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -421,9 +421,9 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 sig.abi\n             ))\n         }\n-        ty::TyGenerator(def_id, substs, _, _) => {\n+        ty::TyGenerator(def_id, substs, _) => {\n             let tcx = cx.tcx;\n-            let sig = substs.generator_poly_sig(def_id, cx.tcx);\n+            let sig = substs.poly_sig(def_id, cx.tcx);\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);"}, {"sha": "17a8196484f6b084e96d7eeb760019ab1f5fe92b", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -591,7 +591,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                    unique_type_id,\n                                    usage_site_span).finalize(cx)\n         }\n-        ty::TyGenerator(def_id, substs, _, _) => {\n+        ty::TyGenerator(def_id, substs,  _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx).map(|t| {\n                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n             }).collect();"}, {"sha": "599fca9ffdd3607098a55e8956c9c4cdbddcfaa6", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -12,7 +12,7 @@ use common::{C_i32, C_null};\n use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n use llvm::debuginfo::DIScope;\n-use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n@@ -575,11 +575,12 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                 _ => (arg.layout, false)\n             };\n \n-            let upvar_tys = match closure_layout.ty.sty {\n-                ty::TyClosure(def_id, substs) |\n-                ty::TyGenerator(def_id, substs, _, _) => substs.upvar_tys(def_id, tcx),\n+            let (def_id, upvar_substs) = match closure_layout.ty.sty {\n+                ty::TyClosure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+                ty::TyGenerator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n                 _ => bug!(\"upvar_decls with non-closure arg0 type `{}`\", closure_layout.ty)\n             };\n+            let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n             // Store the pointer to closure data in an alloca for debuginfo\n             // because that's what the llvm.dbg.declare intrinsic expects."}, {"sha": "94ef040d80a4f81e58180b0ef3861cdbb37f7353", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -113,23 +113,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span))\n             },\n         );\n-        let substs = ty::ClosureSubsts { substs };\n-        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n-\n         if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n+            let substs = ty::GeneratorSubsts { substs };\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n-                substs.generator_yield_ty(expr_def_id, self.tcx),\n+                substs.yield_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype(\n                 expr.span,\n                 liberated_sig.output(),\n-                substs.generator_return_ty(expr_def_id, self.tcx),\n+                substs.return_ty(expr_def_id, self.tcx),\n             );\n-            return self.tcx.mk_generator(expr_def_id, substs, interior, movability);\n+            self.demand_eqtype(\n+                expr.span,\n+                interior,\n+                substs.witness(expr_def_id, self.tcx),\n+            );\n+            return self.tcx.mk_generator(expr_def_id, substs, movability);\n         }\n \n+        let substs = ty::ClosureSubsts { substs };\n+        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n+\n         debug!(\n             \"check_closure: expr.id={:?} closure_type={:?}\",\n             expr.id, closure_type"}, {"sha": "b3d2a09a72cc714b69b23acdedafe22935af35cb", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind, Expr};\n use rustc::middle::region;\n-use rustc::ty::{self, Ty, GeneratorInterior};\n+use rustc::ty::{self, Ty};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n use super::FnCtxt;\n@@ -85,7 +85,7 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n                                         def_id: DefId,\n                                         body_id: hir::BodyId,\n-                                        interior: GeneratorInterior<'tcx>) {\n+                                        interior: Ty<'tcx>) {\n     let body = fcx.tcx.hir.body(body_id);\n     let mut visitor = InteriorVisitor {\n         fcx,\n@@ -135,7 +135,7 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n             witness, body.value.span);\n \n     // Unify the type variable inside the generator with the new witness\n-    match fcx.at(&fcx.misc(body.value.span), fcx.param_env).eq(interior.witness, witness) {\n+    match fcx.at(&fcx.misc(body.value.span), fcx.param_env).eq(interior, witness) {\n         Ok(ok) => fcx.register_infer_ok_obligations(ok),\n         _ => bug!(),\n     }"}, {"sha": "0cc1b62e83e3429fa2e800ce560e91e8286a1344", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -208,7 +208,7 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     deferred_cast_checks: RefCell<Vec<cast::CastCheck<'tcx>>>,\n \n-    deferred_generator_interiors: RefCell<Vec<(hir::BodyId, ty::GeneratorInterior<'tcx>)>>,\n+    deferred_generator_interiors: RefCell<Vec<(hir::BodyId, Ty<'tcx>)>>,\n \n     // Anonymized types found in explicit return types and their\n     // associated fresh inference variable. Writeback resolves these\n@@ -1009,7 +1009,7 @@ struct GeneratorTypes<'tcx> {\n     yield_ty: ty::Ty<'tcx>,\n \n     /// Types that are captured (see `GeneratorInterior` for more).\n-    interior: ty::GeneratorInterior<'tcx>,\n+    interior: ty::Ty<'tcx>,\n \n     /// Indicates if the generator is movable or static (immovable)\n     movability: hir::GeneratorMovability,\n@@ -1087,12 +1087,11 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     // This ensures that all nested generators appear before the entry of this generator.\n     // resolve_generator_interiors relies on this property.\n     let gen_ty = if can_be_generator.is_some() && body.is_generator {\n-        let witness = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n-        let interior = ty::GeneratorInterior { witness };\n+        let interior = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior));\n         Some(GeneratorTypes {\n             yield_ty: fcx.yield_ty.unwrap(),\n-            interior: interior,\n+            interior,\n             movability: can_be_generator.unwrap(),\n         })\n     } else {"}, {"sha": "6bede52b239632cfcbef885ef0f09cfb8a40926c", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -46,7 +46,7 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -74,11 +74,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for InferBorrowKindVisitor<'a, 'gcx, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {\n         match expr.node {\n-            hir::ExprClosure(cc, _, body_id, _, gen) => {\n+            hir::ExprClosure(cc, _, body_id, _, _) => {\n                 let body = self.fcx.tcx.hir.body(body_id);\n                 self.visit_body(body);\n                 self.fcx\n-                    .analyze_closure(expr.id, expr.hir_id, expr.span, body, cc, gen);\n+                    .analyze_closure(expr.id, expr.hir_id, expr.span, body, cc);\n             }\n \n             _ => {}\n@@ -96,7 +96,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         span: Span,\n         body: &hir::Body,\n         capture_clause: hir::CaptureClause,\n-        gen: Option<hir::GeneratorMovability>,\n     ) {\n         /*!\n          * Analysis starting point.\n@@ -109,9 +108,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         // Extract the type of the closure.\n-        let (closure_def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n-            ty::TyClosure(def_id, substs) |\n-            ty::TyGenerator(def_id, substs, _, _) => (def_id, substs),\n+        let (closure_def_id, substs) = match self.node_ty(closure_hir_id).sty {\n+            ty::TyClosure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+            ty::TyGenerator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n             ref t => {\n                 span_bug!(\n                     span,\n@@ -122,10 +121,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let infer_kind = if gen.is_some() {\n-            false\n+        let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs{\n+            if self.closure_kind(closure_def_id, closure_substs).is_none() {\n+                Some(closure_substs)\n+            } else {\n+                None\n+            }\n         } else {\n-            self.closure_kind(closure_def_id, closure_substs).is_none()\n+            None\n         };\n \n         self.tcx.with_freevars(closure_node_id, |freevars| {\n@@ -173,7 +176,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             &self.tables.borrow(),\n         ).consume_body(body);\n \n-        if infer_kind {\n+        if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred.\n             let inferred_kind = delegate.current_closure_kind;\n@@ -209,14 +212,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Equate the type variables for the upvars with the actual types.\n         let final_upvar_tys = self.final_upvar_tys(closure_node_id);\n         debug!(\n-            \"analyze_closure: id={:?} closure_substs={:?} final_upvar_tys={:?}\",\n+            \"analyze_closure: id={:?} substs={:?} final_upvar_tys={:?}\",\n             closure_node_id,\n-            closure_substs,\n+            substs,\n             final_upvar_tys\n         );\n-        for (upvar_ty, final_upvar_ty) in closure_substs\n-            .upvar_tys(closure_def_id, self.tcx)\n-            .zip(final_upvar_tys)\n+        for (upvar_ty, final_upvar_ty) in substs.upvar_tys(closure_def_id, self.tcx)\n+                                                .zip(final_upvar_tys)\n         {\n             self.demand_suptype(span, upvar_ty, final_upvar_ty);\n         }"}, {"sha": "f0f392a2458e9079389458bfd3aa7239299fb37f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=710b4ad2a5cc8e70b42d6d85ebe4eacc5b65548b", "patch": "@@ -933,38 +933,36 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,\n     // and we don't do that for closures.\n-    if let NodeExpr(&hir::Expr { node: hir::ExprClosure(..), .. }) = node {\n-        // add a dummy parameter for the closure kind\n-        types.push(ty::TypeParameterDef {\n-            index: type_start,\n-            name: Symbol::intern(\"<closure_kind>\").as_interned_str(),\n-            def_id,\n-            has_default: false,\n-            object_lifetime_default: rl::Set1::Empty,\n-            pure_wrt_drop: false,\n-            synthetic: None,\n-        });\n-\n-        // add a dummy parameter for the closure signature\n-        types.push(ty::TypeParameterDef {\n-            index: type_start + 1,\n-            name: Symbol::intern(\"<closure_signature>\").as_interned_str(),\n-            def_id,\n-            has_default: false,\n-            object_lifetime_default: rl::Set1::Empty,\n-            pure_wrt_drop: false,\n-            synthetic: None,\n-        });\n+    if let NodeExpr(&hir::Expr { node: hir::ExprClosure(.., gen), .. }) = node {\n+        let dummy_args = if gen.is_some() {\n+            &[\"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n+        } else {\n+            &[\"<closure_kind>\", \"<closure_signature>\"][..]\n+        };\n \n-        tcx.with_freevars(node_id, |fv| {\n-            types.extend(fv.iter().zip(2..).map(|(_, i)| ty::TypeParameterDef {\n-                index: type_start + i,\n-                name: Symbol::intern(\"<upvar>\").as_interned_str(),\n+        for (i, &arg) in dummy_args.iter().enumerate() {\n+            types.push(ty::TypeParameterDef {\n+                index: type_start + i as u32,\n+                name: Symbol::intern(arg).as_interned_str(),\n                 def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n                 pure_wrt_drop: false,\n                 synthetic: None,\n+            });\n+        }\n+\n+        tcx.with_freevars(node_id, |fv| {\n+            types.extend(fv.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n+                ty::TypeParameterDef {\n+                    index: type_start + i,\n+                    name: Symbol::intern(\"<upvar>\").as_interned_str(),\n+                    def_id,\n+                    has_default: false,\n+                    object_lifetime_default: rl::Set1::Empty,\n+                    pure_wrt_drop: false,\n+                    synthetic: None,\n+                }\n             }));\n         });\n     }"}]}