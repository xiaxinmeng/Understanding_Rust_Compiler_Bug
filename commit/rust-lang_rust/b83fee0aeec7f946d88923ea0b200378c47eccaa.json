{"sha": "b83fee0aeec7f946d88923ea0b200378c47eccaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4M2ZlZTBhZWVjN2Y5NDZkODg5MjNlYTBiMjAwMzc4YzQ3ZWNjYWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:50Z"}, "message": "rollup merge of #21120: fhahn/issue-model-lexer-questionmark\n\nThis PR updates `grammar/verify.rs` to work with master and handles the question mark of `?Sized` correctly (#15879).", "tree": {"sha": "2e00dfe026ae1caf80f7a0dcdef91c5138f23d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e00dfe026ae1caf80f7a0dcdef91c5138f23d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83fee0aeec7f946d88923ea0b200378c47eccaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83fee0aeec7f946d88923ea0b200378c47eccaa", "html_url": "https://github.com/rust-lang/rust/commit/b83fee0aeec7f946d88923ea0b200378c47eccaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83fee0aeec7f946d88923ea0b200378c47eccaa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489294d517e7c00cc4a45fdc47b7ccef54330da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/489294d517e7c00cc4a45fdc47b7ccef54330da6", "html_url": "https://github.com/rust-lang/rust/commit/489294d517e7c00cc4a45fdc47b7ccef54330da6"}, {"sha": "6cfbcca41e259ddf93fb86a54e8d5f5bbcd3e6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfbcca41e259ddf93fb86a54e8d5f5bbcd3e6f1", "html_url": "https://github.com/rust-lang/rust/commit/6cfbcca41e259ddf93fb86a54e8d5f5bbcd3e6f1"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "7d071d5e724b4635c2a9640bcb4685b05f4701e3", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b83fee0aeec7f946d88923ea0b200378c47eccaa/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/b83fee0aeec7f946d88923ea0b200378c47eccaa/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=b83fee0aeec7f946d88923ea0b200378c47eccaa", "patch": "@@ -194,8 +194,13 @@ LIT_STR_RAW\n   : 'r' LIT_STR_RAW_INNER SUFFIX?\n   ;\n \n+\n+QUESTION : '?';\n+\n IDENT : XID_start XID_continue* ;\n \n+fragment QUESTION_IDENTIFIER : QUESTION? IDENT;\n+\n LIFETIME : '\\'' IDENT ;\n \n WHITESPACE : [ \\r\\n\\t]+ ;"}, {"sha": "e9409a6106131ec3870e91776f27cce605e92e33", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b83fee0aeec7f946d88923ea0b200378c47eccaa/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83fee0aeec7f946d88923ea0b200378c47eccaa/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=b83fee0aeec7f946d88923ea0b200378c47eccaa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, plugin)]\n+#![feature(plugin)]\n \n extern crate syntax;\n extern crate rustc;\n@@ -107,13 +107,14 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"LE\"                => token::Le,\n             \"LIT_BINARY\"        => token::Literal(token::Binary(Name(0)), None),\n             \"LIT_BINARY_RAW\"    => token::Literal(token::BinaryRaw(Name(0), 0), None),\n+            \"QUESTION\"          => token::Question,\n             _                   => continue,\n         };\n \n         res.insert(num.to_string(), tok);\n     }\n \n-    debug!(\"Token map: {}\", res);\n+    debug!(\"Token map: {:?}\", res);\n     res\n }\n \n@@ -161,7 +162,7 @@ fn fixchar(mut lit: &str) -> ast::Name {\n     parse::token::intern(lit.slice(1, lit.len() - 1))\n }\n \n-fn count(lit: &str) -> uint {\n+fn count(lit: &str) -> usize {\n     lit.chars().take_while(|c| *c == '#').count()\n }\n \n@@ -176,12 +177,12 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAn\n     let toknum = m.name(\"toknum\").unwrap_or(\"\");\n     let content = m.name(\"content\").unwrap_or(\"\");\n \n-    let proto_tok = tokens.get(toknum).expect(format!(\"didn't find token {} in the map\",\n+    let proto_tok = tokens.get(toknum).expect(format!(\"didn't find token {:?} in the map\",\n                                                               toknum).as_slice());\n \n     let nm = parse::token::intern(content);\n \n-    debug!(\"What we got: content (`{}`), proto: {}\", content, proto_tok);\n+    debug!(\"What we got: content (`{}`), proto: {:?}\", content, proto_tok);\n \n     let real_tok = match *proto_tok {\n         token::BinOp(..)           => token::BinOp(str_to_binop(content)),\n@@ -265,7 +266,7 @@ fn main() {\n             continue\n         }\n \n-        assert!(rustc_tok.sp == antlr_tok.sp, \"{} and {} have different spans\", rustc_tok,\n+        assert!(rustc_tok.sp == antlr_tok.sp, \"{:?} and {:?} have different spans\", rustc_tok,\n                 antlr_tok);\n \n         macro_rules! matches {\n@@ -276,12 +277,12 @@ fn main() {\n                             if !tok_cmp(&rustc_tok.tok, &antlr_tok.tok) {\n                                 // FIXME #15677: needs more robust escaping in\n                                 // antlr\n-                                warn!(\"Different names for {} and {}\", rustc_tok, antlr_tok);\n+                                warn!(\"Different names for {:?} and {:?}\", rustc_tok, antlr_tok);\n                             }\n                         }\n-                        _ => panic!(\"{} is not {}\", antlr_tok, rustc_tok)\n+                        _ => panic!(\"{:?} is not {:?}\", antlr_tok, rustc_tok)\n                     },)*\n-                    ref c => assert!(c == &antlr_tok.tok, \"{} is not {}\", rustc_tok, antlr_tok)\n+                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", rustc_tok, antlr_tok)\n                 }\n             )\n         }"}]}