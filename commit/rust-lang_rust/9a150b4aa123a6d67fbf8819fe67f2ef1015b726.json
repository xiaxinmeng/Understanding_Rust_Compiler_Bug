{"sha": "9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTUwYjRhYTEyM2E2ZDY3ZmJmODgxOWZlNjdmMmVmMTAxNWI3MjY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-25T12:08:32Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-25T16:16:14Z"}, "message": "Use lint_root", "tree": {"sha": "30f64aee6d53a99d91167ca6e132b7e0d0f8ace4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f64aee6d53a99d91167ca6e132b7e0d0f8ace4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "html_url": "https://github.com/rust-lang/rust/commit/9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24d3f5b48f177379ba7b8727e5ba9b52b52da2f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/24d3f5b48f177379ba7b8727e5ba9b52b52da2f5", "html_url": "https://github.com/rust-lang/rust/commit/24d3f5b48f177379ba7b8727e5ba9b52b52da2f5"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "1a8a627335863a6881ea1d75d8b2186448a0f47b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "patch": "@@ -23,7 +23,7 @@ use crate::syntax::{\n     source_map::{BytePos, Span},\n };\n use crate::utils::{\n-    in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint, span_lint_and_then,\n+    in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node, span_lint_node_and_then,\n     walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n@@ -87,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        // Looks for `call(&T)` where `T: !Copy`\n+        // Looks for `call(x: &T)` where `T: !Copy`\n         let call = |kind: &mir::TerminatorKind<'tcx>| -> Option<(def_id::DefId, mir::Local, ty::Ty<'tcx>)> {\n             if_chain! {\n                 if let TerminatorKind::Call { func, args, .. } = kind;\n@@ -225,6 +225,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n \n             if !used_later {\n                 let span = terminator.source_info.span;\n+                let node = if let mir::ClearCrossCrate::Set(scope_local_data) = &mir.source_scope_local_data {\n+                    scope_local_data[terminator.source_info.scope].lint_root\n+                } else {\n+                    unreachable!()\n+                };\n+\n                 if_chain! {\n                     if !in_macro(span);\n                     if let Some(snip) = snippet_opt(cx, span);\n@@ -234,7 +240,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                             span.lo() + BytePos(u32::try_from(dot).unwrap())\n                         );\n \n-                        span_lint_and_then(cx, REDUNDANT_CLONE, sugg_span, \"redundant clone\", |db| {\n+                        span_lint_node_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |db| {\n                             db.span_suggestion_with_applicability(\n                                 sugg_span,\n                                 \"remove this\",\n@@ -247,7 +253,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                             );\n                         });\n                     } else {\n-                        span_lint(cx, REDUNDANT_CLONE, span, \"redundant clone\");\n+                        span_lint_node(cx, REDUNDANT_CLONE, node, span, \"redundant clone\");\n                     }\n                 }\n             }"}, {"sha": "1a8db837f32b510d6987428d445a09cb152c08e1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "patch": "@@ -562,6 +562,23 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n     db.docs_link(lint);\n }\n \n+pub fn span_lint_node(cx: &LateContext<'_, '_>, lint: &'static Lint, node: NodeId, sp: Span, msg: &str) {\n+    DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg)).docs_link(lint);\n+}\n+\n+pub fn span_lint_node_and_then(\n+    cx: &LateContext<'_, '_>,\n+    lint: &'static Lint,\n+    node: NodeId,\n+    sp: Span,\n+    msg: &str,\n+    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n+) {\n+    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_node(lint, node, sp, msg));\n+    f(&mut db.0);\n+    db.docs_link(lint);\n+}\n+\n /// Add a span lint with a suggestion on how to fix it.\n ///\n /// These suggestions can be parsed by rustfix to allow it to automatically fix your code."}, {"sha": "deedde3823162bae9b6941cffe012d926de483ac", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "patch": "@@ -31,6 +31,9 @@ fn main() {\n     let _ = OsString::new().to_owned();\n \n     let _ = OsString::new().to_os_string();\n+\n+    // Check that lint level works\n+    #[allow(clippy::redundant_clone)] let _ = String::new().to_string();\n }\n \n #[derive(Clone)]"}, {"sha": "db452822f89154ce6c3f36c6f6defa384fb2ac23", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a150b4aa123a6d67fbf8819fe67f2ef1015b726/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=9a150b4aa123a6d67fbf8819fe67f2ef1015b726", "patch": "@@ -96,15 +96,15 @@ note: this value is dropped without further use\n    |             ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:40:22\n+  --> $DIR/redundant_clone.rs:43:22\n    |\n-40 |         (a.clone(), a.clone())\n+43 |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:40:21\n+  --> $DIR/redundant_clone.rs:43:21\n    |\n-40 |         (a.clone(), a.clone())\n+43 |         (a.clone(), a.clone())\n    |                     ^\n \n error: aborting due to 9 previous errors"}]}