{"sha": "9d13520a6b00fe239c3990e487cd7449722c0c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTM1MjBhNmIwMGZlMjM5YzM5OTBlNDg3Y2Q3NDQ5NzIyYzBjNzQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-08T01:26:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-08T07:47:41Z"}, "message": "Replace \"rc\"/\"arc\" lang items with Rc/Arc diagnostic items.", "tree": {"sha": "556abdcc83a0f0bfbf0a65893f71ad2b8fb8581a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556abdcc83a0f0bfbf0a65893f71ad2b8fb8581a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d13520a6b00fe239c3990e487cd7449722c0c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d13520a6b00fe239c3990e487cd7449722c0c74", "html_url": "https://github.com/rust-lang/rust/commit/9d13520a6b00fe239c3990e487cd7449722c0c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d13520a6b00fe239c3990e487cd7449722c0c74/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abbd8878d3b67238f3611b0587c704ba94f39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abbd8878d3b67238f3611b0587c704ba94f39c", "html_url": "https://github.com/rust-lang/rust/commit/42abbd8878d3b67238f3611b0587c704ba94f39c"}], "stats": {"total": 127, "additions": 49, "deletions": 78}, "files": [{"sha": "abc4056cf5695746d93fa37e992972146ab9781f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -279,7 +279,8 @@ struct RcBox<T: ?Sized> {\n /// type `T`.\n ///\n /// [get_mut]: #method.get_mut\n-#[cfg_attr(not(test), lang = \"rc\")]\n+#[cfg_attr(all(bootstrap, not(test)), lang = \"rc\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n     ptr: NonNull<RcBox<T>>,"}, {"sha": "b1b22e46a7c2fd0766b9e5ee671a9e11d3641010", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -207,7 +207,8 @@ macro_rules! acquire {\n /// counting in general.\n ///\n /// [rc_examples]: ../../std/rc/index.html#examples\n-#[cfg_attr(not(test), lang = \"arc\")]\n+#[cfg_attr(all(bootstrap, not(test)), lang = \"arc\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Arc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n     ptr: NonNull<ArcInner<T>>,"}, {"sha": "120c96b421104b4d2de741fc9e8f691c0db492ec", "filename": "src/librustc_error_codes/error_codes/E0152.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_error_codes%2Ferror_codes%2FE0152.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_error_codes%2Ferror_codes%2FE0152.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0152.md?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -5,8 +5,8 @@ Erroneous code example:\n ```compile_fail,E0152\n #![feature(lang_items)]\n \n-#[lang = \"arc\"]\n-struct Foo; // error: duplicate lang item found: `arc`\n+#[lang = \"owned_box\"]\n+struct Foo; // error: duplicate lang item found: `owned_box`\n ```\n \n Lang items are already implemented in the standard library. Unless you are"}, {"sha": "e7ae51ca58835b12ca488205978f56b914c21fd7", "filename": "src/librustc_error_codes/error_codes/E0718.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -6,6 +6,6 @@ Examples of erroneous code:\n ```compile_fail,E0718\n #![feature(lang_items)]\n \n-#[lang = \"arc\"]\n+#[lang = \"owned_box\"]\n static X: u32 = 42;\n ```"}, {"sha": "5a3a9cabeb450d252c211f525da4363e47a04e4a", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -254,7 +254,4 @@ language_item_table! {\n     AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n \n     TerminationTraitLangItem,    \"termination\",        termination,             Target::Trait;\n-\n-    Arc,                         \"arc\",                arc,                     Target::Struct;\n-    Rc,                          \"rc\",                 rc,                      Target::Struct;\n }"}, {"sha": "076134b8e9462c630cb61459331d40d084ff277a", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -2213,6 +2213,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         Some(self.mk_generic_adt(def_id, ty))\n     }\n \n+    #[inline]\n+    pub fn mk_diagnostic_item(self, ty: Ty<'tcx>, name: Symbol) -> Option<Ty<'tcx>> {\n+        let def_id = self.get_diagnostic_item(name)?;\n+        Some(self.mk_generic_adt(def_id, ty))\n+    }\n+\n     #[inline]\n     pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem, None);"}, {"sha": "3683ea3288feb10909c1260b72dc12939db67f7d", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1856,14 +1856,9 @@ bitflags! {\n         const IS_BOX              = 1 << 6;\n         /// Indicates whether the type is `ManuallyDrop`.\n         const IS_MANUALLY_DROP    = 1 << 7;\n-        // FIXME(matthewjasper) replace these with diagnostic items\n-        /// Indicates whether the type is an `Arc`.\n-        const IS_ARC              = 1 << 8;\n-        /// Indicates whether the type is an `Rc`.\n-        const IS_RC               = 1 << 9;\n         /// Indicates whether the variant list of this ADT is `#[non_exhaustive]`.\n         /// (i.e., this flag is never set unless this ADT is an enum).\n-        const IS_VARIANT_LIST_NON_EXHAUSTIVE = 1 << 10;\n+        const IS_VARIANT_LIST_NON_EXHAUSTIVE = 1 << 8;\n     }\n }\n \n@@ -2248,12 +2243,6 @@ impl<'tcx> AdtDef {\n         if Some(did) == tcx.lang_items().manually_drop() {\n             flags |= AdtFlags::IS_MANUALLY_DROP;\n         }\n-        if Some(did) == tcx.lang_items().arc() {\n-            flags |= AdtFlags::IS_ARC;\n-        }\n-        if Some(did) == tcx.lang_items().rc() {\n-            flags |= AdtFlags::IS_RC;\n-        }\n \n         AdtDef { did, variants, flags, repr }\n     }\n@@ -2332,16 +2321,6 @@ impl<'tcx> AdtDef {\n         self.flags.contains(AdtFlags::IS_PHANTOM_DATA)\n     }\n \n-    /// Returns `true` if this is `Arc<T>`.\n-    pub fn is_arc(&self) -> bool {\n-        self.flags.contains(AdtFlags::IS_ARC)\n-    }\n-\n-    /// Returns `true` if this is `Rc<T>`.\n-    pub fn is_rc(&self) -> bool {\n-        self.flags.contains(AdtFlags::IS_RC)\n-    }\n-\n     /// Returns `true` if this is Box<T>.\n     #[inline]\n     pub fn is_box(&self) -> bool {"}, {"sha": "fbd5049b0fbcb6789abeaa64ae463f736e04fa90", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1865,24 +1865,6 @@ impl<'tcx> TyS<'tcx> {\n         self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()\n     }\n \n-    /// Returns `true` if this type is an `Arc<T>`.\n-    #[inline]\n-    pub fn is_arc(&self) -> bool {\n-        match self.kind {\n-            Adt(def, _) => def.is_arc(),\n-            _ => false,\n-        }\n-    }\n-\n-    /// Returns `true` if this type is an `Rc<T>`.\n-    #[inline]\n-    pub fn is_rc(&self) -> bool {\n-        match self.kind {\n-            Adt(def, _) => def.is_rc(),\n-            _ => false,\n-        }\n-    }\n-\n     #[inline]\n     pub fn is_box(&self) -> bool {\n         match self.kind {"}, {"sha": "404cc0c74679fb16591c6739598f8c10b04b16c3", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{symbol::sym, Span};\n use rustc_target::abi::VariantIdx;\n \n use super::borrow_set::BorrowData;\n@@ -632,20 +632,20 @@ pub(super) enum BorrowedContentSource<'tcx> {\n }\n \n impl BorrowedContentSource<'tcx> {\n-    pub(super) fn describe_for_unnamed_place(&self) -> String {\n+    pub(super) fn describe_for_unnamed_place(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n             BorrowedContentSource::DerefRawPointer => \"a raw pointer\".to_string(),\n             BorrowedContentSource::DerefSharedRef => \"a shared reference\".to_string(),\n             BorrowedContentSource::DerefMutableRef => \"a mutable reference\".to_string(),\n-            BorrowedContentSource::OverloadedDeref(ty) => {\n-                if ty.is_rc() {\n+            BorrowedContentSource::OverloadedDeref(ty) => match ty.kind {\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::Rc, def.did) => {\n                     \"an `Rc`\".to_string()\n-                } else if ty.is_arc() {\n+                }\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::Arc, def.did) => {\n                     \"an `Arc`\".to_string()\n-                } else {\n-                    format!(\"dereference of `{}`\", ty)\n                 }\n-            }\n+                _ => format!(\"dereference of `{}`\", ty),\n+            },\n             BorrowedContentSource::OverloadedIndex(ty) => format!(\"index of `{}`\", ty),\n         }\n     }\n@@ -662,22 +662,22 @@ impl BorrowedContentSource<'tcx> {\n         }\n     }\n \n-    pub(super) fn describe_for_immutable_place(&self) -> String {\n+    pub(super) fn describe_for_immutable_place(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n             BorrowedContentSource::DerefRawPointer => \"a `*const` pointer\".to_string(),\n             BorrowedContentSource::DerefSharedRef => \"a `&` reference\".to_string(),\n             BorrowedContentSource::DerefMutableRef => {\n                 bug!(\"describe_for_immutable_place: DerefMutableRef isn't immutable\")\n             }\n-            BorrowedContentSource::OverloadedDeref(ty) => {\n-                if ty.is_rc() {\n+            BorrowedContentSource::OverloadedDeref(ty) => match ty.kind {\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::Rc, def.did) => {\n                     \"an `Rc`\".to_string()\n-                } else if ty.is_arc() {\n+                }\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::Arc, def.did) => {\n                     \"an `Arc`\".to_string()\n-                } else {\n-                    format!(\"a dereference of `{}`\", ty)\n                 }\n-            }\n+                _ => format!(\"a dereference of `{}`\", ty),\n+            },\n             BorrowedContentSource::OverloadedIndex(ty) => format!(\"an index of `{}`\", ty),\n         }\n     }"}, {"sha": "1fbecb75dff531b3787bd5bbbeb2d1086177500e", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -377,7 +377,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         span,\n                         &format!(\"`{}` which is behind a {}\", place_desc, source_desc),\n                     ),\n-                    (_, _) => self.cannot_move_out_of(span, &source.describe_for_unnamed_place()),\n+                    (_, _) => self.cannot_move_out_of(\n+                        span,\n+                        &source.describe_for_unnamed_place(self.infcx.tcx),\n+                    ),\n                 }\n             }\n         };"}, {"sha": "635c299cf81364c0a5f82a5e2d3e96d17a20851d", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         local: the_place_err.local,\n                         projection: proj_base,\n                     });\n-                    let pointer_type = source.describe_for_immutable_place();\n+                    let pointer_type = source.describe_for_immutable_place(self.infcx.tcx);\n                     opt_source = Some(source);\n                     if let Some(desc) = access_place_desc {\n                         item_msg = format!(\"`{}`\", desc);"}, {"sha": "6845cb3b9a35258477360e67c5c64b84134856f7", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -144,6 +144,7 @@ symbols! {\n         any,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n+        Arc,\n         Arguments,\n         ArgumentV1,\n         arm_target_feature,\n@@ -582,6 +583,7 @@ symbols! {\n         raw_dylib,\n         raw_identifiers,\n         raw_ref_op,\n+        Rc,\n         Ready,\n         reason,\n         recursion_limit,"}, {"sha": "57e2349bb2e803f037d66cc6e98d22399636f7db", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -902,8 +902,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>,\n     ) {\n         let rcvr = &args[0];\n-        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, rcvr_t, lang_item| {\n-            if let Some(new_rcvr_t) = self.tcx.mk_lang_item(rcvr_t, lang_item) {\n+        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, new_rcvr_t| {\n+            if let Some(new_rcvr_t) = new_rcvr_t {\n                 if let Ok(pick) = self.lookup_probe(\n                     span,\n                     segment.ident,\n@@ -931,10 +931,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Try alternative arbitrary self types that could fulfill this call.\n                 // FIXME: probe for all types that *could* be arbitrary self-types, not\n                 // just this whitelist.\n-                try_alt_rcvr(&mut err, rcvr_t, lang_items::OwnedBoxLangItem);\n-                try_alt_rcvr(&mut err, rcvr_t, lang_items::PinTypeLangItem);\n-                try_alt_rcvr(&mut err, rcvr_t, lang_items::Arc);\n-                try_alt_rcvr(&mut err, rcvr_t, lang_items::Rc);\n+                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, lang_items::OwnedBoxLangItem));\n+                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, lang_items::PinTypeLangItem));\n+                try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Arc));\n+                try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Rc));\n             }\n             err.emit();\n         }"}, {"sha": "94467b9bddeb0a900d314e889cef8bbb652dec99", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1,6 +1,6 @@\n #![feature(lang_items)]\n \n-#[lang = \"arc\"]\n+#[lang = \"owned_box\"]\n struct Foo; //~ ERROR E0152\n \n fn main() {"}, {"sha": "fbaa276ce1093cad78379e3e96a033cf9421cd76", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: found duplicate lang item `arc`\n+error[E0152]: found duplicate lang item `owned_box`\n   --> $DIR/E0152.rs:4:1\n    |\n LL | struct Foo;"}, {"sha": "909cae0ba25a210d2380acc48118a6c92058c5de", "filename": "src/test/ui/error-codes/E0718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1,7 +1,7 @@\n #![feature(lang_items)]\n \n-// Arc is expected to be a struct, so this will error.\n-#[lang = \"arc\"] //~ ERROR language item must be applied to a struct\n+// Box is expected to be a struct, so this will error.\n+#[lang = \"owned_box\"] //~ ERROR language item must be applied to a struct\n static X: u32 = 42;\n \n fn main() {}"}, {"sha": "30378dd167457dcd3cb74aaf3f2fd868733d3077", "filename": "src/test/ui/error-codes/E0718.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d13520a6b00fe239c3990e487cd7449722c0c74/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr?ref=9d13520a6b00fe239c3990e487cd7449722c0c74", "patch": "@@ -1,8 +1,8 @@\n-error[E0718]: `arc` language item must be applied to a struct\n+error[E0718]: `owned_box` language item must be applied to a struct\n   --> $DIR/E0718.rs:4:1\n    |\n-LL | #[lang = \"arc\"]\n-   | ^^^^^^^^^^^^^^^ attribute should be applied to a struct, not a static item\n+LL | #[lang = \"owned_box\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^ attribute should be applied to a struct, not a static item\n \n error: aborting due to previous error\n "}]}