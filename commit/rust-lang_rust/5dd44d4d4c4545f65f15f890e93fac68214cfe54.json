{"sha": "5dd44d4d4c4545f65f15f890e93fac68214cfe54", "node_id": "C_kwDOAAsO6NoAKDVkZDQ0ZDRkNGM0NTQ1ZjY1ZjE1Zjg5MGU5M2ZhYzY4MjE0Y2ZlNTQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-29T05:16:47Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-04T09:30:52Z"}, "message": "fix #102396, suggest parentheses for possible range methods", "tree": {"sha": "2c79664ff64bc841dd9c0e61fecd6b6789df22f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c79664ff64bc841dd9c0e61fecd6b6789df22f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dd44d4d4c4545f65f15f890e93fac68214cfe54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd44d4d4c4545f65f15f890e93fac68214cfe54", "html_url": "https://github.com/rust-lang/rust/commit/5dd44d4d4c4545f65f15f890e93fac68214cfe54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dd44d4d4c4545f65f15f890e93fac68214cfe54/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f8b4b98503e3f88623eb59d4f20432161b840a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f8b4b98503e3f88623eb59d4f20432161b840a", "html_url": "https://github.com/rust-lang/rust/commit/d9f8b4b98503e3f88623eb59d4f20432161b840a"}], "stats": {"total": 354, "additions": 339, "deletions": 15}, "files": [{"sha": "827c3c93a73d9bfe0886f17a7c4233248d760ac1", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=5dd44d4d4c4545f65f15f890e93fac68214cfe54", "patch": "@@ -133,3 +133,8 @@ hir_analysis_extern_crate_not_idiomatic =\n     .suggestion = convert it to a `{$msg_code}`\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n+hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n+\n+hir_analysis_missing_parentheses_in_range = `{$ty_str}` is not an iterator\n+\n+hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call the `{$func_name}` function"}, {"sha": "d7189e70d064e7131ccfa33c8f5be28bb6b2e739", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5dd44d4d4c4545f65f15f890e93fac68214cfe54", "patch": "@@ -2,6 +2,7 @@\n //! found or is otherwise invalid.\n \n use crate::check::FnCtxt;\n+use crate::errors;\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n@@ -12,7 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, Node, QPath};\n+use rustc_hir::{is_range_literal, ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n@@ -271,9 +272,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 };\n \n-                if self.suggest_constraining_numerical_ty(\n-                    tcx, actual, source, span, item_kind, item_name, &ty_str,\n-                ) {\n+                if self.suggest_range_for_iter(tcx, actual, source, span, item_name, &ty_str)\n+                    || self.suggest_constraining_numerical_ty(\n+                        tcx, actual, source, span, item_kind, item_name, &ty_str,\n+                    )\n+                {\n                     return None;\n                 }\n \n@@ -1201,6 +1204,69 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    fn suggest_range_for_iter(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        actual: Ty<'tcx>,\n+        source: SelfSource<'tcx>,\n+        span: Span,\n+        item_name: Ident,\n+        ty_str: &str,\n+    ) -> bool {\n+        if let SelfSource::MethodCall(expr) = source {\n+            let mut search_limit = 5;\n+            for (_, parent) in tcx.hir().parent_iter(expr.hir_id) {\n+                search_limit -= 1;\n+                if search_limit == 0 {\n+                    break;\n+                }\n+\n+                if let Node::Expr(parent_expr) = parent && is_range_literal(parent_expr) {\n+                    let span_included = match parent_expr.kind {\n+                            hir::ExprKind::Struct(_, eps, _) =>\n+                                eps.len() > 0 && eps.last().map_or(false, |ep| ep.span.contains(span)),\n+                            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                            hir::ExprKind::Call(ref func, ..) => func.span.contains(span),\n+                            _ => false,\n+                    };\n+\n+                    if !span_included {\n+                        continue;\n+                    }\n+\n+                    let range_def_id = self.tcx.lang_items().range_struct().unwrap();\n+                    let range_ty = self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n+\n+                    // avoid suggesting when the method name is not implemented for a `range`\n+                    let pick =  self.lookup_probe(\n+                        span,\n+                        item_name,\n+                        range_ty,\n+                        expr,\n+                        ProbeScope::AllTraits\n+                    );\n+\n+                    if pick.is_ok() {\n+                        let range_span = parent_expr.span.with_hi(expr.span.hi());\n+                        tcx.sess.emit_err(errors::MissingParentheseInRange {\n+                            span: span,\n+                            ty_str: ty_str.to_string(),\n+                            add_missing_parentheses: Some(\n+                                errors::AddMissingParenthesesInRange {\n+                                    func_name: item_name.name.as_str().to_string(),\n+                                    left: range_span.shrink_to_lo(),\n+                                    right: range_span.shrink_to_hi(),\n+                                }\n+                            )\n+                        });\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     fn suggest_constraining_numerical_ty(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -1263,7 +1329,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // If this is a floating point literal that ends with '.',\n                     // get rid of it to stop this from becoming a member access.\n                     let snippet = snippet.strip_suffix('.').unwrap_or(&snippet);\n-\n                     err.span_suggestion(\n                         lit.span,\n                         &format!("}, {"sha": "6634444c636d459a59499ede3b7be0d566b6b775", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44d4d4c4545f65f15f890e93fac68214cfe54/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=5dd44d4d4c4545f65f15f890e93fac68214cfe54", "patch": "@@ -346,3 +346,28 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis::missing_parentheses_in_range, code = \"E0599\")]\n+pub struct MissingParentheseInRange {\n+    #[primary_span]\n+    #[label(hir_analysis::missing_parentheses_in_range)]\n+    pub span: Span,\n+    pub ty_str: String,\n+\n+    #[subdiagnostic]\n+    pub add_missing_parentheses: Option<AddMissingParenthesesInRange>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion_verbose(\n+    hir_analysis::add_missing_parentheses_in_range,\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct AddMissingParenthesesInRange {\n+    pub func_name: String,\n+    #[suggestion_part(code = \"(\")]\n+    pub left: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub right: Span,\n+}"}, {"sha": "74cd2b358348193a0fd1959799c5700334a36471", "filename": "src/test/ui/methods/issues/issue-90315.rs", "status": "modified", "additions": 68, "deletions": 5, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44d4d4c4545f65f15f890e93fac68214cfe54/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44d4d4c4545f65f15f890e93fac68214cfe54/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs?ref=5dd44d4d4c4545f65f15f890e93fac68214cfe54", "patch": "@@ -1,7 +1,70 @@\n+#![allow(unused)]\n fn main() {\n-  let arr = &[0,1,2,3];\n-  for _i in 0..arr.len().rev() { //~ERROR not an iterator\n-     // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n-     // This regression test ensures it doesn't say that any more.\n-  }\n+    let arr = &[0, 1, 2, 3];\n+    for _i in 0..arr.len().rev() {\n+        //~^ ERROR not an iterator\n+        //~| surround the range in parentheses\n+        // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n+        // This regression test ensures it doesn't say that any more.\n+    }\n+\n+    // Test for #102396\n+    for i in 1..11.rev() {\n+        //~^ ERROR not an iterator\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let end: usize = 10;\n+    for i in 1..end.rev() {\n+        //~^ ERROR not an iterator\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    for i in 1..(end + 1).rev() {\n+        //~^ ERROR not an iterator\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_empty() {\n+        //~^ ERROR not an iterator\n+        //~| ERROR mismatched types [E0308]\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_sorted() {\n+        //~^ ERROR mismatched types [E0308]\n+        //~| ERROR `usize` is not an iterator [E0599]\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res: i32 = 3..6.take(2).sum();\n+    //~^ ERROR `{integer}` is not an iterator [E0599]\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let _sum: i32 = 3..6.sum();\n+    //~^ ERROR `{integer}` is not an iterator [E0599]\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let a = 1 as usize;\n+    let b = 10 as usize;\n+\n+    for _a in a..=b.rev() {\n+        //~^ ERROR not an iterator\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res = ..10.contains(3);\n+    //~^ ERROR not an iterator\n+    //~| HELP surround the range in parentheses\n+\n+    if 1..end.error_method() {\n+        //~^ ERROR no method named `error_method`\n+        //~| ERROR mismatched types [E0308]\n+        // Won't suggest\n+    }\n+\n+    let _res = b.take(1)..a;\n+    //~^ ERROR not an iterator\n }"}, {"sha": "f2084b593c290dea0f3c626763162b166000ea15", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 171, "deletions": 5, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44d4d4c4545f65f15f890e93fac68214cfe54/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44d4d4c4545f65f15f890e93fac68214cfe54/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=5dd44d4d4c4545f65f15f890e93fac68214cfe54", "patch": "@@ -1,13 +1,179 @@\n error[E0599]: `usize` is not an iterator\n-  --> $DIR/issue-90315.rs:3:26\n+  --> $DIR/issue-90315.rs:4:28\n    |\n-LL |   for _i in 0..arr.len().rev() {\n-   |                          ^^^ `usize` is not an iterator\n+LL |     for _i in 0..arr.len().rev() {\n+   |                            ^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `rev` function\n+   |\n+LL |     for _i in (0..arr.len()).rev() {\n+   |               +            +\n+\n+error[E0599]: `{integer}` is not an iterator\n+  --> $DIR/issue-90315.rs:12:20\n+   |\n+LL |     for i in 1..11.rev() {\n+   |                    ^^^ `{integer}` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `rev` function\n+   |\n+LL |     for i in (1..11).rev() {\n+   |              +     +\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:18:21\n+   |\n+LL |     for i in 1..end.rev() {\n+   |                     ^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `rev` function\n+   |\n+LL |     for i in (1..end).rev() {\n+   |              +      +\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:23:27\n+   |\n+LL |     for i in 1..(end + 1).rev() {\n+   |                           ^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `rev` function\n+   |\n+LL |     for i in (1..(end + 1)).rev() {\n+   |              +            +\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:28:21\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |                     ^^^^^^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `is_empty` function\n+   |\n+LL |     if (1..(end + 1)).is_empty() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:28:8\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:34:21\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |                     ^^^^^^^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `is_sorted` function\n+   |\n+LL |     if (1..(end + 1)).is_sorted() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:34:8\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0599]: `{integer}` is not an iterator\n+  --> $DIR/issue-90315.rs:40:26\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |                          ^^^^ `{integer}` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `take` function\n+   |\n+LL |     let _res: i32 = (3..6).take(2).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:40:21\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0599]: `{integer}` is not an iterator\n+  --> $DIR/issue-90315.rs:45:26\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |                          ^^^ `{integer}` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `sum` function\n+   |\n+LL |     let _sum: i32 = (3..6).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:45:21\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |               ---   ^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:53:21\n+   |\n+LL |     for _a in a..=b.rev() {\n+   |                     ^^^ `usize` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `rev` function\n+   |\n+LL |     for _a in (a..=b).rev() {\n+   |               +     +\n+\n+error[E0599]: `{integer}` is not an iterator\n+  --> $DIR/issue-90315.rs:58:21\n+   |\n+LL |     let _res = ..10.contains(3);\n+   |                     ^^^^^^^^ `{integer}` is not an iterator\n+   |\n+help: you must surround the range in parentheses to call the `contains` function\n+   |\n+LL |     let _res = (..10).contains(3);\n+   |                +    +\n+\n+error[E0599]: no method named `error_method` found for type `usize` in the current scope\n+  --> $DIR/issue-90315.rs:62:15\n+   |\n+LL |     if 1..end.error_method() {\n+   |               ^^^^^^^^^^^^ method not found in `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:62:8\n+   |\n+LL |     if 1..end.error_method() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0599]: `usize` is not an iterator\n+  --> $DIR/issue-90315.rs:68:18\n+   |\n+LL |     let _res = b.take(1)..a;\n+   |                  ^^^^ `usize` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `usize: Iterator`\n            which is required by `&mut usize: Iterator`\n \n-error: aborting due to previous error\n+error: aborting due to 17 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0308, E0599.\n+For more information about an error, try `rustc --explain E0308`."}]}