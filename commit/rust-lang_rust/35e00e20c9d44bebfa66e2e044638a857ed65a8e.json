{"sha": "35e00e20c9d44bebfa66e2e044638a857ed65a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTAwZTIwYzlkNDRiZWJmYTY2ZTJlMDQ0NjM4YTg1N2VkNjVhOGU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-29T09:01:14Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-29T09:01:14Z"}, "message": "Merge pull request #710 from oli-obk/enum_disrc_portability\n\nlint unportable clike enum discriminants", "tree": {"sha": "a8c589cbe559fbfaa58c46fe59d6c22e14d1339c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c589cbe559fbfaa58c46fe59d6c22e14d1339c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e00e20c9d44bebfa66e2e044638a857ed65a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e00e20c9d44bebfa66e2e044638a857ed65a8e", "html_url": "https://github.com/rust-lang/rust/commit/35e00e20c9d44bebfa66e2e044638a857ed65a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e00e20c9d44bebfa66e2e044638a857ed65a8e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "html_url": "https://github.com/rust-lang/rust/commit/105a14f5473158b5c74eb5d4de0a9655e66b7b1a"}, {"sha": "67213c9be408fbfb8b1015d00b1b72a4f3742c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/67213c9be408fbfb8b1015d00b1b72a4f3742c75", "html_url": "https://github.com/rust-lang/rust/commit/67213c9be408fbfb8b1015d00b1b72a4f3742c75"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "d424aca9faaa4b07d1d10ba2fdcf1fde7c70150c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35e00e20c9d44bebfa66e2e044638a857ed65a8e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/35e00e20c9d44bebfa66e2e044638a857ed65a8e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=35e00e20c9d44bebfa66e2e044638a857ed65a8e", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 127 lints included in this crate:\n+There are 128 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -38,6 +38,7 @@ name\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected\n+[enum_clike_unportable_variant](https://github.com/Manishearth/rust-clippy/wiki#enum_clike_unportable_variant)       | warn    | finds C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n [enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                       | allow   | finds use items that import all variants of an enum\n [enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                             | warn    | finds enums where all variants share a prefix/postfix\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                       | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)"}, {"sha": "7ee71f41f29b20a660af6be8dadc611986908a88", "filename": "src/enum_clike.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/35e00e20c9d44bebfa66e2e044638a857ed65a8e/src%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e00e20c9d44bebfa66e2e044638a857ed65a8e/src%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_clike.rs?ref=35e00e20c9d44bebfa66e2e044638a857ed65a8e", "patch": "@@ -0,0 +1,56 @@\n+//! lint on C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n+\n+use rustc::lint::*;\n+use syntax::ast::{IntTy, UintTy};\n+use syntax::attr::*;\n+use rustc_front::hir::*;\n+use rustc::middle::const_eval::{ConstVal, EvalHint, eval_const_expr_partial};\n+use rustc::middle::ty;\n+use utils::span_lint;\n+\n+/// **What it does:** Lints on C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`.\n+///\n+/// **Why is this bad?** This will truncate the variant value on 32bit architectures, but works fine on 64 bit.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `#[repr(usize)] enum NonPortable { X = 0x1_0000_0000, Y = 0 }`\n+declare_lint! {\n+    pub ENUM_CLIKE_UNPORTABLE_VARIANT, Warn,\n+    \"finds C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\"\n+}\n+\n+pub struct EnumClikeUnportableVariant;\n+\n+impl LintPass for EnumClikeUnportableVariant {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ENUM_CLIKE_UNPORTABLE_VARIANT)\n+    }\n+}\n+\n+impl LateLintPass for EnumClikeUnportableVariant {\n+    #[allow(cast_possible_truncation, cast_sign_loss)]\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if let ItemEnum(ref def, _) = item.node {\n+            for var in &def.variants {\n+                let variant = &var.node;\n+                if let Some(ref disr) = variant.disr_expr {\n+                    let cv = eval_const_expr_partial(cx.tcx, &**disr, EvalHint::ExprTypeChecked, None);\n+                    let bad = match (cv, &cx.tcx.expr_ty(&**disr).sty) {\n+                        (Ok(ConstVal::Int(i)), &ty::TyInt(IntTy::Is)) => i as i32 as i64 != i,\n+                        (Ok(ConstVal::Uint(i)), &ty::TyInt(IntTy::Is)) => i as i32 as u64 != i,\n+                        (Ok(ConstVal::Int(i)), &ty::TyUint(UintTy::Us)) => (i < 0) || (i as u32 as i64 != i),\n+                        (Ok(ConstVal::Uint(i)), &ty::TyUint(UintTy::Us)) => i as u32 as u64 != i,\n+                        _ => false,\n+                    };\n+                    if bad {\n+                        span_lint(cx,\n+                                  ENUM_CLIKE_UNPORTABLE_VARIANT,\n+                                  var.span,\n+                                  \"Clike enum variant discriminant is not portable to 32-bit targets\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "50ea765f85dd810d743fff68b023053ffb1c337a", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35e00e20c9d44bebfa66e2e044638a857ed65a8e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e00e20c9d44bebfa66e2e044638a857ed65a8e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=35e00e20c9d44bebfa66e2e044638a857ed65a8e", "patch": "@@ -51,6 +51,7 @@ pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod drop_ref;\n pub mod entry;\n+pub mod enum_clike;\n pub mod enum_glob_use;\n pub mod enum_variants;\n pub mod eq_op;\n@@ -108,6 +109,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box eq_op::EqOp);\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames);\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n+    reg.register_late_lint_pass(box enum_clike::EnumClikeUnportableVariant);\n     reg.register_late_lint_pass(box bit_mask::BitMask);\n     reg.register_late_lint_pass(box ptr_arg::PtrArg);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n@@ -211,6 +213,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         drop_ref::DROP_REF,\n         entry::MAP_ENTRY,\n+        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         enum_variants::ENUM_VARIANT_NAMES,\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,"}, {"sha": "f48f9b13de4abd5a5011381dc03ef92bfcc81124", "filename": "tests/compile-fail/enums_clike.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/35e00e20c9d44bebfa66e2e044638a857ed65a8e/tests%2Fcompile-fail%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e00e20c9d44bebfa66e2e044638a857ed65a8e/tests%2Fcompile-fail%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenums_clike.rs?ref=35e00e20c9d44bebfa66e2e044638a857ed65a8e", "patch": "@@ -0,0 +1,53 @@\n+#![feature(plugin, associated_consts)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+#![allow(unused)]\n+\n+#[repr(usize)]\n+enum NonPortable {\n+    X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+    Y = 0,\n+    Z = 0x7FFF_FFFF,\n+    A = 0xFFFF_FFFF,\n+}\n+\n+enum NonPortableNoHint {\n+    X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+    Y = 0,\n+    Z = 0x7FFF_FFFF,\n+    A = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+}\n+\n+#[repr(isize)]\n+enum NonPortableSigned {\n+    X = -1,\n+    Y = 0x7FFF_FFFF,\n+    Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+    A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+    B = std::i32::MIN as isize,\n+    C = (std::i32::MIN as isize) - 1, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+}\n+\n+enum NonPortableSignedNoHint {\n+    X = -1,\n+    Y = 0x7FFF_FFFF,\n+    Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+    A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+}\n+\n+/*\n+FIXME: uncomment once https://github.com/rust-lang/rust/issues/31910 is fixed\n+#[repr(usize)]\n+enum NonPortable2<T: Trait> {\n+    X = Trait::Number,\n+    Y = 0,\n+}\n+\n+trait Trait {\n+    const Number: usize = 0x1_0000_0000;\n+}\n+*/\n+\n+fn main() {\n+}"}]}