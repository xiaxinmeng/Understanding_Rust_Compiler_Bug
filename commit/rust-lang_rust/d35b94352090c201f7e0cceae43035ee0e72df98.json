{"sha": "d35b94352090c201f7e0cceae43035ee0e72df98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNWI5NDM1MjA5MGMyMDFmN2UwY2NlYWU0MzAzNWVlMGU3MmRmOTg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-31T20:39:46Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-04-01T09:49:31Z"}, "message": "Split draft", "tree": {"sha": "7ac4cca1aa23aa005077cc1e1e1c8911ad69eadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac4cca1aa23aa005077cc1e1e1c8911ad69eadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35b94352090c201f7e0cceae43035ee0e72df98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35b94352090c201f7e0cceae43035ee0e72df98", "html_url": "https://github.com/rust-lang/rust/commit/d35b94352090c201f7e0cceae43035ee0e72df98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35b94352090c201f7e0cceae43035ee0e72df98/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc71631e75f42f7730084a307e4765c3df92791b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc71631e75f42f7730084a307e4765c3df92791b", "html_url": "https://github.com/rust-lang/rust/commit/bc71631e75f42f7730084a307e4765c3df92791b"}], "stats": {"total": 144, "additions": 85, "deletions": 59}, "files": [{"sha": "67dfd6f2e6ab07ad14296cbc20e4d7f5c7f1665e", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=d35b94352090c201f7e0cceae43035ee0e72df98", "patch": "@@ -32,6 +32,12 @@ use crate::{\n pub use crate::completion::completion_item::{\n     CompletionItem, CompletionItemKind, InsertTextFormat,\n };\n+use either::Either;\n+use hir::{StructField, Type};\n+use ra_syntax::{\n+    ast::{self, NameOwner},\n+    SmolStr,\n+};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -98,3 +104,57 @@ pub(crate) fn completions(\n \n     Some(acc)\n }\n+\n+pub(crate) fn get_missing_fields(\n+    ctx: &CompletionContext,\n+    record: Either<&ast::RecordLit, &ast::RecordPat>,\n+) -> Option<Vec<(StructField, Type)>> {\n+    let (ty, variant) = match record {\n+        Either::Left(record_lit) => (\n+            ctx.sema.type_of_expr(&record_lit.clone().into())?,\n+            ctx.sema.resolve_record_literal(record_lit)?,\n+        ),\n+        Either::Right(record_pat) => (\n+            ctx.sema.type_of_pat(&record_pat.clone().into())?,\n+            ctx.sema.resolve_record_pattern(record_pat)?,\n+        ),\n+    };\n+\n+    let already_present_names = get_already_present_names(record);\n+    Some(\n+        ty.variant_fields(ctx.db, variant)\n+            .into_iter()\n+            .filter(|(field, _)| {\n+                !already_present_names.contains(&SmolStr::from(field.name(ctx.db).to_string()))\n+            })\n+            .collect(),\n+    )\n+}\n+\n+fn get_already_present_names(record: Either<&ast::RecordLit, &ast::RecordPat>) -> Vec<SmolStr> {\n+    // TODO kb have a single match\n+    match record {\n+        Either::Left(record_lit) => record_lit\n+            .record_field_list()\n+            .map(|field_list| field_list.fields())\n+            .map(|fields| {\n+                fields\n+                    .into_iter()\n+                    .filter_map(|field| field.name_ref())\n+                    .map(|name_ref| name_ref.text().clone())\n+                    .collect()\n+            })\n+            .unwrap_or_default(),\n+        Either::Right(record_pat) => record_pat\n+            .record_field_pat_list()\n+            .map(|pat_list| pat_list.bind_pats())\n+            .map(|bind_pats| {\n+                bind_pats\n+                    .into_iter()\n+                    .filter_map(|pat| pat.name())\n+                    .map(|name| name.text().clone())\n+                    .collect()\n+            })\n+            .unwrap_or_default(),\n+    }\n+}"}, {"sha": "8b67d3ba2ab203d6c25b957675d4bde0989faed3", "filename": "crates/ra_ide/src/completion/complete_record_literal.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs?ref=d35b94352090c201f7e0cceae43035ee0e72df98", "patch": "@@ -1,36 +1,19 @@\n //! FIXME: write short doc here\n \n+use super::get_missing_fields;\n use crate::completion::{CompletionContext, Completions};\n-use ra_syntax::SmolStr;\n+use either::Either;\n \n /// Complete fields in fields literals.\n-pub(super) fn complete_record_literal(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (ty, variant) = match ctx.record_lit_syntax.as_ref().and_then(|it| {\n-        Some((ctx.sema.type_of_expr(&it.clone().into())?, ctx.sema.resolve_record_literal(it)?))\n-    }) {\n-        Some(it) => it,\n-        _ => return,\n-    };\n-\n-    let already_present_names: Vec<SmolStr> = ctx\n-        .record_lit_syntax\n-        .as_ref()\n-        .and_then(|record_literal| record_literal.record_field_list())\n-        .map(|field_list| field_list.fields())\n-        .map(|fields| {\n-            fields\n-                .into_iter()\n-                .filter_map(|field| field.name_ref())\n-                .map(|name_ref| name_ref.text().clone())\n-                .collect()\n-        })\n-        .unwrap_or_default();\n-\n-    for (field, field_ty) in ty.variant_fields(ctx.db, variant) {\n-        if !already_present_names.contains(&SmolStr::from(field.name(ctx.db).to_string())) {\n-            acc.add_field(ctx, field, &field_ty);\n-        }\n+pub(super) fn complete_record_literal(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+) -> Option<()> {\n+    let record_lit = ctx.record_lit_syntax.as_ref()?;\n+    for (field, field_ty) in get_missing_fields(ctx, Either::Left(record_lit))? {\n+        acc.add_field(ctx, field, &field_ty);\n     }\n+    Some(())\n }\n \n #[cfg(test)]"}, {"sha": "f94dced045abc4e8ca67363909cedfceb04bf51b", "filename": "crates/ra_ide/src/completion/complete_record_pattern.rs", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35b94352090c201f7e0cceae43035ee0e72df98/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs?ref=d35b94352090c201f7e0cceae43035ee0e72df98", "patch": "@@ -1,35 +1,18 @@\n //! FIXME: write short doc here\n \n+use super::get_missing_fields;\n use crate::completion::{CompletionContext, Completions};\n-use ra_syntax::{ast::NameOwner, SmolStr};\n+use either::Either;\n \n-pub(super) fn complete_record_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (ty, variant) = match ctx.record_lit_pat.as_ref().and_then(|it| {\n-        Some((ctx.sema.type_of_pat(&it.clone().into())?, ctx.sema.resolve_record_pattern(it)?))\n-    }) {\n-        Some(it) => it,\n-        _ => return,\n-    };\n-\n-    let already_present_names: Vec<SmolStr> = ctx\n-        .record_lit_pat\n-        .as_ref()\n-        .and_then(|record_pat| record_pat.record_field_pat_list())\n-        .map(|pat_list| pat_list.bind_pats())\n-        .map(|bind_pats| {\n-            bind_pats\n-                .into_iter()\n-                .filter_map(|pat| pat.name())\n-                .map(|name| name.text().clone())\n-                .collect()\n-        })\n-        .unwrap_or_default();\n-\n-    for (field, field_ty) in ty.variant_fields(ctx.db, variant) {\n-        if !already_present_names.contains(&SmolStr::from(field.name(ctx.db).to_string())) {\n-            acc.add_field(ctx, field, &field_ty);\n-        }\n+pub(super) fn complete_record_pattern(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+) -> Option<()> {\n+    let record_pat = ctx.record_lit_pat.as_ref()?;\n+    for (field, field_ty) in get_missing_fields(ctx, Either::Right(record_pat))? {\n+        acc.add_field(ctx, field, &field_ty);\n     }\n+    Some(())\n }\n \n #[cfg(test)]\n@@ -151,24 +134,24 @@ mod tests {\n                     bar: 3,\n                     baz: 4,\n                 };\n-                if let S { foo1, foo2, <|> } = s {}\n+                if let S { foo1, foo2: a, <|> } = s {}\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"bar\",\n-                source_range: [369; 369),\n-                delete: [369; 369),\n+                source_range: [372; 372),\n+                delete: [372; 372),\n                 insert: \"bar\",\n                 kind: Field,\n                 detail: \"u32\",\n             },\n             CompletionItem {\n                 label: \"baz\",\n-                source_range: [369; 369),\n-                delete: [369; 369),\n+                source_range: [372; 372),\n+                delete: [372; 372),\n                 insert: \"baz\",\n                 kind: Field,\n                 detail: \"u32\","}]}