{"sha": "73c52b724a07900808483a5f06b928d703097cf1", "node_id": "C_kwDOAAsO6NoAKDczYzUyYjcyNGEwNzkwMDgwODQ4M2E1ZjA2YjkyOGQ3MDMwOTdjZjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-09T01:15:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-16T00:52:58Z"}, "message": "compare_const_vals: Use infallible evaluation.\n\nBecause these evaluations can never fail.", "tree": {"sha": "2f644e34dd6e1a61581dbba2a79046dc092e0c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f644e34dd6e1a61581dbba2a79046dc092e0c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c52b724a07900808483a5f06b928d703097cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c52b724a07900808483a5f06b928d703097cf1", "html_url": "https://github.com/rust-lang/rust/commit/73c52b724a07900808483a5f06b928d703097cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c52b724a07900808483a5f06b928d703097cf1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246a5e08bf6befc14f43ec6a30f2deb463f175aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/246a5e08bf6befc14f43ec6a30f2deb463f175aa", "html_url": "https://github.com/rust-lang/rust/commit/246a5e08bf6befc14f43ec6a30f2deb463f175aa"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "d07a618f815591d6659d150863d249dca0a7e2a4", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/73c52b724a07900808483a5f06b928d703097cf1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c52b724a07900808483a5f06b928d703097cf1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=73c52b724a07900808483a5f06b928d703097cf1", "patch": "@@ -760,32 +760,28 @@ pub(crate) fn compare_const_vals<'tcx>(\n     }\n \n     let ty = a.ty();\n-    let a_bits = a.try_eval_bits(tcx, param_env, ty);\n-    let b_bits = b.try_eval_bits(tcx, param_env, ty);\n-\n-    if let (Some(a), Some(b)) = (a_bits, b_bits) {\n-        use rustc_apfloat::Float;\n-        return match *ty.kind() {\n-            ty::Float(ty::FloatTy::F32) => {\n-                let l = rustc_apfloat::ieee::Single::from_bits(a);\n-                let r = rustc_apfloat::ieee::Single::from_bits(b);\n-                l.partial_cmp(&r)\n-            }\n-            ty::Float(ty::FloatTy::F64) => {\n-                let l = rustc_apfloat::ieee::Double::from_bits(a);\n-                let r = rustc_apfloat::ieee::Double::from_bits(b);\n-                l.partial_cmp(&r)\n-            }\n-            ty::Int(ity) => {\n-                use rustc_middle::ty::layout::IntegerExt;\n-                let size = rustc_target::abi::Integer::from_int_ty(&tcx, ity).size();\n-                let a = size.sign_extend(a);\n-                let b = size.sign_extend(b);\n-                Some((a as i128).cmp(&(b as i128)))\n-            }\n-            _ => Some(a.cmp(&b)),\n-        };\n+    let a = a.eval_bits(tcx, param_env, ty);\n+    let b = b.eval_bits(tcx, param_env, ty);\n+\n+    use rustc_apfloat::Float;\n+    match *ty.kind() {\n+        ty::Float(ty::FloatTy::F32) => {\n+            let a = rustc_apfloat::ieee::Single::from_bits(a);\n+            let b = rustc_apfloat::ieee::Single::from_bits(b);\n+            a.partial_cmp(&b)\n+        }\n+        ty::Float(ty::FloatTy::F64) => {\n+            let a = rustc_apfloat::ieee::Double::from_bits(a);\n+            let b = rustc_apfloat::ieee::Double::from_bits(b);\n+            a.partial_cmp(&b)\n+        }\n+        ty::Int(ity) => {\n+            use rustc_middle::ty::layout::IntegerExt;\n+            let size = rustc_target::abi::Integer::from_int_ty(&tcx, ity).size();\n+            let a = size.sign_extend(a);\n+            let b = size.sign_extend(b);\n+            Some((a as i128).cmp(&(b as i128)))\n+        }\n+        _ => Some(a.cmp(&b)),\n     }\n-\n-    None\n }"}]}