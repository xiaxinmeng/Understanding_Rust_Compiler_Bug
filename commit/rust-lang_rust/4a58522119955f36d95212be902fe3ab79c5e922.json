{"sha": "4a58522119955f36d95212be902fe3ab79c5e922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTg1MjIxMTk5NTVmMzZkOTUyMTJiZTkwMmZlM2FiNzljNWU5MjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-17T13:37:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-17T13:37:32Z"}, "message": "Merge #2562\n\n2562: Fix NavigationTarget ranges r=matklad a=edwin0cheng\n\nFix the issue described in https://github.com/rust-analyzer/rust-analyzer/pull/2544#issuecomment-565572553\r\n\r\nThis PR change the order for finding `full_range` of `focus_range` in following orders:\r\n1. map both ranges to macro_call\r\n2. map focus range to a token inside macro call, and full range to the whole of macro call\r\n3. map both ranges to the whole of macro call\r\n\r\nAnd fix the corresponding tests and make these tests easily to follow.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "56905131854a5d820a9c2b5e7d9e80484e763b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56905131854a5d820a9c2b5e7d9e80484e763b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a58522119955f36d95212be902fe3ab79c5e922", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+NocCRBK7hj4Ov3rIwAAdHIIAEp+ppmZ2rOlFyCzxmXWnmnc\nFMZPChsQ1S73bRuQkHwMfA0gUegTFlsjV5VDbQ5McDYOkjeKE3j+s2HXl+4AI83g\ncfDYB9qF+sC+HhQ6z/SjGlM6BWK1nluD3jn8VflrjFWQL+fUvbHQaCi3dQVAkQGI\nANenbspjzNmTupSOQrFgdTLvfLJsP2YrvkIa4VF+F4XOnoHjxVwkSQJoXfVZ0qrn\np3q+/d1frmaZa0l+z40O+uC6Coa69Ick7iiKuyzHnffGxclkc/IU1xsRqt57fi+b\n0SBDJjlddPmR7v+bFZ9iavAuc8hHBdg0CsdUkO1ezYlI83LEMBWehkCK9naNkHA=\n=hlhf\n-----END PGP SIGNATURE-----\n", "payload": "tree 56905131854a5d820a9c2b5e7d9e80484e763b41\nparent a26840d603e672bace319f45b28dd615de1b0c2d\nparent 3ba4b3c554ee94cf96d62c57f9bb80eaff19beed\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576589852 +0000\ncommitter GitHub <noreply@github.com> 1576589852 +0000\n\nMerge #2562\n\n2562: Fix NavigationTarget ranges r=matklad a=edwin0cheng\n\nFix the issue described in https://github.com/rust-analyzer/rust-analyzer/pull/2544#issuecomment-565572553\r\n\r\nThis PR change the order for finding `full_range` of `focus_range` in following orders:\r\n1. map both ranges to macro_call\r\n2. map focus range to a token inside macro call, and full range to the whole of macro call\r\n3. map both ranges to the whole of macro call\r\n\r\nAnd fix the corresponding tests and make these tests easily to follow.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a58522119955f36d95212be902fe3ab79c5e922", "html_url": "https://github.com/rust-lang/rust/commit/4a58522119955f36d95212be902fe3ab79c5e922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a58522119955f36d95212be902fe3ab79c5e922/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a26840d603e672bace319f45b28dd615de1b0c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26840d603e672bace319f45b28dd615de1b0c2d", "html_url": "https://github.com/rust-lang/rust/commit/a26840d603e672bace319f45b28dd615de1b0c2d"}, {"sha": "3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "html_url": "https://github.com/rust-lang/rust/commit/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed"}], "stats": {"total": 134, "additions": 86, "deletions": 48}, "files": [{"sha": "2e52a1f5c06a6ba88ea4378c96dd7d4a106b2221", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4a58522119955f36d95212be902fe3ab79c5e922", "patch": "@@ -58,6 +58,6 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile,\n+    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "cb4e1950bf82f6c2b27269a5a813043e217317be", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=4a58522119955f36d95212be902fe3ab79c5e922", "patch": "@@ -214,7 +214,13 @@ pub struct ExpansionInfo {\n     exp_map: Arc<mbe::TokenMap>,\n }\n \n+pub use mbe::Origin;\n+\n impl ExpansionInfo {\n+    pub fn call_node(&self) -> Option<InFile<SyntaxNode>> {\n+        Some(self.arg.with_value(self.arg.value.parent()?))\n+    }\n+\n     pub fn map_token_down(&self, token: InFile<&SyntaxToken>) -> Option<InFile<SyntaxToken>> {\n         assert_eq!(token.file_id, self.arg.file_id);\n         let range = token.value.text_range().checked_sub(self.arg.value.text_range().start())?;\n@@ -228,7 +234,10 @@ impl ExpansionInfo {\n         Some(self.expanded.with_value(token))\n     }\n \n-    pub fn map_token_up(&self, token: InFile<&SyntaxToken>) -> Option<InFile<SyntaxToken>> {\n+    pub fn map_token_up(\n+        &self,\n+        token: InFile<&SyntaxToken>,\n+    ) -> Option<(InFile<SyntaxToken>, Origin)> {\n         let token_id = self.exp_map.token_by_range(token.value.text_range())?;\n \n         let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n@@ -242,7 +251,7 @@ impl ExpansionInfo {\n         let range = token_map.range_by_token(token_id)?;\n         let token = algo::find_covering_element(&tt.value, range + tt.value.text_range().start())\n             .into_token()?;\n-        Some(tt.with_value(token))\n+        Some((tt.with_value(token), origin))\n     }\n }\n "}, {"sha": "7a22bb0a4e232f257403ffb89598796ca47cb310", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=4a58522119955f36d95212be902fe3ab79c5e922", "patch": "@@ -1,56 +1,66 @@\n //! Utilities to work with files, produced by macros.\n use std::iter::successors;\n \n-use hir::InFile;\n+use hir::{InFile, Origin};\n use ra_db::FileId;\n use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken, TextRange};\n \n use crate::{db::RootDatabase, FileRange};\n \n pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n-    let expansion = match node.file_id.expansion_info(db) {\n-        None => {\n+    if let Some((range, Origin::Call)) = original_range_and_origin(db, node) {\n+        return range;\n+    }\n+\n+    if let Some(expansion) = node.file_id.expansion_info(db) {\n+        if let Some(call_node) = expansion.call_node() {\n             return FileRange {\n-                file_id: node.file_id.original_file(db),\n-                range: node.value.text_range(),\n-            }\n+                file_id: call_node.file_id.original_file(db),\n+                range: call_node.value.text_range(),\n+            };\n         }\n-        Some(it) => it,\n-    };\n+    }\n+\n+    FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n+}\n+\n+fn original_range_and_origin(\n+    db: &RootDatabase,\n+    node: InFile<&SyntaxNode>,\n+) -> Option<(FileRange, Origin)> {\n+    let expansion = node.file_id.expansion_info(db)?;\n+\n+    // the input node has only one token ?\n+    let single = node.value.first_token()? == node.value.last_token()?;\n+\n     // FIXME: We should handle recurside macro expansions\n+    let (range, origin) = node.value.descendants().find_map(|it| {\n+        let first = it.first_token()?;\n+        let last = it.last_token()?;\n \n-    let range = node.value.descendants_with_tokens().find_map(|it| {\n-        match it.as_token() {\n-            // FIXME: Remove this branch after all `tt::TokenTree`s have a proper `TokenId`,\n-            // and return the range of the overall macro expansions if mapping first and last tokens fails.\n-            Some(token) => {\n-                let token = expansion.map_token_up(node.with_value(&token))?;\n-                Some(token.with_value(token.value.text_range()))\n-            }\n-            None => {\n-                // Try to map first and last tokens of node, and, if success, return the union range of mapped tokens\n-                let n = it.into_node()?;\n-                let first = expansion.map_token_up(node.with_value(&n.first_token()?))?;\n-                let last = expansion.map_token_up(node.with_value(&n.last_token()?))?;\n-\n-                // FIXME: Is is possible ?\n-                if first.file_id != last.file_id {\n-                    return None;\n-                }\n-\n-                // FIXME: Add union method in TextRange\n-                let range = union_range(first.value.text_range(), last.value.text_range());\n-                Some(first.with_value(range))\n-            }\n+        if !single && first == last {\n+            return None;\n         }\n-    });\n \n-    return match range {\n-        Some(it) => FileRange { file_id: it.file_id.original_file(db), range: it.value },\n-        None => {\n-            FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n+        // Try to map first and last tokens of node, and, if success, return the union range of mapped tokens\n+        let (first, first_origin) = expansion.map_token_up(node.with_value(&first))?;\n+        let (last, last_origin) = expansion.map_token_up(node.with_value(&last))?;\n+\n+        if first.file_id != last.file_id || first_origin != last_origin {\n+            return None;\n         }\n-    };\n+\n+        // FIXME: Add union method in TextRange\n+        Some((\n+            first.with_value(union_range(first.value.text_range(), last.value.text_range())),\n+            first_origin,\n+        ))\n+    })?;\n+\n+    return Some((\n+        FileRange { file_id: range.file_id.original_file(db), range: range.value },\n+        origin,\n+    ));\n \n     fn union_range(a: TextRange, b: TextRange) -> TextRange {\n         let start = a.start().min(b.start());"}, {"sha": "bee8e9df28ef18d8cc9faa99d90e77d23c64aea3", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=4a58522119955f36d95212be902fe3ab79c5e922", "patch": "@@ -221,7 +221,7 @@ fn named_target(db: &RootDatabase, node: InFile<&SyntaxNode>) -> Option<Navigati\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::{assert_eq_text, covers};\n \n     use crate::mock_analysis::analysis_and_position;\n \n@@ -234,6 +234,24 @@ mod tests {\n         nav.assert_match(expected);\n     }\n \n+    fn check_goto_with_range_content(fixture: &str, expected: &str, expected_range: &str) {\n+        let (analysis, pos) = analysis_and_position(fixture);\n+\n+        let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n+        assert_eq!(navs.len(), 1);\n+        let nav = navs.pop().unwrap();\n+        let file_text = analysis.file_text(pos.file_id).unwrap();\n+\n+        let actual_full_range = &file_text[nav.full_range()];\n+        let actual_range = &file_text[nav.range()];\n+\n+        test_utils::assert_eq_text!(\n+            &format!(\"{}|{}\", actual_full_range, actual_range),\n+            expected_range\n+        );\n+        nav.assert_match(expected);\n+    }\n+\n     #[test]\n     fn goto_definition_works_in_items() {\n         check_goto(\n@@ -363,28 +381,27 @@ mod tests {\n \n     #[test]\n     fn goto_definition_works_for_macro_defined_fn_with_arg() {\n-        check_goto(\n+        check_goto_with_range_content(\n             \"\n             //- /lib.rs\n             macro_rules! define_fn {\n                 ($name:ident) => (fn $name() {})\n             }\n \n-            define_fn!(\n-                foo\n-            )\n+            define_fn!(foo);\n \n             fn bar() {\n                <|>foo();\n             }\n             \",\n-            \"foo FN_DEF FileId(1) [80; 83) [80; 83)\",\n+            \"foo FN_DEF FileId(1) [64; 80) [75; 78)\",\n+            \"define_fn!(foo);|foo\",\n         );\n     }\n \n     #[test]\n     fn goto_definition_works_for_macro_defined_fn_no_arg() {\n-        check_goto(\n+        check_goto_with_range_content(\n             \"\n             //- /lib.rs\n             macro_rules! define_fn {\n@@ -397,7 +414,8 @@ mod tests {\n                <|>foo();\n             }\n             \",\n-            \"foo FN_DEF FileId(1) [39; 42) [39; 42)\",\n+            \"foo FN_DEF FileId(1) [51; 64) [51; 64)\",\n+            \"define_fn!();|define_fn!();\",\n         );\n     }\n "}, {"sha": "ce2deadf6e41a49227800d0aefebdd4e8ca05153", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a58522119955f36d95212be902fe3ab79c5e922/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=4a58522119955f36d95212be902fe3ab79c5e922", "patch": "@@ -104,6 +104,7 @@ impl Shift {\n     }\n }\n \n+#[derive(Debug, Eq, PartialEq)]\n pub enum Origin {\n     Def,\n     Call,"}]}