{"sha": "5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MzllZDFmODAxODk0MzIzNjgyNmI0YzBjZThiNGRkZWJhYWQ0ZTc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-10T00:17:45Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T20:48:07Z"}, "message": "trans: Do not depend on having Expr's around for generic_simd_intrinsic.", "tree": {"sha": "31d255eb2f3bb2059a892e386c0b46abba5131eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d255eb2f3bb2059a892e386c0b46abba5131eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "html_url": "https://github.com/rust-lang/rust/commit/5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5739ed1f8018943236826b4c0ce8b4ddebaad4e7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7912f94b2db78e69d032b2e6ac47e5e3980d56bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7912f94b2db78e69d032b2e6ac47e5e3980d56bd", "html_url": "https://github.com/rust-lang/rust/commit/7912f94b2db78e69d032b2e6ac47e5e3980d56bd"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "1140edeaec07a82deb6ddd14fa78281810aea30a", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5739ed1f8018943236826b4c0ce8b4ddebaad4e7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5739ed1f8018943236826b4c0ce8b4ddebaad4e7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "patch": "@@ -1506,22 +1506,26 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n         let total_len = in_len as u64 * 2;\n \n-        let vector = match args {\n-            Some(args) => &args[2],\n-            None => bcx.sess().span_bug(span,\n-                                        \"intrinsic call with unexpected argument shape\"),\n-        };\n-        let vector = match consts::const_expr(bcx.ccx(), vector, substs, None,\n-            consts::TrueConst::Yes, // this should probably help simd error reporting\n-        ) {\n-            Ok((vector, _)) => vector,\n-            Err(err) => bcx.sess().span_fatal(span, &err.description()),\n+        let (vector, indirect) = match args {\n+            Some(args) => {\n+                match consts::const_expr(bcx.ccx(), &args[2], substs, None,\n+                                         // this should probably help simd error reporting\n+                                         consts::TrueConst::Yes) {\n+                    Ok((vector, _)) => (vector, false),\n+                    Err(err) => bcx.sess().span_fatal(span, &err.description()),\n+                }\n+            }\n+            None => (llargs[2], !type_is_immediate(bcx.ccx(), arg_tys[2]))\n         };\n \n         let indices: Option<Vec<_>> = (0..n)\n             .map(|i| {\n                 let arg_idx = i;\n-                let val = const_get_elt(vector, &[i as libc::c_uint]);\n+                let val = if indirect {\n+                    Load(bcx, StructGEP(bcx, vector, i))\n+                } else {\n+                    const_get_elt(vector, &[i as libc::c_uint])\n+                };\n                 let c = const_to_opt_uint(val);\n                 match c {\n                     None => {"}]}