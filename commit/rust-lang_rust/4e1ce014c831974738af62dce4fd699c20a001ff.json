{"sha": "4e1ce014c831974738af62dce4fd699c20a001ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMWNlMDE0YzgzMTk3NDczOGFmNjJkY2U0ZmQ2OTljMjBhMDAxZmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-07T21:41:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-13T16:57:31Z"}, "message": "cleanup: convert some remaining #foo invocations to foo! form.", "tree": {"sha": "51678479fe275880834402c07a1418b1d0ea0d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51678479fe275880834402c07a1418b1d0ea0d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1ce014c831974738af62dce4fd699c20a001ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1ce014c831974738af62dce4fd699c20a001ff", "html_url": "https://github.com/rust-lang/rust/commit/4e1ce014c831974738af62dce4fd699c20a001ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1ce014c831974738af62dce4fd699c20a001ff/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b93ab5a210066abab30e46e54e999fadbcf5e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b93ab5a210066abab30e46e54e999fadbcf5e70", "html_url": "https://github.com/rust-lang/rust/commit/2b93ab5a210066abab30e46e54e999fadbcf5e70"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "9a9229ebaef1240a98a4bf08a919fba56b37779c", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1,4 +1,4 @@\n-// NB: this file is #include_str'ed into the compiler, re-parsed\n+// NB: this file is include_str!'ed into the compiler, re-parsed\n // and injected into each crate the compiler builds. Keep it small.\n \n mod intrinsic {"}, {"sha": "0790208244e9ab5049e1ac176ea8a1f689599fc2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1536,7 +1536,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n                         // Probably a bad error message (what's an rvalue?)\n                         // but I can't think of anything better\n                         self.tcx.sess.span_err(arg_expr.span,\n-                          #fmt(\"Move mode argument must be an rvalue: try \\\n+                          fmt!(\"Move mode argument must be an rvalue: try \\\n                           (move %s) instead\", expr_to_str(*arg_expr,\n                                                 self.tcx.sess.intr())));\n                     }"}, {"sha": "efa89e21739997377209e68e4c41522490f59692", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1533,7 +1533,7 @@ fn subst(cx: ctxt,\n                 cx, typ,\n                 |r| match r {\n                     re_bound(br_self) => substs.self_r.expect(\n-                        #fmt(\"ty::subst: \\\n+                        fmt!(\"ty::subst: \\\n                       Reference to self region when given substs with no \\\n                       self region, ty = %s\", ty_to_str(cx, typ))),\n                     _ => r"}, {"sha": "80cc61a8d074f9dbe11947841962d883034fbb57", "filename": "src/librustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -2430,7 +2430,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n                   }\n                   Err(err) => {\n                     ccx.tcx.sess.span_err(e.span,\n-                     #fmt(\"expected constant: %s\", err));\n+                     fmt!(\"expected constant: %s\", err));\n \n                   }\n                 }"}, {"sha": "93d025a7786008afef6b49c7760976970187dc71", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -376,7 +376,7 @@ pub impl<D: Deserializer, T: Deserializable<D>> Option<T>: Deserializable<D> {\n                 match i {\n                   0 => None,\n                   1 => Some(d.read_enum_variant_arg(0u, || deserialize(d))),\n-                  _ => fail(#fmt(\"Bad variant for option: %u\", i))\n+                  _ => fail(fmt!(\"Bad variant for option: %u\", i))\n                 }\n             }\n         }"}, {"sha": "45c8fd76e4f2cf3619aa16c42329bfa4d1c71e68", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -57,7 +57,7 @@ fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                   _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx, sp, arg, 1u, option::Some(1u), ~\"include\");\n-    let file = expr_to_str(cx, args[0], ~\"#include_str requires a string\");\n+    let file = expr_to_str(cx, args[0], ~\"include_str! requires a string\");\n     let p = parse::new_parser_from_file(cx.parse_sess(), cx.cfg(),\n                                         &res_rel_file(cx, sp, &Path(file)),\n                                         parse::parser::SOURCE_FILE);\n@@ -68,7 +68,7 @@ fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                       _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx,sp,arg,1u,option::Some(1u),~\"include_str\");\n \n-    let file = expr_to_str(cx, args[0], ~\"#include_str requires a string\");\n+    let file = expr_to_str(cx, args[0], ~\"include_str! requires a string\");\n \n     let res = io::read_whole_file_str(&res_rel_file(cx, sp, &Path(file)));\n     match res {\n@@ -85,7 +85,7 @@ fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                       _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx,sp,arg,1u,option::Some(1u),~\"include_bin\");\n \n-    let file = expr_to_str(cx, args[0], ~\"#include_bin requires a string\");\n+    let file = expr_to_str(cx, args[0], ~\"include_bin! requires a string\");\n \n     match io::read_whole_file(&res_rel_file(cx, sp, &Path(file))) {\n       result::Ok(src) => {"}, {"sha": "3cc1163eb22b1972b6dbac9970854ebcfd6877de", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -8,14 +8,12 @@ use std::map::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n+macro_rules! bench (\n+    ($id:ident) => (maybe_run_test(argv, stringify!($id), $id))\n+)\n+\n fn main() {\n     let argv = os::args();\n-    #macro[\n-        [#bench[id],\n-         maybe_run_test(argv, #stringify(id), id)\n-        ]\n-    ];\n-\n     let tests = vec::view(argv, 1, argv.len());\n \n     bench!(shift_push);"}, {"sha": "da49b006cd9e46bf87714fe7b2aba9be9bbce850", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -18,12 +18,9 @@ proto! ring (\n     }\n )\n \n-fn macros() {\n-    #macro[\n-        [#move_out[x],\n-         unsafe { let y = move *ptr::addr_of(&x); move y }]\n-    ];\n-}\n+macro_rules! move_out (\n+    ($x:expr) => { unsafe { let y = move *ptr::addr_of(&$x); move y } }\n+)\n \n fn thread_ring(i: uint,\n                count: uint,"}, {"sha": "c395ff39430cc66d24c6253eef0a10c5e6eaa39b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -132,7 +132,7 @@ fn main() {\n     let args = os::args();\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n-       // get to this massive data set, but #include_bin chokes on it (#2598)\n+       // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n        result::get(&io::file_reader(&path))"}, {"sha": "a4ff9ef164079c6f2cd3ff5df17b623f5ef7ca85", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -129,7 +129,7 @@ fn main() {\n     let args = os::args();\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n-       // get to this massive data set, but #include_bin chokes on it (#2598)\n+       // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n        result::get(&io::file_reader(&path))"}, {"sha": "67e028dcd46d38d3057e3346165a42cb59cf361e", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1,12 +1,12 @@\n struct C {\n     x: int,\n     drop {\n-        #error(\"dropping: %?\", self.x);\n+        error!(\"dropping: %?\", self.x);\n     }\n }\n \n fn main() {\n     let c = C{ x: 2};\n     let d = copy c; //~ ERROR copying a noncopyable value\n-    #error(\"%?\", d.x);\n+    error!(\"%?\", d.x);\n }\n\\ No newline at end of file"}, {"sha": "132fd47636bbae720ad40036166f187c3a74917d", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -71,7 +71,7 @@ mod test {\n \n     #[test]\n     fn read_simple_board() {\n-        let s = #include_str(\"./maps/contest1.map\");\n+        let s = include_str!(\"./maps/contest1.map\");\n         io::with_str_reader(s, read_board_grid)\n     }\n }"}, {"sha": "595583d2cefeb8ff981f833fec6260aa3b836b6b", "filename": "src/test/run-pass/macro-2.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-2.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1,13 +1,6 @@\n // xfail-pretty - token trees can't pretty print\n \n fn main() {\n-    #macro[[#mylambda[x, body],\n-            {\n-                fn f(x: int) -> int { return body; }\n-                f\n-            }]];\n-\n-    assert (mylambda!(y, y * 2)(8) == 16);\n \n     macro_rules! mylambda_tt(\n         ($x:ident, $body:expr) => {"}, {"sha": "2507057c64818397ae0715d6de712a8b3ad02cf3", "filename": "src/test/run-pass/syntax-extension-shell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1,5 +1,5 @@\n // xfail-test\n fn main() {\n-  auto s = #shell { uname -a };\n+  let s = shell!( uname -a );\n   log(debug, s);\n }"}, {"sha": "2a6b5d644f1a0460729c47082eaf21f3bc9d740d", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1ce014c831974738af62dce4fd699c20a001ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=4e1ce014c831974738af62dce4fd699c20a001ff", "patch": "@@ -1,5 +1,5 @@\n // This test is brittle!\n-// xfail-pretty - the pretty tests lose path information, breaking #include\n+// xfail-pretty - the pretty tests lose path information, breaking include!\n #[legacy_exports];\n \n mod m1 {"}]}