{"sha": "a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjI0ZWQ5ODA2ZmU0Y2FhMTBkZTViOTRlNTkwZjcxYTRhMWVhYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-08T20:51:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-08T20:51:22Z"}, "message": "Auto merge of #64293 - Centril:rollup-blnhxwl, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #64078 (compiletest: disable -Aunused for run-pass tests)\n - #64263 (Replace \"feature gated\" wording with \"unstable\".)\n - #64280 (Factor out pluralisation into syntax::errors)\n - #64288 (use 'get_toml' instead of regular expression)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2f12c24c5d782663e770156e3394fdecec5185d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f12c24c5d782663e770156e3394fdecec5185d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "html_url": "https://github.com/rust-lang/rust/commit/a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "html_url": "https://github.com/rust-lang/rust/commit/2b8116dced2c6c5d02e1c4359e89dc0919d6001b"}, {"sha": "51b110fc6801200501e8b92f0ca7b90fa1b52d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b110fc6801200501e8b92f0ca7b90fa1b52d46", "html_url": "https://github.com/rust-lang/rust/commit/51b110fc6801200501e8b92f0ca7b90fa1b52d46"}], "stats": {"total": 278, "additions": 177, "deletions": 101}, "files": [{"sha": "14bc90700b76eef7ac896cf5a2867288aed599dc", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -523,6 +523,10 @@ def get_toml(self, key, section=None):\n         'value2'\n         >>> rb.get_toml('key', 'c') is None\n         True\n+\n+        >>> rb.config_toml = 'key1 = true'\n+        >>> rb.get_toml(\"key1\")\n+        'true'\n         \"\"\"\n \n         cur_section = None\n@@ -571,6 +575,12 @@ def get_string(line):\n \n         >>> RustBuild.get_string('    \"devel\"   ')\n         'devel'\n+        >>> RustBuild.get_string(\"    'devel'   \")\n+        'devel'\n+        >>> RustBuild.get_string('devel') is None\n+        True\n+        >>> RustBuild.get_string('    \"devel   ')\n+        ''\n         \"\"\"\n         start = line.find('\"')\n         if start != -1:\n@@ -822,13 +832,13 @@ def bootstrap(help_triggered):\n     except (OSError, IOError):\n         pass\n \n-    match = re.search(r'\\nverbose = (\\d+)', build.config_toml)\n-    if match is not None:\n-        build.verbose = max(build.verbose, int(match.group(1)))\n+    config_verbose = build.get_toml('verbose', 'build')\n+    if config_verbose is not None:\n+        build.verbose = max(build.verbose, int(config_verbose))\n \n-    build.use_vendored_sources = '\\nvendor = true' in build.config_toml\n+    build.use_vendored_sources = build.get_toml('vendor', 'build') == 'true'\n \n-    build.use_locked_deps = '\\nlocked-deps = true' in build.config_toml\n+    build.use_locked_deps = build.get_toml('locked-deps', 'build') == 'true'\n \n     build.check_vendored_status()\n "}, {"sha": "62910ec320494fd3053edb09211d9ea284ea3e37", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -4,6 +4,7 @@ use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n+use syntax::errors::pluralise;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n@@ -82,12 +83,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             }\n         };\n \n-        macro_rules! pluralise {\n-            ($x:expr) => {\n-                if $x != 1 { \"s\" } else { \"\" }\n-            };\n-        }\n-\n         match *self {\n             CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n             Mismatch => write!(f, \"types differ\"),"}, {"sha": "c1fba416d64334653cf2c59783fd7d9df7115761", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -845,3 +845,10 @@ impl Level {\n         }\n     }\n }\n+\n+#[macro_export]\n+macro_rules! pluralise {\n+    ($x:expr) => {\n+        if $x != 1 { \"s\" } else { \"\" }\n+    };\n+}"}, {"sha": "66d676b7747d0bb26f67377be543192aff38a492", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -159,15 +159,15 @@ impl Collector<'tcx> {\n                                            sym::link_cfg,\n                                            span.unwrap(),\n                                            GateIssue::Language,\n-                                           \"is feature gated\");\n+                                           \"is unstable\");\n         }\n         if lib.kind == cstore::NativeStaticNobundle &&\n            !self.tcx.features().static_nobundle {\n             feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n                                            sym::static_nobundle,\n                                            span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n                                            GateIssue::Language,\n-                                           \"kind=\\\"static-nobundle\\\" is feature gated\");\n+                                           \"kind=\\\"static-nobundle\\\" is unstable\");\n         }\n         self.libs.push(lib);\n     }"}, {"sha": "e9ca0f3d978ca5675fadb33f00bd6d71ef250382", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -23,6 +23,7 @@ use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n+use syntax::errors::pluralise;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n@@ -377,7 +378,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     quantifier,\n                     bound,\n                     kind,\n-                    if bound != 1 { \"s\" } else { \"\" },\n+                    pluralise!(bound),\n                 ))\n             };\n "}, {"sha": "f22499f547272291913ac6e7a27077861069b0d2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -10,6 +10,7 @@ use rustc::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticId};\n \n use syntax_pos::Span;\n+use syntax::errors::pluralise;\n \n use super::{Inherited, FnCtxt, potentially_plural_count};\n \n@@ -648,9 +649,9 @@ fn compare_number_of_generics<'tcx>(\n                      declaration has {} {kind} parameter{}\",\n                     trait_.ident,\n                     impl_count,\n-                    if impl_count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(impl_count),\n                     trait_count,\n-                    if trait_count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(trait_count),\n                     kind = kind,\n                 ),\n                 DiagnosticId::Error(\"E0049\".into()),\n@@ -665,7 +666,7 @@ fn compare_number_of_generics<'tcx>(\n                         \"expected {} {} parameter{}\",\n                         trait_count,\n                         kind,\n-                        if trait_count != 1 { \"s\" } else { \"\" },\n+                        pluralise!(trait_count),\n                     ));\n                 }\n                 for span in spans {\n@@ -680,7 +681,7 @@ fn compare_number_of_generics<'tcx>(\n                     \"found {} {} parameter{}{}\",\n                     impl_count,\n                     kind,\n-                    if impl_count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(impl_count),\n                     suffix.unwrap_or_else(|| String::new()),\n                 ));\n             }"}, {"sha": "ceca54b7cd75fd0c6dadc85ef7c66e30b6ab19d5", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "3c9f511338f6965bf5ed40ab181caa721d47b505", "filename": "src/test/ui/associated-type-bounds/fn-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-apit.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "c4e8092c211d627d0530d50f6817b606d20ae833", "filename": "src/test/ui/associated-type-bounds/fn-dyn-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-dyn-apit.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-dyn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_dyn_aux;"}, {"sha": "8fa7212d6275ba436638a76ba37cf57923861897", "filename": "src/test/ui/associated-type-bounds/fn-inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-inline.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "9c4f82ac991c8cde97299a1e968a69795171cbc8", "filename": "src/test/ui/associated-type-bounds/fn-where.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-where.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:fn-aux.rs\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n extern crate fn_aux;"}, {"sha": "96df13e372a24fdec950d7e0374f1d4c939fc658", "filename": "src/test/ui/associated-type-bounds/fn-wrap-apit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ffn-wrap-apit.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -2,6 +2,7 @@\n // aux-build:fn-aux.rs\n \n #![feature(associated_type_bounds)]\n+#![allow(dead_code)]\n \n extern crate fn_aux;\n "}, {"sha": "2c1ce1c3785ae9b7f4554aff4d9db0dd97d5bade", "filename": "src/test/ui/associated-type-bounds/struct-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fstruct-bounds.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(unused)]\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }"}, {"sha": "b9fc1a88cee13ad015e8bbe6a7eef5ab80c62ee9", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n-// run-pass\n+// check-pass\n \n-#![allow(unused_variables)]\n #![deny(unused_mut)]\n \n type A = Vec<u32>;"}, {"sha": "1dc7315e88c111b5fd480b796cba4e1e40731f45", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![allow(unused)]\n+\n // edition:2018\n // aux-build:arc_wake.rs\n "}, {"sha": "15cc9fbc81fb7886f40b4ae95e128e1320b72e2d", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -3,14 +3,16 @@\n // run-pass\n \n #![deny(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_must_use)]\n+#![allow(path_statements)]\n \n // Test that the drop order for locals in a fn and async fn matches up.\n extern crate arc_wake;\n \n use arc_wake::ArcWake;\n use std::cell::RefCell;\n use std::future::Future;\n-use std::marker::PhantomData;\n use std::pin::Pin;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -42,7 +44,7 @@ struct NeverReady;\n \n impl Future for NeverReady {\n     type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n         Poll::Pending\n     }\n }"}, {"sha": "9e8304935bffc6c713a7d8eaa5d7d5e56e3b7aa2", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -6,6 +6,8 @@\n // parameters (used or unused) are not dropped until the async fn is cancelled.\n // This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs\n \n+#![allow(unused_variables)]\n+\n extern crate arc_wake;\n \n use arc_wake::ArcWake;\n@@ -43,7 +45,7 @@ struct NeverReady;\n \n impl Future for NeverReady {\n     type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n         Poll::Pending\n     }\n }"}, {"sha": "c3b3392cfc495ab6ac5289efc3a5808c7661d0ad", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -0,0 +1,8 @@\n+warning: unnecessary parentheses around assigned value\n+  --> $DIR/issue-54752-async-block.rs:6:22\n+   |\n+LL | fn main() { let _a = (async  { }); }\n+   |                      ^^^^^^^^^^^^ help: remove these parentheses\n+   |\n+   = note: `#[warn(unused_parens)]` on by default\n+"}, {"sha": "c2e24a96b1d930f46065c1c087e40ab539423cd6", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -4,7 +4,7 @@\n \n // run-pass\n \n-// compile-flags: --edition=2018\n+// compile-flags: --edition=2018 -Aunused\n \n pub enum Uninhabited { }\n "}, {"sha": "e788ca5ff49c32a20cbabe1b0839048f2514e0c4", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// run-pass\n+// check-pass\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n "}, {"sha": "cf6dd338552b8718e73f1268da132e3185030a4c", "filename": "src/test/ui/attributes/obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// Obsolete attributes fall back to feature gated custom attributes.\n+// Obsolete attributes fall back to unstable custom attributes.\n \n #[ab_isize=\"stdcall\"] extern {}\n //~^ ERROR cannot find attribute macro `ab_isize` in this scope"}, {"sha": "544a6e2a7e78a772986e892dea278295b4c8c9d4", "filename": "src/test/ui/attributes/unknown-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// Unknown attributes fall back to feature gated custom attributes.\n+// Unknown attributes fall back to unstable custom attributes.\n \n #![feature(custom_inner_attributes)]\n "}, {"sha": "6587dfdbc03f3af267e22006bf5e60b7ed94e379", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -17,7 +17,7 @@\n // revisions: zflag edition\n //[zflag]compile-flags: -Z borrowck=migrate\n //[edition]edition:2018\n-//[zflag] run-pass\n+//[zflag] check-pass\n \n pub struct Block<'a> {\n     current: &'a u8,"}, {"sha": "22eaa119f2467167e57ed7373b8b9df23e00f145", "filename": "src/test/ui/borrowck/issue-10876.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n enum Nat {\n     S(Box<Nat>),"}, {"sha": "599138a9ce0f118adaacfc30d595bbace9849500", "filename": "src/test/ui/borrowck/two-phase-multiple-activations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -11,13 +11,13 @@ pub trait FakeRead {\n }\n \n impl FakeRead for Foo {\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n+    fn read_to_end(&mut self, _buf: &mut Vec<u8>) -> Result<usize> {\n         Ok(4)\n     }\n }\n \n fn main() {\n     let mut a = Foo {};\n     let mut v = Vec::new();\n-    a.read_to_end(&mut v);\n+    a.read_to_end(&mut v).unwrap();\n }"}, {"sha": "7acc50819a6ad4ed2869bff7a4ffc0aa8ade6fb4", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "2d1a405ebdd808d85a9f0bf4fa0dd9821493a869", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -3,6 +3,8 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n+#![allow(dead_code)]\n+\n struct ArrayStruct<T, const N: usize> {\n     data: [T; N],\n }"}, {"sha": "bc5188133d7f15124873c97f7ac071170887956b", "filename": "src/test/ui/const-generics/const-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -3,7 +3,7 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-#[allow(dead_code)]\n+#![allow(dead_code, unused_variables)]\n \n struct ConstArray<T, const LEN: usize> {\n     array: [T; LEN],"}, {"sha": "45d37b6a2f3c5d115214bb5dd00954e94f112ad0", "filename": "src/test/ui/const-generics/issue-61422.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n@@ -8,7 +8,7 @@ use std::mem;\n fn foo<const SIZE: usize>() {\n     let arr: [u8; SIZE] = unsafe {\n         #[allow(deprecated)]\n-        let mut array: [u8; SIZE] = mem::uninitialized();\n+        let array: [u8; SIZE] = mem::uninitialized();\n         array\n     };\n }"}, {"sha": "8025b3af8f1bf5cee7b0216c0b586e4ef5d15acf", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "f0e1d8263022b98bf104561a97278ce8d50a405e", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_fn_union)]\n+#![allow(dead_code)]\n \n #[repr(C)]\n union Transmute<T: Copy, U: Copy> {"}, {"sha": "7cdbb22f9245960bcdf243e676c9c7c14a1a7da6", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// build-pass\n \n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later."}, {"sha": "9b7daf2e674fbffb0884bd575c3028fa978bc2d1", "filename": "src/test/ui/consts/packed_pattern.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/packed_pattern.rs:16:9\n+   |\n+LL |         FOO => unreachable!(),\n+   |         ^^^\n+   |\n+   = note: `#[warn(unreachable_patterns)]` on by default\n+"}, {"sha": "6cc0225d3043d0252dbbaf3626988deaf4d3cc22", "filename": "src/test/ui/consts/packed_pattern2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/packed_pattern2.rs:24:9\n+   |\n+LL |         FOO => unreachable!(),\n+   |         ^^^\n+   |\n+   = note: `#[warn(unreachable_patterns)]` on by default\n+"}, {"sha": "464ddcc4cdb94b1945d76814eafa01549cef9dc9", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![deny(deprecated_in_future)]\n "}, {"sha": "91063edf0f6c4badf45a759ad86bcb9722290287", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -8,6 +8,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n+#![allow(unused)]\n \n use std::{\n     cell::{Cell, RefCell},"}, {"sha": "b6c8648a7d03d8c12cc681d391fb49a5af6165e8", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-//~ ERROR kind=\"static-nobundle\" is feature gated\n+//~ ERROR kind=\"static-nobundle\" is unstable\n // Test the behavior of rustc when non-existent library is statically linked\n \n // compile-flags: -l static-nobundle=nonexistent"}, {"sha": "cfff4c36a6d7bd6a0e8487f13c37e246eab0da65", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: kind=\"static-nobundle\" is feature gated\n+error[E0658]: kind=\"static-nobundle\" is unstable\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37403\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable"}, {"sha": "359ed835bcbb23c0745e52b8854b4fa413d27d1e", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n-    // Assert `Iterator` methods are feature gated\n+    // Assert `Iterator` methods are unstable\n     assert!([1, 2, 2, 9].iter().is_sorted());\n     //~^ ERROR: use of unstable library feature 'is_sorted': new API\n     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n     //~^ ERROR: use of unstable library feature 'is_sorted': new API\n \n-    // Assert `[T]` methods are feature gated\n+    // Assert `[T]` methods are unstable\n     assert!([1, 2, 2, 9].is_sorted());\n     //~^ ERROR: use of unstable library feature 'is_sorted': new API\n     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));"}, {"sha": "27ec2e98eb68bbdeadcbcf44c3211d6a485ffffb", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,5 @@\n #[link(name = \"foo\", cfg(foo))]\n-//~^ ERROR: is feature gated\n+//~^ ERROR: is unstable\n extern {}\n \n fn main() {}"}, {"sha": "f6c506154643832d8b037013c98528f4b83600cc", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: is feature gated\n+error[E0658]: is unstable\n   --> $DIR/feature-gate-link_cfg.rs:1:1\n    |\n LL | #[link(name = \"foo\", cfg(foo))]"}, {"sha": "644b1f964a059b5296645f619b9305e204a525a6", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,5 @@\n #[link(name=\"foo\", kind=\"static-nobundle\")]\n-//~^ ERROR: kind=\"static-nobundle\" is feature gated\n+//~^ ERROR: kind=\"static-nobundle\" is unstable\n extern {}\n \n fn main() {}"}, {"sha": "cc0d426d6cf9ac81a5a6b8ae523344102724a43a", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: kind=\"static-nobundle\" is feature gated\n+error[E0658]: kind=\"static-nobundle\" is unstable\n   --> $DIR/feature-gate-static-nobundle.rs:1:1\n    |\n LL | #[link(name=\"foo\", kind=\"static-nobundle\")]"}, {"sha": "7a597157300eddc32526f9d33c44565104b37b2a", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// Type ascription is feature gated\n+// Type ascription is unstable\n \n fn main() {\n     let a = 10: u8; //~ ERROR type ascription is experimental"}, {"sha": "392e7233b567aecf26e5402746ccc5b536c399e5", "filename": "src/test/ui/hrtb/issue-57639.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-57639.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -10,7 +10,7 @@\n //\n // See [this comment on GitHub][c] for more details.\n //\n-// run-pass\n+// check-pass\n //\n // [c]: https://github.com/rust-lang/rust/issues/57639#issuecomment-455685861\n "}, {"sha": "73402e55a4fd835f0f08086b800d611f9b9546e5", "filename": "src/test/ui/if-ret.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable block in `if` expression\n+  --> $DIR/if-ret.rs:6:24\n+   |\n+LL | fn foo() { if (return) { } }\n+   |                        ^^^\n+   |\n+   = note: `#[warn(unreachable_code)]` on by default\n+"}, {"sha": "9dab334a217c29004296e3f6bb315bba946c2a2e", "filename": "src/test/ui/impl-trait/closure-calling-parent-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -5,7 +5,7 @@\n // `foo` and hence is treated opaquely within the closure body.  This\n // resulted in a failed subtype relationship.\n //\n-// run-pass\n+// check-pass\n \n fn foo() -> impl Copy { || foo(); }\n fn bar() -> impl Copy { || bar(); }"}, {"sha": "3f9750249250686cae0442f9ab70968971bc1bbe", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(type_alias_impl_trait)]\n \n@@ -9,7 +9,7 @@ fn bar<F: Fn(&i32) + Clone>(f: F) -> F {\n }\n \n fn foo() -> X {\n-    bar(|x| ())\n+    bar(|_| ())\n }\n \n fn main() {}"}, {"sha": "3911769b0c63d245cd2aadffeb8b2d34df768884", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// run-pass\n+// check-pass\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n "}, {"sha": "3c8682bb62aa5ff2fdadf68a46f159479531637d", "filename": "src/test/ui/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,9 +1,7 @@\n-// run-pass\n+// check-pass\n \n #![feature(member_constraints)]\n \n-use std::fmt::Debug;\n-\n trait MultiRegionTrait<'a, 'b> {}\n impl<'a, 'b> MultiRegionTrait<'a, 'b> for (&'a u32, &'b u32) {}\n "}, {"sha": "c60e06c3ceb3504dafb7a71cfa7b5268e98c8f1a", "filename": "src/test/ui/issues/issue-26448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n pub struct Bar<T> {\n     items: Vec<&'static str>,"}, {"sha": "d48022c09fee3670edde7a7e5c9b79b5c66c60a6", "filename": "src/test/ui/issues/issue-26448-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n pub struct Item {\n     _inner: &'static str,"}, {"sha": "12af8a8e875af20e4e3690d846054d046d15124e", "filename": "src/test/ui/issues/issue-27697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27697.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n use std::ops::Deref;\n "}, {"sha": "2f594b48e697f2b0e0ef0b4c11bcdb9fce8a031e", "filename": "src/test/ui/issues/issue-38591.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38591.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n struct S<T> {\n     t : T,"}, {"sha": "8c8cccfb2bb820ec91793c74a73071bfbb2b8be3", "filename": "src/test/ui/issues/issue-43806.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43806.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![deny(unused_results)]\n "}, {"sha": "f564aefe78ced4e6770c4833a1983087fb588e01", "filename": "src/test/ui/issues/issue-48132.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![allow(dead_code)]\n+\n struct Inner<I, V> {\n     iterator: I,\n     item: V,"}, {"sha": "f81203dc41299701e937cfd13b46cbe2bc2e826e", "filename": "src/test/ui/issues/issue-48179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #48132. This was failing due to problems around\n // the projection caching and dropck type enumeration.\n \n-// run-pass\n+// check-pass\n \n pub struct Container<T: Iterator> {\n     value: Option<T::Item>,"}, {"sha": "de7d6a0d80c9e528bde9feb0f38b9872c705600c", "filename": "src/test/ui/issues/issue-61711-once-caused-rustc-inf-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61711-once-caused-rustc-inf-loop.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -5,7 +5,7 @@\n // aux-build:xcrate-issue-61711-b.rs\n // compile-flags:--extern xcrate_issue_61711_b\n \n-// run-pass\n+// build-pass\n \n fn f<F: Fn(xcrate_issue_61711_b::Struct)>(_: F) { }\n fn main() { }"}, {"sha": "9a0ec253322e41e6ff42bd5dda7cc2d12ce9f95f", "filename": "src/test/ui/lint/empty-lint-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,6 @@\n #![feature(lint_reasons)]\n \n-// run-pass\n+// check-pass\n \n // Empty (and reason-only) lint attributes are legal\u2014although we may want to\n // lint them in the future (Issue #55112)."}, {"sha": "aab2dc267d59423ad6a7dde49b021541a81ded08", "filename": "src/test/ui/nll/issue-55288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n struct Slice(&'static [&'static [u8]]);\n "}, {"sha": "32e45184a91952294baf158ed83ac9ab1530a282", "filename": "src/test/ui/nll/issue-57960.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -30,7 +30,6 @@ fn digits(x: u8) -> u32 {\n         OneDigit::FIRST..=OneDigit::LAST => 1,\n         TwoDigits::FIRST..=TwoDigits::LAST => 2,\n         ThreeDigits::FIRST..=ThreeDigits::LAST => 3,\n-        _ => unreachable!(),\n     }\n }\n "}, {"sha": "bb6d981e0133f2ca443469bbd849fb61494cb958", "filename": "src/test/ui/nll/normalization-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,6 +1,6 @@\n // Check that lifetime bounds get checked the right way around with NLL enabled.\n \n-//run-pass\n+// check-pass\n \n trait Visitor<'d> {\n     type Value;"}, {"sha": "3b06b0db370655f1c8d903f8c70bf58516667d9b", "filename": "src/test/ui/nll/promotable-mutable-zst-doesnt-conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,11 +1,11 @@\n // Check that mutable promoted length zero arrays don't check for conflicting\n // access\n \n-// run-pass\n+// check-pass\n \n pub fn main() {\n     let mut x: Vec<&[i32; 0]> = Vec::new();\n-    for i in 0..10 {\n+    for _ in 0..10 {\n         x.push(&[]);\n     }\n }"}, {"sha": "147413663897d9cd4663f9f85a5b37cd8f985106", "filename": "src/test/ui/nll/user-annotations/issue-55219.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -3,7 +3,7 @@\n // The `Self::HASH_LEN` here expands to a \"self-type\" where `T` is not\n // known. This unbound inference variable was causing an ICE.\n //\n-// run-pass\n+// check-pass\n \n pub struct Foo<T>(T);\n "}, {"sha": "df905c8786a189102d163f2bb8a0c97752fd9c4d", "filename": "src/test/ui/nll/user-annotations/normalize-self-ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -2,7 +2,7 @@\n // the inherent impl requires normalization to be equal to the\n // user-provided type.\n //\n-// run-pass\n+// check-pass\n \n trait Mirror {\n     type Me;\n@@ -15,7 +15,7 @@ impl<T> Mirror for T {\n struct Foo<A, B>(A, B);\n \n impl<A> Foo<A, <A as Mirror>::Me> {\n-    fn m(b: A) { }\n+    fn m(_: A) { }\n }\n \n fn main() {"}, {"sha": "088f39c6665ffe0f1141293a9f6a2a29087a80ae", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -23,11 +23,11 @@ macro_rules! attr_proc_mac {\n //~^ ERROR cannot find\n struct Foo;\n \n-// Interpreted as a feature gated custom attribute\n+// Interpreted as an unstable custom attribute\n #[attr_proc_macra] //~ ERROR cannot find attribute macro `attr_proc_macra` in this scope\n struct Bar;\n \n-// Interpreted as a feature gated custom attribute\n+// Interpreted as an unstable custom attribute\n #[FooWithLongNan] //~ ERROR cannot find attribute macro `FooWithLongNan` in this scope\n struct Asdf;\n "}, {"sha": "041e410df85c985d038a75f4e7eb854810a67665", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -11,8 +11,8 @@ use std::sync::mpsc::channel;\n fn main() {\n     let (tx, rx) = channel();\n     let x = Some(rx);\n-    tx.send(false);\n-    tx.send(false);\n+    tx.send(false).unwrap();\n+    tx.send(false).unwrap();\n     match x {\n         Some(z) if z.recv().unwrap() => { panic!() },\n         Some(z) => { assert!(!z.recv().unwrap()); },"}, {"sha": "fe7df44590b8df8636690d1e0eae4a80b34900de", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_same_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -10,11 +10,11 @@ pub enum NonExhaustiveVariants {\n \n fn main() {\n     let variant_tuple = NonExhaustiveVariants::Tuple(340);\n-    let variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n+    let _variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n \n     match variant_tuple {\n         NonExhaustiveVariants::Unit => \"\",\n-        NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n-        NonExhaustiveVariants::Struct { field } => \"\"\n+        NonExhaustiveVariants::Tuple(_fe_tpl) => \"\",\n+        NonExhaustiveVariants::Struct { field: _ } => \"\"\n     };\n }"}, {"sha": "b95105b59eddb9b37db35a0b9685e35c55127eb2", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -2,8 +2,6 @@\n \n #![allow(irrefutable_let_patterns)]\n \n-use std::ops::Range;\n-\n fn main() {\n     let x: bool;\n     // This should associate as: `(x = (true && false));`."}, {"sha": "be7ef658411e1fca918aec26d10da548ffc6796d", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable block in `if` expression\n+  --> $DIR/protect-precedences.rs:13:41\n+   |\n+LL |         if let _ = return true && false {};\n+   |                                         ^^\n+   |\n+   = note: `#[warn(unreachable_code)]` on by default\n+"}, {"sha": "c07da4345f7d923bb9d9808eec957bbb6761a8cf", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -4,7 +4,7 @@ type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::\n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n \n-// Interpreted as a feature gated custom attribute\n+// Interpreted as an unstable custom attribute\n #[rustfmt] //~ ERROR cannot find attribute macro `rustfmt` in this scope\n fn check() {}\n "}, {"sha": "1440f02df1df884d135709cbc13669d44d24189b", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n // This test checks that trait objects involving trait aliases are well-formed.\n "}, {"sha": "19fcc78721ab13afd10d486b0c4a748002b25930", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args-pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -9,13 +9,13 @@\n \n #![allow(irrefutable_let_patterns)]\n \n-enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n+enum Enum<T> { TSVariant(T), SVariant { _v: T }, UVariant }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n \n macro_rules! is_variant {\n     (TSVariant, $expr:expr) => (is_variant!(@check TSVariant, (_), $expr));\n-    (SVariant, $expr:expr) => (is_variant!(@check SVariant, { v: _ }, $expr));\n+    (SVariant, $expr:expr) => (is_variant!(@check SVariant, { _v: _ }, $expr));\n     (UVariant, $expr:expr) => (is_variant!(@check UVariant, {}, $expr));\n     (@check $variant:ident, $matcher:tt, $expr:expr) => (\n         assert!(if let Enum::$variant::<()> $matcher = $expr { true } else { false },\n@@ -37,14 +37,14 @@ fn main() {\n \n     // Struct variant\n \n-    is_variant!(SVariant, Enum::SVariant { v: () });\n-    is_variant!(SVariant, Enum::SVariant::<()> { v: () });\n-    is_variant!(SVariant, Enum::<()>::SVariant { v: () });\n+    is_variant!(SVariant, Enum::SVariant { _v: () });\n+    is_variant!(SVariant, Enum::SVariant::<()> { _v: () });\n+    is_variant!(SVariant, Enum::<()>::SVariant { _v: () });\n \n-    is_variant!(SVariant, Alias::SVariant { v: () });\n-    is_variant!(SVariant, Alias::<()>::SVariant { v: () });\n+    is_variant!(SVariant, Alias::SVariant { _v: () });\n+    is_variant!(SVariant, Alias::<()>::SVariant { _v: () });\n \n-    is_variant!(SVariant, AliasFixed::SVariant { v: () });\n+    is_variant!(SVariant, AliasFixed::SVariant { _v: () });\n \n     // Unit variant\n "}, {"sha": "53babefae81c09df44a687c4e2c1c0939c43b814", "filename": "src/test/ui/while-let.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#[allow(dead_code)]\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -12,16 +13,16 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ WARN irrefutable while-let\n+    foo!(_a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ WARN irrefutable while-let\n+    bar!(_a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1 { //~ WARN irrefutable while-let\n+    while let _a = 1 { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n         break;\n     }"}, {"sha": "30307ecaeadf244faf12bfcd8aa67f7262c54c57", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1,31 +1,31 @@\n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:6:13\n+  --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n    |               ^^^^^\n ...\n-LL | /     foo!(a, 1, {\n+LL | /     foo!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:6:13\n+  --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n    |               ^^^^^\n ...\n-LL | /     bar!(a, 1, {\n+LL | /     bar!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n \n warning: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:24:5\n+  --> $DIR/while-let.rs:25:5\n    |\n-LL | /     while let a = 1 {\n+LL | /     while let _a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |         break;\n LL | |     }"}, {"sha": "48dd68d0f61eededa6001b1b640ff1cc1a179a9e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -628,6 +628,11 @@ impl TestProps {\n         }\n         self.pass_mode\n     }\n+\n+    // does not consider CLI override for pass mode\n+    pub fn local_pass_mode(&self) -> Option<PassMode> {\n+        self.pass_mode\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {"}, {"sha": "aff554678a3f406d161b1526f56464f6b1df37b3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6624ed9806fe4caa10de5b94e590f71a4a1eab9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "patch": "@@ -1557,7 +1557,11 @@ impl<'test> TestCx<'test> {\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n                 // can turn it back on if needed.\n-                if !self.config.src_base.ends_with(\"rustdoc-ui\") {\n+                if !self.config.src_base.ends_with(\"rustdoc-ui\") &&\n+                    // Note that we don't call pass_mode() here as we don't want\n+                    // to set unused to allow if we've overriden the pass mode\n+                    // via command line flags.\n+                    self.props.local_pass_mode() != Some(PassMode::Run) {\n                     rustc.args(&[\"-A\", \"unused\"]);\n                 }\n             }"}]}