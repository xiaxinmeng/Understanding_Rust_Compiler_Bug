{"sha": "6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkN2EzNjIzMWE5MDJhNTdiZDYyN2MxZjFmNmNkNjU4ZWE5YWI3MTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T20:35:32Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T21:57:18Z"}, "message": "Make eval_place_to_mplace take PlaceBase::Static", "tree": {"sha": "29bf485e5a19e844c54997016b80de5cf1c55463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bf485e5a19e844c54997016b80de5cf1c55463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "html_url": "https://github.com/rust-lang/rust/commit/6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a36231a902a57bd627c1f1f6cd658ea9ab717/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8173febf930121e954a4be09043482ee771c0794", "url": "https://api.github.com/repos/rust-lang/rust/commits/8173febf930121e954a4be09043482ee771c0794", "html_url": "https://github.com/rust-lang/rust/commit/8173febf930121e954a4be09043482ee771c0794"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "669e00c1f01ed2df11f919b6c4c7ff4937f8fe4f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d7a36231a902a57bd627c1f1f6cd658ea9ab717/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7a36231a902a57bd627c1f1f6cd658ea9ab717/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "patch": "@@ -469,12 +469,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n-        let op = match *mir_place {\n+        let op = match mir_place {\n             Base(PlaceBase::Local(mir::RETURN_PLACE)) => return err!(ReadFromReturnPointer),\n-            Base(PlaceBase::Local(local)) => self.access_local(self.frame(), local, layout)?,\n-            Base(PlaceBase::Static(_)) => self.eval_place_to_mplace(mir_place)?.into(),\n+            Base(PlaceBase::Local(local)) => self.access_local(self.frame(), *local, layout)?,\n+            Base(PlaceBase::Static(place_static)) => {\n+                self.eval_static_to_mplace(place_static)?.into()\n+            }\n \n-            Projection(ref proj) => {\n+            Projection(proj) => {\n                 let op = self.eval_place_to_op(&proj.base, None)?;\n                 self.operand_projection(op, &proj.elem)?\n             }"}, {"sha": "65e5e23e384247e176aee2a5f85e7739823a7f12", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d7a36231a902a57bd627c1f1f6cd658ea9ab717/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7a36231a902a57bd627c1f1f6cd658ea9ab717/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "patch": "@@ -562,23 +562,23 @@ where\n \n     /// Evaluate statics and promoteds to an `MPlace`. Used to share some code between\n     /// `eval_place` and `eval_place_to_op`.\n-    pub(super) fn eval_place_to_mplace(\n+    pub(super) fn eval_static_to_mplace(\n         &self,\n-        mir_place: &mir::Place<'tcx>\n+        place_static: &mir::Static<'tcx>\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n-        use rustc::mir::PlaceBase;\n-        use rustc::mir::{Static, StaticKind};\n-        Ok(match *mir_place {\n-            Base(PlaceBase::Static(box Static { kind: StaticKind::Promoted(promoted), .. })) => {\n+        use rustc::mir::StaticKind;\n+\n+        Ok(match place_static.kind {\n+            StaticKind::Promoted(promoted) => {\n                 let instance = self.frame().instance;\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),\n                 })?\n             }\n \n-            Base(PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), ty })) => {\n+            StaticKind::Static(def_id) => {\n+                let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n                 let instance = ty::Instance::mono(*self.tcx, def_id);\n@@ -600,8 +600,6 @@ where\n                 let alloc = self.tcx.alloc_map.lock().intern_static(cid.instance.def_id());\n                 MPlaceTy::from_aligned_ptr(Pointer::from(alloc).with_default_tag(), layout)\n             }\n-\n-            _ => bug!(\"eval_place_to_mplace called on {:?}\", mir_place),\n         })\n     }\n \n@@ -613,7 +611,7 @@ where\n     ) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n-        let place = match *mir_place {\n+        let place = match mir_place {\n             Base(PlaceBase::Local(mir::RETURN_PLACE)) => match self.frame().return_place {\n                 Some(return_place) =>\n                     // We use our layout to verify our assumption; caller will validate\n@@ -628,17 +626,19 @@ where\n                 // This works even for dead/uninitialized locals; we check further when writing\n                 place: Place::Local {\n                     frame: self.cur_frame(),\n-                    local,\n+                    local: *local,\n                 },\n-                layout: self.layout_of_local(self.frame(), local, None)?,\n+                layout: self.layout_of_local(self.frame(), *local, None)?,\n             },\n \n-            Projection(ref proj) => {\n+            Projection(proj) => {\n                 let place = self.eval_place(&proj.base)?;\n                 self.place_projection(place, &proj.elem)?\n             }\n \n-            _ => self.eval_place_to_mplace(mir_place)?.into(),\n+            Base(PlaceBase::Static(place_static)) => {\n+                self.eval_static_to_mplace(place_static)?.into()\n+            }\n         };\n \n         self.dump_place(place.place);"}]}