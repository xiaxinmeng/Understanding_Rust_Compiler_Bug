{"sha": "75327f8587fad77a25cfe99e52376b6862d75b57", "node_id": "C_kwDOAAsO6NoAKDc1MzI3Zjg1ODdmYWQ3N2EyNWNmZTk5ZTUyMzc2YjY4NjJkNzViNTc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-14T13:49:41Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Reuse existing download in y.sh prepare if fresh", "tree": {"sha": "25060bf90e458ae47e4d5358cfe74aec7b633bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25060bf90e458ae47e4d5358cfe74aec7b633bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75327f8587fad77a25cfe99e52376b6862d75b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75327f8587fad77a25cfe99e52376b6862d75b57", "html_url": "https://github.com/rust-lang/rust/commit/75327f8587fad77a25cfe99e52376b6862d75b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75327f8587fad77a25cfe99e52376b6862d75b57/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4139922e08c306620cf5c43721670c55f3684f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4139922e08c306620cf5c43721670c55f3684f", "html_url": "https://github.com/rust-lang/rust/commit/0e4139922e08c306620cf5c43721670c55f3684f"}], "stats": {"total": 120, "additions": 102, "deletions": 18}, "files": [{"sha": "29c127bf50ede3d6155b1b0b22e3b02862be28c5", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=75327f8587fad77a25cfe99e52376b6862d75b57", "patch": "@@ -4,8 +4,13 @@ use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n use super::{CodegenBackend, SysrootKind};\n \n-static ABI_CAFE_REPO: GitRepo =\n-    GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n+static ABI_CAFE_REPO: GitRepo = GitRepo::github(\n+    \"Gankra\",\n+    \"abi-cafe\",\n+    \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n+    \"588df6d66abbe105\",\n+    \"abi-cafe\",\n+);\n \n static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe_target\");\n \n@@ -18,6 +23,7 @@ pub(crate) fn run(\n     bootstrap_host_compiler: &Compiler,\n ) {\n     ABI_CAFE_REPO.fetch(dirs);\n+    ABI_CAFE_REPO.patch(dirs);\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot("}, {"sha": "2bb118000344874ca9b45f90847f02da78a99cc7", "filename": "build_system/bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=75327f8587fad77a25cfe99e52376b6862d75b57", "patch": "@@ -10,6 +10,7 @@ static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n     \"simple-raytracer\",\n     \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"ad6f59a2331a3f56\",\n     \"<none>\",\n );\n \n@@ -24,9 +25,8 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         std::process::exit(1);\n     }\n \n-    if !SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).exists() {\n-        SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-    }\n+    SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    SIMPLE_RAYTRACER_REPO.patch(dirs);\n \n     let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n "}, {"sha": "b76164a1d0068dda59211f89f82802cfeaa18a7f", "filename": "build_system/prepare.rs", "status": "modified", "additions": 76, "deletions": 9, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=75327f8587fad77a25cfe99e52376b6862d75b57", "patch": "@@ -10,14 +10,18 @@ use super::tests::LIBCORE_TESTS_SRC;\n use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n \n pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n-    RelPath::DOWNLOAD.ensure_fresh(dirs);\n+    RelPath::DOWNLOAD.ensure_exists(dirs);\n+    super::tests::RAND_REPO.fetch(dirs);\n+    super::tests::REGEX_REPO.fetch(dirs);\n+    super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n \n+    // FIXME do this on the fly?\n     prepare_stdlib(dirs, rustc);\n     prepare_coretests(dirs, rustc);\n \n-    super::tests::RAND_REPO.fetch(dirs);\n-    super::tests::REGEX_REPO.fetch(dirs);\n-    super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n+    super::tests::RAND_REPO.patch(dirs);\n+    super::tests::REGEX_REPO.patch(dirs);\n+    super::tests::PORTABLE_SIMD_REPO.patch(dirs);\n }\n \n fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n@@ -61,21 +65,57 @@ fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n pub(crate) struct GitRepo {\n     url: GitRepoUrl,\n     rev: &'static str,\n+    content_hash: &'static str,\n     patch_name: &'static str,\n }\n \n enum GitRepoUrl {\n     Github { user: &'static str, repo: &'static str },\n }\n \n+// Note: This uses a hasher which is not cryptographically secure. This is fine as the hash is meant\n+// to protect against accidental modification and outdated downloads, not against manipulation.\n+fn hash_file(file: &std::path::Path) -> u64 {\n+    let contents = std::fs::read(file).unwrap();\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&contents, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n+fn hash_dir(dir: &std::path::Path) -> u64 {\n+    let mut sub_hashes = std::collections::BTreeMap::new();\n+    for entry in std::fs::read_dir(dir).unwrap() {\n+        let entry = entry.unwrap();\n+        if entry.file_type().unwrap().is_dir() {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_dir(&entry.path()));\n+        } else {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_file(&entry.path()));\n+        }\n+    }\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&sub_hashes, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n impl GitRepo {\n     pub(crate) const fn github(\n         user: &'static str,\n         repo: &'static str,\n         rev: &'static str,\n+        content_hash: &'static str,\n         patch_name: &'static str,\n     ) -> GitRepo {\n-        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n+        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, content_hash, patch_name }\n+    }\n+\n+    fn download_dir(&self, dirs: &Dirs) -> PathBuf {\n+        match self.url {\n+            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo).to_path(dirs),\n+        }\n     }\n \n     pub(crate) const fn source_dir(&self) -> RelPath {\n@@ -85,15 +125,42 @@ impl GitRepo {\n     }\n \n     pub(crate) fn fetch(&self, dirs: &Dirs) {\n-        let download_dir = match self.url {\n-            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo).to_path(dirs),\n-        };\n-        let source_dir = self.source_dir();\n+        let download_dir = self.download_dir(dirs);\n+\n+        if download_dir.exists() {\n+            let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+            if actual_hash == self.content_hash {\n+                println!(\"[FRESH] {}\", download_dir.display());\n+                return;\n+            } else {\n+                println!(\n+                    \"Mismatched content hash for {download_dir}: {actual_hash} != {content_hash}. Downloading again.\",\n+                    download_dir = download_dir.display(),\n+                    content_hash = self.content_hash,\n+                );\n+            }\n+        }\n+\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n                 clone_repo_shallow_github(dirs, &download_dir, user, repo, self.rev);\n             }\n         }\n+\n+        let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+        if actual_hash != self.content_hash {\n+            println!(\n+                \"Download of {download_dir} failed with mismatched content hash: {actual_hash} != {content_hash}\",\n+                download_dir = download_dir.display(),\n+                content_hash = self.content_hash,\n+            );\n+            std::process::exit(1);\n+        }\n+    }\n+\n+    pub(crate) fn patch(&self, dirs: &Dirs) {\n+        let download_dir = self.download_dir(dirs);\n+        let source_dir = self.source_dir();\n         source_dir.ensure_fresh(dirs);\n         copy_dir_recursively(&download_dir, &source_dir.to_path(dirs));\n         apply_patches(dirs, self.patch_name, &source_dir.to_path(dirs));"}, {"sha": "e60f0a4c6128d0d85c885384da9e9a1e4aac8ef5", "filename": "build_system/tests.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75327f8587fad77a25cfe99e52376b6862d75b57/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=75327f8587fad77a25cfe99e52376b6862d75b57", "patch": "@@ -94,20 +94,31 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n \n // FIXME(rust-random/rand#1293): Newer rand versions fail to test on Windows. Update once this is\n // fixed.\n-pub(crate) static RAND_REPO: GitRepo =\n-    GitRepo::github(\"rust-random\", \"rand\", \"50b9a447410860af8d6db9a208c3576886955874\", \"rand\");\n+pub(crate) static RAND_REPO: GitRepo = GitRepo::github(\n+    \"rust-random\",\n+    \"rand\",\n+    \"50b9a447410860af8d6db9a208c3576886955874\",\n+    \"98b2276210b30e43\",\n+    \"rand\",\n+);\n \n pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand_target\");\n \n-pub(crate) static REGEX_REPO: GitRepo =\n-    GitRepo::github(\"rust-lang\", \"regex\", \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\", \"regex\");\n+pub(crate) static REGEX_REPO: GitRepo = GitRepo::github(\n+    \"rust-lang\",\n+    \"regex\",\n+    \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\",\n+    \"d6af6507d565aa66\",\n+    \"regex\",\n+);\n \n pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex_target\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n     \"portable-simd\",\n     \"ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b\",\n+    \"1ba291009510070b\",\n     \"portable-simd\",\n );\n "}]}