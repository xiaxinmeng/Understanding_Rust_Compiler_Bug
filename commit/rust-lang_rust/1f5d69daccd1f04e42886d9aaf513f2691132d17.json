{"sha": "1f5d69daccd1f04e42886d9aaf513f2691132d17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNWQ2OWRhY2NkMWYwNGU0Mjg4NmQ5YWFmNTEzZjI2OTExMzJkMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T05:49:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T05:49:59Z"}, "message": "Auto merge of #74855 - jyn514:separate-lints, r=Manishearth\n\nSeparate `missing_doc_code_examples` from intra-doc links\n\nThese two lints have no relation other than both being nightly-only.\nThis allows stabilizing intra-doc links without stabilizing `missing_doc_code_examples`.\n\nFixes one of the issues spotted by @ollie27 in https://github.com/rust-lang/rust/pull/74430#issuecomment-664693080.\n\nr? @Manishearth", "tree": {"sha": "dea29038384051d9ffa89dc7e905da404d45f0c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea29038384051d9ffa89dc7e905da404d45f0c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5d69daccd1f04e42886d9aaf513f2691132d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d69daccd1f04e42886d9aaf513f2691132d17", "html_url": "https://github.com/rust-lang/rust/commit/1f5d69daccd1f04e42886d9aaf513f2691132d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d69daccd1f04e42886d9aaf513f2691132d17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1454bbd4fdac9b7272b93fe82860613dccc0afad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1454bbd4fdac9b7272b93fe82860613dccc0afad", "html_url": "https://github.com/rust-lang/rust/commit/1454bbd4fdac9b7272b93fe82860613dccc0afad"}, {"sha": "c3f5556c30e7af7a9fe139a2393b0fcdd27b9206", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f5556c30e7af7a9fe139a2393b0fcdd27b9206", "html_url": "https://github.com/rust-lang/rust/commit/c3f5556c30e7af7a9fe139a2393b0fcdd27b9206"}], "stats": {"total": 216, "additions": 113, "deletions": 103}, "files": [{"sha": "418238181e9b8d1f4197f29884f4b88ccf47b23c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1f5d69daccd1f04e42886d9aaf513f2691132d17", "patch": "@@ -23,7 +23,7 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::markdown_links;\n-use crate::passes::{look_for_tests, Pass};\n+use crate::passes::Pass;\n \n use super::span_of_attrs;\n \n@@ -508,8 +508,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n         trace!(\"got documentation '{}'\", dox);\n \n-        look_for_tests(&cx, &dox, &item, true);\n-\n         // find item's parent to resolve `Self` in item's docs below\n         let parent_name = self.cx.as_local_hir_id(item.def_id).and_then(|item_hir| {\n             let parent_hir = self.cx.tcx.hir().get_parent_item(item_hir);"}, {"sha": "aced7d55281adccb6db96f0883bbcf6d535d3ac1", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=1f5d69daccd1f04e42886d9aaf513f2691132d17", "patch": "@@ -0,0 +1,97 @@\n+//! This pass is overloaded and runs two different lints.\n+//!\n+//! - MISSING_DOC_CODE_EXAMPLES: this looks for public items missing doc-tests\n+//! - PRIVATE_DOC_TESTS: this looks for private items with doc-tests.\n+\n+use super::{span_of_attrs, Pass};\n+use crate::clean::*;\n+use crate::core::DocContext;\n+use crate::fold::DocFolder;\n+use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n+use rustc_session::lint;\n+\n+pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n+    name: \"check-private-items-doc-tests\",\n+    run: check_private_items_doc_tests,\n+    description: \"check private items doc tests\",\n+};\n+\n+struct PrivateItemDocTestLinter<'a, 'tcx> {\n+    cx: &'a DocContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> PrivateItemDocTestLinter<'a, 'tcx> {\n+    fn new(cx: &'a DocContext<'tcx>) -> Self {\n+        PrivateItemDocTestLinter { cx }\n+    }\n+}\n+\n+pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext<'_>) -> Crate {\n+    let mut coll = PrivateItemDocTestLinter::new(cx);\n+\n+    coll.fold_crate(krate)\n+}\n+\n+impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let cx = self.cx;\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n+\n+        look_for_tests(&cx, &dox, &item);\n+\n+        self.fold_item_recur(item)\n+    }\n+}\n+\n+pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n+    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            // If non-local, no need to check anything.\n+            return;\n+        }\n+    };\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl crate::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests { found_tests: 0 };\n+\n+    find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n+\n+    if tests.found_tests == 0 {\n+        use ItemEnum::*;\n+\n+        let should_report = match item.inner {\n+            ExternCrateItem(_, _) | ImportItem(_) | PrimitiveItem(_) | KeywordItem(_) => false,\n+            _ => true,\n+        };\n+        if should_report {\n+            debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            cx.tcx.struct_span_lint_hir(\n+                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                hir_id,\n+                sp,\n+                |lint| lint.build(\"missing code example in this documentation\").emit(),\n+            );\n+        }\n+    } else if rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n+        && tests.found_tests > 0\n+        && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n+    {\n+        cx.tcx.struct_span_lint_hir(\n+            lint::builtin::PRIVATE_DOC_TESTS,\n+            hir_id,\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+            |lint| lint.build(\"documentation test in private item\").emit(),\n+        );\n+    }\n+}"}, {"sha": "0eebdbd87ede77478f73716aa96f8aaf62a484f9", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=1f5d69daccd1f04e42886d9aaf513f2691132d17", "patch": "@@ -3,7 +3,6 @@\n \n use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_session::lint;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;\n@@ -12,7 +11,6 @@ use self::Condition::*;\n use crate::clean::{self, GetDefId, Item};\n use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n-use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n \n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n@@ -35,8 +33,8 @@ pub use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n mod collect_intra_doc_links;\n pub use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n-mod private_items_doc_tests;\n-pub use self::private_items_doc_tests::CHECK_PRIVATE_ITEMS_DOC_TESTS;\n+mod doc_test_lints;\n+pub use self::doc_test_lints::CHECK_PRIVATE_ITEMS_DOC_TESTS;\n \n mod collect_trait_impls;\n pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n@@ -312,52 +310,6 @@ impl DocFolder for ImportStripper {\n     }\n }\n \n-pub fn look_for_tests<'tcx>(\n-    cx: &DocContext<'tcx>,\n-    dox: &str,\n-    item: &Item,\n-    check_missing_code: bool,\n-) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            return;\n-        }\n-    };\n-\n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl crate::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests { found_tests: 0 };\n-\n-    find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n-\n-    if check_missing_code && tests.found_tests == 0 {\n-        let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n-        cx.tcx.struct_span_lint_hir(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id, sp, |lint| {\n-            lint.build(\"missing code example in this documentation\").emit()\n-        });\n-    } else if !check_missing_code\n-        && tests.found_tests > 0\n-        && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n-    {\n-        cx.tcx.struct_span_lint_hir(\n-            lint::builtin::PRIVATE_DOC_TESTS,\n-            hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n-            |lint| lint.build(\"documentation test in private item\").emit(),\n-        );\n-    }\n-}\n-\n /// Returns a span encompassing all the given attributes.\n crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {"}, {"sha": "aec5a6bd4e221f8745ce722bff640007ff0cb671", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1454bbd4fdac9b7272b93fe82860613dccc0afad/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1454bbd4fdac9b7272b93fe82860613dccc0afad/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=1454bbd4fdac9b7272b93fe82860613dccc0afad", "patch": "@@ -1,37 +0,0 @@\n-use crate::clean::*;\n-use crate::core::DocContext;\n-use crate::fold::DocFolder;\n-use crate::passes::{look_for_tests, Pass};\n-\n-pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n-    name: \"check-private-items-doc-tests\",\n-    run: check_private_items_doc_tests,\n-    description: \"check private items doc tests\",\n-};\n-\n-struct PrivateItemDocTestLinter<'a, 'tcx> {\n-    cx: &'a DocContext<'tcx>,\n-}\n-\n-impl<'a, 'tcx> PrivateItemDocTestLinter<'a, 'tcx> {\n-    fn new(cx: &'a DocContext<'tcx>) -> Self {\n-        PrivateItemDocTestLinter { cx }\n-    }\n-}\n-\n-pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext<'_>) -> Crate {\n-    let mut coll = PrivateItemDocTestLinter::new(cx);\n-\n-    coll.fold_crate(krate)\n-}\n-\n-impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n-    fn fold_item(&mut self, item: Item) -> Option<Item> {\n-        let cx = self.cx;\n-        let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-\n-        look_for_tests(&cx, &dox, &item, false);\n-\n-        self.fold_item_recur(item)\n-    }\n-}"}, {"sha": "ad923c714da4daf741deb4680dfbb916e3550efc", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d69daccd1f04e42886d9aaf513f2691132d17/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=1f5d69daccd1f04e42886d9aaf513f2691132d17", "patch": "@@ -1,3 +1,16 @@\n+error: missing code example in this documentation\n+  --> $DIR/lint-group.rs:16:1\n+   |\n+LL | /// wait, this doesn't have a doctest?\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-group.rs:7:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+\n error: documentation test in private item\n   --> $DIR/lint-group.rs:19:1\n    |\n@@ -29,18 +42,5 @@ LL | #![deny(rustdoc)]\n    = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-error: missing code example in this documentation\n-  --> $DIR/lint-group.rs:16:1\n-   |\n-LL | /// wait, this doesn't have a doctest?\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-group.rs:7:9\n-   |\n-LL | #![deny(rustdoc)]\n-   |         ^^^^^^^\n-   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n-\n error: aborting due to 3 previous errors\n "}]}