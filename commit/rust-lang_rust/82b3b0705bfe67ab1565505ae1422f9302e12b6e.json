{"sha": "82b3b0705bfe67ab1565505ae1422f9302e12b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjNiMDcwNWJmZTY3YWIxNTY1NTA1YWUxNDIyZjkzMDJlMTJiNmU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-11T17:28:05Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T22:26:58Z"}, "message": "Support intra-doc links on trait and module re-exports\n\nTrait implementations are treated the same as modules for the purposes\nof intra-doc links.", "tree": {"sha": "1441de7eead123208c0e16483c63ee3fe8c08499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1441de7eead123208c0e16483c63ee3fe8c08499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b3b0705bfe67ab1565505ae1422f9302e12b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b3b0705bfe67ab1565505ae1422f9302e12b6e", "html_url": "https://github.com/rust-lang/rust/commit/82b3b0705bfe67ab1565505ae1422f9302e12b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b3b0705bfe67ab1565505ae1422f9302e12b6e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63e5cdab02659beec0fd4a50d4b2556b7d6500d", "html_url": "https://github.com/rust-lang/rust/commit/e63e5cdab02659beec0fd4a50d4b2556b7d6500d"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "76b731f62f3db8055a8d4fa2199155b7d9a37d23", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=82b3b0705bfe67ab1565505ae1422f9302e12b6e", "patch": "@@ -50,7 +50,8 @@ enum ErrorKind {\n \n struct LinkCollector<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n-    mod_ids: Vec<hir::HirId>,\n+    // NOTE: this may not necessarily be a module in the current crate\n+    mod_ids: Vec<DefId>,\n }\n \n impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n@@ -445,17 +446,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         use rustc_middle::ty::DefIdTree;\n \n-        let item_hir_id = if item.is_mod() {\n-            if let Some(def_id) = item.def_id.as_local() {\n-                Some(self.cx.tcx.hir().as_local_hir_id(def_id))\n-            } else {\n-                debug!(\"attempting to fold on a non-local item: {:?}\", item);\n-                return self.fold_item_recur(item);\n-            }\n-        } else {\n-            None\n-        };\n-\n         let parent_node = if item.is_fake() {\n             // FIXME: is this correct?\n             None\n@@ -482,13 +472,9 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         let current_item = match item.inner {\n             ModuleItem(..) => {\n                 if item.attrs.inner_docs {\n-                    if item_hir_id.unwrap() != hir::CRATE_HIR_ID { item.name.clone() } else { None }\n+                    if item.def_id.is_top_level_module() { item.name.clone() } else { None }\n                 } else {\n-                    match parent_node.or(self\n-                        .mod_ids\n-                        .last()\n-                        .map(|&local| self.cx.tcx.hir().local_def_id(local).to_def_id()))\n-                    {\n+                    match parent_node.or(self.mod_ids.last().copied()) {\n                         Some(parent) if !parent.is_top_level_module() => {\n                             // FIXME: can we pull the parent module's name from elsewhere?\n                             Some(self.cx.tcx.item_name(parent).to_string())\n@@ -508,7 +494,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         };\n \n         if item.is_mod() && item.attrs.inner_docs {\n-            self.mod_ids.push(item_hir_id.unwrap());\n+            self.mod_ids.push(item.def_id);\n         }\n \n         let cx = self.cx;\n@@ -655,7 +641,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 // for outer comments we explicitly try and resolve against the\n                 // parent_node first.\n                 let base_node = if item.is_mod() && item.attrs.inner_docs {\n-                    self.mod_ids.last().map(|&id| self.cx.tcx.hir().local_def_id(id).to_def_id())\n+                    self.mod_ids.last().copied()\n                 } else {\n                     parent_node\n                 };\n@@ -842,7 +828,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         }\n \n         if item.is_mod() && !item.attrs.inner_docs {\n-            self.mod_ids.push(item_hir_id.unwrap());\n+            self.mod_ids.push(item.def_id);\n         }\n \n         if item.is_mod() {"}, {"sha": "5d63d7e37b64dc6e3fea28cd5f23dd9aad0f20bb", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/module.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs?ref=82b3b0705bfe67ab1565505ae1422f9302e12b6e", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"module_inner\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+/// [SomeType] links to [bar]\n+pub struct SomeType;\n+pub trait SomeTrait {}\n+/// [bar] links to [SomeTrait] and also [SomeType]\n+pub mod bar {}"}, {"sha": "5c3360dc5fdb3c32054e43a27d754a06d5c232a0", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/traits.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs?ref=82b3b0705bfe67ab1565505ae1422f9302e12b6e", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"inner\"]\n+/// this is a trait\n+pub trait SomeTrait {\n+    /// this is a method for [SomeTrait]\n+    fn foo();\n+}\n+\n+pub mod bar {\n+    use super::SomeTrait;\n+\n+    pub struct BarStruct;\n+\n+    impl SomeTrait for BarStruct {\n+        fn foo() {}\n+    }\n+}"}, {"sha": "67fa7293f37fb49b32540aa49f0c09f39a611e69", "filename": "src/test/rustdoc/intra-doc-crate/module.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs?ref=82b3b0705bfe67ab1565505ae1422f9302e12b6e", "patch": "@@ -0,0 +1,8 @@\n+// outer.rs\n+// aux-build: module.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+extern crate module_inner;\n+// @has 'module/bar/index.html' '//a[@href=\"../../module_inner/trait.SomeTrait.html\"]' 'SomeTrait'\n+// @has 'module/bar/index.html' '//a[@href=\"../../module_inner/struct.SomeType.html\"]' 'SomeType'\n+pub use module_inner::bar;"}, {"sha": "0672c76435b9adbdfdf88c5e352498f74bf4a2f7", "filename": "src/test/rustdoc/intra-doc-crate/traits.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b3b0705bfe67ab1565505ae1422f9302e12b6e/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs?ref=82b3b0705bfe67ab1565505ae1422f9302e12b6e", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:traits.rs\n+// build-aux-docs\n+// ignore-tidy-line-length\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+extern crate inner;\n+use inner::SomeTrait;\n+\n+pub struct SomeStruct;\n+\n+ // @has 'traits/struct.SomeStruct.html' '//a[@href=\"../inner/trait.SomeTrait.html\"]' 'SomeTrait'\n+impl SomeTrait for SomeStruct {\n+    // @has 'traits/struct.SomeStruct.html' '//a[@href=\"../inner/trait.SomeTrait.html\"]' 'SomeTrait'\n+    fn foo() {}\n+}"}]}