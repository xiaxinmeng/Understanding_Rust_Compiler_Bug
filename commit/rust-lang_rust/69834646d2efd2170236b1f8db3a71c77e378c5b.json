{"sha": "69834646d2efd2170236b1f8db3a71c77e378c5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODM0NjQ2ZDJlZmQyMTcwMjM2YjFmOGRiM2E3MWM3N2UzNzhjNWI=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T11:07:29Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T11:07:29Z"}, "message": "(core::str) more test cases", "tree": {"sha": "d036e7bb13498e9d720eab2a48fc5c99749b25a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d036e7bb13498e9d720eab2a48fc5c99749b25a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69834646d2efd2170236b1f8db3a71c77e378c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69834646d2efd2170236b1f8db3a71c77e378c5b", "html_url": "https://github.com/rust-lang/rust/commit/69834646d2efd2170236b1f8db3a71c77e378c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69834646d2efd2170236b1f8db3a71c77e378c5b/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2600db4778dac418309320bed235a1025d84c630", "url": "https://api.github.com/repos/rust-lang/rust/commits/2600db4778dac418309320bed235a1025d84c630", "html_url": "https://github.com/rust-lang/rust/commit/2600db4778dac418309320bed235a1025d84c630"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "4e49a51465e3dab8c9f200565c1faf308d69ee5f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69834646d2efd2170236b1f8db3a71c77e378c5b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69834646d2efd2170236b1f8db3a71c77e378c5b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=69834646d2efd2170236b1f8db3a71c77e378c5b", "patch": "@@ -920,7 +920,7 @@ fn find(haystack: str, needle: str) -> option<uint> {\n // Convert a byte position into a char position\n // within a given string\n fn b2c_pos(ss: str, bpos: uint) -> uint {\n-   assert bpos < len_bytes(ss);\n+   assert bpos == 0u || bpos < len_bytes(ss);\n \n    let ii = 0u;\n    let cpos = 0u;\n@@ -1725,6 +1725,9 @@ mod tests {\n     #[test]\n     fn test_find_bytes() {\n         // byte positions\n+        assert (find_bytes(\"banana\", \"apple pie\") == option::none);\n+        assert (find_bytes(\"\", \"\") == option::some(0u));\n+\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         assert (find_bytes(data, \"\")     == option::some(0u));\n         assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some( 0u));\n@@ -1736,6 +1739,9 @@ mod tests {\n     #[test]\n     fn test_find() {\n         // char positions\n+        assert (find(\"banana\", \"apple pie\") == option::none);\n+        assert (find(\"\", \"\") == option::some(0u));\n+\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         assert (find(data, \"\")     == option::some(0u));\n         assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));"}]}