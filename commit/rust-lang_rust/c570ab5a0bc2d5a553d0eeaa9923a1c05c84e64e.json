{"sha": "c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "node_id": "C_kwDOAAsO6NoAKGM1NzBhYjVhMGJjMmQ1YTU1M2QwZWVhYTk5MjNhMWMwNWM4NGU2NGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T01:45:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T01:45:16Z"}, "message": "Auto merge of #98037 - compiler-errors:rollup-fbvy456, r=compiler-errors\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #97920 (Fix some test annotations)\n - #97950 (Clarify `#[derive(PartialEq)]` on enums)\n - #98011 (Add documentation for error E0208)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f8f68f6a131b50412e5c537ba0ae76e530de0210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f68f6a131b50412e5c537ba0ae76e530de0210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "html_url": "https://github.com/rust-lang/rust/commit/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb9603022fe20814d3b7980a3c88299b8e1f747", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9603022fe20814d3b7980a3c88299b8e1f747", "html_url": "https://github.com/rust-lang/rust/commit/1fb9603022fe20814d3b7980a3c88299b8e1f747"}, {"sha": "ac73b19a7319148eef71e54ba1c8ac5d7f98b5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac73b19a7319148eef71e54ba1c8ac5d7f98b5d5", "html_url": "https://github.com/rust-lang/rust/commit/ac73b19a7319148eef71e54ba1c8ac5d7f98b5d5"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "d507293ccb0d704c80945b4ec76ddd9152034ed5", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "patch": "@@ -528,7 +528,7 @@ E0788: include_str!(\"./error_codes/E0788.md\"),\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n //  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n-    E0208,\n+    E0208, // internal error code\n //  E0209, // builtin traits can only be implemented on structs or enums\n //  E0213, // associated types are not accepted in this context\n //  E0215, // angle-bracket notation is not stable with `Fn`\n@@ -633,14 +633,14 @@ E0788: include_str!(\"./error_codes/E0788.md\"),\n //  E0629, // missing 'feature' (rustc_const_unstable)\n //  E0630, // rustc_const_unstable attribute must be paired with stable/unstable\n            // attribute\n-    E0640, // infer outlives requirements\n+    E0640, // infer outlives requirements, internal error code\n //  E0645, // trait aliases not finished\n //  E0694, // an unknown tool name found in scoped attributes\n //  E0702, // replaced with a generic attribute input check\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`\n //  E0709, // multiple different lifetimes used in arguments of `async fn`\n-    E0711, // a feature has been declared with conflicting stability attributes\n-    E0717, // rustc_promotable without stability attribute\n+    E0711, // a feature has been declared with conflicting stability attributes, internal error code\n+    E0717, // rustc_promotable without stability attribute, internal error code\n //  E0721, // `await` keyword\n //  E0723, // unstable feature in `const` context\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`."}, {"sha": "064675ee7cf245ae3c9b6e766b0c826eabcfbd1f", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "patch": "@@ -61,8 +61,8 @@ use self::Ordering::*;\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, two\n /// instances are equal if all fields are equal, and not equal if any fields\n-/// are not equal. When `derive`d on enums, each variant is equal to itself\n-/// and not equal to the other variants.\n+/// are not equal. When `derive`d on enums, two instances are equal if they\n+/// are the same variant and all fields are equal.\n ///\n /// ## How can I implement `PartialEq`?\n ///"}, {"sha": "67933666eb5d326f89d0c045a9010742384c1394", "filename": "src/test/ui/asm/x86_64/issue-82869.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs?ref=c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // only-x86_64\n // Make sure rustc doesn't ICE on asm! for a foreign architecture.\n "}, {"sha": "3cf9d6d1c1c00eaaba16a7276f48d956112a9c40", "filename": "src/test/ui/asm/x86_64/issue-82869.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr?ref=c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "patch": "@@ -1,17 +1,17 @@\n error: invalid register class `vreg`: unknown register class\n-  --> $DIR/issue-82869.rs:10:32\n+  --> $DIR/issue-82869.rs:11:32\n    |\n LL |     asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n    |                                ^^^^^^^^^^^\n \n error: invalid register class `vreg`: unknown register class\n-  --> $DIR/issue-82869.rs:10:45\n+  --> $DIR/issue-82869.rs:11:45\n    |\n LL |     asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n    |                                             ^^^^^^^^^^\n \n error: invalid register `d0`: unknown register\n-  --> $DIR/issue-82869.rs:10:57\n+  --> $DIR/issue-82869.rs:11:57\n    |\n LL |       asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n    |  _________________________________________________________^"}, {"sha": "a43612e5d8587f0afc1ea5d4770686517dbd2b42", "filename": "src/test/ui/drop/repeat-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs?ref=c570ab5a0bc2d5a553d0eeaa9923a1c05c84e64e", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare no unwinding panic\n // ignore-avr no unwinding panic\n // ignore-nvptx64 no unwinding panic"}]}