{"sha": "a920a056035d3aa8f5e90ff174764a886366d379", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjBhMDU2MDM1ZDNhYThmNWU5MGZmMTc0NzY0YTg4NjM2NmQzNzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T03:53:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: recover `default` on free items.", "tree": {"sha": "70359835dfc908a7f258c6e42f31c97548be5b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70359835dfc908a7f258c6e42f31c97548be5b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a920a056035d3aa8f5e90ff174764a886366d379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a920a056035d3aa8f5e90ff174764a886366d379", "html_url": "https://github.com/rust-lang/rust/commit/a920a056035d3aa8f5e90ff174764a886366d379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a920a056035d3aa8f5e90ff174764a886366d379/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed4c0998381901ac68c19c30c375f5760016759", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4c0998381901ac68c19c30c375f5760016759", "html_url": "https://github.com/rust-lang/rust/commit/9ed4c0998381901ac68c19c30c375f5760016759"}], "stats": {"total": 244, "additions": 226, "deletions": 18}, "files": [{"sha": "184956e1065fa43346ab4399f31a913be7ecfe1d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -81,17 +81,30 @@ impl<'a> Parser<'a> {\n             Some(item)\n         });\n \n+        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed)?;\n+        if let Some(ref item) = item {\n+            self.error_on_illegal_default(item.defaultness);\n+        }\n+        Ok(item.map(P))\n+    }\n+\n+    fn parse_item_common(\n+        &mut self,\n+        mut attrs: Vec<Attribute>,\n+        macros_allowed: bool,\n+        attributes_allowed: bool,\n+    ) -> PResult<'a, Option<Item>> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n-\n-        if let Some((ident, kind)) = self.parse_item_kind(&mut attrs, macros_allowed, lo, &vis)? {\n-            return Ok(Some(P(self.mk_item(lo, ident, kind, vis, Defaultness::Final, attrs))));\n+        let mut def = self.parse_defaultness();\n+        let kind = self.parse_item_kind(&mut attrs, macros_allowed, lo, &vis, &mut def)?;\n+        if let Some((ident, kind)) = kind {\n+            return Ok(Some(self.mk_item(lo, ident, kind, vis, def, attrs)));\n         }\n \n         // At this point, we have failed to parse an item.\n-\n         self.error_on_unmatched_vis(&vis);\n-\n+        self.error_on_unmatched_defaultness(def);\n         if !attributes_allowed {\n             self.recover_attrs_no_item(&attrs)?;\n         }\n@@ -111,13 +124,33 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n+    /// Error in-case a `default` was parsed but no item followed.\n+    fn error_on_unmatched_defaultness(&self, def: Defaultness) {\n+        if let Defaultness::Default(span) = def {\n+            self.struct_span_err(span, \"unmatched `default`\")\n+                .span_label(span, \"the unmatched `default`\")\n+                .emit();\n+        }\n+    }\n+\n+    /// Error in-case `default` was parsed in an in-appropriate context.\n+    fn error_on_illegal_default(&self, def: Defaultness) {\n+        if let Defaultness::Default(span) = def {\n+            self.struct_span_err(span, \"item cannot be `default`\")\n+                .span_label(span, \"`default` because of this\")\n+                .note(\"only associated `fn`, `const`, and `type` items can be `default`\")\n+                .emit();\n+        }\n+    }\n+\n     /// Parses one of the items allowed by the flags.\n     fn parse_item_kind(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n         macros_allowed: bool,\n         lo: Span,\n         vis: &Visibility,\n+        def: &mut Defaultness,\n     ) -> PResult<'a, Option<ItemInfo>> {\n         let info = if self.eat_keyword(kw::Use) {\n             // USE ITEM\n@@ -150,10 +183,9 @@ impl<'a> Parser<'a> {\n             self.parse_item_trait(attrs, lo)?\n         } else if self.check_keyword(kw::Impl)\n             || self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Impl])\n-            || self.check_keyword(kw::Default) && self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe])\n         {\n             // IMPL ITEM\n-            self.parse_item_impl(attrs)?\n+            self.parse_item_impl(attrs, mem::replace(def, Defaultness::Final))?\n         } else if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             self.parse_item_mod(attrs)?\n@@ -366,8 +398,11 @@ impl<'a> Parser<'a> {\n     /// \"impl\" GENERICS \"const\"? \"!\"? TYPE \"for\"? (TYPE | \"..\") (\"where\" PREDICATES)? \"{\" BODY \"}\"\n     /// \"impl\" GENERICS \"const\"? \"!\"? TYPE (\"where\" PREDICATES)? \"{\" BODY \"}\"\n     /// ```\n-    fn parse_item_impl(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n-        let defaultness = self.parse_defaultness();\n+    fn parse_item_impl(\n+        &mut self,\n+        attrs: &mut Vec<Attribute>,\n+        defaultness: Defaultness,\n+    ) -> PResult<'a, ItemInfo> {\n         let unsafety = self.parse_unsafety();\n         self.expect_keyword(kw::Impl)?;\n \n@@ -531,13 +566,11 @@ impl<'a> Parser<'a> {\n \n     /// Parses defaultness (i.e., `default` or nothing).\n     fn parse_defaultness(&mut self) -> Defaultness {\n-        // We are interested in `default` followed by another keyword.\n+        // We are interested in `default` followed by another identifier.\n         // However, we must avoid keywords that occur as binary operators.\n         // Currently, the only applicable keyword is `as` (`default as Ty`).\n         if self.check_keyword(kw::Default)\n-            && self.look_ahead(1, |t| {\n-                t.is_non_raw_ident_where(|i| i.is_reserved() && i.name != kw::As)\n-            })\n+            && self.look_ahead(1, |t| t.is_non_raw_ident_where(|i| i.name != kw::As))\n         {\n             self.bump(); // `default`\n             Defaultness::Default(self.prev_span)"}, {"sha": "f7d390eb8a25aafaca048eaf44de175c14a63216", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -0,0 +1,26 @@\n+// Test parsing for `default` where it doesn't belong.\n+// Specifically, we are interested in kinds of items or items in certain contexts.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+mod free_items {\n+    default extern crate foo; //~ ERROR item cannot be `default`\n+    default use foo; //~ ERROR item cannot be `default`\n+    default static foo: u8; //~ ERROR item cannot be `default`\n+    default const foo: u8; //~ ERROR item cannot be `default`\n+    default fn foo(); //~ ERROR item cannot be `default`\n+    default mod foo {} //~ ERROR item cannot be `default`\n+    default extern \"C\" {} //~ ERROR item cannot be `default`\n+    default type foo = u8; //~ ERROR item cannot be `default`\n+    default enum foo {} //~ ERROR item cannot be `default`\n+    default struct foo {} //~ ERROR item cannot be `default`\n+    default union foo {} //~ ERROR item cannot be `default`\n+    default trait foo {} //~ ERROR item cannot be `default`\n+    default trait foo = Ord; //~ ERROR item cannot be `default`\n+    default impl foo {}\n+    default!();\n+    default::foo::bar!();\n+    default macro foo {} //~ ERROR item cannot be `default`\n+    default macro_rules! foo {} //~ ERROR item cannot be `default`\n+}"}, {"sha": "d279fd962bbbae5efd578bc8dbeea6e7c7208e98", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -0,0 +1,122 @@\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:8:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:9:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:10:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:11:5\n+   |\n+LL |     default const foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:12:5\n+   |\n+LL |     default fn foo();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:13:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:14:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:15:5\n+   |\n+LL |     default type foo = u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:16:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:17:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:18:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:19:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:20:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:24:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:25:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "31696de0a5caa1efea958f38c9288174c5d8b9fe", "filename": "src/test/ui/parser/default-unmatched.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -0,0 +1,6 @@\n+mod foo {\n+    default!(); // OK.\n+    default do\n+    //~^ ERROR unmatched `default`\n+    //~| ERROR expected item, found reserved keyword `do`\n+}"}, {"sha": "6e4ef7b79fcc3ac8eb88f334f69e01f03edebeb6", "filename": "src/test/ui/parser/default-unmatched.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -0,0 +1,14 @@\n+error: unmatched `default`\n+  --> $DIR/default-unmatched.rs:3:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the unmatched `default`\n+\n+error: expected item, found reserved keyword `do`\n+  --> $DIR/default-unmatched.rs:3:13\n+   |\n+LL |     default do\n+   |             ^^ expected item\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "662ed28f2f742d83f46b0bdb26126bf69233d9ae", "filename": "src/test/ui/parser/impl-parsing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -6,4 +6,5 @@ impl Trait .. {} //~ ERROR missing `for` in a trait impl\n impl ?Sized for Type {} //~ ERROR expected a trait, found type\n impl ?Sized for .. {} //~ ERROR expected a trait, found type\n \n-default unsafe FAIL //~ ERROR expected `impl`, found `FAIL`\n+default unsafe FAIL //~ ERROR expected item, found keyword `unsafe`\n+//~^ ERROR unmatched `default`"}, {"sha": "a5fc3e46896eb17165606cdc42f23e63cfcdcc40", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a920a056035d3aa8f5e90ff174764a886366d379/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=a920a056035d3aa8f5e90ff174764a886366d379", "patch": "@@ -22,11 +22,17 @@ error: expected a trait, found type\n LL | impl ?Sized for .. {}\n    |      ^^^^^^\n \n-error: expected `impl`, found `FAIL`\n-  --> $DIR/impl-parsing.rs:9:16\n+error: unmatched `default`\n+  --> $DIR/impl-parsing.rs:9:1\n    |\n LL | default unsafe FAIL\n-   |                ^^^^ expected `impl`\n+   | ^^^^^^^ the unmatched `default`\n \n-error: aborting due to 5 previous errors\n+error: expected item, found keyword `unsafe`\n+  --> $DIR/impl-parsing.rs:9:9\n+   |\n+LL | default unsafe FAIL\n+   |         ^^^^^^ expected item\n+\n+error: aborting due to 6 previous errors\n "}]}