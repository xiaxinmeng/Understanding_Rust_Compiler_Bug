{"sha": "56842b2154c0c2dd243f64e864b9c6aee718a161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODQyYjIxNTRjMGMyZGQyNDNmNjRlODY0YjljNmFlZTcxOGExNjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-08T17:42:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:14Z"}, "message": "Add a method for emiting a switch.", "tree": {"sha": "a897b4a20c2933c229ec4ce9cc3aa2b4097437c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a897b4a20c2933c229ec4ce9cc3aa2b4097437c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56842b2154c0c2dd243f64e864b9c6aee718a161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56842b2154c0c2dd243f64e864b9c6aee718a161", "html_url": "https://github.com/rust-lang/rust/commit/56842b2154c0c2dd243f64e864b9c6aee718a161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56842b2154c0c2dd243f64e864b9c6aee718a161/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e61946fa0dd5058165ed7c36f30b42c168cc02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e61946fa0dd5058165ed7c36f30b42c168cc02", "html_url": "https://github.com/rust-lang/rust/commit/b2e61946fa0dd5058165ed7c36f30b42c168cc02"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "fbeb978413a92faeb730892415d28a20cec40a8f", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=56842b2154c0c2dd243f64e864b9c6aee718a161", "patch": "@@ -170,9 +170,16 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         v: &'ll Value,\n         else_llbb: &'ll BasicBlock,\n         num_cases: usize,\n-    ) -> &'ll Value {\n-        unsafe {\n+        cases: impl Iterator<Item = (u128, &'ll BasicBlock)>,\n+    ) {\n+        let switch = unsafe {\n             llvm::LLVMBuildSwitch(self.llbuilder, v, else_llbb, num_cases as c_uint)\n+        };\n+        for (on_val, dest) in cases {\n+            let on_val = self.const_uint_big(self.val_ty(v), on_val);\n+            unsafe {\n+                llvm::LLVMAddCase(switch, on_val, dest)\n+            }\n         }\n     }\n \n@@ -1158,12 +1165,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn add_case(&mut self, s: &'ll Value, on_val: &'ll Value, dest: &'ll BasicBlock) {\n-        unsafe {\n-            llvm::LLVMAddCase(s, on_val, dest)\n-        }\n-    }\n-\n     fn set_invariant_load(&mut self, load: &'ll Value) {\n         unsafe {\n             llvm::LLVMSetMetadata(load, llvm::MD_invariant_load as c_uint,"}, {"sha": "0ce97553bea770d7197b078dedf62bec2c4459ae", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=56842b2154c0c2dd243f64e864b9c6aee718a161", "patch": "@@ -214,17 +214,14 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         } else {\n             let (otherwise, targets) = targets.split_last().unwrap();\n-            let switch = bx.switch(discr.immediate(),\n-                                   helper.llblock(self, *otherwise),\n-                                   values.len());\n-            let switch_llty = bx.immediate_backend_type(\n-                bx.layout_of(switch_ty)\n+            bx.switch(\n+                discr.immediate(),\n+                helper.llblock(self, *otherwise),\n+                values.len(),\n+                values.iter().zip(targets).map(|(&value, target)| {\n+                    (value, helper.llblock(self, *target))\n+                })\n             );\n-            for (&value, target) in values.iter().zip(targets) {\n-                let llval = bx.const_uint_big(switch_llty, value);\n-                let llbb = helper.llblock(self, *target);\n-                bx.add_case(switch, llval, llbb)\n-            }\n         }\n     }\n "}, {"sha": "3b0f047d97414dc09e66cf59235b0eac72cd9c47", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56842b2154c0c2dd243f64e864b9c6aee718a161/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=56842b2154c0c2dd243f64e864b9c6aee718a161", "patch": "@@ -50,7 +50,8 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         v: Self::Value,\n         else_llbb: Self::BasicBlock,\n         num_cases: usize,\n-    ) -> Self::Value;\n+        cases: impl Iterator<Item = (u128, Self::BasicBlock)>,\n+    );\n     fn invoke(\n         &mut self,\n         llfn: Self::Value,\n@@ -60,6 +61,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         funclet: Option<&Self::Funclet>,\n     ) -> Self::Value;\n     fn unreachable(&mut self);\n+\n     fn add(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn fadd(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn fadd_fast(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n@@ -242,7 +244,6 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n         order: AtomicOrdering,\n     ) -> Self::Value;\n     fn atomic_fence(&mut self, order: AtomicOrdering, scope: SynchronizationScope);\n-    fn add_case(&mut self, s: Self::Value, on_val: Self::Value, dest: Self::BasicBlock);\n     fn set_invariant_load(&mut self, load: Self::Value);\n \n     /// Called for `StorageLive`"}]}