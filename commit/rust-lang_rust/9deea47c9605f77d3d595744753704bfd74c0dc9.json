{"sha": "9deea47c9605f77d3d595744753704bfd74c0dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZWVhNDdjOTYwNWY3N2QzZDU5NTc0NDc1MzcwNGJmZDc0YzBkYzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-18T18:24:54Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-18T18:52:38Z"}, "message": "rustc_mir: always downcast enums, even if univariant.", "tree": {"sha": "a3c0e2afa11487fb8ae4fd0cf70c2ce1cfacd56b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c0e2afa11487fb8ae4fd0cf70c2ce1cfacd56b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9deea47c9605f77d3d595744753704bfd74c0dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9deea47c9605f77d3d595744753704bfd74c0dc9", "html_url": "https://github.com/rust-lang/rust/commit/9deea47c9605f77d3d595744753704bfd74c0dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9deea47c9605f77d3d595744753704bfd74c0dc9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab2532ef949a08e16b621259a91d1ff37165665", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab2532ef949a08e16b621259a91d1ff37165665", "html_url": "https://github.com/rust-lang/rust/commit/fab2532ef949a08e16b621259a91d1ff37165665"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "c89d67d4aab8621baf6e98fb1ce93d295d59a14c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -210,7 +210,7 @@ impl<'tcx> cmt_<'tcx> {\n                 adt_def.variant_with_id(variant_did)\n             }\n             _ => {\n-                assert!(adt_def.is_univariant());\n+                assert_eq!(adt_def.variants.len(), 1);\n                 &adt_def.variants[0]\n             }\n         };\n@@ -1096,7 +1096,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                                               -> cmt<'tcx> {\n         // univariant enums do not need downcasts\n         let base_did = self.tcx.parent_def_id(variant_did).unwrap();\n-        if !self.tcx.adt_def(base_did).is_univariant() {\n+        if self.tcx.adt_def(base_did).variants.len() != 1 {\n             let base_ty = base_cmt.ty;\n             let ret = Rc::new(cmt_ {\n                 id: node.id(),"}, {"sha": "dac200efb39e32ba1ccfa234286afb9fbbe9ac32", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -1674,11 +1674,6 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.variants.iter().flat_map(|v| v.fields.iter())\n     }\n \n-    #[inline]\n-    pub fn is_univariant(&self) -> bool {\n-        self.variants.len() == 1\n-    }\n-\n     pub fn is_payloadfree(&self) -> bool {\n         !self.variants.is_empty() &&\n             self.variants.iter().all(|v| v.fields.is_empty())"}, {"sha": "33d9bfa6e6b9c21b44d31f2ec37afbebc941832a", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> Constructor<'tcx> {\n         match self {\n             &Variant(vid) => adt.variant_index_with_id(vid),\n             &Single => {\n-                assert_eq!(adt.variants.len(), 1);\n+                assert!(!adt.is_enum());\n                 0\n             }\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt)\n@@ -356,7 +356,7 @@ impl<'tcx> Witness<'tcx> {\n                     }).collect();\n \n                     if let ty::TyAdt(adt, substs) = ty.sty {\n-                        if adt.variants.len() > 1 {\n+                        if adt.is_enum() {\n                             PatternKind::Variant {\n                                 adt_def: adt,\n                                 substs,\n@@ -444,7 +444,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n             }\n         }\n-        ty::TyAdt(def, substs) if def.is_enum() && def.variants.len() != 1 => {\n+        ty::TyAdt(def, substs) if def.is_enum() => {\n             def.variants.iter()\n                 .filter(|v| !cx.is_variant_uninhabited(v, substs))\n                 .map(|v| Variant(v.did))"}, {"sha": "cfbb9623f7dc9ddf29b6f1e44fdf08a5c1dce298", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                         Some(&adt_def.variants[variant_index])\n                     }\n                     _ => if let ty::TyAdt(adt, _) = self.ty.sty {\n-                        if adt.is_univariant() {\n+                        if !adt.is_enum() {\n                             Some(&adt.variants[0])\n                         } else {\n                             None\n@@ -598,7 +598,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 let enum_id = self.tcx.parent_def_id(variant_id).unwrap();\n                 let adt_def = self.tcx.adt_def(enum_id);\n-                if adt_def.variants.len() > 1 {\n+                if adt_def.is_enum() {\n                     let substs = match ty.sty {\n                         ty::TyAdt(_, substs) |\n                         ty::TyFnDef(_, substs) => substs,"}, {"sha": "a7599f19244c215df39ef654b64adafff34e81f0", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -98,19 +98,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n-                if self.hir.tcx().sess.features.borrow().never_type {\n-                    let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n-                        i == variant_index || {\n-                            self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n-                        }\n-                    });\n-                    if irrefutable {\n-                        let lvalue = match_pair.lvalue.downcast(adt_def, variant_index);\n-                        candidate.match_pairs.extend(self.field_match_pairs(lvalue, subpatterns));\n-                        Ok(())\n-                    } else {\n-                        Err(match_pair)\n+                let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n+                    i == variant_index || {\n+                        self.hir.tcx().sess.features.borrow().never_type &&\n+                        self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n                     }\n+                });\n+                if irrefutable {\n+                    let lvalue = match_pair.lvalue.downcast(adt_def, variant_index);\n+                    candidate.match_pairs.extend(self.field_match_pairs(lvalue, subpatterns));\n+                    Ok(())\n                 } else {\n                     Err(match_pair)\n                 }"}, {"sha": "02a7bc83f6ee822cece374180c16a62a9ea554c9", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Switch {\n                         adt_def: adt_def.clone(),\n-                        variants: BitVector::new(self.hir.num_variants(adt_def)),\n+                        variants: BitVector::new(adt_def.variants.len()),\n                     },\n                 }\n             }\n@@ -184,7 +184,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match test.kind {\n             TestKind::Switch { adt_def, ref variants } => {\n                 // Variants is a BitVec of indexes into adt_def.variants.\n-                let num_enum_variants = self.hir.num_variants(adt_def);\n+                let num_enum_variants = adt_def.variants.len();\n                 let used_variants = variants.count();\n                 let mut otherwise_block = None;\n                 let mut target_blocks = Vec::with_capacity(num_enum_variants);"}, {"sha": "b1f4b849b8928f4ec09c1cb9bd4c49f905733532", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -213,10 +213,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         bug!(\"found no method `{}` in `{:?}`\", method_name, trait_def_id);\n     }\n \n-    pub fn num_variants(&mut self, adt_def: &ty::AdtDef) -> usize {\n-        adt_def.variants.len()\n-    }\n-\n     pub fn all_fields(&mut self, adt_def: &ty::AdtDef, variant_index: usize) -> Vec<Field> {\n         (0..adt_def.variants[variant_index].fields.len())\n             .map(Field::new)"}, {"sha": "e2ecd4839fb483f0d8f202711a05f131ff182562", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -67,7 +67,7 @@ impl MirPass for Deaggregator {\n                     let ty = variant_def.fields[i].ty(tcx, substs);\n                     let rhs = Rvalue::Use(op.clone());\n \n-                    let lhs_cast = if adt_def.variants.len() > 1 {\n+                    let lhs_cast = if adt_def.is_enum() {\n                         Lvalue::Projection(Box::new(LvalueProjection {\n                             base: lhs.clone(),\n                             elem: ProjectionElem::Downcast(adt_def, variant),\n@@ -89,7 +89,7 @@ impl MirPass for Deaggregator {\n                 }\n \n                 // if the aggregate was an enum, we need to set the discriminant\n-                if adt_def.variants.len() > 1 {\n+                if adt_def.is_enum() {\n                     let set_discriminant = Statement {\n                         kind: StatementKind::SetDiscriminant {\n                             lvalue: lhs.clone(),"}, {"sha": "30f3a0f3186ca1a3742206e3c3aecb86933e5c1e", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 variant_index,\n             } => (&adt_def.variants[variant_index], substs),\n             LvalueTy::Ty { ty } => match ty.sty {\n-                ty::TyAdt(adt_def, substs) if adt_def.is_univariant() => {\n+                ty::TyAdt(adt_def, substs) if !adt_def.is_enum() => {\n                     (&adt_def.variants[0], substs)\n                 }\n                 ty::TyClosure(def_id, substs) => {"}, {"sha": "1852712a083751a02410e93fb3a3cbfe9a027590", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -384,7 +384,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                                   substs: &'tcx Substs<'tcx>)\n                                   -> (BasicBlock, Unwind) {\n         let (succ, unwind) = self.drop_ladder_bottom();\n-        if adt.variants.len() == 1 {\n+        if !adt.is_enum() {\n             let fields = self.move_paths_for_fields(\n                 self.lvalue,\n                 self.path,"}, {"sha": "17d614b54969cd9953bd529406783e6663afccba", "filename": "src/test/run-pass/enum-univariant-repr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9deea47c9605f77d3d595744753704bfd74c0dc9/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs?ref=9deea47c9605f77d3d595744753704bfd74c0dc9", "patch": "@@ -22,6 +22,11 @@ enum UnivariantWithoutDescr {\n     Y\n }\n \n+#[repr(u8)]\n+enum UnivariantWithData {\n+    Z(u8),\n+}\n+\n pub fn main() {\n     {\n         assert_eq!(4, mem::size_of::<Univariant>());\n@@ -44,4 +49,12 @@ pub fn main() {\n         // check it has the same memory layout as u16\n         assert_eq!(&[descr, descr, descr], ints);\n     }\n+\n+    {\n+        assert_eq!(2, mem::size_of::<UnivariantWithData>());\n+\n+        match UnivariantWithData::Z(4) {\n+            UnivariantWithData::Z(x) => assert_eq!(x, 4),\n+        }\n+    }\n }"}]}