{"sha": "b263981fd7c1285cddf2f207554749a425d42978", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjM5ODFmZDdjMTI4NWNkZGYyZjIwNzU1NDc0OWE0MjVkNDI5Nzg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-08T18:28:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-08T18:28:17Z"}, "message": "Rollup merge of #81779 - geogriff:const-ptr-to-int-error, r=lcnr\n\nimprove error message for disallowed ptr-to-int casts in const eval\n\nImproves an error message as [suggested](https://github.com/rust-lang/rust/issues/80875#issuecomment-762754580) in #80875.\n\nDoes the wording make enough sense? I tried to follow precedent for error message style while maintaining brevity.\n\nIt seems like the rest of the `ConstEvalErrKind::NeedsRfc` error messages could be improved as well. I could give that a go if this approach works.\n\nCloses #80875", "tree": {"sha": "bac0457a99719672fd1e91d7328299bb3c3dee0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac0457a99719672fd1e91d7328299bb3c3dee0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b263981fd7c1285cddf2f207554749a425d42978", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIYLBCRBK7hj4Ov3rIwAAdHIIAD25Q2WygCzHXVwPyOF7ddbe\nPGDhI+YSTa3goB6lx5ab/jeTu723i1sTHGxMd35MQrvA9o+o7blZG7Y9zdhg6Jfd\nGlJhQD/Qsn+a0DhAKt1S0dZGPtGo9GAwy9e2bQJfyxn0+xDv2LLn2JwmcFi3tm/1\n8rzrMLct3p9h30VIgN1QKwEo7fnDYcQ7l9fal7sbsZbEiz6rd4irjEfxdtHOa00d\n/WRKFEyFqKbgAMPR0XA8jpoP566IX2XAlE/vmnKahq2SeWUNMMeo+U7PLKCL8pdR\nCSPUoVtt2gQYCGDYweYxEOXAaFfXpOXutaf9m3Pfyg3Yj+RI5s+OBvaNNderr6I=\n=t1lK\n-----END PGP SIGNATURE-----\n", "payload": "tree bac0457a99719672fd1e91d7328299bb3c3dee0f\nparent 2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058\nparent af28c2e64df82744cd627b0c305eb2e4d4d260ca\nauthor Mara Bos <m-ou.se@m-ou.se> 1612808897 +0100\ncommitter GitHub <noreply@github.com> 1612808897 +0100\n\nRollup merge of #81779 - geogriff:const-ptr-to-int-error, r=lcnr\n\nimprove error message for disallowed ptr-to-int casts in const eval\n\nImproves an error message as [suggested](https://github.com/rust-lang/rust/issues/80875#issuecomment-762754580) in #80875.\n\nDoes the wording make enough sense? I tried to follow precedent for error message style while maintaining brevity.\n\nIt seems like the rest of the `ConstEvalErrKind::NeedsRfc` error messages could be improved as well. I could give that a go if this approach works.\n\nCloses #80875\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b263981fd7c1285cddf2f207554749a425d42978", "html_url": "https://github.com/rust-lang/rust/commit/b263981fd7c1285cddf2f207554749a425d42978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b263981fd7c1285cddf2f207554749a425d42978/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058", "html_url": "https://github.com/rust-lang/rust/commit/2c8d1c8cef3c7ec45f7f8729e38899dfa0e09058"}, {"sha": "af28c2e64df82744cd627b0c305eb2e4d4d260ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/af28c2e64df82744cd627b0c305eb2e4d4d260ca", "html_url": "https://github.com/rust-lang/rust/commit/af28c2e64df82744cd627b0c305eb2e4d4d260ca"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "88af9391cadfe3d9c3d69092a59cbc8e16959422", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -16,6 +16,7 @@ use crate::interpret::{\n #[derive(Clone, Debug)]\n pub enum ConstEvalErrKind {\n     NeedsRfc(String),\n+    PtrToIntCast,\n     ConstAccessesStatic,\n     ModifiedGlobal,\n     AssertFailure(AssertKind<ConstInt>),\n@@ -39,6 +40,12 @@ impl fmt::Display for ConstEvalErrKind {\n             NeedsRfc(ref msg) => {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg)\n             }\n+            PtrToIntCast => {\n+                write!(\n+                    f,\n+                    \"cannot cast pointer to integer because it was not created by cast from integer\"\n+                )\n+            }\n             ConstAccessesStatic => write!(f, \"constant accesses static\"),\n             ModifiedGlobal => {\n                 write!(f, \"modifying a static's initial value from another static's initializer\")"}, {"sha": "f6b950c08c78e05a6bbc31d0e8ed8b492d0744ec", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -352,7 +352,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"pointer-to-integer cast\".to_string()).into())\n+        Err(ConstEvalErrKind::PtrToIntCast.into())\n     }\n \n     fn binary_ptr_op("}, {"sha": "bf1e790b5dc29270a92c743ab2b92bc122a2a031", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.rs?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_raw_ptr_to_usize_cast)]\n+\n+fn main() {\n+    const OK: usize = unsafe { 0 as *const i32 as usize };\n+\n+    const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n+    //~^ ERROR [const_err]\n+    //~| NOTE cannot cast pointer to integer because it was not created by cast from integer\n+    //~| NOTE\n+    //~| NOTE `#[deny(const_err)]` on by default\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE see issue #71800\n+}"}, {"sha": "48255860bb53fd1f0b5331866dbe70ea6544de4d", "filename": "src/test/ui/const-ptr/ptr_to_usize_cast.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fptr_to_usize_cast.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -0,0 +1,14 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ptr_to_usize_cast.rs:6:36\n+   |\n+LL |     const _ERROR: usize = unsafe { &0 as *const i32 as usize };\n+   |     -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                    |\n+   |                                    cannot cast pointer to integer because it was not created by cast from integer\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error\n+"}, {"sha": "df8b33a0898f659deab953e1a3b9e7614a8a5dcd", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n    | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n    |                            |\n-   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                            cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "d571eb549630f948ffb25569946f6463603bc160", "filename": "src/test/ui/consts/issue-51559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const FOO: usize = unsafe { BAR as usize };\n    | --------------------------------^^^^^^^^^^^^---\n    |                                 |\n-   |                                 \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                                 cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "29998950552cd502c761a8b287a533c39ff4522a", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-52432.rs:7:10\n    |\n LL |     [(); &(static || {}) as *const _ as usize];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot cast pointer to integer because it was not created by cast from integer\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aae6d837204e3a2e596bb5a2774f46944c39640e", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -15,7 +15,7 @@ static INT_PTR_ARITH: () = unsafe {\n     let x: usize = std::mem::transmute(&0);\n     let _v = x + 0;\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE pointer-to-integer cast\n+    //~| NOTE cannot cast pointer to integer\n };\n \n fn main() {}"}, {"sha": "8ac4aa87f642a41df642fdf73ee2538901d77380", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -8,7 +8,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:16:14\n    |\n LL |     let _v = x + 0;\n-   |              ^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |              ^^^^^ cannot cast pointer to integer because it was not created by cast from integer\n \n warning: skipping const checks\n    |"}, {"sha": "0fbe55f972ee543f24cc433f7e86436b67744610", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -71,14 +71,14 @@ const _: *const u8 =\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE \"pointer-to-integer cast\" needs an rfc\n+//~| NOTE cannot cast pointer to integer\n //~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n //~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE \"pointer-to-integer cast\" needs an rfc\n+//~| NOTE cannot cast pointer to integer\n //~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n //~| NOTE"}, {"sha": "9ec009c55c443e4d1984e280342652c435254a59", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b263981fd7c1285cddf2f207554749a425d42978/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=b263981fd7c1285cddf2f207554749a425d42978", "patch": "@@ -36,7 +36,7 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                           cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n@@ -47,7 +47,7 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |                           cannot cast pointer to integer because it was not created by cast from integer\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>"}]}