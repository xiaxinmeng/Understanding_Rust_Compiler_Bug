{"sha": "e2c9e923b06153f6b31759be2a47ef7a7145cfd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzllOTIzYjA2MTUzZjZiMzE3NTliZTJhNDdlZjdhNzE0NWNmZDY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-19T02:44:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-19T02:44:01Z"}, "message": "Merge pull request #1981 from ssilva/master\n\nShow examples of default values first and annotate them with \"(default)\"", "tree": {"sha": "48fd55b7fe25c7fe4f8c987ffbe1dd44f440f7d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48fd55b7fe25c7fe4f8c987ffbe1dd44f440f7d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c9e923b06153f6b31759be2a47ef7a7145cfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c9e923b06153f6b31759be2a47ef7a7145cfd6", "html_url": "https://github.com/rust-lang/rust/commit/e2c9e923b06153f6b31759be2a47ef7a7145cfd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c9e923b06153f6b31759be2a47ef7a7145cfd6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8974f89381cffd73c35b0cb91eb4e49a66f93d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8974f89381cffd73c35b0cb91eb4e49a66f93d5c", "html_url": "https://github.com/rust-lang/rust/commit/8974f89381cffd73c35b0cb91eb4e49a66f93d5c"}, {"sha": "131a37591dc28e4ef68be6b7fcf037e07fddf239", "url": "https://api.github.com/repos/rust-lang/rust/commits/131a37591dc28e4ef68be6b7fcf037e07fddf239", "html_url": "https://github.com/rust-lang/rust/commit/131a37591dc28e4ef68be6b7fcf037e07fddf239"}], "stats": {"total": 450, "additions": 225, "deletions": 225}, "files": [{"sha": "16849d11880a5f1c768264e9376607ecf7558bb2", "filename": "Configurations.md", "status": "modified", "additions": 225, "deletions": 225, "changes": 450, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9e923b06153f6b31759be2a47ef7a7145cfd6/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9e923b06153f6b31759be2a47ef7a7145cfd6/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=e2c9e923b06153f6b31759be2a47ef7a7145cfd6", "patch": "@@ -24,7 +24,7 @@ Use this option to prevent a huge array from being vertically formatted.\n \n **Note:** A value of `0` results in [`array_layout`](#array_layout) being applied regardless of a line's width.\n \n-#### `0`:\n+#### `0` (default):\n \n ```rust\n // Each element will be placed on its own line.\n@@ -57,7 +57,7 @@ Indent on arrays\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n let lorem = vec![\n@@ -107,7 +107,7 @@ Try to put attributes on the same line as fields\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `true`\n+#### `true` (default):\n \n ```rust\n struct Lorem {\n@@ -117,7 +117,7 @@ struct Lorem {\n }\n ```\n \n-#### `false`\n+#### `false`:\n \n ```rust\n struct Lorem {\n@@ -137,7 +137,7 @@ Try to put attributes on the same line as variants\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `true`\n+#### `true` (default):\n \n ```rust\n enum Lorem {\n@@ -147,7 +147,7 @@ enum Lorem {\n }\n ```\n \n-#### `false`\n+#### `false`:\n \n ```rust\n enum Lorem {\n@@ -167,7 +167,7 @@ Where to put a binary operator when a binary expression goes multiline.\n - **Default value**: `\"Front\"`\n - **Possible values**: `\"Front\"`, `\"Back\"`\n \n-#### `\"Front\"`\n+#### `\"Front\"` (default):\n \n ```rust\n let or = foo\n@@ -182,7 +182,7 @@ let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n     ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n ```\n \n-#### `\"Back\"`\n+#### `\"Back\"`:\n \n ```rust\n let or = foo ||\n@@ -204,7 +204,7 @@ Indentation of chain\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n let lorem = ipsum\n@@ -251,13 +251,13 @@ Split a chain with a single child if its length exceeds [`chain_one_line_max`](#\n - **Default value**: `false`\n - **Possible values**: `false`, `true`\n \n-#### `false`\n+#### `false` (default):\n \n ```rust\n let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n ```\n \n-#### `true`\n+#### `true`:\n \n ```rust\n let files = fs::read_dir(\"tests/coverage/source\")\n@@ -307,7 +307,7 @@ Combine control expressions with function calls.\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `true`\n+#### `true` (default):\n \n ```rust\n fn example() {\n@@ -351,7 +351,7 @@ fn example() {\n }\n ```\n \n-#### `false`\n+#### `false`:\n \n ```rust\n ```\n@@ -385,7 +385,7 @@ Replace strings of _ wildcards by a single .. in tuple patterns\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n@@ -404,7 +404,7 @@ Indent style for control flow statements\n - **Default value**: `\"Rfc\"`\n - **Possible values**: `\"Rfc\"`, `\"Legacy\"`\n \n-#### `\"Rfc\"`:\n+#### `\"Rfc\"` (default):\n \n ```rust\n if lorem_ipsum &&\n@@ -434,25 +434,25 @@ Brace style for control flow constructs\n - **Default value**: `\"AlwaysSameLine\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"AlwaysSameLine\"`, `\"ClosingNextLine\"`\n \n-#### `\"AlwaysNextLine\"`:\n+#### `\"AlwaysSameLine\"` (default):\n \n ```rust\n-if lorem\n-{\n+if lorem {\n     println!(\"ipsum!\");\n-}\n-else\n-{\n+} else {\n     println!(\"dolor!\");\n }\n ```\n \n-#### `\"AlwaysSameLine\"`:\n+#### `\"AlwaysNextLine\"`:\n \n ```rust\n-if lorem {\n+if lorem\n+{\n     println!(\"ipsum!\");\n-} else {\n+}\n+else\n+{\n     println!(\"dolor!\");\n }\n ```\n@@ -491,7 +491,7 @@ Argument density in functions\n - **Default value**: `\"Tall\"`\n - **Possible values**: `\"Compressed\"`, `\"CompressedIfEmpty\"`, `\"Tall\"`, `\"Vertical\"`\n \n-#### `\"Compressed\"`:\n+#### `\"Tall\"` (default):\n \n ```rust\n trait Lorem {\n@@ -502,20 +502,30 @@ trait Lorem {\n     }\n \n     fn lorem(\n-        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n-        adipiscing: Adipiscing, elit: Elit,\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n     );\n \n     fn lorem(\n-        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n-        adipiscing: Adipiscing, elit: Elit,\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n     ) {\n         // body\n     }\n }\n ```\n \n-#### `\"CompressedIfEmpty\"`:\n+#### `\"Compressed\"`:\n \n ```rust\n trait Lorem {\n@@ -531,20 +541,15 @@ trait Lorem {\n     );\n \n     fn lorem(\n-        ipsum: Ipsum,\n-        dolor: Dolor,\n-        sit: Sit,\n-        amet: Amet,\n-        consectetur: onsectetur,\n-        adipiscing: Adipiscing,\n-        elit: Elit,\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n+        adipiscing: Adipiscing, elit: Elit,\n     ) {\n         // body\n     }\n }\n ```\n \n-#### `\"Tall\"`:\n+#### `\"CompressedIfEmpty\"`:\n \n ```rust\n trait Lorem {\n@@ -555,13 +560,8 @@ trait Lorem {\n     }\n \n     fn lorem(\n-        ipsum: Ipsum,\n-        dolor: Dolor,\n-        sit: Sit,\n-        amet: Amet,\n-        consectetur: onsectetur,\n-        adipiscing: Adipiscing,\n-        elit: Elit,\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n+        adipiscing: Adipiscing, elit: Elit,\n     );\n \n     fn lorem(\n@@ -621,7 +621,7 @@ Layout of function arguments and tuple structs\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n fn lorem() {}\n@@ -666,7 +666,7 @@ If function argument parenthesis goes on a newline\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem(\n@@ -700,16 +700,14 @@ Brace style for functions\n - **Default value**: `\"SameLineWhere\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n \n-#### `\"AlwaysNextLine\"`:\n+#### `\"SameLineWhere\"` (default):\n \n ```rust\n-fn lorem()\n-{\n+fn lorem() {\n     // body\n }\n \n-fn lorem(ipsum: usize)\n-{\n+fn lorem(ipsum: usize) {\n     // body\n }\n \n@@ -721,25 +719,28 @@ where\n }\n ```\n \n-#### `\"PreferSameLine\"`:\n+#### `\"AlwaysNextLine\"`:\n \n ```rust\n-fn lorem() {\n+fn lorem()\n+{\n     // body\n }\n \n-fn lorem(ipsum: usize) {\n+fn lorem(ipsum: usize)\n+{\n     // body\n }\n \n fn lorem<T>(ipsum: T)\n where\n-    T: Add + Sub + Mul + Div, {\n+    T: Add + Sub + Mul + Div,\n+{\n     // body\n }\n ```\n \n-#### `\"SameLineWhere\"`:\n+#### `\"PreferSameLine\"`:\n \n ```rust\n fn lorem() {\n@@ -752,8 +753,7 @@ fn lorem(ipsum: usize) {\n \n fn lorem<T>(ipsum: T)\n where\n-    T: Add + Sub + Mul + Div,\n-{\n+    T: Add + Sub + Mul + Div, {\n     // body\n }\n ```\n@@ -765,7 +765,7 @@ Indentation for function calls, etc.\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n lorem(\n@@ -818,17 +818,17 @@ Put empty-body functions on a single line\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n-fn lorem() {\n-}\n+fn lorem() {}\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n-fn lorem() {}\n+fn lorem() {\n+}\n ```\n \n See also [`control_brace_style`](#control_brace_style).\n@@ -840,7 +840,7 @@ Location of return type in function declaration\n - **Default value**: `\"WithArgs\"`\n - **Possible values**: `\"WithArgs\"`, `\"WithWhereClause\"`\n \n-#### `\"WithArgs\"`:\n+#### `\"WithArgs\"` (default):\n \n ```rust\n fn lorem(ipsum: Ipsum,\n@@ -883,7 +883,7 @@ Put single-expression functions on a single line\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem() -> usize {\n@@ -918,18 +918,18 @@ Always print the abi for extern items\n \n **Note:** Non-\"C\" ABIs are always printed. If `false` then \"C\" is removed.\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n-extern {\n+extern \"C\" {\n     pub static lorem: c_int;\n }\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n-extern \"C\" {\n+extern {\n     pub static lorem: c_int;\n }\n ```\n@@ -952,7 +952,7 @@ Format string literals where necessary\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n@@ -975,7 +975,7 @@ Indentation of generics\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n fn lorem<\n@@ -1028,7 +1028,7 @@ Use tab characters for indentation, spaces for alignment\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem() -> usize {\n@@ -1053,17 +1053,17 @@ Put empty-body implementations on a single line\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n-impl Lorem {\n-}\n+impl Lorem {}\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n-impl Lorem {}\n+impl Lorem {\n+}\n ```\n \n See also [`item_brace_style`](#item_brace_style).\n@@ -1075,25 +1075,25 @@ Indent match arms instead of keeping them at the same indentation level as the m\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n match lorem {\n-Lorem::Ipsum => (),\n-Lorem::Dolor => (),\n-Lorem::Sit => (),\n-Lorem::Amet => (),\n+    Lorem::Ipsum => (),\n+    Lorem::Dolor => (),\n+    Lorem::Sit => (),\n+    Lorem::Amet => (),\n }\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n match lorem {\n-    Lorem::Ipsum => (),\n-    Lorem::Dolor => (),\n-    Lorem::Sit => (),\n-    Lorem::Amet => (),\n+Lorem::Ipsum => (),\n+Lorem::Dolor => (),\n+Lorem::Sit => (),\n+Lorem::Amet => (),\n }\n ```\n \n@@ -1106,7 +1106,15 @@ Indent style of imports\n - **Default Value**: `\"Visual\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`\n+#### `\"Visual\"` (default):\n+\n+```rust\n+use foo::{xxx,\n+          yyy,\n+          zzz};\n+```\n+\n+#### `\"Block\"`:\n \n ```rust\n use foo::{\n@@ -1116,14 +1124,6 @@ use foo::{\n };\n ```\n \n-#### `\"Visual\"`\n-\n-```rust\n-use foo::{xxx,\n-          yyy,\n-          zzz};\n-```\n-\n See also: [`imports_layout`](#imports_layout).\n \n ## `imports_layout`\n@@ -1133,7 +1133,7 @@ Item layout inside a imports block\n - **Default value**: \"Mixed\"\n - **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n \n-#### `\"Mixed\"`\n+#### `\"Mixed\"` (default):\n \n ```rust\n use foo::{xxx, yyy, zzz};\n@@ -1142,7 +1142,7 @@ use foo::{aaa, bbb, ccc,\n           ddd, eee, fff};\n ```\n \n-#### `\"Horizontal\"`\n+#### `\"Horizontal\"`:\n \n **Note**: This option forces to put everything on one line and may exceeds `max_width`.\n \n@@ -1160,8 +1160,8 @@ use foo::{xxx, yyy, zzz};\n use foo::{aaa,\n           bbb,\n           ccc,\n-          ddd, \n-          eee, \n+          ddd,\n+          eee,\n           fff};\n ```\n \n@@ -1187,11 +1187,10 @@ Brace style for structs and enums\n - **Default value**: `\"SameLineWhere\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n \n-#### `\"AlwaysNextLine\"`:\n+#### `\"SameLineWhere\"` (default):\n \n ```rust\n-struct Lorem\n-{\n+struct Lorem {\n     ipsum: bool,\n }\n \n@@ -1202,29 +1201,30 @@ struct Dolor<T>\n }\n ```\n \n-#### `\"PreferSameLine\"`:\n+#### `\"AlwaysNextLine\"`:\n \n ```rust\n-struct Lorem {\n+struct Lorem\n+{\n     ipsum: bool,\n }\n \n struct Dolor<T>\n-    where T: Eq {\n+    where T: Eq\n+{\n     sit: T,\n }\n ```\n \n-#### `\"SameLineWhere\"`:\n+#### `\"PreferSameLine\"`:\n \n ```rust\n struct Lorem {\n     ipsum: bool,\n }\n \n struct Dolor<T>\n-    where T: Eq\n-{\n+    where T: Eq {\n     sit: T,\n }\n ```\n@@ -1236,7 +1236,7 @@ Put a trailing comma after a block based match arm (non-block arms are not affec\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n match lorem {\n@@ -1267,7 +1267,7 @@ Put a match sub-patterns' separator (`|`) in front or back.\n - **Default value**: `\"Back\"`\n - **Possible values**: `\"Back\"`, `\"Front\"`\n \n-#### `\"Back\"`:\n+#### `\"Back\"` (default):\n \n ```rust\n match m {\n@@ -1309,7 +1309,7 @@ Merge multiple derives into a single one.\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `true`:\n+#### `true` (default):\n \n ```rust\n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n@@ -1332,6 +1332,15 @@ Force multiline closure bodies to be wrapped in a block\n - **Default value**: `false`\n - **Possible values**: `false`, `true`\n \n+#### `false` (default):\n+\n+```rust\n+result.and_then(|maybe_value| match maybe_value {\n+    None => ...,\n+    Some(value) => ...,\n+})\n+```\n+\n #### `true`:\n \n ```rust\n@@ -1344,23 +1353,14 @@ result.and_then(|maybe_value| {\n })\n ```\n \n-#### `false`:\n-\n-```rust\n-result.and_then(|maybe_value| match maybe_value {\n-    None => ...,\n-    Some(value) => ...,\n-})\n-```\n-\n ## `multiline_match_arm_forces_block`\n \n Force multiline match arm bodies to be wrapped in a block\n \n - **Default value**: `false`\n - **Possible values**: `false`, `true`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n match lorem {\n@@ -1398,7 +1398,7 @@ Convert /* */ comments to // comments where possible\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n // Lorem ipsum:\n@@ -1425,7 +1425,7 @@ Reorder lists of names in import statements alphabetically\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n use super::{lorem, ipsum, dolor, sit};\n@@ -1446,7 +1446,7 @@ Reorder import statements alphabetically\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n use lorem;\n@@ -1475,7 +1475,7 @@ Reorder import statements in group\n \n **Note:** This option takes effect only when [`reorder_imports`](#reorder_imports) is set to `true`.\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n use std::mem;\n@@ -1540,18 +1540,18 @@ Leave a space after the colon in a trait or lifetime bound\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n-fn lorem<T:Eq>(t: T) {\n+fn lorem<T: Eq>(t: T) {\n     // body\n }\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n-fn lorem<T: Eq>(t: T) {\n+fn lorem<T:Eq>(t: T) {\n     // body\n }\n ```\n@@ -1565,7 +1565,7 @@ The maximum diff of width between struct fields to be aligned with each other.\n - **Default value** : 0\n - **Possible values**: any positive integer\n \n-#### `0`:\n+#### `0` (default):\n \n ```rust\n struct Foo {\n@@ -1592,21 +1592,21 @@ Leave a space after the colon in a struct literal field\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n let lorem = Lorem {\n-    ipsum:dolor,\n-    sit:amet,\n+    ipsum: dolor,\n+    sit: amet,\n };\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n+    ipsum:dolor,\n+    sit:amet,\n };\n ```\n \n@@ -1619,19 +1619,19 @@ Leave a space after the colon in a type annotation\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n-fn lorem<T: Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n+fn lorem<T: Eq>(t: T) {\n+    let ipsum: Dolor = sit;\n }\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n+fn lorem<T: Eq>(t:T) {\n+    let ipsum:Dolor = sit;\n }\n ```\n \n@@ -1644,7 +1644,7 @@ Leave a space before the colon in a trait or lifetime bound\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n@@ -1669,7 +1669,7 @@ Leave a space before the colon in a struct literal field\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let lorem = Lorem {\n@@ -1696,7 +1696,7 @@ Leave a space before the colon in a type annotation\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n@@ -1721,7 +1721,7 @@ Put spaces around the .. and ... range operators\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let lorem = 0..10;\n@@ -1740,7 +1740,7 @@ Put spaces within non-empty generic arguments\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n@@ -1765,7 +1765,7 @@ Put spaces within non-empty parentheses\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n@@ -1790,7 +1790,7 @@ Put spaces within non-empty square brackets\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let lorem: [usize; 2] = [ipsum, dolor];\n@@ -1811,6 +1811,12 @@ Multiline style on literal structs\n - **Default value**: `\"PreferSingle\"`\n - **Possible values**: `\"ForceMulti\"`, `\"PreferSingle\"`\n \n+#### `\"PreferSingle\"` (default):\n+\n+```rust\n+let lorem = Lorem { ipsum: dolor, sit: amet };\n+```\n+\n #### `\"ForceMulti\"`:\n \n ```rust\n@@ -1820,12 +1826,6 @@ let lorem = Lorem {\n };\n ```\n \n-#### `\"PreferSingle\"`:\n-\n-```rust\n-let lorem = Lorem { ipsum: dolor, sit: amet };\n-```\n-\n See also: [`struct_lit_style`](#struct_lit_style), [`struct_lit_width`](#struct_lit_width).\n \n ## `struct_lit_style`\n@@ -1835,7 +1835,7 @@ Style of struct definition\n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Block\"` (default):\n \n ```rust\n let lorem = Lorem {\n@@ -1909,25 +1909,25 @@ Number of spaces per tab\n - **Default value**: `4`\n - **Possible values**: any positive integer\n \n-#### `2`:\n+#### `4` (default):\n \n ```rust\n fn lorem() {\n-  let ipsum = dolor();\n-  let sit = vec![\n-    \"amet consectetur adipiscing elit.\"\n-  ];\n+    let ipsum = dolor();\n+    let sit = vec![\n+        \"amet consectetur adipiscing elit.\"\n+    ];\n }\n ```\n \n-#### `4`:\n+#### `2`:\n \n ```rust\n fn lorem() {\n-    let ipsum = dolor();\n-    let sit = vec![\n-        \"amet consectetur adipiscing elit.\"\n-    ];\n+  let ipsum = dolor();\n+  let sit = vec![\n+    \"amet consectetur adipiscing elit.\"\n+  ];\n }\n ```\n \n@@ -1940,7 +1940,7 @@ Retain some formatting characteristics from the source code\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n lorem\n@@ -1970,10 +1970,10 @@ How to handle trailing commas for lists\n - **Default value**: `\"Vertical\"`\n - **Possible values**: `\"Always\"`, `\"Never\"`, `\"Vertical\"`\n \n-#### `\"Always\"`:\n+#### `\"Vertical\"` (default):\n \n ```rust\n-let Lorem { ipsum, dolor, sit, } = amet;\n+let Lorem { ipsum, dolor, sit } = amet;\n let Lorem {\n     ipsum,\n     dolor,\n@@ -1984,21 +1984,21 @@ let Lorem {\n } = elit;\n ```\n \n-#### `\"Never\"`:\n+#### `\"Always\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n+let Lorem { ipsum, dolor, sit, } = amet;\n let Lorem {\n     ipsum,\n     dolor,\n     sit,\n     amet,\n     consectetur,\n-    adipiscing\n+    adipiscing,\n } = elit;\n ```\n \n-#### `\"Vertical\"`:\n+#### `\"Never\"`:\n \n ```rust\n let Lorem { ipsum, dolor, sit } = amet;\n@@ -2008,7 +2008,7 @@ let Lorem {\n     sit,\n     amet,\n     consectetur,\n-    adipiscing,\n+    adipiscing\n } = elit;\n ```\n \n@@ -2021,7 +2021,7 @@ Add trailing semicolon after break, continue and return\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `true`:\n+#### `true` (default):\n ```rust\n fn foo() -> usize {\n     return 0;\n@@ -2042,18 +2042,18 @@ Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n - **Default value**: `\"Wide\"`\n - **Possible values**: `\"Compressed\"`, `\"Wide\"`\n \n-#### `\"Compressed\"`:\n+#### `\"Wide\"` (default):\n \n ```rust\n-fn lorem<Ipsum: Dolor+Sit=Amet>() {\n+fn lorem<Ipsum: Dolor + Sit = Amet>() {\n \t// body\n }\n ```\n \n-#### `\"Wide\"`:\n+#### `\"Compressed\"`:\n \n ```rust\n-fn lorem<Ipsum: Dolor + Sit = Amet>() {\n+fn lorem<Ipsum: Dolor+Sit=Amet>() {\n \t// body\n }\n ```\n@@ -2065,7 +2065,7 @@ Replace uses of the try! macro by the ? shorthand\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n let lorem = try!(ipsum.map(|dolor|dolor.sit()));\n@@ -2079,36 +2079,36 @@ let lorem = ipsum.map(|dolor| dolor.sit())?;\n \n ## `where_density`\n \n-Density of a where clause. \n+Density of a where clause.\n \n - **Default value**: `\"CompressedIfEmpty\"`\n - **Possible values**: `\"Compressed\"`, `\"CompressedIfEmpty\"`, `\"Tall\"`, `\"Vertical\"`\n \n-#### `\"Compressed\"`:\n+#### `\"CompressedIfEmpty\"` (default):\n \n ```rust\n trait Lorem {\n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n     where Dolor: Eq;\n \n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-    where Dolor: Eq {\n+    where\n+        Dolor: Eq,\n+    {\n         // body\n     }\n }\n ```\n \n-#### `\"CompressedIfEmpty\"`:\n+#### `\"Compressed\"`:\n \n ```rust\n trait Lorem {\n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n     where Dolor: Eq;\n \n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-    where\n-        Dolor: Eq,\n-    {\n+    where Dolor: Eq {\n         // body\n     }\n }\n@@ -2159,23 +2159,27 @@ Element layout inside a where clause\n - **Default value**: `\"Vertical\"`\n - **Possible values**: `\"Horizontal\"`, `\"HorizontalVertical\"`, `\"Mixed\"`, `\"Vertical\"`\n \n-#### `\"Horizontal\"`:\n+#### `\"Vertical\"` (default):\n \n ```rust\n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur, Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing,\n+          Amet: AmetConsecteturAdipiscingElit\n {\n     // body\n }\n ```\n \n-#### `\"HorizontalVertical\"`:\n+#### `\"Horizontal\"`:\n \n ```rust\n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n@@ -2185,16 +2189,13 @@ fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing,\n-          Amet: AmetConsecteturAdipiscingElit\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur, Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n {\n     // body\n }\n ```\n \n-#### `\"Mixed\"`:\n+#### `\"HorizontalVertical\"`:\n \n ```rust\n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n@@ -2204,28 +2205,27 @@ fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+    where Ipsum: IpsumDolorSitAmet,\n+          Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing,\n+          Amet: AmetConsecteturAdipiscingElit\n {\n     // body\n }\n ```\n \n-#### `\"Vertical\"`:\n+#### `\"Mixed\"`:\n \n ```rust\n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing,\n-          Amet: AmetConsecteturAdipiscingElit\n+    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur,\n+          Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n {\n     // body\n }\n@@ -2242,27 +2242,27 @@ Indentation style of a where predicate\n - **Default value**: `\"Visual\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n \n-#### `\"Block\"`:\n+#### `\"Visual\"` (default):\n \n ```rust\n fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n     where Ipsum: Eq,\n-        Dolor: Eq,\n-        Sit: Eq,\n-        Amet: Eq\n+          Dolor: Eq,\n+          Sit: Eq,\n+          Amet: Eq\n {\n     // body\n }\n ```\n \n-#### `\"Visual\"`:\n+#### `\"Block\"`:\n \n ```rust\n fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n     where Ipsum: Eq,\n-          Dolor: Eq,\n-          Sit: Eq,\n-          Amet: Eq\n+        Dolor: Eq,\n+        Sit: Eq,\n+        Amet: Eq\n {\n     // body\n }\n@@ -2279,7 +2279,7 @@ Overall strategy for where clauses\n - **Default value**: `\"Rfc\"`\n - **Possible values**: `\"Rfc\"`, `\"Legacy\"`\n \n-#### `\"Rfc\"`:\n+#### `\"Rfc\"` (default):\n \n ```rust\n fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n@@ -2315,7 +2315,7 @@ Break comments to fit on the line\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `false` (default):\n \n ```rust\n // Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n@@ -2338,23 +2338,23 @@ Wrap the body of arms in blocks when it does not fit on the same line with the p\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-#### `false`:\n+#### `true` (default):\n \n ```rust\n match lorem {\n-    true =>\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n+    true => {\n+        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+    }\n     false => println!(\"{}\", sit),\n }\n ```\n \n-#### `true`:\n+#### `false`:\n \n ```rust\n match lorem {\n-    true => {\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n-    }\n+    true =>\n+        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n     false => println!(\"{}\", sit),\n }\n ```"}]}