{"sha": "4e5df80c03f49e83dc0413df0813763f8d916379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNWRmODBjMDNmNDllODNkYzA0MTNkZjA4MTM3NjNmOGQ5MTYzNzk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-27T01:28:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-27T01:28:47Z"}, "message": "Merge pull request #1588 from topecongiro/nesting-macro\n\nAllow macro to be nested like function call", "tree": {"sha": "a494162664b35c7e2ad3bb281a32c65cc66c33d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a494162664b35c7e2ad3bb281a32c65cc66c33d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5df80c03f49e83dc0413df0813763f8d916379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5df80c03f49e83dc0413df0813763f8d916379", "html_url": "https://github.com/rust-lang/rust/commit/4e5df80c03f49e83dc0413df0813763f8d916379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5df80c03f49e83dc0413df0813763f8d916379/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ca13b51c6f12383e8a7c707530218851680f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ca13b51c6f12383e8a7c707530218851680f82", "html_url": "https://github.com/rust-lang/rust/commit/d0ca13b51c6f12383e8a7c707530218851680f82"}, {"sha": "554605d47cc2546f32871de5f41ef4008f5d5ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/554605d47cc2546f32871de5f41ef4008f5d5ecf", "html_url": "https://github.com/rust-lang/rust/commit/554605d47cc2546f32871de5f41ef4008f5d5ecf"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "1c66306022db10f142e1a28194de47aa24b0a632", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -168,10 +168,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n             .into_iter()\n             .chain(::std::iter::repeat(other_child_shape).take(subexpr_list.len() - 1));\n     let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n-    let mut rewrites = try_opt!(iter.map(|(e, shape)| {\n-                                             rewrite_chain_subexpr(e, total_span, context, shape)\n-                                         })\n-                                    .collect::<Option<Vec<_>>>());\n+    let mut rewrites =\n+        try_opt!(iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n+                     .collect::<Option<Vec<_>>>());\n \n     // Total of all items excluding the last.\n     let last_non_try_index = rewrites.len() - (1 + trailing_try_num);"}, {"sha": "21a872489d85c51e04ab9814f2a52a5c2a5aabb8", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -1678,20 +1678,22 @@ fn rewrite_call_args(context: &RewriteContext,\n                      one_line_width: usize,\n                      force_trailing_comma: bool)\n                      -> Option<(bool, String)> {\n+    let mut item_context = context.clone();\n+    item_context.inside_macro = false;\n     let items = itemize_list(context.codemap,\n                              args.iter(),\n                              \")\",\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n-                             |item| item.rewrite(context, shape),\n+                             |item| item.rewrite(&item_context, shape),\n                              span.lo,\n                              span.hi);\n     let mut item_vec: Vec<_> = items.collect();\n \n     // Try letting the last argument overflow to the next line with block\n     // indentation. If its first line fits on one line with the other arguments,\n     // we format the function arguments horizontally.\n-    let overflow_last = can_be_overflowed(context, args);\n+    let overflow_last = can_be_overflowed(&item_context, args);\n \n     let mut orig_last = None;\n     let mut placeholder = None;\n@@ -1709,7 +1711,7 @@ fn rewrite_call_args(context: &RewriteContext,\n         } else {\n             shape.block()\n         };\n-        let rewrite = args.last().unwrap().rewrite(context, arg_shape);\n+        let rewrite = args.last().unwrap().rewrite(&item_context, arg_shape);\n         swap(&mut item_vec[args.len() - 1].item, &mut orig_last);\n \n         if let Some(rewrite) = rewrite {\n@@ -1770,27 +1772,25 @@ fn rewrite_call_args(context: &RewriteContext,\n         acc + item.item.as_ref().map_or(0, |s| 2 + first_line_width(s))\n     }) <= one_line_budget + 2;\n \n-    match write_list(&item_vec, &fmt) {\n+    let result = write_list(&item_vec, &fmt);\n+    let last_char_is_not_comma = result\n+        .as_ref()\n+        .map_or(false, |r| r.chars().last().unwrap_or(' ') != ',');\n+    match result {\n         // If arguments do not fit in a single line and do not contain newline,\n         // try to put it on the next line. Try this only when we are in block mode\n         // and not rewriting macro.\n         Some(ref s) if context.config.fn_call_style() == IndentStyle::Block &&\n                        !context.inside_macro &&\n-                       ((!can_be_overflowed(context, args) && args.len() == 1 &&\n+                       ((!can_be_overflowed(context, args) && last_char_is_not_comma &&\n                          s.contains('\\n')) ||\n                         first_line_width(s) > one_line_budget) => {\n             fmt.trailing_separator = SeparatorTactic::Vertical;\n             fmt.tactic = DefinitiveListTactic::Vertical;\n             write_list(&item_vec, &fmt).map(|rw| (false, rw))\n         }\n         rewrite @ _ => {\n-            rewrite.map(|rw| {\n-                            (extendable &&\n-                             rw.chars()\n-                                 .last()\n-                                 .map_or(true, |c| force_trailing_comma || c != ','),\n-                             rw)\n-                        })\n+            rewrite.map(|rw| (extendable && (last_char_is_not_comma || force_trailing_comma), rw))\n         }\n     }\n }\n@@ -1807,6 +1807,7 @@ fn can_be_overflowed(context: &RewriteContext, args: &[ptr::P<ast::Expr>]) -> bo\n             context.config.fn_call_style() == IndentStyle::Visual && args.len() > 1\n         }\n         Some(&ast::ExprKind::Call(..)) |\n+        Some(&ast::ExprKind::Mac(..)) |\n         Some(&ast::ExprKind::Struct(..)) => {\n             context.config.fn_call_style() == IndentStyle::Block && args.len() == 1\n         }\n@@ -1822,6 +1823,7 @@ fn is_extendable(args: &[ptr::P<ast::Expr>]) -> bool {\n             ast::ExprKind::Call(..) |\n             ast::ExprKind::Closure(..) |\n             ast::ExprKind::Match(..) |\n+            ast::ExprKind::Mac(..) |\n             ast::ExprKind::Struct(..) |\n             ast::ExprKind::Tup(..) => true,\n             _ => false,"}, {"sha": "460694b7b097ee5e24c3b67ed09f7e100730a7b7", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -1795,9 +1795,7 @@ fn rewrite_args(context: &RewriteContext,\n                 -> Option<String> {\n     let mut arg_item_strs =\n         try_opt!(args.iter()\n-                     .map(|arg| {\n-                              arg.rewrite(&context, Shape::legacy(multi_line_budget, arg_indent))\n-                          })\n+                     .map(|arg| arg.rewrite(&context, Shape::legacy(multi_line_budget, arg_indent)))\n                      .collect::<Option<Vec<_>>>());\n \n     // Account for sugary self."}, {"sha": "2068216d18e7e9bd6eee3c1ef1b5fd06cbb70e38", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -16,6 +16,10 @@ fn main() {\n                 .client_credentials(&self.config.auth.oauth2.id, &self.config.auth.oauth2.secret)?;\n         }\n     }\n+\n+    // nesting macro and function call\n+    try!(foo(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx));\n+    try!(foo(try!(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)));\n }\n \n // #1521"}, {"sha": "d567008c2ade299395a82b4318fbb5a09fb87c56", "filename": "tests/target/closure-block-inside-macro.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure-block-inside-macro.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -1,13 +1,11 @@\n // rustfmt-fn_call_style: Block\n \n // #1547\n-fuzz_target!(|data: &[u8]| {\n-    if let Some(first) = data.first() {\n-        let index = *first as usize;\n-        if index >= ENCODINGS.len() {\n-            return;\n-        }\n-        let encoding = ENCODINGS[index];\n-        dispatch_test(encoding, &data[1..]);\n+fuzz_target!(|data: &[u8]| if let Some(first) = data.first() {\n+    let index = *first as usize;\n+    if index >= ENCODINGS.len() {\n+        return;\n     }\n+    let encoding = ENCODINGS[index];\n+    dispatch_test(encoding, &data[1..]);\n });"}, {"sha": "3da4f648527cc62965bb31e5bd9b66134da6d920", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5df80c03f49e83dc0413df0813763f8d916379/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=4e5df80c03f49e83dc0413df0813763f8d916379", "patch": "@@ -32,6 +32,16 @@ fn main() {\n             )?;\n         }\n     }\n+\n+    // nesting macro and function call\n+    try!(foo(\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+    ));\n+    try!(foo(try!(\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    )));\n }\n \n // #1521"}]}