{"sha": "7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMDliM2NkOGJlOTI4YTBlYzllMzIxOWQ5NTYyZGRlYjU0ZmY5OTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-07T16:56:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T09:23:50Z"}, "message": "Simplify type aliases.", "tree": {"sha": "c02e310c88ada3ab7e1b0eb852af915ff58b1f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02e310c88ada3ab7e1b0eb852af915ff58b1f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "html_url": "https://github.com/rust-lang/rust/commit/7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7309b3cd8be928a0ec9e3219d9562ddeb54ff994/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d84f4fb169d55b0423e4e379828700ec0214400", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d84f4fb169d55b0423e4e379828700ec0214400", "html_url": "https://github.com/rust-lang/rust/commit/7d84f4fb169d55b0423e4e379828700ec0214400"}], "stats": {"total": 57, "additions": 21, "deletions": 36}, "files": [{"sha": "17639545d12a147eac207b57620046ba5176a090", "filename": "src/librustc/ty/query/caches.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7309b3cd8be928a0ec9e3219d9562ddeb54ff994/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7309b3cd8be928a0ec9e3219d9562ddeb54ff994/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs?ref=7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "patch": "@@ -1,5 +1,5 @@\n use crate::dep_graph::DepNodeIndex;\n-use crate::ty::query::plumbing::{QueryLookupImpl, QueryStateImpl, QueryStateShardImpl};\n+use crate::ty::query::plumbing::{QueryLookup, QueryStateImpl, QueryStateShard};\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -28,11 +28,10 @@ pub(crate) trait QueryCache<K, V>: Default {\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        GetCache: for<'a> Fn(\n-            &'a mut QueryStateShardImpl<'tcx, K, Self::Sharded>,\n-        ) -> &'a mut Self::Sharded,\n+        GetCache:\n+            for<'a> Fn(&'a mut QueryStateShard<'tcx, K, Self::Sharded>) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, Self::Sharded>>) -> R;\n+        OnMiss: FnOnce(K, QueryLookup<'tcx, K, Self::Sharded>) -> R;\n \n     fn complete(\n         &self,\n@@ -73,11 +72,10 @@ impl<K: Eq + Hash, V: Clone> QueryCache<K, V> for DefaultCache {\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        GetCache: for<'a> Fn(\n-            &'a mut QueryStateShardImpl<'tcx, K, Self::Sharded>,\n-        ) -> &'a mut Self::Sharded,\n+        GetCache:\n+            for<'a> Fn(&'a mut QueryStateShard<'tcx, K, Self::Sharded>) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, Self::Sharded>>) -> R,\n+        OnMiss: FnOnce(K, QueryLookup<'tcx, K, Self::Sharded>) -> R,\n     {\n         let mut lookup = state.get_lookup(&key);\n         let lock = &mut *lookup.lock;"}, {"sha": "467b1a7e4a1770d26da0e3974d5c9a53d719401e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7309b3cd8be928a0ec9e3219d9562ddeb54ff994/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7309b3cd8be928a0ec9e3219d9562ddeb54ff994/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=7309b3cd8be928a0ec9e3219d9562ddeb54ff994", "patch": "@@ -29,32 +29,23 @@ use std::ptr;\n #[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n-pub(crate) type QueryStateShard<'tcx, Q> = QueryStateShardImpl<\n-    'tcx,\n-    <Q as QueryConfig<'tcx>>::Key,\n-    <<Q as QueryAccessors<'tcx>>::Cache as QueryCache<\n-        <Q as QueryConfig<'tcx>>::Key,\n-        <Q as QueryConfig<'tcx>>::Value,\n-    >>::Sharded,\n->;\n-\n-pub(crate) struct QueryStateShardImpl<'tcx, K, C> {\n+pub(crate) struct QueryStateShard<'tcx, K, C> {\n     pub(super) cache: C,\n     pub(super) active: FxHashMap<K, QueryResult<'tcx>>,\n \n     /// Used to generate unique ids for active jobs.\n     pub(super) jobs: u32,\n }\n \n-impl<'tcx, K, C> QueryStateShardImpl<'tcx, K, C> {\n+impl<'tcx, K, C> QueryStateShard<'tcx, K, C> {\n     fn get_cache(&mut self) -> &mut C {\n         &mut self.cache\n     }\n }\n \n-impl<'tcx, K, C: Default> Default for QueryStateShardImpl<'tcx, K, C> {\n-    fn default() -> QueryStateShardImpl<'tcx, K, C> {\n-        QueryStateShardImpl { cache: Default::default(), active: Default::default(), jobs: 0 }\n+impl<'tcx, K, C: Default> Default for QueryStateShard<'tcx, K, C> {\n+    fn default() -> QueryStateShard<'tcx, K, C> {\n+        QueryStateShard { cache: Default::default(), active: Default::default(), jobs: 0 }\n     }\n }\n \n@@ -67,16 +58,13 @@ pub(crate) type QueryState<'tcx, Q> = QueryStateImpl<\n \n pub(crate) struct QueryStateImpl<'tcx, K, V, C: QueryCache<K, V>> {\n     pub(super) cache: C,\n-    pub(super) shards: Sharded<QueryStateShardImpl<'tcx, K, C::Sharded>>,\n+    pub(super) shards: Sharded<QueryStateShard<'tcx, K, C::Sharded>>,\n     #[cfg(debug_assertions)]\n     pub(super) cache_hits: AtomicUsize,\n }\n \n impl<'tcx, K, V, C: QueryCache<K, V>> QueryStateImpl<'tcx, K, V, C> {\n-    pub(super) fn get_lookup<K2: Hash>(\n-        &'tcx self,\n-        key: &K2,\n-    ) -> QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, C::Sharded>> {\n+    pub(super) fn get_lookup<K2: Hash>(&'tcx self, key: &K2) -> QueryLookup<'tcx, K, C::Sharded> {\n         // We compute the key's hash once and then use it for both the\n         // shard lookup and the hashmap lookup. This relies on the fact\n         // that both of them use `FxHasher`.\n@@ -86,7 +74,7 @@ impl<'tcx, K, V, C: QueryCache<K, V>> QueryStateImpl<'tcx, K, V, C> {\n \n         let shard = self.shards.get_shard_index_by_hash(key_hash);\n         let lock = self.shards.get_shard_by_index(shard).lock();\n-        QueryLookupImpl { key_hash, shard, lock }\n+        QueryLookup { key_hash, shard, lock }\n     }\n }\n \n@@ -154,11 +142,10 @@ impl<'tcx, K, V, C: QueryCache<K, V>> Default for QueryStateImpl<'tcx, K, V, C>\n }\n \n /// Values used when checking a query cache which can be reused on a cache-miss to execute the query.\n-pub(crate) type QueryLookup<'tcx, Q> = QueryLookupImpl<'tcx, QueryStateShard<'tcx, Q>>;\n-pub(crate) struct QueryLookupImpl<'tcx, QSS> {\n+pub(crate) struct QueryLookup<'tcx, K, C> {\n     pub(super) key_hash: u64,\n     pub(super) shard: usize,\n-    pub(super) lock: LockGuard<'tcx, QSS>,\n+    pub(super) lock: LockGuard<'tcx, QueryStateShard<'tcx, K, C>>,\n }\n \n /// A type representing the responsibility to execute the job in the `job` field.\n@@ -198,7 +185,7 @@ where\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n         key: &K,\n-        mut lookup: QueryLookup<'tcx, Q>,\n+        mut lookup: QueryLookup<'tcx, K, C::Sharded>,\n     ) -> TryGetJob<'tcx, Q>\n     where\n         K: Eq + Hash + Clone + Debug,\n@@ -502,11 +489,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         C: QueryCache<K, V>,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, C::Sharded>>) -> R,\n+        OnMiss: FnOnce(K, QueryLookup<'tcx, K, C::Sharded>) -> R,\n     {\n         state.cache.lookup(\n             state,\n-            QueryStateShardImpl::<K, C::Sharded>::get_cache,\n+            QueryStateShard::<K, C::Sharded>::get_cache,\n             key,\n             |value, index| {\n                 if unlikely!(self.prof.enabled()) {\n@@ -546,7 +533,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         span: Span,\n         key: Q::Key,\n-        lookup: QueryLookup<'tcx, Q>,\n+        lookup: QueryLookup<'tcx, Q::Key, <Q::Cache as QueryCache<Q::Key, Q::Value>>::Sharded>,\n     ) -> Q::Value {\n         let job = match JobOwnerImpl::try_start::<Q>(self, span, &key, lookup) {\n             TryGetJob::NotYetStarted(job) => job,"}]}