{"sha": "36c55b20a89d45f394fceb5e83dd3a032e37810a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YzU1YjIwYTg5ZDQ1ZjM5NGZjZWI1ZTgzZGQzYTAzMmUzNzgxMGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-29T22:45:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-29T22:45:18Z"}, "message": "Add support in lexer for utf8 identifiers. No NFKC logic in char yet.", "tree": {"sha": "c57100f90f2df540829f1e6ea0520f29ef4b07ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57100f90f2df540829f1e6ea0520f29ef4b07ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36c55b20a89d45f394fceb5e83dd3a032e37810a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36c55b20a89d45f394fceb5e83dd3a032e37810a", "html_url": "https://github.com/rust-lang/rust/commit/36c55b20a89d45f394fceb5e83dd3a032e37810a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36c55b20a89d45f394fceb5e83dd3a032e37810a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd0a3be0cde0278b5927df8f670a25561eaa597", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd0a3be0cde0278b5927df8f670a25561eaa597", "html_url": "https://github.com/rust-lang/rust/commit/5fd0a3be0cde0278b5927df8f670a25561eaa597"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "c746015e78e58502b15f27b2f017f4cbc8791fc8", "filename": "doc/rust.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36c55b20a89d45f394fceb5e83dd3a032e37810a/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/36c55b20a89d45f394fceb5e83dd3a032e37810a/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=36c55b20a89d45f394fceb5e83dd3a032e37810a", "patch": "@@ -595,9 +595,10 @@ otherwise defined as keywords or reserved\n tokens. @xref{Ref.Lex.Key}. @xref{Ref.Lex.Res}.\n \n That is: an identifier starts with any character having derived property\n-@code{XID_Start} and continues with zero or more characters having derived\n-property @code{XID_Continue}; and such an identifier is NFKC-normalized during\n-lexing, such that all subsequent comparison of identifiers is performed on the\n+@code{XID_Start}, or the character U+005F (underscore, @code{_}), and\n+continues with zero or more characters having derived property\n+@code{XID_Continue}. An identifier is NFKC-normalized during lexing, such\n+that all subsequent comparison of identifiers is performed on the\n NFKC-normalized forms.\n \n @emph{TODO: define relationship between Unicode and Rust versions}."}, {"sha": "bee3d7783cbf5dfa1182aa9a7b47d13613096153", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=36c55b20a89d45f394fceb5e83dd3a032e37810a", "patch": "@@ -309,14 +309,16 @@ fn next_token(rdr: reader) -> {tok: token::token, chpos: uint, bpos: uint} {\n fn next_token_inner(rdr: reader) -> token::token {\n     let accum_str = \"\";\n     let c = rdr.curr();\n-    if is_alpha(c) || c == '_' {\n-        while is_alnum(c) || c == '_' {\n+    if char::is_XID_start(c) || c == '_' {\n+        while char::is_XID_continue(c) {\n             str::push_char(accum_str, c);\n             rdr.bump();\n             c = rdr.curr();\n         }\n         if str::eq(accum_str, \"_\") { ret token::UNDERSCORE; }\n         let is_mod_name = c == ':' && rdr.next() == ':';\n+\n+        // FIXME: perform NFKC normalization here.\n         ret token::IDENT(interner::intern::<str>(*rdr.get_interner(),\n                                                  accum_str), is_mod_name);\n     }"}, {"sha": "0bdda6f0afbd43d0edc05a6187e4536311ea74ee", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=36c55b20a89d45f394fceb5e83dd3a032e37810a", "patch": "@@ -37,6 +37,12 @@ Utilities for manipulating the char type\n     Cn  Unassigned  a reserved unassigned code point or a noncharacter\n */\n \n+export is_alphabetic,\n+       is_XID_start, is_XID_continue,\n+       is_lowercase, is_uppercase,\n+       is_whitespace, is_alphanumeric,\n+       to_digit, maybe_digit, cmp;\n+\n import is_alphabetic = unicode::derived_property::Alphabetic;\n import is_XID_start = unicode::derived_property::XID_Start;\n import is_XID_continue = unicode::derived_property::XID_Continue;"}, {"sha": "e017673602a238c5a733793f8ecef08a10bc6658", "filename": "src/test/run-pass/utf8_idents.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c55b20a89d45f394fceb5e83dd3a032e37810a/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=36c55b20a89d45f394fceb5e83dd3a032e37810a", "patch": "@@ -0,0 +1,34 @@\n+fn main() {\n+    let \u03a0 = 3.14;\n+    let \u0932\u0902\u091a = \u03a0 * \u03a0 + 1.54;\n+    assert \u0932\u0902\u091a - 1.54 == \u03a0 * \u03a0;\n+    assert \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8() == 0;\n+}\n+\n+fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8() -> int {\n+\n+    // Lunch in several languages.\n+\n+    let \u30e9\u30f3\u30c1 = 10;\n+    let \u5348\u9910 = 10;\n+\n+    let \u05d0\u05e8\u05d5\u05d7\u05ea_\u05e6\u05d4\u05e8\u05d9\u05d9 = 10;\n+    let \u063a\u062f\u0627\u0621 = 10;\n+    let \u056c\u0561\u0576\u0579 = 10;\n+    let \u043e\u0431\u0435\u0434 = 10;\n+    let \u0430\u0431\u0435\u0434 = 10;\n+    let \u03bc\u03b5\u03c3\u03b7\u03bc\u03b5\u03c1\u03b9\u03b1\u03bd\u03cc = 10;\n+    let h\u00e1degismatur = 10;\n+    let \u0440\u0443\u0447\u0435\u043a = 10;\n+\n+    let \u0103n_tr\u01b0a = 10;\n+    let \u0e2d\u0e32\u0e2b\u0e32\u0e23\u0e01\u0e25\u0e32\u0e07\u0e27\u0e31\u0e19 = 10;\n+\n+    // Lunchy arithmetic, mm.\n+\n+    assert h\u00e1degismatur * \u0440\u0443\u0447\u0435\u043a * \u043e\u0431\u0435\u0434 == 1000;\n+    assert 10 ==  \u05d0\u05e8\u05d5\u05d7\u05ea_\u05e6\u05d4\u05e8\u05d9\u05d9;\n+    assert \u30e9\u30f3\u30c1 + \u5348\u9910 + \u03bc\u03b5\u03c3\u03b7\u03bc\u03b5\u03c1\u03b9\u03b1\u03bd\u03cc == 30;\n+    assert \u0103n_tr\u01b0a + \u0e2d\u0e32\u0e2b\u0e32\u0e23\u0e01\u0e25\u0e32\u0e07\u0e27\u0e31\u0e19 == 20;\n+    ret (\u0430\u0431\u0435\u0434 + \u056c\u0561\u0576\u0579) >> \u063a\u062f\u0627\u0621;\n+}"}]}