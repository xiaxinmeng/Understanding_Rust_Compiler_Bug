{"sha": "02c9ac93be959272ffbb3fbbec79dbe9fc734140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzlhYzkzYmU5NTkyNzJmZmJiM2ZiYmVjNzlkYmU5ZmM3MzQxNDA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-17T13:57:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-17T14:17:17Z"}, "message": "Prohibit long return val from 'rewrite_closure_block'", "tree": {"sha": "1440ea1e34cee68707690fb096e970b19a14580b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1440ea1e34cee68707690fb096e970b19a14580b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c9ac93be959272ffbb3fbbec79dbe9fc734140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c9ac93be959272ffbb3fbbec79dbe9fc734140", "html_url": "https://github.com/rust-lang/rust/commit/02c9ac93be959272ffbb3fbbec79dbe9fc734140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c9ac93be959272ffbb3fbbec79dbe9fc734140/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dc53d3750e3b683673b09785b2787543af19bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc53d3750e3b683673b09785b2787543af19bb8", "html_url": "https://github.com/rust-lang/rust/commit/8dc53d3750e3b683673b09785b2787543af19bb8"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "f282f7c0b57b65b7edb2515e6a35084a0c9bf132", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=02c9ac93be959272ffbb3fbbec79dbe9fc734140", "patch": "@@ -172,9 +172,8 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::Mac(ref mac) => {\n             // Failure to rewrite a marco should not imply failure to\n             // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n-                wrap_str(context.snippet(expr.span), context.config.max_width, shape)\n-            })\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n+                .or_else(|| wrap_str(context.snippet(expr.span), context.config.max_width, shape))\n         }\n         ast::ExprKind::Ret(None) => wrap_str(\"return\".to_owned(), context.config.max_width, shape),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n@@ -576,14 +575,18 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n         let block_threshold = context.config.closure_block_indent_threshold;\n         if block_threshold < 0 || rewrite.matches('\\n').count() <= block_threshold as usize {\n-            return Some(format!(\"{} {}\", prefix, rewrite));\n+            if let Some(rewrite) = wrap_str(rewrite, context.config.max_width, shape) {\n+                return Some(format!(\"{} {}\", prefix, rewrite));\n+            }\n         }\n \n         // The body of the closure is big enough to be block indented, that\n         // means we must re-format.\n         let block_shape = shape.block();\n         let rewrite = try_opt!(block.rewrite(&context, block_shape));\n-        Some(format!(\"{} {}\", prefix, rewrite))\n+        Some(format!(\"{} {}\",\n+                     prefix,\n+                     try_opt!(wrap_str(rewrite, block_shape.width, block_shape))))\n     }\n }\n "}, {"sha": "f11a0aaf6e28bda259bd6aedc84f4a04e5233ddd", "filename": "src/file_lines.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=02c9ac93be959272ffbb3fbbec79dbe9fc734140", "patch": "@@ -194,9 +194,8 @@ impl JsonSpan {\n     // To allow `collect()`ing into a `MultiMap`.\n     fn into_tuple(self) -> Result<(String, Range), String> {\n         let (lo, hi) = self.range;\n-        let canonical = try!(canonicalize_path_string(&self.file).map_err(|_| {\n-            format!(\"Can't canonicalize {}\", &self.file)\n-        }));\n+        let canonical = try!(canonicalize_path_string(&self.file)\n+                                 .map_err(|_| format!(\"Can't canonicalize {}\", &self.file)));\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "1909b0d2679364da804b7c3209759833e8aa3429", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=02c9ac93be959272ffbb3fbbec79dbe9fc734140", "patch": "@@ -1326,12 +1326,13 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n         let bounds: &[_] = ty_param_bounds;\n-        let bound_str = try_opt!(bounds.iter()\n-            .map(|ty_bound| {\n-                ty_bound.rewrite(context, Shape::legacy(context.config.max_width, indent))\n-            })\n-            .intersperse(Some(\" + \".to_string()))\n-            .collect::<Option<String>>());\n+        let bound_str = try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| {\n+            ty_bound.rewrite(context, Shape::legacy(context.config.max_width, indent))\n+        })\n+                                     .intersperse(Some(\" + \".to_string()))\n+                                     .collect::<Option<String>>());\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n         } else {"}, {"sha": "0bdc7eb60e0363fe485facb86c325aa259efc388", "filename": "src/macros.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c9ac93be959272ffbb3fbbec79dbe9fc734140/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=02c9ac93be959272ffbb3fbbec79dbe9fc734140", "patch": "@@ -146,12 +146,11 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape, true).map(|rw| {\n-                match position {\n-                    MacroPosition::Item => format!(\"{};\", rw),\n-                    _ => rw,\n-                }\n-            })\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape, true)\n+                .map(|rw| match position {\n+                         MacroPosition::Item => format!(\"{};\", rw),\n+                         _ => rw,\n+                     })\n         }\n         MacroStyle::Brackets => {\n             // Format macro invocation as array literal."}]}