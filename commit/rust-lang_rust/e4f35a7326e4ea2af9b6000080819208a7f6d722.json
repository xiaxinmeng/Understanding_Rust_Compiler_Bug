{"sha": "e4f35a7326e4ea2af9b6000080819208a7f6d722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjM1YTczMjZlNGVhMmFmOWI2MDAwMDgwODE5MjA4YTdmNmQ3MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T15:09:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T15:09:55Z"}, "message": "auto merge of #5933 : huonw/rust/core-read-until-byte, r=thestinger\n\n`read_until` is just doing a bytewise comparison. This means the following program prints `xy\u00e512`, not `xy`, which it should if it was actually checking chars.\r\n\r\n```rust\r\nfn main() {\r\n    do io::with_str_reader(\"xy\u00e512\") |r| {\r\n        io::println(r.read_until('\u00e5', false));\r\n    }\r\n}\r\n```\r\n\r\nThis patch makes the type of read_until match what it is actually doing.", "tree": {"sha": "f3a2e90195e5665913938a47762cc12943755300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a2e90195e5665913938a47762cc12943755300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f35a7326e4ea2af9b6000080819208a7f6d722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f35a7326e4ea2af9b6000080819208a7f6d722", "html_url": "https://github.com/rust-lang/rust/commit/e4f35a7326e4ea2af9b6000080819208a7f6d722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f35a7326e4ea2af9b6000080819208a7f6d722/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "html_url": "https://github.com/rust-lang/rust/commit/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7"}, {"sha": "19cc352302838dd379c0d4a335a093fbfd0df64b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cc352302838dd379c0d4a335a093fbfd0df64b", "html_url": "https://github.com/rust-lang/rust/commit/19cc352302838dd379c0d4a335a093fbfd0df64b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "35ffd88c8f477e9904eb79ed489cebe1aef5414d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f35a7326e4ea2af9b6000080819208a7f6d722/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f35a7326e4ea2af9b6000080819208a7f6d722/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e4f35a7326e4ea2af9b6000080819208a7f6d722", "patch": "@@ -176,7 +176,7 @@ pub trait ReaderUtil {\n     fn read_bytes(&self, len: uint) -> ~[u8];\n \n     /**\n-    * Reads up until a specific character or EOF.\n+    * Reads up until a specific byte is seen or EOF.\n     *\n     * The `include` parameter specifies if the character should be included\n     * in the returned string.\n@@ -185,7 +185,7 @@ pub trait ReaderUtil {\n     *\n     * None right now.\n     */\n-    fn read_until(&self, c: char, include: bool) -> ~str;\n+    fn read_until(&self, c: u8, include: bool) -> ~str;\n \n     /**\n     * Reads up until the first '\\n' or EOF.\n@@ -577,7 +577,7 @@ impl<T:Reader> ReaderUtil for T {\n         bytes\n     }\n \n-    fn read_until(&self, c: char, include: bool) -> ~str {\n+    fn read_until(&self, c: u8, include: bool) -> ~str {\n         let mut bytes = ~[];\n         loop {\n             let ch = self.read_byte();\n@@ -593,7 +593,7 @@ impl<T:Reader> ReaderUtil for T {\n     }\n \n     fn read_line(&self) -> ~str {\n-        self.read_until('\\n', false)\n+        self.read_until('\\n' as u8, false)\n     }\n \n     fn read_chars(&self, n: uint) -> ~[char] {\n@@ -667,7 +667,7 @@ impl<T:Reader> ReaderUtil for T {\n     }\n \n     fn read_c_str(&self) -> ~str {\n-        self.read_until(0 as char, false)\n+        self.read_until(0u8, false)\n     }\n \n     fn read_whole_stream(&self) -> ~[u8] {\n@@ -693,7 +693,7 @@ impl<T:Reader> ReaderUtil for T {\n             // include the \\n, so that we can distinguish an entirely empty\n             // line read after \"...\\n\", and the trailing empty line in\n             // \"...\\n\\n\".\n-            let mut line = self.read_until('\\n', true);\n+            let mut line = self.read_until('\\n' as u8, true);\n \n             // blank line at the end of the reader is ignored\n             if self.eof() && line.is_empty() { break; }"}]}