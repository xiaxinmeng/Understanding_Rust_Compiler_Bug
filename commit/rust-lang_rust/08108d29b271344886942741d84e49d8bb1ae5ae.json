{"sha": "08108d29b271344886942741d84e49d8bb1ae5ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTA4ZDI5YjI3MTM0NDg4Njk0Mjc0MWQ4NGU0OWQ4YmIxYWU1YWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-04T15:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-04T15:04:57Z"}, "message": "Merge #5222\n\n5222: Add Item change to the set of benches r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "afb5f2a3b459a463a84b117415b93789bbcf8594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb5f2a3b459a463a84b117415b93789bbcf8594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08108d29b271344886942741d84e49d8bb1ae5ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAJqZCRBK7hj4Ov3rIwAAdHIIAHFLGAdGDFRRdPxRpGIaIt43\nMu0L2eoecJw9gL1QdiCXPymqWWrewNgu/Rbh/9GJOf/E8InAT9S+Z5XU6P4p4jlf\nFCUXtcNthUxHEqSyURJsETPVcHuuuYaGtgj3ywRnfZfsyYPITAOL0qmrd3Osm4sY\nQjQbsJEFzIC8/OhNYfrrtDKLIvyeGXcc3FAxWCgx/UXbM8bAx+TBYNAMwIm2jI0W\n8cMeEqZPgdDGN1/U60rr4rg6mg3jSkIZbBiwE08ys0a3ay0oqDRs4wJyRFCYDYZC\n/h7I/G3GbAlco1kqP7RVWezX//H3VmKqgEFxAI13SLo6wSjDWd5iA7u3CICXREc=\n=r62H\n-----END PGP SIGNATURE-----\n", "payload": "tree afb5f2a3b459a463a84b117415b93789bbcf8594\nparent 1d3a3c078209c74daef2f4ee8450185c69022578\nparent 3902e5574c56a4f0c7e0846afe61022ef4b4fc76\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593875097 +0000\ncommitter GitHub <noreply@github.com> 1593875097 +0000\n\nMerge #5222\n\n5222: Add Item change to the set of benches r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08108d29b271344886942741d84e49d8bb1ae5ae", "html_url": "https://github.com/rust-lang/rust/commit/08108d29b271344886942741d84e49d8bb1ae5ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08108d29b271344886942741d84e49d8bb1ae5ae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3a3c078209c74daef2f4ee8450185c69022578", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3a3c078209c74daef2f4ee8450185c69022578", "html_url": "https://github.com/rust-lang/rust/commit/1d3a3c078209c74daef2f4ee8450185c69022578"}, {"sha": "3902e5574c56a4f0c7e0846afe61022ef4b4fc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/3902e5574c56a4f0c7e0846afe61022ef4b4fc76", "html_url": "https://github.com/rust-lang/rust/commit/3902e5574c56a4f0c7e0846afe61022ef4b4fc76"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "85c2e415a11e557eea96431aec7e46776d714c05", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08108d29b271344886942741d84e49d8bb1ae5ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08108d29b271344886942741d84e49d8bb1ae5ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=08108d29b271344886942741d84e49d8bb1ae5ae", "patch": "@@ -3,13 +3,14 @@\n //! If run started args, we run the LSP server loop. With a subcommand, we do a\n //! one-time batch processing.\n \n+use std::{env, fmt::Write, path::PathBuf};\n+\n use anyhow::{bail, Result};\n use pico_args::Arguments;\n+use ra_db::AbsPathBuf;\n use ra_ssr::{SsrPattern, SsrRule};\n use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n \n-use std::{fmt::Write, path::PathBuf};\n-\n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,\n     pub(crate) command: Command,\n@@ -240,7 +241,10 @@ ARGS:\n                 let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n                 let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n                 let what = match (highlight_path, complete_path, goto_def_path) {\n-                    (Some(path), None, None) => BenchWhat::Highlight { path: path.into() },\n+                    (Some(path), None, None) => {\n+                        let path = env::current_dir().unwrap().join(path);\n+                        BenchWhat::Highlight { path: AbsPathBuf::assert(path) }\n+                    }\n                     (None, Some(position), None) => BenchWhat::Complete(position),\n                     (None, None, Some(position)) => BenchWhat::GotoDef(position),\n                     _ => panic!("}, {"sha": "90990d3e77db10b8e4c953c17a6398653d833c69", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/08108d29b271344886942741d84e49d8bb1ae5ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08108d29b271344886942741d84e49d8bb1ae5ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=08108d29b271344886942741d84e49d8bb1ae5ae", "patch": "@@ -1,12 +1,6 @@\n //! Benchmark operations like highlighting or goto definition.\n \n-use std::{\n-    convert::TryFrom,\n-    path::{Path, PathBuf},\n-    str::FromStr,\n-    sync::Arc,\n-    time::Instant,\n-};\n+use std::{env, path::Path, str::FromStr, sync::Arc, time::Instant};\n \n use anyhow::{format_err, Result};\n use ra_db::{\n@@ -18,13 +12,13 @@ use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosit\n use crate::cli::{load_cargo::load_cargo, Verbosity};\n \n pub enum BenchWhat {\n-    Highlight { path: PathBuf },\n+    Highlight { path: AbsPathBuf },\n     Complete(Position),\n     GotoDef(Position),\n }\n \n pub struct Position {\n-    pub path: PathBuf,\n+    pub path: AbsPathBuf,\n     pub line: u32,\n     pub column: u32,\n }\n@@ -34,7 +28,9 @@ impl FromStr for Position {\n     fn from_str(s: &str) -> Result<Self> {\n         let (path_line, column) = rsplit_at_char(s, ':')?;\n         let (path, line) = rsplit_at_char(path_line, ':')?;\n-        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+        let path = env::current_dir().unwrap().join(path);\n+        let path = AbsPathBuf::assert(path);\n+        Ok(Position { path, line: line.parse()?, column: column.parse()? })\n     }\n }\n \n@@ -62,8 +58,7 @@ pub fn analysis_bench(\n             BenchWhat::Highlight { path } => path,\n             BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => &pos.path,\n         };\n-        let path = AbsPathBuf::try_from(path.clone()).unwrap();\n-        let path = path.into();\n+        let path = path.clone().into();\n         vfs.file_id(&path).ok_or_else(|| format_err!(\"Can't find {}\", path))?\n     };\n \n@@ -139,6 +134,19 @@ fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, w\n         work(&host.analysis());\n         eprintln!(\"{:?}\", start.elapsed());\n     }\n+    {\n+        let start = Instant::now();\n+        eprint!(\"item change:    \");\n+        {\n+            let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n+            text.push_str(\"\\npub fn _dummy() {}\\n\");\n+            let mut change = AnalysisChange::new();\n+            change.change_file(file_id, Some(Arc::new(text)));\n+            host.apply_change(change);\n+        }\n+        work(&host.analysis());\n+        eprintln!(\"{:?}\", start.elapsed());\n+    }\n     {\n         let start = Instant::now();\n         eprint!(\"const change:   \");"}]}