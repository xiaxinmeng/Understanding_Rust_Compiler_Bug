{"sha": "ee2addd010a8cd8b8665dce8a32f8b18d101bc71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmFkZGQwMTBhOGNkOGI4NjY1ZGNlOGEzMmY4YjE4ZDEwMWJjNzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-20T11:22:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-20T11:22:07Z"}, "message": "Don't test x86_64 simd on archs other than x86_64", "tree": {"sha": "0ab81d17b3bbed5cea3571e038950c30ce7f4843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab81d17b3bbed5cea3571e038950c30ce7f4843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2addd010a8cd8b8665dce8a32f8b18d101bc71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2addd010a8cd8b8665dce8a32f8b18d101bc71", "html_url": "https://github.com/rust-lang/rust/commit/ee2addd010a8cd8b8665dce8a32f8b18d101bc71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2addd010a8cd8b8665dce8a32f8b18d101bc71/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7752718e5b5ca2ba7d74497dfa11a208da47afcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7752718e5b5ca2ba7d74497dfa11a208da47afcb", "html_url": "https://github.com/rust-lang/rust/commit/7752718e5b5ca2ba7d74497dfa11a208da47afcb"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "079b4299049119e3c87573445bc4e6e224ebfffe", "filename": "example/std_example.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee2addd010a8cd8b8665dce8a32f8b18d101bc71/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2addd010a8cd8b8665dce8a32f8b18d101bc71/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=ee2addd010a8cd8b8665dce8a32f8b18d101bc71", "patch": "@@ -1,5 +1,6 @@\n #![feature(core_intrinsics, generators, generator_trait, is_sorted)]\n \n+#[cfg(target_arch = \"x86_64\")]\n use std::arch::x86_64::*;\n use std::io::Write;\n use std::ops::Generator;\n@@ -96,6 +97,7 @@ fn main() {\n \n     println!(\"{:?}\", std::intrinsics::caller_location());\n \n+    #[cfg(target_arch = \"x86_64\")]\n     unsafe {\n         test_simd();\n     }\n@@ -124,6 +126,7 @@ fn panic(_: u128) {\n     panic!();\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_simd() {\n     assert!(is_x86_feature_detected!(\"sse2\"));\n@@ -153,6 +156,7 @@ unsafe fn test_simd() {\n     assert_eq!(mask1, 1);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_slli_si128() {\n     #[rustfmt::skip]\n@@ -193,6 +197,7 @@ unsafe fn test_mm_slli_si128() {\n     assert_eq_m128i(r, _mm_set1_epi8(0));\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_movemask_epi8() {\n     #[rustfmt::skip]\n@@ -206,6 +211,7 @@ unsafe fn test_mm_movemask_epi8() {\n     assert_eq!(r, 0b10100100_00100101);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"avx2\")]\n unsafe fn test_mm256_movemask_epi8() {\n     let a = _mm256_set1_epi8(-1);\n@@ -214,6 +220,7 @@ unsafe fn test_mm256_movemask_epi8() {\n     assert_eq!(r, e);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_add_epi8() {\n     let a = _mm_setr_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n@@ -229,6 +236,7 @@ unsafe fn test_mm_add_epi8() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_add_pd() {\n     let a = _mm_setr_pd(1.0, 2.0);\n@@ -237,25 +245,29 @@ unsafe fn test_mm_add_pd() {\n     assert_eq_m128d(r, _mm_setr_pd(6.0, 12.0));\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n fn assert_eq_m128i(x: std::arch::x86_64::__m128i, y: std::arch::x86_64::__m128i) {\n     unsafe {\n         assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(y));\n     }\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n pub unsafe fn assert_eq_m128d(a: __m128d, b: __m128d) {\n     if _mm_movemask_pd(_mm_cmpeq_pd(a, b)) != 0b11 {\n         panic!(\"{:?} != {:?}\", a, b);\n     }\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_cvtsi128_si64() {\n     let r = _mm_cvtsi128_si64(std::mem::transmute::<[i64; 2], _>([5, 0]));\n     assert_eq!(r, 5);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse4.1\")]\n unsafe fn test_mm_cvtepi8_epi16() {\n     let a = _mm_set1_epi8(10);\n@@ -268,6 +280,7 @@ unsafe fn test_mm_cvtepi8_epi16() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse4.1\")]\n unsafe fn test_mm_extract_epi8() {\n     #[rustfmt::skip]\n@@ -281,6 +294,7 @@ unsafe fn test_mm_extract_epi8() {\n     assert_eq!(r2, 3);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_insert_epi16() {\n     let a = _mm_setr_epi16(0, 1, 2, 3, 4, 5, 6, 7);"}]}