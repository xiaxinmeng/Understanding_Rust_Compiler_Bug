{"sha": "cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjExMzE4MmNlNThlZThiNWEyNTM2NzljN2I1MThhYmJiMWY1ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-30T01:26:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-30T01:26:44Z"}, "message": "auto merge of #13776 : adrientetar/rust/rustdoc-fix, r=brson\n\n- Closes #13591. Relevant example: http://adrientetar.legtux.org/cached/rust-docs/struct.CChars.htm\r\n(Had to use `!important` to override CSS selector precedence, namely matching over parent class.)\r\n- Implement changes from #13780 feedback, namely:\r\n  * Changed font-size from 18px to 15px\r\n  * Reintroduced gray background for code samples\r\n  * Tightened up the margins\r\n- Fix point 1 and point 4 of #13804.\r\n\r\nSamples:\r\n\r\n- [enum.FileType](http://adrientetar.legtux.org/cached/rust-docs/enum.FileType.htm)\r\n- [struct.CChars](http://adrientetar.legtux.org/cached/rust-docs/struct.CChars.htm)\r\n- [std](http://adrientetar.legtux.org/cached/rust-docs/std.htm)\r\n- [std::io](http://adrientetar.legtux.org/cached/rust-docs/io.htm).\r\n\r\nr? @brson", "tree": {"sha": "cd59411ea44f761995abad086804e6b81398ff78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd59411ea44f761995abad086804e6b81398ff78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "html_url": "https://github.com/rust-lang/rust/commit/cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33259d979742e643a5dda4889d17d59c6fcf63e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/33259d979742e643a5dda4889d17d59c6fcf63e4", "html_url": "https://github.com/rust-lang/rust/commit/33259d979742e643a5dda4889d17d59c6fcf63e4"}, {"sha": "2bf25a7fff031736cbefc849f826b4c0c5c695c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf25a7fff031736cbefc849f826b4c0c5c695c1", "html_url": "https://github.com/rust-lang/rust/commit/2bf25a7fff031736cbefc849f826b4c0c5c695c1"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "d5fd3d15ba53ae543e639a79eafe1cc804ec29d1", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "patch": "@@ -471,7 +471,7 @@ Two examples of paths with type arguments:\n # fn f() {\n # fn id<T>(t: T) -> T { t }\n type T = HashMap<int,~str>;  // Type arguments used in a type expression\n-let x = id::<int>(10);         // Type arguments used in a call expression\n+let x = id::<int>(10);       // Type arguments used in a call expression\n # }\n ~~~~\n "}, {"sha": "69e79d2b27c59b7acd8e057b63cfe741d872aa2f", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "patch": "@@ -982,7 +982,8 @@ The obvious approach is to define `Cons` as containing an element in the list\n along with the next `List` node. However, this will generate a compiler error.\n \n ~~~ {.ignore}\n-// error: illegal recursive enum type; wrap the inner value in a box to make it representable\n+// error: illegal recursive enum type; wrap the inner value in a box to make it\n+// representable\n enum List {\n     Cons(u32, List), // an element (`u32`) and the next node in the list\n     Nil\n@@ -1054,10 +1055,10 @@ immutable, the whole list is immutable. The memory allocation itself is the\n box, while the owner holds onto a pointer to it:\n \n ~~~ {.notrust}\n-          List box             List box           List box            List box\n-        +--------------+    +--------------+    +--------------+    +--------------+\n-list -> | Cons | 1 | ~ | -> | Cons | 2 | ~ | -> | Cons | 3 | ~ | -> | Nil          |\n-        +--------------+    +--------------+    +--------------+    +--------------+\n+            List box            List box            List box          List box\n+        +--------------+    +--------------+    +--------------+    +----------+\n+list -> | Cons | 1 | ~ | -> | Cons | 2 | ~ | -> | Cons | 3 | ~ | -> | Nil      |\n+        +--------------+    +--------------+    +--------------+    +----------+\n ~~~\n \n > *Note:* the above diagram shows the logical contents of the enum. The actual\n@@ -1197,7 +1198,8 @@ fn eq(xs: &List, ys: &List) -> bool {\n         // If we have reached the end of both lists, they are equal.\n         (&Nil, &Nil) => true,\n         // If the current element in both lists is equal, keep going.\n-        (&Cons(x, ~ref next_xs), &Cons(y, ~ref next_ys)) if x == y => eq(next_xs, next_ys),\n+        (&Cons(x, ~ref next_xs), &Cons(y, ~ref next_ys))\n+                if x == y => eq(next_xs, next_ys),\n         // If the current elements are not equal, the lists are not equal.\n         _ => false\n     }\n@@ -1256,7 +1258,7 @@ Using the generic `List<T>` works much like before, thanks to type inference:\n #     Cons(value, ~xs)\n # }\n let mut xs = Nil; // Unknown type! This is a `List<T>`, but `T` can be anything.\n-xs = prepend(xs, 10); // The compiler infers the type of `xs` as `List<int>` from this.\n+xs = prepend(xs, 10); // Here the compiler infers `xs`'s type as `List<int>`.\n xs = prepend(xs, 15);\n xs = prepend(xs, 20);\n ~~~\n@@ -1303,7 +1305,8 @@ fn eq<T: Eq>(xs: &List<T>, ys: &List<T>) -> bool {\n         // If we have reached the end of both lists, they are equal.\n         (&Nil, &Nil) => true,\n         // If the current element in both lists is equal, keep going.\n-        (&Cons(ref x, ~ref next_xs), &Cons(ref y, ~ref next_ys)) if x == y => eq(next_xs, next_ys),\n+        (&Cons(ref x, ~ref next_xs), &Cons(ref y, ~ref next_ys))\n+                if x == y => eq(next_xs, next_ys),\n         // If the current elements are not equal, the lists are not equal.\n         _ => false\n     }\n@@ -1331,7 +1334,8 @@ impl<T: Eq> Eq for List<T> {\n             // If we have reached the end of both lists, they are equal.\n             (&Nil, &Nil) => true,\n             // If the current element in both lists is equal, keep going.\n-            (&Cons(ref x, ~ref next_xs), &Cons(ref y, ~ref next_ys)) if x == y => next_xs == next_ys,\n+            (&Cons(ref x, ~ref next_xs), &Cons(ref y, ~ref next_ys))\n+                    if x == y => next_xs == next_ys,\n             // If the current elements are not equal, the lists are not equal.\n             _ => false\n         }"}, {"sha": "fab3ca80099b92c5f0fc71c736ea08336bd775ea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "patch": "@@ -209,7 +209,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Render the HTML\n-        let text = format!(r#\"<h{lvl} id=\"{id}\" class='section-link'><a\n+        let text = format!(r#\"<h{lvl} id=\"{id}\" class='section-header'><a\n                            href=\"\\#{id}\">{sec_len,plural,=0{}other{{sec} }}{}</a></h{lvl}>\"#,\n                            s, lvl = level, id = id,\n                            sec_len = sec.len(), sec = sec);"}, {"sha": "b8df8b772d2d7d5e6f57df05f55370dad4765822", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "patch": "@@ -1121,7 +1121,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n                 clean::MacroItem(..)           => (\"macros\", \"Macros\"),\n             };\n             try!(write!(w,\n-                        \"<h2 id='{id}' class='section-link'>\\\n+                        \"<h2 id='{id}' class='section-header'>\\\n                         <a href=\\\"\\\\#{id}\\\">{name}</a></h2>\\n<table>\",\n                         id = short, name = name));\n         }"}, {"sha": "663fd00c92be60ef878eec2a8be4d67acb24eb77", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/cbf113182ce58ee8b5a253679c7b518abbb1f5e2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=cbf113182ce58ee8b5a253679c7b518abbb1f5e2", "patch": "@@ -53,32 +53,40 @@\n body {\n     color: #333;\n     min-width: 500px;\n-    font: 18px \"Heuristica\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n-    line-height: 1.4;\n+    font: 15.5px/1.4 \"Heuristica\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n     margin: 0;\n     position: relative;\n     padding: 10px 15px 20px 15px;\n }\n \n-h1, h2, h3:not(.impl), h4:not(.method) {\n+h1 {\n+    font-size: 1.5em;\n+}\n+h2 {\n+    font-size: 1.4em;\n+}\n+h3 {\n+    font-size: 1.3em;\n+}\n+h1, h2, h3:not(.impl):not(.method), h4:not(.method) {\n     color: black;\n     font-weight: 500;\n-    margin: 30px 0 15px 0;\n+    margin: 20px 0 15px 0;\n     padding-bottom: 6px;\n }\n h1.fqn {\n     border-bottom: 1px dashed #D5D5D5;\n     margin-top: 0;\n }\n-h2, h3:not(.impl), h4:not(.method) {\n+h2, h3:not(.impl):not(.method), h4:not(.method) {\n     border-bottom: 1px solid #DDDDDD;\n }\n-h3.impl, h4.method {\n+h3.impl, h3.method, h4.method {\n     font-weight: 600;\n     margin-top: 10px;\n     margin-bottom: 10px;\n }\n-h3.impl {\n+h3.impl, h3.method {\n     margin-top: 15px;\n }\n h1, h2, h3, h4, section.sidebar, a.source, .search-input, .content table a {\n@@ -93,27 +101,23 @@ ul ul, ol ul, ul ol, ol ol {\n }\n \n p {\n-    margin: 0 0 1em 0;\n+    margin: 0 0 .6em 0;\n }\n \n code, pre {\n     font-family: \"Source Code Pro\", Menlo, Monaco, Consolas, \"DejaVu Sans Mono\", Inconsolata, monospace;\n     white-space: pre-wrap;\n }\n pre {\n-    font-size: 15px;\n+    background-color: #F5F5F5;\n     padding: 14px;\n-    padding-right: 0;\n-    border-left: 2px solid #eee;\n }\n \n .source pre {\n-    border-left: none;\n     padding: 20px;\n }\n \n nav.sub {\n-    padding-top: 10px;\n     font-size: 16px;\n     text-transform: uppercase;\n }\n@@ -149,7 +153,7 @@ nav.sub {\n }\n \n .block {\n-    padding: 10px;\n+    padding: 0 10px;\n     margin-bottom: 10px;\n }\n .block h2 { \n@@ -170,7 +174,7 @@ nav.sub {\n }\n \n .content {\n-    padding: 20px 0;\n+    padding: 15px 0;\n }\n \n .content.source pre.rust {\n@@ -211,9 +215,9 @@ nav.sub {\n     text-overflow: ellipsis;\n     margin: 0;\n }\n+.docblock.short code { white-space: nowrap; }\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n-    margin: 30px 0 15px 0;\n     border-bottom: 1px solid #DDD;\n }\n \n@@ -367,9 +371,10 @@ a {\n .stability {\n     border-left: 6px solid #000;\n     border-radius: 3px;\n-    padding: 2px 10px;\n+    font-weight: 400;\n+    padding: 4px 10px;\n     text-transform: lowercase;\n-    margin-left: 10px;\n+    margin-left: 14px;\n }\n \n .stability.Deprecated { border-color: #D60027; color: #880017; }\n@@ -392,16 +397,18 @@ pre.rust .doccomment { color: #4D4D4C; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n pre.rust .lifetime { color: #B76514; }\n \n-h1.section-link:hover a:after,\n-h2.section-link:hover a:after,\n-h3.section-link:hover a:after,\n-h4.section-link:hover a:after,\n-h5.section-link:hover a:after,\n-h6.section-link:hover a:after {\n-  content: '\\2002\\00a7\\2002';\n+.section-header {\n+    /* Override parent class attributes. */\n+    border-bottom: none !important;\n+    font-size: 1.1em !important;\n+    margin: 0 0 -5px;\n+    padding: 0;\n+}\n+.section-header:hover a:after {\n+    content: '\\2002\\00a7\\2002';\n }\n \n-/** Media Queries **/\n+/* Media Queries */\n \n @media (max-width: 700px) {\n     .sidebar {"}]}