{"sha": "c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMTFmMTMxNDQ2ZDNlMmNiYmI5MjY2YmZlZmM5ZmQ5NjM3ZjliZDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-23T22:58:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-23T22:58:53Z"}, "message": "Add kind-checking for assign-op, copy, ret, be, fail exprs. Fix caught kinding-violations in rustc and libstd.", "tree": {"sha": "03c739a21ab4e75b5d3c83d7d2d5c84f7daa0bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c739a21ab4e75b5d3c83d7d2d5c84f7daa0bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "html_url": "https://github.com/rust-lang/rust/commit/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c8d4a5a58b42db6b8795980992e1063e84f59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c8d4a5a58b42db6b8795980992e1063e84f59f", "html_url": "https://github.com/rust-lang/rust/commit/a3c8d4a5a58b42db6b8795980992e1063e84f59f"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "ded36db2cf8cad7cfe9ddb85367ec1408277d9c4", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -108,7 +108,7 @@ fn parse_input_src(sess: session::session, cfg: &ast::crate_cfg, infile: str)\n     ret {crate: crate, src: src};\n }\n \n-fn time<T>(do_it: bool, what: str, thunk: fn() -> T) -> T {\n+fn time<@T>(do_it: bool, what: str, thunk: fn() -> T) -> T {\n     if !do_it { ret thunk(); }\n     let start = std::time::precise_time_s();\n     let rv = thunk();"}, {"sha": "5701ff33f975ac9d8bd88a61cc0f70b58d2d4222", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -189,7 +189,7 @@ fn require_unique_names(sess: &session::session, metas: &[@ast::meta_item]) {\n     }\n }\n \n-fn span<T>(item: &T) -> ast::spanned<T> {\n+fn span<@T>(item: &T) -> ast::spanned<T> {\n     ret {node: item, span: ast_util::dummy_sp()};\n }\n "}, {"sha": "8e0b71caf848d9581a63a0371e1df3e214ee7e56", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -170,7 +170,7 @@ fn mk_test_module(cx: &test_ctxt) -> @ast::item {\n     ret @item;\n }\n \n-fn nospan<T>(t: &T) -> ast::spanned<T> {\n+fn nospan<@T>(t: &T) -> ast::spanned<T> {\n     ret {node: t, span: dummy_sp()};\n }\n "}, {"sha": "9a0d251e44e9aed98d14b5692b4fea42266f3449", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -76,6 +76,7 @@ import syntax::ast_util;\n import syntax::visit;\n \n import std::vec;\n+import std::option;\n \n import ast::kind;\n import ast::kind_unique;\n@@ -135,7 +136,20 @@ fn check_expr(tcx: &ty::ctxt, e: &@ast::expr) {\n     alt e.node {\n       ast::expr_move(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<-\"); }\n       ast::expr_assign(a, b) { need_shared_lhs_rhs(tcx, a, b, \"=\"); }\n+      ast::expr_assign_op(_, a, b) { need_shared_lhs_rhs(tcx, a, b, \"op=\"); }\n       ast::expr_swap(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<->\"); }\n+      ast::expr_copy(a) {\n+        need_expr_kind(tcx, a, ast::kind_shared, \"'copy' operand\");\n+      }\n+      ast::expr_ret(option::some(a)) {\n+        need_expr_kind(tcx, a, ast::kind_shared, \"'ret' operand\");\n+      }\n+      ast::expr_be(a) {\n+        need_expr_kind(tcx, a, ast::kind_shared, \"'be' operand\");\n+      }\n+      ast::expr_fail(option::some(a)) {\n+        need_expr_kind(tcx, a, ast::kind_shared, \"'fail' operand\");\n+      }\n       ast::expr_call(callee, _) {\n         let tpt = ty::expr_ty_params_and_ty(tcx, callee);\n "}, {"sha": "e89889fa0276f093f6c9ad11627d65db42c8108d", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -3,7 +3,7 @@ import std::option;\n import codemap::span;\n import ast::*;\n \n-fn respan<T>(sp: &span, t: &T) -> spanned<T> { ret {node: t, span: sp}; }\n+fn respan<@T>(sp: &span, t: &T) -> spanned<T> { ret {node: t, span: sp}; }\n \n /* assuming that we're not in macro expansion */\n fn mk_sp(lo: uint, hi: uint) -> span {"}, {"sha": "aa553e32e3944960764826669c6dc30932599010", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -222,7 +222,7 @@ fn expect_gt(p: &parser) {\n     }\n }\n \n-fn spanned<T>(lo: uint, hi: uint, node: &T) -> spanned<T> {\n+fn spanned<@T>(lo: uint, hi: uint, node: &T) -> spanned<T> {\n     ret {node: node, span: ast_util::mk_sp(lo, hi)};\n }\n "}, {"sha": "3d1a495fb2ee360f3d712a5793807e5a92193c93", "filename": "src/comp/syntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -33,7 +33,7 @@ fn intern<@T>(itr: &interner<T>, val: &T) -> uint {\n     }\n }\n \n-fn get<T>(itr: &interner<T>, idx: uint) -> T { ret itr.vect[idx]; }\n+fn get<@T>(itr: &interner<T>, idx: uint) -> T { ret itr.vect[idx]; }\n \n fn len<T>(itr: &interner<T>) -> uint { ret vec::len(itr.vect); }\n "}, {"sha": "52181528b4fd92ab04d47de10a9dff3b2bc6e07f", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -38,10 +38,6 @@ type task_context = {regs: x86_registers, next: *u8};\n \n resource rust_task_ptr(task: *rust_task) { rustrt::drop_task(task); }\n \n-fn get_task_ptr(id: task) -> rust_task_ptr {\n-    ret rust_task_ptr(rustrt::get_task_pointer(id));\n-}\n-\n type task = int;\n type task_id = task;\n \n@@ -107,7 +103,7 @@ fn spawn_inner(thunk: -fn(), notify: option<comm::chan<task_notification>>) ->\n     // stack.\n \n     // set up the task pointer\n-    let task_ptr = get_task_ptr(id);\n+    let task_ptr = rust_task_ptr(rustrt::get_task_pointer(id));\n     let regs = ptr::addr_of((**task_ptr).ctx.regs);\n     (*regs).edx = cast(*task_ptr);;\n     (*regs).esp = cast((**task_ptr).stack_ptr);"}, {"sha": "0d382655b4191907fca91c15cefb2f0c4fdc48e8", "filename": "src/lib/unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -9,7 +9,7 @@ native \"rust\" mod rustrt {\n }\n \n // Casts the value at `src` to U. The two types must have the same length.\n-fn reinterpret_cast<T, U>(src: &T) -> U { ret rusti::cast(src); }\n+fn reinterpret_cast<T, @U>(src: &T) -> U { ret rusti::cast(src); }\n \n fn leak<@T>(thing: -T) {\n     rustrt::leak(thing);"}, {"sha": "6041da4d0d0d801ed78c0444fcd191c82a29829b", "filename": "src/lib/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Flib%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Futil.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<T>(x: &T) -> T { ret x; }\n+fn id<@T>(x: &T) -> T { ret x; }\n \n \n /* FIXME (issue #141):  See test/run-pass/constrained-type.rs.  Uncomment"}, {"sha": "76b05792f2fc735a8330d44de5fd6a4d44f5dd10", "filename": "src/test/compile-fail/block-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: non-copyable\n+// error-pattern: mismatched kinds\n \n fn lol(f: &block()) -> block() { ret f; }\n fn main() { let i = 8; let f = lol(block () { log_err i; }); f(); }"}, {"sha": "efbc26f669a5b87120d13b3c6921a3400248f084", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -150,7 +150,7 @@ fn worker(p: port<request>) {\n     }\n }\n \n-fn with_lib_path<T>(path: &str, f: fn() -> T) -> T {\n+fn with_lib_path<@T>(path: &str, f: fn() -> T) -> T {\n     let maybe_oldpath = getenv(util::lib_path_env_var());\n     append_lib_path(path);\n     let res = f();"}, {"sha": "e06da60789c3ca18364d5055c0dba0b8b7bac598", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-fn f<T, U>(x: &T, y: &U) -> {a: T, b: U} { ret {a: x, b: y}; }\n+fn f<@T, @U>(x: &T, y: &U) -> {a: T, b: U} { ret {a: x, b: y}; }\n \n fn main() { log f({x: 3, y: 4, z: 5}, 4).a.x; log f(5, 6).a; }"}, {"sha": "ebf2bd432d4e81849260cccfd22adf5bd496a568", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,4 +1,4 @@\n-fn f<T>(x: &[T]) -> T { ret x[0]; }\n+fn f<@T>(x: &[T]) -> T { ret x[0]; }\n \n fn g(act: fn(&[int]) -> int) -> int { ret act([1, 2, 3]); }\n "}, {"sha": "08633a572a3ebcb97df3bc48a6936fb41356181b", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -2,7 +2,7 @@\n \n type box<T> = {c: @T};\n \n-fn unbox<T>(b: &box<T>) -> T { ret *b.c; }\n+fn unbox<@T>(b: &box<T>) -> T { ret *b.c; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "57dcc98b2a86fe7486f8ff485983315f362d079a", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, B>(f: @fn(@fn(&A) -> B, &A) -> B, x: &A) -> B {\n+fn fix_help<A, @B>(f: @fn(@fn(&A) -> B, &A) -> B, x: &A) -> B {\n     ret f(@bind fix_help(f, _), x);\n }\n \n-fn fix<A, B>(f: @fn(@fn(&A) -> B, &A) -> B) -> @fn(&A) -> B {\n+fn fix<A, @B>(f: @fn(@fn(&A) -> B, &A) -> B) -> @fn(&A) -> B {\n     ret @bind fix_help(f, _);\n }\n "}, {"sha": "3250b88ab824f6c69a508c8c372142315788dd38", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<T>(t: &T) -> T { ret t; }\n+fn id<@T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let expected = @100;"}, {"sha": "5c149ad59360c279f1b5b2e5c46346f87fb5334e", "filename": "src/test/run-pass/generic-bind-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<T>(t: &T) -> T { ret t; }\n+fn id<@T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let t = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7};"}, {"sha": "01156f579004b83b9fc0dac414df9cae16e26f4f", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<T>(t: &T) -> T { ret t; }\n+fn id<@T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let t = {_0: 1, _1: 2, _2: 3, _3: 4, _4: 5, _5: 6, _6: 7};"}, {"sha": "c11dce2ac7b46f99d11cc64e40c26ee4177447d2", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,8 +1,8 @@\n \n \n-fn g<X>(x: &X) -> X { ret x; }\n+fn g<@X>(x: &X) -> X { ret x; }\n \n-fn f<T>(t: &T) -> {a: T, b: T} {\n+fn f<@T>(t: &T) -> {a: T, b: T} {\n     type pair = {a: T, b: T};\n \n     let x: pair = {a: t, b: t};"}, {"sha": "559fa4d04465408641b098099f6effc9c37131e0", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n \n // Issue #45: infer type parameters in function applications\n-fn id<T>(x: &T) -> T { ret x; }\n+fn id<@T>(x: &T) -> T { ret x; }\n \n fn main() { let x: int = 42; let y: int = id(x); assert (x == y); }"}, {"sha": "940e0fe5aed77e0c22608761e8339d02555fe9c2", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn id<T>(x: &T) -> T { ret x; }\n+fn id<@T>(x: &T) -> T { ret x; }\n \n type triple = {x: int, y: int, z: int};\n "}, {"sha": "0bc1fafa495520bb5ed587c299b70d621e58c332", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj handle<T>(data: T) {\n+obj handle<@T>(data: T) {\n     fn get() -> T { ret data; }\n }\n "}, {"sha": "6653014b0246a3e2575ef95a3347833858c8bdd2", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj buf<T>(data: {_0: T, _1: T, _2: T}) {\n+obj buf<@T>(data: {_0: T, _1: T, _2: T}) {\n     fn get(i: int) -> T {\n         if i == 0 {\n             ret data._0;"}, {"sha": "ac15998c1ccddf18750ffd9b08bad4ebcf8245e7", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,4 +1,4 @@\n-fn get_third<T>(t: &(T, T, T)) -> T { let (_, _, x) = t; ret x; }\n+fn get_third<@T>(t: &(T, T, T)) -> T { let (_, _, x) = t; ret x; }\n \n fn main() {\n     log get_third((1, 2, 3));"}, {"sha": "b5304234b987e3970d64e00a66fb867d25329f57", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,5 +1,5 @@\n-fn quux<T>(x: &T) -> T { let f = id::<T>; ret f(x); }\n+fn quux<@T>(x: &T) -> T { let f = id::<T>; ret f(x); }\n \n-fn id<T>(x: &T) -> T { ret x; }\n+fn id<@T>(x: &T) -> T { ret x; }\n \n fn main() { assert (quux(10) == 10); }"}, {"sha": "27fbaee6a777646bd52deb7054b4143ae2770cd4", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -1,8 +1,8 @@\n tag myvec<X> = [X];\n \n-fn myvec_deref<X>(mv: &myvec<X>) -> [X] { ret *mv; }\n+fn myvec_deref<@X>(mv: &myvec<X>) -> [X] { ret *mv; }\n \n-fn myvec_elt<X>(mv: &myvec<X>) -> X { ret mv[0]; }\n+fn myvec_elt<@X>(mv: &myvec<X>) -> X { ret mv[0]; }\n \n fn main() {\n     let mv = myvec([1, 2, 3]);"}, {"sha": "841753d7ad19236730f343ef5848e779a5e7afb9", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "patch": "@@ -2,6 +2,6 @@\n \n tag option<T> { none; some(T); }\n \n-fn f<T>() -> option<T> { ret none; }\n+fn f<@T>() -> option<T> { ret none; }\n \n fn main() { f::<int>(); }"}]}