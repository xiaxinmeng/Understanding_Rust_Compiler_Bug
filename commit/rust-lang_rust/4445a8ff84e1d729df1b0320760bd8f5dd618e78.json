{"sha": "4445a8ff84e1d729df1b0320760bd8f5dd618e78", "node_id": "C_kwDOAAsO6NoAKDQ0NDVhOGZmODRlMWQ3MjlkZjFiMDMyMDc2MGJkOGY1ZGQ2MThlNzg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-02-07T14:08:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-07T14:08:33Z"}, "message": "Rollup merge of #93394 - m-ou-se:fix-93378, r=estebank\n\nDon't allow {} to refer to implicit captures in format_args.\n\nFixes #93378", "tree": {"sha": "bfb9137b3126a7f9246e2fea88910da93d9bf831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb9137b3126a7f9246e2fea88910da93d9bf831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4445a8ff84e1d729df1b0320760bd8f5dd618e78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiASfhCRBK7hj4Ov3rIwAATBoIAC0Xr1xmK9lb84vuuurfiLvA\nYhPUn55rDFX7q65opAaPzDRp+wy1KVd0mg25wuX5j94ag48bQgRif50Ph6N0yZrx\nxScje61+M1pd6G2si6iBoMvgK8YrhS221EQRNbqxp8SESlNfrC7VjNE7yfWMcOz4\nsIKb3phufASdUKq4r0J7kSVTB8EfUQNpXdCHZf9D/lAxBMmOFphbeHX+2xh1LEvh\nVF+/Da942jDEtVml5wKrRj/9hFU06AIPLeoSynuqgnKfBBK5vpfaLA7Y9q1+zN2I\nd88p3mgY64UmL4rFIMGQexoeUJ7GY86SPIc0rFoghs8JQhR8qXNVblhDqYcYe9U=\n=go0b\n-----END PGP SIGNATURE-----\n", "payload": "tree bfb9137b3126a7f9246e2fea88910da93d9bf831\nparent e3c972e2524319a1eec1bf905bf8aafa5cda7218\nparent cef9b4758386622c2c52df0920eea978786283a0\nauthor Mara Bos <m-ou.se@m-ou.se> 1644242913 +0000\ncommitter GitHub <noreply@github.com> 1644242913 +0000\n\nRollup merge of #93394 - m-ou-se:fix-93378, r=estebank\n\nDon't allow {} to refer to implicit captures in format_args.\n\nFixes #93378\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4445a8ff84e1d729df1b0320760bd8f5dd618e78", "html_url": "https://github.com/rust-lang/rust/commit/4445a8ff84e1d729df1b0320760bd8f5dd618e78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4445a8ff84e1d729df1b0320760bd8f5dd618e78/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c972e2524319a1eec1bf905bf8aafa5cda7218", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c972e2524319a1eec1bf905bf8aafa5cda7218", "html_url": "https://github.com/rust-lang/rust/commit/e3c972e2524319a1eec1bf905bf8aafa5cda7218"}, {"sha": "cef9b4758386622c2c52df0920eea978786283a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef9b4758386622c2c52df0920eea978786283a0", "html_url": "https://github.com/rust-lang/rust/commit/cef9b4758386622c2c52df0920eea978786283a0"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "584fbd1b605cd7e4d2af62b1bc062e1e488ad0e6", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4445a8ff84e1d729df1b0320760bd8f5dd618e78/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4445a8ff84e1d729df1b0320760bd8f5dd618e78/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=4445a8ff84e1d729df1b0320760bd8f5dd618e78", "patch": "@@ -25,6 +25,7 @@ enum ArgumentType {\n \n enum Position {\n     Exact(usize),\n+    Capture(usize),\n     Named(Symbol),\n }\n \n@@ -49,6 +50,8 @@ struct Context<'a, 'b> {\n     /// * `arg_unique_types` (in simplified JSON): `[[\"o\", \"x\"], [\"o\", \"x\"], [\"o\", \"x\"]]`\n     /// * `names` (in JSON): `{\"foo\": 2}`\n     args: Vec<P<ast::Expr>>,\n+    /// The number of arguments that were added by implicit capturing.\n+    num_captured_args: usize,\n     /// Placeholder slot numbers indexed by argument.\n     arg_types: Vec<Vec<usize>>,\n     /// Unique format specs seen for each argument.\n@@ -231,6 +234,11 @@ fn parse_args<'a>(\n }\n \n impl<'a, 'b> Context<'a, 'b> {\n+    /// The number of arguments that were explicitly given.\n+    fn num_args(&self) -> usize {\n+        self.args.len() - self.num_captured_args\n+    }\n+\n     fn resolve_name_inplace(&self, p: &mut parse::Piece<'_>) {\n         // NOTE: the `unwrap_or` branch is needed in case of invalid format\n         // arguments, e.g., `format_args!(\"{foo}\")`.\n@@ -345,7 +353,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn describe_num_args(&self) -> Cow<'_, str> {\n-        match self.args.len() {\n+        match self.num_args() {\n             0 => \"no arguments were given\".into(),\n             1 => \"there is 1 argument\".into(),\n             x => format!(\"there are {} arguments\", x).into(),\n@@ -371,7 +379,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         let count = self.pieces.len()\n             + self.arg_with_formatting.iter().filter(|fmt| fmt.precision_span.is_some()).count();\n-        if self.names.is_empty() && !numbered_position_args && count != self.args.len() {\n+        if self.names.is_empty() && !numbered_position_args && count != self.num_args() {\n             e = self.ecx.struct_span_err(\n                 sp,\n                 &format!(\n@@ -419,7 +427,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.precision_span {\n                 let span = self.fmtsp.from_inner(span);\n                 match fmt.precision {\n-                    parse::CountIsParam(pos) if pos > self.args.len() => {\n+                    parse::CountIsParam(pos) if pos > self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -462,7 +470,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.width_span {\n                 let span = self.fmtsp.from_inner(span);\n                 match fmt.width {\n-                    parse::CountIsParam(pos) if pos > self.args.len() => {\n+                    parse::CountIsParam(pos) if pos > self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -494,12 +502,15 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Actually verifies and tracks a given format placeholder\n     /// (a.k.a. argument).\n     fn verify_arg_type(&mut self, arg: Position, ty: ArgumentType) {\n+        if let Exact(arg) = arg {\n+            if arg >= self.num_args() {\n+                self.invalid_refs.push((arg, self.curpiece));\n+                return;\n+            }\n+        }\n+\n         match arg {\n-            Exact(arg) => {\n-                if self.args.len() <= arg {\n-                    self.invalid_refs.push((arg, self.curpiece));\n-                    return;\n-                }\n+            Exact(arg) | Capture(arg) => {\n                 match ty {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n@@ -526,7 +537,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 match self.names.get(&name) {\n                     Some(&idx) => {\n                         // Treat as positional arg.\n-                        self.verify_arg_type(Exact(idx), ty)\n+                        self.verify_arg_type(Capture(idx), ty)\n                     }\n                     None => {\n                         // For the moment capturing variables from format strings expanded from macros is\n@@ -541,9 +552,10 @@ impl<'a, 'b> Context<'a, 'b> {\n                             } else {\n                                 self.fmtsp\n                             };\n+                            self.num_captured_args += 1;\n                             self.args.push(self.ecx.expr_ident(span, Ident::new(name, span)));\n                             self.names.insert(name, idx);\n-                            self.verify_arg_type(Exact(idx), ty)\n+                            self.verify_arg_type(Capture(idx), ty)\n                         } else {\n                             let msg = format!(\"there is no argument named `{}`\", name);\n                             let sp = if self.is_literal {\n@@ -1051,6 +1063,7 @@ pub fn expand_preparsed_format_args(\n     let mut cx = Context {\n         ecx,\n         args,\n+        num_captured_args: 0,\n         arg_types,\n         arg_unique_types,\n         names,"}, {"sha": "6744444426472baeb402fd7a6a1a9919549183e0", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs?ref=4445a8ff84e1d729df1b0320760bd8f5dd618e78", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let a = \"a\";\n+    let b = \"b\";\n+\n+    println!(\"{a} {b} {} {} {c} {}\", c = \"c\");\n+    //~^ ERROR: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+\n+    let n = 1;\n+    println!(\"{a:.n$} {b:.*}\");\n+    //~^ ERROR: invalid reference to positional argument 0 (no arguments were given)\n+}"}, {"sha": "588541044fe136369d16006abb4fc805a979d822", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr?ref=4445a8ff84e1d729df1b0320760bd8f5dd618e78", "patch": "@@ -0,0 +1,22 @@\n+error: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+  --> $DIR/format-args-capture-issue-93378.rs:5:26\n+   |\n+LL |     println!(\"{a} {b} {} {} {c} {}\", c = \"c\");\n+   |                          ^^     ^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: invalid reference to positional argument 0 (no arguments were given)\n+  --> $DIR/format-args-capture-issue-93378.rs:9:23\n+   |\n+LL |     println!(\"{a:.n$} {b:.*}\");\n+   |               ------- ^^^--^\n+   |               |          |\n+   |               |          this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n+   |               this parameter corresponds to the precision flag\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d31d2a6c33657fff6b4975c399e33784cea5ccb2", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4445a8ff84e1d729df1b0320760bd8f5dd618e78/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=4445a8ff84e1d729df1b0320760bd8f5dd618e78", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     named_argument_takes_precedence_to_captured();\n     formatting_parameters_can_be_captured();\n     capture_raw_strings_and_idents();\n+    repeated_capture();\n \n     #[cfg(panic = \"unwind\")]\n     {\n@@ -80,3 +81,10 @@ fn formatting_parameters_can_be_captured() {\n     let s = format!(\"{x:-^width$.precision$}\");\n     assert_eq!(&s, \"--7.000--\");\n }\n+\n+fn repeated_capture() {\n+    let a = 1;\n+    let b = 2;\n+    let s = format!(\"{a} {b} {a}\");\n+    assert_eq!(&s, \"1 2 1\");\n+}"}]}