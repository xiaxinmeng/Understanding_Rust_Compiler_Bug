{"sha": "3e36dd89819762732572a8d69a0faec2bfd10ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzZkZDg5ODE5NzYyNzMyNTcyYThkNjlhMGZhZWMyYmZkMTBlYmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T01:26:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-30T01:26:39Z"}, "message": "Rollup merge of #38676 - rkruppe:llvm-check-success, r=alexcrichton\n\nCheck *all* errors in LLVMRustArchiveIterator* API\n\nIncrementing the `Archive::child_iterator` fetches and validates the next child.\nThis can trigger an error, which we previously checked on the *next* call to `LLVMRustArchiveIteratorNext()`.\nThis means we ignore the last error if we stop iterating halfway through.\nThis is harmless (we don't access the child, after all) but LLVM 4.0 calls `abort()` if *any* error goes unchecked, even a success value.\nThis means that basically any rustc invocation that opens an archive and searches through it would die.\n\nThe solution implemented here is to change the order of operations, such that\nadvancing the iterator and fetching the newly-validated iterator happens in the same `Next()` call.\nThis keeps the error handling behavior as before but ensures all `Error`s get checked.", "tree": {"sha": "ec00701669a5358f538c2d6df5e8906ac85238e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec00701669a5358f538c2d6df5e8906ac85238e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e36dd89819762732572a8d69a0faec2bfd10ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e36dd89819762732572a8d69a0faec2bfd10ebf", "html_url": "https://github.com/rust-lang/rust/commit/3e36dd89819762732572a8d69a0faec2bfd10ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e36dd89819762732572a8d69a0faec2bfd10ebf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41256c36f8da6eb04a2bae0d5629c624c6939a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41256c36f8da6eb04a2bae0d5629c624c6939a9", "html_url": "https://github.com/rust-lang/rust/commit/c41256c36f8da6eb04a2bae0d5629c624c6939a9"}, {"sha": "8d50857a6fd38669d85d85ba5172c6262430f4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d50857a6fd38669d85d85ba5172c6262430f4af", "html_url": "https://github.com/rust-lang/rust/commit/8d50857a6fd38669d85d85ba5172c6262430f4af"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "7304f384c61d601b771a18b4de0c784443e48e0c", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e36dd89819762732572a8d69a0faec2bfd10ebf/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3e36dd89819762732572a8d69a0faec2bfd10ebf/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=3e36dd89819762732572a8d69a0faec2bfd10ebf", "patch": "@@ -33,12 +33,15 @@ struct RustArchiveMember {\n \n \n struct RustArchiveIterator {\n+    bool first;\n     Archive::child_iterator cur;\n     Archive::child_iterator end;\n #if LLVM_VERSION_GE(3, 9)\n     Error err;\n \n-    RustArchiveIterator() : err(Error::success()) { }\n+    RustArchiveIterator() : first(true), err(Error::success()) { }\n+#else\n+    RustArchiveIterator() : first(true) { }\n #endif\n };\n \n@@ -120,6 +123,7 @@ LLVMRustArchiveIteratorNew(LLVMRustArchiveRef ra) {\n     rai->cur = ar->child_begin(rai->err);\n     if (rai->err) {\n         LLVMRustSetLastError(toString(std::move(rai->err)).c_str());\n+        delete rai;\n         return NULL;\n     }\n #endif\n@@ -129,27 +133,40 @@ LLVMRustArchiveIteratorNew(LLVMRustArchiveRef ra) {\n \n extern \"C\" LLVMRustArchiveChildConstRef\n LLVMRustArchiveIteratorNext(LLVMRustArchiveIteratorRef rai) {\n+    if (rai->cur == rai->end) return nullptr;\n+\n+    // Advancing the iterator validates the next child, and this can\n+    // uncover an error. LLVM requires that we check all Errors,\n+    // so we only advance the iterator if we actually need to fetch\n+    // the next child.\n+    // This means we must not advance the iterator in the *first* call,\n+    // but instead advance it *before* fetching the child in all later calls.\n+    if (!rai->first) {\n+        ++rai->cur;\n #if LLVM_VERSION_GE(3, 9)\n-    if (rai->err) {\n-        LLVMRustSetLastError(toString(std::move(rai->err)).c_str());\n-        return NULL;\n-    }\n+        if (rai->err) {\n+            LLVMRustSetLastError(toString(std::move(rai->err)).c_str());\n+            return nullptr;\n+        }\n #endif\n-    if (rai->cur == rai->end)\n-        return NULL;\n+    } else {\n+      rai->first = false;\n+    }\n+\n+    if (rai->cur == rai->end) return nullptr;\n+\n #if LLVM_VERSION_EQ(3, 8)\n     const ErrorOr<Archive::Child>* cur = rai->cur.operator->();\n     if (!*cur) {\n         LLVMRustSetLastError(cur->getError().message().c_str());\n-        return NULL;\n+        return nullptr;\n     }\n     const Archive::Child &child = cur->get();\n #else\n     const Archive::Child &child = *rai->cur.operator->();\n #endif\n     Archive::Child *ret = new Archive::Child(child);\n \n-    ++rai->cur;\n     return ret;\n }\n "}]}