{"sha": "2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOGI2MWRjZTZiMmRmZDk2NTc1MTgzY2ZkYzliZTAzZmRmMjFhNTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-15T17:15:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-15T17:15:17Z"}, "message": "Rollup merge of #55048 - ljedrz:begone_vecc, r=estebank\n\nDon't collect to vectors where unnecessary\n\nThis removes 3 vector allocations and a call to `cloned()`.", "tree": {"sha": "ebeaeaec63916651e9b30f10234b1015770294c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebeaeaec63916651e9b30f10234b1015770294c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxMslCRBK7hj4Ov3rIwAAdHIIAJSaAqmOQCfxeR2v+vhEwYuJ\nZqyl14MA+Lk0SGs32hfsBmVWkzi7RxbSt0vVY+qpwIn7K5SBjWn7wahj24eNMbWE\n7xp8Y2ybTJ1HmddUpMwv3mz0xsg12TNIsr94Kw1r5XZ51lV+u2NnrivtL9DaOHb4\nOENKWp25QxvrNaxUsJdQSxHIuzIA8g1dgeH8uCY/ZGBgVT5chXa5/P/+JX7SBd0M\nWUDTs7+mFgpY00y38LQH2S7DndrT9XY0IU86cFsEyOQVf5rVv3Kdk985l76F9zD+\nlrRoGWWy1hA0nDslmmdh4/7b2MXSmlcAA/cClLFgOIo3dDkf4vbKFSNzfBWIV0k=\n=QWIA\n-----END PGP SIGNATURE-----\n", "payload": "tree ebeaeaec63916651e9b30f10234b1015770294c6\nparent dc872475386c332e7bf2b2bb89edcccb7c8a305a\nparent 12b5c7b26dd5d9dd17a6f4241b5e8baf6d17a682\nauthor Manish Goregaokar <manishsmail@gmail.com> 1539623717 -0700\ncommitter GitHub <noreply@github.com> 1539623717 -0700\n\nRollup merge of #55048 - ljedrz:begone_vecc, r=estebank\n\nDon't collect to vectors where unnecessary\n\nThis removes 3 vector allocations and a call to `cloned()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "html_url": "https://github.com/rust-lang/rust/commit/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc872475386c332e7bf2b2bb89edcccb7c8a305a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc872475386c332e7bf2b2bb89edcccb7c8a305a", "html_url": "https://github.com/rust-lang/rust/commit/dc872475386c332e7bf2b2bb89edcccb7c8a305a"}, {"sha": "12b5c7b26dd5d9dd17a6f4241b5e8baf6d17a682", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b5c7b26dd5d9dd17a6f4241b5e8baf6d17a682", "html_url": "https://github.com/rust-lang/rust/commit/12b5c7b26dd5d9dd17a6f4241b5e8baf6d17a682"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "e99d65024967b7c63de2d8b9a564d17903190887", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "patch": "@@ -60,7 +60,6 @@ use util::nodemap::{DefIdMap, NodeMap};\n \n use std::collections::BTreeMap;\n use std::fmt::Debug;\n-use std::iter;\n use std::mem;\n use smallvec::SmallVec;\n use syntax::attr;\n@@ -3888,9 +3887,7 @@ impl<'a> LoweringContext<'a> {\n                     .collect::<P<[hir::Field]>>();\n \n                 let is_unit = fields.is_empty();\n-                let struct_path = iter::once(\"ops\")\n-                    .chain(iter::once(path))\n-                    .collect::<Vec<_>>();\n+                let struct_path = [\"ops\", path];\n                 let struct_path = self.std_path(e.span, &struct_path, None, is_unit);\n                 let struct_path = hir::QPath::Resolved(None, P(struct_path));\n "}, {"sha": "1e3f0a21cefb3ef3593d723eca5a8f2eed4c94ea", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "patch": "@@ -306,8 +306,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let wf_conditions = iter::once(ty::Binder::dummy(trait_pred.lower()))\n         .chain(\n             where_clauses\n-                .iter()\n-                .cloned()\n+                .into_iter()\n                 .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()))\n         );\n \n@@ -350,15 +349,13 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     // `WC`\n     let where_clauses = tcx.predicates_of(def_id).predicates\n         .into_iter()\n-        .map(|(wc, _)| wc.lower())\n-        .collect::<Vec<_>>();\n+        .map(|(wc, _)| wc.lower());\n \n     // `Implemented(A0: Trait<A1..An>) :- WC`\n     let clause = ProgramClause {\n         goal: trait_pred,\n         hypotheses: tcx.mk_goals(\n             where_clauses\n-                .into_iter()\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };"}, {"sha": "d82d36a1937bf4b5449249789643be1b5285e2e2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8b61dce6b2dfd96575183cfdc9be03fdf21a53/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=2e8b61dce6b2dfd96575183cfdc9be03fdf21a53", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // field is of the found type, suggest such variants. See Issue\n         // #42764.\n         if let ty::Adt(expected_adt, substs) = expected.sty {\n-            let compatible_variants = expected_adt.variants\n+            let mut compatible_variants = expected_adt.variants\n                                                   .iter()\n                                                   .filter(|variant| variant.fields.len() == 1)\n                                                   .filter_map(|variant| {\n@@ -127,12 +127,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     None\n                 }\n-            }).collect::<Vec<_>>();\n+            }).peekable();\n \n-            if !compatible_variants.is_empty() {\n+            if compatible_variants.peek().is_some() {\n                 let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n-                let suggestions = compatible_variants.iter()\n-                    .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                let suggestions = compatible_variants.map(|v|\n+                    format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n                 err.span_suggestions_with_applicability(\n                      expr.span,\n                      \"try using a variant of the expected type\","}]}