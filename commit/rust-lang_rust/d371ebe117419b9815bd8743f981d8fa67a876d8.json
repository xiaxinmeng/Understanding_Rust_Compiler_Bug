{"sha": "d371ebe117419b9815bd8743f981d8fa67a876d8", "node_id": "C_kwDOAAsO6NoAKGQzNzFlYmUxMTc0MTliOTgxNWJkODc0M2Y5ODFkOGZhNjdhODc2ZDg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-04T09:18:37Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-09T16:40:18Z"}, "message": "only compute `codegen_fn_attrs` where needed", "tree": {"sha": "c40fa0451f019a50abc7ca8edfaf0621dc7f96c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40fa0451f019a50abc7ca8edfaf0621dc7f96c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d371ebe117419b9815bd8743f981d8fa67a876d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d371ebe117419b9815bd8743f981d8fa67a876d8", "html_url": "https://github.com/rust-lang/rust/commit/d371ebe117419b9815bd8743f981d8fa67a876d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d371ebe117419b9815bd8743f981d8fa67a876d8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ff6c32e591c8084dcb63164446587c715d3e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ff6c32e591c8084dcb63164446587c715d3e47", "html_url": "https://github.com/rust-lang/rust/commit/66ff6c32e591c8084dcb63164446587c715d3e47"}], "stats": {"total": 205, "additions": 154, "deletions": 51}, "files": [{"sha": "433ef978b64a52c93d7fd50f6d87234f974e2f47", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -1007,7 +1007,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             self.encode_attrs(def_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n-            record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n+            if tcx.has_codegen_attrs(def_kind) {\n+                record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n+            }\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n             }"}, {"sha": "321fcd43797cc18f5feb7e0739264548dd9e29ee", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -95,7 +95,9 @@ bitflags! {\n }\n \n impl CodegenFnAttrs {\n-    pub fn new() -> CodegenFnAttrs {\n+    pub const EMPTY: &'static Self = &Self::new();\n+\n+    pub const fn new() -> CodegenFnAttrs {\n         CodegenFnAttrs {\n             flags: CodegenFnAttrFlags::empty(),\n             inline: InlineAttr::None,"}, {"sha": "f0710ef42de3cbb0d9661dbf3ec1e686ae2c8b21", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -246,7 +246,8 @@ impl<'tcx> InstanceDef<'tcx> {\n         match *self {\n             InstanceDef::Item(ty::WithOptConstParam { did: def_id, .. })\n             | InstanceDef::Virtual(def_id, _) => {\n-                tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+                tcx.has_codegen_attrs(tcx.def_kind(def_id))\n+                    && tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n             }\n             InstanceDef::ClosureOnceShim { call_once: _, track_caller } => track_caller,\n             _ => false,"}, {"sha": "646d4c9f8f546fb4a79f71539e6fca6a1c37f99f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -139,6 +139,42 @@ impl<'tcx> TyCtxt<'tcx> {\n         hasher.finish()\n     }\n \n+    pub fn has_codegen_attrs(self, def_kind: DefKind) -> bool {\n+        match def_kind {\n+            DefKind::Fn\n+            | DefKind::AssocFn\n+            | DefKind::Ctor(..)\n+            | DefKind::Closure\n+            | DefKind::Generator\n+            | DefKind::Static(_) => true,\n+            DefKind::Mod\n+            | DefKind::Struct\n+            | DefKind::Union\n+            | DefKind::Enum\n+            | DefKind::Variant\n+            | DefKind::Trait\n+            | DefKind::TyAlias\n+            | DefKind::ForeignTy\n+            | DefKind::TraitAlias\n+            | DefKind::AssocTy\n+            | DefKind::Const\n+            | DefKind::AssocConst\n+            | DefKind::Macro(..)\n+            | DefKind::Use\n+            | DefKind::ForeignMod\n+            | DefKind::OpaqueTy\n+            | DefKind::Impl\n+            | DefKind::Field\n+            | DefKind::TyParam\n+            | DefKind::ConstParam\n+            | DefKind::LifetimeParam\n+            | DefKind::AnonConst\n+            | DefKind::InlineConst\n+            | DefKind::GlobalAsm\n+            | DefKind::ExternCrate => false,\n+        }\n+    }\n+\n     pub fn res_generics_def_id(self, res: Res) -> Option<DefId> {\n         match res {\n             Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => {"}, {"sha": "b90eecefc0c52a4696a6a28e5ccb73bebffacdef", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -27,7 +27,7 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     body_unsafety: BodyUnsafety,\n     /// The `#[target_feature]` attributes of the body. Used for checking\n     /// calls to functions with `#[target_feature]` (RFC 2396).\n-    body_target_features: &'tcx Vec<Symbol>,\n+    body_target_features: &'tcx [Symbol],\n     /// When inside the LHS of an assignment to a field, this is the type\n     /// of the LHS and the span of the assignment expression.\n     assignment_info: Option<(Ty<'tcx>, Span)>,\n@@ -661,7 +661,11 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n             BodyUnsafety::Safe\n         }\n     });\n-    let body_target_features = &tcx.codegen_fn_attrs(def.did).target_features;\n+    let body_target_features: &[_] = if tcx.has_codegen_attrs(tcx.def_kind(def.did)) {\n+        &tcx.codegen_fn_attrs(def.did).target_features\n+    } else {\n+        &[]\n+    };\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n     let mut visitor = UnsafetyVisitor {"}, {"sha": "3f567633e4a7da8903f615f53fe2ea882c3267a9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -375,7 +375,12 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         }\n \n         let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;\n-        let self_features = &self.tcx.codegen_fn_attrs(self.body_did).target_features;\n+        // Constants don't have codegen attributes, so the body might not have codegen attributes.\n+        let self_features: &[_] = if self.tcx.has_codegen_attrs(self.tcx.def_kind(self.body_did)) {\n+            &self.tcx.codegen_fn_attrs(self.body_did).target_features\n+        } else {\n+            &[]\n+        };\n \n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {"}, {"sha": "72cbdbcf8cff18754134503e64a1e26a2a5f86b9", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -104,6 +104,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_allow_const_fn_unstable => {\n                     self.check_rustc_allow_const_fn_unstable(hir_id, &attr, span, target)\n                 }\n+                sym::rustc_std_internal_symbol => {\n+                    self.check_rustc_std_internal_symbol(&attr, span, target)\n+                }\n                 sym::naked => self.check_naked(hir_id, attr, span, target),\n                 sym::rustc_legacy_const_generics => {\n                     self.check_rustc_legacy_const_generics(&attr, span, target, item)\n@@ -193,6 +196,7 @@ impl CheckAttrVisitor<'_> {\n             return;\n         }\n \n+        // FIXME(@lcnr): this doesn't belong here.\n         if matches!(target, Target::Closure | Target::Fn | Target::Method(_) | Target::ForeignFn) {\n             self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n@@ -1659,7 +1663,7 @@ impl CheckAttrVisitor<'_> {\n                     }\n                 }\n                 sym::align => {\n-                    if let (Target::Fn, true) = (target, !self.tcx.features().fn_align) {\n+                    if let (Target::Fn, false) = (target, self.tcx.features().fn_align) {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,\n                             sym::fn_align,\n@@ -1980,6 +1984,25 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_rustc_std_internal_symbol(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Fn | Target::Static => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"attribute should be applied functions or statics\")\n+                    .span_label(span, \"not a function or static\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// default_method_body_is_const should only be applied to trait methods with default bodies.\n     fn check_default_method_body_is_const(\n         &self,"}, {"sha": "f0451352b4503d6476e211944ca15540eba43313", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -452,15 +452,17 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     }\n \n     let def_id = tcx.hir().local_def_id(id);\n-    let cg_attrs = tcx.codegen_fn_attrs(def_id);\n-\n-    // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n-    // forcefully, e.g., for placing it in a specific section.\n-    if cg_attrs.contains_extern_indicator()\n-        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n-        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n-    {\n-        return true;\n+    if tcx.has_codegen_attrs(tcx.def_kind(def_id)) {\n+        let cg_attrs = tcx.codegen_fn_attrs(def_id);\n+\n+        // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n+        // forcefully, e.g., for placing it in a specific section.\n+        if cg_attrs.contains_extern_indicator()\n+            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n+        {\n+            return true;\n+        }\n     }\n \n     tcx.lint_level_at_node(lint::builtin::DEAD_CODE, id).0 == lint::Allow"}, {"sha": "e9f4bfee3defff286f4ed129b669e4b621178c91", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -208,7 +208,11 @@ impl<'tcx> ReachableContext<'tcx> {\n                 } else {\n                     false\n                 };\n-            let codegen_attrs = self.tcx.codegen_fn_attrs(search_item);\n+            let codegen_attrs = if self.tcx.has_codegen_attrs(self.tcx.def_kind(search_item)) {\n+                self.tcx.codegen_fn_attrs(search_item)\n+            } else {\n+                CodegenFnAttrs::EMPTY\n+            };\n             let is_extern = codegen_attrs.contains_extern_indicator();\n             let std_internal =\n                 codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n@@ -329,16 +333,18 @@ impl CollectPrivateImplItemsVisitor<'_, '_> {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n-        if codegen_attrs.contains_extern_indicator()\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n-            // FIXME(nbdd0121): `#[used]` are marked as reachable here so it's picked up by\n-            // `linked_symbols` in cg_ssa. They won't be exported in binary or cdylib due to their\n-            // `SymbolExportLevel::Rust` export level but may end up being exported in dylibs.\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n-        {\n-            self.worklist.push(def_id);\n+        if self.tcx.has_codegen_attrs(self.tcx.def_kind(def_id)) {\n+            let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n+            if codegen_attrs.contains_extern_indicator()\n+                || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n+                // FIXME(nbdd0121): `#[used]` are marked as reachable here so it's picked up by\n+                // `linked_symbols` in cg_ssa. They won't be exported in binary or cdylib due to their\n+                // `SymbolExportLevel::Rust` export level but may end up being exported in dylibs.\n+                || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+                || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n+            {\n+                self.worklist.push(def_id);\n+            }\n         }\n     }\n }"}, {"sha": "2936b6775d1118762c1e13b25a6a13768f58a662", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -96,8 +96,10 @@\n #[macro_use]\n extern crate rustc_middle;\n \n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -175,7 +177,11 @@ fn compute_symbol_name<'tcx>(\n     }\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n-    let attrs = tcx.codegen_fn_attrs(def_id);\n+    let attrs = if tcx.has_codegen_attrs(tcx.def_kind(def_id)) {\n+        tcx.codegen_fn_attrs(def_id)\n+    } else {\n+        CodegenFnAttrs::EMPTY\n+    };\n \n     // Foreign items by default use no mangling for their symbol name. There's a\n     // few exceptions to this rule though:\n@@ -213,20 +219,25 @@ fn compute_symbol_name<'tcx>(\n         return tcx.item_name(def_id).to_string();\n     }\n \n-    let avoid_cross_crate_conflicts =\n-        // If this is an instance of a generic function, we also hash in\n-        // the ID of the instantiating crate. This avoids symbol conflicts\n-        // in case the same instances is emitted in two crates of the same\n-        // project.\n-        is_generic(substs) ||\n+    // If we're dealing with an instance of a function that's inlined from\n+    // another crate but we're marking it as globally shared to our\n+    // compilation (aka we're not making an internal copy in each of our\n+    // codegen units) then this symbol may become an exported (but hidden\n+    // visibility) symbol. This means that multiple crates may do the same\n+    // and we want to be sure to avoid any symbol conflicts here.\n+    let is_globally_shared_function = matches!(\n+        tcx.def_kind(instance.def_id()),\n+        DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator | DefKind::Ctor(..)\n+    ) && matches!(\n+        MonoItem::Fn(instance).instantiation_mode(tcx),\n+        InstantiationMode::GloballyShared { may_conflict: true }\n+    );\n \n-        // If we're dealing with an instance of a function that's inlined from\n-        // another crate but we're marking it as globally shared to our\n-        // compilation (aka we're not making an internal copy in each of our\n-        // codegen units) then this symbol may become an exported (but hidden\n-        // visibility) symbol. This means that multiple crates may do the same\n-        // and we want to be sure to avoid any symbol conflicts here.\n-        matches!(MonoItem::Fn(instance).instantiation_mode(tcx), InstantiationMode::GloballyShared { may_conflict: true });\n+    // If this is an instance of a generic function, we also hash in\n+    // the ID of the instantiating crate. This avoids symbol conflicts\n+    // in case the same instances is emitted in two crates of the same\n+    // project.\n+    let avoid_cross_crate_conflicts = is_generic(substs) || is_globally_shared_function;\n \n     let instantiating_crate =\n         if avoid_cross_crate_conflicts { Some(compute_instantiating_crate()) } else { None };"}, {"sha": "7be5d7b8e9780450d2cb6266a7e13ce022a1cd30", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d371ebe117419b9815bd8743f981d8fa67a876d8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d371ebe117419b9815bd8743f981d8fa67a876d8", "patch": "@@ -2720,6 +2720,14 @@ fn linkage_by_name(tcx: TyCtxt<'_>, def_id: LocalDefId, name: &str) -> Linkage {\n }\n \n fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n+    if cfg!(debug_assertions) {\n+        let def_kind = tcx.def_kind(did);\n+        assert!(\n+            tcx.has_codegen_attrs(def_kind),\n+            \"unexpected `def_kind` in `codegen_fn_attrs`: {def_kind:?}\",\n+        );\n+    }\n+\n     let did = did.expect_local();\n     let attrs = tcx.hir().attrs(tcx.hir().local_def_id_to_hir_id(did));\n     let mut codegen_fn_attrs = CodegenFnAttrs::new();\n@@ -3223,19 +3231,22 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n \n /// Computes the set of target features used in a function for the purposes of\n /// inline assembly.\n-fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, id: DefId) -> &'tcx FxHashSet<Symbol> {\n+fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx FxHashSet<Symbol> {\n     let mut target_features = tcx.sess.target_features.clone();\n-    let attrs = tcx.codegen_fn_attrs(id);\n-    target_features.extend(&attrs.target_features);\n-    match attrs.instruction_set {\n-        None => {}\n-        Some(InstructionSetAttr::ArmA32) => {\n-            target_features.remove(&sym::thumb_mode);\n-        }\n-        Some(InstructionSetAttr::ArmT32) => {\n-            target_features.insert(sym::thumb_mode);\n+    if tcx.has_codegen_attrs(tcx.def_kind(did)) {\n+        let attrs = tcx.codegen_fn_attrs(did);\n+        target_features.extend(&attrs.target_features);\n+        match attrs.instruction_set {\n+            None => {}\n+            Some(InstructionSetAttr::ArmA32) => {\n+                target_features.remove(&sym::thumb_mode);\n+            }\n+            Some(InstructionSetAttr::ArmT32) => {\n+                target_features.insert(sym::thumb_mode);\n+            }\n         }\n     }\n+\n     tcx.arena.alloc(target_features)\n }\n "}]}