{"sha": "86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTU1YjE4ODJhYzQ5MmQ2MjM0ZTVjNWY5N2M3ZjE1MWExMWY1ZDI=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-25T00:35:02Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-27T19:51:55Z"}, "message": "Always use consteval to codegen caller_location.", "tree": {"sha": "f9a58f52acd400673a71187d0c47d2579d1d256c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a58f52acd400673a71187d0c47d2579d1d256c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "html_url": "https://github.com/rust-lang/rust/commit/86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017877cbbe7903beb483f13678aedae1e40b6ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/017877cbbe7903beb483f13678aedae1e40b6ab0", "html_url": "https://github.com/rust-lang/rust/commit/017877cbbe7903beb483f13678aedae1e40b6ab0"}], "stats": {"total": 129, "additions": 66, "deletions": 63}, "files": [{"sha": "aa37cbb92a7246fca0eee494578c2046a5d90e3d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -466,6 +466,12 @@ rustc_queries! {\n             no_force\n             desc { \"extract field of const\" }\n         }\n+\n+        query const_caller_location(key: (syntax_pos::Symbol, u32, u32)) -> &'tcx ty::Const<'tcx> {\n+            eval_always\n+            no_force\n+            desc { \"get a &core::panic::Location referring to a span\" }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "a9e0a5d6ab564b4a1f8247e4e96cf0b26ef6f9b0", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -208,3 +208,13 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n         DUMMY_SP\n     }\n }\n+\n+impl Key for (Symbol, u32, u32) {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}"}, {"sha": "312c41b88b0924601c3620b121e5ebf648ed7a65", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -2,7 +2,6 @@ use crate::llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope};\n use crate::llvm::{self, False, BasicBlock};\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n-use crate::syntax_pos::Pos;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -24,7 +23,6 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n-use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -1068,20 +1066,6 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n         // Forward to the `get_static` method of `CodegenCx`\n         self.cx().get_static(def_id)\n     }\n-\n-    fn static_panic_location(&mut self, loc: &syntax::source_map::Loc) -> Self::Value {\n-        let filename = Symbol::intern(&loc.file.name.to_string());\n-        let filename = self.const_str(filename);\n-        let line = self.const_u32(loc.line as u32);\n-        let col = self.const_u32(loc.col.to_usize() as u32 + 1);\n-        let struct_ = self.const_struct(&[filename.0, filename.1, line, col], false);\n-\n-        let align = self.tcx.data_layout.aggregate_align.abi\n-            .max(self.tcx.data_layout.i32_align.abi)\n-            .max(self.tcx.data_layout.pointer_align.abi);\n-        // FIXME(eddyb) move this into miri, it can be correct if e.g. field order changes\n-        self.static_addr_of(struct_, align, Some(\"panic_loc\"))\n-    }\n }\n \n impl Builder<'a, 'll, 'tcx> {"}, {"sha": "79855311f370a9470dbb6ef7fcbd71bbb5c5dde6", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -15,7 +15,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::Symbol;\n+use syntax::{source_map::Span, symbol::Symbol};\n \n use super::{FunctionCx, LocalRef};\n use super::place::PlaceRef;\n@@ -420,8 +420,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(&mut bx, terminator.source_info);\n \n         // Get the location information.\n-        let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let location = bx.static_panic_location(&loc);\n+        let location = self.get_caller_location(&mut bx, span).immediate();\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match msg {\n@@ -534,11 +533,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n-                let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-\n                 let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n                 let msg = bx.const_str(Symbol::intern(&msg_str));\n-                let location = bx.static_panic_location(&loc);\n+                let location = self.get_caller_location(&mut bx, span).immediate();\n \n                 // Obtain the panic entry point.\n                 let def_id =\n@@ -584,13 +581,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         if intrinsic == Some(\"caller_location\") {\n             if let Some((_, target)) = destination.as_ref() {\n-                let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let location = bx.static_panic_location(&loc);\n+                let location = self.get_caller_location(&mut bx, span);\n \n                 if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n-                    Immediate(location).store(&mut bx, tmp);\n+                    location.val.store(&mut bx, tmp);\n                 }\n-                self.store_return(&mut bx, ret_dest, &fn_ty.ret, location);\n+                self.store_return(&mut bx, ret_dest, &fn_ty.ret, location.immediate());\n \n                 helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n                 helper.funclet_br(self, &mut bx, *target);\n@@ -994,6 +990,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n+    fn get_caller_location(\n+        &mut self,\n+        bx: &mut Bx,\n+        span: Span,\n+    ) -> OperandRef<'tcx, Bx::Value> {\n+        let caller = bx.tcx().sess.source_map().lookup_char_pos(span.lo());\n+        let const_loc = bx.tcx().const_caller_location((\n+            Symbol::intern(&caller.file.name.to_string()),\n+            caller.line as u32,\n+            caller.col_display as u32 + 1,\n+        ));\n+        OperandRef::from_const(bx, const_loc)\n+    }\n+\n     fn get_personality_slot(\n         &mut self,\n         bx: &mut Bx"}, {"sha": "5c108f9fa6cc532c39da506f30e6a2c3cdda835c", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -1,5 +1,4 @@\n use super::BackendTypes;\n-use syntax::source_map::Loc;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -10,5 +9,4 @@ pub trait StaticMethods: BackendTypes {\n \n pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n-    fn static_panic_location(&mut self, loc: &Loc) -> Self::Value;\n }"}, {"sha": "89bdf7391c3e8bd6b6af49064593f71cb1ed3243", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -18,7 +18,7 @@ use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n use crate::interpret::eval_nullary_intrinsic;\n \n-use syntax::source_map::{Span, DUMMY_SP};\n+use syntax::{source_map::{Span, DUMMY_SP}, symbol::Symbol};\n \n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar, Pointer,\n@@ -159,11 +159,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n-    intern_const_alloc_recursive(\n-        ecx,\n-        cid.instance.def_id(),\n-        ret,\n-    )?;\n+    intern_const_alloc_recursive(ecx, tcx.static_mutability(cid.instance.def_id()), ret)?;\n \n     debug!(\"eval_body_using_ecx done: {:?}\", *ret);\n     Ok(ret)"}, {"sha": "924529d7f55794a7fdd6500b0fd727b6c4e2692d", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -6,7 +6,6 @@\n use rustc::ty::{Ty, self};\n use rustc::mir::interpret::{InterpResult, ErrorHandled};\n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use super::validity::RefTracking;\n use rustc_data_structures::fx::FxHashSet;\n \n@@ -270,12 +269,12 @@ for\n \n pub fn intern_const_alloc_recursive(\n     ecx: &mut CompileTimeEvalContext<'mir, 'tcx>,\n-    def_id: DefId,\n+    // The `mutability` of the place, ignoring the type.\n+    place_mut: Option<hir::Mutability>,\n     ret: MPlaceTy<'tcx>,\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n-    // this `mutability` is the mutability of the place, ignoring the type\n-    let (base_mutability, base_intern_mode) = match tcx.static_mutability(def_id) {\n+    let (base_mutability, base_intern_mode) = match place_mut {\n         Some(hir::Mutability::MutImmutable) => (Mutability::Immutable, InternMode::Static),\n         // `static mut` doesn't care about interior mutability, it's mutable anyway\n         Some(hir::Mutability::MutMutable) => (Mutability::Mutable, InternMode::Static),"}, {"sha": "519f4f0322228e9474d7c45f674eaec7e09c7496", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -98,7 +98,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n             \"caller_location\" => {\n-                self.write_caller_location(span, dest)?;\n+                let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+                let location = self.alloc_caller_location(\n+                    Symbol::intern(&caller.file.name.to_string()),\n+                    caller.line as u32,\n+                    caller.col_display as u32 + 1,\n+                )?;\n+                self.write_scalar(location.ptr, dest)?;\n             }\n \n             \"min_align_of\" |"}, {"sha": "249d2f9ff536a510ef6c0a9867172ee9eb0953ac", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -2,23 +2,19 @@ use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{Pointer, PointerArithmetic, Scalar};\n use rustc::ty::subst::Subst;\n use rustc_target::abi::{LayoutOf, Size};\n-use syntax_pos::Span;\n+use syntax_pos::Symbol;\n \n-use crate::interpret::{\n-    MemoryKind,\n-    intrinsics::{InterpCx, InterpResult, Machine, PlaceTy},\n-};\n+use crate::interpret::{MemoryKind, MPlaceTy, intrinsics::{InterpCx, InterpResult, Machine}};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n-    pub fn write_caller_location(\n+    pub fn alloc_caller_location(\n         &mut self,\n-        span: Span,\n-        dest: PlaceTy<'tcx, M::PointerTag>,\n-    ) -> InterpResult<'tcx> {\n-        let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n-        let filename = caller.file.name.to_string();\n-        let line = Scalar::from_u32(caller.line as u32);\n-        let col = Scalar::from_u32(caller.col_display as u32 + 1);\n+        filename: Symbol,\n+        line: u32,\n+        col: u32,\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let line = Scalar::from_u32(line);\n+        let col = Scalar::from_u32(col);\n \n         let ptr_size = self.pointer_size();\n         let u32_size = Size::from_bits(32);\n@@ -27,10 +23,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_static.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty)?;\n \n-        let file_alloc = self.tcx.allocate_bytes(filename.as_bytes());\n+        let file_alloc = self.tcx.allocate_bytes(filename.as_str().as_bytes());\n         let file_ptr = Pointer::new(file_alloc, Size::ZERO);\n         let file = Scalar::Ptr(self.tag_static_base_pointer(file_ptr));\n-        let file_len = Scalar::from_uint(filename.len() as u128, ptr_size);\n+        let file_len = Scalar::from_uint(filename.as_str().len() as u128, ptr_size);\n \n         let location = self.allocate(loc_layout, MemoryKind::Stack);\n \n@@ -48,7 +44,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         alloc.write_scalar(layout, line_out, line.into(), u32_size)?;\n         alloc.write_scalar(layout, col_out, col.into(), u32_size)?;\n \n-        self.write_scalar(location.ptr, dest)?;\n-        Ok(())\n+        Ok(location)\n     }\n }"}, {"sha": "4d604cb025c8e66592e32825254d12fb080fed5f", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -58,6 +58,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval = const_eval::const_eval_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n+    providers.const_caller_location = const_eval::const_caller_location;\n     providers.const_field = |tcx, param_env_and_value| {\n         let (param_env, (value, field)) = param_env_and_value.into_parts();\n         const_eval::const_field(tcx, param_env, None, field, value)"}, {"sha": "76cc7062d3b8792145f1eb08e434b12d72ff10e0", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e55b1882ac492d6234e5c5f97c7f151a11f5d2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=86e55b1882ac492d6234e5c5f97c7f151a11f5d2", "patch": "@@ -1,7 +1,6 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n-use rustc::hir::{self, Mutability};\n use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n@@ -11,6 +10,8 @@ use crate::require_same_types;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::Symbol;\n \n+use rustc::hir;\n+\n use std::iter;\n \n fn equate_intrinsic_type<'tcx>(\n@@ -146,13 +147,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             \"caller_location\" => (\n                 0,\n                 vec![],\n-                tcx.mk_ref(\n+                tcx.mk_imm_ref(\n                     tcx.lifetimes.re_static,\n-                    ty::TypeAndMut {\n-                        mutbl: Mutability::MutImmutable,\n-                        ty: tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n-                            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n-                    },\n+                    tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n+                        .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n                 ),\n             ),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),"}]}