{"sha": "aa9210d25afb3779e1d95722b73b62a7be6274fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOTIxMGQyNWFmYjM3NzllMWQ5NTcyMmI3M2I2MmE3YmU2Mjc0ZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-22T02:40:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-25T00:07:01Z"}, "message": "std: Rewrite vec_reserve_shared_actual in Rust", "tree": {"sha": "d15d99ce3ef4e28d96b5301e79f1d02fc91ef2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15d99ce3ef4e28d96b5301e79f1d02fc91ef2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9210d25afb3779e1d95722b73b62a7be6274fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9210d25afb3779e1d95722b73b62a7be6274fe", "html_url": "https://github.com/rust-lang/rust/commit/aa9210d25afb3779e1d95722b73b62a7be6274fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9210d25afb3779e1d95722b73b62a7be6274fe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95eb01957bf23922abdf083f677c6c2d6927713a", "url": "https://api.github.com/repos/rust-lang/rust/commits/95eb01957bf23922abdf083f677c6c2d6927713a", "html_url": "https://github.com/rust-lang/rust/commit/95eb01957bf23922abdf083f677c6c2d6927713a"}], "stats": {"total": 112, "additions": 67, "deletions": 45}, "files": [{"sha": "18dfbd82c5ae7273765c05936a63e82372dfe657", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -23,20 +23,6 @@ use vec;\n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n \n-pub mod rustrt {\n-    use libc;\n-    use sys;\n-    use vec;\n-\n-    #[abi = \"cdecl\"]\n-    #[link_name = \"rustrt\"]\n-    pub extern {\n-        pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n-                                                v: **vec::raw::VecRepr,\n-                                                n: libc::size_t);\n-    }\n-}\n-\n /// Returns the number of elements the vector can hold without reallocating\n #[inline]\n pub fn capacity<T>(v: @[T]) -> uint {\n@@ -189,14 +175,16 @@ pub mod traits {\n pub mod traits {}\n \n pub mod raw {\n-    use at_vec::{capacity, rustrt};\n+    use at_vec::capacity;\n     use cast::{transmute, transmute_copy};\n     use libc;\n     use ptr;\n     use sys;\n     use uint;\n     use unstable::intrinsics::{move_val_init};\n     use vec;\n+    use vec::UnboxedVecRepr;\n+    use sys::TypeDesc;\n \n     pub type VecRepr = vec::raw::VecRepr;\n     pub type SliceRepr = vec::raw::SliceRepr;\n@@ -257,9 +245,47 @@ pub mod raw {\n     pub unsafe fn reserve<T>(v: &mut @[T], n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(*v) < n {\n-            let ptr: **VecRepr = transmute(v);\n-            rustrt::vec_reserve_shared_actual(sys::get_type_desc::<T>(),\n-                                              ptr, n as libc::size_t);\n+            let ptr: *mut *mut VecRepr = transmute(v);\n+            let ty = sys::get_type_desc::<T>();\n+            return reserve_raw(ty, ptr, n);\n+        }\n+    }\n+\n+    // Implementation detail. Shouldn't be public\n+    #[allow(missing_doc)]\n+    pub fn reserve_raw(ty: *TypeDesc, ptr: *mut *mut VecRepr, n: uint) {\n+\n+        unsafe {\n+            let size_in_bytes = n * (*ty).size;\n+            if size_in_bytes > (**ptr).unboxed.alloc {\n+                let total_size = size_in_bytes + sys::size_of::<UnboxedVecRepr>();\n+                // XXX: UnboxedVecRepr has an extra u8 at the end\n+                let total_size = total_size - sys::size_of::<u8>();\n+                (*ptr) = local_realloc(*ptr as *(), total_size) as *mut VecRepr;\n+                (**ptr).unboxed.alloc = size_in_bytes;\n+            }\n+        }\n+\n+        fn local_realloc(ptr: *(), size: uint) -> *() {\n+            use rt;\n+            use rt::OldTaskContext;\n+            use rt::local::Local;\n+            use rt::task::Task;\n+\n+            if rt::context() == OldTaskContext {\n+                unsafe {\n+                    return rust_local_realloc(ptr, size as libc::size_t);\n+                }\n+\n+                extern {\n+                    #[fast_ffi]\n+                    fn rust_local_realloc(ptr: *(), size: libc::size_t) -> *();\n+                }\n+            } else {\n+                do Local::borrow::<Task, *()> |task| {\n+                    task.heap.realloc(ptr as *libc::c_void, size) as *()\n+                }\n+            }\n         }\n     }\n "}, {"sha": "38cd25f9da5d0362ff2ee423cec47485615817b1", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -49,6 +49,12 @@ impl LocalHeap {\n         }\n     }\n \n+    pub fn realloc(&mut self, ptr: *OpaqueBox, size: uint) -> *OpaqueBox {\n+        unsafe {\n+            return rust_boxed_region_realloc(self.boxed_region, ptr, size as size_t);\n+        }\n+    }\n+\n     pub fn free(&mut self, box: *OpaqueBox) {\n         unsafe {\n             return rust_boxed_region_free(self.boxed_region, box);\n@@ -76,5 +82,8 @@ extern {\n     fn rust_boxed_region_malloc(region: *BoxedRegion,\n                                 td: *TypeDesc,\n                                 size: size_t) -> *OpaqueBox;\n+    fn rust_boxed_region_realloc(region: *BoxedRegion,\n+                                 ptr: *OpaqueBox,\n+                                 size: size_t) -> *OpaqueBox;\n     fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n }"}, {"sha": "4339153c43ee4b2882a337ebeb99547d68a473ad", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -48,12 +48,8 @@ pub mod rustrt {\n         // to ~[] and reserve_shared_actual applies to @[].\n         #[fast_ffi]\n         unsafe fn vec_reserve_shared(t: *sys::TypeDesc,\n-                                     v: **raw::VecRepr,\n+                                     v: *mut *mut raw::VecRepr,\n                                      n: libc::size_t);\n-        #[fast_ffi]\n-        unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n-                                            v: **raw::VecRepr,\n-                                            n: libc::size_t);\n     }\n }\n \n@@ -79,11 +75,11 @@ pub fn reserve<T>(v: &mut ~[T], n: uint) {\n     use managed;\n     if capacity(v) < n {\n         unsafe {\n-            let ptr: **raw::VecRepr = cast::transmute(v);\n+            let ptr: *mut *mut raw::VecRepr = cast::transmute(v);\n             let td = sys::get_type_desc::<T>();\n             if ((**ptr).box_header.ref_count ==\n                 managed::raw::RC_MANAGED_UNIQUE) {\n-                rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);\n+                ::at_vec::raw::reserve_raw(td, ptr, n);\n             } else {\n                 rustrt::vec_reserve_shared(td, ptr, n as libc::size_t);\n             }"}, {"sha": "9ed389b178aedfe34897ce98bcdc92e926ae2bdc", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -68,11 +68,10 @@ rust_env_pairs() {\n }\n #endif\n \n-extern \"C\" CDECL void\n-vec_reserve_shared_actual(type_desc* ty, rust_vec_box** vp,\n-                          size_t n_elts) {\n+extern \"C\" CDECL void *\n+rust_local_realloc(rust_opaque_box *ptr, size_t size) {\n     rust_task *task = rust_get_current_task();\n-    reserve_vec_exact_shared(task, vp, n_elts * ty->size);\n+    return task->boxed.realloc(ptr, size);\n }\n \n // This is completely misnamed.\n@@ -899,6 +898,11 @@ rust_boxed_region_malloc(boxed_region *region, type_desc *td, size_t size) {\n     return region->malloc(td, size);\n }\n \n+extern \"C\" CDECL rust_opaque_box*\n+rust_boxed_region_realloc(boxed_region *region, rust_opaque_box *ptr, size_t size) {\n+    return region->realloc(ptr, size);\n+}\n+\n extern \"C\" CDECL void\n rust_boxed_region_free(boxed_region *region, rust_opaque_box *box) {\n     region->free(box);"}, {"sha": "242c2ef0a81adedcaf554307223f74d1b79a43ca", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -57,16 +57,6 @@ vec_data(rust_vec *v) {\n     return reinterpret_cast<T*>(v->data);\n }\n \n-inline void reserve_vec_exact_shared(rust_task* task, rust_vec_box** vpp,\n-                                     size_t size) {\n-    rust_opaque_box** ovpp = (rust_opaque_box**)vpp;\n-    if (size > (*vpp)->body.alloc) {\n-        *vpp = (rust_vec_box*)task->boxed.realloc(\n-            *ovpp, size + sizeof(rust_vec));\n-        (*vpp)->body.alloc = size;\n-    }\n-}\n-\n inline void reserve_vec_exact(rust_vec_box** vpp,\n                               size_t size) {\n     if (size > (*vpp)->body.alloc) {"}, {"sha": "9add8d537af0c06b461667f7940a9be9ebd3fcbc", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -53,7 +53,7 @@ rust_get_stack_segment\n rust_get_c_stack\n rust_log_str\n start_task\n-vec_reserve_shared_actual\n+rust_local_realloc\n vec_reserve_shared\n task_clear_event_reject\n task_wait_event\n@@ -231,6 +231,7 @@ rust_delete_memory_region\n rust_new_boxed_region\n rust_delete_boxed_region\n rust_boxed_region_malloc\n+rust_boxed_region_realloc\n rust_boxed_region_free\n rust_try\n rust_begin_unwind"}, {"sha": "e722c4f5c6a9026962e9bb334f05233bb912d3b0", "filename": "src/test/run-pass/extern-pub.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9210d25afb3779e1d95722b73b62a7be6274fe/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pub.rs?ref=aa9210d25afb3779e1d95722b73b62a7be6274fe", "patch": "@@ -1,11 +1,7 @@\n use std::libc;\n-use std::sys;\n-use std::vec;\n \n extern {\n-    pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n-                                            v: **vec::raw::VecRepr,\n-                                            n: libc::size_t);\n+    pub unsafe fn debug_get_stk_seg() -> *libc::c_void;\n }\n \n pub fn main() {"}]}