{"sha": "c2359608c926d4828f2b112e7069978449851d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMzU5NjA4YzkyNmQ0ODI4ZjJiMTEyZTcwNjk5Nzg0NDk4NTFkNTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T16:05:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T16:05:23Z"}, "message": "Merge #7944\n\n7944: Selecting `&mut foo` completion now actually inserts `&mut` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ccb62a1da7516ce170e6ddf8481154465c7abba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb62a1da7516ce170e6ddf8481154465c7abba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2359608c926d4828f2b112e7069978449851d58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR5zDCRBK7hj4Ov3rIwAAdHIIAKmnLPL7iVEjWosnQ/o+lV4P\n4v+2J07JrbUfD+RZyHJ5cldOb9flWJXoavyy6OvVKlInwKZCWUYrIfqIf9m845Nd\nUGT1NJPnIAhPLRcbW/0/oBEc/GZasKrrnSoNybbQzV1MsFdn85t0Ty9YEOF4Fx5k\nKGWqNsYOv99yhmzcASu8i/034AJUSQopBu9/rrtMq66glquMUtHcNpzEBx8EWp+l\nbbq9Ya91sp69hT4GEPRlSAjGgaxtqg1s3Zr4AIUzbSobfOzscwFWAn8H4eyXqR0c\nBsw13dF5TCK4ESQDNwWYAzt6gYo2EyinM2BtseoQt5/sW3VcMWM7EY48rh9VGHk=\n=h0aB\n-----END PGP SIGNATURE-----\n", "payload": "tree ccb62a1da7516ce170e6ddf8481154465c7abba5\nparent 472641fc5beee1f998d46de70351bcb572d6226c\nparent 73b9937e4eea2633005e7d2814cb7990e5f20e8f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615305923 +0000\ncommitter GitHub <noreply@github.com> 1615305923 +0000\n\nMerge #7944\n\n7944: Selecting `&mut foo` completion now actually inserts `&mut` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2359608c926d4828f2b112e7069978449851d58", "html_url": "https://github.com/rust-lang/rust/commit/c2359608c926d4828f2b112e7069978449851d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2359608c926d4828f2b112e7069978449851d58/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472641fc5beee1f998d46de70351bcb572d6226c", "url": "https://api.github.com/repos/rust-lang/rust/commits/472641fc5beee1f998d46de70351bcb572d6226c", "html_url": "https://github.com/rust-lang/rust/commit/472641fc5beee1f998d46de70351bcb572d6226c"}, {"sha": "73b9937e4eea2633005e7d2814cb7990e5f20e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b9937e4eea2633005e7d2814cb7990e5f20e8f", "html_url": "https://github.com/rust-lang/rust/commit/73b9937e4eea2633005e7d2814cb7990e5f20e8f"}], "stats": {"total": 148, "additions": 103, "deletions": 45}, "files": [{"sha": "641ea422169cd3ffa06f194ef75828a7d379dc89", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2359608c926d4828f2b112e7069978449851d58/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2359608c926d4828f2b112e7069978449851d58/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c2359608c926d4828f2b112e7069978449851d58", "patch": "@@ -1614,10 +1614,9 @@ impl Type {\n     }\n \n     pub fn remove_ref(&self) -> Option<Type> {\n-        if let Ty::Ref(.., substs) = &self.ty.value {\n-            Some(self.derived(substs[0].clone()))\n-        } else {\n-            None\n+        match &self.ty.value {\n+            Ty::Ref(.., substs) => Some(self.derived(substs[0].clone())),\n+            _ => None,\n         }\n     }\n "}, {"sha": "5e8ed75f1ee0fd9f0de5c9a5497a5ed7c9c9c1a8", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2359608c926d4828f2b112e7069978449851d58/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2359608c926d4828f2b112e7069978449851d58/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=c2359608c926d4828f2b112e7069978449851d58", "patch": "@@ -68,7 +68,7 @@ pub struct CompletionItem {\n \n     /// Indicates that a reference or mutable reference to this variable is a\n     /// possible match.\n-    ref_match: Option<(Mutability, CompletionScore)>,\n+    ref_match: Option<Mutability>,\n \n     /// The import data to add to completion's edits.\n     import_to_add: Option<ImportEdit>,\n@@ -104,6 +104,9 @@ impl fmt::Debug for CompletionItem {\n         if let Some(score) = &self.score {\n             s.field(\"score\", score);\n         }\n+        if let Some(mutability) = &self.ref_match {\n+            s.field(\"ref_match\", &format!(\"&{}\", mutability.as_keyword_for_ref()));\n+        }\n         if self.trigger_call_info {\n             s.field(\"trigger_call_info\", &true);\n         }\n@@ -261,7 +264,7 @@ impl CompletionItem {\n         self.trigger_call_info\n     }\n \n-    pub fn ref_match(&self) -> Option<(Mutability, CompletionScore)> {\n+    pub fn ref_match(&self) -> Option<Mutability> {\n         self.ref_match\n     }\n \n@@ -311,7 +314,7 @@ pub(crate) struct Builder {\n     deprecated: bool,\n     trigger_call_info: Option<bool>,\n     score: Option<CompletionScore>,\n-    ref_match: Option<(Mutability, CompletionScore)>,\n+    ref_match: Option<Mutability>,\n }\n \n impl Builder {\n@@ -430,8 +433,8 @@ impl Builder {\n         self.import_to_add = import_to_add;\n         self\n     }\n-    pub(crate) fn ref_match(mut self, ref_match: (Mutability, CompletionScore)) -> Builder {\n-        self.ref_match = Some(ref_match);\n+    pub(crate) fn ref_match(mut self, mutability: Mutability) -> Builder {\n+        self.ref_match = Some(mutability);\n         self\n     }\n }"}, {"sha": "0a1b0f95d142cf9cd6f4d3bb6ba77d7328fb5dfe", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c2359608c926d4828f2b112e7069978449851d58/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2359608c926d4828f2b112e7069978449851d58/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=c2359608c926d4828f2b112e7069978449851d58", "patch": "@@ -254,10 +254,17 @@ impl<'a> Render<'a> {\n                 {\n                     item = item.set_score(score);\n                 }\n-                if let Some(ref_match) =\n-                    refed_type_matches(&active_type, &active_name, &ty, &local_name)\n-                {\n-                    item = item.ref_match(ref_match);\n+\n+                if let Some(ty_without_ref) = active_type.remove_ref() {\n+                    if ty_without_ref == ty {\n+                        cov_mark::hit!(suggest_ref);\n+                        let mutability = if active_type.is_mutable_reference() {\n+                            Mutability::Mut\n+                        } else {\n+                            Mutability::Shared\n+                        };\n+                        item = item.ref_match(mutability)\n+                    }\n                 }\n             }\n         }\n@@ -340,19 +347,6 @@ fn compute_score_from_active(\n \n     Some(res)\n }\n-fn refed_type_matches(\n-    active_type: &Type,\n-    active_name: &str,\n-    ty: &Type,\n-    name: &str,\n-) -> Option<(Mutability, CompletionScore)> {\n-    let derefed_active = active_type.remove_ref()?;\n-    let score = compute_score_from_active(&derefed_active, &active_name, &ty, &name)?;\n-    Some((\n-        if active_type.is_mutable_reference() { Mutability::Mut } else { Mutability::Shared },\n-        score,\n-    ))\n-}\n \n fn compute_score(ctx: &RenderContext, ty: &Type, name: &str) -> Option<CompletionScore> {\n     let (active_name, active_type) = ctx.active_name_and_type()?;\n@@ -947,4 +941,66 @@ fn f(foo: &Foo) { f(foo, w$0) }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn suggest_ref_mut() {\n+        cov_mark::check!(suggest_ref);\n+        check(\n+            r#\"\n+struct S;\n+fn foo(s: &mut S) {}\n+fn main() {\n+    let mut s = S;\n+    foo($0);\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"S\",\n+                        source_range: 70..70,\n+                        delete: 70..70,\n+                        insert: \"S\",\n+                        kind: SymbolKind(\n+                            Struct,\n+                        ),\n+                    },\n+                    CompletionItem {\n+                        label: \"foo(\u2026)\",\n+                        source_range: 70..70,\n+                        delete: 70..70,\n+                        insert: \"foo(${1:&mut s})$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"foo\",\n+                        detail: \"-> ()\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 70..70,\n+                        delete: 70..70,\n+                        insert: \"main()$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"main\",\n+                        detail: \"-> ()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"s\",\n+                        source_range: 70..70,\n+                        delete: 70..70,\n+                        insert: \"s\",\n+                        kind: SymbolKind(\n+                            Local,\n+                        ),\n+                        detail: \"S\",\n+                        ref_match: \"&mut \",\n+                    },\n+                ]\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "2380e021a04d70d11c70392db54355eb9d989695", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c2359608c926d4828f2b112e7069978449851d58/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2359608c926d4828f2b112e7069978449851d58/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c2359608c926d4828f2b112e7069978449851d58", "patch": "@@ -175,12 +175,6 @@ pub(crate) fn completion_item(\n     line_index: &LineIndex,\n     item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n-    fn set_score(lsp_item: &mut lsp_types::CompletionItem, label: &str) {\n-        lsp_item.preselect = Some(true);\n-        // HACK: sort preselect items first\n-        lsp_item.sort_text = Some(format!(\" {}\", label));\n-    }\n-\n     let mut additional_text_edits = Vec::new();\n     let mut text_edit = None;\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -220,7 +214,9 @@ pub(crate) fn completion_item(\n     };\n \n     if item.score().is_some() {\n-        set_score(&mut lsp_item, item.label());\n+        lsp_item.preselect = Some(true);\n+        // HACK: sort preselect items first\n+        lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n     }\n \n     if item.deprecated() {\n@@ -232,19 +228,23 @@ pub(crate) fn completion_item(\n     }\n \n     let mut res = match item.ref_match() {\n-        Some(ref_match) => {\n-            let mut refed = lsp_item.clone();\n-            let (mutability, _score) = ref_match;\n-            let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), refed.label);\n-            set_score(&mut refed, &label);\n-            refed.label = label;\n-            vec![lsp_item, refed]\n+        Some(mutability) => {\n+            let mut lsp_item_with_ref = lsp_item.clone();\n+            lsp_item.preselect = Some(true);\n+            lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n+            lsp_item_with_ref.label =\n+                format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n+            if let Some(lsp_types::CompletionTextEdit::Edit(it)) = &mut lsp_item_with_ref.text_edit\n+            {\n+                it.new_text = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.new_text);\n+            }\n+            vec![lsp_item_with_ref, lsp_item]\n         }\n         None => vec![lsp_item],\n     };\n \n-    for mut r in res.iter_mut() {\n-        r.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n+    for lsp_item in res.iter_mut() {\n+        lsp_item.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n     }\n     res\n }\n@@ -1105,13 +1105,13 @@ mod tests {\n         expect_test::expect![[r#\"\n             [\n                 (\n-                    \"arg\",\n+                    \"&arg\",\n                     None,\n                 ),\n                 (\n-                    \"&arg\",\n+                    \"arg\",\n                     Some(\n-                        \" &arg\",\n+                        \" arg\",\n                     ),\n                 ),\n             ]"}]}