{"sha": "874514c7b4f58256eb1c9fe4c9903cdb9e09cada", "node_id": "C_kwDOAAsO6NoAKDg3NDUxNGM3YjRmNTgyNTZlYjFjOWZlNGM5OTAzY2RiOWUwOWNhZGE", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2021-12-20T05:20:48Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2021-12-21T02:18:35Z"}, "message": "kmc-solid: Add `std::sys::solid::fs::File::read_buf`\n\nCatching up with commit 3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "tree": {"sha": "5f2152b1f3fe45b47619f1f10cd18ab8731b7e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2152b1f3fe45b47619f1f10cd18ab8731b7e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874514c7b4f58256eb1c9fe4c9903cdb9e09cada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874514c7b4f58256eb1c9fe4c9903cdb9e09cada", "html_url": "https://github.com/rust-lang/rust/commit/874514c7b4f58256eb1c9fe4c9903cdb9e09cada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874514c7b4f58256eb1c9fe4c9903cdb9e09cada/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed7a2068432b62880bca89cd69546682a2e192cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7a2068432b62880bca89cd69546682a2e192cd", "html_url": "https://github.com/rust-lang/rust/commit/ed7a2068432b62880bca89cd69546682a2e192cd"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "8a0eeff0c4d75f3e56d1078fbf9dece5197ee409", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/874514c7b4f58256eb1c9fe4c9903cdb9e09cada/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874514c7b4f58256eb1c9fe4c9903cdb9e09cada/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=874514c7b4f58256eb1c9fe4c9903cdb9e09cada", "patch": "@@ -2,7 +2,7 @@ use super::{abi, error};\n use crate::{\n     ffi::{CStr, CString, OsStr, OsString},\n     fmt,\n-    io::{self, IoSlice, IoSliceMut, SeekFrom},\n+    io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom},\n     mem::MaybeUninit,\n     os::raw::{c_int, c_short},\n     os::solid::ffi::OsStrExt,\n@@ -339,6 +339,32 @@ impl File {\n         }\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        unsafe {\n+            let len = buf.remaining();\n+            let mut out_num_bytes = MaybeUninit::uninit();\n+            error::SolidError::err_if_negative(abi::SOLID_FS_Read(\n+                self.fd.raw(),\n+                buf.unfilled_mut().as_mut_ptr() as *mut u8,\n+                len,\n+                out_num_bytes.as_mut_ptr(),\n+            ))\n+            .map_err(|e| e.as_io_error())?;\n+\n+            // Safety: `out_num_bytes` is filled by the successful call to\n+            // `SOLID_FS_Read`\n+            let num_bytes_read = out_num_bytes.assume_init();\n+\n+            // Safety: `num_bytes_read` bytes were written to the unfilled\n+            // portion of the buffer\n+            buf.assume_init(num_bytes_read);\n+\n+            buf.add_filled(num_bytes_read);\n+\n+            Ok(())\n+        }\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }"}]}