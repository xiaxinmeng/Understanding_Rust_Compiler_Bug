{"sha": "e3d6069e1845827a1f507882b407122db4418aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDYwNjllMTg0NTgyN2ExZjUwNzg4MmI0MDcxMjJkYjQ0MThhYTQ=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-11-05T01:03:03Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-11-05T01:03:03Z"}, "message": "Use correct TypeckTables when hashing bodies", "tree": {"sha": "6678ccdbf2be8dee9f4cf4d140df18cddbb9f262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6678ccdbf2be8dee9f4cf4d140df18cddbb9f262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d6069e1845827a1f507882b407122db4418aa4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl3AyngUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic4OLAf+JLnDH1I8IjtOxUldldyZ2yh0GdAQ\n8GayJcmA+ESbEZexlmLYwcGI7wXe41htbk+Q5v7uDhFsP8cHmDF8wBFpdcACOZeF\n4NZwTpb/xyZxBuZ1qlt9ohSFOSopOy+ub1trRCWTUKgmG7vUgn2yb6HjGueL+cXO\njzgESGLNZ7CPPPwGC9gtFu7W/oAJTb66O2YxYTIX2mu+B3V3HXND3NU7XDpwVB/t\nvYeO9yklL7WtHNLJyP05jNDTfFIVgOmrWsKFVjpg0rihbREAwB5qagchO3CDm52z\nE5eq+k4JQX4rhup3ueMUZ0Y7W6m1Lpnt+iyb3eYgqdb39Nl91uaBnCo9Nw==\n=J23e\n-----END PGP SIGNATURE-----", "payload": "tree 6678ccdbf2be8dee9f4cf4d140df18cddbb9f262\nparent 000c3ff278852788bc88ce6a911050d02d39af93\nauthor HMPerson1 <hmperson1@gmail.com> 1572915783 -0500\ncommitter HMPerson1 <hmperson1@gmail.com> 1572915783 -0500\n\nUse correct TypeckTables when hashing bodies\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d6069e1845827a1f507882b407122db4418aa4", "html_url": "https://github.com/rust-lang/rust/commit/e3d6069e1845827a1f507882b407122db4418aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d6069e1845827a1f507882b407122db4418aa4/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000c3ff278852788bc88ce6a911050d02d39af93", "url": "https://api.github.com/repos/rust-lang/rust/commits/000c3ff278852788bc88ce6a911050d02d39af93", "html_url": "https://github.com/rust-lang/rust/commit/000c3ff278852788bc88ce6a911050d02d39af93"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "5602e76322d7a90867310352b8beb3e26a9d7dfc", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3d6069e1845827a1f507882b407122db4418aa4/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d6069e1845827a1f507882b407122db4418aa4/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=e3d6069e1845827a1f507882b407122db4418aa4", "patch": "@@ -451,6 +451,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     CaptureClause::CaptureByRef => 1,\n                 }\n                 .hash(&mut self.s);\n+                // closures inherit TypeckTables\n                 self.hash_expr(&self.cx.tcx.hir().body(eid).value);\n             },\n             ExprKind::Field(ref e, ref f) => {\n@@ -490,10 +491,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             ExprKind::Repeat(ref e, ref l_id) => {\n                 self.hash_expr(e);\n-                let full_table = self.tables;\n-                self.tables = self.cx.tcx.body_tables(l_id.body);\n-                self.hash_expr(&self.cx.tcx.hir().body(l_id.body).value);\n-                self.tables = full_table;\n+                self.hash_body(l_id.body);\n             },\n             ExprKind::Ret(ref e) => {\n                 if let Some(ref e) = *e {\n@@ -609,7 +607,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             TyKind::Array(ty, anon_const) => {\n                 self.hash_ty(ty);\n-                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+                self.hash_body(anon_const.body);\n             },\n             TyKind::Ptr(mut_ty) => {\n                 self.hash_ty(&mut_ty.ty);\n@@ -660,19 +658,25 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n                         GenericArg::Type(ref ty) => self.hash_ty(&ty),\n-                        GenericArg::Const(ref ca) => {\n-                            self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n-                        },\n+                        GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n                     }\n                 }\n             },\n             TyKind::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n-                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+                self.hash_body(anon_const.body);\n             },\n             TyKind::Err | TyKind::Infer | TyKind::Never => {},\n         }\n     }\n+\n+    pub fn hash_body(&mut self, body_id: BodyId) {\n+        // swap out TypeckTables when hashing a body\n+        let old_tables = self.tables;\n+        self.tables = self.cx.tcx.body_tables(body_id);\n+        self.hash_expr(&self.cx.tcx.hir().body(body_id).value);\n+        self.tables = old_tables;\n+    }\n }"}, {"sha": "ead67d5ed1b1eaee50f973aab9eddc6c9a6e1771", "filename": "tests/ui/crashes/ice-4760.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3d6069e1845827a1f507882b407122db4418aa4/tests%2Fui%2Fcrashes%2Fice-4760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d6069e1845827a1f507882b407122db4418aa4/tests%2Fui%2Fcrashes%2Fice-4760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4760.rs?ref=e3d6069e1845827a1f507882b407122db4418aa4", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+const COUNT: usize = 2;\n+struct Thing;\n+trait Dummy {}\n+\n+const _: () = {\n+    impl Dummy for Thing where [i32; COUNT]: Sized {}\n+};\n+\n+fn main() {}"}]}