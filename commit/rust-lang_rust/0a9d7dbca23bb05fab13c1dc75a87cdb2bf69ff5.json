{"sha": "0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "node_id": "C_kwDOAAsO6NoAKDBhOWQ3ZGJjYTIzYmIwNWZhYjEzYzFkYzc1YTg3Y2RiMmJmNjlmZjU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-07T00:09:32Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:24:02Z"}, "message": "Remove unnecessary `TRY_LOAD_FROM_DISK` constant", "tree": {"sha": "c97b23b8de5069c19b2413ea079bdd04b9c85244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c97b23b8de5069c19b2413ea079bdd04b9c85244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "html_url": "https://github.com/rust-lang/rust/commit/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9273782d559a342beb2443018f2f8fc873f53b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/9273782d559a342beb2443018f2f8fc873f53b79", "html_url": "https://github.com/rust-lang/rust/commit/9273782d559a342beb2443018f2f8fc873f53b79"}], "stats": {"total": 11, "additions": 2, "deletions": 9}, "files": [{"sha": "c87d26b3950a10e23f4c5b79ae8acd75a46e2b54", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "patch": "@@ -34,7 +34,6 @@ pub use rustc_query_system::query::{deadlock, QueryContext};\n mod keys;\n use keys::Key;\n \n-use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n pub use rustc_query_system::query::QueryConfig;\n pub(crate) use rustc_query_system::query::{QueryDescription, QueryVTable};\n "}, {"sha": "6e0649cc47168ddaa4a1a7dcfa82d3b31db1a196", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "patch": "@@ -412,9 +412,6 @@ macro_rules! define_queries {\n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n             rustc_query_description! { $name }\n \n-            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n-                = should_ever_cache_on_disk!([$($modifiers)*]);\n-\n             type Cache = query_storage::$name<'tcx>;\n \n             #[inline(always)]\n@@ -445,7 +442,7 @@ macro_rules! define_queries {\n                     hash_result: hash_result!([$($modifiers)*]),\n                     handle_cycle_error: handle_cycle_error!([$($modifiers)*]),\n                     compute,\n-                    try_load_from_disk: if cache_on_disk { Self::TRY_LOAD_FROM_DISK } else { None },\n+                    try_load_from_disk: if cache_on_disk { should_ever_cache_on_disk!([$($modifiers)*]) } else { None },\n                 }\n             }\n "}, {"sha": "c4549cc9eb411dc1a408feb14960569f583c69dc", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=0a9d7dbca23bb05fab13c1dc75a87cdb2bf69ff5", "patch": "@@ -29,8 +29,7 @@ pub struct QueryVTable<CTX: QueryContext, K, V> {\n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n     pub handle_cycle_error: HandleCycleError,\n-    // NOTE: this is not quite the same as `Q::TRY_LOAD_FROM_DISK`; it can also be `None` if\n-    // `cache_on_disk` returned false for this key.\n+    // NOTE: this is also `None` if `cache_on_disk()` returns false, not just if it's unsupported by the query\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n \n@@ -48,8 +47,6 @@ impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n }\n \n pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n-    const TRY_LOAD_FROM_DISK: Option<fn(CTX, SerializedDepNodeIndex) -> Option<Self::Value>>;\n-\n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n     fn describe(tcx: CTX, key: Self::Key) -> String;"}]}