{"sha": "5592a8f5db52a11b63547b661b3a635655b16980", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OTJhOGY1ZGI1MmExMWI2MzU0N2I2NjFiM2E2MzU2NTViMTY5ODA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T04:55:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:15:19Z"}, "message": "core: Inherit the cmp module\n\nThis removes the TotalOrd and TotalEq implementation macros, they will be added\nlater to the numeric modules (where the other comparison implementations live).", "tree": {"sha": "ba3d99fb5c05a427602e3094e45644c2d67dca6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3d99fb5c05a427602e3094e45644c2d67dca6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5592a8f5db52a11b63547b661b3a635655b16980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5592a8f5db52a11b63547b661b3a635655b16980", "html_url": "https://github.com/rust-lang/rust/commit/5592a8f5db52a11b63547b661b3a635655b16980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5592a8f5db52a11b63547b661b3a635655b16980/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b024ba544c8cf831423cdd24d2dc516d66dc6269", "url": "https://api.github.com/repos/rust-lang/rust/commits/b024ba544c8cf831423cdd24d2dc516d66dc6269", "html_url": "https://github.com/rust-lang/rust/commit/b024ba544c8cf831423cdd24d2dc516d66dc6269"}], "stats": {"total": 72, "additions": 15, "deletions": 57}, "files": [{"sha": "867871805d053186840a647e680c7e0554ec46d9", "filename": "src/libcore/cmp.rs", "status": "renamed", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -81,32 +81,8 @@ pub trait TotalEq: Eq {\n     fn assert_receiver_is_total_eq(&self) {}\n }\n \n-/// A macro which defines an implementation of TotalEq for a given type.\n-macro_rules! totaleq_impl(\n-    ($t:ty) => {\n-        impl TotalEq for $t {}\n-    }\n-)\n-\n-totaleq_impl!(bool)\n-\n-totaleq_impl!(u8)\n-totaleq_impl!(u16)\n-totaleq_impl!(u32)\n-totaleq_impl!(u64)\n-\n-totaleq_impl!(i8)\n-totaleq_impl!(i16)\n-totaleq_impl!(i32)\n-totaleq_impl!(i64)\n-\n-totaleq_impl!(int)\n-totaleq_impl!(uint)\n-\n-totaleq_impl!(char)\n-\n /// An ordering is, e.g, a result of a comparison between two values.\n-#[deriving(Clone, Eq, Show)]\n+#[deriving(Clone, Eq)]\n pub enum Ordering {\n    /// An ordering where a compared value is less [than another].\n    Less = -1,\n@@ -140,6 +116,7 @@ pub trait TotalOrd: TotalEq + Ord {\n }\n \n impl TotalEq for Ordering {}\n+\n impl TotalOrd for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n@@ -152,35 +129,6 @@ impl Ord for Ordering {\n     fn lt(&self, other: &Ordering) -> bool { (*self as int) < (*other as int) }\n }\n \n-/// A macro which defines an implementation of TotalOrd for a given type.\n-macro_rules! totalord_impl(\n-    ($t:ty) => {\n-        impl TotalOrd for $t {\n-            #[inline]\n-            fn cmp(&self, other: &$t) -> Ordering {\n-                if *self < *other { Less }\n-                else if *self > *other { Greater }\n-                else { Equal }\n-            }\n-        }\n-    }\n-)\n-\n-totalord_impl!(u8)\n-totalord_impl!(u16)\n-totalord_impl!(u32)\n-totalord_impl!(u64)\n-\n-totalord_impl!(i8)\n-totalord_impl!(i16)\n-totalord_impl!(i32)\n-totalord_impl!(i64)\n-\n-totalord_impl!(int)\n-totalord_impl!(uint)\n-\n-totalord_impl!(char)\n-\n /// Combine orderings, lexically.\n ///\n /// For example for a type `(int, int)`, two comparisons could be done.", "previous_filename": "src/libstd/cmp.rs"}, {"sha": "e5f8011f91ea698623b587162a536c09300549a2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -30,6 +30,7 @@ pub mod ptr;\n \n /* Core language traits */\n \n+pub mod cmp;\n pub mod kinds;\n pub mod ops;\n pub mod ty;"}, {"sha": "4a81a6b38a70bea9d4fea450578c7f81f4937abe", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -486,6 +486,7 @@ will look like `\"\\\\{\"`.\n use any;\n use cast;\n use char::Char;\n+use cmp;\n use container::Container;\n use io::MemWriter;\n use io;\n@@ -1315,5 +1316,15 @@ impl<T: Show> Show for iter::MinMaxResult<T> {\n     }\n }\n \n+impl Show for cmp::Ordering {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        match *self {\n+            cmp::Less => write!(f.buf, \"Less\"),\n+            cmp::Greater => write!(f.buf, \"Greater\"),\n+            cmp::Equal => write!(f.buf, \"Equal\"),\n+        }\n+    }\n+}\n+\n // If you expected tests to be here, look instead at the run-pass/ifmt.rs test,\n // it's a lot easier than creating all of the rt::Piece structures here."}, {"sha": "041959f2ee721cbd653e3fd40b3c9a24ed95ed88", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -135,6 +135,7 @@ extern crate core;\n \n #[cfg(not(test))] pub use kinds = core::kinds;\n #[cfg(not(test))] pub use ops = core::ops;\n+#[cfg(not(test))] pub use cmp = core::cmp;\n #[cfg(not(test))] pub use ty = core::ty;\n \n pub use core::any;\n@@ -207,13 +208,10 @@ mod reference;\n pub mod rc;\n pub mod gc;\n \n-\n /* Core language traits */\n \n-#[cfg(not(test))] pub mod cmp;\n #[cfg(not(test))] pub mod owned;\n \n-\n /* Common traits */\n \n pub mod from_str;"}]}