{"sha": "1b7f5a38186c968e721a8c541f33f6c41a9593f5", "node_id": "C_kwDOAAsO6NoAKDFiN2Y1YTM4MTg2Yzk2OGU3MjFhOGM1NDFmMzNmNmM0MWE5NTkzZjU", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-26T16:38:05Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-20T18:42:35Z"}, "message": "Remove NullOp::Box", "tree": {"sha": "143e5fbb3785e3bab192f0c37711e28add0454f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143e5fbb3785e3bab192f0c37711e28add0454f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7f5a38186c968e721a8c541f33f6c41a9593f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7f5a38186c968e721a8c541f33f6c41a9593f5", "html_url": "https://github.com/rust-lang/rust/commit/1b7f5a38186c968e721a8c541f33f6c41a9593f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7f5a38186c968e721a8c541f33f6c41a9593f5/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6162529a01473bbb2427fa27354cbafc3c514eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6162529a01473bbb2427fa27354cbafc3c514eee", "html_url": "https://github.com/rust-lang/rust/commit/6162529a01473bbb2427fa27354cbafc3c514eee"}], "stats": {"total": 94, "additions": 2, "deletions": 92}, "files": [{"sha": "3f88765bf0c7ad30c5fcc20835f9987aacb0c6c9", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -1397,10 +1397,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             Rvalue::NullaryOp(_op, _ty) => {\n                 // nullary ops take no dynamic input; no borrowck effect.\n-                //\n-                // FIXME: is above actually true? Do we want to track\n-                // the fact that uninitialized data can be created via\n-                // `NullOp::Box`?\n             }\n \n             Rvalue::Aggregate(ref aggregate_kind, ref operands) => {"}, {"sha": "a17d10cff665b7119f6f3b2e6f12b5b33ee45395", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -708,30 +708,6 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n-                    let content_ty = fx.monomorphize(content_ty);\n-                    let layout = fx.layout_of(content_ty);\n-                    let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n-                    let llalign = fx.bcx.ins().iconst(usize_type, layout.align.abi.bytes() as i64);\n-                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n-\n-                    // Allocate space:\n-                    let def_id =\n-                        match fx.tcx.lang_items().require(rustc_hir::LangItem::ExchangeMalloc) {\n-                            Ok(id) => id,\n-                            Err(s) => {\n-                                fx.tcx\n-                                    .sess\n-                                    .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                            }\n-                        };\n-                    let instance = ty::Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n-                    let func_ref = fx.get_function_ref(instance);\n-                    let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n-                    let ptr = fx.bcx.inst_results(call)[0];\n-                    lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n-                }\n                 Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n@@ -742,7 +718,6 @@ fn codegen_stmt<'tcx>(\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n-                        NullOp::Box => unreachable!(),\n                     };\n                     let val =\n                         CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());"}, {"sha": "8cbaaa3063fb7e8226d6487a1bbe07a2e3a7a4f5", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -8,7 +8,6 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_apfloat::{ieee, Float, Round, Status};\n-use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n@@ -486,39 +485,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 )\n             }\n \n-            mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n-                let content_ty = self.monomorphize(content_ty);\n-                let content_layout = bx.cx().layout_of(content_ty);\n-                let llsize = bx.cx().const_usize(content_layout.size.bytes());\n-                let llalign = bx.cx().const_usize(content_layout.align.abi.bytes());\n-                let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n-                let llty_ptr = bx.cx().backend_type(box_layout);\n-\n-                // Allocate space:\n-                let def_id = match bx.tcx().lang_items().require(LangItem::ExchangeMalloc) {\n-                    Ok(id) => id,\n-                    Err(s) => {\n-                        bx.cx().sess().fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                    }\n-                };\n-                let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let r = bx.cx().get_fn_addr(instance);\n-                let ty = bx.type_func(&[bx.type_isize(), bx.type_isize()], bx.type_i8p());\n-                let call = bx.call(ty, r, &[llsize, llalign], None);\n-                let val = bx.pointercast(call, llty_ptr);\n-\n-                let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n-                (bx, operand)\n-            }\n-\n             mir::Rvalue::NullaryOp(null_op, ty) => {\n                 let ty = self.monomorphize(ty);\n                 assert!(bx.cx().type_is_sized(ty));\n                 let layout = bx.cx().layout_of(ty);\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n-                    mir::NullOp::Box => unreachable!(),\n                 };\n                 let val = bx.cx().const_usize(val);\n                 let tcx = self.cx.tcx();"}, {"sha": "c1ebb4200b9125d881889ecd21777e5ce5bdd3b4", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -267,10 +267,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(place.to_ref(self), &dest)?;\n             }\n \n-            NullaryOp(mir::NullOp::Box, _) => {\n-                M::box_alloc(self, &dest)?;\n-            }\n-\n             NullaryOp(null_op, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n                 let layout = self.layout_of(ty)?;\n@@ -285,7 +281,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = match null_op {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n-                    mir::NullOp::Box => unreachable!(),\n                 };\n                 self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }"}, {"sha": "e3c508617508d18b304db10f9928c45f48fb2272", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -680,7 +680,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             }\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n-            Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n             Rvalue::ShallowInitBox(_, _) => {}\n \n             Rvalue::UnaryOp(_, ref operand) => {"}, {"sha": "5940243fd8c3abb72b6b3bf72225283f87723e8c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -517,7 +517,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n             }\n \n             Rvalue::NullaryOp(op, _) => match op {\n-                NullOp::Box => return Err(Unpromotable),\n                 NullOp::SizeOf => {}\n                 NullOp::AlignOf => {}\n             },"}, {"sha": "9b0b093134ba61a9056614be576d07d7be638b2c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -2288,8 +2288,6 @@ pub enum NullOp {\n     SizeOf,\n     /// Returns the minimum alignment of a type\n     AlignOf,\n-    /// Creates a new uninitialized box for a value of that type\n-    Box,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "e419df6c22d1e22268d8c54ff6335371045a34f7", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -195,7 +195,6 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n-            Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n@@ -215,9 +214,7 @@ impl<'tcx> Rvalue<'tcx> {\n     /// whether its only shallowly initialized (`Rvalue::Box`).\n     pub fn initialization_state(&self) -> RvalueInitializationState {\n         match *self {\n-            Rvalue::NullaryOp(NullOp::Box, _) | Rvalue::ShallowInitBox(_, _) => {\n-                RvalueInitializationState::Shallow\n-            }\n+            Rvalue::ShallowInitBox(_, _) => RvalueInitializationState::Shallow,\n             _ => RvalueInitializationState::Deep,\n         }\n     }"}, {"sha": "c2df838f2d64dd341c6746f406ab9d9e9e42bc3b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -343,19 +343,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(..)\n-            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _)\n-            | Rvalue::NullaryOp(NullOp::Box, _) => {\n-                // This returns an rvalue with uninitialized contents. We can't\n-                // move out of it here because it is an rvalue - assignments always\n-                // completely initialize their place.\n-                //\n-                // However, this does not matter - MIR building is careful to\n-                // only emit a shallow free for the partially-initialized\n-                // temporary.\n-                //\n-                // In any case, if we want to fix this, we have to register a\n-                // special move and change the `statement_effect` functions.\n-            }\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n         }\n     }\n "}, {"sha": "20168105419b2309d51e1d7fe9c3632e602c30ec", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -688,15 +688,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n-                let tcx = self.tcx;\n-                let exchange_malloc_fn_def_id =\n-                    tcx.require_lang_item(LangItem::ExchangeMalloc, None);\n-                let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n-                if should_codegen_locally(tcx, &instance) {\n-                    self.output.push(create_fn_mono_item(self.tcx, instance, span));\n-                }\n-            }\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(self.tcx.is_thread_local_static(def_id));\n                 let instance = Instance::mono(self.tcx, def_id);"}, {"sha": "789418c743ff83e174238d9c5f1a6613e7f25d8e", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b7f5a38186c968e721a8c541f33f6c41a9593f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7f5a38186c968e721a8c541f33f6c41a9593f5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=1b7f5a38186c968e721a8c541f33f6c41a9593f5", "patch": "@@ -193,7 +193,6 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n             }\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n-        Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}]}