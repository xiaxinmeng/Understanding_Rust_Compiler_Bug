{"sha": "b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "node_id": "C_kwDOAAsO6NoAKGI3YjI1MmE0ZjQzYjliYThjYTQ2YThkODQ0M2YyMDIyMjU5ZWM2ZTY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-01T18:11:53Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-01T18:11:53Z"}, "message": "clean: Always store enum disriminant.", "tree": {"sha": "623d248e60721baf5639050e5173187ffd56bf46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623d248e60721baf5639050e5173187ffd56bf46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "html_url": "https://github.com/rust-lang/rust/commit/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e76df06dcbdb96e634eb28a49f161d70ab844", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e76df06dcbdb96e634eb28a49f161d70ab844", "html_url": "https://github.com/rust-lang/rust/commit/bb6e76df06dcbdb96e634eb28a49f161d70ab844"}], "stats": {"total": 151, "additions": 92, "deletions": 59}, "files": [{"sha": "b89b74a7f5fd30800e6bf1954bcc275b59331636", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -1949,40 +1949,52 @@ pub(crate) fn clean_field_with_def_id(\n }\n \n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n+    let discriminant = match variant.discr {\n+        ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n+        ty::VariantDiscr::Relative(_) => None,\n+    };\n+\n     let kind = match variant.ctor_kind() {\n-        Some(CtorKind::Const) => Variant::CLike(match variant.discr {\n-            ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n-            ty::VariantDiscr::Relative(_) => None,\n-        }),\n-        Some(CtorKind::Fn) => Variant::Tuple(\n+        Some(CtorKind::Const) => VariantKind::CLike,\n+        Some(CtorKind::Fn) => VariantKind::Tuple(\n             variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         ),\n-        None => Variant::Struct(VariantStruct {\n+        None => VariantKind::Struct(VariantStruct {\n             ctor_kind: None,\n             fields: variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         }),\n     };\n-    Item::from_def_id_and_parts(variant.def_id, Some(variant.name), VariantItem(kind), cx)\n+\n+    Item::from_def_id_and_parts(\n+        variant.def_id,\n+        Some(variant.name),\n+        VariantItem(Variant { kind, discriminant }),\n+        cx,\n+    )\n }\n \n fn clean_variant_data<'tcx>(\n     variant: &hir::VariantData<'tcx>,\n     disr_expr: &Option<hir::AnonConst>,\n     cx: &mut DocContext<'tcx>,\n ) -> Variant {\n-    match variant {\n-        hir::VariantData::Struct(..) => Variant::Struct(VariantStruct {\n+    let discriminant = disr_expr.map(|disr| Discriminant {\n+        expr: Some(disr.body),\n+        value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n+    });\n+\n+    let kind = match variant {\n+        hir::VariantData::Struct(..) => VariantKind::Struct(VariantStruct {\n             ctor_kind: None,\n             fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }),\n         hir::VariantData::Tuple(..) => {\n-            Variant::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n+            VariantKind::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n         }\n-        hir::VariantData::Unit(..) => Variant::CLike(disr_expr.map(|disr| Discriminant {\n-            expr: Some(disr.body),\n-            value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n-        })),\n-    }\n+        hir::VariantData::Unit(..) => VariantKind::CLike,\n+    };\n+\n+    Variant { discriminant, kind }\n }\n \n fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {"}, {"sha": "77ec024262123ebb9dc6aa08ab721162c2a6431e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -807,8 +807,11 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(Variant::Struct(v)) => v.fields.iter(),\n-            VariantItem(Variant::Tuple(v)) => v.iter(),\n+            VariantItem(v) => match &v.kind {\n+                VariantKind::CLike => [].iter(),\n+                VariantKind::Tuple(t) => t.iter(),\n+                VariantKind::Struct(s) => s.fields.iter(),\n+            },\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -824,7 +827,6 @@ impl ItemKind {\n             | TyMethodItem(_)\n             | MethodItem(_, _)\n             | StructFieldItem(_)\n-            | VariantItem(_)\n             | ForeignFunctionItem(_)\n             | ForeignStaticItem(_)\n             | ForeignTypeItem\n@@ -2136,17 +2138,23 @@ impl Enum {\n }\n \n #[derive(Clone, Debug)]\n-pub(crate) enum Variant {\n-    CLike(Option<Discriminant>),\n+pub(crate) struct Variant {\n+    pub kind: VariantKind,\n+    pub discriminant: Option<Discriminant>,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub(crate) enum VariantKind {\n+    CLike,\n     Tuple(Vec<Item>),\n     Struct(VariantStruct),\n }\n \n impl Variant {\n     pub(crate) fn has_stripped_entries(&self) -> Option<bool> {\n-        match *self {\n-            Self::Struct(ref struct_) => Some(struct_.has_stripped_entries()),\n-            Self::CLike(..) | Self::Tuple(_) => None,\n+        match &self.kind {\n+            VariantKind::Struct(struct_) => Some(struct_.has_stripped_entries()),\n+            VariantKind::CLike | VariantKind::Tuple(_) => None,\n         }\n     }\n }"}, {"sha": "656aeefb01a4a807ea8aa8b418957544a28c356c", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -37,17 +37,21 @@ pub(crate) trait DocFolder: Sized {\n                 i.items = i.items.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 ImplItem(i)\n             }\n-            VariantItem(i) => match i {\n-                Variant::Struct(mut j) => {\n-                    j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    VariantItem(Variant::Struct(j))\n-                }\n-                Variant::Tuple(fields) => {\n-                    let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    VariantItem(Variant::Tuple(fields))\n-                }\n-                Variant::CLike(disr) => VariantItem(Variant::CLike(disr)),\n-            },\n+            VariantItem(Variant { kind, discriminant }) => {\n+                let kind = match kind {\n+                    VariantKind::Struct(mut j) => {\n+                        j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                        VariantKind::Struct(j)\n+                    }\n+                    VariantKind::Tuple(fields) => {\n+                        let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                        VariantKind::Tuple(fields)\n+                    }\n+                    VariantKind::CLike => VariantKind::CLike,\n+                };\n+\n+                VariantItem(Variant { kind, discriminant })\n+            }\n             ExternCrateItem { src: _ }\n             | ImportItem(_)\n             | FunctionItem(_)"}, {"sha": "40dfb06975067c7e149777f78bada90384203553", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -1220,15 +1220,15 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                     w.write_str(\"    \");\n                     let name = v.name.unwrap();\n                     match *v.kind {\n-                        clean::VariantItem(ref var) => match var {\n-                            // FIXME(#101337): Show discriminant\n-                            clean::Variant::CLike(..) => write!(w, \"{}\", name),\n-                            clean::Variant::Tuple(ref s) => {\n+                        // FIXME(#101337): Show discriminant\n+                        clean::VariantItem(ref var) => match var.kind {\n+                            clean::VariantKind::CLike => write!(w, \"{}\", name),\n+                            clean::VariantKind::Tuple(ref s) => {\n                                 write!(w, \"{}(\", name);\n                                 print_tuple_struct_fields(w, cx, s);\n                                 w.write_str(\")\");\n                             }\n-                            clean::Variant::Struct(ref s) => {\n+                            clean::VariantKind::Struct(ref s) => {\n                                 render_struct(\n                                     w,\n                                     v,\n@@ -1286,25 +1286,28 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 \" rightside\",\n             );\n             write!(w, \"<h3 class=\\\"code-header\\\">{name}\", name = variant.name.unwrap());\n-            if let clean::VariantItem(clean::Variant::Tuple(ref s)) = *variant.kind {\n+\n+            let clean::VariantItem(variant_data) = &*variant.kind else { unreachable!() };\n+\n+            if let clean::VariantKind::Tuple(ref s) = variant_data.kind {\n                 w.write_str(\"(\");\n                 print_tuple_struct_fields(w, cx, s);\n                 w.write_str(\")\");\n             }\n             w.write_str(\"</h3></section>\");\n \n-            use crate::clean::Variant;\n-\n-            let heading_and_fields = match &*variant.kind {\n-                clean::VariantItem(Variant::Struct(s)) => Some((\"Fields\", &s.fields)),\n-                // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n-                // the section if at least one field is documented.\n-                clean::VariantItem(Variant::Tuple(fields))\n-                    if fields.iter().any(|f| f.doc_value().is_some()) =>\n-                {\n-                    Some((\"Tuple Fields\", fields))\n+            let heading_and_fields = match &variant_data.kind {\n+                clean::VariantKind::Struct(s) => Some((\"Fields\", &s.fields)),\n+                clean::VariantKind::Tuple(fields) => {\n+                    // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n+                    // the section if at least one field is documented.\n+                    if fields.iter().any(|f| f.doc_value().is_some()) {\n+                        Some((\"Tuple Fields\", fields))\n+                    } else {\n+                        None\n+                    }\n                 }\n-                _ => None,\n+                clean::VariantKind::CLike => None,\n             };\n \n             if let Some((heading, fields)) = heading_and_fields {"}, {"sha": "ee491ce961a04c2df35353e816ea0e94f649fa6e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -646,9 +646,12 @@ impl FromWithTcx<clean::Enum> for Enum {\n \n impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n-        use clean::Variant::*;\n-        match variant {\n-            CLike(disr) => Variant::Plain(disr.map(|disr| disr.into_tcx(tcx))),\n+        use clean::VariantKind::*;\n+\n+        let discriminant = variant.discriminant.map(|d| d.into_tcx(tcx));\n+\n+        match variant.kind {\n+            CLike => Variant::Plain(discriminant),\n             Tuple(fields) => Variant::Tuple(ids_keeping_stripped(fields, tcx)),\n             Struct(s) => Variant::Struct {\n                 fields_stripped: s.has_stripped_entries(),"}, {"sha": "bf111133b9f7f5f85ef2fdbfdebe54843d422802", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -132,7 +132,10 @@ impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant::Struct(..) | clean::Variant::Tuple(..)) => true,\n+            clean::VariantItem(clean::Variant {\n+                kind: clean::VariantKind::Struct(..) | clean::VariantKind::Tuple(..),\n+                ..\n+            }) => true,\n             _ => false,\n         };\n "}, {"sha": "390b9436121951206463db0210b4f407609c1c2d", "filename": "src/librustdoc/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "patch": "@@ -17,10 +17,10 @@ pub(crate) trait DocVisitor: Sized {\n             EnumItem(i) => i.variants.iter().for_each(|x| self.visit_item(x)),\n             TraitItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n             ImplItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n-            VariantItem(i) => match i {\n-                Variant::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n-                Variant::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n-                Variant::CLike(_) => {}\n+            VariantItem(i) => match &i.kind {\n+                VariantKind::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n+                VariantKind::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n+                VariantKind::CLike => {}\n             },\n             ExternCrateItem { src: _ }\n             | ImportItem(_)"}]}