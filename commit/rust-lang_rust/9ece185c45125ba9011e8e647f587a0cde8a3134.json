{"sha": "9ece185c45125ba9011e8e647f587a0cde8a3134", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2UxODVjNDUxMjViYTkwMTFlOGU2NDdmNTg3YTBjZGU4YTMxMzQ=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T13:37:35Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/methods.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "87214fa605c6256b65d91ea10f48743625852014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87214fa605c6256b65d91ea10f48743625852014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ece185c45125ba9011e8e647f587a0cde8a3134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ece185c45125ba9011e8e647f587a0cde8a3134", "html_url": "https://github.com/rust-lang/rust/commit/9ece185c45125ba9011e8e647f587a0cde8a3134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ece185c45125ba9011e8e647f587a0cde8a3134/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409eea2b516d11133d97465dbf0bc3d1cfd42c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/409eea2b516d11133d97465dbf0bc3d1cfd42c80", "html_url": "https://github.com/rust-lang/rust/commit/409eea2b516d11133d97465dbf0bc3d1cfd42c80"}], "stats": {"total": 586, "additions": 206, "deletions": 380}, "files": [{"sha": "71b4c48f3de4d6786fd2097c634ab0f18c61339d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/9ece185c45125ba9011e8e647f587a0cde8a3134/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece185c45125ba9011e8e647f587a0cde8a3134/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=9ece185c45125ba9011e8e647f587a0cde8a3134", "patch": "@@ -28,8 +28,6 @@ impl T {\n     fn to_something(self) -> u32 { 0 }\n \n     fn new(self) {}\n-\n-\n }\n \n struct Lt<'a> {\n@@ -195,8 +193,6 @@ fn filter_next() {\n     // check single-line case\n     let _ = v.iter().filter(|&x| *x < 0).next();\n \n-\n-\n     // check multi-line case\n     let _ = v.iter().filter(|&x| {\n                                 *x < 0\n@@ -215,8 +211,6 @@ fn search_is_some() {\n     // check `find().is_some()`, single-line\n     let _ = v.iter().find(|&x| *x < 0).is_some();\n \n-\n-\n     // check `find().is_some()`, multi-line\n     let _ = v.iter().find(|&x| {\n                               *x < 0\n@@ -226,8 +220,6 @@ fn search_is_some() {\n     // check `position().is_some()`, single-line\n     let _ = v.iter().position(|&x| x < 0).is_some();\n \n-\n-\n     // check `position().is_some()`, multi-line\n     let _ = v.iter().position(|&x| {\n                                   x < 0\n@@ -237,8 +229,6 @@ fn search_is_some() {\n     // check `rposition().is_some()`, single-line\n     let _ = v.iter().rposition(|&x| x < 0).is_some();\n \n-\n-\n     // check `rposition().is_some()`, multi-line\n     let _ = v.iter().rposition(|&x| {\n                                    x < 0\n@@ -277,74 +267,40 @@ fn or_fun_call() {\n     let with_constructor = Some(vec![1]);\n     with_constructor.unwrap_or(make());\n \n-\n-\n-\n     let with_new = Some(vec![1]);\n     with_new.unwrap_or(Vec::new());\n \n-\n-\n-\n     let with_const_args = Some(vec![1]);\n     with_const_args.unwrap_or(Vec::with_capacity(12));\n \n-\n-\n-\n     let with_err : Result<_, ()> = Ok(vec![1]);\n     with_err.unwrap_or(make());\n \n-\n-\n-\n     let with_err_args : Result<_, ()> = Ok(vec![1]);\n     with_err_args.unwrap_or(Vec::with_capacity(12));\n \n-\n-\n-\n     let with_default_trait = Some(1);\n     with_default_trait.unwrap_or(Default::default());\n \n-\n-\n-\n     let with_default_type = Some(1);\n     with_default_type.unwrap_or(u64::default());\n \n-\n-\n-\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n \n-\n     // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n-\n-\n-\n     let mut map = HashMap::<u64, String>::new();\n     map.entry(42).or_insert(String::new());\n \n-\n-\n-\n     let mut btree = BTreeMap::<u64, String>::new();\n     btree.entry(42).or_insert(String::new());\n \n-\n-\n-\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n-\n-\n-\n }\n \n /// Checks implementation of `ITER_NTH` lint\n@@ -356,27 +312,20 @@ fn iter_nth() {\n     {\n         // Make sure we lint `.iter()` for relevant types\n         let bad_vec = some_vec.iter().nth(3);\n-\n         let bad_slice = &some_vec[..].iter().nth(3);\n-\n         let bad_boxed_slice = boxed_slice.iter().nth(3);\n-\n         let bad_vec_deque = some_vec_deque.iter().nth(3);\n-\n     }\n \n     {\n         // Make sure we lint `.iter_mut()` for relevant types\n         let bad_vec = some_vec.iter_mut().nth(3);\n-\n     }\n     {\n         let bad_slice = &some_vec[..].iter_mut().nth(3);\n-\n     }\n     {\n         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-\n     }\n \n     // Make sure we don't lint for non-relevant types\n@@ -388,19 +337,10 @@ fn iter_nth() {\n /// Checks implementation of `ITER_SKIP_NEXT` lint\n fn iter_skip_next() {\n     let mut some_vec = vec![0, 1, 2, 3];\n-\n     let _ = some_vec.iter().skip(42).next();\n-\n-\n     let _ = some_vec.iter().cycle().skip(42).next();\n-\n-\n     let _ = (1..10).skip(10).next();\n-\n-\n     let _ = &some_vec[..].iter().skip(3).next();\n-\n-\n     let foo = IteratorFalsePositives { foo : 0 };\n     let _ = foo.skip(42).next();\n     let _ = foo.filter().skip(42).next();\n@@ -427,51 +367,19 @@ fn get_unwrap() {\n \n     { // Test `get().unwrap()`\n         let _ = boxed_slice.get(1).unwrap();\n-\n-\n-\n         let _ = some_slice.get(0).unwrap();\n-\n-\n-\n         let _ = some_vec.get(0).unwrap();\n-\n-\n-\n         let _ = some_vecdeque.get(0).unwrap();\n-\n-\n-\n         let _ = some_hashmap.get(&1).unwrap();\n-\n-\n-\n         let _ = some_btreemap.get(&1).unwrap();\n-\n-\n-\n-\n         let _ = false_positive.get(0).unwrap();\n     }\n \n     { // Test `get_mut().unwrap()`\n         *boxed_slice.get_mut(0).unwrap() = 1;\n-\n-\n-\n         *some_slice.get_mut(0).unwrap() = 1;\n-\n-\n-\n         *some_vec.get_mut(0).unwrap() = 1;\n-\n-\n-\n         *some_vecdeque.get_mut(0).unwrap() = 1;\n-\n-\n-\n-\n         // Check false positives\n         *some_hashmap.get_mut(&1).unwrap() = 'b';\n         *some_btreemap.get_mut(&1).unwrap() = 'b';\n@@ -515,14 +423,7 @@ struct MyErrorWithParam<T> {\n #[allow(unnecessary_operation)]\n fn starts_with() {\n     \"\".chars().next() == Some(' ');\n-\n-\n-\n-\n     Some(' ') != \"\".chars().next();\n-\n-\n-\n }\n \n fn str_extend_chars() {\n@@ -533,21 +434,12 @@ fn str_extend_chars() {\n     s.push_str(abc);\n     s.extend(abc.chars());\n \n-\n-\n-\n     s.push_str(\"abc\");\n     s.extend(\"abc\".chars());\n \n-\n-\n-\n     s.push_str(&def);\n     s.extend(def.chars());\n \n-\n-\n-\n     s.extend(abc.chars().skip(1));\n     s.extend(\"abc\".chars().skip(1));\n     s.extend(['a', 'b', 'c'].iter());\n@@ -559,46 +451,33 @@ fn str_extend_chars() {\n fn clone_on_copy() {\n     42.clone();\n \n-\n     vec![1].clone(); // ok, not a Copy type\n     Some(vec![1]).clone(); // ok, not a Copy type\n     (&42).clone();\n-\n-\n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {\n     t.clone();\n \n-\n     Some(t).clone();\n-\n-\n }\n \n fn clone_on_double_ref() {\n     let x = vec![1];\n     let y = &&x;\n     let z: &Vec<_> = y.clone();\n \n-\n     println!(\"{:p} {:p}\",*y, z);\n }\n \n fn single_char_pattern() {\n     let x = \"foo\";\n     x.split(\"x\");\n-\n-\n-\n-\n     x.split(\"xx\");\n-\n     x.split('x');\n \n     let y = \"x\";\n     x.split(y);\n-\n     // Not yet testing for multi-byte characters\n     // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n     // should have done this but produced an ICE\n@@ -610,72 +489,23 @@ fn single_char_pattern() {\n     x.split(\"\ud83d\udca3\");\n     // Can't use this lint for unicode code points which don't fit in a char\n     x.split(\"\u2764\ufe0f\");\n-\n     x.contains(\"x\");\n-\n-\n-\n     x.starts_with(\"x\");\n-\n-\n-\n     x.ends_with(\"x\");\n-\n-\n-\n     x.find(\"x\");\n-\n-\n-\n     x.rfind(\"x\");\n-\n-\n-\n     x.rsplit(\"x\");\n-\n-\n-\n     x.split_terminator(\"x\");\n-\n-\n-\n     x.rsplit_terminator(\"x\");\n-\n-\n-\n     x.splitn(0, \"x\");\n-\n-\n-\n     x.rsplitn(0, \"x\");\n-\n-\n-\n     x.matches(\"x\");\n-\n-\n-\n     x.rmatches(\"x\");\n-\n-\n-\n     x.match_indices(\"x\");\n-\n-\n-\n     x.rmatch_indices(\"x\");\n-\n-\n-\n     x.trim_left_matches(\"x\");\n-\n-\n-\n     x.trim_right_matches(\"x\");\n \n-\n-\n-\n     let h = HashSet::<String>::new();\n     h.contains(\"X\"); // should not warn\n }\n@@ -685,15 +515,11 @@ fn temporary_cstring() {\n     use std::ffi::CString;\n \n     CString::new(\"foo\").unwrap().as_ptr();\n-\n-\n-\n }\n \n fn iter_clone_collect() {\n     let v = [1,2,3,4,5];\n     let v2 : Vec<isize> = v.iter().cloned().collect();\n-\n     let v3 : HashSet<isize> = v.iter().cloned().collect();\n     let v4 : VecDeque<isize> = v.iter().cloned().collect();\n }"}, {"sha": "9c77d4dac87fbbf8134787e28079b81ba71293df", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 206, "deletions": 206, "changes": 412, "blob_url": "https://github.com/rust-lang/rust/blob/9ece185c45125ba9011e8e647f587a0cde8a3134/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ece185c45125ba9011e8e647f587a0cde8a3134/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=9ece185c45125ba9011e8e647f587a0cde8a3134", "patch": "@@ -62,53 +62,53 @@ note: lint level defined here\n    |         ^^^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:99:13\n-    |\n-99  |       let _ = opt.map(|x| x + 1)\n-    |  _____________^\n-100 | |\n-101 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n-    | |____________________________^\n-    |\n-    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+  --> $DIR/methods.rs:97:13\n+   |\n+97 |       let _ = opt.map(|x| x + 1)\n+   |  _____________^\n+98 | |\n+99 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+   | |____________________________^\n+   |\n+   = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n note: lint level defined here\n-   --> $DIR/methods.rs:5:17\n-    |\n-5   | #![deny(clippy, clippy_pedantic)]\n-    |                 ^^^^^^^^^^^^^^^\n-    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n+  --> $DIR/methods.rs:5:17\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+   = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:103:13\n+   --> $DIR/methods.rs:101:13\n     |\n-103 |       let _ = opt.map(|x| {\n+101 |       let _ = opt.map(|x| {\n     |  _____________^\n-104 | |                         x + 1\n-105 | |                     }\n-106 | |               ).unwrap_or(0);\n+102 | |                         x + 1\n+103 | |                     }\n+104 | |               ).unwrap_or(0);\n     | |____________________________^\n     |\n     = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:107:13\n+   --> $DIR/methods.rs:105:13\n     |\n-107 |       let _ = opt.map(|x| x + 1)\n+105 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-108 | |                .unwrap_or({\n-109 | |                     0\n-110 | |                 });\n+106 | |                .unwrap_or({\n+107 | |                     0\n+108 | |                 });\n     | |__________________^\n     |\n     = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:116:13\n+   --> $DIR/methods.rs:114:13\n     |\n-116 |       let _ = opt.map(|x| x + 1)\n+114 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-117 | |\n-118 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+115 | |\n+116 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     | |____________________________________^\n     |\n     = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n@@ -120,33 +120,33 @@ note: lint level defined here\n     = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:120:13\n+   --> $DIR/methods.rs:118:13\n     |\n-120 |       let _ = opt.map(|x| {\n+118 |       let _ = opt.map(|x| {\n     |  _____________^\n-121 | |                         x + 1\n-122 | |                     }\n-123 | |               ).unwrap_or_else(|| 0);\n+119 | |                         x + 1\n+120 | |                     }\n+121 | |               ).unwrap_or_else(|| 0);\n     | |____________________________________^\n     |\n     = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:124:13\n+   --> $DIR/methods.rs:122:13\n     |\n-124 |       let _ = opt.map(|x| x + 1)\n+122 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-125 | |                .unwrap_or_else(||\n-126 | |                     0\n-127 | |                 );\n+123 | |                .unwrap_or_else(||\n+124 | |                     0\n+125 | |                 );\n     | |_________________^\n     |\n     = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:196:13\n+   --> $DIR/methods.rs:194:13\n     |\n-196 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+194 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(filter_next)] implied by #[deny(clippy)]\n@@ -158,21 +158,21 @@ note: lint level defined here\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:201:13\n+   --> $DIR/methods.rs:197:13\n     |\n-201 |       let _ = v.iter().filter(|&x| {\n+197 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-202 | |                                 *x < 0\n-203 | |                             }\n-204 | |                    ).next();\n+198 | |                                 *x < 0\n+199 | |                             }\n+200 | |                    ).next();\n     | |___________________________^\n     |\n     = note: #[deny(filter_next)] implied by #[deny(clippy)]\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:216:13\n+   --> $DIR/methods.rs:212:13\n     |\n-216 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+212 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n@@ -184,63 +184,63 @@ note: lint level defined here\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:221:13\n+   --> $DIR/methods.rs:215:13\n     |\n-221 |       let _ = v.iter().find(|&x| {\n+215 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-222 | |                               *x < 0\n-223 | |                           }\n-224 | |                    ).is_some();\n+216 | |                               *x < 0\n+217 | |                           }\n+218 | |                    ).is_some();\n     | |______________________________^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:227:13\n+   --> $DIR/methods.rs:221:13\n     |\n-227 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+221 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:232:13\n+   --> $DIR/methods.rs:224:13\n     |\n-232 |       let _ = v.iter().position(|&x| {\n+224 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-233 | |                                   x < 0\n-234 | |                               }\n-235 | |                    ).is_some();\n+225 | |                                   x < 0\n+226 | |                               }\n+227 | |                    ).is_some();\n     | |______________________________^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:238:13\n+   --> $DIR/methods.rs:230:13\n     |\n-238 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+230 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:243:13\n+   --> $DIR/methods.rs:233:13\n     |\n-243 |       let _ = v.iter().rposition(|&x| {\n+233 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-244 | |                                    x < 0\n-245 | |                                }\n-246 | |                    ).is_some();\n+234 | |                                    x < 0\n+235 | |                                }\n+236 | |                    ).is_some();\n     | |______________________________^\n     |\n     = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:278:5\n+   --> $DIR/methods.rs:268:5\n     |\n-278 |     with_constructor.unwrap_or(make());\n+268 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_constructor.unwrap_or_else(make)`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n@@ -251,97 +251,97 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:284:5\n+   --> $DIR/methods.rs:271:5\n     |\n-284 |     with_new.unwrap_or(Vec::new());\n+271 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_new.unwrap_or_default()`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:290:5\n+   --> $DIR/methods.rs:274:5\n     |\n-290 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+274 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:296:5\n+   --> $DIR/methods.rs:277:5\n     |\n-296 |     with_err.unwrap_or(make());\n+277 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_err.unwrap_or_else(|_| make())`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:302:5\n+   --> $DIR/methods.rs:280:5\n     |\n-302 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+280 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:308:5\n+   --> $DIR/methods.rs:283:5\n     |\n-308 |     with_default_trait.unwrap_or(Default::default());\n+283 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_default_trait.unwrap_or_default()`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:314:5\n+   --> $DIR/methods.rs:286:5\n     |\n-314 |     with_default_type.unwrap_or(u64::default());\n+286 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_default_type.unwrap_or_default()`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:320:5\n+   --> $DIR/methods.rs:289:5\n     |\n-320 |     with_vec.unwrap_or(vec![]);\n+289 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:326:5\n+   --> $DIR/methods.rs:294:5\n     |\n-326 |     without_default.unwrap_or(Foo::new());\n+294 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `without_default.unwrap_or_else(Foo::new)`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:332:5\n+   --> $DIR/methods.rs:297:5\n     |\n-332 |     map.entry(42).or_insert(String::new());\n+297 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `map.entry(42).or_insert_with(String::new)`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:338:5\n+   --> $DIR/methods.rs:300:5\n     |\n-338 |     btree.entry(42).or_insert(String::new());\n+300 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `btree.entry(42).or_insert_with(String::new)`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:344:13\n+   --> $DIR/methods.rs:303:13\n     |\n-344 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+303 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `stringy.unwrap_or_else(|| \"\".to_owned())`\n     |\n     = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:358:23\n+   --> $DIR/methods.rs:314:23\n     |\n-358 |         let bad_vec = some_vec.iter().nth(3);\n+314 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n@@ -352,57 +352,57 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:360:26\n+   --> $DIR/methods.rs:315:26\n     |\n-360 |         let bad_slice = &some_vec[..].iter().nth(3);\n+315 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:362:31\n+   --> $DIR/methods.rs:316:31\n     |\n-362 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+316 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:364:29\n+   --> $DIR/methods.rs:317:29\n     |\n-364 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+317 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:370:23\n+   --> $DIR/methods.rs:322:23\n     |\n-370 |         let bad_vec = some_vec.iter_mut().nth(3);\n+322 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:374:26\n+   --> $DIR/methods.rs:325:26\n     |\n-374 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+325 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:378:29\n+   --> $DIR/methods.rs:328:29\n     |\n-378 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+328 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:392:13\n+   --> $DIR/methods.rs:340:13\n     |\n-392 |     let _ = some_vec.iter().skip(42).next();\n+340 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n@@ -413,33 +413,33 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:395:13\n+   --> $DIR/methods.rs:341:13\n     |\n-395 |     let _ = some_vec.iter().cycle().skip(42).next();\n+341 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:398:13\n+   --> $DIR/methods.rs:342:13\n     |\n-398 |     let _ = (1..10).skip(10).next();\n+342 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:401:14\n+   --> $DIR/methods.rs:343:14\n     |\n-401 |     let _ = &some_vec[..].iter().skip(3).next();\n+343 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:429:17\n+   --> $DIR/methods.rs:369:17\n     |\n-429 |         let _ = boxed_slice.get(1).unwrap();\n+369 |         let _ = boxed_slice.get(1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&boxed_slice[1]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n@@ -450,81 +450,81 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:433:17\n+   --> $DIR/methods.rs:370:17\n     |\n-433 |         let _ = some_slice.get(0).unwrap();\n+370 |         let _ = some_slice.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&some_slice[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:437:17\n+   --> $DIR/methods.rs:371:17\n     |\n-437 |         let _ = some_vec.get(0).unwrap();\n+371 |         let _ = some_vec.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&some_vec[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:441:17\n+   --> $DIR/methods.rs:372:17\n     |\n-441 |         let _ = some_vecdeque.get(0).unwrap();\n+372 |         let _ = some_vecdeque.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&some_vecdeque[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:445:17\n+   --> $DIR/methods.rs:373:17\n     |\n-445 |         let _ = some_hashmap.get(&1).unwrap();\n+373 |         let _ = some_hashmap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&some_hashmap[&1]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:449:17\n+   --> $DIR/methods.rs:374:17\n     |\n-449 |         let _ = some_btreemap.get(&1).unwrap();\n+374 |         let _ = some_btreemap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&some_btreemap[&1]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:458:10\n+   --> $DIR/methods.rs:379:10\n     |\n-458 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+379 |         *boxed_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&mut boxed_slice[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:462:10\n+   --> $DIR/methods.rs:380:10\n     |\n-462 |         *some_slice.get_mut(0).unwrap() = 1;\n+380 |         *some_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&mut some_slice[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:466:10\n+   --> $DIR/methods.rs:381:10\n     |\n-466 |         *some_vec.get_mut(0).unwrap() = 1;\n+381 |         *some_vec.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&mut some_vec[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:470:10\n+   --> $DIR/methods.rs:382:10\n     |\n-470 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+382 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this `&mut some_vecdeque[0]`\n     |\n     = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:488:13\n+   --> $DIR/methods.rs:396:13\n     |\n-488 |     let _ = opt.unwrap();\n+396 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: #[deny(option_unwrap_used)] implied by #[deny(clippy_pedantic)]\n@@ -535,9 +535,9 @@ note: lint level defined here\n     |                 ^^^^^^^^^^^^^^^\n \n error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:491:13\n+   --> $DIR/methods.rs:399:13\n     |\n-491 |     let _ = res.unwrap();\n+399 |     let _ = res.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: #[deny(result_unwrap_used)] implied by #[deny(clippy_pedantic)]\n@@ -548,9 +548,9 @@ note: lint level defined here\n     |                 ^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:493:5\n+   --> $DIR/methods.rs:401:5\n     |\n-493 |     res.ok().expect(\"disaster!\");\n+401 |     res.ok().expect(\"disaster!\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n@@ -561,41 +561,41 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:499:5\n+   --> $DIR/methods.rs:407:5\n     |\n-499 |     res3.ok().expect(\"whoof\");\n+407 |     res3.ok().expect(\"whoof\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:501:5\n+   --> $DIR/methods.rs:409:5\n     |\n-501 |     res4.ok().expect(\"argh\");\n+409 |     res4.ok().expect(\"argh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:503:5\n+   --> $DIR/methods.rs:411:5\n     |\n-503 |     res5.ok().expect(\"oops\");\n+411 |     res5.ok().expect(\"oops\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:505:5\n+   --> $DIR/methods.rs:413:5\n     |\n-505 |     res6.ok().expect(\"meh\");\n+413 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n \n error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:517:5\n+   --> $DIR/methods.rs:425:5\n     |\n-517 |     \"\".chars().next() == Some(' ');\n+425 |     \"\".chars().next() == Some(' ');\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this `\"\".starts_with(' ')`\n     |\n     = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n@@ -606,17 +606,17 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:522:5\n+   --> $DIR/methods.rs:426:5\n     |\n-522 |     Some(' ') != \"\".chars().next();\n+426 |     Some(' ') != \"\".chars().next();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this `!\"\".starts_with(' ')`\n     |\n     = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:534:5\n+   --> $DIR/methods.rs:435:5\n     |\n-534 |     s.extend(abc.chars());\n+435 |     s.extend(abc.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this `s.push_str(abc)`\n     |\n     = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n@@ -627,25 +627,25 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:540:5\n+   --> $DIR/methods.rs:438:5\n     |\n-540 |     s.extend(\"abc\".chars());\n+438 |     s.extend(\"abc\".chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this `s.push_str(\"abc\")`\n     |\n     = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:546:5\n+   --> $DIR/methods.rs:441:5\n     |\n-546 |     s.extend(def.chars());\n+441 |     s.extend(def.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this `s.push_str(&def)`\n     |\n     = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:560:5\n+   --> $DIR/methods.rs:452:5\n     |\n-560 |     42.clone();\n+452 |     42.clone();\n     |     ^^^^^^^^^^ help: try removing the `clone` call `42`\n     |\n     = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n@@ -656,33 +656,33 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:565:5\n+   --> $DIR/methods.rs:456:5\n     |\n-565 |     (&42).clone();\n+456 |     (&42).clone();\n     |     ^^^^^^^^^^^^^ help: try dereferencing it `*(&42)`\n     |\n     = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:571:5\n+   --> $DIR/methods.rs:460:5\n     |\n-571 |     t.clone();\n+460 |     t.clone();\n     |     ^^^^^^^^^ help: try removing the `clone` call `t`\n     |\n     = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:574:5\n+   --> $DIR/methods.rs:462:5\n     |\n-574 |     Some(t).clone();\n+462 |     Some(t).clone();\n     |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call `Some(t)`\n     |\n     = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-   --> $DIR/methods.rs:582:22\n+   --> $DIR/methods.rs:468:22\n     |\n-582 |     let z: &Vec<_> = y.clone();\n+468 |     let z: &Vec<_> = y.clone();\n     |                      ^^^^^^^^^ help: try dereferencing it `(*y).clone()`\n     |\n     = note: #[deny(clone_double_ref)] implied by #[deny(clippy)]\n@@ -693,9 +693,9 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:590:13\n+   --> $DIR/methods.rs:475:13\n     |\n-590 |     x.split(\"x\");\n+475 |     x.split(\"x\");\n     |     --------^^^- help: try using a char instead: `x.split('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n@@ -706,137 +706,137 @@ note: lint level defined here\n     |         ^^^^^^\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:614:16\n+   --> $DIR/methods.rs:492:16\n     |\n-614 |     x.contains(\"x\");\n+492 |     x.contains(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.contains('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:618:19\n+   --> $DIR/methods.rs:493:19\n     |\n-618 |     x.starts_with(\"x\");\n+493 |     x.starts_with(\"x\");\n     |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:622:17\n+   --> $DIR/methods.rs:494:17\n     |\n-622 |     x.ends_with(\"x\");\n+494 |     x.ends_with(\"x\");\n     |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:626:12\n+   --> $DIR/methods.rs:495:12\n     |\n-626 |     x.find(\"x\");\n+495 |     x.find(\"x\");\n     |     -------^^^- help: try using a char instead: `x.find('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:630:13\n+   --> $DIR/methods.rs:496:13\n     |\n-630 |     x.rfind(\"x\");\n+496 |     x.rfind(\"x\");\n     |     --------^^^- help: try using a char instead: `x.rfind('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:634:14\n+   --> $DIR/methods.rs:497:14\n     |\n-634 |     x.rsplit(\"x\");\n+497 |     x.rsplit(\"x\");\n     |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:638:24\n+   --> $DIR/methods.rs:498:24\n     |\n-638 |     x.split_terminator(\"x\");\n+498 |     x.split_terminator(\"x\");\n     |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:642:25\n+   --> $DIR/methods.rs:499:25\n     |\n-642 |     x.rsplit_terminator(\"x\");\n+499 |     x.rsplit_terminator(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:646:17\n+   --> $DIR/methods.rs:500:17\n     |\n-646 |     x.splitn(0, \"x\");\n+500 |     x.splitn(0, \"x\");\n     |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:650:18\n+   --> $DIR/methods.rs:501:18\n     |\n-650 |     x.rsplitn(0, \"x\");\n+501 |     x.rsplitn(0, \"x\");\n     |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:654:15\n+   --> $DIR/methods.rs:502:15\n     |\n-654 |     x.matches(\"x\");\n+502 |     x.matches(\"x\");\n     |     ----------^^^- help: try using a char instead: `x.matches('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:658:16\n+   --> $DIR/methods.rs:503:16\n     |\n-658 |     x.rmatches(\"x\");\n+503 |     x.rmatches(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:662:21\n+   --> $DIR/methods.rs:504:21\n     |\n-662 |     x.match_indices(\"x\");\n+504 |     x.match_indices(\"x\");\n     |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:666:22\n+   --> $DIR/methods.rs:505:22\n     |\n-666 |     x.rmatch_indices(\"x\");\n+505 |     x.rmatch_indices(\"x\");\n     |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:670:25\n+   --> $DIR/methods.rs:506:25\n     |\n-670 |     x.trim_left_matches(\"x\");\n+506 |     x.trim_left_matches(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:674:26\n+   --> $DIR/methods.rs:507:26\n     |\n-674 |     x.trim_right_matches(\"x\");\n+507 |     x.trim_right_matches(\"x\");\n     |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n     |\n     = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n \n error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:687:5\n+   --> $DIR/methods.rs:517:5\n     |\n-687 |     CString::new(\"foo\").unwrap().as_ptr();\n+517 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(temporary_cstring_as_ptr)] implied by #[deny(clippy)]\n@@ -847,15 +847,15 @@ note: lint level defined here\n     |         ^^^^^^\n     = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:687:5\n+   --> $DIR/methods.rs:517:5\n     |\n-687 |     CString::new(\"foo\").unwrap().as_ptr();\n+517 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:695:27\n+   --> $DIR/methods.rs:522:27\n     |\n-695 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+522 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: #[deny(iter_cloned_collect)] implied by #[deny(clippy)]"}]}