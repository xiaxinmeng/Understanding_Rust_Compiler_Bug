{"sha": "2579dc6d82dff5d2b86f490121fe8b087216b74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzlkYzZkODJkZmY1ZDJiODZmNDkwMTIxZmU4YjA4NzIxNmI3NGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T12:24:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T12:24:25Z"}, "message": "Update `inline_call` assist doc example", "tree": {"sha": "3797d3ca61315f02b8f49f48ed97f3d13ff5c891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3797d3ca61315f02b8f49f48ed97f3d13ff5c891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2579dc6d82dff5d2b86f490121fe8b087216b74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2579dc6d82dff5d2b86f490121fe8b087216b74e", "html_url": "https://github.com/rust-lang/rust/commit/2579dc6d82dff5d2b86f490121fe8b087216b74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2579dc6d82dff5d2b86f490121fe8b087216b74e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc4f9e371e8cf5e49b265217003800a6bd19344", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4f9e371e8cf5e49b265217003800a6bd19344", "html_url": "https://github.com/rust-lang/rust/commit/2bc4f9e371e8cf5e49b265217003800a6bd19344"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "2059a7472d7cbfeee87e8c31b841dcc915e97685", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=2579dc6d82dff5d2b86f490121fe8b087216b74e", "patch": "@@ -17,23 +17,18 @@ use crate::{\n // Inlines a function or method body.\n //\n // ```\n-// fn align(a: u32, b: u32) -> u32 {\n-//     (a + b - 1) & !(b - 1)\n-// }\n-// fn main() {\n-//     let x = align$0(1, 2);\n+// # //- minicore: option\n+// fn foo(name: Option<&str>) {\n+//     let name = name.unwrap$0();\n // }\n // ```\n // ->\n // ```\n-// fn align(a: u32, b: u32) -> u32 {\n-//     (a + b - 1) & !(b - 1)\n-// }\n-// fn main() {\n-//     let x = {\n-//         let b = 2;\n-//         (1 + b - 1) & !(b - 1)\n-//     };\n+// fn foo(name: Option<&str>) {\n+//     let name = match name {\n+//             Some(val) => val,\n+//             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+//         };\n // }\n // ```\n pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {"}, {"sha": "e35e68b40dcafe53a2654aadbc26db279bb4e774", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2579dc6d82dff5d2b86f490121fe8b087216b74e", "patch": "@@ -923,22 +923,17 @@ fn doctest_inline_call() {\n     check_doc_test(\n         \"inline_call\",\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 {\n-    (a + b - 1) & !(b - 1)\n-}\n-fn main() {\n-    let x = align$0(1, 2);\n+//- minicore: option\n+fn foo(name: Option<&str>) {\n+    let name = name.unwrap$0();\n }\n \"#####,\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 {\n-    (a + b - 1) & !(b - 1)\n-}\n-fn main() {\n-    let x = {\n-        let b = 2;\n-        (1 + b - 1) & !(b - 1)\n-    };\n+fn foo(name: Option<&str>) {\n+    let name = match name {\n+            Some(val) => val,\n+            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+        };\n }\n \"#####,\n     )"}, {"sha": "2396408270efceb0f879a8d8db39c9322855c44d", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=2579dc6d82dff5d2b86f490121fe8b087216b74e", "patch": "@@ -161,6 +161,14 @@ fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n         }\n     }\n \n+    if prev.kind() == T!['{'] && ast::Stmt::can_cast(new.kind()) {\n+        if let Some(block_expr) = prev.parent().and_then(ast::BlockExpr::cast) {\n+            let mut indent = IndentLevel::from_element(&block_expr.syntax().clone().into());\n+            indent.0 += 1;\n+            return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+        }\n+    }\n+\n     ws_between(prev, new)\n }\n fn ws_after(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n@@ -187,12 +195,6 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n         return None;\n     }\n \n-    if left.kind() == T!['{'] && right.kind() == SyntaxKind::LET_STMT {\n-        let mut indent = IndentLevel::from_element(left);\n-        indent.0 += 1;\n-        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n-    }\n-\n     if right.kind() == SyntaxKind::USE {\n         let mut indent = IndentLevel::from_element(left);\n         if left.kind() == SyntaxKind::USE {"}, {"sha": "8e212523fb61beee4857dae7b0ab1465a19e9335", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2579dc6d82dff5d2b86f490121fe8b087216b74e/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=2579dc6d82dff5d2b86f490121fe8b087216b74e", "patch": "@@ -330,6 +330,15 @@ pub mod option {\n         #[lang = \"Some\"]\n         Some(T),\n     }\n+\n+    impl<T> Option<T> {\n+        pub const fn unwrap(self) -> T {\n+            match self {\n+                Some(val) => val,\n+                None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+            }\n+        }\n+    }\n }\n // endregion:option\n "}]}