{"sha": "7a04ff6c33c8bc9b8b1012e12a9920df52956e2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDRmZjZjMzNjOGJjOWI4YjEwMTJlMTJhOTkyMGRmNTI5NTZlMmY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-20T10:14:41Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-21T18:43:44Z"}, "message": "Gate Atomic::from_mut on cfg(target_has_atomic_equal_alignment).\n\nInstead of a few hardcoded cfg(target_arch = ..) like before.", "tree": {"sha": "57e6eee2e171ab169e6a2e6150fdd6c0f131d036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e6eee2e171ab169e6a2e6150fdd6c0f131d036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f", "html_url": "https://github.com/rust-lang/rust/commit/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668225d157d91e5c55a02aa7abc1b65ec9690ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/668225d157d91e5c55a02aa7abc1b65ec9690ffa", "html_url": "https://github.com/rust-lang/rust/commit/668225d157d91e5c55a02aa7abc1b65ec9690ffa"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "fa9d3c95b1790ce477fe0dee6911abcf12b04e52", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a04ff6c33c8bc9b8b1012e12a9920df52956e2f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=7a04ff6c33c8bc9b8b1012e12a9920df52956e2f", "patch": "@@ -110,6 +110,8 @@ use self::Ordering::*;\n use crate::cell::UnsafeCell;\n use crate::fmt;\n use crate::intrinsics;\n+\n+#[allow(unused_imports)]\n use crate::mem::align_of;\n \n use crate::hint::spin_loop;\n@@ -342,6 +344,7 @@ impl AtomicBool {\n     /// assert_eq!(some_bool, false);\n     /// ```\n     #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"8\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n     pub fn from_mut(v: &mut bool) -> &Self {\n         // SAFETY: the mutable reference guarantees unique ownership, and\n@@ -855,6 +858,7 @@ impl<T> AtomicPtr<T> {\n     /// assert_eq!(unsafe { *some_ptr }, 456);\n     /// ```\n     #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n     pub fn from_mut(v: &mut *mut T) -> &Self {\n         let [] = [(); align_of::<AtomicPtr<()>>() - align_of::<*mut ()>()];\n@@ -1159,6 +1163,7 @@ macro_rules! if_not_8_bit {\n #[cfg(target_has_atomic_load_store = \"8\")]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n+     $cfg_align:meta,\n      $stable:meta,\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n@@ -1167,7 +1172,6 @@ macro_rules! atomic_int {\n      $stable_nand:meta,\n      $const_stable:meta,\n      $stable_init_const:meta,\n-     $(from_mut: cfg($from_mut_cfg:meta),)?\n      $s_int_type:literal, $int_ref:expr,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n@@ -1304,15 +1308,14 @@ assert_eq!(some_int, 100);\n ```\n                 \"),\n                 #[inline]\n-                $(#[cfg($from_mut_cfg)])?\n+                #[$cfg_align]\n                 #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n                 pub fn from_mut(v: &mut $int_type) -> &Self {\n                     let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                     // SAFETY:\n                     //  - the mutable reference guarantees unique ownership.\n                     //  - the alignment of `$int_type` and `Self` is the\n-                    //    same on all platforms enabled by `$from_mut_cfg`\n-                    //    as verified above.\n+                    //    same, as promised by $cfg_align and verified above.\n                     unsafe { &*(v as *mut $int_type as *mut Self) }\n                 }\n             }\n@@ -1959,6 +1962,7 @@ let mut atomic = \", stringify!($atomic_type), \"::new(1);\n #[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n+    cfg(target_has_atomic_equal_alignment = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1977,6 +1981,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n+    cfg(target_has_atomic_equal_alignment = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1995,6 +2000,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n+    cfg(target_has_atomic_equal_alignment = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2013,6 +2019,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n+    cfg(target_has_atomic_equal_alignment = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2031,6 +2038,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n+    cfg(target_has_atomic_equal_alignment = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2049,6 +2057,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n+    cfg(target_has_atomic_equal_alignment = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2067,6 +2076,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n+    cfg(target_has_atomic_equal_alignment = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2075,7 +2085,6 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86\")),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2086,6 +2095,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n+    cfg(target_has_atomic_equal_alignment = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2094,7 +2104,6 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86\")),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2105,6 +2114,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"128\")]\n atomic_int! {\n     cfg(target_has_atomic = \"128\"),\n+    cfg(target_has_atomic_equal_alignment = \"128\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -2113,7 +2123,6 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86_64\")),\n     \"i128\", \"../../../std/primitive.i128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -2124,6 +2133,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"128\")]\n atomic_int! {\n     cfg(target_has_atomic = \"128\"),\n+    cfg(target_has_atomic_equal_alignment = \"128\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -2132,7 +2142,6 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86_64\")),\n     \"u128\", \"../../../std/primitive.u128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n@@ -2164,6 +2173,7 @@ macro_rules! ptr_width {\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int! {\n     cfg(target_has_atomic = \"ptr\"),\n+    cfg(target_has_atomic_equal_alignment = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n@@ -2182,6 +2192,7 @@ atomic_int! {\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int! {\n     cfg(target_has_atomic = \"ptr\"),\n+    cfg(target_has_atomic_equal_alignment = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),"}]}