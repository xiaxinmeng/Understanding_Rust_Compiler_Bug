{"sha": "f045210857a8936c7d6ce36a3029eac906dedc4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDUyMTA4NTdhODkzNmM3ZDZjZTM2YTMwMjllYWM5MDZkZWRjNGU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-06-21T15:05:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-23T08:23:00Z"}, "message": "std::hashmap: Use .iter() instead of .each and similar", "tree": {"sha": "2aa68c77d78696dd64dbdb958ebd25b9c6c3bc49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa68c77d78696dd64dbdb958ebd25b9c6c3bc49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f045210857a8936c7d6ce36a3029eac906dedc4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f045210857a8936c7d6ce36a3029eac906dedc4e", "html_url": "https://github.com/rust-lang/rust/commit/f045210857a8936c7d6ce36a3029eac906dedc4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f045210857a8936c7d6ce36a3029eac906dedc4e/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af1d20bea80faaf5fe14a56c94e8e7337691e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af1d20bea80faaf5fe14a56c94e8e7337691e0d", "html_url": "https://github.com/rust-lang/rust/commit/3af1d20bea80faaf5fe14a56c94e8e7337691e0d"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "dddda60702aa5754521d5d795e034f3f8563e33d", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f045210857a8936c7d6ce36a3029eac906dedc4e/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045210857a8936c7d6ce36a3029eac906dedc4e/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=f045210857a8936c7d6ce36a3029eac906dedc4e", "patch": "@@ -19,7 +19,6 @@ use container::{Container, Mutable, Map, Set};\n use cmp::{Eq, Equiv};\n use hash::Hash;\n use old_iter::BaseIter;\n-use old_iter;\n use iterator::{Iterator, IteratorUtil};\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -548,7 +547,7 @@ impl<K:Hash + Eq,V:Eq> Eq for HashMap<K, V> {\n     fn eq(&self, other: &HashMap<K, V>) -> bool {\n         if self.len() != other.len() { return false; }\n \n-        for self.each |key, value| {\n+        for self.iter().advance |(key, value)| {\n             match other.find(key) {\n                 None => return false,\n                 Some(v) => if value != v { return false },\n@@ -662,12 +661,12 @@ impl<T:Hash + Eq> Set<T> for HashSet<T> {\n     /// Return true if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     fn is_disjoint(&self, other: &HashSet<T>) -> bool {\n-        old_iter::all(self, |v| !other.contains(v))\n+        self.iter().all(|v| !other.contains(v))\n     }\n \n     /// Return true if the set is a subset of another\n     fn is_subset(&self, other: &HashSet<T>) -> bool {\n-        old_iter::all(self, |v| other.contains(v))\n+        self.iter().all(|v| other.contains(v))\n     }\n \n     /// Return true if the set is a superset of another\n@@ -677,7 +676,7 @@ impl<T:Hash + Eq> Set<T> for HashSet<T> {\n \n     /// Visit the values representing the difference\n     fn difference(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.each(|v| other.contains(v) || f(v))\n+        self.iter().advance(|v| other.contains(v) || f(v))\n     }\n \n     /// Visit the values representing the symmetric difference\n@@ -689,12 +688,12 @@ impl<T:Hash + Eq> Set<T> for HashSet<T> {\n \n     /// Visit the values representing the intersection\n     fn intersection(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.each(|v| !other.contains(v) || f(v))\n+        self.iter().advance(|v| !other.contains(v) || f(v))\n     }\n \n     /// Visit the values representing the union\n     fn union(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.each(f) && other.each(|v| self.contains(v) || f(v))\n+        self.iter().advance(f) && other.iter().advance(|v| self.contains(v) || f(v))\n     }\n }\n \n@@ -875,7 +874,7 @@ mod test_map {\n             assert!(m.insert(i, i*2));\n         }\n         let mut observed = 0;\n-        for m.each |k, v| {\n+        for m.iter().advance |(k, v)| {\n             assert_eq!(*v, *k * 2);\n             observed |= (1 << *k);\n         }"}]}