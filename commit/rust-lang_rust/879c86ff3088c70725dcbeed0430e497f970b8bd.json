{"sha": "879c86ff3088c70725dcbeed0430e497f970b8bd", "node_id": "C_kwDOAAsO6NoAKDg3OWM4NmZmMzA4OGM3MDcyNWRjYmVlZDA0MzBlNDk3Zjk3MGI4YmQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-15T14:08:30Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-15T14:08:30Z"}, "message": "Implement dyn* support", "tree": {"sha": "08496ddb4857e8aa6dd31bc00ad29f54cb212ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08496ddb4857e8aa6dd31bc00ad29f54cb212ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879c86ff3088c70725dcbeed0430e497f970b8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879c86ff3088c70725dcbeed0430e497f970b8bd", "html_url": "https://github.com/rust-lang/rust/commit/879c86ff3088c70725dcbeed0430e497f970b8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879c86ff3088c70725dcbeed0430e497f970b8bd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68742a03cf460d8e319830acc6f371238d6bf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68742a03cf460d8e319830acc6f371238d6bf13", "html_url": "https://github.com/rust-lang/rust/commit/f68742a03cf460d8e319830acc6f371238d6bf13"}], "stats": {"total": 106, "additions": 95, "deletions": 11}, "files": [{"sha": "04e39954dd3cd20802fd132946b4a8d49fd61b9a", "filename": "src/abi/mod.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=879c86ff3088c70725dcbeed0430e497f970b8bd", "patch": "@@ -465,7 +465,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n-            (CallTarget::Indirect(sig, method), Some(ptr))\n+            (CallTarget::Indirect(sig, method), Some(ptr.get_addr(fx)))\n         }\n \n         // Normal call\n@@ -560,7 +560,19 @@ pub(crate) fn codegen_drop<'tcx>(\n         // we don't actually need to drop anything\n     } else {\n         match ty.kind() {\n-            ty::Dynamic(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn Trait)\n+                // which is: exists<T> ( *mut T,    Vtable<T: Trait> )\n+                //                       args[0]    args[1]\n+                //\n+                // args = ( Data, Vtable )\n+                //                  |\n+                //                  v\n+                //                /-------\\\n+                //                | ...   |\n+                //                \\-------/\n+                //\n                 let (ptr, vtable) = drop_place.to_ptr_maybe_unsized();\n                 let ptr = ptr.get_addr(fx);\n                 let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n@@ -578,6 +590,44 @@ pub(crate) fn codegen_drop<'tcx>(\n                 let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }\n+            ty::Dynamic(_, _, ty::DynStar) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn* Trait)\n+                // which is: *mut exists<T: sizeof(T) == sizeof(usize)> (T, Vtable<T: Trait>)\n+                //\n+                // args = [ * ]\n+                //          |\n+                //          v\n+                //      ( Data, Vtable )\n+                //                |\n+                //                v\n+                //              /-------\\\n+                //              | ...   |\n+                //              \\-------/\n+                //\n+                //\n+                // WE CAN CONVERT THIS INTO THE ABOVE LOGIC BY DOING\n+                //\n+                // data = &(*args[0]).0    // gives a pointer to Data above (really the same pointer)\n+                // vtable = (*args[0]).1   // loads the vtable out\n+                // (data, vtable)          // an equivalent Rust `*mut dyn Trait`\n+                //\n+                // SO THEN WE CAN USE THE ABOVE CODE.\n+                let dyn_star = drop_place.to_cvalue(fx);\n+                let (data, vtable) = dyn_star.load_scalar_pair(fx);\n+                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable);\n+\n+                let virtual_drop = Instance {\n+                    def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n+                    substs: drop_instance.substs,\n+                };\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, ty::List::empty());\n+\n+                let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n+                let sig = fx.bcx.import_signature(sig);\n+                fx.bcx.ins().call_indirect(sig, drop_fn, &[data]);\n+            }\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n "}, {"sha": "317aaa21c8e50adb689130cd81f9592400028145", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=879c86ff3088c70725dcbeed0430e497f970b8bd", "patch": "@@ -701,9 +701,9 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n-                Rvalue::Cast(CastKind::DynStar, _, _) => {\n-                    // FIXME(dyn-star)\n-                    unimplemented!()\n+                Rvalue::Cast(CastKind::DynStar, ref operand, _) => {\n+                    let operand = codegen_operand(fx, operand);\n+                    operand.coerce_dyn_star(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n                     let place = codegen_place(fx, place);"}, {"sha": "b194a7c8b0dddb2c39d1045072ffa817afa4ef5e", "filename": "src/unsize.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=879c86ff3088c70725dcbeed0430e497f970b8bd", "patch": "@@ -147,6 +147,22 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n     }\n }\n \n+pub(crate) fn coerce_dyn_star<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    src: CValue<'tcx>,\n+    dst: CPlace<'tcx>,\n+) {\n+    let data = src.load_scalar(fx);\n+\n+    let vtable = if let ty::Dynamic(data, _, ty::DynStar) = dst.layout().ty.kind() {\n+        crate::vtable::get_vtable(fx, src.layout().ty, data.principal())\n+    } else {\n+        bug!(\"Only valid to do a DynStar cast into a DynStar type\")\n+    };\n+\n+    dst.write_cvalue(fx, CValue::by_val_pair(data, vtable, dst.layout()));\n+}\n+\n // Adapted from https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/librustc_codegen_ssa/glue.rs\n \n pub(crate) fn size_and_align_of_dst<'tcx>("}, {"sha": "91fb421a9ee1f2c3e987db1d6f05fe512464690c", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=879c86ff3088c70725dcbeed0430e497f970b8bd", "patch": "@@ -236,6 +236,10 @@ impl<'tcx> CValue<'tcx> {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n \n+    pub(crate) fn coerce_dyn_star(self, fx: &mut FunctionCx<'_, '_, 'tcx>, dest: CPlace<'tcx>) {\n+        crate::unsize::coerce_dyn_star(fx, self, dest);\n+    }\n+\n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}, {"sha": "f04fb82de8c81f17db8f21f0e48c8d5fcffe5d8a", "filename": "src/vtable.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879c86ff3088c70725dcbeed0430e497f970b8bd/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=879c86ff3088c70725dcbeed0430e497f970b8bd", "patch": "@@ -45,12 +45,26 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     arg: CValue<'tcx>,\n     idx: usize,\n-) -> (Value, Value) {\n-    let (ptr, vtable) = if let Abi::ScalarPair(_, _) = arg.layout().abi {\n-        arg.load_scalar_pair(fx)\n-    } else {\n-        let (ptr, vtable) = arg.try_to_ptr().unwrap();\n-        (ptr.get_addr(fx), vtable.unwrap())\n+) -> (Pointer, Value) {\n+    let (ptr, vtable) = 'block: {\n+        if let ty::Ref(_, ty, _) = arg.layout().ty.kind() {\n+            if ty.is_dyn_star() {\n+                let inner_layout = fx.layout_of(arg.layout().ty.builtin_deref(true).unwrap().ty);\n+                let dyn_star = CPlace::for_ptr(Pointer::new(arg.load_scalar(fx)), inner_layout);\n+                let ptr = dyn_star.place_field(fx, mir::Field::new(0)).to_ptr();\n+                let vtable =\n+                    dyn_star.place_field(fx, mir::Field::new(1)).to_cvalue(fx).load_scalar(fx);\n+                break 'block (ptr, vtable);\n+            }\n+        }\n+\n+        if let Abi::ScalarPair(_, _) = arg.layout().abi {\n+            let (ptr, vtable) = arg.load_scalar_pair(fx);\n+            (Pointer::new(ptr), vtable)\n+        } else {\n+            let (ptr, vtable) = arg.try_to_ptr().unwrap();\n+            (ptr, vtable.unwrap())\n+        }\n     };\n \n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes();"}]}