{"sha": "356ea0b405f08bd6a8fcff1138088802747a5ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmVhMGI0MDVmMDhiZDZhOGZjZmYxMTM4MDg4ODAyNzQ3YTVlZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-03-20T16:45:03Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-03-20T19:09:26Z"}, "message": "nll_relate/mod.rs: rustfmt", "tree": {"sha": "d57d1c349f622d54eb01399b76c7ff3ca9a9ee87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57d1c349f622d54eb01399b76c7ff3ca9a9ee87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356ea0b405f08bd6a8fcff1138088802747a5ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356ea0b405f08bd6a8fcff1138088802747a5ee9", "html_url": "https://github.com/rust-lang/rust/commit/356ea0b405f08bd6a8fcff1138088802747a5ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356ea0b405f08bd6a8fcff1138088802747a5ee9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "html_url": "https://github.com/rust-lang/rust/commit/d6a2b7c470c91badc8ac2f1e20b40497086c6a66"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "1767db3ff03731e16982bba11f0d31c83375e304", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/356ea0b405f08bd6a8fcff1138088802747a5ee9/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356ea0b405f08bd6a8fcff1138088802747a5ee9/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=356ea0b405f08bd6a8fcff1138088802747a5ee9", "patch": "@@ -22,12 +22,12 @@\n //!   constituents)\n \n use crate::infer::InferCtxt;\n+use crate::traits::DomainGoal;\n+use crate::ty::error::TypeError;\n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::Kind;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::error::TypeError;\n-use crate::traits::DomainGoal;\n use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -266,15 +266,17 @@ where\n     fn relate_projection_ty(\n         &mut self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n-        value_ty: ty::Ty<'tcx>\n+        value_ty: ty::Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         use crate::infer::type_variable::TypeVariableOrigin;\n         use crate::traits::WhereClause;\n         use syntax_pos::DUMMY_SP;\n \n         match value_ty.sty {\n             ty::Projection(other_projection_ty) => {\n-                let var = self.infcx.next_ty_var(TypeVariableOrigin::MiscVariable(DUMMY_SP));\n+                let var = self\n+                    .infcx\n+                    .next_ty_var(TypeVariableOrigin::MiscVariable(DUMMY_SP));\n                 self.relate_projection_ty(projection_ty, var);\n                 self.relate_projection_ty(other_projection_ty, var);\n                 var\n@@ -285,9 +287,8 @@ where\n                     projection_ty,\n                     ty: value_ty,\n                 };\n-                self.delegate.push_domain_goal(\n-                    DomainGoal::Holds(WhereClause::ProjectionEq(projection))\n-                );\n+                self.delegate\n+                    .push_domain_goal(DomainGoal::Holds(WhereClause::ProjectionEq(projection)));\n                 value_ty\n             }\n         }\n@@ -297,20 +298,21 @@ where\n     fn relate_ty_var(\n         &mut self,\n         vid: ty::TyVid,\n-        value_ty: Ty<'tcx>\n+        value_ty: Ty<'tcx>,\n     ) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug!(\"relate_ty_var(vid={:?}, value_ty={:?})\", vid, value_ty);\n \n         match value_ty.sty {\n             ty::Infer(ty::TyVar(value_vid)) => {\n                 // Two type variables: just equate them.\n-                self.infcx.type_variables.borrow_mut().equate(vid, value_vid);\n+                self.infcx\n+                    .type_variables\n+                    .borrow_mut()\n+                    .equate(vid, value_vid);\n                 return Ok(value_ty);\n             }\n \n-            ty::Projection(projection_ty)\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n+            ty::Projection(projection_ty) if D::normalization() == NormalizationStrategy::Lazy => {\n                 return Ok(self.relate_projection_ty(projection_ty, self.infcx.tcx.mk_ty_var(vid)));\n             }\n \n@@ -327,7 +329,10 @@ where\n             assert!(!generalized_ty.has_infer_types());\n         }\n \n-        self.infcx.type_variables.borrow_mut().instantiate(vid, generalized_ty);\n+        self.infcx\n+            .type_variables\n+            .borrow_mut()\n+            .instantiate(vid, generalized_ty);\n \n         // The generalized values we extract from `canonical_var_values` have\n         // been fully instantiated and hence the set of scopes we have\n@@ -348,7 +353,7 @@ where\n     fn generalize_value<T: Relate<'tcx>>(\n         &mut self,\n         value: T,\n-        for_vid: ty::TyVid\n+        for_vid: ty::TyVid,\n     ) -> RelateResult<'tcx, T> {\n         let universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n \n@@ -764,7 +769,9 @@ where\n                             drop(variables);\n                             self.relate(&u, &u)\n                         }\n-                        TypeVariableValue::Unknown { universe: _universe } => {\n+                        TypeVariableValue::Unknown {\n+                            universe: _universe,\n+                        } => {\n                             if self.ambient_variance == ty::Bivariant {\n                                 // FIXME: we may need a WF predicate (related to #54105).\n                             }\n@@ -779,17 +786,15 @@ where\n                             let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\n                                 \"generalize: replacing original vid={:?} with new={:?}\",\n-                                vid,\n-                                u\n+                                vid, u\n                             );\n                             return Ok(u);\n                         }\n                     }\n                 }\n             }\n \n-            ty::Infer(ty::IntVar(_)) |\n-            ty::Infer(ty::FloatVar(_)) => {\n+            ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) => {\n                 // No matter what mode we are in,\n                 // integer/floating-point types must be equal to be\n                 // relatable.\n@@ -800,19 +805,16 @@ where\n                 if self.universe.cannot_name(placeholder.universe) {\n                     debug!(\n                         \"TypeGeneralizer::tys: root universe {:?} cannot name\\\n-                        placeholder in universe {:?}\",\n-                        self.universe,\n-                        placeholder.universe\n+                         placeholder in universe {:?}\",\n+                        self.universe, placeholder.universe\n                     );\n                     Err(TypeError::Mismatch)\n                 } else {\n                     Ok(a)\n                 }\n             }\n \n-            _ => {\n-                relate::super_relate_tys(self, a, a)\n-            }\n+            _ => relate::super_relate_tys(self, a, a),\n         }\n     }\n "}]}