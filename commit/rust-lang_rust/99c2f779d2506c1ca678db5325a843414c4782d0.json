{"sha": "99c2f779d2506c1ca678db5325a843414c4782d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzJmNzc5ZDI1MDZjMWNhNjc4ZGI1MzI1YTg0MzQxNGM0NzgyZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T01:09:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T01:09:48Z"}, "message": "Auto merge of #25816 - sfackler:io-error-delegation, r=alexcrichton\n\nThe first commit simply forwards `io::Error`'s `cause` implementation to the inner error.\r\n\r\nThe second commit adds accessor methods for the inner error. Method names mirror those used elsewhere like `BufReader`.\r\n\r\nr? @alexcrichton", "tree": {"sha": "fb656cdf7ce26288090e5c2b8bd798dbcd7bc2ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb656cdf7ce26288090e5c2b8bd798dbcd7bc2ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c2f779d2506c1ca678db5325a843414c4782d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c2f779d2506c1ca678db5325a843414c4782d0", "html_url": "https://github.com/rust-lang/rust/commit/99c2f779d2506c1ca678db5325a843414c4782d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c2f779d2506c1ca678db5325a843414c4782d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53941be9814f05496b3147da393c639a9d48957e", "url": "https://api.github.com/repos/rust-lang/rust/commits/53941be9814f05496b3147da393c639a9d48957e", "html_url": "https://github.com/rust-lang/rust/commit/53941be9814f05496b3147da393c639a9d48957e"}, {"sha": "aebf331431eeac6e91eba5072e2ee7f171cd1244", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebf331431eeac6e91eba5072e2ee7f171cd1244", "html_url": "https://github.com/rust-lang/rust/commit/aebf331431eeac6e91eba5072e2ee7f171cd1244"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "85b957640fdab03f5b150d7938bed3dcd63e0305", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/99c2f779d2506c1ca678db5325a843414c4782d0/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2f779d2506c1ca678db5325a843414c4782d0/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=99c2f779d2506c1ca678db5325a843414c4782d0", "patch": "@@ -129,9 +129,7 @@ impl Error {\n     ///\n     /// This function is used to generically create I/O errors which do not\n     /// originate from the OS itself. The `error` argument is an arbitrary\n-    /// payload which will be contained in this `Error`. Accessors as well as\n-    /// downcasting will soon be added to this type as well to access the custom\n-    /// information.\n+    /// payload which will be contained in this `Error`.\n     ///\n     /// # Examples\n     ///\n@@ -174,8 +172,9 @@ impl Error {\n \n     /// Returns the OS error that this error represents (if any).\n     ///\n-    /// If this `Error` was constructed via `last_os_error` then this function\n-    /// will return `Some`, otherwise it will return `None`.\n+    /// If this `Error` was constructed via `last_os_error` or\n+    /// `from_raw_os_error`, then this function will return `Some`, otherwise\n+    /// it will return `None`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -184,6 +183,46 @@ impl Error {\n         }\n     }\n \n+    /// Returns a reference to the inner error wrapped by this error (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\",\n+               reason = \"recently added and requires UFCS to downcast\")]\n+    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(ref c) => Some(&*c.error),\n+        }\n+    }\n+\n+    /// Returns a mutable reference to the inner error wrapped by this error\n+    /// (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\",\n+               reason = \"recently added and requires UFCS to downcast\")]\n+    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(ref mut c) => Some(&mut *c.error),\n+        }\n+    }\n+\n+    /// Consumes the `Error`, returning its inner error (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\",\n+               reason = \"recently added and requires UFCS to downcast\")]\n+    pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(c) => Some(c.error)\n+        }\n+    }\n+\n     /// Returns the corresponding `ErrorKind` for this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {\n@@ -215,9 +254,52 @@ impl error::Error for Error {\n             Repr::Custom(ref c) => c.error.description(),\n         }\n     }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(ref c) => c.error.cause(),\n+        }\n+    }\n }\n \n fn _assert_error_is_sync_send() {\n     fn _is_sync_send<T: Sync+Send>() {}\n     _is_sync_send::<Error>();\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use prelude::v1::*;\n+    use super::{Error, ErrorKind};\n+    use error;\n+    use error::Error as error_Error;\n+    use fmt;\n+\n+    #[test]\n+    fn test_downcasting() {\n+        #[derive(Debug)]\n+        struct TestError;\n+\n+        impl fmt::Display for TestError {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                Ok(())\n+            }\n+        }\n+\n+        impl error::Error for TestError {\n+            fn description(&self) -> &str {\n+                \"asdf\"\n+            }\n+        }\n+\n+        // we have to call all of these UFCS style right now since method\n+        // resolution won't implicitly drop the Send+Sync bounds\n+        let mut err = Error::new(ErrorKind::Other, TestError);\n+        assert!(error::Error::is::<TestError>(err.get_ref().unwrap()));\n+        assert_eq!(\"asdf\", err.get_ref().unwrap().description());\n+        assert!(error::Error::is::<TestError>(err.get_mut().unwrap()));\n+        let extracted = err.into_inner().unwrap();\n+        error::Error::downcast::<TestError>(extracted).unwrap();\n+    }\n+}"}]}