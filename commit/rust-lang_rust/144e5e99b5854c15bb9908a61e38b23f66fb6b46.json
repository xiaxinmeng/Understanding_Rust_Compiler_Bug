{"sha": "144e5e99b5854c15bb9908a61e38b23f66fb6b46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NGU1ZTk5YjU4NTRjMTViYjk5MDhhNjFlMzhiMjNmNjZmYjZiNDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T22:22:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:04:10Z"}, "message": "get rid of some remaining type-based dispatching in cast code", "tree": {"sha": "f96805ed4c4c7f99d65e5ededb114bc9730c9795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96805ed4c4c7f99d65e5ededb114bc9730c9795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144e5e99b5854c15bb9908a61e38b23f66fb6b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144e5e99b5854c15bb9908a61e38b23f66fb6b46", "html_url": "https://github.com/rust-lang/rust/commit/144e5e99b5854c15bb9908a61e38b23f66fb6b46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144e5e99b5854c15bb9908a61e38b23f66fb6b46/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7885fac7e904568d58eae4ef34239a3c41241aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7885fac7e904568d58eae4ef34239a3c41241aa8", "html_url": "https://github.com/rust-lang/rust/commit/7885fac7e904568d58eae4ef34239a3c41241aa8"}], "stats": {"total": 70, "additions": 25, "deletions": 45}, "files": [{"sha": "fb4329ee0e32a85b5814977ac8e3af835a8363fc", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/144e5e99b5854c15bb9908a61e38b23f66fb6b46/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144e5e99b5854c15bb9908a61e38b23f66fb6b46/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=144e5e99b5854c15bb9908a61e38b23f66fb6b46", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::sym;\n use rustc_apfloat::ieee::{Single, Double};\n use rustc_apfloat::{Float, FloatConvert};\n use rustc::mir::interpret::{\n-    Scalar, InterpResult, Pointer, PointerArithmetic,\n+    Scalar, InterpResult, PointerArithmetic,\n };\n use rustc::mir::CastKind;\n \n@@ -111,15 +111,29 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 )\n         }\n \n+        // Handle cast from a univariant (ZST) enum\n+        match src.layout.variants {\n+            layout::Variants::Single { index } => {\n+                if let Some(discr) =\n+                    src.layout.ty.discriminant_for_variant(*self.tcx, index)\n+                {\n+                    assert!(src.layout.is_zst());\n+                    return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n+                }\n+            }\n+            layout::Variants::Multiple { .. } => {},\n+        }\n+\n         // Handle casting the metadata away from a fat pointer.\n         if src.layout.ty.is_unsafe_ptr() && dest_layout.ty.is_unsafe_ptr() &&\n             dest_layout.size != src.layout.size\n         {\n             assert_eq!(src.layout.size, 2*self.memory.pointer_size());\n             assert_eq!(dest_layout.size, self.memory.pointer_size());\n             assert!(dest_layout.ty.is_unsafe_ptr());\n-            return match *src {\n-                Immediate::ScalarPair(data, _) => Ok(data.into()),\n+            match *src {\n+                Immediate::ScalarPair(data, _) =>\n+                    return Ok(data.into()),\n                 Immediate::Scalar(..) =>\n                     bug!(\n                         \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n@@ -128,34 +142,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             };\n         }\n \n-        // Handle casting reference to raw ptr or raw to other raw (might be a fat ptr).\n-        if (src.layout.ty.is_region_ptr() || src.layout.ty.is_unsafe_ptr()) &&\n+        // Handle casting any ptr to raw ptr (might be a fat ptr).\n+        if (src.layout.ty.is_region_ptr() || src.layout.ty.is_unsafe_ptr() || src.layout.ty.is_fn_ptr()) &&\n             dest_layout.ty.is_unsafe_ptr()\n         {\n             // The only possible size-unequal case was handled above.\n             assert_eq!(src.layout.size, dest_layout.size);\n             return Ok(*src);\n         }\n \n-        // Handle cast from a univariant (ZST) enum\n-        match src.layout.variants {\n-            layout::Variants::Single { index } => {\n-                if let Some(discr) =\n-                    src.layout.ty.discriminant_for_variant(*self.tcx, index)\n-                {\n-                    assert!(src.layout.is_zst());\n-                    return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n-                }\n-            }\n-            layout::Variants::Multiple { .. } => {},\n-        }\n-\n-        // Handle all the rest.\n-        let val = src.to_scalar()?;\n-        Ok(match val.to_bits_or_ptr(src.layout.size, self) {\n-            Err(ptr) => self.cast_from_ptr(ptr, src.layout, dest_layout)?,\n-            Ok(data) => self.cast_from_int(data, src.layout, dest_layout)?,\n-        }.into())\n+        // For all remaining casts, we either\n+        // (a) cast a raw ptr to usize, or\n+        // (b) cast from an integer-like (including bool, char, enums).\n+        // In both cases we want the bits.\n+        let bits = self.force_bits(src.to_scalar()?, src.layout.size)?;\n+        Ok(self.cast_from_int(bits, src.layout, dest_layout)?.into())\n     }\n \n     fn cast_from_int(\n@@ -236,27 +237,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    fn cast_from_ptr(\n-        &self,\n-        ptr: Pointer<M::PointerTag>,\n-        src_layout: TyLayout<'tcx>,\n-        dest_layout: TyLayout<'tcx>,\n-    ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n-        use rustc::ty::TyKind::*;\n-\n-        match dest_layout.ty.sty {\n-            // Casting to a reference or fn pointer is not permitted by rustc,\n-            // no need to support it here.\n-            RawPtr(_) => Ok(ptr.into()),\n-            Int(_) | Uint(_) => {\n-                let size = self.memory.pointer_size();\n-                let bits = self.force_bits(Scalar::Ptr(ptr), size)?;\n-                self.cast_from_int(bits, src_layout, dest_layout)\n-            }\n-            _ => bug!(\"invalid MIR: ptr to {:?} cast\", dest_layout.ty)\n-        }\n-    }\n-\n     fn unsize_into_ptr(\n         &mut self,\n         src: OpTy<'tcx, M::PointerTag>,"}]}