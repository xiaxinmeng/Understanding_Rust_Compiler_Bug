{"sha": "eda73fe707ed680c89e5a080318f6fa7b555616e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYTczZmU3MDdlZDY4MGM4OWU1YTA4MDMxOGY2ZmE3YjU1NTYxNmU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-26T11:45:47Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-26T12:11:58Z"}, "message": "Fix cargo crash", "tree": {"sha": "496c010ff7d7c3c7eb5e9ea37c15fd70f35e81c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496c010ff7d7c3c7eb5e9ea37c15fd70f35e81c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda73fe707ed680c89e5a080318f6fa7b555616e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl6lepAACgkQK0OZxL9N\ny976ag//Vg8mHAikPW5ul3lZbZkjB7hK6KdTdy/Z8elsNk8SV/TvS0FVoD3k2psY\n7N8bAEaPv4aeCSwZLIIQCO2RNFIiNXkTdUznXDum8Lb7NHybBrMbZLDMlYtTb6FO\nVMENnBLF9zbQDJ2JbJda6NmJTGta7jLHO3u64ibZS4TsaIWuMBmOe3kGC/sa56KR\nn8B+bOtvFq6ynh+snUGeikoofyubn724qM158MzQ59VgoCHUi+o609QRo6aJtHaw\nlmSiaO4huroCNL12F404F77gjXK9Ttih/mAwFrMOUV/WqBVjzynCYS0dz+KmOVOW\njcgEjJKh5e7Ld8yjgGze9ObmWmv69C/Dnexrd+GhLq9MN2QE8I6X8U4cVh2x08B4\nfZsheAKd0w8E1DLlAJ8U9s/TDlpVoiy3U6PGLC14wZmSlrDydMLiuYIquCNFaCFH\nyZkpHxvCXOceL9fiGLzyVNahBxA+Weil9LkgO69DnCrc8GrAKse8NqhjnsgimTuP\nclr9LooWQ7Htj10yzfQejv2tGZnTKvWcR/PuUtBAS2Ogf2F3K6FNHaP2qfAI/P0+\nZuVjf0hncN4QJVOr3zSukXrP5XI0RCkn/ze7jEcQYEnBJkUGg+AE9YEUR4DaEN48\nt5lSGz39gME7Q1ov8pqX2Yj/IYNZUf4+bq0CBFsfNJ/qRPKES5Q=\n=s/Vm\n-----END PGP SIGNATURE-----", "payload": "tree 496c010ff7d7c3c7eb5e9ea37c15fd70f35e81c2\nparent 0a4993527014a80c0b86d74c01115054c4875b18\nauthor Philipp Hansch <dev@phansch.net> 1587901547 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1587903118 +0200\n\nFix cargo crash\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda73fe707ed680c89e5a080318f6fa7b555616e", "html_url": "https://github.com/rust-lang/rust/commit/eda73fe707ed680c89e5a080318f6fa7b555616e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda73fe707ed680c89e5a080318f6fa7b555616e/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4993527014a80c0b86d74c01115054c4875b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4993527014a80c0b86d74c01115054c4875b18", "html_url": "https://github.com/rust-lang/rust/commit/0a4993527014a80c0b86d74c01115054c4875b18"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "6d49f50d550e858d0a0f87bb92fa3e275f093e95", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eda73fe707ed680c89e5a080318f6fa7b555616e/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda73fe707ed680c89e5a080318f6fa7b555616e/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=eda73fe707ed680c89e5a080318f6fa7b555616e", "patch": "@@ -2460,14 +2460,13 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n         if_chain! {\n             if let ExprKind::Call(ref fun, ref args) = e.kind;\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref method)) = fun.kind;\n+            if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             then {\n                 if !same_tys(self.cx, self.target.ty(), self.body.expr_ty(e)) {\n                     return;\n                 }\n \n-                let ty = hir_ty_to_ty(self.cx.tcx, ty);\n-\n-                if is_type_diagnostic_item(self.cx, ty, sym!(hashmap_type)) {\n+                if match_path(ty_path, &paths::HASHMAP) {\n                     if method.ident.name == sym!(new) {\n                         self.suggestions\n                             .insert(e.span, \"HashMap::default()\".to_string());\n@@ -2480,7 +2479,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                             ),\n                         );\n                     }\n-                } else if is_type_diagnostic_item(self.cx, ty, sym!(hashset_type)) {\n+                } else if match_path(ty_path, &paths::HASHSET) {\n                     if method.ident.name == sym!(new) {\n                         self.suggestions\n                             .insert(e.span, \"HashSet::default()\".to_string());"}]}