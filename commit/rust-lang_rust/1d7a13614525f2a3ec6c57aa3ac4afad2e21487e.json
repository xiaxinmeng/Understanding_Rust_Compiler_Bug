{"sha": "1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkN2ExMzYxNDUyNWYyYTNlYzZjNTdhYTNhYzRhZmFkMmUyMTQ4N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T09:42:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T09:42:37Z"}, "message": "auto merge of #6309 : nikomatsakis/rust/issue-3678-type-of-extern-fns, r=nikomatsakis\n\nLift restriction on calling extern C functions, and propagate the ABI as part of the type of an extern fn. cc #3678", "tree": {"sha": "261a23e06f64f02f5b0b3aa87d3a994b6bfb72dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261a23e06f64f02f5b0b3aa87d3a994b6bfb72dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "html_url": "https://github.com/rust-lang/rust/commit/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6529c36af56eedf01dc5db29f9f6408f07e97c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6529c36af56eedf01dc5db29f9f6408f07e97c3", "html_url": "https://github.com/rust-lang/rust/commit/e6529c36af56eedf01dc5db29f9f6408f07e97c3"}, {"sha": "387d6c597aeb4d067998cb59f5526cee92994efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/387d6c597aeb4d067998cb59f5526cee92994efa", "html_url": "https://github.com/rust-lang/rust/commit/387d6c597aeb4d067998cb59f5526cee92994efa"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "68700d6218769c0aabbf9225026d6901ccb5f5d5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "patch": "@@ -1311,19 +1311,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // Extract the function signature from `in_fty`.\n         let fn_sty = structure_of(fcx, f.span, fn_ty);\n \n-        // FIXME(#3678) For now, do not permit calls to C abi functions.\n-        match fn_sty {\n-            ty::ty_bare_fn(ty::BareFnTy {abis, _}) => {\n-                if !abis.is_rust() {\n-                    fcx.tcx().sess.span_err(\n-                        call_expr.span,\n-                        fmt!(\"Calls to C ABI functions are not (yet) \\\n-                              supported; be patient, dear user\"));\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         let fn_sig = match fn_sty {\n             ty::ty_bare_fn(ty::BareFnTy {sig: sig, _}) |\n             ty::ty_closure(ty::ClosureTy {sig: sig, _}) => sig,\n@@ -3607,7 +3594,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n     };\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n         purity: ast::unsafe_fn,\n-        abis: AbiSet::Rust(),\n+        abis: AbiSet::Intrinsic(),\n         sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n                     inputs: inputs,\n                     output: output}"}, {"sha": "1c3896ef5b9eed9c0f31d6725768e3dccf057375", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7a13614525f2a3ec6c57aa3ac4afad2e21487e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1d7a13614525f2a3ec6c57aa3ac4afad2e21487e", "patch": "@@ -134,8 +134,8 @@ impl AstConv for CrateCtxt {\n               Some(&ast_map::node_item(item, _)) => {\n                 ty_of_item(self, item)\n               }\n-              Some(&ast_map::node_foreign_item(foreign_item, _, _, _)) => {\n-                ty_of_foreign_item(self, foreign_item)\n+              Some(&ast_map::node_foreign_item(foreign_item, abis, _, _)) => {\n+                ty_of_foreign_item(self, foreign_item, abis)\n               }\n               ref x => {\n                 self.tcx.sess.bug(fmt!(\"unexpected sort of item \\\n@@ -932,7 +932,20 @@ pub fn convert_foreign(ccx: &CrateCtxt, i: @ast::foreign_item) {\n     // As above, this call populates the type table with the converted\n     // type of the foreign item. We simply write it into the node type\n     // table.\n-    let tpt = ty_of_foreign_item(ccx, i);\n+\n+    // For reasons I cannot fully articulate, I do so hate the AST\n+    // map, and I regard each time that I use it as a personal and\n+    // moral failing, but at the moment it seems like the only\n+    // convenient way to extract the ABI. - ndm\n+    let abis = match ccx.tcx.items.find(&i.id) {\n+        Some(&ast_map::node_foreign_item(_, abis, _, _)) => abis,\n+        ref x => {\n+            ccx.tcx.sess.bug(fmt!(\"unexpected sort of item \\\n+                                   in get_item_ty(): %?\", (*x)));\n+        }\n+    };\n+\n+    let tpt = ty_of_foreign_item(ccx, i, abis);\n     write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n     ccx.tcx.tcache.insert(local_def(i.id), tpt);\n }\n@@ -1103,14 +1116,17 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n     }\n }\n \n-pub fn ty_of_foreign_item(ccx: &CrateCtxt, it: @ast::foreign_item)\n-    -> ty::ty_param_bounds_and_ty {\n+pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n+                          it: @ast::foreign_item,\n+                          abis: AbiSet) -> ty::ty_param_bounds_and_ty\n+{\n     match it.node {\n         ast::foreign_item_fn(ref fn_decl, _, ref generics) => {\n             ty_of_foreign_fn_decl(ccx,\n                                   fn_decl,\n                                   local_def(it.id),\n-                                  generics)\n+                                  generics,\n+                                  abis)\n         }\n         ast::foreign_item_const(t) => {\n             ty::ty_param_bounds_and_ty {\n@@ -1197,7 +1213,8 @@ pub fn ty_generics(ccx: &CrateCtxt,\n pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n                              decl: &ast::fn_decl,\n                              def_id: ast::def_id,\n-                             ast_generics: &ast::Generics)\n+                             ast_generics: &ast::Generics,\n+                             abis: AbiSet)\n                           -> ty::ty_param_bounds_and_ty {\n     let ty_generics = ty_generics(ccx, None, ast_generics, 0);\n     let region_param_names = RegionParamNames::from_generics(ast_generics);\n@@ -1208,7 +1225,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n     let t_fn = ty::mk_bare_fn(\n         ccx.tcx,\n         ty::BareFnTy {\n-            abis: AbiSet::Rust(),\n+            abis: abis,\n             purity: ast::unsafe_fn,\n             sig: ty::FnSig {bound_lifetime_names: opt_vec::Empty,\n                             inputs: input_tys,"}]}