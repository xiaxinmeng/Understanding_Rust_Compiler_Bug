{"sha": "8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmQ1OGNlZGY2MTY1ODBhNDA1MmFkNmRmMWNlNzRjZmNkNTIwYzA=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-28T06:53:44Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-28T06:53:44Z"}, "message": "Implement Ord for TrieMap/TrieSet/SmallIntMap/Bitv/BitvSet", "tree": {"sha": "108ba7a19d05be4f0875f24dae4f561ec84d414a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108ba7a19d05be4f0875f24dae4f561ec84d414a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "html_url": "https://github.com/rust-lang/rust/commit/8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935c88ce1c863b6bfa3e4a295e6999a5593c08e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/935c88ce1c863b6bfa3e4a295e6999a5593c08e2", "html_url": "https://github.com/rust-lang/rust/commit/935c88ce1c863b6bfa3e4a295e6999a5593c08e2"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "3e1160b45eee40d558a3f43dbf277d31e358f4eb", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "patch": "@@ -838,6 +838,13 @@ impl PartialOrd for Bitv {\n     }\n }\n \n+impl Ord for Bitv {\n+    #[inline]\n+    fn cmp(&self, other: &Bitv) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl fmt::Show for Bitv {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         for bit in self.iter() {\n@@ -963,7 +970,7 @@ impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n /// assert!(bv.eq_vec([true, true, false, true,\n ///                    false, false, false, false]));\n /// ```\n-#[deriving(Clone, PartialEq, Eq, PartialOrd)]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct BitvSet(Bitv);\n \n impl Default for BitvSet {"}, {"sha": "f567c5777b1711e163d2474bd3ca6a8713673738", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "patch": "@@ -380,6 +380,13 @@ impl<V: PartialOrd> PartialOrd for SmallIntMap<V> {\n     }\n }\n \n+impl<V: Ord> Ord for SmallIntMap<V> {\n+    #[inline]\n+    fn cmp(&self, other: &SmallIntMap<V>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<V: fmt::Show> fmt::Show for SmallIntMap<V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}, {"sha": "cd011b0e0133972d0eb13f91d4144fee13c5c2d7", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebd58cedf616580a4052ad6df1ce74cfcd520c0/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "patch": "@@ -100,6 +100,13 @@ impl<T: PartialOrd> PartialOrd for TrieMap<T> {\n     }\n }\n \n+impl<T: Ord> Ord for TrieMap<T> {\n+    #[inline]\n+    fn cmp(&self, other: &TrieMap<T>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<T: Show> Show for TrieMap<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -524,7 +531,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n /// set.clear();\n /// assert!(set.is_empty());\n /// ```\n-#[deriving(Clone, Hash, PartialEq, Eq, PartialOrd)]\n+#[deriving(Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }"}]}