{"sha": "f475e880a4c6b2359ebaef88c844daede9c88fc9", "node_id": "C_kwDOAAsO6NoAKGY0NzVlODgwYTRjNmIyMzU5ZWJhZWY4OGM4NDRkYWVkZTljODhmYzk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T13:49:05Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T12:04:07Z"}, "message": "`InferSource::GenericArg`, check for contains", "tree": {"sha": "66279465d17943029b726daa9c7bfd22dc38a832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66279465d17943029b726daa9c7bfd22dc38a832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f475e880a4c6b2359ebaef88c844daede9c88fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f475e880a4c6b2359ebaef88c844daede9c88fc9", "html_url": "https://github.com/rust-lang/rust/commit/f475e880a4c6b2359ebaef88c844daede9c88fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f475e880a4c6b2359ebaef88c844daede9c88fc9/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "url": "https://api.github.com/repos/rust-lang/rust/commits/7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "html_url": "https://github.com/rust-lang/rust/commit/7952d2ed8338796aa9b5f0da5a37c7dd8e936182"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "4d29fc469462c43b01434e1ab086e04657be794b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f475e880a4c6b2359ebaef88c844daede9c88fc9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f475e880a4c6b2359ebaef88c844daede9c88fc9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f475e880a4c6b2359ebaef88c844daede9c88fc9", "patch": "@@ -533,18 +533,19 @@ enum InferSourceKind<'tcx> {\n }\n \n impl<'tcx> InferSource<'tcx> {\n-    /// Returns the span where we're going to insert our suggestion.\n-    ///\n-    /// Used when computing the cost of this infer source to check whether\n-    /// we're inside of a macro expansion.\n-    fn main_insert_span(&self) -> Span {\n-        match self.kind {\n-            InferSourceKind::LetBinding { insert_span, .. } => insert_span,\n-            InferSourceKind::ClosureArg { insert_span, .. } => insert_span,\n-            InferSourceKind::GenericArg { insert_span, .. } => insert_span,\n-            InferSourceKind::FullyQualifiedMethodCall { receiver, .. } => receiver.span,\n-            InferSourceKind::ClosureReturn { data, .. } => data.span(),\n-        }\n+    fn from_expansion(&self) -> bool {\n+        let source_from_expansion = match self.kind {\n+            InferSourceKind::LetBinding { insert_span, .. }\n+            | InferSourceKind::ClosureArg { insert_span, .. }\n+            | InferSourceKind::GenericArg { insert_span, .. } => insert_span.from_expansion(),\n+            InferSourceKind::FullyQualifiedMethodCall { receiver, .. } => {\n+                receiver.span.from_expansion()\n+            }\n+            InferSourceKind::ClosureReturn { data, should_wrap_expr, .. } => {\n+                data.span().from_expansion() || should_wrap_expr.map_or(false, Span::from_expansion)\n+            }\n+        };\n+        source_from_expansion || self.span.from_expansion()\n     }\n }\n \n@@ -631,7 +632,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                 }\n             }\n             fn ty_cost(self, ty: Ty<'tcx>) -> usize {\n-                match ty.kind() {\n+                match *ty.kind() {\n                     ty::Closure(..) => 1000,\n                     ty::FnDef(..) => 150,\n                     ty::FnPtr(..) => 30,\n@@ -645,6 +646,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             .sum::<usize>()\n                     }\n                     ty::Tuple(args) => 5 + args.iter().map(|arg| self.ty_cost(arg)).sum::<usize>(),\n+                    ty::Ref(_, ty, _) => 2 + self.ty_cost(ty),\n                     ty::Infer(..) => 0,\n                     _ => 1,\n                 }\n@@ -673,8 +675,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             }\n         };\n \n-        let suggestion_may_apply =\n-            if source.main_insert_span().can_be_used_for_suggestions() { 0 } else { 10000 };\n+        let suggestion_may_apply = if source.from_expansion() { 10000 } else { 0 };\n \n         base_cost + suggestion_may_apply\n     }\n@@ -1022,8 +1023,10 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n             debug!(?args);\n             let InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } = args;\n             let generics = tcx.generics_of(generics_def_id);\n-            if let Some(argument_index) =\n-                generics.own_substs(substs).iter().position(|&arg| self.generic_arg_is_target(arg))\n+            if let Some(argument_index) = generics\n+                .own_substs(substs)\n+                .iter()\n+                .position(|&arg| self.generic_arg_contains_target(arg))\n             {\n                 let substs = self.infcx.resolve_vars_if_possible(substs);\n                 let generic_args = &generics.own_substs_no_defaults(tcx, substs)"}, {"sha": "b555697dc3461058cb0648ed1e0d01f3fd022985", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs?ref=f475e880a4c6b2359ebaef88c844daede9c88fc9", "patch": "@@ -16,8 +16,8 @@ fn infallible() -> Result<(), std::convert::Infallible> {\n \n fn main() {\n     let x = || -> Result<_, QualifiedError<_>> {\n-        //~^ ERROR type annotations needed for `Result<(), QualifiedError<_>>`\n         infallible()?;\n         Ok(())\n+        //~^ ERROR type annotations needed\n     };\n }"}, {"sha": "2a56aaa44fef23b3ae435b47451aa9e7986f4769", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=f475e880a4c6b2359ebaef88c844daede9c88fc9", "patch": "@@ -1,16 +1,15 @@\n-error[E0282]: type annotations needed for `Result<(), QualifiedError<_>>`\n-  --> $DIR/cannot-infer-partial-try-return.rs:18:13\n+error[E0282]: type annotations needed\n+  --> $DIR/cannot-infer-partial-try-return.rs:20:9\n    |\n-LL |     let x = || -> Result<_, QualifiedError<_>> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |\n LL |         infallible()?;\n    |         ------------- type must be known at this point\n+LL |         Ok(())\n+   |         ^^ cannot infer type of the type parameter `E` declared on the enum `Result`\n    |\n-help: try giving this closure an explicit return type\n+help: consider specifying the generic arguments\n    |\n-LL |     let x = || -> Result<(), QualifiedError<_>> {\n-   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |         Ok::<(), QualifiedError<_>>(())\n+   |           +++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7b9a1634a0d4c146fcf552639d47cd17af7c1b7e", "filename": "src/test/ui/issues/issue-23041.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr?ref=f475e880a4c6b2359ebaef88c844daede9c88fc9", "patch": "@@ -1,8 +1,13 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-23041.rs:6:22\n+  --> $DIR/issue-23041.rs:6:7\n    |\n LL |     b.downcast_ref::<fn(_)->_>();\n-   |                      ^^^^^^^^ cannot infer type\n+   |       ^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `downcast_ref`\n+   |\n+help: consider specifying the generic arguments\n+   |\n+LL |     b.downcast_ref::<fn(_) -> _>();\n+   |                   ~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "863993f45090460bca6f8277e5712b5a6c4169b2", "filename": "src/test/ui/issues/issue-24013.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f475e880a4c6b2359ebaef88c844daede9c88fc9/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr?ref=f475e880a4c6b2359ebaef88c844daede9c88fc9", "patch": "@@ -1,8 +1,13 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-24013.rs:5:20\n+  --> $DIR/issue-24013.rs:5:13\n    |\n LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-   |                    ^^^^^^ cannot infer type\n+   |             ^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `swap`\n+   |\n+help: consider specifying the generic arguments\n+   |\n+LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n+   |                 ~~~~~~~~~~\n \n error: aborting due to previous error\n "}]}