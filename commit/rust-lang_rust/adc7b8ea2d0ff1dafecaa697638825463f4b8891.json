{"sha": "adc7b8ea2d0ff1dafecaa697638825463f4b8891", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzdiOGVhMmQwZmYxZGFmZWNhYTY5NzYzODgyNTQ2M2Y0Yjg4OTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-10T19:56:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-10T20:02:13Z"}, "message": "Fix completion with a partially unknown type\n\nTo test whether the receiver type matches for the impl, we unify the given self\ntype (in this case `HashSet<{unknown}>`) with the self type of the\nimpl (`HashSet<?0>`), but if the given self type contains Unknowns, they won't\nbe unified with the variables in those places. So we got a receiver type that\nwas different from the expected one, and concluded the impl doesn't match.\n\nThe fix is slightly hacky; if after the unification, our variables are still\nthere, we make them fall back to Unknown. This does make some sense though,\nsince we don't want to 'leak' the variables.\n\nFixes #3547.", "tree": {"sha": "75665c712625782d88e03447fcd10245c903d6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75665c712625782d88e03447fcd10245c903d6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc7b8ea2d0ff1dafecaa697638825463f4b8891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc7b8ea2d0ff1dafecaa697638825463f4b8891", "html_url": "https://github.com/rust-lang/rust/commit/adc7b8ea2d0ff1dafecaa697638825463f4b8891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc7b8ea2d0ff1dafecaa697638825463f4b8891/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df8c402847d5bedb8ebcb621aac46dbe215cdd", "html_url": "https://github.com/rust-lang/rust/commit/e5df8c402847d5bedb8ebcb621aac46dbe215cdd"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "7f5e1469e223db3bddb8e05ddded7d09ae6d0022", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/adc7b8ea2d0ff1dafecaa697638825463f4b8891/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc7b8ea2d0ff1dafecaa697638825463f4b8891/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=adc7b8ea2d0ff1dafecaa697638825463f4b8891", "patch": "@@ -516,9 +516,31 @@ pub(crate) fn inherent_impl_substs(\n     let self_ty_with_vars =\n         Canonical { num_vars: vars.len() + self_ty.num_vars, value: self_ty_with_vars };\n     let substs = super::infer::unify(&self_ty_with_vars, self_ty);\n-    // we only want the substs for the vars we added, not the ones from self_ty\n-    let result = substs.map(|s| s.suffix(vars.len()));\n-    result\n+    // We only want the substs for the vars we added, not the ones from self_ty.\n+    // Also, if any of the vars we added are still in there, we replace them by\n+    // Unknown. I think this can only really happen if self_ty contained\n+    // Unknown, and in that case we want the result to contain Unknown in those\n+    // places again.\n+    substs.map(|s| fallback_bound_vars(s.suffix(vars.len()), self_ty.num_vars))\n+}\n+\n+/// This replaces any 'free' Bound vars in `s` (i.e. those with indices past\n+/// num_vars_to_keep) by `Ty::Unknown`.\n+fn fallback_bound_vars(s: Substs, num_vars_to_keep: usize) -> Substs {\n+    s.fold_binders(\n+        &mut |ty, binders| {\n+            if let Ty::Bound(idx) = &ty {\n+                if *idx >= binders as u32 {\n+                    Ty::Unknown\n+                } else {\n+                    ty\n+                }\n+            } else {\n+                ty\n+            }\n+        },\n+        num_vars_to_keep,\n+    )\n }\n \n fn transform_receiver_ty("}, {"sha": "d8f6f0d9d8fbe74e259c8fcf4124cae43c0530db", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/adc7b8ea2d0ff1dafecaa697638825463f4b8891/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc7b8ea2d0ff1dafecaa697638825463f4b8891/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=adc7b8ea2d0ff1dafecaa697638825463f4b8891", "patch": "@@ -718,4 +718,35 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn test_method_completion_3547() {\n+        assert_debug_snapshot!(\n+            do_ref_completion(\n+                r\"\n+            struct HashSet<T> {}\n+            impl<T> HashSet<T> {\n+                pub fn the_method(&self) {}\n+            }\n+            fn foo() {\n+                let s: HashSet<_>;\n+                s.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"the_method()\",\n+                source_range: [201; 201),\n+                delete: [201; 201),\n+                insert: \"the_method()$0\",\n+                kind: Method,\n+                lookup: \"the_method\",\n+                detail: \"pub fn the_method(&self)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}]}