{"sha": "8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMTkwMmYzMGZjZGQ1YThkYzI4YzUwYjFjOTM2MDRiZDc1MDBmNDA=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-10T05:31:26Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-10T05:31:26Z"}, "message": "Fuzzer: update lists of known bugs", "tree": {"sha": "7e8434076448a9a2a7b3274c3bc4d9bc32a5da68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8434076448a9a2a7b3274c3bc4d9bc32a5da68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "html_url": "https://github.com/rust-lang/rust/commit/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718205441618e1bdda7dd57a7f7ab9f3569a64aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/718205441618e1bdda7dd57a7f7ab9f3569a64aa", "html_url": "https://github.com/rust-lang/rust/commit/718205441618e1bdda7dd57a7f7ab9f3569a64aa"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "f89af013cad82ba218cf8d206ed957c2d8ed6382", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 25, "deletions": 56, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "patch": "@@ -51,49 +51,41 @@ fn find_rust_files(files: &mutable [str], path: &str) {\n fn safe_to_steal(e: ast::expr_) -> bool {\n     alt e {\n \n-\n-      // pretty-printer precedence issues -- https://github.com/graydon/rust/issues/670\n-      ast::expr_unary(_, _) {\n-        false\n-      }\n+      // https://github.com/graydon/rust/issues/890\n       ast::expr_lit(lit) {\n         alt lit.node {\n           ast::lit_str(_) { true }\n           ast::lit_char(_) { true }\n           ast::lit_int(_) { false }\n-          ast::lit_uint(_) { false }\n+          ast::lit_uint(_) { true }\n           ast::lit_mach_int(_, _) { false }\n           ast::lit_float(_) { false }\n           ast::lit_mach_float(_, _) { false }\n           ast::lit_nil. { true }\n           ast::lit_bool(_) { true }\n         }\n       }\n+\n+      // https://github.com/graydon/rust/issues/890\n       ast::expr_cast(_, _) { false }\n       ast::expr_assert(_) { false }\n       ast::expr_binary(_, _, _) { false }\n       ast::expr_assign(_, _) { false }\n       ast::expr_assign_op(_, _, _) { false }\n-      ast::expr_fail(option::none.) {\n-        false\n-        /* https://github.com/graydon/rust/issues/764 */\n \n-      }\n+      // https://github.com/graydon/rust/issues/764\n+      ast::expr_fail(option::none.) { false }\n       ast::expr_ret(option::none.) { false }\n       ast::expr_put(option::none.) { false }\n \n+      // These prefix-operator keywords are not being parenthesized when in callee positions.\n+      // https://github.com/graydon/rust/issues/891\n+      ast::expr_ret(_) { false }\n+      ast::expr_put(_) { false }\n+      ast::expr_check(_, _) { false }\n+      ast::expr_log(_, _) { false }\n \n-      ast::expr_ret(_) {\n-        false\n-        /* lots of code generation issues, such as https://github.com/graydon/rust/issues/770 */\n-\n-      }\n-      ast::expr_fail(_) { false }\n-\n-\n-      _ {\n-        true\n-      }\n+      _ { true }\n     }\n }\n \n@@ -173,9 +165,7 @@ fn check_variants_of_ast(crate: &ast::crate, codemap: &codemap::codemap,\n                                                     filename,\n                                                     io::string_reader(\"\"), _,\n                                                     pprust::no_ann()));\n-                // 1u would be sane here, but the pretty-printer currently has lots of whitespace and paren issues,\n-                // and https://github.com/graydon/rust/issues/766 is hilarious.\n-                check_roundtrip_convergence(str3, 7u);\n+                check_roundtrip_convergence(str3, 1u);\n                 //check_whole_compiler(str3);\n             }\n         }\n@@ -225,49 +215,28 @@ fn parse_and_print(code: &str) -> str {\n \n fn content_is_dangerous_to_modify(code: &str) -> bool {\n     let dangerous_patterns =\n-        [\"obj\", // not safe to steal; https://github.com/graydon/rust/issues/761\n-         \"#macro\", // not safe to steal things inside of it, because they have a special syntax\n-         \"#\", // strange representation of the arguments to #fmt, for example\n-         \" be \", // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n-         \"@\"]; // hangs when compiling: https://github.com/graydon/rust/issues/768\n+        [\"#macro\", // not safe to steal things inside of it, because they have a special syntax\n+         \"#\",      // strange representation of the arguments to #fmt, for example\n+         \" be \"];  // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n     ret false;\n }\n \n-fn content_is_confusing(code: &str) ->\n-   bool { // https://github.com/graydon/rust/issues/671\n-          // https://github.com/graydon/rust/issues/669\n-          // https://github.com/graydon/rust/issues/669\n-          // https://github.com/graydon/rust/issues/669\n-          // crazy rules enforced by parser rather than typechecker?\n-          // more precedence issues\n-          // more precedence issues?\n-\n+fn content_is_confusing(code: &str) -> bool {\n     let confusing_patterns =\n-        [\"#macro\", \"][]\", \"][mutable]\", \"][mutable ]\", \"self\", \"spawn\",\n-         \"bind\", \"\\n\\n\\n\\n\\n\", // https://github.com/graydon/rust/issues/759\n-         \" : \", // https://github.com/graydon/rust/issues/760\n-         \"if ret\", \"alt ret\", \"if fail\", \"alt fail\"];\n+        [\"self\",       // crazy rules enforced by parser rather than typechecker?\n+        \"spawn\",       // precedence issues?\n+         \"bind\",       // precedence issues?\n+         \"\\n\\n\\n\\n\\n\"  // https://github.com/graydon/rust/issues/850\n+        ];\n \n     for p: str in confusing_patterns { if contains(code, p) { ret true; } }\n     ret false;\n }\n \n fn file_is_confusing(filename: &str) -> bool {\n-\n-    // https://github.com/graydon/rust/issues/674\n-\n-    // something to do with () as a lone pattern\n-\n-    // an issue where -2147483648 gains an\n-    // extra negative sign each time through,\n-    // which i can't reproduce using \"rustc\n-    // --pretty normal\"???\n-    let confusing_files =\n-        [\"block-expr-precedence.rs\", \"nil-pattern.rs\",\n-         \"syntax-extension-fmt.rs\",\n-         \"newtype.rs\"]; // modifying it hits something like https://github.com/graydon/rust/issues/670\n+    let confusing_files = [];\n \n     for f in confusing_files { if contains(filename, f) { ret true; } }\n \n@@ -308,7 +277,7 @@ fn check_convergence(files: &[str]) {\n             let s = io::read_whole_file_str(file);\n             if !content_is_confusing(s) {\n                 log_err #fmt[\"pp converge: %s\", file];\n-                // Change from 7u to 2u when https://github.com/graydon/rust/issues/759 is fixed\n+                // Change from 7u to 2u once https://github.com/graydon/rust/issues/850 is fixed\n                 check_roundtrip_convergence(s, 7u);\n             }\n         }"}]}