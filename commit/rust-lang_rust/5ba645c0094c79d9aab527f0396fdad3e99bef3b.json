{"sha": "5ba645c0094c79d9aab527f0396fdad3e99bef3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTY0NWMwMDk0Yzc5ZDlhYWI1MjdmMDM5NmZkYWQzZTk5YmVmM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T18:26:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T18:26:59Z"}, "message": "index libraies off the main thread", "tree": {"sha": "a831263055a2f3843fa38919ff7b7b5aaf2c6e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a831263055a2f3843fa38919ff7b7b5aaf2c6e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba645c0094c79d9aab527f0396fdad3e99bef3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba645c0094c79d9aab527f0396fdad3e99bef3b", "html_url": "https://github.com/rust-lang/rust/commit/5ba645c0094c79d9aab527f0396fdad3e99bef3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba645c0094c79d9aab527f0396fdad3e99bef3b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47cbaeba6f21e59ee8735bfe8bcbf06300767b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/47cbaeba6f21e59ee8735bfe8bcbf06300767b57", "html_url": "https://github.com/rust-lang/rust/commit/47cbaeba6f21e59ee8735bfe8bcbf06300767b57"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "50855551e76e6fc0c2c56c57ba51e2ae72f54782", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=5ba645c0094c79d9aab527f0396fdad3e99bef3b", "patch": "@@ -57,9 +57,8 @@ impl AnalysisHostImpl {\n         }\n         self.data_mut().crate_graph = graph;\n     }\n-    pub fn add_library(&mut self, files: impl Iterator<Item=(FileId, String)>) {\n-        let libs = ReadonlySourceRoot::new(files);\n-        self.data_mut().libs.push(Arc::new(libs));\n+    pub fn add_library(&mut self, root: ReadonlySourceRoot) {\n+        self.data_mut().libs.push(Arc::new(root));\n     }\n     fn data_mut(&mut self) -> &mut WorldData {\n         Arc::make_mut(&mut self.data)"}, {"sha": "a8152939ba0d013df92b8f74b45555a0b70ad12a", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=5ba645c0094c79d9aab527f0396fdad3e99bef3b", "patch": "@@ -68,8 +68,8 @@ impl AnalysisHost {\n     pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n         self.imp.set_crate_graph(graph)\n     }\n-    pub fn add_library(&mut self, files: impl Iterator<Item=(FileId, String)>) {\n-        self.imp.add_library(files)\n+    pub fn add_library(&mut self, data: LibraryData) {\n+        self.imp.add_library(data.root)\n     }\n }\n \n@@ -216,3 +216,15 @@ impl Analysis {\n         self.imp.diagnostics(file_id)\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct LibraryData {\n+    root: roots::ReadonlySourceRoot\n+}\n+\n+impl LibraryData {\n+    pub fn prepare(files: Vec<(FileId, String)>) -> LibraryData {\n+        let root = roots::ReadonlySourceRoot::new(files);\n+        LibraryData { root }\n+    }\n+}"}, {"sha": "f1bc72e33dc16d934000f5662c69864790a3a0c6", "filename": "crates/libanalysis/src/roots.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Flibanalysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Froots.rs?ref=5ba645c0094c79d9aab527f0396fdad3e99bef3b", "patch": "@@ -136,9 +136,10 @@ pub(crate) struct ReadonlySourceRoot {\n }\n \n impl ReadonlySourceRoot {\n-    pub fn new(files: impl Iterator<Item=(FileId, String)>) -> ReadonlySourceRoot {\n+    pub fn new(files: Vec<(FileId, String)>) -> ReadonlySourceRoot {\n         let mut module_map = ModuleMap::new();\n         let file_map: HashMap<FileId, FileData> = files\n+            .into_iter()\n             .map(|(id, text)| {\n                 module_map.update_file(id, ChangeKind::Insert);\n                 (id, FileData::new(text))"}, {"sha": "3d131274f52703f17b22f449573a91a239a2aea0", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=5ba645c0094c79d9aab527f0396fdad3e99bef3b", "patch": "@@ -10,7 +10,7 @@ use threadpool::ThreadPool;\n use serde::{Serialize, de::DeserializeOwned};\n use crossbeam_channel::{bounded, Sender, Receiver};\n use languageserver_types::{NumberOrString};\n-use libanalysis::{FileId, JobHandle, JobToken};\n+use libanalysis::{FileId, JobHandle, JobToken, LibraryData};\n use gen_lsp_server::{\n     RawRequest, RawNotification, RawMessage, RawResponse, ErrorCode,\n     handle_shutdown,\n@@ -94,6 +94,7 @@ fn main_loop_inner(\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n+    let (libdata_sender, libdata_receiver) = bounded(1024);\n     ws_sender.send(ws_root.clone());\n     fs_sender.send(ws_root.clone());\n     loop {\n@@ -103,6 +104,7 @@ fn main_loop_inner(\n             Task(Task),\n             Fs(PathBuf, Vec<FileEvent>),\n             Ws(Result<CargoWorkspace>),\n+            Lib(LibraryData),\n         }\n         trace!(\"selecting\");\n         let event = select! {\n@@ -119,6 +121,7 @@ fn main_loop_inner(\n                 None => bail!(\"workspace watcher died\"),\n                 Some(ws) => Event::Ws(ws),\n             }\n+            recv(libdata_receiver, data) => Event::Lib(data.unwrap())\n         };\n         trace!(\"selected {:?}\", event);\n         let mut state_changed = false;\n@@ -129,7 +132,12 @@ fn main_loop_inner(\n                 if root == ws_root {\n                     state.apply_fs_changes(events);\n                 } else {\n-                    state.add_library(events);\n+                    let files = state.events_to_files(events);\n+                    let sender = libdata_sender.clone();\n+                    pool.execute(move || {\n+                        let data = LibraryData::prepare(files);\n+                        sender.send(data);\n+                    });\n                 }\n                 state_changed = true;\n             }\n@@ -152,6 +160,9 @@ fn main_loop_inner(\n                     Err(e) => warn!(\"loading workspace failed: {}\", e),\n                 }\n             }\n+            Event::Lib(lib) => {\n+                state.add_lib(lib);\n+            }\n             Event::Msg(msg) => {\n                 match msg {\n                     RawMessage::Request(req) => {"}, {"sha": "729418eaafce62ecb7edc465366ce2137233c801", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba645c0094c79d9aab527f0396fdad3e99bef3b/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=5ba645c0094c79d9aab527f0396fdad3e99bef3b", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use languageserver_types::Url;\n-use libanalysis::{FileId, AnalysisHost, Analysis, CrateGraph, CrateId};\n+use libanalysis::{FileId, AnalysisHost, Analysis, CrateGraph, CrateId, LibraryData};\n \n use {\n     Result,\n@@ -64,17 +64,20 @@ impl ServerWorldState {\n \n         self.analysis_host.change_files(changes);\n     }\n-    pub fn add_library(&mut self, events: Vec<FileEvent>) {\n+    pub fn events_to_files(&mut self, events: Vec<FileEvent>) -> Vec<(FileId, String)> {\n         let pm = &mut self.path_map;\n-        let files = events.into_iter()\n+        events.into_iter()\n             .map(|event| {\n                 let text = match event.kind {\n                     FileEventKind::Add(text) => text,\n                 };\n                 (event.path, text)\n             })\n-            .map(|(path, text)| (pm.get_or_insert(path), text));\n-        self.analysis_host.add_library(files);\n+            .map(|(path, text)| (pm.get_or_insert(path), text))\n+            .collect()\n+    }\n+    pub fn add_lib(&mut self, data: LibraryData) {\n+        self.analysis_host.add_library(data);\n     }\n \n     pub fn add_mem_file(&mut self, path: PathBuf, text: String) -> FileId {"}]}