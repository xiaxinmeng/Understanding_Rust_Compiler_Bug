{"sha": "4f4f69d731ae8cf42eb898fee1de418e76879552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGY2OWQ3MzFhZThjZjQyZWI4OThmZWUxZGU0MThlNzY4Nzk1NTI=", "commit": {"author": {"name": "Ben Kelly", "email": "ben@wanderview.com", "date": "2013-03-12T03:12:31Z"}, "committer": {"name": "Ben Kelly", "email": "ben@wanderview.com", "date": "2013-03-12T03:12:31Z"}, "message": "Fix std::getopts::opts_present() to check value.\n\nCurrently the opts_present() function only checks to see if the option is\nconfigured in the match, but doesn't actually check to see if the option\nvalue has been set.  This means that opt_present('h') may return false while\nopts_present([~'h']) returns true.\n\nAdd a test case to catch this condition and fix opts_present() to check\nthe value before returning true.\n\nNote, there is another API difference between these two functions that this\ndoes not address.  Currently if you pass a non-configured option to\nopt_present() the program will fail!(), but opts_present() simply returns\nfalse.  If it is acceptable to standardize on the fail!() then opts_present()\nshould probably be implemented in terms of the opt_present() function.", "tree": {"sha": "c5655d28f14f6deb57b3aa8b7476a671747591d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5655d28f14f6deb57b3aa8b7476a671747591d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4f69d731ae8cf42eb898fee1de418e76879552", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f69d731ae8cf42eb898fee1de418e76879552", "html_url": "https://github.com/rust-lang/rust/commit/4f4f69d731ae8cf42eb898fee1de418e76879552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f69d731ae8cf42eb898fee1de418e76879552/comments", "author": {"login": "wanderview", "id": 1256526, "node_id": "MDQ6VXNlcjEyNTY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1256526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanderview", "html_url": "https://github.com/wanderview", "followers_url": "https://api.github.com/users/wanderview/followers", "following_url": "https://api.github.com/users/wanderview/following{/other_user}", "gists_url": "https://api.github.com/users/wanderview/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanderview/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanderview/subscriptions", "organizations_url": "https://api.github.com/users/wanderview/orgs", "repos_url": "https://api.github.com/users/wanderview/repos", "events_url": "https://api.github.com/users/wanderview/events{/privacy}", "received_events_url": "https://api.github.com/users/wanderview/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wanderview", "id": 1256526, "node_id": "MDQ6VXNlcjEyNTY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1256526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanderview", "html_url": "https://github.com/wanderview", "followers_url": "https://api.github.com/users/wanderview/followers", "following_url": "https://api.github.com/users/wanderview/following{/other_user}", "gists_url": "https://api.github.com/users/wanderview/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanderview/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanderview/subscriptions", "organizations_url": "https://api.github.com/users/wanderview/orgs", "repos_url": "https://api.github.com/users/wanderview/repos", "events_url": "https://api.github.com/users/wanderview/events{/privacy}", "received_events_url": "https://api.github.com/users/wanderview/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267f6c212f471c100060edaaf85a26e9a7ba820f", "url": "https://api.github.com/repos/rust-lang/rust/commits/267f6c212f471c100060edaaf85a26e9a7ba820f", "html_url": "https://github.com/rust-lang/rust/commit/267f6c212f471c100060edaaf85a26e9a7ba820f"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "95883e62e0b7e6d1b44b550784c4f1eb946d6be1", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f4f69d731ae8cf42eb898fee1de418e76879552/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4f69d731ae8cf42eb898fee1de418e76879552/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=4f4f69d731ae8cf42eb898fee1de418e76879552", "patch": "@@ -369,9 +369,9 @@ pub fn opt_count(mm: &Matches, nm: &str) -> uint {\n pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n     for vec::each(names) |nm| {\n         match find_opt(mm.opts, mkname(*nm)) {\n-          Some(_) => return true,\n-          None    => ()\n-        }\n+            Some(id) if !mm.vals[id].is_empty() => return true,\n+            _ => (),\n+        };\n     }\n     false\n }\n@@ -1174,7 +1174,7 @@ mod tests {\n     #[test]\n     pub fn test_multi() {\n         let args = ~[~\"-e\", ~\"foo\", ~\"--encrypt\", ~\"foo\"];\n-        let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n+        let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\"), optopt(~\"f\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(m) => m,\n           result::Err(_) => fail!()\n@@ -1183,6 +1183,7 @@ mod tests {\n         fail_unless!(opts_present(matches, ~[~\"encrypt\"]));\n         fail_unless!(opts_present(matches, ~[~\"encrypt\", ~\"e\"]));\n         fail_unless!(opts_present(matches, ~[~\"e\", ~\"encrypt\"]));\n+        fail_unless!(!opts_present(matches, ~[~\"f\"]));\n         fail_unless!(!opts_present(matches, ~[~\"thing\"]));\n         fail_unless!(!opts_present(matches, ~[]));\n "}]}