{"sha": "33fd10d5e0bac969b522b0a9b1bcc1518d1554b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmQxMGQ1ZTBiYWM5NjliNTIyYjBhOWIxYmNjMTUxOGQxNTU0YjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-15T03:53:29Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-15T03:53:29Z"}, "message": "save-analysis: fix declid of methods", "tree": {"sha": "df8f3c900836cc29b44fd0b0fd065b8b98e05f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8f3c900836cc29b44fd0b0fd065b8b98e05f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2", "html_url": "https://github.com/rust-lang/rust/commit/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32690b586d6bbe2541ec94adbdc7c226978332c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/32690b586d6bbe2541ec94adbdc7c226978332c5", "html_url": "https://github.com/rust-lang/rust/commit/32690b586d6bbe2541ec94adbdc7c226978332c5"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "9d8d70b48464ed7bf9082a9dc747e90d9eab5467", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fd10d5e0bac969b522b0a9b1bcc1518d1554b2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=33fd10d5e0bac969b522b0a9b1bcc1518d1554b2", "patch": "@@ -278,7 +278,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in followed by the method's name.\n         let mut qualname = match ty::impl_of_method(&self.analysis.ty_cx,\n-                                                ast_util::local_def(method.id)) {\n+                                                    ast_util::local_def(method.id)) {\n             Some(impl_id) => match self.analysis.ty_cx.map.get(impl_id.node) {\n                 NodeItem(item) => {\n                     scope_id = item.id;\n@@ -349,7 +349,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             .and_then(|def_id| {\n                 if match def_id {\n                     ty::MethodTraitItemId(def_id) => {\n-                        method.id != 0 && def_id.node == 0\n+                        def_id.node != 0 && def_id != ast_util::local_def(method.id)\n                     }\n                     ty::TypeTraitItemId(_) => false,\n                 } {"}]}