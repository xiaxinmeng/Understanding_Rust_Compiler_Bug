{"sha": "0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjAxZDIxOWM3YjdkZTE0MmFkNDA5N2RkMWU1Y2Y3MDhlN2EyN2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-21T18:28:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-22T22:44:33Z"}, "message": "Audit uses of `apply_mark` in built-in macros\n\nReplace them with equivalents of `Span::{def_site,call_site}` from proc macro API.\nThe new API is much less error prone and doesn't rely on macros having default transparency.", "tree": {"sha": "b800e81720ceccc8ad2ea2722288cea4d6ec3a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b800e81720ceccc8ad2ea2722288cea4d6ec3a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "html_url": "https://github.com/rust-lang/rust/commit/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760226733e940cb375f791e894fbb554555eeb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/760226733e940cb375f791e894fbb554555eeb01", "html_url": "https://github.com/rust-lang/rust/commit/760226733e940cb375f791e894fbb554555eeb01"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "004ae1cf9654181946953c58756be542f65840ba", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -3,7 +3,7 @@ use crate::attr::{HasAttrs, Stability, Deprecation};\n use crate::source_map::SourceMap;\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n-use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};\n+use crate::ext::hygiene::{ExpnId, Transparency};\n use crate::mut_visit::{self, MutVisitor};\n use crate::parse::{self, parser, DirectoryOwnership};\n use crate::parse::token;\n@@ -760,23 +760,39 @@ impl<'a> ExtCtxt<'a> {\n     pub fn call_site(&self) -> Span {\n         self.current_expansion.id.expn_data().call_site\n     }\n-    pub fn backtrace(&self) -> SyntaxContext {\n-        SyntaxContext::root().apply_mark(self.current_expansion.id)\n+\n+    /// Equivalent of `Span::def_site` from the proc macro API,\n+    /// except that the location is taken from the span passed as an argument.\n+    pub fn with_def_site_ctxt(&self, span: Span) -> Span {\n+        span.with_ctxt_from_mark(self.current_expansion.id, Transparency::Opaque)\n+    }\n+\n+    /// Equivalent of `Span::call_site` from the proc macro API,\n+    /// except that the location is taken from the span passed as an argument.\n+    pub fn with_call_site_ctxt(&self, span: Span) -> Span {\n+        span.with_ctxt_from_mark(self.current_expansion.id, Transparency::Transparent)\n+    }\n+\n+    /// Span with a context reproducing `macro_rules` hygiene (hygienic locals, unhygienic items).\n+    /// FIXME: This should be eventually replaced either with `with_def_site_ctxt` (preferably),\n+    /// or with `with_call_site_ctxt` (where necessary).\n+    pub fn with_legacy_ctxt(&self, span: Span) -> Span {\n+        span.with_ctxt_from_mark(self.current_expansion.id, Transparency::SemiTransparent)\n     }\n \n     /// Returns span for the macro which originally caused the current expansion to happen.\n     ///\n     /// Stops backtracing at include! boundary.\n     pub fn expansion_cause(&self) -> Option<Span> {\n-        let mut ctxt = self.backtrace();\n+        let mut expn_id = self.current_expansion.id;\n         let mut last_macro = None;\n         loop {\n-            let expn_data = ctxt.outer_expn_data();\n+            let expn_data = expn_id.expn_data();\n             // Stop going up the backtrace once include! is encountered\n             if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n                 break;\n             }\n-            ctxt = expn_data.call_site.ctxt();\n+            expn_id = expn_data.call_site.ctxt().outer_expn();\n             last_macro = Some(expn_data.call_site);\n         }\n         last_macro\n@@ -865,7 +881,7 @@ impl<'a> ExtCtxt<'a> {\n         ast::Ident::from_str(st)\n     }\n     pub fn std_path(&self, components: &[Symbol]) -> Vec<ast::Ident> {\n-        let def_site = DUMMY_SP.apply_mark(self.current_expansion.id);\n+        let def_site = self.with_def_site_ctxt(DUMMY_SP);\n         iter::once(Ident::new(kw::DollarCrate, def_site))\n             .chain(components.iter().map(|&s| Ident::with_dummy_span(s)))\n             .collect()"}, {"sha": "4965cb097dbee24819129dcb188e934c80e27ad3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -565,7 +565,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         return fragment_kind.dummy(span);\n                     }\n                     let meta = ast::MetaItem { node: ast::MetaItemKind::Word, span, path };\n-                    let span = span.with_ctxt(self.cx.backtrace());\n                     let items = expander.expand(self.cx, span, &meta, item);\n                     fragment_kind.expect_from_annotatables(items)\n                 }"}, {"sha": "b1bbd2aaac9714b206ae517b2cf7a23f010cf6dc", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -7,7 +7,6 @@ use crate::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint}\n use errors::{Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n-use syntax_pos::hygiene::{SyntaxContext, Transparency};\n use syntax_pos::symbol::{kw, sym, Symbol};\n \n use proc_macro::{Delimiter, Level, LineColumn, Spacing};\n@@ -363,16 +362,10 @@ impl<'a> Rustc<'a> {\n     pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n         // No way to determine def location for a proc macro right now, so use call location.\n         let location = cx.current_expansion.id.expn_data().call_site;\n-        let to_span = |transparency| {\n-            location.with_ctxt(\n-                SyntaxContext::root()\n-                    .apply_mark_with_transparency(cx.current_expansion.id, transparency),\n-            )\n-        };\n         Rustc {\n             sess: cx.parse_sess,\n-            def_site: to_span(Transparency::Opaque),\n-            call_site: to_span(Transparency::Transparent),\n+            def_site: cx.with_def_site_ctxt(location),\n+            call_site: cx.with_call_site_ctxt(location),\n         }\n     }\n "}, {"sha": "28f907441d872391f8d3eb17aa98b9b3c13fd81c", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -63,7 +63,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(inline_asm)),\n-        span: sp.with_ctxt(cx.backtrace()),\n+        span: cx.with_legacy_ctxt(sp),\n         attrs: ThinVec::new(),\n     }))\n }"}, {"sha": "84583d0e5eca7410e2e23a0afd448386c2cc1f1b", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -23,7 +23,7 @@ pub fn expand_assert<'cx>(\n         }\n     };\n \n-    let sp = sp.apply_mark(cx.current_expansion.id);\n+    let sp = cx.with_legacy_ctxt(sp);\n     let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         tts: custom_message.unwrap_or_else(|| {"}, {"sha": "21cee8ae1cb9c661c630ee9f788450e5d4d93aab", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -16,7 +16,7 @@ pub fn expand_cfg(\n     sp: Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'static> {\n-    let sp = sp.apply_mark(cx.current_expansion.id);\n+    let sp = cx.with_legacy_ctxt(sp);\n \n     match parse_cfg(cx, sp, tts) {\n         Ok(cfg) => {"}, {"sha": "ffa5154ca0c36b6cc1b03e2ae57b9be7303b7039", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -59,6 +59,6 @@ pub fn expand_syntax_ext(\n     } else if has_errors {\n         return DummyResult::any(sp);\n     }\n-    let sp = sp.apply_mark(cx.current_expansion.id);\n+    let sp = cx.with_legacy_ctxt(sp);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))\n }"}, {"sha": "96677072d1b80bfc153e2fd2ac96afbc9570665e", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -39,7 +39,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n         }\n     }\n \n-    let ident = ast::Ident::new(Symbol::intern(&res_str), sp.apply_mark(cx.current_expansion.id));\n+    let ident = ast::Ident::new(Symbol::intern(&res_str), cx.with_legacy_ctxt(sp));\n \n     struct ConcatIdentsResult { ident: ast::Ident }\n "}, {"sha": "4dd0ecfebefd41d8ed260dbfd459834469870868", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -112,7 +112,7 @@ fn cs_clone_shallow(name: &str,\n                         ty: P<ast::Ty>, span: Span, helper_name: &str) {\n         // Generate statement `let _: helper_name<ty>;`,\n         // set the expn ID so we can use the unstable struct.\n-        let span = span.with_ctxt(cx.backtrace());\n+        let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::clone, Symbol::intern(helper_name)]),\n                                         vec![GenericArg::Type(ty)], vec![]);"}, {"sha": "32ab47969ada4f6c9f36640d5eac0fb162904852", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -53,7 +53,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n                         ty: P<ast::Ty>, span: Span, helper_name: &str) {\n         // Generate statement `let _: helper_name<ty>;`,\n         // set the expn ID so we can use the unstable struct.\n-        let span = span.with_ctxt(cx.backtrace());\n+        let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::cmp, Symbol::intern(helper_name)]),\n                                         vec![GenericArg::Type(ty)], vec![]);"}, {"sha": "781645a574e9ac76993e70aa86b86c713b1bfb04", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -60,7 +60,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     };\n \n     // We want to make sure we have the ctxt set so that we can use unstable methods\n-    let span = span.with_ctxt(cx.backtrace());\n+    let span = cx.with_def_site_ctxt(span);\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n     let builder = Ident::from_str_and_span(\"debug_trait_builder\", span);\n     let builder_expr = cx.expr_ident(span, builder.clone());"}, {"sha": "cb1c7b21fee0d21b0b932c4f2ebac161ede26273", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -85,7 +85,7 @@ impl<'a> Path<'a> {\n             PathKind::Global => cx.path_all(span, true, idents, params, Vec::new()),\n             PathKind::Local => cx.path_all(span, false, idents, params, Vec::new()),\n             PathKind::Std => {\n-                let def_site = DUMMY_SP.apply_mark(cx.current_expansion.id);\n+                let def_site = cx.with_def_site_ctxt(DUMMY_SP);\n                 idents.insert(0, Ident::new(kw::DollarCrate, def_site));\n                 cx.path_all(span, false, idents, params, Vec::new())\n             }"}, {"sha": "60b6eba7a4b53d54baa4a6505c600cddf69674e7", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -48,6 +48,9 @@ impl MultiItemModifier for BuiltinDerive {\n               meta_item: &MetaItem,\n               item: Annotatable)\n               -> Vec<Annotatable> {\n+        // FIXME: Built-in derives often forget to give spans contexts,\n+        // so we are doing it here in a centralized way.\n+        let span = ecx.with_def_site_ctxt(span);\n         let mut items = Vec::new();\n         (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n         items\n@@ -60,7 +63,7 @@ fn call_intrinsic(cx: &ExtCtxt<'_>,\n                   intrinsic: &str,\n                   args: Vec<P<ast::Expr>>)\n                   -> P<ast::Expr> {\n-    let span = span.with_ctxt(cx.backtrace());\n+    let span = cx.with_def_site_ctxt(span);\n     let path = cx.std_path(&[sym::intrinsics, Symbol::intern(intrinsic)]);\n     let call = cx.expr_call_global(span, path, args);\n "}, {"sha": "6343d218de82921520e4c3e9f50b316234ef3d8e", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -20,7 +20,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n         Some(v) => v,\n     };\n \n-    let sp = sp.apply_mark(cx.current_expansion.id);\n+    let sp = cx.with_legacy_ctxt(sp);\n     let e = match env::var(&*var.as_str()) {\n         Err(..) => {\n             let lt = cx.lifetime(sp, Ident::with_dummy_span(kw::StaticLifetime));"}, {"sha": "47394c02b4186cca294de29f49f7ba9180f4be09", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -12,7 +12,7 @@ use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n use syntax::tokenstream;\n-use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n+use syntax_pos::{MultiSpan, Span};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n@@ -666,8 +666,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // passed to this function.\n         for (i, e) in self.args.into_iter().enumerate() {\n             let name = names_pos[i];\n-            let span =\n-                DUMMY_SP.with_ctxt(e.span.ctxt().apply_mark(self.ecx.current_expansion.id));\n+            let span = self.ecx.with_def_site_ctxt(e.span);\n             pats.push(self.ecx.pat_ident(span, name));\n             for ref arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n@@ -745,7 +744,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         ty: &ArgumentType,\n         arg: ast::Ident,\n     ) -> P<ast::Expr> {\n-        sp = sp.apply_mark(ecx.current_expansion.id);\n+        sp = ecx.with_def_site_ctxt(sp);\n         let arg = ecx.expr_ident(sp, arg);\n         let trait_ = match *ty {\n             Placeholder(ref tyname) => {\n@@ -798,7 +797,7 @@ fn expand_format_args_impl<'cx>(\n     tts: &[tokenstream::TokenTree],\n     nl: bool,\n ) -> Box<dyn base::MacResult + 'cx> {\n-    sp = sp.apply_mark(ecx.current_expansion.id);\n+    sp = ecx.with_def_site_ctxt(sp);\n     match parse_args(ecx, sp, tts) {\n         Ok((efmt, args, names)) => {\n             MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, nl))\n@@ -842,7 +841,7 @@ pub fn expand_preparsed_format_args(\n     let arg_unique_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n \n     let mut macsp = ecx.call_site();\n-    macsp = macsp.with_ctxt(ecx.backtrace());\n+    macsp = ecx.with_def_site_ctxt(macsp);\n \n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;"}, {"sha": "97b8087ad1581647656716e0275bf6b9bcc6026b", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -3,7 +3,6 @@ use syntax::ast::{self, Arg, Attribute, Expr, FnHeader, Generics, Ident};\n use syntax::attr::check_builtin_macro_attribute;\n use syntax::ext::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n-use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n@@ -29,7 +28,7 @@ pub fn expand(\n     };\n \n     // Generate a bunch of new items using the AllocFnFactory\n-    let span = item.span.with_ctxt(SyntaxContext::root().apply_mark(ecx.current_expansion.id));\n+    let span = ecx.with_legacy_ctxt(item.span);\n     let f = AllocFnFactory {\n         span,\n         kind: AllocatorKind::Global,"}, {"sha": "a8b61593db749a1b04a62c817e4acce39f26bf35", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -30,7 +30,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ItemKind::GlobalAsm(P(global_asm)),\n                 vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                span: sp.with_ctxt(cx.backtrace()),\n+                span: cx.with_legacy_ctxt(sp),\n                 tokens: None,\n             })])\n         }"}, {"sha": "5fd87d3a0e5c60d45f3c8296880cd10a973045b5", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -4,7 +4,6 @@\n use syntax::ast;\n use syntax::attr::{self, check_builtin_macro_attribute};\n use syntax::ext::base::*;\n-use syntax::ext::hygiene::SyntaxContext;\n use syntax::print::pprust;\n use syntax::source_map::respan;\n use syntax::symbol::{Symbol, sym};\n@@ -29,7 +28,7 @@ pub fn expand_test_case(\n \n     if !ecx.ecfg.should_test { return vec![]; }\n \n-    let sp = attr_sp.with_ctxt(SyntaxContext::root().apply_mark(ecx.current_expansion.id));\n+    let sp = ecx.with_legacy_ctxt(attr_sp);\n     let mut item = anno_item.expect_item();\n     item = item.map(|mut item| {\n         item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n@@ -93,8 +92,7 @@ pub fn expand_test_or_bench(\n         return vec![Annotatable::Item(item)];\n     }\n \n-    let ctxt = SyntaxContext::root().apply_mark(cx.current_expansion.id);\n-    let (sp, attr_sp) = (item.span.with_ctxt(ctxt), attr_sp.with_ctxt(ctxt));\n+    let (sp, attr_sp) = (cx.with_legacy_ctxt(item.span), cx.with_legacy_ctxt(attr_sp));\n \n     // Gensym \"test\" so we can extern crate without conflicting with any local names\n     let test_id = cx.ident_of(\"test\").gensym();"}, {"sha": "6fffefd0d6cbb944f26bcf61365a2ecc8368720a", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb01d219c7b7de142ad4097dd1e5cf708e7a27f/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0fb01d219c7b7de142ad4097dd1e5cf708e7a27f", "patch": "@@ -22,6 +22,7 @@ pub mod edition;\n use edition::Edition;\n pub mod hygiene;\n pub use hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind, MacroKind, DesugaringKind};\n+use hygiene::Transparency;\n \n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -512,6 +513,13 @@ impl Span {\n                   span.ctxt)\n     }\n \n+    /// Produces a span with the same location as `self` and context produced by a macro with the\n+    /// given ID and transparency, assuming that macro was defined directly and not produced by\n+    /// some other macro (which is the case for built-in and procedural macros).\n+    pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {\n+        self.with_ctxt(SyntaxContext::root().apply_mark_with_transparency(expn_id, transparency))\n+    }\n+\n     #[inline]\n     pub fn apply_mark(self, mark: ExpnId) -> Span {\n         let span = self.data();"}]}