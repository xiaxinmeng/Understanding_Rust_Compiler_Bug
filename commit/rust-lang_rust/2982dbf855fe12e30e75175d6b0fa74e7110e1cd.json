{"sha": "2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODJkYmY4NTVmZTEyZTMwZTc1MTc1ZDZiMGZhNzRlNzExMGUxY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-06T07:21:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-06T07:21:41Z"}, "message": "Auto merge of #59744 - cuviper:output-errors, r=sanxiyn\n\nShow better errors for LLVM IR output\n\nI was trying to output LLVM IR directly to the console:\n\n    $ rustc hello.rs --emit=llvm-ir -o /dev/stdout\n    LLVM ERROR: IO failure on output stream: Bad file descriptor\n\nNow `LLVMRustPrintModule` returns an error, and we print:\n\n    error: failed to write LLVM IR to /dev/stdout.hello.7rcbfp3g-cgu.0.rcgu.ll: Permission denied\n\n... which is more informative.", "tree": {"sha": "0603e4ea19db6c86c060068e6b4302f8c85f12eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0603e4ea19db6c86c060068e6b4302f8c85f12eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "html_url": "https://github.com/rust-lang/rust/commit/2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b025802a2454a2335074feaf18f7afb516f0420c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b025802a2454a2335074feaf18f7afb516f0420c", "html_url": "https://github.com/rust-lang/rust/commit/b025802a2454a2335074feaf18f7afb516f0420c"}, {"sha": "aafe2c6da93373b5f612c406037c5b75ba9deb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafe2c6da93373b5f612c406037c5b75ba9deb46", "html_url": "https://github.com/rust-lang/rust/commit/aafe2c6da93373b5f612c406037c5b75ba9deb46"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "f0ed201ad5c27f155767aa3d0dbd34484f9a9c4d", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "patch": "@@ -73,12 +73,10 @@ pub fn write_output_file(\n     unsafe {\n         let output_c = path_to_c_string(output);\n         let result = llvm::LLVMRustWriteOutputFile(target, pm, m, output_c.as_ptr(), file_type);\n-        if result.into_result().is_err() {\n+        result.into_result().map_err(|()| {\n             let msg = format!(\"could not write output to {}\", output.display());\n-            Err(llvm_err(handler, &msg))\n-        } else {\n-            Ok(())\n-        }\n+            llvm_err(handler, &msg)\n+        })\n     }\n }\n \n@@ -505,7 +503,8 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             if write_bc {\n                 let _timer = cgcx.profile_activity(ProfileCategory::Codegen, \"LLVM_emit_bitcode\");\n                 if let Err(e) = fs::write(&bc_out, data) {\n-                    diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n+                    let msg = format!(\"failed to write bytecode to {}: {}\", bc_out.display(), e);\n+                    diag_handler.err(&msg);\n                 }\n             }\n \n@@ -520,7 +519,8 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n                 let data = bytecode::encode(&module.name, data);\n                 if let Err(e) = fs::write(&dst, data) {\n-                    diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n+                    let msg = format!(\"failed to write bytecode to {}: {}\", dst.display(), e);\n+                    diag_handler.err(&msg);\n                 }\n             }\n         } else if config.embed_bitcode_marker {\n@@ -532,7 +532,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             if config.emit_ir {\n                 let _timer = cgcx.profile_activity(ProfileCategory::Codegen, \"LLVM_emit_ir\");\n                 let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n-                let out = path_to_c_string(&out);\n+                let out_c = path_to_c_string(&out);\n \n                 extern \"C\" fn demangle_callback(input_ptr: *const c_char,\n                                                 input_len: size_t,\n@@ -566,9 +566,14 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 }\n \n                 with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    llvm::LLVMRustPrintModule(cpm, llmod, out.as_ptr(), demangle_callback);\n+                    let result =\n+                        llvm::LLVMRustPrintModule(cpm, llmod, out_c.as_ptr(), demangle_callback);\n                     llvm::LLVMDisposePassManager(cpm);\n-                });\n+                    result.into_result().map_err(|()| {\n+                        let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n+                        llvm_err(diag_handler, &msg)\n+                    })\n+                })?;\n             }\n \n             if config.emit_asm || asm_to_obj {"}, {"sha": "a0aae4df7e77968d887342e8b3903fa849d542bf", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "patch": "@@ -1687,7 +1687,8 @@ extern \"C\" {\n                                Demangle: extern fn(*const c_char,\n                                                    size_t,\n                                                    *mut c_char,\n-                                                   size_t) -> size_t);\n+                                                   size_t) -> size_t,\n+                               ) -> LLVMRustResult;\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);"}, {"sha": "319c66a21f17e433d453137dd345d519fea49b29", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2982dbf855fe12e30e75175d6b0fa74e7110e1cd/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=2982dbf855fe12e30e75175d6b0fa74e7110e1cd", "patch": "@@ -646,21 +646,28 @@ char RustPrintModulePass::ID = 0;\n INITIALIZE_PASS(RustPrintModulePass, \"print-rust-module\",\n                 \"Print rust module to stderr\", false, false)\n \n-extern \"C\" void LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n-                                    const char *Path, DemangleFn Demangle) {\n+extern \"C\" LLVMRustResult\n+LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n+                    const char *Path, DemangleFn Demangle) {\n   llvm::legacy::PassManager *PM = unwrap<llvm::legacy::PassManager>(PMR);\n   std::string ErrorInfo;\n \n   std::error_code EC;\n   raw_fd_ostream OS(Path, EC, sys::fs::F_None);\n   if (EC)\n     ErrorInfo = EC.message();\n+  if (ErrorInfo != \"\") {\n+    LLVMRustSetLastError(ErrorInfo.c_str());\n+    return LLVMRustResult::Failure;\n+  }\n \n   formatted_raw_ostream FOS(OS);\n \n   PM->add(new RustPrintModulePass(FOS, Demangle));\n \n   PM->run(*unwrap(M));\n+\n+  return LLVMRustResult::Success;\n }\n \n extern \"C\" void LLVMRustPrintPasses() {"}]}