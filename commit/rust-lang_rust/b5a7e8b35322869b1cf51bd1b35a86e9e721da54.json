{"sha": "b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YTdlOGIzNTMyMjg2OWIxY2Y1MWJkMWIzNWE4NmU5ZTcyMWRhNTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-22T22:09:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T10:46:02Z"}, "message": "desnapshot", "tree": {"sha": "021ae102ad8383c803ad2b8b86888c9b7f802677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021ae102ad8383c803ad2b8b86888c9b7f802677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "html_url": "https://github.com/rust-lang/rust/commit/b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "202b8dcdc420d8b109fbd5260ea2e2be0a5b7faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/202b8dcdc420d8b109fbd5260ea2e2be0a5b7faf", "html_url": "https://github.com/rust-lang/rust/commit/202b8dcdc420d8b109fbd5260ea2e2be0a5b7faf"}], "stats": {"total": 133, "additions": 8, "deletions": 125}, "files": [{"sha": "f6e4056f3d0fca52763af4631947f45d287ca62f", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -75,9 +75,6 @@ they contained the following prologue:\n \n pub use kinds::{Const, Copy, Owned, Durable};\n pub use ops::{Drop};\n-#[cfg(stage0)]\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n-#[cfg(not(stage0))]\n pub use ops::{Add, Sub, Mul, Quot, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Shl, Shr, Index};"}, {"sha": "6398127a5faffdd5d5243e7fc689ea5a6fef2a46", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -278,24 +278,12 @@ impl Mul<f32,f32> for f32 {\n     #[inline(always)]\n     fn mul(&self, other: &f32) -> f32 { *self * *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Div<f32,f32> for f32 {\n-    #[inline(always)]\n-    fn div(&self, other: &f32) -> f32 { *self / *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Quot<f32,f32> for f32 {\n     #[inline(always)]\n     fn quot(&self, other: &f32) -> f32 { *self / *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Modulo<f32,f32> for f32 {\n-    #[inline(always)]\n-    fn modulo(&self, other: &f32) -> f32 { *self % *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Rem<f32,f32> for f32 {\n     #[inline(always)]\n     fn rem(&self, other: &f32) -> f32 { *self % *other }"}, {"sha": "013f3c5095e2a55785afc5d61be6218b35b4211e", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -296,20 +296,12 @@ impl Sub<f64,f64> for f64 {\n impl Mul<f64,f64> for f64 {\n     fn mul(&self, other: &f64) -> f64 { *self * *other }\n }\n-#[cfg(stage0,notest)]\n-impl Div<f64,f64> for f64 {\n-    fn div(&self, other: &f64) -> f64 { *self / *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Quot<f64,f64> for f64 {\n     #[inline(always)]\n     fn quot(&self, other: &f64) -> f64 { *self / *other }\n }\n-#[cfg(stage0,notest)]\n-impl Modulo<f64,f64> for f64 {\n-    fn modulo(&self, other: &f64) -> f64 { *self % *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Rem<f64,f64> for f64 {\n     #[inline(always)]\n     fn rem(&self, other: &f64) -> f64 { *self % *other }"}, {"sha": "496ad4ec176b713c1a178806efe729cf864f48d2", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -691,23 +691,12 @@ impl Mul<float,float> for float {\n     #[inline(always)]\n     fn mul(&self, other: &float) -> float { *self * *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Div<float,float> for float {\n-    #[inline(always)]\n-    fn div(&self, other: &float) -> float { *self / *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Quot<float,float> for float {\n     #[inline(always)]\n     fn quot(&self, other: &float) -> float { *self / *other }\n }\n-#[cfg(stage0,notest)]\n-impl Modulo<float,float> for float {\n-    #[inline(always)]\n-    fn modulo(&self, other: &float) -> float { *self % *other }\n-}\n-#[cfg(not(stage0),notest)]\n+#[cfg(notest)]\n impl Rem<float,float> for float {\n     #[inline(always)]\n     fn rem(&self, other: &float) -> float { *self % *other }"}, {"sha": "85489755fc7a9e7512e65d65287098360078e3f2", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -200,13 +200,6 @@ impl Mul<T,T> for T {\n     #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Div<T,T> for T {\n-    #[inline(always)]\n-    fn div(&self, other: &T) -> T { *self / *other }\n-}\n-#[cfg(not(stage0),notest)]\n impl Quot<T,T> for T {\n     ///\n     /// Returns the integer quotient, truncated towards 0. As this behaviour reflects\n@@ -229,13 +222,6 @@ impl Quot<T,T> for T {\n     #[inline(always)]\n     fn quot(&self, other: &T) -> T { *self / *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Modulo<T,T> for T {\n-    #[inline(always)]\n-    fn modulo(&self, other: &T) -> T { *self % *other }\n-}\n-#[cfg(not(stage0),notest)]\n impl Rem<T,T> for T {\n     ///\n     /// Returns the integer remainder after division, satisfying:"}, {"sha": "de7597fa821d62a25c27f840db3038c2e9bedb4d", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -10,13 +10,6 @@\n \n //! An interface for numeric types\n use cmp::{Eq, Ord};\n-#[cfg(stage0)]\n-use ops::{Add, Sub, Mul, Neg};\n-#[cfg(stage0)]\n-use Quot = ops::Div;\n-#[cfg(stage0)]\n-use Rem = ops::Modulo;\n-#[cfg(not(stage0))]\n use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::Option;\n@@ -391,25 +384,8 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Quot<T,T>+Mul<T,T>>(\n     total\n }\n \n-/// Helper function for testing numeric operations\n-#[cfg(stage0,test)]\n-pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n-    assert_eq!(ten.add(&two),    cast(12));\n-    assert_eq!(ten.sub(&two),    cast(8));\n-    assert_eq!(ten.mul(&two),    cast(20));\n-    assert_eq!(ten.div(&two),    cast(5));\n-    assert_eq!(ten.modulo(&two), cast(0));\n-\n-    assert_eq!(ten.add(&two),    ten + two);\n-    assert_eq!(ten.sub(&two),    ten - two);\n-    assert_eq!(ten.mul(&two),    ten * two);\n-    assert_eq!(ten.div(&two),    ten / two);\n-    assert_eq!(ten.modulo(&two), ten % two);\n-}\n-#[cfg(stage1,test)]\n-#[cfg(stage2,test)]\n-#[cfg(stage3,test)]\n-pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n+#[cfg(test)]\n+fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12));\n     assert_eq!(ten.sub(&two),  cast(8));\n     assert_eq!(ten.mul(&two),  cast(20));"}, {"sha": "004789e7fc1caaf51aa713c28e6e5ee6319764df", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -9,15 +9,6 @@\n // except according to those terms.\n \n use core::cmp::{Ord, Eq};\n-#[cfg(stage0)]\n-use ops::{Add, Sub, Mul, Neg};\n-#[cfg(stage0)]\n-use Quot = ops::Div;\n-#[cfg(stage0)]\n-use Rem = ops::Modulo;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n use option::{None, Option, Some};\n use char;"}, {"sha": "f975226cde63b7ba4a8fa688d219a57d10957773", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -165,24 +165,10 @@ impl Mul<T,T> for T {\n     #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Div<T,T> for T {\n-    #[inline(always)]\n-    fn div(&self, other: &T) -> T { *self / *other }\n-}\n-#[cfg(not(stage0),notest)]\n impl Quot<T,T> for T {\n     #[inline(always)]\n     fn quot(&self, other: &T) -> T { *self / *other }\n }\n-\n-#[cfg(stage0,notest)]\n-impl Modulo<T,T> for T {\n-    #[inline(always)]\n-    fn modulo(&self, other: &T) -> T { *self % *other }\n-}\n-#[cfg(not(stage0),notest)]\n impl Rem<T,T> for T {\n     #[inline(always)]\n     fn rem(&self, other: &T) -> T { *self % *other }"}, {"sha": "18dcf34e49bfbe878fe0eaa304c38a403b9eac13", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -30,24 +30,12 @@ pub trait Mul<RHS,Result> {\n     fn mul(&self, rhs: &RHS) -> Result;\n }\n \n-#[lang=\"div\"]\n-#[cfg(stage0)]\n-pub trait Div<RHS,Result> {\n-    fn div(&self, rhs: &RHS) -> Result;\n-}\n #[lang=\"quot\"]\n-#[cfg(not(stage0))]\n pub trait Quot<RHS,Result> {\n     fn quot(&self, rhs: &RHS) -> Result;\n }\n \n-#[lang=\"modulo\"]\n-#[cfg(stage0)]\n-pub trait Modulo<RHS,Result> {\n-    fn modulo(&self, rhs: &RHS) -> Result;\n-}\n #[lang=\"rem\"]\n-#[cfg(not(stage0))]\n pub trait Rem<RHS,Result> {\n     fn rem(&self, rhs: &RHS) -> Result;\n }"}, {"sha": "318725d2822a53530e4b58000cebc8a570f6cded", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -14,9 +14,6 @@\n \n pub use either::{Either, Left, Right};\n pub use kinds::{Const, Copy, Owned, Durable};\n-#[cfg(stage0)]\n-pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n-#[cfg(not(stage0))]\n pub use ops::{Add, Sub, Mul, Quot, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "abcb727809eeaece8c5d4f00f14c2fbc703ed867", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -23,7 +23,6 @@ use io::{Writer, WriterUtil};\n use libc::c_void;\n use managed;\n use ptr;\n-#[cfg(stage0)] use sys;\n use reflect;\n use reflect::{MovePtr, align};\n use to_str::ToStr;"}, {"sha": "cb00b02d9d1b63a5a28ca0f72a5535fc66dd2d3f", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -125,18 +125,15 @@ pub mod file;\n pub mod net;\n \n /// Readers and Writers for memory buffers and strings.\n-#[cfg(not(stage0))] // XXX Using unsnapshotted features\n pub mod mem;\n \n /// Non-blocking access to stdin, stdout, stderr\n pub mod stdio;\n \n /// Basic stream compression. XXX: Belongs with other flate code\n-#[cfg(not(stage0))] // XXX Using unsnapshotted features\n pub mod flate;\n \n /// Interop between byte streams and pipes. Not sure where it belongs\n-#[cfg(not(stage0))] // XXX \"\n pub mod comm_adapters;\n \n /// Extension traits"}, {"sha": "40db9f89d0fd7e5ef04f8bdab665dc1ecb3ce6a5", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7e8b35322869b1cf51bd1b35a86e9e721da54/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=b5a7e8b35322869b1cf51bd1b35a86e9e721da54", "patch": "@@ -91,13 +91,10 @@ pub mod cmp;\n pub mod base64;\n pub mod rl;\n pub mod workcache;\n-#[cfg(not(stage0))]\n #[path=\"num/bigint.rs\"]\n pub mod bigint;\n-#[cfg(not(stage0))]\n #[path=\"num/rational.rs\"]\n pub mod rational;\n-#[cfg(not(stage0))]\n #[path=\"num/complex.rs\"]\n pub mod complex;\n pub mod stats;"}]}