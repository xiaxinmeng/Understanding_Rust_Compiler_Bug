{"sha": "4f074dea1dbf28d7519bf408b7530e8cba019243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDc0ZGVhMWRiZjI4ZDc1MTliZjQwOGI3NTMwZThjYmEwMTkyNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T04:54:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T04:54:02Z"}, "message": "Auto merge of #67964 - JohnTitor:rollup-pu5kosl, r=JohnTitor\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #67566 (Add an unstable conversion from thread ID to u64)\n - #67671 (Account for `type X = impl Trait;` in lifetime suggestion)\n - #67727 (Stabilise vec::remove_item)\n - #67877 (Omit underscore constants from rustdoc)\n - #67880 (Handle multiple error fix suggestions carefuly)\n - #67898 (Improve hygiene of `newtype_index`)\n - #67908 (rustdoc: HTML escape const values)\n - #67909 (Fix ICE in const pretty printing and resolve FIXME)\n - #67929 (Formatting an example for method Vec.retain)\n - #67934 (Clean up E0178 explanation)\n - #67936 (fire \"non_camel_case_types\" for associated types)\n - #67943 (Missing module std in example.)\n - #67962 (Update books)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "32898820efab3cbd1ab73a44cfdeeb49650880ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32898820efab3cbd1ab73a44cfdeeb49650880ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f074dea1dbf28d7519bf408b7530e8cba019243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f074dea1dbf28d7519bf408b7530e8cba019243", "html_url": "https://github.com/rust-lang/rust/commit/4f074dea1dbf28d7519bf408b7530e8cba019243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f074dea1dbf28d7519bf408b7530e8cba019243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0769b92e60f5298f0b6326b8654c9b04351b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0769b92e60f5298f0b6326b8654c9b04351b98", "html_url": "https://github.com/rust-lang/rust/commit/aa0769b92e60f5298f0b6326b8654c9b04351b98"}, {"sha": "23d97880bc2b5022fb4331cdff90550de7fc5328", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d97880bc2b5022fb4331cdff90550de7fc5328", "html_url": "https://github.com/rust-lang/rust/commit/23d97880bc2b5022fb4331cdff90550de7fc5328"}], "stats": {"total": 354, "additions": 237, "deletions": 117}, "files": [{"sha": "5c5cfd2e94cd42632798d9bd3d1116133e128ac9", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit ef8bb568035ded8ddfa30a9309026638cc3c8136\n+Subproject commit 5c5cfd2e94cd42632798d9bd3d1116133e128ac9"}, {"sha": "1a2390247ad6d08160e0dd74f40a01a9578659c2", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit 6601cab4666596494a569f94aa63b7b3230e9769\n+Subproject commit 1a2390247ad6d08160e0dd74f40a01a9578659c2"}, {"sha": "9493b7d4dc97eda439bd8780f05ad7b234cd1cd7", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit c26234930282210849256e4ecab925f0f2daf3be\n+Subproject commit 9493b7d4dc97eda439bd8780f05ad7b234cd1cd7"}, {"sha": "3e6e1001dc6e095dbd5c88005e80969f60e384e1", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit 8be35b201f9cf0a4c3fcc96c83ac21671dcf3112\n+Subproject commit 3e6e1001dc6e095dbd5c88005e80969f60e384e1"}, {"sha": "e1157538e86d83df0cf95d5e33bd943f80d0248f", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit d8dfe1b005c03584cd7adc4bfb72b005e7e84744\n+Subproject commit e1157538e86d83df0cf95d5e33bd943f80d0248f"}, {"sha": "1d59403cb5269c190cc52a95584ecc280345495a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1 +1 @@\n-Subproject commit b7ac1bc76b7d02a43c83b3a931d226f708aa1ff4\n+Subproject commit 1d59403cb5269c190cc52a95584ecc280345495a"}, {"sha": "3fdee8bbfdf107c96dadc3cd809504df7b6edbf3", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(binary_heap_drain_sorted)]\n-#![feature(vec_remove_item)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "f5f8d88829f5f3b62e368d5558c5558821d94a31", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1054,7 +1054,7 @@ impl<T> Vec<T> {\n     ///\n     /// ```\n     /// let mut vec = vec![1, 2, 3, 4];\n-    /// vec.retain(|&x| x%2 == 0);\n+    /// vec.retain(|&x| x % 2 == 0);\n     /// assert_eq!(vec, [2, 4]);\n     /// ```\n     ///\n@@ -1696,14 +1696,13 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_remove_item)]\n     /// let mut vec = vec![1, 2, 3, 1];\n     ///\n     /// vec.remove_item(&1);\n     ///\n     /// assert_eq!(vec, vec![2, 3, 1]);\n     /// ```\n-    #[unstable(feature = \"vec_remove_item\", reason = \"recently added\", issue = \"40062\")]\n+    #[stable(feature = \"vec_remove_item\", since = \"1.42.0\")]\n     pub fn remove_item<V>(&mut self, item: &V) -> Option<T>\n     where\n         T: PartialEq<V>,"}, {"sha": "45ef52dbf39c2ef33f61bbcec7b604cc9fbd9737", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -2,7 +2,7 @@\n \n use crate::dep_graph::DepNode;\n use crate::ich::Fingerprint;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n rustc_index::newtype_index! {\n     pub struct SerializedDepNodeIndex { .. }"}, {"sha": "37761c17f52433b7fcc5c7b2c90e1d047f5db871", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -50,7 +50,6 @@\n #![feature(thread_local)]\n #![feature(trace_macros)]\n #![feature(trusted_len)]\n-#![feature(vec_remove_item)]\n #![feature(stmt_expr_attributes)]\n #![feature(integer_atomics)]\n #![feature(test)]"}, {"sha": "9e9c8bd846473dacba9d4112868e7b8e42432ce7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -14,7 +14,6 @@ use rustc_hir::Node;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "7605d44c7f30fd924f0a8121768ccec998a76115", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -166,19 +166,12 @@ impl DefPathBasedNames<'tcx> {\n     }\n \n     // Pushes the the name of the specified const to the provided string.\n-    // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n-    // as well as the unprintable types of constants (see `push_type_name` for more details).\n-    pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n-        if let ty::ConstKind::Value(_) = c.val {\n-            // FIXME(const_generics): we could probably do a better job here.\n-            write!(output, \"{:?}\", c).unwrap()\n-        } else if debug {\n-            write!(output, \"{:?}\", c).unwrap()\n-        } else {\n-            bug!(\"DefPathBasedNames: trying to create const name for unexpected const: {:?}\", c,);\n-        }\n+    // If `debug` is true, the unprintable types of constants will be printed with `fmt::Debug`\n+    // (see `push_type_name` for more details).\n+    pub fn push_const_name(&self, ct: &Const<'tcx>, output: &mut String, debug: bool) {\n+        write!(output, \"{}\", ct).unwrap();\n         output.push_str(\": \");\n-        self.push_type_name(c.ty, output, debug);\n+        self.push_type_name(ct.ty, output, debug);\n     }\n \n     pub fn push_def_path(&self, def_id: DefId, output: &mut String) {"}, {"sha": "0c6f918632f478e7ef2d64da63fe1095d71b8660", "filename": "src/librustc_error_codes/error_codes/E0178.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_error_codes%2Ferror_codes%2FE0178.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_error_codes%2Ferror_codes%2FE0178.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0178.md?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,16 +1,27 @@\n-In types, the `+` type operator has low precedence, so it is often necessary\n-to use parentheses.\n+The `+` type operator was used in an ambiguous context.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0178\n trait Foo {}\n \n struct Bar<'a> {\n-    w: &'a Foo + Copy,   // error, use &'a (Foo + Copy)\n-    x: &'a Foo + 'a,     // error, use &'a (Foo + 'a)\n-    y: &'a mut Foo + 'a, // error, use &'a mut (Foo + 'a)\n-    z: fn() -> Foo + 'a, // error, use fn() -> (Foo + 'a)\n+    x: &'a Foo + 'a,     // error!\n+    y: &'a mut Foo + 'a, // error!\n+    z: fn() -> Foo + 'a, // error!\n+}\n+```\n+\n+In types, the `+` type operator has low precedence, so it is often necessary\n+to use parentheses:\n+\n+```\n+trait Foo {}\n+\n+struct Bar<'a> {\n+    x: &'a (Foo + 'a),     // ok!\n+    y: &'a mut (Foo + 'a), // ok!\n+    z: fn() -> (Foo + 'a), // ok!\n }\n ```\n "}, {"sha": "526b4e2971befdf1f4fa6caa2dd68f9542ff5a04", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1530,7 +1530,7 @@ impl EmitterWriter {\n \n             // This offset and the ones below need to be signed to account for replacement code\n             // that is shorter than the original code.\n-            let mut offset: isize = 0;\n+            let mut offsets: Vec<(usize, isize)> = Vec::new();\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n             if show_underline {\n@@ -1550,12 +1550,19 @@ impl EmitterWriter {\n                         .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n                         .sum();\n \n+                    let offset: isize = offsets\n+                        .iter()\n+                        .filter_map(\n+                            |(start, v)| if span_start_pos <= *start { None } else { Some(v) },\n+                        )\n+                        .sum();\n                     let underline_start = (span_start_pos + start) as isize + offset;\n                     let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n+                    assert!(underline_start >= 0 && underline_end >= 0);\n                     for p in underline_start..underline_end {\n                         buffer.putc(\n                             row_num,\n-                            max_line_num_len + 3 + p as usize,\n+                            ((max_line_num_len + 3) as isize + p) as usize,\n                             '^',\n                             Style::UnderlinePrimary,\n                         );\n@@ -1565,7 +1572,7 @@ impl EmitterWriter {\n                         for p in underline_start - 1..underline_start + 1 {\n                             buffer.putc(\n                                 row_num,\n-                                max_line_num_len + 3 + p as usize,\n+                                ((max_line_num_len + 3) as isize + p) as usize,\n                                 '-',\n                                 Style::UnderlineSecondary,\n                             );\n@@ -1582,8 +1589,9 @@ impl EmitterWriter {\n                     // length of the code to be substituted\n                     let snippet_len = span_end_pos as isize - span_start_pos as isize;\n                     // For multiple substitutions, use the position *after* the previous\n-                    // substitutions have happened.\n-                    offset += full_sub_len - snippet_len;\n+                    // substitutions have happened, only when further substitutions are\n+                    // located strictly after.\n+                    offsets.push((span_end_pos, full_sub_len - snippet_len));\n                 }\n                 row_num += 1;\n             }"}, {"sha": "6d2ec445763539d0dfed252681b6cb53ae61d437", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -56,7 +56,6 @@ impl fmt::Display for HirId {\n rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n \n-use rustc_index::vec::Idx;\n rustc_index::newtype_index! {\n     /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n     /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no"}, {"sha": "d14bafb44fd5b519c1ded8c80b32965ddd8bc97e", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -120,21 +120,21 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: $type = $type::from_u32_const($max);\n+            $v const MAX: Self = Self::from_u32_const($max);\n \n             #[inline]\n             $v fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n                 unsafe {\n-                    $type::from_u32_unchecked(value as u32)\n+                    Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n             $v fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n                 unsafe {\n-                    $type::from_u32_unchecked(value)\n+                    Self::from_u32_unchecked(value)\n                 }\n             }\n \n@@ -152,13 +152,13 @@ macro_rules! newtype_index {\n                 ];\n \n                 unsafe {\n-                    $type { private: value }\n+                    Self { private: value }\n                 }\n             }\n \n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n-                $type { private: value }\n+                Self { private: value }\n             }\n \n             /// Extracts the value of this index as an integer.\n@@ -184,14 +184,14 @@ macro_rules! newtype_index {\n             type Output = Self;\n \n             fn add(self, other: usize) -> Self {\n-                Self::new(self.index() + other)\n+                Self::from_usize(self.index() + other)\n             }\n         }\n \n-        impl Idx for $type {\n+        impl $crate::vec::Idx for $type {\n             #[inline]\n             fn new(value: usize) -> Self {\n-                Self::from(value)\n+                Self::from_usize(value)\n             }\n \n             #[inline]\n@@ -204,39 +204,39 @@ macro_rules! newtype_index {\n             #[inline]\n             fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n                 <usize as ::std::iter::Step>::steps_between(\n-                    &Idx::index(*start),\n-                    &Idx::index(*end),\n+                    &Self::index(*start),\n+                    &Self::index(*end),\n                 )\n             }\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                ::std::mem::replace(self, Self::new(1))\n+                ::std::mem::replace(self, Self::from_u32(1))\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                ::std::mem::replace(self, Self::new(0))\n+                ::std::mem::replace(self, Self::from_u32(0))\n             }\n \n             #[inline]\n             fn add_one(&self) -> Self {\n-                Self::new(Idx::index(*self) + 1)\n+                Self::from_usize(Self::index(*self) + 1)\n             }\n \n             #[inline]\n             fn sub_one(&self) -> Self {\n-                Self::new(Idx::index(*self) - 1)\n+                Self::from_usize(Self::index(*self) - 1)\n             }\n \n             #[inline]\n             fn add_usize(&self, u: usize) -> Option<Self> {\n-                Idx::index(*self).checked_add(u).map(Self::new)\n+                Self::index(*self).checked_add(u).map(Self::from_usize)\n             }\n \n             #[inline]\n             fn sub_usize(&self, u: usize) -> Option<Self> {\n-                Idx::index(*self).checked_sub(u).map(Self::new)\n+                Self::index(*self).checked_sub(u).map(Self::from_usize)\n             }\n         }\n \n@@ -257,14 +257,14 @@ macro_rules! newtype_index {\n         impl From<usize> for $type {\n             #[inline]\n             fn from(value: usize) -> Self {\n-                $type::from_usize(value)\n+                Self::from_usize(value)\n             }\n         }\n \n         impl From<u32> for $type {\n             #[inline]\n             fn from(value: u32) -> Self {\n-                $type::from_u32(value)\n+                Self::from_u32(value)\n             }\n         }\n \n@@ -409,7 +409,7 @@ macro_rules! newtype_index {\n     (@decodable $type:ident) => (\n         impl ::rustc_serialize::Decodable for $type {\n             fn decode<D: ::rustc_serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-                d.read_u32().map(Self::from)\n+                d.read_u32().map(Self::from_u32)\n             }\n         }\n     );\n@@ -500,7 +500,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = $type::from_u32_const($constant);\n+        $v const $name: $type = $type::from_u32_const($constant);\n         $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n@@ -839,3 +839,6 @@ impl<I: Idx> FnMut<(usize,)> for IntoIdx<I> {\n         I::new(n)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "15c43c72c7b3757ba55c1bdce8413f55e72a653f", "filename": "src/librustc_index/vec/tests.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_index%2Fvec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_index%2Fvec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec%2Ftests.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -0,0 +1,51 @@\n+#![allow(dead_code)]\n+newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n+\n+#[test]\n+fn index_size_is_optimized() {\n+    use std::mem::size_of;\n+\n+    assert_eq!(size_of::<MyIdx>(), 4);\n+    // Uses 0xFFFF_FFFB\n+    assert_eq!(size_of::<Option<MyIdx>>(), 4);\n+    // Uses 0xFFFF_FFFC\n+    assert_eq!(size_of::<Option<Option<MyIdx>>>(), 4);\n+    // Uses 0xFFFF_FFFD\n+    assert_eq!(size_of::<Option<Option<Option<MyIdx>>>>(), 4);\n+    // Uses 0xFFFF_FFFE\n+    assert_eq!(size_of::<Option<Option<Option<Option<MyIdx>>>>>(), 4);\n+    // Uses 0xFFFF_FFFF\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<MyIdx>>>>>>(), 4);\n+    // Uses a tag\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<Option<MyIdx>>>>>>>(), 8);\n+}\n+\n+#[test]\n+fn range_iterator_iterates_forwards() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(\n+        range.collect::<Vec<_>>(),\n+        [MyIdx::from_u32(1), MyIdx::from_u32(2), MyIdx::from_u32(3)]\n+    );\n+}\n+\n+#[test]\n+fn range_iterator_iterates_backwards() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(\n+        range.rev().collect::<Vec<_>>(),\n+        [MyIdx::from_u32(3), MyIdx::from_u32(2), MyIdx::from_u32(1)]\n+    );\n+}\n+\n+#[test]\n+fn range_count_is_correct() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(range.count(), 3);\n+}\n+\n+#[test]\n+fn range_size_hint_is_correct() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(range.size_hint(), (3, Some(3)));\n+}"}, {"sha": "d50c048301042ba107ae428fb232d0efbf13f357", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -143,6 +143,12 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         }\n     }\n \n+    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n+        if let ast::AssocItemKind::TyAlias(..) = it.kind {\n+            self.check_case(cx, \"associated type\", &it.ident);\n+        }\n+    }\n+\n     fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant) {\n         self.check_case(cx, \"variant\", &v.ident);\n     }"}, {"sha": "ef70b127ac5bd4b1bf513a542f57536408711379", "filename": "src/librustc_mir/borrow_check/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use std::fmt;\n use std::ops::Index;\n "}, {"sha": "9a301a6ad32a81a36a9d33a28519bbba38a837b3", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -800,7 +800,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // If there is a static predicate, then the only sensible suggestion is to replace\n                 // fr with `'static`.\n                 if has_static_predicate {\n-                    diag.help(&format!(\"consider replacing `{}` with `{}`\", fr_name, static_str,));\n+                    diag.help(&format!(\"consider replacing `{}` with `{}`\", fr_name, static_str));\n                 } else {\n                     // Otherwise, we should suggest adding a constraint on the return type.\n                     let span = infcx.tcx.def_span(*did);\n@@ -810,15 +810,20 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         } else {\n                             \"'_\".to_string()\n                         };\n-\n+                        let suggestion = if snippet.ends_with(\";\") {\n+                            // `type X = impl Trait;`\n+                            format!(\"{} + {};\", &snippet[..snippet.len() - 1], suggestable_fr_name)\n+                        } else {\n+                            format!(\"{} + {}\", snippet, suggestable_fr_name)\n+                        };\n                         diag.span_suggestion(\n                             span,\n                             &format!(\n                                 \"to allow this `impl Trait` to capture borrowed data with lifetime \\\n                                  `{}`, add `{}` as a bound\",\n                                 fr_name, suggestable_fr_name,\n                             ),\n-                            format!(\"{} + {}\", snippet, suggestable_fr_name),\n+                            suggestion,\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "c95919685bbc73e69f5f656f3140db54e387fff3", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -2,7 +2,7 @@ use crate::rustc::ty::{self, Ty};\n use rustc::infer::region_constraints::MemberConstraint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::hash::Hash;\n use std::ops::Index;"}, {"sha": "8155aa0ee000a05a820d54d199584b163148b868", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, ReadOnlyBodyAndCache};\n use rustc_data_structures::vec_linked_list as vll;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n use crate::util::liveness::{categorize, DefUse};\n "}, {"sha": "8d51cb2391234749c76d1832ac7e078f690504f2", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::{self, TyCtxt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n use crate::borrow_check::{\n     places_conflict, BorrowData, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext,"}, {"sha": "e5cddaf6c66f28839c752ff1a7936d5952dd948a", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -2,7 +2,7 @@ use core::slice::Iter;\n use rustc::mir::*;\n use rustc::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Enumerated, Idx, IndexVec};\n+use rustc_index::vec::{Enumerated, IndexVec};\n use rustc_span::Span;\n use smallvec::SmallVec;\n "}, {"sha": "9fefe908e578e3838b1cc2b90c276668a63c2efa", "filename": "src/librustc_session/node_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,4 +1,3 @@\n-use rustc_index::vec::Idx;\n use rustc_serialize::{Decoder, Encoder};\n use rustc_span::ExpnId;\n use std::fmt;"}, {"sha": "40abc8b2179b847d8caaa3d9bb78e2f9e7742cd1", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -5,7 +5,6 @@\n use arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n-use rustc_index::vec::Idx;\n use rustc_macros::{symbols, HashStable_Generic};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};"}, {"sha": "6434dccdfc75bdbae0b277e6fd2ac0dc214fcf84", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::def_id::DefId;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{self, PrimitiveType};\n+use crate::html::escape::Escape;\n use crate::html::item_type::ItemType;\n use crate::html::render::{self, cache, CURRENT_DEPTH};\n \n@@ -314,8 +315,14 @@ impl clean::Lifetime {\n }\n \n impl clean::Constant {\n-    crate fn print(&self) -> &str {\n-        &self.expr\n+    crate fn print(&self) -> impl fmt::Display + '_ {\n+        display_fn(move |f| {\n+            if f.alternate() {\n+                f.write_str(&self.expr)\n+            } else {\n+                write!(f, \"{}\", Escape(&self.expr))\n+            }\n+        })\n     }\n }\n \n@@ -689,7 +696,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Array(ref t, ref n) => {\n             primitive_link(f, PrimitiveType::Array, \"[\")?;\n             fmt::Display::fmt(&t.print(), f)?;\n-            primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", n))\n+            if f.alternate() {\n+                primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", n))\n+            } else {\n+                primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", Escape(n)))\n+            }\n         }\n         clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n         clean::RawPointer(m, ref t) => {"}, {"sha": "a01e2f793948e668967b94697d720d9473193c95", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -2280,7 +2280,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n     );\n \n     if c.value.is_some() || c.is_literal {\n-        write!(w, \" = {expr};\", expr = c.expr);\n+        write!(w, \" = {expr};\", expr = Escape(&c.expr));\n     } else {\n         write!(w, \";\");\n     }\n@@ -2293,7 +2293,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n             if value_lowercase != expr_lowercase\n                 && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n             {\n-                write!(w, \" // {value}\", value = value);\n+                write!(w, \" // {value}\", value = Escape(value));\n             }\n         }\n     }"}, {"sha": "eeaac1d8c74318f2a7b1bd975e90e674e9baf7bd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -10,7 +10,6 @@\n #![feature(nll)]\n #![feature(set_stdio)]\n #![feature(test)]\n-#![feature(vec_remove_item)]\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]"}, {"sha": "5fa9270959cca50a2bc7cf2504956f60192c69aa", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{kw, sym};\n use rustc_span::{self, Span};\n use syntax::ast;\n \n@@ -514,16 +514,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.statics.push(s);\n             }\n             hir::ItemKind::Const(type_, expr) => {\n-                let s = Constant {\n-                    type_,\n-                    expr,\n-                    id: item.hir_id,\n-                    name: ident.name,\n-                    attrs: &item.attrs,\n-                    whence: item.span,\n-                    vis: &item.vis,\n-                };\n-                om.constants.push(s);\n+                // Underscore constants do not correspond to a nameable item and\n+                // so are never useful in documentation.\n+                if ident.name != kw::Underscore {\n+                    let s = Constant {\n+                        type_,\n+                        expr,\n+                        id: item.hir_id,\n+                        name: ident.name,\n+                        attrs: &item.attrs,\n+                        whence: item.span,\n+                        vis: &item.vis,\n+                    };\n+                    om.constants.push(s);\n+                }\n             }\n             hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n                 let items = item_ids.iter().map(|ti| self.cx.tcx.hir().trait_item(ti.id)).collect();"}, {"sha": "5023d69240893914e028376824eba017173d0e2b", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -63,14 +63,13 @@ pub struct TcpStream(net_imp::TcpStream);\n /// # Examples\n ///\n /// ```no_run\n-/// # use std::io;\n /// use std::net::{TcpListener, TcpStream};\n ///\n /// fn handle_client(stream: TcpStream) {\n ///     // ...\n /// }\n ///\n-/// fn main() -> io::Result<()> {\n+/// fn main() -> std::io::Result<()> {\n ///     let listener = TcpListener::bind(\"127.0.0.1:80\")?;\n ///\n ///     // accept connections and process them serially"}, {"sha": "0dc43c7e6510ab6abac48de6ff4ef722b0f6514a", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1072,6 +1072,19 @@ impl ThreadId {\n             ThreadId(NonZeroU64::new(id).unwrap())\n         }\n     }\n+\n+    /// This returns a numeric identifier for the thread identified by this\n+    /// `ThreadId`.\n+    ///\n+    /// As noted in the documentation for the type itself, it is essentially an\n+    /// opaque ID, but is guaranteed to be unique for each thread. The returned\n+    /// value is entirely opaque -- only equality testing is stable. Note that\n+    /// it is not guaranteed which values new threads will return, and this may\n+    /// change across Rust versions.\n+    #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n+    pub fn as_u64(&self) -> u64 {\n+        self.0.get()\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "7361b22b7479842533420cd5c9685094677b2884", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -30,3 +30,10 @@ impl <T> VSet<T, {Order::Unsorted}> {\n         Self { inner: Vec::new() }\n     }\n }\n+\n+pub struct Escape<const S: &'static str>;\n+\n+// @has foo/struct.Escape.html '//h3[@id=\"impl\"]/code' 'impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }>'\n+impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }> {\n+    pub fn f() {}\n+}"}, {"sha": "0d4809409f3a2a4913a7bc1980f66248ab1c0a94", "filename": "src/test/rustdoc/const-underscore.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fconst-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fconst-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-underscore.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --document-private-items\n+\n+// @!has const_underscore/constant._.html\n+const _: () = {\n+    #[no_mangle]\n+    extern \"C\" fn implementation_detail() {}\n+};"}, {"sha": "e84f6e52c75aa114cec4f6d22caab54d9d08afae", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -62,3 +62,6 @@ macro_rules! int_module {\n \n // @has show_const_contents/constant.MIN.html '= i16::min_value(); // -32_768i16'\n int_module!(i16);\n+\n+// @has show_const_contents/constant.ESCAPE.html //pre '= r#\"<script>alert(\"ESCAPE\");</script>\"#;'\n+pub const ESCAPE: &str = r#\"<script>alert(\"ESCAPE\");</script>\"#;"}, {"sha": "fe68b394e5a5cf2c2f9dc01e3a4391d0a2f5523c", "filename": "src/test/ui-fulldeps/newtype_index.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa0769b92e60f5298f0b6326b8654c9b04351b98/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0769b92e60f5298f0b6326b8654c9b04351b98/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs?ref=aa0769b92e60f5298f0b6326b8654c9b04351b98", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-\n-#![feature(rustc_private)]\n-\n-extern crate rustc_index;\n-extern crate serialize as rustc_serialize;\n-\n-use rustc_index::{newtype_index, vec::Idx};\n-\n-newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n-\n-use std::mem::size_of;\n-\n-fn main() {\n-    assert_eq!(size_of::<MyIdx>(), 4);\n-    assert_eq!(size_of::<Option<MyIdx>>(), 4);\n-    assert_eq!(size_of::<Option<Option<MyIdx>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<MyIdx>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<MyIdx>>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<Option<MyIdx>>>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<Option<Option<MyIdx>>>>>>>(), 8);\n-}"}, {"sha": "5957ecbdc5faaaee1284806ca6791209bbf5bc47", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n-LL | type E<'a, 'b> = impl Sized; + 'a\n+LL | type E<'a, 'b> = impl Sized + 'a;\n    |\n \n error: aborting due to previous error"}, {"sha": "8f63d5baef8755621c2b58288d91407b3ef52d13", "filename": "src/test/ui/issues/issue-17732.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17732.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n #![allow(dead_code)]\n+#![allow(non_camel_case_types)]\n // pretty-expanded FIXME #23616\n \n trait Person {"}, {"sha": "f0bab6010d72447950893779d60cf0bd6d8de274", "filename": "src/test/ui/issues/issue-35600.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fissues%2Fissue-35600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Fissues%2Fissue-35600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35600.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n+#![allow(non_camel_case_types)]\n #![allow(unused_variables)]\n+\n trait Foo {\n     type bar;\n     fn bar();"}, {"sha": "acd5c5df9e8f61ffba43da83f4c93d801a9037a2", "filename": "src/test/ui/lint/lint-non-camel-case-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -23,6 +23,7 @@ enum Foo5 {\n }\n \n trait foo6 { //~ ERROR trait `foo6` should have an upper camel case name\n+    type foo7; //~ ERROR associated type `foo7` should have an upper camel case name\n     fn dummy(&self) { }\n }\n "}, {"sha": "f82eefed4368a47d424f873b15f2f135b7ed24ec", "filename": "src/test/ui/lint/lint-non-camel-case-types.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -46,11 +46,17 @@ error: trait `foo6` should have an upper camel case name\n LL | trait foo6 {\n    |       ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo6`\n \n+error: associated type `foo7` should have an upper camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:26:10\n+   |\n+LL |     type foo7;\n+   |          ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo7`\n+\n error: type parameter `ty` should have an upper camel case name\n-  --> $DIR/lint-non-camel-case-types.rs:29:6\n+  --> $DIR/lint-non-camel-case-types.rs:30:6\n    |\n LL | fn f<ty>(_: ty) {}\n    |      ^^ help: convert the identifier to upper camel case: `Ty`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "68aadcf60538409728456fbc822deaa49894f445", "filename": "src/test/ui/type/issue-67690-type-alias-bound-diagnostic-crash.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for issue #67690\n+// Rustc endless loop out-of-memory and consequent SIGKILL in generic new type\n+\n+// check-pass\n+pub type T<P: Send + Send + Send> = P;\n+//~^ WARN bounds on generic parameters are not enforced in type aliases\n+\n+fn main() {}"}, {"sha": "37b51b50b964e9f1acc0d0c056b0cffb6b7a6e5a", "filename": "src/test/ui/type/issue-67690-type-alias-bound-diagnostic-crash.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -0,0 +1,12 @@\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/issue-67690-type-alias-bound-diagnostic-crash.rs:5:15\n+   |\n+LL | pub type T<P: Send + Send + Send> = P;\n+   |               ^^^^   ^^^^   ^^^^\n+   |\n+   = note: `#[warn(type_alias_bounds)]` on by default\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | pub type T<P> = P;\n+   |            --\n+"}, {"sha": "65b79650d4d72495e6b7312fba7e03edb3d3000f", "filename": "src/test/ui/type/type-alias-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,6 +1,6 @@\n // Test `ignored_generic_bounds` lint warning about bounds in type aliases.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n use std::rc::Rc;"}, {"sha": "e4d3753f8a59a3a6b3e3c2d606108530dc334787", "filename": "src/test/ui/type/type-alias-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -8,7 +8,7 @@ LL | type SVec<T: Send + Send> = Vec<T>;\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type SVec<T> = Vec<T>;\n-   |     --    --\n+   |           --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:10:21\n@@ -30,7 +30,7 @@ LL | type VVec<'b, 'a: 'b + 'b> = (&'b u32, Vec<&'a i32>);\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type VVec<'b, 'a> = (&'b u32, Vec<&'a i32>);\n-   |            --  --\n+   |                --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:14:18\n@@ -41,7 +41,7 @@ LL | type WVec<'b, T: 'b + 'b> = (&'b u32, Vec<T>);\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type WVec<'b, T> = (&'b u32, Vec<T>);\n-   |           --  --\n+   |               --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:16:25"}, {"sha": "da1e3760e010dd7a2b00bf56274c18b5a09825a9", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f074dea1dbf28d7519bf408b7530e8cba019243/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4f074dea1dbf28d7519bf408b7530e8cba019243", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"compiletest\"]\n #![feature(test)]\n-#![feature(vec_remove_item)]\n #![deny(warnings)]\n \n extern crate test;"}]}