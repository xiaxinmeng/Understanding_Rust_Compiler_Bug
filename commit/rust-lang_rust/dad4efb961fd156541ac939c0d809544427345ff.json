{"sha": "dad4efb961fd156541ac939c0d809544427345ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDRlZmI5NjFmZDE1NjU0MWFjOTM5YzBkODA5NTQ0NDI3MzQ1ZmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T18:56:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-13T18:56:41Z"}, "message": "Rollup merge of #52156 - zajlerke:update-deprecation-notice, r=Kimundi\n\nUpdate std::ascii::ASCIIExt deprecation notes\n\nFixes #52085", "tree": {"sha": "ec831626211ad48ebe26121f36d6c8ea073e08d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec831626211ad48ebe26121f36d6c8ea073e08d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad4efb961fd156541ac939c0d809544427345ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbSPXpCRBK7hj4Ov3rIwAAdHIIABZp9Eof+J8TOvfDKwCvx3Eo\nPt6ke4AhoxpF76rrUyq06EFbJlVE4WfM/bzLHSfl+753pfld0dBX4jiKL3MS36L4\nKRnen69VqHkfLxtjiOGN+F6kveVmKWqQFv6Rc18jHb51yH39mRtneEqtHxQGr63q\nsm3VhBN3+4LMDUEgiYVNmKGSr7Iu8CaSIF1urM0lDWG/d7paRzXLvHQS9WW4WwA8\nZVQuCwdFQWxfTWs/4fV30yzTrTMTPmIiFsA51t/GkUIIkwgD8iJjD/aYwhfQYNH6\n7W9DntguBkf6oV85Dc7aPcIR6+WQ6a7JhzGRhYHSOg2IAKMOre05WT7utk721Kg=\n=RiaP\n-----END PGP SIGNATURE-----\n", "payload": "tree ec831626211ad48ebe26121f36d6c8ea073e08d5\nparent a2c3713ea66a28f3546bb20fdd49686ee4ccc205\nparent 2c2add6e0259efd9b375c849d1bde187972b65b3\nauthor kennytm <kennytm@gmail.com> 1531508201 +0800\ncommitter GitHub <noreply@github.com> 1531508201 +0800\n\nRollup merge of #52156 - zajlerke:update-deprecation-notice, r=Kimundi\n\nUpdate std::ascii::ASCIIExt deprecation notes\n\nFixes #52085\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad4efb961fd156541ac939c0d809544427345ff", "html_url": "https://github.com/rust-lang/rust/commit/dad4efb961fd156541ac939c0d809544427345ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad4efb961fd156541ac939c0d809544427345ff/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c3713ea66a28f3546bb20fdd49686ee4ccc205", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c3713ea66a28f3546bb20fdd49686ee4ccc205", "html_url": "https://github.com/rust-lang/rust/commit/a2c3713ea66a28f3546bb20fdd49686ee4ccc205"}, {"sha": "2c2add6e0259efd9b375c849d1bde187972b65b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2add6e0259efd9b375c849d1bde187972b65b3", "html_url": "https://github.com/rust-lang/rust/commit/2c2add6e0259efd9b375c849d1bde187972b65b3"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "376410677346cea1be104a402d4334d0e734880f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dad4efb961fd156541ac939c0d809544427345ff/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad4efb961fd156541ac939c0d809544427345ff/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=dad4efb961fd156541ac939c0d809544427345ff", "patch": "@@ -163,7 +163,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphabetic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphabetic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphabetic(&self) -> bool { unimplemented!(); }\n@@ -176,7 +178,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_uppercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_uppercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_uppercase(&self) -> bool { unimplemented!(); }\n@@ -189,7 +193,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_lowercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_lowercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_lowercase(&self) -> bool { unimplemented!(); }\n@@ -203,7 +209,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphanumeric)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphanumeric)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphanumeric(&self) -> bool { unimplemented!(); }\n@@ -216,7 +224,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_digit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_digit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_digit(&self) -> bool { unimplemented!(); }\n@@ -230,7 +240,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_hexdigit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_hexdigit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n@@ -248,7 +260,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_punctuation)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_punctuation)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_punctuation(&self) -> bool { unimplemented!(); }\n@@ -261,7 +275,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_graphic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_graphic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_graphic(&self) -> bool { unimplemented!(); }\n@@ -291,7 +307,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_whitespace)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_whitespace)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_whitespace(&self) -> bool { unimplemented!(); }\n@@ -304,7 +322,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_control)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_control)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_control(&self) -> bool { unimplemented!(); }"}]}