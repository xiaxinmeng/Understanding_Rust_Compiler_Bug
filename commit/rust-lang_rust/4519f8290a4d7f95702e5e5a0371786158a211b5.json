{"sha": "4519f8290a4d7f95702e5e5a0371786158a211b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTlmODI5MGE0ZDdmOTU3MDJlNWU1YTAzNzE3ODYxNThhMjExYjU=", "commit": {"author": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-02-26T08:56:04Z"}, "committer": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-02-26T08:56:04Z"}, "message": "Various typos corrected", "tree": {"sha": "622870fc94b36a03faffa2cdd56f08beb7a8f180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622870fc94b36a03faffa2cdd56f08beb7a8f180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4519f8290a4d7f95702e5e5a0371786158a211b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4519f8290a4d7f95702e5e5a0371786158a211b5", "html_url": "https://github.com/rust-lang/rust/commit/4519f8290a4d7f95702e5e5a0371786158a211b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4519f8290a4d7f95702e5e5a0371786158a211b5/comments", "author": null, "committer": null, "parents": [{"sha": "e1a4e66755ee3be95f66121d1423c614b54102b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4e66755ee3be95f66121d1423c614b54102b8", "html_url": "https://github.com/rust-lang/rust/commit/e1a4e66755ee3be95f66121d1423c614b54102b8"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3d0138720642d7ed555c9054e00abd2aa4f87871", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4519f8290a4d7f95702e5e5a0371786158a211b5/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f8290a4d7f95702e5e5a0371786158a211b5/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4519f8290a4d7f95702e5e5a0371786158a211b5", "patch": "@@ -69,7 +69,7 @@ pub trait CopyableNonstrictIter<A:Copy> {\n     pure fn each_val(&const self, f: &fn(A) -> bool);\n }\n \n-// A trait for sequences that can be by imperatively pushing elements\n+// A trait for sequences that can be built by imperatively pushing elements\n // onto them.\n pub trait Buildable<A> {\n     /**\n@@ -198,7 +198,7 @@ pub pure fn position<A,IA:BaseIter<A>>(self: &IA, f: fn(&A) -> bool)\n }\n \n // note: 'rposition' would only make sense to provide with a bidirectional\n-// iter interface, such as would provide \"reach\" in addition to \"each\". as is,\n+// iter interface, such as would provide \"reach\" in addition to \"each\". As is,\n // it would have to be implemented with foldr, which is too inefficient.\n \n #[inline(always)]\n@@ -269,13 +269,13 @@ pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(A)))\n \n /**\n  * Builds a sequence by calling a provided function with an argument\n- * function that pushes an element to the back of a sequence.\n+ * function that pushes an element to the back of the sequence.\n  * This version takes an initial size for the sequence.\n  *\n  * # Arguments\n  *\n  * * size - An option, maybe containing initial size of the sequence\n- *          to reserve\n+ *          to reserve.\n  * * builder - A function that will construct the sequence. It receives\n  *             as an argument a function that will push an element\n  *             onto the sequence being constructed.\n@@ -290,7 +290,7 @@ pub pure fn build_sized_opt<A,B: Buildable<A>>(\n \n // Functions that combine iteration and building\n \n-/// Apply a function to each element of an iterable and return the results\n+/// Applies a function to each element of an iterable and returns the results.\n #[inline(always)]\n pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: fn(&T) -> U)\n     -> BU {\n@@ -302,7 +302,7 @@ pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: fn(&T) -> U)\n }\n \n /**\n- * Creates and initializes a generic sequence from a function\n+ * Creates and initializes a generic sequence from a function.\n  *\n  * Creates a generic sequence of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n@@ -317,7 +317,7 @@ pub pure fn from_fn<T,BT: Buildable<T>>(n_elts: uint,\n }\n \n /**\n- * Creates and initializes a generic sequence with some element\n+ * Creates and initializes a generic sequence with some elements.\n  *\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n@@ -331,7 +331,7 @@ pub pure fn from_elem<T:Copy,BT:Buildable<T>>(n_elts: uint,\n     }\n }\n \n-/// Appending two generic sequences\n+/// Appends two generic sequences.\n #[inline(always)]\n pub pure fn append<T:Copy,IT:BaseIter<T>,BT:Buildable<T>>(\n     lhs: &IT, rhs: &IT) -> BT {"}]}