{"sha": "67e361a9408c5226bdeccf49c958811dcad59405", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTM2MWE5NDA4YzUyMjZiZGVjY2Y0OWM5NTg4MTFkY2FkNTk0MDU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-10T19:51:50Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-11T03:18:07Z"}, "message": "Introduce a ty_infer ast node and use it instead of option::t[ty].\n\nThis actually basically makes things worse, since we get less nice\ntype system guarentees but it will make doing type inferred blocks a\nfair deal less painful. I'm not /really/ happy about this...", "tree": {"sha": "4f040ac54f5cdb5d5e46436daf6248347aaafff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f040ac54f5cdb5d5e46436daf6248347aaafff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e361a9408c5226bdeccf49c958811dcad59405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e361a9408c5226bdeccf49c958811dcad59405", "html_url": "https://github.com/rust-lang/rust/commit/67e361a9408c5226bdeccf49c958811dcad59405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e361a9408c5226bdeccf49c958811dcad59405/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6074ca7315f0a29c1b3a8a5d2fc5e15d9de639", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6074ca7315f0a29c1b3a8a5d2fc5e15d9de639", "html_url": "https://github.com/rust-lang/rust/commit/1e6074ca7315f0a29c1b3a8a5d2fc5e15d9de639"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "46cad7ca2bb95ea53e0516c857053ae2501a4d05", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -408,6 +408,10 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n         }\n         typ = ty::mk_constr(tcx, ast_ty_to_ty(tcx, getter, t), out_cs);\n       }\n+      ast::ty_infer. {\n+        tcx.sess.span_bug(ast_ty.span,\n+                          \"found ty_infer in unexpected place\");\n+      }\n     }\n     alt cname {\n       none. {/* no-op */ }\n@@ -429,6 +433,23 @@ fn ast_ty_to_ty_crate(ccx: @crate_ctxt, ast_ty: &@ast::ty) -> ty::t {\n     ret ast_ty_to_ty(ccx.tcx, f, ast_ty);\n }\n \n+// A wrapper around ast_ty_to_ty_crate that handles ty_infer.\n+fn ast_ty_to_ty_crate_infer(ccx: @crate_ctxt, ast_ty: &@ast::ty)\n+    -> option::t[ty::t] {\n+    alt ast_ty.node {\n+      ast::ty_infer. { none }\n+      _ { some(ast_ty_to_ty_crate(ccx, ast_ty)) }\n+    }\n+}\n+// A wrapper around ast_ty_to_ty_infer that generates a new type variable if\n+// there isn't a fixed type.\n+fn ast_ty_to_ty_crate_tyvar(fcx: &@fn_ctxt, ast_ty: &@ast::ty) -> ty::t {\n+    alt ast_ty_to_ty_crate_infer(fcx.ccx, ast_ty) {\n+      some(ty) { ty }\n+      none. { next_ty_var(fcx) }\n+    }\n+}\n+\n \n // Functions that write types into the node type table.\n mod write {\n@@ -1269,17 +1290,8 @@ fn gather_locals(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n \n     // Add explicitly-declared locals.\n     let visit_local = lambda(local: &@ast::local, e: &(), v: &visit::vt[()]) {\n-        alt local.node.ty {\n-          none. {\n-            // Auto slot.\n-            assign(local.node.id, ident_for_local(local), none);\n-          }\n-          some(ast_ty) {\n-            // Explicitly typed slot.\n-            let local_ty = ast_ty_to_ty_crate(ccx, ast_ty);\n-            assign(local.node.id, ident_for_local(local), some(local_ty));\n-          }\n-        }\n+        let local_ty = ast_ty_to_ty_crate_infer(ccx, local.node.ty);\n+        assign(local.node.id, ident_for_local(local), local_ty);\n         visit::visit_local(local, e, v);\n     };\n \n@@ -2339,10 +2351,9 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n       }\n       ast::expr_port(typ) {\n         let t = next_ty_var(fcx);\n-        alt typ {\n+        alt ast_ty_to_ty_crate_infer(fcx.ccx, typ) {\n           some(_t) {\n-            demand::simple(fcx, expr.span, ast_ty_to_ty_crate(fcx.ccx, _t),\n-                           t);\n+            demand::simple(fcx, expr.span, _t, t);\n           }\n           none. { }\n         }"}, {"sha": "5eda5cb68efb38d78b2e63d767e9545ec7bca426", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -260,7 +260,7 @@ tag init_op { init_assign; init_move; }\n \n type initializer = {op: init_op, expr: @expr};\n \n-type local_ = {ty: option::t[@ty],\n+type local_ = {ty: @ty,\n                pat: @pat,\n                init: option::t[initializer],\n                id: node_id};\n@@ -335,7 +335,7 @@ tag expr_ {\n     /* FIXME Would be nice if expr_check desugared\n        to expr_if_check. */\n     expr_if_check(@expr, blk, option::t[@expr]);\n-    expr_port(option::t[@ty]);\n+    expr_port(@ty);\n     expr_chan(@expr);\n     expr_anon_obj(anon_obj);\n     expr_mac(mac);\n@@ -451,6 +451,10 @@ tag ty_ {\n     ty_type;\n     ty_constr(@ty, [@ty_constr]);\n     ty_mac(mac);\n+    // ty_infer means the type should be inferred instead of it having been\n+    // specified. This should only appear at the \"top level\" of a type and not\n+    // nested in one.\n+    ty_infer;\n }\n \n "}, {"sha": "aa0f45be9970555cfd5fb9079cd642a730e3ddca", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -421,11 +421,8 @@ fn noop_fold_expr(e: &expr_, fld: ast_fold) -> expr_ {\n             expr_if_check(fld.fold_expr(cond), fld.fold_block(tr),\n                           option::map(fld.fold_expr, fl))\n           }\n-          expr_port(ot) {\n-            expr_port(alt ot {\n-                        option::some(t) { option::some(fld.fold_ty(t)) }\n-                        option::none. { option::none }\n-                      })\n+          expr_port(t) {\n+            expr_port(fld.fold_ty(t))\n           }\n           expr_chan(e) { expr_chan(fld.fold_expr(e)) }\n           expr_anon_obj(ao) { expr_anon_obj(fold_anon_obj(ao)) }\n@@ -487,7 +484,7 @@ fn noop_fold_path(p: &path_, fld: ast_fold) -> path_ {\n }\n \n fn noop_fold_local(l: &local_, fld: ast_fold) -> local_ {\n-    ret {ty: option::map(fld.fold_ty, l.ty),\n+    ret {ty: fld.fold_ty(l.ty),\n          pat: fld.fold_pat(l.pat),\n          init: alt l.init {\n            option::none[initializer]. { l.init }"}, {"sha": "d956b28f8b0dbede59920ad6601aa67e454fb443", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -952,10 +952,10 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n             ex = ast::expr_be(e);\n         } else { p.fatal(\"Non-call expression in tail call\"); }\n     } else if (eat_word(p, \"port\")) {\n-        let ty = none;\n+        let ty = @spanned(lo, hi, ast::ty_infer);\n         if token::LBRACKET == p.peek() {\n             expect(p, token::LBRACKET);\n-            ty = some(parse_ty(p));\n+            ty = parse_ty(p);\n             expect(p, token::RBRACKET);\n         }\n         expect(p, token::LPAREN);\n@@ -1481,8 +1481,8 @@ fn parse_pat(p: &parser) -> @ast::pat {\n fn parse_local(p: &parser, allow_init: bool) -> @ast::local {\n     let lo = p.get_lo_pos();\n     let pat = parse_pat(p);\n-    let ty = none;\n-    if eat(p, token::COLON) { ty = some(parse_ty(p)); }\n+    let ty = @spanned(lo, lo, ast::ty_infer);\n+    if eat(p, token::COLON) { ty = parse_ty(p); }\n     let init = if allow_init { parse_initializer(p) } else { none };\n     ret @spanned(lo, p.get_last_hi_pos(),\n                  {ty: ty,"}, {"sha": "f8792a31c9473abc290bc576d0cf629d61e9fb37", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -966,11 +966,11 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         pclose(s);\n       }\n       ast::expr_mac(m) { print_mac(s, m); }\n-      ast::expr_port(ot) {\n+      ast::expr_port(t) {\n         word(s.s, \"port\");\n-        alt ot {\n-          some(t) { word(s.s, \"[\"); print_type(s, *t); word(s.s, \"]\"); }\n-          none. { }\n+        alt t.node {\n+          ast::ty_infer. { }\n+          _ { word(s.s, \"[\"); print_type(s, *t); word(s.s, \"]\"); }\n         }\n         popen(s);\n         pclose(s);\n@@ -1040,6 +1040,14 @@ fn print_expr_parens_if_unary(s: &ps, ex: &@ast::expr) {\n     if parens { pclose(s); }\n }\n \n+fn print_local_decl(s: &ps, loc: &@ast::local) {\n+    print_pat(s, loc.node.pat);\n+    alt loc.node.ty.node {\n+      ast::ty_infer. { }\n+      _ { word_space(s, \":\"); print_type(s, *loc.node.ty); }\n+    }\n+}\n+\n fn print_decl(s: &ps, decl: &@ast::decl) {\n     maybe_print_comment(s, decl.span.lo);\n     alt decl.node {\n@@ -1049,14 +1057,7 @@ fn print_decl(s: &ps, decl: &@ast::decl) {\n         word_nbsp(s, \"let\");\n         fn print_local(s: &ps, loc: &@ast::local) {\n             ibox(s, indent_unit);\n-            print_pat(s, loc.node.pat);\n-            alt loc.node.ty {\n-              some(ty) {\n-                word_space(s, \":\");\n-                print_type(s, *ty);\n-              }\n-              _ { }\n-            }\n+            print_local_decl(s, loc);\n             end(s);\n             alt loc.node.init {\n               some(init) {\n@@ -1080,11 +1081,7 @@ fn print_decl(s: &ps, decl: &@ast::decl) {\n fn print_ident(s: &ps, ident: &ast::ident) { word(s.s, ident); }\n \n fn print_for_decl(s: &ps, loc: &@ast::local, coll: &@ast::expr) {\n-    print_pat(s, loc.node.pat);\n-    alt loc.node.ty {\n-      some(t) { word_space(s, \":\"); print_type(s, *t); }\n-      none. { }\n-    }\n+    print_local_decl(s, loc);\n     space(s.s);\n     word_space(s, \"in\");\n     print_expr(s, coll);"}, {"sha": "f7e7c3b352da38c242a894f3cd29345d571b89a8", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e361a9408c5226bdeccf49c958811dcad59405/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=67e361a9408c5226bdeccf49c958811dcad59405", "patch": "@@ -79,7 +79,7 @@ fn visit_view_item[E](vi: &@view_item, e: &E, v: &vt[E]) { }\n \n fn visit_local[E](loc: &@local, e: &E, v: &vt[E]) {\n     v.visit_pat(loc.node.pat, e, v);\n-    alt loc.node.ty { none. { } some(t) { v.visit_ty(t, e, v); } }\n+    v.visit_ty(loc.node.ty, e, v);\n     alt loc.node.init { none. { } some(i) { v.visit_expr(i.expr, e, v); } }\n }\n \n@@ -154,13 +154,10 @@ fn visit_ty[E](t: &@ty, e: &E, v: &vt[E]) {\n             v.visit_constr(tc.node.path, tc.span, tc.node.id, e, v);\n         }\n       }\n+      ty_infer. {/* no-op */ }\n     }\n }\n \n-fn visit_ty_opt[E](ot: &option::t[@ty], e: &E, v: &vt[E]) {\n-    alt ot { none. { } some(t) { v.visit_ty(t, e, v); } }\n-}\n-\n fn visit_constr[E](operator: &path, sp: &span, id: node_id, e: &E,\n                    v: &vt[E]) {\n     // default\n@@ -313,7 +310,7 @@ fn visit_expr[E](ex: &@expr, e: &E, v: &vt[E]) {\n       expr_log(_, x) { v.visit_expr(x, e, v); }\n       expr_check(_, x) { v.visit_expr(x, e, v); }\n       expr_assert(x) { v.visit_expr(x, e, v); }\n-      expr_port(t) { visit_ty_opt(t, e, v); }\n+      expr_port(t) { v.visit_ty(t, e, v); }\n       expr_chan(x) { v.visit_expr(x, e, v); }\n       expr_anon_obj(anon_obj) {\n         alt anon_obj.fields {"}]}