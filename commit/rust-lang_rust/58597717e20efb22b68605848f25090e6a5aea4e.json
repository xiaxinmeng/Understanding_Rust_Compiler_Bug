{"sha": "58597717e20efb22b68605848f25090e6a5aea4e", "node_id": "C_kwDOAAsO6NoAKDU4NTk3NzE3ZTIwZWZiMjJiNjg2MDU4NDhmMjUwOTBlNmE1YWVhNGU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-07T05:12:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-07T05:12:14Z"}, "message": "Rollup merge of #105583 - luqmana:bitcast-immediates, r=oli-obk\n\nOperand::extract_field: only cast llval if it's a pointer and replace bitcast w/ pointercast.\n\nFixes #105439.\n\nAlso cc `@erikdesjardins,` looks like another place to cleanup as part of #105545", "tree": {"sha": "aae786a3a8b05ef98a08cdc75c6c82e969f4a122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae786a3a8b05ef98a08cdc75c6c82e969f4a122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58597717e20efb22b68605848f25090e6a5aea4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVzMuCRBK7hj4Ov3rIwAA3RcIAA08YuMLmrhX9tbmWRko6sa6\nE85Me8eVafNI0swH/4KAmFiWBaicRuGNtFd/gwIayepOxTe8mWQFqgmzzPOrfm40\nXUZ+qEZryBhQupY3yFJJrWdQ6QM4C5MfA9Myn3chisZNtXTiP3s43wia4YaRdErd\nDUKee6Ys/evTfTY7s3HCHM8t+xC2u7e83xqLycptYGBiWC3Cca3eyS3ZXMpS6zod\n5sYweXRYyhDSxlPWkvj36qFvSJaYeq4EojTrU+iH++laT//UEqjCsS8+Z2FffJ2u\n0bW4TQ/Fs7RddOtxigZ+IaCz7YweP9XBAwRlEhjchShuYttajEWAZe5aYgK8hws=\n=++jf\n-----END PGP SIGNATURE-----\n", "payload": "tree aae786a3a8b05ef98a08cdc75c6c82e969f4a122\nparent 34bee196cb85b5e7f45118a791360161c46cf000\nparent c7c042ad31766a6f70a2c850457f086cf6a03153\nauthor Yuki Okushi <jtitor@2k36.org> 1683436334 +0900\ncommitter GitHub <noreply@github.com> 1683436334 +0900\n\nRollup merge of #105583 - luqmana:bitcast-immediates, r=oli-obk\n\nOperand::extract_field: only cast llval if it's a pointer and replace bitcast w/ pointercast.\n\nFixes #105439.\n\nAlso cc `@erikdesjardins,` looks like another place to cleanup as part of #105545\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58597717e20efb22b68605848f25090e6a5aea4e", "html_url": "https://github.com/rust-lang/rust/commit/58597717e20efb22b68605848f25090e6a5aea4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58597717e20efb22b68605848f25090e6a5aea4e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bee196cb85b5e7f45118a791360161c46cf000", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bee196cb85b5e7f45118a791360161c46cf000", "html_url": "https://github.com/rust-lang/rust/commit/34bee196cb85b5e7f45118a791360161c46cf000"}, {"sha": "c7c042ad31766a6f70a2c850457f086cf6a03153", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c042ad31766a6f70a2c850457f086cf6a03153", "html_url": "https://github.com/rust-lang/rust/commit/c7c042ad31766a6f70a2c850457f086cf6a03153"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "9efbb34b515b6679ba83015e9c3ee01ce4619fa5", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/58597717e20efb22b68605848f25090e6a5aea4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58597717e20efb22b68605848f25090e6a5aea4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=58597717e20efb22b68605848f25090e6a5aea4e", "patch": "@@ -2,6 +2,7 @@ use super::place::PlaceRef;\n use super::{FunctionCx, LocalRef};\n \n use crate::base;\n+use crate::common::TypeKind;\n use crate::glue;\n use crate::traits::*;\n use crate::MemFlags;\n@@ -236,19 +237,47 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n         };\n \n         match (&mut val, field.abi) {\n-            (OperandValue::Immediate(llval), _) => {\n+            (\n+                OperandValue::Immediate(llval),\n+                Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. },\n+            ) => {\n                 // Bools in union fields needs to be truncated.\n                 *llval = bx.to_immediate(*llval, field);\n                 // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n-                *llval = bx.bitcast(*llval, bx.cx().immediate_backend_type(field));\n+                let ty = bx.cx().immediate_backend_type(field);\n+                if bx.type_kind(ty) == TypeKind::Pointer {\n+                    *llval = bx.pointercast(*llval, ty);\n+                }\n             }\n             (OperandValue::Pair(a, b), Abi::ScalarPair(a_abi, b_abi)) => {\n                 // Bools in union fields needs to be truncated.\n                 *a = bx.to_immediate_scalar(*a, a_abi);\n                 *b = bx.to_immediate_scalar(*b, b_abi);\n                 // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n-                *a = bx.bitcast(*a, bx.cx().scalar_pair_element_backend_type(field, 0, true));\n-                *b = bx.bitcast(*b, bx.cx().scalar_pair_element_backend_type(field, 1, true));\n+                let a_ty = bx.cx().scalar_pair_element_backend_type(field, 0, true);\n+                let b_ty = bx.cx().scalar_pair_element_backend_type(field, 1, true);\n+                if bx.type_kind(a_ty) == TypeKind::Pointer {\n+                    *a = bx.pointercast(*a, a_ty);\n+                }\n+                if bx.type_kind(b_ty) == TypeKind::Pointer {\n+                    *b = bx.pointercast(*b, b_ty);\n+                }\n+            }\n+            // Newtype vector of array, e.g. #[repr(simd)] struct S([i32; 4]);\n+            (OperandValue::Immediate(llval), Abi::Aggregate { sized: true }) => {\n+                assert!(matches!(self.layout.abi, Abi::Vector { .. }));\n+\n+                let llty = bx.cx().backend_type(self.layout);\n+                let llfield_ty = bx.cx().backend_type(field);\n+\n+                // Can't bitcast an aggregate, so round trip through memory.\n+                let lltemp = bx.alloca(llfield_ty, field.align.abi);\n+                let llptr = bx.pointercast(lltemp, bx.cx().type_ptr_to(llty));\n+                bx.store(*llval, llptr, field.align.abi);\n+                *llval = bx.load(llfield_ty, lltemp, field.align.abi);\n+            }\n+            (OperandValue::Immediate(_), Abi::Uninhabited | Abi::Aggregate { sized: false }) => {\n+                bug!()\n             }\n             (OperandValue::Pair(..), _) => bug!(),\n             (OperandValue::Ref(..), _) => bug!(),"}, {"sha": "35ca76e989b91f14781890c4e92e6f01059fa3ab", "filename": "tests/ui/simd/issue-105439.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/58597717e20efb22b68605848f25090e6a5aea4e/tests%2Fui%2Fsimd%2Fissue-105439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58597717e20efb22b68605848f25090e6a5aea4e/tests%2Fui%2Fsimd%2Fissue-105439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fissue-105439.rs?ref=58597717e20efb22b68605848f25090e6a5aea4e", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+// compile-flags: -O -Zverify-llvm-ir\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[allow(non_camel_case_types)]\n+#[derive(Clone, Copy)]\n+#[repr(simd)]\n+struct i32x4([i32; 4]);\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_add<T>(x: T, y: T) -> T;\n+}\n+\n+#[inline(always)]\n+fn to_array(a: i32x4) -> [i32; 4] {\n+    a.0\n+}\n+\n+fn main() {\n+    let a = i32x4([1, 2, 3, 4]);\n+    let b = unsafe { simd_add(a, a) };\n+    assert_eq!(to_array(b), [2, 4, 6, 8]);\n+}"}]}