{"sha": "fd4bef54abafe6d93ec3c87498de696da6ef5819", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNGJlZjU0YWJhZmU2ZDkzZWMzYzg3NDk4ZGU2OTZkYTZlZjU4MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-15T08:05:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-15T08:05:39Z"}, "message": "Auto merge of #43949 - GuillaumeGomez:compile_fail_stable, r=alexcrichton\n\nCompile fail stable\n\nSince #30726, we never made the `compile_fail` flag nor the error code check stable. I think it's time to change this fact.\n\nr? @alexcrichton", "tree": {"sha": "6965cad376707c599f31676722395bcc574b20ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6965cad376707c599f31676722395bcc574b20ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4bef54abafe6d93ec3c87498de696da6ef5819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4bef54abafe6d93ec3c87498de696da6ef5819", "html_url": "https://github.com/rust-lang/rust/commit/fd4bef54abafe6d93ec3c87498de696da6ef5819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4bef54abafe6d93ec3c87498de696da6ef5819/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86a7f7a78e96bd28468e165c2b223b3b6ecc11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86a7f7a78e96bd28468e165c2b223b3b6ecc11d", "html_url": "https://github.com/rust-lang/rust/commit/d86a7f7a78e96bd28468e165c2b223b3b6ecc11d"}, {"sha": "ebc195d292e959606e5bf01aa76a6b17ab4a1357", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc195d292e959606e5bf01aa76a6b17ab4a1357", "html_url": "https://github.com/rust-lang/rust/commit/ebc195d292e959606e5bf01aa76a6b17ab4a1357"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "eb3e6a9dd5067ee9c96acec3527499f795491f00", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd4bef54abafe6d93ec3c87498de696da6ef5819/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd4bef54abafe6d93ec3c87498de696da6ef5819/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=fd4bef54abafe6d93ec3c87498de696da6ef5819", "patch": "@@ -5,7 +5,7 @@ that your tests are up to date and working.\n \n The basic idea is this:\n \n-```rust,ignore\n+```ignore\n /// # Examples\n ///\n /// ```\n@@ -16,6 +16,19 @@ The basic idea is this:\n The triple backticks start and end code blocks. If this were in a file named `foo.rs`,\n running `rustdoc --test foo.rs` will extract this example, and then run it as a test.\n \n+Please note that by default, if no language is set for the block code, `rustdoc`\n+assumes it is `Rust` code. So the following:\n+\n+```rust\n+let x = 5;\n+```\n+\n+is strictly equivalent to:\n+\n+```\n+let x = 5;\n+```\n+\n There's some subtlety though! Read on for more details.\n \n ## Pre-processing examples\n@@ -106,23 +119,23 @@ our source code:\n ```text\n     First, we set `x` to five:\n \n-    ```rust\n+    ```\n     let x = 5;\n     # let y = 6;\n     # println!(\"{}\", x + y);\n     ```\n \n     Next, we set `y` to six:\n \n-    ```rust\n+    ```\n     # let x = 5;\n     let y = 6;\n     # println!(\"{}\", x + y);\n     ```\n \n     Finally, we print the sum of `x` and `y`:\n \n-    ```rust\n+    ```\n     # let x = 5;\n     # let y = 6;\n     println!(\"{}\", x + y);\n@@ -136,7 +149,7 @@ explanation.\n Another case where the use of `#` is handy is when you want to ignore\n error handling. Lets say you want the following,\n \n-```rust,ignore\n+```ignore\n /// use std::io;\n /// let mut input = String::new();\n /// io::stdin().read_line(&mut input)?;\n@@ -145,7 +158,7 @@ error handling. Lets say you want the following,\n The problem is that `?` returns a `Result<T, E>` and test functions\n don't return anything so this will give a mismatched types error.\n \n-```rust,ignore\n+```ignore\n /// A doc test using ?\n ///\n /// ```\n@@ -179,7 +192,7 @@ Here\u2019s an example of documenting a macro:\n /// # }\n /// ```\n ///\n-/// ```rust,should_panic\n+/// ```should_panic\n /// # #[macro_use] extern crate foo;\n /// # fn main() {\n /// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);\n@@ -224,7 +237,7 @@ only shows the part you care about.\n `should_panic` tells `rustdoc` that the code should compile correctly, but\n not actually pass as a test.\n \n-```rust\n+```text\n /// ```no_run\n /// loop {\n ///     println!(\"Hello, world\");\n@@ -233,6 +246,18 @@ not actually pass as a test.\n # fn foo() {}\n ```\n \n+`compile_fail` tells `rustdoc` that the compilation should fail. If it\n+compiles, then the test will fail. However please note that code failing\n+with the current Rust release may work in a future release, as new features\n+are added.\n+\n+```text\n+/// ```compile_fail\n+/// let x = 5;\n+/// x += 2; // shouldn't compile!\n+/// ```\n+```\n+\n The `no_run` attribute will compile your code, but not run it. This is\n important for examples such as \"Here's how to retrieve a web page,\"\n which you would want to ensure compiles, but might be run in a test"}, {"sha": "46b483325a26c356afeeab26a2f91b9b3acefec0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd4bef54abafe6d93ec3c87498de696da6ef5819/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4bef54abafe6d93ec3c87498de696da6ef5819/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=fd4bef54abafe6d93ec3c87498de696da6ef5819", "patch": "@@ -911,10 +911,8 @@ impl LangString {\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n-        let mut allow_compile_fail = false;\n         let mut allow_error_code_check = false;\n         if UnstableFeatures::from_environment().is_nightly_build() {\n-            allow_compile_fail = true;\n             allow_error_code_check = true;\n         }\n \n@@ -938,7 +936,7 @@ impl LangString {\n                     data.test_harness = true;\n                     seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                 }\n-                \"compile_fail\" if allow_compile_fail => {\n+                \"compile_fail\" => {\n                     data.compile_fail = true;\n                     seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     data.no_run = true;"}]}