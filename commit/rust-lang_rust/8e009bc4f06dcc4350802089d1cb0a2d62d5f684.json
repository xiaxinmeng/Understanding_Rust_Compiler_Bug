{"sha": "8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDA5YmM0ZjA2ZGNjNDM1MDgwMjA4OWQxY2IwYTJkNjJkNWY2ODQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T20:34:21Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T21:19:10Z"}, "message": "Use intra-doc-links in `core::ops::*`", "tree": {"sha": "1a693bd9f286f641860199e48625e7193d81ed71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a693bd9f286f641860199e48625e7193d81ed71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "html_url": "https://github.com/rust-lang/rust/commit/8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "url": "https://api.github.com/repos/rust-lang/rust/commits/332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "html_url": "https://github.com/rust-lang/rust/commit/332369110919ac27c8a0bc0b21bf9d2f9fd9829d"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "d6c097eee17bf96ff18540667972043d8b1e86c8", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -28,7 +28,6 @@\n /// [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/ch15-02-deref.html\n-/// [`DerefMut`]: trait.DerefMut.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n /// [method resolution]: ../../reference/expressions/method-call-expr.html\n@@ -125,7 +124,6 @@ impl<T: ?Sized> Deref for &mut T {\n /// [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/ch15-02-deref.html\n-/// [`Deref`]: trait.Deref.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n /// [method resolution]: ../../reference/expressions/method-call-expr.html"}, {"sha": "0824753db75803a5967d20f1e1b6f292c0287d1f", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -78,9 +78,9 @@\n ///\n /// In other words, if you tried to explicitly call `Drop::drop` in the above example, you'd get a compiler error.\n ///\n-/// If you'd like explicitly call the destructor of a value, [`std::mem::drop`] can be used instead.\n+/// If you'd like explicitly call the destructor of a value, [`mem::drop`] can be used instead.\n ///\n-/// [`std::mem::drop`]: ../../std/mem/fn.drop.html\n+/// [`mem::drop`]: crate::mem::drop\n ///\n /// ## Drop order\n ///\n@@ -133,15 +133,15 @@\n /// hard to predict when, and how often destructors will be executed. As such,\n /// these types cannot have destructors.\n ///\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`Copy`]: crate::marker::Copy\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n     /// Executes the destructor for this type.\n     ///\n     /// This method is called implicitly when the value goes out of scope,\n     /// and cannot be called explicitly (this is compiler error [E0040]).\n-    /// However, the [`std::mem::drop`] function in the prelude can be\n+    /// However, the [`mem::drop`] function in the prelude can be\n     /// used to call the argument's `Drop` implementation.\n     ///\n     /// When this method has been called, `self` has not yet been deallocated.\n@@ -156,12 +156,12 @@ pub trait Drop {\n     /// Note that even if this panics, the value is considered to be dropped;\n     /// you must not cause `drop` to be called again. This is normally automatically\n     /// handled by the compiler, but when using unsafe code, can sometimes occur\n-    /// unintentionally, particularly when using [`std::ptr::drop_in_place`].\n+    /// unintentionally, particularly when using [`ptr::drop_in_place`].\n     ///\n     /// [E0040]: ../../error-index.html#E0040\n-    /// [`panic!`]: ../macro.panic.html\n-    /// [`std::mem::drop`]: ../../std/mem/fn.drop.html\n-    /// [`std::ptr::drop_in_place`]: ../../std/ptr/fn.drop_in_place.html\n+    /// [`panic!`]: crate::panic!\n+    /// [`mem::drop`]: crate::mem::drop\n+    /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn drop(&mut self);\n }"}, {"sha": "bfdec43f7d80b3c211669655f1f54ae9f5ad6d48", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -28,8 +28,6 @@\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [`FnMut`]: trait.FnMut.html\n-/// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n@@ -99,8 +97,6 @@ pub trait Fn<Args>: FnMut<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [`Fn`]: trait.Fn.html\n-/// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n /// [nomicon]: ../../nomicon/hrtb.html\n ///\n@@ -180,8 +176,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n /// [book]: ../../book/ch13-01-closures.html\n-/// [`Fn`]: trait.Fn.html\n-/// [`FnMut`]: trait.FnMut.html\n /// [function pointers]: ../../std/primitive.fn.html\n /// [nomicon]: ../../nomicon/hrtb.html\n ///"}, {"sha": "9c2da00ae2f85d710ace302d7688c4ce93be0332", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -4,9 +4,7 @@\n /// but only when used as an immutable value. If a mutable value is requested,\n /// [`IndexMut`] is used instead. This allows nice things such as\n /// `let value = v[index]` if the type of `value` implements [`Copy`].\n-///\n-/// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`Copy`]: crate::marker::Copy\n ///\n /// # Examples\n ///\n@@ -76,8 +74,6 @@ pub trait Index<Idx: ?Sized> {\n /// an immutable value is requested, the [`Index`] trait is used instead. This\n /// allows nice things such as `v[index] = value`.\n ///\n-/// [`Index`]: ../../std/ops/trait.Index.html\n-///\n /// # Examples\n ///\n /// A very simple implementation of a `Balance` struct that has two sides, where"}, {"sha": "ddcea46a552bb17167160b7dc1271a57aaeba612", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -133,13 +133,7 @@\n //! // `consume_and_return_x` can no longer be invoked at this point\n //! ```\n //!\n-//! [`Fn`]: trait.Fn.html\n-//! [`FnMut`]: trait.FnMut.html\n-//! [`FnOnce`]: trait.FnOnce.html\n-//! [`Add`]: trait.Add.html\n-//! [`Sub`]: trait.Sub.html\n-//! [`Mul`]: trait.Mul.html\n-//! [`clone`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [`clone`]: crate::clone::Clone::clone\n //! [operator precedence]: ../../reference/expressions.html#expression-precedence\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5614c30b43e021c780eb9b388e515713c797d4df", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -35,9 +35,9 @@ use crate::hash::Hash;\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: ../iter/trait.Iterator.html\n-/// [`Iterator`]: ../iter/trait.IntoIterator.html\n-/// [slicing index]: ../slice/trait.SliceIndex.html\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n+/// [`Iterator`]: crate::iter::Iterator\n+/// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeFull\")]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n@@ -179,7 +179,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`Iterator`]: ../iter/trait.IntoIterator.html\n+/// [`Iterator`]: crate::iter::IntoIterator\n #[cfg_attr(not(bootstrap), lang = \"RangeFrom\")]\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n@@ -260,9 +260,9 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: ../iter/trait.Iterator.html\n-/// [`Iterator`]: ../iter/trait.IntoIterator.html\n-/// [slicing index]: ../slice/trait.SliceIndex.html\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n+/// [`Iterator`]: crate::iter::Iterator\n+/// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeTo\")]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n@@ -315,8 +315,8 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// iteration has finished are **unspecified** other than that [`.is_empty()`]\n /// will return `true` once no more values will be produced.\n ///\n-/// [fused]: ../iter/trait.FusedIterator.html\n-/// [`.is_empty()`]: #method.is_empty\n+/// [fused]: crate::iter::FusedIterator\n+/// [`.is_empty()`]: RangeInclusive::is_empty\n ///\n /// # Examples\n ///\n@@ -383,8 +383,8 @@ impl<Idx> RangeInclusive<Idx> {\n     /// Note: the value returned by this method is unspecified after the range\n     /// has been iterated to exhaustion.\n     ///\n-    /// [`end()`]: #method.end\n-    /// [`is_empty()`]: #method.is_empty\n+    /// [`end()`]: RangeInclusive::end\n+    /// [`is_empty()`]: RangeInclusive::is_empty\n     ///\n     /// # Examples\n     ///\n@@ -408,8 +408,8 @@ impl<Idx> RangeInclusive<Idx> {\n     /// Note: the value returned by this method is unspecified after the range\n     /// has been iterated to exhaustion.\n     ///\n-    /// [`start()`]: #method.start\n-    /// [`is_empty()`]: #method.is_empty\n+    /// [`start()`]: RangeInclusive::start\n+    /// [`is_empty()`]: RangeInclusive::is_empty\n     ///\n     /// # Examples\n     ///\n@@ -558,9 +558,9 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: ../iter/trait.Iterator.html\n-/// [`Iterator`]: ../iter/trait.IntoIterator.html\n-/// [slicing index]: ../slice/trait.SliceIndex.html\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n+/// [`Iterator`]: crate::iter::Iterator\n+/// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeToInclusive\")]\n #[doc(alias = \"..=\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "483362023b22c77bc5f340260804f825c2766080", "filename": "library/core/src/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e009bc4f06dcc4350802089d1cb0a2d62d5f684/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Funsize.rs?ref=8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "patch": "@@ -29,7 +29,7 @@ use crate::marker::Unsize;\n /// pointers. It is implemented automatically by the compiler.\n ///\n /// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n-/// [unsize]: ../marker/trait.Unsize.html\n+/// [unsize]: crate::marker::Unsize\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n #[lang = \"coerce_unsized\"]"}]}