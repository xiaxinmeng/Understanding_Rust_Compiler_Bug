{"sha": "e720df672dc88b2d6822582a644de977a889bcdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MjBkZjY3MmRjODhiMmQ2ODIyNTgyYTY0NGRlOTc3YTg4OWJjZGI=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-04-29T23:27:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-29T23:27:21Z"}, "message": "Rollup merge of #84590 - est31:array_into_iter, r=nikomatsakis\n\nPoint out that behavior might be switched on 2015 and 2018 too one day\n\nReword documentation to make it clear that behaviour can be switched on older editions too, one day in the future. It doesn't *have* to be switched, but I think it's good to have it as an option and re-evaluate it a few months/years down the line when e.g. the crates that showed up in crater were broken by different changes in the language already.\n\ncc #25725, #65819, #66145, #84147 , and https://github.com/rust-lang/rust/issues/84133#issuecomment-818005314", "tree": {"sha": "9e498cd7e454373d0ef9364dd9a709872193918b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e498cd7e454373d0ef9364dd9a709872193918b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e720df672dc88b2d6822582a644de977a889bcdb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgi0DaCRBK7hj4Ov3rIwAA6EoIAC8toUD5qI0XZxQ3vb0yZDsx\nQqtUjvhneoFD3UezJnSEYayxAMvjiPnhdDUf6RYjY97sBA1kRILqgolaZQoMS71J\ngbXTZDctEGxt+HnwuOMR0TiCAU/ekaluyDe1688Fx7vYoo7ijuiXoqBIz0KDxaY5\n0OGZgVkiSDiXtoz1PdZGQpMAU8aoa9NlY8qc7587YclbI35W6p86DoAxdssc58GQ\n+iGFfnIYKaj0yprPjzbBbsd2UQvpy3b8ss14ANfEZTEpiyXr1qcmoTIwVDkF3BR8\nhPd1Bwh+P7Kd84aqf0v9t4sdpCQQWniwczsLD0qPbblaLwMQCfvOw4rUXdHnw3c=\n=Eyoh\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e498cd7e454373d0ef9364dd9a709872193918b\nparent 2e586334122f266dd24ff02eee5b6b4beeac2f9b\nparent a3523363dbd6871266e7aa2fe59566cf337190f4\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1619738841 -0400\ncommitter GitHub <noreply@github.com> 1619738841 -0400\n\nRollup merge of #84590 - est31:array_into_iter, r=nikomatsakis\n\nPoint out that behavior might be switched on 2015 and 2018 too one day\n\nReword documentation to make it clear that behaviour can be switched on older editions too, one day in the future. It doesn't *have* to be switched, but I think it's good to have it as an option and re-evaluate it a few months/years down the line when e.g. the crates that showed up in crater were broken by different changes in the language already.\n\ncc #25725, #65819, #66145, #84147 , and https://github.com/rust-lang/rust/issues/84133#issuecomment-818005314\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e720df672dc88b2d6822582a644de977a889bcdb", "html_url": "https://github.com/rust-lang/rust/commit/e720df672dc88b2d6822582a644de977a889bcdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e720df672dc88b2d6822582a644de977a889bcdb/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e586334122f266dd24ff02eee5b6b4beeac2f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e586334122f266dd24ff02eee5b6b4beeac2f9b", "html_url": "https://github.com/rust-lang/rust/commit/2e586334122f266dd24ff02eee5b6b4beeac2f9b"}, {"sha": "a3523363dbd6871266e7aa2fe59566cf337190f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3523363dbd6871266e7aa2fe59566cf337190f4", "html_url": "https://github.com/rust-lang/rust/commit/a3523363dbd6871266e7aa2fe59566cf337190f4"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "cd6b0b2d7ee7add100c291b2cd365016fc69aef1", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e720df672dc88b2d6822582a644de977a889bcdb/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e720df672dc88b2d6822582a644de977a889bcdb/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=e720df672dc88b2d6822582a644de977a889bcdb", "patch": "@@ -553,8 +553,10 @@ mod prim_pointer {}\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement `IntoIterator` by value, so the method call\n-/// `array.into_iter()` auto-referenced into a slice iterator. That behavior is preserved in the\n-/// 2015 and 2018 editions of Rust for compatability, ignoring `IntoIterator` by value.\n+/// `array.into_iter()` auto-referenced into a slice iterator. Right now, the old behavior\n+/// is preserved in the 2015 and 2018 editions of Rust for compatibility, ignoring\n+/// `IntoIterator` by value. In the future, the behavior on the 2015 and 2018 edition\n+/// might be made consistent to the behavior of later editions.\n ///\n #[cfg_attr(bootstrap, doc = \"```rust,edition2018,ignore\")]\n #[cfg_attr(not(bootstrap), doc = \"```rust,edition2018\")]\n@@ -601,6 +603,49 @@ mod prim_pointer {}\n /// }\n /// ```\n ///\n+/// Future language versions might start treating the `array.into_iter()`\n+/// syntax on editions 2015 and 2018 the same as on edition 2021. So code using\n+/// those older editions should still be written with this change in mind, to\n+/// prevent breakage in the future. The safest way to accomplish this is to\n+/// avoid the `into_iter` syntax on those editions. If an edition update is not\n+/// viable/desired, there are multiple alternatives:\n+/// * use `iter`, equivalent to the old behavior, creating references\n+/// * use [`array::IntoIter`], equivalent to the post-2021 behavior (Rust 1.51+)\n+/// * replace `for ... in array.into_iter() {` with `for ... in array {`,\n+///   equivalent to the post-2021 behavior (Rust 1.53+)\n+///\n+#[cfg_attr(bootstrap, doc = \"```rust,edition2018,ignore\")]\n+#[cfg_attr(not(bootstrap), doc = \"```rust,edition2018\")]\n+/// use std::array::IntoIter;\n+///\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This iterates by reference:\n+/// for item in array.iter() {\n+///     let x: &i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in IntoIter::new(array) {\n+///     let x: i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in array {\n+///     let x: i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // IntoIter can also start a chain.\n+/// // This iterates by value:\n+/// for item in IntoIter::new(array).enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n /// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash"}]}