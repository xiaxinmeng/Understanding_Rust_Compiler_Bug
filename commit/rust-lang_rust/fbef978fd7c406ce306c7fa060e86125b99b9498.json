{"sha": "fbef978fd7c406ce306c7fa060e86125b99b9498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZWY5NzhmZDdjNDA2Y2UzMDZjN2ZhMDYwZTg2MTI1Yjk5Yjk0OTg=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-21T18:33:31Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-26T20:12:52Z"}, "message": "Pluralize E0087-E0090 messages based on number of parameters.", "tree": {"sha": "d621a986f424a32da388c1e1eaff978a962763c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d621a986f424a32da388c1e1eaff978a962763c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbef978fd7c406ce306c7fa060e86125b99b9498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbef978fd7c406ce306c7fa060e86125b99b9498", "html_url": "https://github.com/rust-lang/rust/commit/fbef978fd7c406ce306c7fa060e86125b99b9498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbef978fd7c406ce306c7fa060e86125b99b9498/comments", "author": null, "committer": null, "parents": [{"sha": "d8d4a6a842d0cd323e5eddff8ec1cbfcc66ac091", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d4a6a842d0cd323e5eddff8ec1cbfcc66ac091", "html_url": "https://github.com/rust-lang/rust/commit/d8d4a6a842d0cd323e5eddff8ec1cbfcc66ac091"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "af3d8894c74d1e6889222286769344366b39e246", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fbef978fd7c406ce306c7fa060e86125b99b9498/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbef978fd7c406ce306c7fa060e86125b99b9498/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fbef978fd7c406ce306c7fa060e86125b99b9498", "patch": "@@ -4688,9 +4688,12 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 } else if i == type_count {\n                     span_err!(fcx.tcx().sess, typ.span, E0087,\n                         \"too many type parameters provided: \\\n-                         expected at most {} parameter(s), \\\n-                         found {} parameter(s)\",\n-                         type_count, data.types.len());\n+                         expected at most {} parameter{}, \\\n+                         found {} parameter{}\",\n+                         type_count,\n+                         if type_count == 1 {\"\"} else {\"s\"},\n+                         data.types.len(),\n+                         if data.types.len() == 1 {\"\"} else {\"s\"});\n                     substs.types.truncate(space, 0);\n                     break;\n                 }\n@@ -4713,9 +4716,11 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 } else if i == region_count {\n                     span_err!(fcx.tcx().sess, lifetime.span, E0088,\n                         \"too many lifetime parameters provided: \\\n-                         expected {} parameter(s), found {} parameter(s)\",\n+                         expected {} parameter{}, found {} parameter{}\",\n                         region_count,\n-                        data.lifetimes.len());\n+                        if region_count == 1 {\"\"} else {\"s\"},\n+                        data.lifetimes.len(),\n+                        if data.lifetimes.len() == 1 {\"\"} else {\"s\"});\n                     substs.mut_regions().truncate(space, 0);\n                     break;\n                 }\n@@ -4805,9 +4810,12 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             let qualifier =\n                 if desired.len() != required_len { \"at least \" } else { \"\" };\n             span_err!(fcx.tcx().sess, span, E0089,\n-                \"too few type parameters provided: expected {}{} parameter(s) \\\n-                , found {} parameter(s)\",\n-                qualifier, required_len, provided_len);\n+                \"too few type parameters provided: expected {}{} parameter{}, \\\n+                 found {} parameter{}\",\n+                qualifier, required_len,\n+                if required_len == 1 {\"\"} else {\"s\"},\n+                provided_len,\n+                if provided_len == 1 {\"\"} else {\"s\"});\n             substs.types.replace(space, repeat(fcx.tcx().types.err).take(desired.len()).collect());\n             return;\n         }\n@@ -4858,9 +4866,12 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // Otherwise, too few were provided. Report an error and then\n         // use inference variables.\n         span_err!(fcx.tcx().sess, span, E0090,\n-            \"too few lifetime parameters provided: expected {} parameter(s), \\\n-             found {} parameter(s)\",\n-            desired.len(), provided_len);\n+            \"too few lifetime parameters provided: expected {} parameter{}, \\\n+             found {} parameter{}\",\n+            desired.len(),\n+            if desired.len() == 1 {\"\"} else {\"s\"},\n+            provided_len,\n+            if provided_len == 1 {\"\"} else {\"s\"});\n \n         substs.mut_regions().replace(\n             space,"}, {"sha": "2e8f9d42e789547cba427470d8a9fcf6bfd79140", "filename": "src/test/compile-fail/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbef978fd7c406ce306c7fa060e86125b99b9498/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbef978fd7c406ce306c7fa060e86125b99b9498/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs?ref=fbef978fd7c406ce306c7fa060e86125b99b9498", "patch": "@@ -12,5 +12,5 @@ use std::borrow::IntoCow;\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR too few type parameters provided: expected 1 parameter(s)\n+    //~^ ERROR too few type parameters provided: expected 1 parameter\n }"}]}