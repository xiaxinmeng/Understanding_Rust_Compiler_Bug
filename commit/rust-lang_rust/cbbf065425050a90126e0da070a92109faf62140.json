{"sha": "cbbf065425050a90126e0da070a92109faf62140", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYmYwNjU0MjUwNTBhOTAxMjZlMGRhMDcwYTkyMTA5ZmFmNjIxNDA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T09:25:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T09:25:48Z"}, "message": "Rollup merge of #71364 - Amanieu:zprofile_compiler_builtins, r=cramertj\n\nIgnore -Zprofile when building compiler_builtins\n\n#70846 made the `compiler_builtins` crate ignore the default codegen-units setting and instead always split each function into a different codegen unit.\n\nThis unfortunately breaks `-Zprofile` which requires a single codegen unit per crate (see #71283). You can notice this when building with `cargo -Zbuild-std` and `RUSTFLAGS` containing `-Zprofile`.\n\nThis PR works around this issue by just ignoring `-Zprofile` for the `compiler-builtins` crate.", "tree": {"sha": "54ddbd76c4c9dee23e88ceb16032d0b9c2c4d0a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ddbd76c4c9dee23e88ceb16032d0b9c2c4d0a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbf065425050a90126e0da070a92109faf62140", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepAIdCRBK7hj4Ov3rIwAAdHIIABi6YQ6tHMqLflHK3mHGhoig\nxOLrNEtketV2k2YWUz+xgc+NhsJawr9dnE2NOVtJB2Vof7fqhUXM++JQXKfhQY7L\nWYaHWPMy4ZMl9AOVigHWvwdtFZuLyLi00q0edCeINaZDi9ASqcMzxRK8P/ovXcgC\nTCPamGnr0kFDgGpyhKAGbleWxei/b4Eua9LBAO1Cyy4NmybMBAFOZe5ug2bWR8KH\nWaGAeRP8TovpDF/nks6NSKlhwo3RJGBMsfXadt+cn2xmBvII7niWAlQCQg+9WxRZ\nlDZ8jdlyvIVt1W0fGVGT8SsLJbTAPoIVlfWlIrBSadoh8oUnejyO8IOTMVZo6Sc=\n=Bpti\n-----END PGP SIGNATURE-----\n", "payload": "tree 54ddbd76c4c9dee23e88ceb16032d0b9c2c4d0a1\nparent 40008dcb494a00571123b7d59115068a200ebe34\nparent 3eb1c43720fdd3fb1c9284dde5368832fbfe52bc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587806748 +0200\ncommitter GitHub <noreply@github.com> 1587806748 +0200\n\nRollup merge of #71364 - Amanieu:zprofile_compiler_builtins, r=cramertj\n\nIgnore -Zprofile when building compiler_builtins\n\n#70846 made the `compiler_builtins` crate ignore the default codegen-units setting and instead always split each function into a different codegen unit.\n\nThis unfortunately breaks `-Zprofile` which requires a single codegen unit per crate (see #71283). You can notice this when building with `cargo -Zbuild-std` and `RUSTFLAGS` containing `-Zprofile`.\n\nThis PR works around this issue by just ignoring `-Zprofile` for the `compiler-builtins` crate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf065425050a90126e0da070a92109faf62140", "html_url": "https://github.com/rust-lang/rust/commit/cbbf065425050a90126e0da070a92109faf62140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf065425050a90126e0da070a92109faf62140/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40008dcb494a00571123b7d59115068a200ebe34", "url": "https://api.github.com/repos/rust-lang/rust/commits/40008dcb494a00571123b7d59115068a200ebe34", "html_url": "https://github.com/rust-lang/rust/commit/40008dcb494a00571123b7d59115068a200ebe34"}, {"sha": "3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "html_url": "https://github.com/rust-lang/rust/commit/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "37034141bb77d7475b8b4dc3a60a2d88c61f5bbb", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf065425050a90126e0da070a92109faf62140/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf065425050a90126e0da070a92109faf62140/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=cbbf065425050a90126e0da070a92109faf62140", "patch": "@@ -119,7 +119,12 @@ pub struct ModuleConfig {\n }\n \n impl ModuleConfig {\n-    fn new(kind: ModuleKind, sess: &Session, no_builtins: bool) -> ModuleConfig {\n+    fn new(\n+        kind: ModuleKind,\n+        sess: &Session,\n+        no_builtins: bool,\n+        is_compiler_builtins: bool,\n+    ) -> ModuleConfig {\n         // If it's a regular module, use `$regular`, otherwise use `$other`.\n         // `$regular` and `$other` are evaluated lazily.\n         macro_rules! if_regular {\n@@ -160,7 +165,10 @@ impl ModuleConfig {\n             passes: if_regular!(\n                 {\n                     let mut passes = sess.opts.cg.passes.clone();\n-                    if sess.opts.debugging_opts.profile {\n+                    // compiler_builtins overrides the codegen-units settings,\n+                    // which is incompatible with -Zprofile which requires that\n+                    // only a single codegen unit is used per crate.\n+                    if sess.opts.debugging_opts.profile && !is_compiler_builtins {\n                         passes.push(\"insert-gcov-profiling\".to_owned());\n                     }\n                     passes\n@@ -406,6 +414,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n+    let is_compiler_builtins =\n+        attr::contains_name(&tcx.hir().krate().item.attrs, sym::compiler_builtins);\n     let subsystem =\n         attr::first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n@@ -422,9 +432,12 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let linker_info = LinkerInfo::new(tcx);\n     let crate_info = CrateInfo::new(tcx);\n \n-    let regular_config = ModuleConfig::new(ModuleKind::Regular, sess, no_builtins);\n-    let metadata_config = ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins);\n-    let allocator_config = ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins);\n+    let regular_config =\n+        ModuleConfig::new(ModuleKind::Regular, sess, no_builtins, is_compiler_builtins);\n+    let metadata_config =\n+        ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins, is_compiler_builtins);\n+    let allocator_config =\n+        ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins, is_compiler_builtins);\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (codegen_worker_send, codegen_worker_receive) = channel();"}]}