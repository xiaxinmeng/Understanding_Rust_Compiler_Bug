{"sha": "c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmJmZWFkY2NlMDhhNGI4Y2UwMmI2NjkwNmVjYzU0MmNjOWRmMzk=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-24T15:08:23Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-24T15:57:07Z"}, "message": "Always align Waiter to 4 bytes", "tree": {"sha": "61e7aedb8a138a477f10312a6f853ac62e0e40ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e7aedb8a138a477f10312a6f853ac62e0e40ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "html_url": "https://github.com/rust-lang/rust/commit/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11a44ab6ce693629a03554b8b35d2218bca83cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11a44ab6ce693629a03554b8b35d2218bca83cf", "html_url": "https://github.com/rust-lang/rust/commit/c11a44ab6ce693629a03554b8b35d2218bca83cf"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "c135471e2f2ea3503869594b6ed8e44ead712025", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "patch": "@@ -171,6 +171,7 @@ const STATE_MASK: usize = 0x3;\n // `wait` would both hand out a mutable reference to its `Waiter` node, and keep\n // a shared reference to check `signaled`. Instead we hold shared references and\n // use interior mutability.\n+#[repr(align(4))] // Ensure the two lower bits are free to use as state bits.\n struct Waiter {\n     thread: Cell<Option<Thread>>,\n     signaled: AtomicBool,"}]}