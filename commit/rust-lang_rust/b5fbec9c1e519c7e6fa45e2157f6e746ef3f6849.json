{"sha": "b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmJlYzljMWU1MTljN2U2ZmE0NWUyMTU3ZjZlNzQ2ZWYzZjY4NDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T06:24:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T06:24:50Z"}, "message": "std: Rename `abort!` to `rtabort!` to match other macros", "tree": {"sha": "17733cc64b34dbc72789a494e2c3f67fa766a825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17733cc64b34dbc72789a494e2c3f67fa766a825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "html_url": "https://github.com/rust-lang/rust/commit/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021e81fbd311d93c94cbd40524ff53062fd7fe6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/021e81fbd311d93c94cbd40524ff53062fd7fe6e", "html_url": "https://github.com/rust-lang/rust/commit/021e81fbd311d93c94cbd40524ff53062fd7fe6e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "fed3ff461c44160db1bc8238c73e0f9d4a71ff75", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "patch": "@@ -33,13 +33,13 @@ macro_rules! rtdebug (\n macro_rules! rtassert (\n     ( $arg:expr ) => ( {\n         if !$arg {\n-            abort!(\"assertion failed: %s\", stringify!($arg));\n+            rtabort!(\"assertion failed: %s\", stringify!($arg));\n         }\n     } )\n )\n \n \n-macro_rules! abort(\n+macro_rules! rtabort(\n     ($( $msg:expr),+) => ( {\n         rtdebug!($($msg),+);\n         ::rt::util::abort();"}, {"sha": "b180cec98387ce928708821fa5336e9c1ad919eb", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "patch": "@@ -82,7 +82,7 @@ pub fn cleanup() {\n         let count_ptr = exchange_count_ptr();\n         let allocations = atomic_load(&*count_ptr);\n         if allocations != 0 {\n-            abort!(\"exchange heap not empty on exit\\\n+            rtabort!(\"exchange heap not empty on exit\\\n                     %i dangling allocations\", allocations);\n         }\n     }"}, {"sha": "6df1ffaa453f3482b256206cfcab077e5a9ee8bf", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "patch": "@@ -38,25 +38,25 @@ impl Local for Scheduler {\n         }\n         match res {\n             Some(r) => { r }\n-            None => abort!(\"function failed!\")\n+            None => rtabort!(\"function failed!\")\n         }\n     }\n     unsafe fn unsafe_borrow() -> *mut Scheduler { local_ptr::unsafe_borrow() }\n-    unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> { abort!(\"unimpl\") }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> { rtabort!(\"unimpl\") }\n }\n \n impl Local for Task {\n-    fn put(_value: ~Task) { abort!(\"unimpl\") }\n-    fn take() -> ~Task { abort!(\"unimpl\") }\n-    fn exists() -> bool { abort!(\"unimpl\") }\n+    fn put(_value: ~Task) { rtabort!(\"unimpl\") }\n+    fn take() -> ~Task { rtabort!(\"unimpl\") }\n+    fn exists() -> bool { rtabort!(\"unimpl\") }\n     fn borrow<T>(f: &fn(&mut Task) -> T) -> T {\n         do Local::borrow::<Scheduler, T> |sched| {\n             match sched.current_task {\n                 Some(~ref mut task) => {\n                     f(&mut *task.task)\n                 }\n                 None => {\n-                    abort!(\"no scheduler\")\n+                    rtabort!(\"no scheduler\")\n                 }\n             }\n         }\n@@ -69,7 +69,7 @@ impl Local for Task {\n             }\n             None => {\n                 // Don't fail. Infinite recursion\n-                abort!(\"no scheduler\")\n+                rtabort!(\"no scheduler\")\n             }\n         }\n     }\n@@ -84,16 +84,16 @@ impl Local for Task {\n \n // XXX: This formulation won't work once ~IoFactoryObject is a real trait pointer\n impl Local for IoFactoryObject {\n-    fn put(_value: ~IoFactoryObject) { abort!(\"unimpl\") }\n-    fn take() -> ~IoFactoryObject { abort!(\"unimpl\") }\n-    fn exists() -> bool { abort!(\"unimpl\") }\n-    fn borrow<T>(_f: &fn(&mut IoFactoryObject) -> T) -> T { abort!(\"unimpl\") }\n+    fn put(_value: ~IoFactoryObject) { rtabort!(\"unimpl\") }\n+    fn take() -> ~IoFactoryObject { rtabort!(\"unimpl\") }\n+    fn exists() -> bool { rtabort!(\"unimpl\") }\n+    fn borrow<T>(_f: &fn(&mut IoFactoryObject) -> T) -> T { rtabort!(\"unimpl\") }\n     unsafe fn unsafe_borrow() -> *mut IoFactoryObject {\n         let sched = Local::unsafe_borrow::<Scheduler>();\n         let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n         return io;\n     }\n-    unsafe fn try_unsafe_borrow() -> Option<*mut IoFactoryObject> { abort!(\"unimpl\") }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut IoFactoryObject> { rtabort!(\"unimpl\") }\n }\n \n #[cfg(test)]"}, {"sha": "cd7c5daa444d7998970024b414c145ed22491cab", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "patch": "@@ -109,7 +109,7 @@ pub unsafe fn unsafe_borrow<T>() -> *mut T {\n fn tls_key() -> tls::Key {\n     match maybe_tls_key() {\n         Some(key) => key,\n-        None => abort!(\"runtime tls key not initialized\")\n+        None => rtabort!(\"runtime tls key not initialized\")\n     }\n }\n "}, {"sha": "5c08298801212f8433a2343d411e6a29b25b1019", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "patch": "@@ -357,7 +357,7 @@ impl Scheduler {\n                 home_handle.send(PinnedTask(task));\n             }\n             AnySched => {\n-                abort!(\"error: cannot send anysched task home\");\n+                rtabort!(\"error: cannot send anysched task home\");\n             }\n         }\n     }\n@@ -422,10 +422,10 @@ impl Scheduler {\n                         return true;\n                     }\n                     4 => {\n-                        abort!(\"task home was None!\");\n+                        rtabort!(\"task home was None!\");\n                     }\n                     _ => {\n-                        abort!(\"literally, you should not be here\");\n+                        rtabort!(\"literally, you should not be here\");\n                     }\n                 }\n             }\n@@ -452,7 +452,7 @@ impl Scheduler {\n             dead_task.take().recycle(&mut sched.stack_pool);\n         }\n \n-        abort!(\"control reached end of task\");\n+        rtabort!(\"control reached end of task\");\n     }\n \n     pub fn schedule_task(~self, task: ~Coroutine) {\n@@ -672,7 +672,7 @@ impl Coroutine {\n                 Some(Sched(SchedHandle { sched_id: ref id, _ })) => {\n                     *id == sched.sched_id()\n                 }\n-                None => { abort!(\"error: homeless task!\"); }\n+                None => { rtabort!(\"error: homeless task!\"); }\n             }\n         }\n     }\n@@ -696,7 +696,7 @@ impl Coroutine {\n         match self.task.home {\n             Some(AnySched) => { false }\n             Some(Sched(_)) => { true }\n-            None => { abort!(\"error: homeless task!\");\n+            None => { rtabort!(\"error: homeless task!\");\n                     }\n         }\n     }\n@@ -710,7 +710,7 @@ impl Coroutine {\n             Some(Sched(SchedHandle { sched_id: ref id, _})) => {\n                 *id == sched.sched_id()\n             }\n-            None => { abort!(\"error: homeless task!\"); }\n+            None => { rtabort!(\"error: homeless task!\"); }\n         }\n     }\n "}]}