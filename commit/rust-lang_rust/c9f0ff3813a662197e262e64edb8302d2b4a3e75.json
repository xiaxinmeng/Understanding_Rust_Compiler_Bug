{"sha": "c9f0ff3813a662197e262e64edb8302d2b4a3e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjBmZjM4MTNhNjYyMTk3ZTI2MmU2NGVkYjgzMDJkMmI0YTNlNzU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-02T21:39:05Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-06T02:21:14Z"}, "message": "Reserve the keyword 'macro'", "tree": {"sha": "0533a040160c8def11c60c883bf9fcfea63399b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0533a040160c8def11c60c883bf9fcfea63399b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f0ff3813a662197e262e64edb8302d2b4a3e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f0ff3813a662197e262e64edb8302d2b4a3e75", "html_url": "https://github.com/rust-lang/rust/commit/c9f0ff3813a662197e262e64edb8302d2b4a3e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f0ff3813a662197e262e64edb8302d2b4a3e75/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa69cbde8279cd90457454c3b3f40a36e8a79dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa69cbde8279cd90457454c3b3f40a36e8a79dff", "html_url": "https://github.com/rust-lang/rust/commit/aa69cbde8279cd90457454c3b3f40a36e8a79dff"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "e2134cdebef74a57ebe52ab3543ca48763aea847", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -193,12 +193,12 @@ grammar as double-quoted strings. Other tokens have exact rules given.\n | break    | const    | continue | crate    | do      |\n | else     | enum     | extern   | false    | final   |\n | fn       | for      | if       | impl     | in      |\n-| let      | loop     | match    | mod      | move    |\n-| mut      | offsetof | override | priv     | pub     |\n-| pure     | ref      | return   | sizeof   | static  |\n-| self     | struct   | super    | true     | trait   |\n-| type     | typeof   | unsafe   | unsized  | use     |\n-| virtual  | where    | while    | yield    |\n+| let      | loop     | macro    | match    | mod     |\n+| move     | mut      | offsetof | override | priv    |\n+| pub      | pure     | ref      | return   | sizeof  |\n+| static   | self     | struct   | super    | true    |\n+| trait    | type     | typeof   | unsafe   | unsized |\n+| use      | virtual  | where    | while    | yield   |\n \n \n Each of these keywords has special meaning in its grammar, and all of them are"}, {"sha": "270459e8880f5aaa8a0351884f73bc1fb9e7df99", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -56,7 +56,7 @@ syn match rustMacroRepeatCount \".\\?[*+]\" contained\n syn match rustMacroVariable \"$\\w\\+\"\n \n \" Reserved (but not yet used) keywords {{{2\n-syn keyword   rustReservedKeyword alignof be do offsetof priv pure sizeof typeof unsized yield abstract final override\n+syn keyword   rustReservedKeyword alignof be do offsetof priv pure sizeof typeof unsized yield abstract final override macro\n \n \" Built-in types {{{2\n syn keyword   rustType        int uint float char bool u8 u16 u32 u64 f32"}, {"sha": "86bd74d3f85e5b2ca97769ca579130767638a09a", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -327,11 +327,11 @@ mod svh_visitor {\n \n     impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n \n-        fn visit_mac(&mut self, macro: &Mac) {\n+        fn visit_mac(&mut self, mac: &Mac) {\n             // macro invocations, namely macro_rules definitions,\n             // *can* appear as items, even in the expanded crate AST.\n \n-            if macro_name(macro).get() == \"macro_rules\" {\n+            if macro_name(mac).get() == \"macro_rules\" {\n                 // Pretty-printing definition to a string strips out\n                 // surface artifacts (currently), such as the span\n                 // information, yielding a content-based hash.\n@@ -341,22 +341,22 @@ mod svh_visitor {\n                 // trees might be faster. Implementing this is far\n                 // easier in short term.\n                 let macro_defn_as_string = pprust::to_string(|pp_state| {\n-                    pp_state.print_mac(macro, token::Paren)\n+                    pp_state.print_mac(mac, token::Paren)\n                 });\n                 macro_defn_as_string.hash(self.st);\n             } else {\n                 // It is not possible to observe any kind of macro\n                 // invocation at this stage except `macro_rules!`.\n                 panic!(\"reached macro somehow: {}\",\n                       pprust::to_string(|pp_state| {\n-                          pp_state.print_mac(macro, token::Paren)\n+                          pp_state.print_mac(mac, token::Paren)\n                       }));\n             }\n \n-            visit::walk_mac(self, macro);\n+            visit::walk_mac(self, mac);\n \n-            fn macro_name(macro: &Mac) -> token::InternedString {\n-                match &macro.node {\n+            fn macro_name(mac: &Mac) -> token::InternedString {\n+                match &mac.node {\n                     &MacInvocTT(ref path, ref _tts, ref _stx_ctxt) => {\n                         let s = path.segments[];\n                         assert_eq!(s.len(), 1);"}, {"sha": "61fd7d16ab7ddea401a618297fa3dc6e7cafc56d", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -484,8 +484,8 @@ impl fold::Folder for ReplaceBodyWithLoop {\n \n     // in general the pretty printer processes unexpanded code, so\n     // we override the default `fold_mac` method which panics.\n-    fn fold_mac(&mut self, _macro: ast::Mac) -> ast::Mac {\n-        fold::noop_fold_mac(_macro, self)\n+    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n+        fold::noop_fold_mac(mac, self)\n     }\n }\n "}, {"sha": "8decedf289af3aaadca6e21e775d35c704ed7ec7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -986,8 +986,8 @@ impl<'a> Folder for IdentRenamer<'a> {\n             ctxt: mtwt::apply_renames(self.renames, id.ctxt),\n         }\n     }\n-    fn fold_mac(&mut self, macro: ast::Mac) -> ast::Mac {\n-        fold::noop_fold_mac(macro, self)\n+    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n+        fold::noop_fold_mac(mac, self)\n     }\n }\n \n@@ -1023,8 +1023,8 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n             _ => unreachable!()\n         })\n     }\n-    fn fold_mac(&mut self, macro: ast::Mac) -> ast::Mac {\n-        fold::noop_fold_mac(macro, self)\n+    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n+        fold::noop_fold_mac(mac, self)\n     }\n }\n \n@@ -1286,8 +1286,8 @@ struct MacroExterminator<'a>{\n }\n \n impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n-    fn visit_mac(&mut self, macro: &ast::Mac) {\n-        self.sess.span_diagnostic.span_bug(macro.span,\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n+        self.sess.span_diagnostic.span_bug(mac.span,\n                                            \"macro exterminator: expected AST \\\n                                            with no macro invocations\");\n     }"}, {"sha": "28265b8e7c221b0a5849a4a8d13addb1f245d1e4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -165,8 +165,8 @@ struct MacroVisitor<'a> {\n }\n \n impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n-    fn visit_mac(&mut self, macro: &ast::Mac) {\n-        let ast::MacInvocTT(ref path, _, _) = macro.node;\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n+        let ast::MacInvocTT(ref path, _, _) = mac.node;\n         let id = path.segments.last().unwrap().identifier;\n \n         if id == token::str_to_ident(\"macro_rules\") {"}, {"sha": "aa4b04b28799a3499de06e5cee27342546c2b9c4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -194,13 +194,13 @@ pub trait Folder : Sized {\n         noop_fold_local(l, self)\n     }\n \n-    fn fold_mac(&mut self, _macro: Mac) -> Mac {\n+    fn fold_mac(&mut self, _mac: Mac) -> Mac {\n         panic!(\"fold_mac disabled by default\");\n         // NB: see note about macros above.\n         // if you really want a folder that\n         // works on macros, use this\n         // definition in your trait impl:\n-        // fold::noop_fold_mac(_macro, self)\n+        // fold::noop_fold_mac(_mac, self)\n     }\n \n     fn fold_explicit_self(&mut self, es: ExplicitSelf) -> ExplicitSelf {\n@@ -1487,8 +1487,8 @@ mod test {\n         fn fold_ident(&mut self, _: ast::Ident) -> ast::Ident {\n             token::str_to_ident(\"zz\")\n         }\n-        fn fold_mac(&mut self, macro: ast::Mac) -> ast::Mac {\n-            fold::noop_fold_mac(macro, self)\n+        fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n+            fold::noop_fold_mac(mac, self)\n         }\n     }\n "}, {"sha": "24011df7acb9b6a4d26c4fe3780faccf8ba4000c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -3881,13 +3881,13 @@ impl<'a> Parser<'a> {\n                                                                   &mut stmts,\n                                                                   &mut expr);\n                         }\n-                        StmtMac(macro, MacStmtWithoutBraces) => {\n+                        StmtMac(mac, MacStmtWithoutBraces) => {\n                             // statement macro without braces; might be an\n                             // expr depending on whether a semicolon follows\n                             match self.token {\n                                 token::Semi => {\n                                     stmts.push(P(Spanned {\n-                                        node: StmtMac(macro,\n+                                        node: StmtMac(mac,\n                                                       MacStmtWithSemicolon),\n                                         span: span,\n                                     }));\n@@ -3896,7 +3896,7 @@ impl<'a> Parser<'a> {\n                                 _ => {\n                                     let e = self.mk_mac_expr(span.lo,\n                                                              span.hi,\n-                                                             macro.and_then(|m| m.node));\n+                                                             mac.and_then(|m| m.node));\n                                     let e =\n                                         self.parse_dot_or_call_expr_with(e);\n                                     self.handle_expression_like_statement("}, {"sha": "094aacf3207fcb0a14be6207f51d79f21d623275", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -574,6 +574,7 @@ declare_special_idents_and_keywords! {\n         (56,                         Abstract,   \"abstract\");\n         (57,                         Final,      \"final\");\n         (58,                         Override,   \"override\");\n+        (59,                         Macro,      \"macro\");\n     }\n }\n "}, {"sha": "e7c9101ebc6570c159083e587b7e177fed8f809a", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -28,8 +28,8 @@ impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n         visit::walk_expr(self, e);\n     }\n \n-    fn visit_mac(&mut self, macro: &ast::Mac) {\n-        visit::walk_mac(self, macro);\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n+        visit::walk_mac(self, mac);\n     }\n }\n "}, {"sha": "888c0251d76524bba9551d7ab83f665dfc52c1f5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -115,13 +115,13 @@ pub trait Visitor<'v> : Sized {\n     fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) {\n         walk_explicit_self(self, es)\n     }\n-    fn visit_mac(&mut self, _macro: &'v Mac) {\n+    fn visit_mac(&mut self, _mac: &'v Mac) {\n         panic!(\"visit_mac disabled by default\");\n         // NB: see note about macros above.\n         // if you really want a visitor that\n         // works on macros, use this\n         // definition in your trait impl:\n-        // visit::walk_mac(self, _macro)\n+        // visit::walk_mac(self, _mac)\n     }\n     fn visit_path(&mut self, path: &'v Path, _id: ast::NodeId) {\n         walk_path(self, path)\n@@ -334,7 +334,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                 visitor.visit_trait_item(method)\n             }\n         }\n-        ItemMac(ref macro) => visitor.visit_mac(macro),\n+        ItemMac(ref mac) => visitor.visit_mac(mac),\n     }\n     for attr in item.attrs.iter() {\n         visitor.visit_attribute(attr);\n@@ -546,7 +546,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n                 visitor.visit_pat(&**postpattern)\n             }\n         }\n-        PatMac(ref macro) => visitor.visit_mac(macro),\n+        PatMac(ref mac) => visitor.visit_mac(mac),\n     }\n }\n \n@@ -746,7 +746,7 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n         StmtExpr(ref expression, _) | StmtSemi(ref expression, _) => {\n             visitor.visit_expr(&**expression)\n         }\n-        StmtMac(ref macro, _) => visitor.visit_mac(&**macro),\n+        StmtMac(ref mac, _) => visitor.visit_mac(&**mac),\n     }\n }\n \n@@ -893,7 +893,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprRet(ref optional_expression) => {\n             walk_expr_opt(visitor, optional_expression)\n         }\n-        ExprMac(ref macro) => visitor.visit_mac(macro),\n+        ExprMac(ref mac) => visitor.visit_mac(mac),\n         ExprParen(ref subexpression) => {\n             visitor.visit_expr(&**subexpression)\n         }"}, {"sha": "9d4ec9c176ccef34c2c657d47bc31b9f46321d1a", "filename": "src/test/compile-fail/macro-keyword.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Ftest%2Fcompile-fail%2Fmacro-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f0ff3813a662197e262e64edb8302d2b4a3e75/src%2Ftest%2Fcompile-fail%2Fmacro-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-keyword.rs?ref=c9f0ff3813a662197e262e64edb8302d2b4a3e75", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn macro() {  //~ ERROR `macro` is a reserved keyword\n+}\n+\n+pub fn main() {\n+}"}]}