{"sha": "17a393ee962f6772235c8e8e3ebe777a7dae45db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTM5M2VlOTYyZjY3NzIyMzVjOGU4ZTNlYmU3NzdhN2RhZTQ1ZGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-22T20:16:43Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-25T13:25:33Z"}, "message": "Bump rustfmt to most recently shipped", "tree": {"sha": "b1fbbbfde5c3a87f54f01102d07911ad26565444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1fbbbfde5c3a87f54f01102d07911ad26565444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a393ee962f6772235c8e8e3ebe777a7dae45db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a393ee962f6772235c8e8e3ebe777a7dae45db", "html_url": "https://github.com/rust-lang/rust/commit/17a393ee962f6772235c8e8e3ebe777a7dae45db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a393ee962f6772235c8e8e3ebe777a7dae45db/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93eed402adbe9e7a532995500d50716d52eefee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/93eed402adbe9e7a532995500d50716d52eefee9", "html_url": "https://github.com/rust-lang/rust/commit/93eed402adbe9e7a532995500d50716d52eefee9"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "bb68184c8dd7730a0322bfb1349c84209f01b5c1", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -70,7 +70,7 @@ macro_rules! step_identical_methods {\n         fn sub_one(&self) -> Self {\n             Sub::sub(*self, 1)\n         }\n-    }\n+    };\n }\n \n macro_rules! step_impl_unsigned {"}, {"sha": "85d848f54fbb776508c6bc96bcffb517dde0f966", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -336,7 +336,7 @@ macro_rules! r#try {\n         }\n     };\n     ($expr:expr,) => {\n-        $crate::try!($expr)\n+        $crate::r#try!($expr)\n     };\n }\n "}, {"sha": "eb7677e9345f26e6d10fe787b6c906cc67bf2318", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -273,14 +273,14 @@ impl !Send for Span {}\n impl !Sync for Span {}\n \n macro_rules! diagnostic_method {\n-    ($name:ident, $level:expr) => (\n+    ($name:ident, $level:expr) => {\n         /// Creates a new `Diagnostic` with the given `message` at the span\n         /// `self`.\n         #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n         pub fn $name<T: Into<String>>(self, message: T) -> Diagnostic {\n             Diagnostic::spanned(self, $level, message)\n         }\n-    )\n+    };\n }\n \n impl Span {"}, {"sha": "bacb5a345fca9a7c28f39aaf92b55209856ab1b2", "filename": "src/librustc_metadata/rmeta/table.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -42,10 +42,7 @@ macro_rules! fixed_size_encoding_byte_len_and_defaults {\n             // but slicing `[u8]` with `i * N..` is optimized worse, due to the\n             // possibility of `i * N` overflowing, than indexing `[[u8; N]]`.\n             let b = unsafe {\n-                std::slice::from_raw_parts(\n-                    b.as_ptr() as *const [u8; BYTE_LEN],\n-                    b.len() / BYTE_LEN,\n-                )\n+                std::slice::from_raw_parts(b.as_ptr() as *const [u8; BYTE_LEN], b.len() / BYTE_LEN)\n             };\n             b.get(i).map(|b| FixedSizeEncoding::from_bytes(b))\n         }\n@@ -61,7 +58,7 @@ macro_rules! fixed_size_encoding_byte_len_and_defaults {\n             };\n             self.write_to_bytes(&mut b[i]);\n         }\n-    }\n+    };\n }\n \n impl FixedSizeEncoding for u32 {"}, {"sha": "7565bdeb4096edbbe6503611f73b3e16d4949a00", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -2305,7 +2305,7 @@ macro_rules! read_primitive {\n                 value => Err(ExpectedError(\"Number\".to_owned(), value.to_string())),\n             }\n         }\n-    }\n+    };\n }\n \n impl crate::Decoder for Decoder {"}, {"sha": "5cd2a25b11768cbc6a00b3309fc052b703400e1a", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -149,23 +149,35 @@ pub trait AsciiExt {\n macro_rules! delegating_ascii_methods {\n     () => {\n         #[inline]\n-        fn is_ascii(&self) -> bool { self.is_ascii() }\n+        fn is_ascii(&self) -> bool {\n+            self.is_ascii()\n+        }\n \n         #[inline]\n-        fn to_ascii_uppercase(&self) -> Self::Owned { self.to_ascii_uppercase() }\n+        fn to_ascii_uppercase(&self) -> Self::Owned {\n+            self.to_ascii_uppercase()\n+        }\n \n         #[inline]\n-        fn to_ascii_lowercase(&self) -> Self::Owned { self.to_ascii_lowercase() }\n+        fn to_ascii_lowercase(&self) -> Self::Owned {\n+            self.to_ascii_lowercase()\n+        }\n \n         #[inline]\n-        fn eq_ignore_ascii_case(&self, o: &Self) -> bool { self.eq_ignore_ascii_case(o) }\n+        fn eq_ignore_ascii_case(&self, o: &Self) -> bool {\n+            self.eq_ignore_ascii_case(o)\n+        }\n \n         #[inline]\n-        fn make_ascii_uppercase(&mut self) { self.make_ascii_uppercase(); }\n+        fn make_ascii_uppercase(&mut self) {\n+            self.make_ascii_uppercase();\n+        }\n \n         #[inline]\n-        fn make_ascii_lowercase(&mut self) { self.make_ascii_lowercase(); }\n-    }\n+        fn make_ascii_lowercase(&mut self) {\n+            self.make_ascii_lowercase();\n+        }\n+    };\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "150d7a0943db03840e87d697cbfc0aa5baa36795", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/17a393ee962f6772235c8e8e3ebe777a7dae45db/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=17a393ee962f6772235c8e8e3ebe777a7dae45db", "patch": "@@ -20,7 +20,7 @@ cargo: beta\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-01-31\n+rustfmt: nightly-2020-04-22\n \n # When making a stable release the process currently looks like:\n #"}]}