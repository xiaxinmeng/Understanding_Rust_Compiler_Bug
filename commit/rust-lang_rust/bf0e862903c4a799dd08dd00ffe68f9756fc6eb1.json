{"sha": "bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "node_id": "C_kwDOAAsO6NoAKGJmMGU4NjI5MDNjNGE3OTlkZDA4ZGQwMGZmZTY4Zjk3NTZmYzZlYjE", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-04T19:49:18Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-09T16:10:58Z"}, "message": "rustdoc-json: Add some tests for `typealias` item", "tree": {"sha": "7e279fc690012df923a84ddb65a617aaf47d7463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e279fc690012df923a84ddb65a617aaf47d7463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "html_url": "https://github.com/rust-lang/rust/commit/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0bb0d4b9b072ebd2cb78c71f3ca3a706b5d12e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0bb0d4b9b072ebd2cb78c71f3ca3a706b5d12e", "html_url": "https://github.com/rust-lang/rust/commit/2d0bb0d4b9b072ebd2cb78c71f3ca3a706b5d12e"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "f53dc03f4b47fad5e7fed37d995578ac4c3dba72", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n+// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;"}, {"sha": "e0d1e9649a0aaafcd887a4e6cdc6aac9cbc4917a", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n+\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+\n+pub type GenericFn<'a> = fn(&'a i32) -> &'a i32;\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+pub type ForAll = for<'a> fn(&'a i32) -> &'a i32;"}, {"sha": "b6bb6dcc5fe2d7a8d18f96185d9b82ddc8e30e82", "filename": "src/test/rustdoc-json/type/generic_default.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e862903c4a799dd08dd00ffe68f9756fc6eb1/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs?ref=bf0e862903c4a799dd08dd00ffe68f9756fc6eb1", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+\n+// @set result = generic_default.json \"$.index[*][?(@.name=='Result')].id\"\n+pub enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+\n+// @set my_error = - \"$.index[*][?(@.name=='MyError')].id\"\n+pub struct MyError {}\n+\n+// @is    - \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n+pub type MyResult<T, E = MyError> = Result<T, E>;"}]}