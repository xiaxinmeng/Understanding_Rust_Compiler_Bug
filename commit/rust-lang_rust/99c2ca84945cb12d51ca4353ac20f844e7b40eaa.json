{"sha": "99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzJjYTg0OTQ1Y2IxMmQ1MWNhNDM1M2FjMjBmODQ0ZTdiNDBlYWE=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-02T19:42:27Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-02T19:42:27Z"}, "message": "add support of use alias semantic in definition #4202\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "fa21a4c951157891b8afc82526abb557a4287ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa21a4c951157891b8afc82526abb557a4287ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "html_url": "https://github.com/rust-lang/rust/commit/99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c2ca84945cb12d51ca4353ac20f844e7b40eaa/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4613497a7714c6cd87166e6525d764d75f8acefd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4613497a7714c6cd87166e6525d764d75f8acefd", "html_url": "https://github.com/rust-lang/rust/commit/4613497a7714c6cd87166e6525d764d75f8acefd"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "5b9b3eef89de15a041644e23cadd819509d5b7c6", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99c2ca84945cb12d51ca4353ac20f844e7b40eaa/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2ca84945cb12d51ca4353ac20f844e7b40eaa/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "patch": "@@ -249,9 +249,24 @@ mod tests {\n         check_goto(\n             \"\n             //- /lib.rs\n-            use foo as <|>bar;\n+            use foo as bar<|>;\n \n \n+            //- /foo/lib.rs\n+            #[macro_export]\n+            macro_rules! foo { () => { () } }\",\n+            \"SOURCE_FILE FileId(2) 0..50\",\n+            \"#[macro_export]\\nmacro_rules! foo { () => { () } }\\n\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_use_alias_foo_macro() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            use foo::foo as bar<|>;\n+\n             //- /foo/lib.rs\n             #[macro_export]\n             macro_rules! foo { () => { () } }"}, {"sha": "d5d06962bb568ee0b2d2884db1e7fbe358751182", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99c2ca84945cb12d51ca4353ac20f844e7b40eaa/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2ca84945cb12d51ca4353ac20f844e7b40eaa/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=99c2ca84945cb12d51ca4353ac20f844e7b40eaa", "patch": "@@ -11,7 +11,7 @@ use hir::{\n };\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, NameOwner},\n+    ast::{self, AstNode},\n     match_ast,\n };\n use test_utils::tested_by;\n@@ -115,15 +115,19 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n }\n \n fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<Definition> {\n-    println!(\"name : {} -- {:?}\", name, name);\n     let parent = name.syntax().parent()?;\n-    println!(\"parent : {} -- {:?}\", parent, parent);\n \n     match_ast! {\n         match parent {\n             ast::Alias(it) => {\n-                let def = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                tested_by!(goto_def_for_use_alias; force);\n+                let use_tree = it.syntax().ancestors().find_map(ast::UseTree::cast)?;\n+                let path = use_tree.path()?;\n+                let path_segment = path.segment()?;\n+                let name_ref = path_segment.name_ref()?;\n+                let name_ref_class = classify_name_ref(sema, &name_ref)?;\n+\n+                Some(name_ref_class.definition())\n             },\n             ast::BindPat(it) => {\n                 let local = sema.to_def(&it)?;"}]}