{"sha": "8d62576a9b47922ce58ac757e6e4944d45b223a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjI1NzZhOWI0NzkyMmNlNThhYzc1N2U2ZTQ5NDRkNDViMjIzYTY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-10T12:52:46Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-10T12:52:46Z"}, "message": "Fixed expr meta var after path colons in mbe", "tree": {"sha": "c550f0400ac772201f6c8a4e67c46f84be6865b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c550f0400ac772201f6c8a4e67c46f84be6865b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d62576a9b47922ce58ac757e6e4944d45b223a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d62576a9b47922ce58ac757e6e4944d45b223a6", "html_url": "https://github.com/rust-lang/rust/commit/8d62576a9b47922ce58ac757e6e4944d45b223a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d62576a9b47922ce58ac757e6e4944d45b223a6/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be02ac981de88869a9d6069b675a78a2e9e31f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/be02ac981de88869a9d6069b675a78a2e9e31f99", "html_url": "https://github.com/rust-lang/rust/commit/be02ac981de88869a9d6069b675a78a2e9e31f99"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "17ddd0a9c9a9ecfb44084513557b8cf97e3e04d9", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8d62576a9b47922ce58ac757e6e4944d45b223a6/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d62576a9b47922ce58ac757e6e4944d45b223a6/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=8d62576a9b47922ce58ac757e6e4944d45b223a6", "patch": "@@ -1,7 +1,11 @@\n use std::fmt::Write;\n \n use ::parser::FragmentKind;\n-use syntax::{ast, AstNode, NodeOrToken, SyntaxKind::IDENT, SyntaxNode, WalkEvent, T};\n+use syntax::{\n+    ast, AstNode, NodeOrToken,\n+    SyntaxKind::{ERROR, IDENT},\n+    SyntaxNode, WalkEvent, T,\n+};\n use test_utils::assert_eq_text;\n \n use super::*;\n@@ -1194,6 +1198,23 @@ macro_rules! foo {\n     );\n }\n \n+#[test]\n+fn test_expr_after_path_colons() {\n+    assert!(parse_macro(\n+        r#\"\n+macro_rules! m {\n+    ($k:expr) => {\n+            f(K::$k);\n+       }\n+}\n+\"#,\n+    )\n+    .expand_statements(r#\"m!(C(\"0\"))\"#)\n+    .descendants()\n+    .find(|token| token.kind() == ERROR)\n+    .is_some());\n+}\n+\n // The following tests are based on real world situations\n #[test]\n fn test_vec() {"}, {"sha": "81e26e009aa0b9b9d7975721580f2bc4a395f63a", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d62576a9b47922ce58ac757e6e4944d45b223a6/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d62576a9b47922ce58ac757e6e4944d45b223a6/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=8d62576a9b47922ce58ac757e6e4944d45b223a6", "patch": "@@ -7,7 +7,7 @@ use drop_bomb::DropBomb;\n use crate::{\n     event::Event,\n     ParseError,\n-    SyntaxKind::{self, EOF, ERROR, TOMBSTONE},\n+    SyntaxKind::{self, EOF, ERROR, L_DOLLAR, R_DOLLAR, TOMBSTONE},\n     TokenSet, TokenSource, T,\n };\n \n@@ -215,13 +215,23 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        self.err_recover(message, TokenSet::EMPTY);\n+        match self.current() {\n+            L_DOLLAR | R_DOLLAR => {\n+                let m = self.start();\n+                self.error(message);\n+                self.bump_any();\n+                m.complete(self, ERROR);\n+            }\n+            _ => {\n+                self.err_recover(message, TokenSet::EMPTY);\n+            }\n+        }\n     }\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_recover(&mut self, message: &str, recovery: TokenSet) {\n         match self.current() {\n-            T!['{'] | T!['}'] => {\n+            T!['{'] | T!['}'] | L_DOLLAR | R_DOLLAR => {\n                 self.error(message);\n                 return;\n             }"}]}