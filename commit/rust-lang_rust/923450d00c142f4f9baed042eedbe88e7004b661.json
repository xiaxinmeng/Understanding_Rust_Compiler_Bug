{"sha": "923450d00c142f4f9baed042eedbe88e7004b661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMzQ1MGQwMGMxNDJmNGY5YmFlZDA0MmVlZGJlODhlNzAwNGI2NjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-10T02:39:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-10T02:39:07Z"}, "message": "librustc: Fix ICE in core-text resulting from dynamic borrowing. rs=blocking-servo", "tree": {"sha": "82233b2a423643a19102ad448e20648957afaaa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82233b2a423643a19102ad448e20648957afaaa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/923450d00c142f4f9baed042eedbe88e7004b661", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/923450d00c142f4f9baed042eedbe88e7004b661", "html_url": "https://github.com/rust-lang/rust/commit/923450d00c142f4f9baed042eedbe88e7004b661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/923450d00c142f4f9baed042eedbe88e7004b661/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f547a671dcc64530f0cf07f39698d63174f37733", "url": "https://api.github.com/repos/rust-lang/rust/commits/f547a671dcc64530f0cf07f39698d63174f37733", "html_url": "https://github.com/rust-lang/rust/commit/f547a671dcc64530f0cf07f39698d63174f37733"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "7e5d255eae9a8e4c6eecf1b006c61ff12c21cd31", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/923450d00c142f4f9baed042eedbe88e7004b661/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923450d00c142f4f9baed042eedbe88e7004b661/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=923450d00c142f4f9baed042eedbe88e7004b661", "patch": "@@ -968,7 +968,10 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                 }\n \n                 fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n-                    -> ValueRef {\n+                           -> ValueRef {\n+                    // For external constants, we don't inline.\n+                    let extern_const_values =\n+                        &mut *bcx.ccx().extern_const_values;\n                     if did.crate == ast::local_crate {\n                         // The LLVM global has the type of its initializer,\n                         // which may not be equal to the enum's type for\n@@ -977,25 +980,24 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                                     base::get_item_val(bcx.ccx(), did.node),\n                                     T_ptr(type_of(bcx.ccx(), const_ty)))\n                     } else {\n-                        // For external constants, we don't inline.\n-                        match bcx.ccx().extern_const_values.find(&did) {\n-                            None => {\n-                                unsafe {\n-                                    let llty = type_of(bcx.ccx(), const_ty);\n-                                    let symbol = csearch::get_symbol(\n-                                        bcx.ccx().sess.cstore,\n-                                        did);\n-                                    let llval = llvm::LLVMAddGlobal(\n-                                        bcx.ccx().llmod,\n-                                        llty,\n-                                        transmute::<&u8,*i8>(&symbol[0]));\n-                                    bcx.ccx().extern_const_values.insert(\n-                                        did,\n-                                        llval);\n-                                    llval\n-                                }\n+                        match extern_const_values.find(&did) {\n+                            None => {}  // Continue.\n+                            Some(llval) => {\n+                                return *llval;\n                             }\n-                            Some(llval) => *llval\n+                        }\n+\n+                        unsafe {\n+                            let llty = type_of(bcx.ccx(), const_ty);\n+                            let symbol = csearch::get_symbol(\n+                                bcx.ccx().sess.cstore,\n+                                did);\n+                            let llval = llvm::LLVMAddGlobal(\n+                                bcx.ccx().llmod,\n+                                llty,\n+                                transmute::<&u8,*i8>(&symbol[0]));\n+                            extern_const_values.insert(did, llval);\n+                            llval\n                         }\n                     }\n                 }"}]}