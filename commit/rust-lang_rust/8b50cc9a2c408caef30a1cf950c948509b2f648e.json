{"sha": "8b50cc9a2c408caef30a1cf950c948509b2f648e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTBjYzlhMmM0MDhjYWVmMzBhMWNmOTUwYzk0ODUwOWIyZjY0OGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T00:53:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T00:53:17Z"}, "message": "Auto merge of #85769 - jhpratt:stabilize-const-transmute-union, r=RalfJung\n\nStabilize `const_fn_transmute`, `const_fn_union`\n\nThis PR stabilizes the `const_fn_transmute` and `const_fn_union` features. It _does not_ stabilize any methods (obviously aside from `transmute`) that are blocked on only these features.\n\nCloses #53605. Closes #51909.", "tree": {"sha": "44d9a23d35a8ffcd724fd58ece2027d67cb6b270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d9a23d35a8ffcd724fd58ece2027d67cb6b270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b50cc9a2c408caef30a1cf950c948509b2f648e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b50cc9a2c408caef30a1cf950c948509b2f648e", "html_url": "https://github.com/rust-lang/rust/commit/8b50cc9a2c408caef30a1cf950c948509b2f648e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b50cc9a2c408caef30a1cf950c948509b2f648e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2faabf579323f5252329264cc53ba9ff803429a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2faabf579323f5252329264cc53ba9ff803429a3", "html_url": "https://github.com/rust-lang/rust/commit/2faabf579323f5252329264cc53ba9ff803429a3"}, {"sha": "37af39957399db5a40923827fa54b3814d5e495d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37af39957399db5a40923827fa54b3814d5e495d", "html_url": "https://github.com/rust-lang/rust/commit/37af39957399db5a40923827fa54b3814d5e495d"}], "stats": {"total": 682, "additions": 147, "deletions": 535}, "files": [{"sha": "922e86e386b89c307c94c10120f7f08807e0b9e6", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -10,7 +10,7 @@\n )]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![feature(const_fn_transmute)]\n+#![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_zip)]\n #![feature(label_break_value)]"}, {"sha": "9ce5a149697f7783a292400962ee252d7017f517", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -290,6 +290,10 @@ declare_features! (\n     /// Allows bindings in the subpattern of a binding pattern.\n     /// For example, you can write `x @ Some(y)`.\n     (accepted, bindings_after_at, \"1.54.0\", Some(65490), None),\n+    /// Allows calling `transmute` in const fn\n+    (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n+    /// Allows accessing fields of unions inside `const` functions.\n+    (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "8ab61a5d200f701850408c162986ef869f0043f5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -413,9 +413,6 @@ declare_features! (\n     /// Allows inferring `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    /// Allows accessing fields of unions inside `const` functions.\n-    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n-\n     /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n@@ -565,9 +562,6 @@ declare_features! (\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (incomplete, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n-    /// Allows calling `transmute` in const fn\n-    (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n-\n     /// Allows `if let` guard in match arms.\n     (incomplete, if_let_guard, \"1.47.0\", Some(51114), None),\n "}, {"sha": "109da59aa43800afd70f0965e66239e24b0c33e2", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -748,12 +748,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n-            | ProjectionElem::Index(_) => {\n-                let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n-                if base_ty.is_union() {\n-                    self.check_op(ops::UnionAccess);\n-                }\n-            }\n+            | ProjectionElem::Index(_) => {}\n         }\n     }\n \n@@ -876,15 +871,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n \n-                // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n-                // within const fns. `transmute` is allowed in all other const contexts.\n-                // This won't really scale to more intrinsics or functions. Let's allow const\n-                // transmutes in const fn before we add more hacks to this.\n-                if is_intrinsic && tcx.item_name(callee) == sym::transmute {\n-                    self.check_op(ops::Transmute);\n-                    return;\n-                }\n-\n                 if !tcx.is_const_fn_raw(callee) {\n                     let mut permitted = false;\n "}, {"sha": "8de11fda7d75bb247c60e9c0db856aef153be6f2", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -501,51 +501,6 @@ impl NonConstOp for ThreadLocalAccess {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Transmute;\n-impl NonConstOp for Transmute {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_transmute)\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        let mut err = feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_transmute,\n-            span,\n-            &format!(\"`transmute` is not allowed in {}s\", ccx.const_kind()),\n-        );\n-        err.note(\"`transmute` is only allowed in constants and statics for now\");\n-        err\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct UnionAccess;\n-impl NonConstOp for UnionAccess {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Union accesses are stable in all contexts except `const fn`.\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_union)\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_union,\n-            span,\n-            \"unions in const fn are unstable\",\n-        )\n-    }\n-}\n-\n // Types that cannot appear in the signature or locals of a `const fn`.\n pub mod ty {\n     use super::*;"}, {"sha": "308a2e8d8398f4ba927addbbbc89da10687db7b6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -911,6 +911,9 @@ extern \"rust-intrinsic\" {\n     /// cause [undefined behavior][ub] with this function. `transmute` should be\n     /// the absolute last resort.\n     ///\n+    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n+    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n+    ///\n     /// The [nomicon](../../nomicon/transmutes.html) has additional\n     /// documentation.\n     ///\n@@ -1128,8 +1131,6 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n-    // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;"}, {"sha": "839be5a143f711cefc102671ac554f29c850fb71", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -86,7 +86,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n-#![feature(const_fn_union)]\n+#![cfg_attr(bootstrap, feature(const_fn_union))]\n #![feature(const_impl_trait)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n@@ -159,7 +159,7 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_fn_transmute)]\n+#![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(associated_type_bounds)]"}, {"sha": "68f593d97e9f74858c0194cb56f5726276802f07", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -2096,7 +2096,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2202,7 +2202,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "94accb4b4904e33bd2fe2c1c75c90fa99a60494b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1926,7 +1926,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2032,7 +2032,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "ce8050cee5b1b9f9d73fd361631a716a11424df0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -100,7 +100,7 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[rustc_allow_const_fn_unstable(const_fn_union)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_union))]\n     pub const fn len(&self) -> usize {\n         // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n         // As of this writing this causes a \"Const-stable functions can only call other"}, {"sha": "e67c0d6487c3e82e89f9d6ef1af6f4988c4420c2", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -157,7 +157,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n-#[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+#[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout."}, {"sha": "733473c867765441cf0dd52ecb453de48fbf51e0", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -231,7 +231,7 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n         unsafe { mem::transmute(self) }"}, {"sha": "f0e628c3d83630a26e6ecaffbba10b3ee5006434", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -246,7 +246,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_fn_transmute)]\n+#![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(const_io_structs)]\n #![feature(const_ip)]\n #![feature(const_ipv4)]"}, {"sha": "88309875978e294cb811c8063925fccbe5f4eaf8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1087,7 +1087,7 @@ impl Ipv6Addr {\n     ///\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1149,7 +1149,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n     ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n     /// ```\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "ae2e036312e88373f7f3804d191bed8932afc681", "filename": "src/test/mir-opt/issues/issue-75439.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-75439.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,7 +1,5 @@\n // EMIT_MIR issue_75439.foo.MatchBranchSimplification.diff\n \n-#![feature(const_fn_transmute)]\n-\n use std::mem::transmute;\n \n pub fn foo(bytes: [u8; 16]) -> Option<[u8; 4]> {\n@@ -16,5 +14,5 @@ pub fn foo(bytes: [u8; 16]) -> Option<[u8; 4]> {\n }\n \n fn main() {\n-  let _ = foo([0; 16]);\n+    let _ = foo([0; 16]);\n }"}, {"sha": "4d1b6bedd5fab76c99f58299c11412e665dae792", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: [u8; 16]) -> Option<[u8; 4]> {\n-      debug bytes => _1;                   // in scope 0 at $DIR/issue-75439.rs:7:12: 7:17\n-      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue-75439.rs:7:32: 7:47\n-      let _2: [u32; 4];                    // in scope 0 at $DIR/issue-75439.rs:9:9: 9:15\n-      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue-75439.rs:9:47: 9:52\n-      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue-75439.rs:12:14: 12:38\n-      let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:12:33: 12:35\n+      debug bytes => _1;                   // in scope 0 at $DIR/issue-75439.rs:5:12: 5:17\n+      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue-75439.rs:5:32: 5:47\n+      let _2: [u32; 4];                    // in scope 0 at $DIR/issue-75439.rs:7:9: 7:15\n+      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue-75439.rs:7:47: 7:52\n+      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue-75439.rs:10:14: 10:38\n+      let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:10:33: 10:35\n       scope 1 {\n-          debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:9:9: 9:15\n-          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n+          debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:7:9: 7:15\n+          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n           scope 3 {\n-              debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:11:27: 11:29\n+              debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n               scope 4 {\n               }\n           }\n@@ -21,67 +21,67 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-75439.rs:9:9: 9:15\n-          StorageLive(_3);                 // scope 2 at $DIR/issue-75439.rs:9:47: 9:52\n-          _3 = _1;                         // scope 2 at $DIR/issue-75439.rs:9:47: 9:52\n-          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:9:37: 9:53\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-75439.rs:7:9: 7:15\n+          StorageLive(_3);                 // scope 2 at $DIR/issue-75439.rs:7:47: 7:52\n+          _3 = _1;                         // scope 2 at $DIR/issue-75439.rs:7:47: 7:52\n+          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:7:37: 7:53\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:9:37: 9:46\n+                                           // + span: $DIR/issue-75439.rs:7:37: 7:46\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {std::intrinsics::transmute::<[u8; 16], [u32; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:9:52: 9:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:13: 11:14\n+          StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:7:52: 7:53\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:13: 9:14\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:16: 11:17\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:16: 9:17\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:11:19: 11:20\n+          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:19: 9:20\n       }\n   \n       bb4: {\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:14:9: 14:13\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n+          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n+          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }\n   \n       bb5: {\n-          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:12:14: 12:38\n-          StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:12:33: 12:35\n-          _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:12:33: 12:35\n-          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb8; // scope 4 at $DIR/issue-75439.rs:12:23: 12:36\n+          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:10:14: 10:38\n+          StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n+          _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n+          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb8; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:12:23: 12:32\n+                                           // + span: $DIR/issue-75439.rs:10:23: 10:32\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {std::intrinsics::transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }\n   \n       bb7: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:11:27: 11:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }\n   \n       bb8: {\n-          StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:12:35: 12:36\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:12:9: 12:39\n-          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:12:9: 12:39\n-          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:12:38: 12:39\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:13:5: 13:6\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:11:5: 15:6\n+          StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n+          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:10:38: 10:39\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:11:5: 11:6\n+          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }\n   \n       bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:16:1: 16:2\n-          return;                          // scope 0 at $DIR/issue-75439.rs:16:2: 16:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:14:1: 14:2\n+          return;                          // scope 0 at $DIR/issue-75439.rs:14:2: 14:2\n       }\n   }\n   "}, {"sha": "90a454c75a1cecf2823060c5db65492f05c71b80", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_fn_union)]\n #![allow(dead_code)]\n \n #[repr(C)]"}, {"sha": "26162aa622815d2b7b3acdad9201aa2ff91ff359", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -1,11 +0,0 @@\n-fn main() {}\n-\n-#[repr(C)]\n-union Foo {\n-    u: u32,\n-    i: i32,\n-}\n-\n-const unsafe fn foo(u: u32) -> i32 {\n-    Foo { u }.i //~ ERROR unions in const fn are unstable\n-}"}, {"sha": "bc3b6aa66531e4fffb15d61c93dc8571e5afcb2f", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: unions in const fn are unstable\n-  --> $DIR/feature-gate-const_fn_union.rs:10:5\n-   |\n-LL |     Foo { u }.i\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: see issue #51909 <https://github.com/rust-lang/rust/issues/51909> for more information\n-   = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ba0885532f113c4254b1b0b9d44b35a32ce23db8", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,6 +1,5 @@\n // issue-49296: Unsafe shenigans in constants can result in missing errors\n \n-#![feature(const_fn_union)]\n #![feature(const_fn_trait_bound)]\n \n const unsafe fn transmute<T: Copy, U: Copy>(t: T) -> U {"}, {"sha": "e87ef160b82787fb87fb4920ee6d7bbc0e3be3b8", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-49296.rs:19:16\n+  --> $DIR/issue-49296.rs:18:16\n    |\n LL | const X: u64 = *wat(42);\n    |                ^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed"}, {"sha": "1fc7af63765c878e5682a8c81edafbb56c959072", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn_union)]\n-\n #![allow(const_err)]\n \n #[repr(C)]"}, {"sha": "c6ca30e09bd3f1d4a6dc1b0ef3e4589d579adfd6", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail.rs:21:27\n+  --> $DIR/promoted_const_fn_fail.rs:19:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "c53424664f25845f702630d03d9c2aea70b50e8d", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn_union)]\n-\n #![deny(const_err)]\n \n #[repr(C)]"}, {"sha": "c6275a835e54430f0a2f20fd254e35bddaa65cb9", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:22:27\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:20:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "aa5ba53fb1bda5db6167a5f147832e1a5c44a22a", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:26:1\n+  --> $DIR/ref_to_int_match.rs:25:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc3, but expected initialized plain (non-pointer) bytes\n@@ -10,13 +10,13 @@ LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:8:14\n+  --> $DIR/ref_to_int_match.rs:7:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:8:14\n+  --> $DIR/ref_to_int_match.rs:7:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^"}, {"sha": "525a621750673f8fd037ba31fa045bf9984f23fc", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:26:1\n+  --> $DIR/ref_to_int_match.rs:25:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc3, but expected initialized plain (non-pointer) bytes\n@@ -10,13 +10,13 @@ LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:8:14\n+  --> $DIR/ref_to_int_match.rs:7:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:8:14\n+  --> $DIR/ref_to_int_match.rs:7:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^"}, {"sha": "b098adf8389f7170114582c81660df57c9f0d571", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,4 @@\n // stderr-per-bitwidth\n-#![feature(const_fn_union)]\n \n fn main() {\n     let n: Int = 40;"}, {"sha": "7dc1ec865af8a60a371ef1f4c1bd73d5aa0e2479", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,17 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n+   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n+   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:17:1\n+  --> $DIR/validate_uninhabited_zsts.rs:16:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n@@ -20,7 +20,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:17:35\n+  --> $DIR/validate_uninhabited_zsts.rs:16:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7dc1ec865af8a60a371ef1f4c1bd73d5aa0e2479", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,17 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n+   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n+   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:17:1\n+  --> $DIR/validate_uninhabited_zsts.rs:16:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n@@ -20,7 +20,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:17:35\n+  --> $DIR/validate_uninhabited_zsts.rs:16:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "346504845561dc5144198bd3ee3881b0ceef390d", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,4 @@\n // stderr-per-bitwidth\n-#![feature(const_fn_transmute)]\n \n const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }"}, {"sha": "b2fe73ae9302c22186ba7972eb5b104eb589a525", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,10 +1,10 @@\n // Test that we can't call random fns in a const fn or do other bad things.\n \n-#![feature(const_fn_transmute)]\n-\n use std::mem::transmute;\n \n-fn random() -> u32 { 0 }\n+fn random() -> u32 {\n+    0\n+}\n \n const fn sub(x: &u32) -> usize {\n     unsafe { transmute(x) }\n@@ -18,12 +18,12 @@ static Y: u32 = 0;\n \n const fn get_Y() -> u32 {\n     Y\n-        //~^ ERROR E0013\n+    //~^ ERROR E0013\n }\n \n const fn get_Y_addr() -> &'static u32 {\n     &Y\n-        //~^ ERROR E0013\n+    //~^ ERROR E0013\n }\n \n const fn get() -> u32 {"}, {"sha": "0a891781299764cd105b9a27281fb0f75ca760a1", "filename": "src/test/ui/consts/issue-69532.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fissue-69532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fissue-69532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69532.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_fn_transmute)]\n \n const fn make_nans() -> (f64, f64, f32, f32) {\n     let nan1: f64 = unsafe { std::mem::transmute(0x7FF0_0001_0000_0001u64) };"}, {"sha": "719a7a9172a9b89e47ca3476bd4cb8a96ad5c296", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -8,9 +8,3 @@ const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize\n //~^ dereferencing raw pointers in constant functions\n \n fn main() {}\n-\n-const unsafe fn no_union() {\n-    union Foo { x: (), y: () }\n-    Foo { x: () }.y\n-    //~^ unions in const fn\n-}"}, {"sha": "86ff4721c2165de3c282ceb008caa8d6cc8b28e2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -25,15 +25,6 @@ LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static u\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0658]: unions in const fn are unstable\n-  --> $DIR/min_const_fn_unsafe_bad.rs:14:5\n-   |\n-LL |     Foo { x: () }.y\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51909 <https://github.com/rust-lang/rust/issues/51909> for more information\n-   = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "99926532247ab1c1e5d7431feea83a4983c814be", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n // Test various things that we do not want to promote.\n #![allow(unconditional_panic, const_err)]\n-#![feature(const_fn_union)]\n \n use std::cell::Cell;\n "}, {"sha": "932109bd86dcfa6a957d09ef9a943ae358b5b970", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:9:50\n+  --> $DIR/promote-not.rs:8:50\n    |\n LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n    |                                        ----------^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n    |                                        using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:12:18\n+  --> $DIR/promote-not.rs:11:18\n    |\n LL |     let x = &mut [1,2,3];\n    |                  ^^^^^^^ creates a temporary which is freed while still in use\n@@ -19,7 +19,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:21:32\n+  --> $DIR/promote-not.rs:20:32\n    |\n LL |         let _x: &'static () = &foo();\n    |                 -----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -29,7 +29,7 @@ LL |     }\n    |     - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:29:29\n+  --> $DIR/promote-not.rs:28:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n    |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -39,7 +39,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:34:29\n+  --> $DIR/promote-not.rs:33:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n    |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -49,7 +49,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:40:29\n+  --> $DIR/promote-not.rs:39:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -59,7 +59,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:45:29\n+  --> $DIR/promote-not.rs:44:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -70,7 +70,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:46:29\n+  --> $DIR/promote-not.rs:45:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -81,7 +81,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:49:29\n+  --> $DIR/promote-not.rs:48:29\n    |\n LL |     let _val: &'static _ = &(1/0);\n    |               ----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -92,7 +92,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:50:29\n+  --> $DIR/promote-not.rs:49:29\n    |\n LL |     let _val: &'static _ = &(1/(1-1));\n    |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -103,7 +103,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:51:29\n+  --> $DIR/promote-not.rs:50:29\n    |\n LL |     let _val: &'static _ = &(1%0);\n    |               ----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -114,7 +114,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:52:29\n+  --> $DIR/promote-not.rs:51:29\n    |\n LL |     let _val: &'static _ = &(1%(1-1));\n    |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -125,7 +125,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:53:29\n+  --> $DIR/promote-not.rs:52:29\n    |\n LL |     let _val: &'static _ = &([1,2,3][4]+1);\n    |               ----------    ^^^^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "04efea0b230de6a8bb6f7db841aff78307549c15", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.mir.stderr", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -1,118 +0,0 @@\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n-   |\n-LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n-   |\n-LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n-   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n-   |\n-LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n-   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n-   |\n-LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n-   |\n-LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n-   |\n-LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n-   |\n-LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n-   |\n-LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n-   |\n-LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n-   |\n-LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n-   |\n-LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n-   |\n-LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error: aborting due to 12 previous errors\n-\n-Some errors have detailed explanations: E0133, E0658.\n-For more information about an error, try `rustc --explain E0133`."}, {"sha": "9a45dbc51d42aa5a6b80f7e01560fc366a8c37bc", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -1,41 +0,0 @@\n-// revisions: mir thir\n-// [thir]compile-flags: -Z thir-unsafeck\n-\n-use std::mem;\n-\n-#[repr(transparent)]\n-struct Foo(u32);\n-\n-const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-\n-const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n-//~^ ERROR `transmute`\n-\n-const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n-//~^ ERROR `transmute`\n-\n-const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n-//~^ ERROR `transmute`\n-\n-const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-\n-const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-\n-const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-\n-const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n-\n-const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n-\n-const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR `transmute`\n-//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n-\n-fn main() {}"}, {"sha": "df0de7a959030649f4536062140bb05726c6c7ec", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.thir.stderr", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -1,118 +0,0 @@\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n-   |\n-LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n-   |\n-LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n-   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n-   |\n-LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n-   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n-   |\n-LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n-   |\n-LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n-   |\n-LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n-   |\n-LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n-   |\n-LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n-   |\n-LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n-   |\n-LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n-   |\n-LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n-   |\n-   = note: consult the function's documentation for information on how to avoid undefined behavior\n-\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n-   |\n-LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n-\n-error: aborting due to 12 previous errors\n-\n-Some errors have detailed explanations: E0133, E0658.\n-For more information about an error, try `rustc --explain E0133`."}, {"sha": "4ec2426dfee7d81cb5a9381c665c201993929e97", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,14 +1,13 @@\n // Don't allow unstable features in stable functions without `allow_internal_unstable`.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n #![feature(staged_api)]\n-#![feature(const_transmute)]\n+#![feature(const_fn_floating_point_arithmetic)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const fn foo() -> i32 {\n-    unsafe { std::mem::transmute(4u32) } //~ ERROR `transmute`\n+pub const fn foo() -> f32 {\n+    1.0 + 1.0 //~ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n }\n \n fn main() {}"}, {"sha": "37d2ea6d2dc457314c8939637be3e1675a2b6f65", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,13 +1,17 @@\n-error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/internal-unstable-const.rs:11:14\n+error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n+  --> $DIR/internal-unstable-const.rs:10:5\n    |\n-LL |     unsafe { std::mem::transmute(4u32) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     1.0 + 1.0\n+   |     ^^^^^^^^^\n+   |\n+help: if it is not part of the public API, make this function unstably const\n+   |\n+LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+   |\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n+   |\n+LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n    |\n-   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n-   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n-   = note: `transmute` is only allowed in constants and statics for now\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "32ee4a739ea6ccd2d4e5804a38087f2d791a16b7", "filename": "src/test/ui/union/union-const-eval.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,9 +1,7 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(const_fn_union)]\n-\n union U {\n     a: usize,\n     b: usize,"}, {"sha": "bce4c81b78aa104709dd0a238f923a2f44de6451", "filename": "src/tools/clippy/tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![allow(dead_code)]\n \n extern crate core;"}, {"sha": "e31accb982af39e3d502d9cdb94f94d2633bccee", "filename": "src/tools/clippy/tests/ui/transmute.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,155 +1,155 @@\n error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:20:20\n+  --> $DIR/transmute.rs:19:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:24:23\n+  --> $DIR/transmute.rs:23:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:26:21\n+  --> $DIR/transmute.rs:25:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:28:23\n+  --> $DIR/transmute.rs:27:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:34:27\n+  --> $DIR/transmute.rs:33:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:36:27\n+  --> $DIR/transmute.rs:35:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:38:27\n+  --> $DIR/transmute.rs:37:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:40:27\n+  --> $DIR/transmute.rs:39:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:42:27\n+  --> $DIR/transmute.rs:41:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:44:31\n+  --> $DIR/transmute.rs:43:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:48:31\n+  --> $DIR/transmute.rs:47:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:63:24\n+  --> $DIR/transmute.rs:62:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:65:24\n+  --> $DIR/transmute.rs:64:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:67:31\n+  --> $DIR/transmute.rs:66:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:69:29\n+  --> $DIR/transmute.rs:68:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:74:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:76:28\n+  --> $DIR/transmute.rs:75:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:81:28\n+  --> $DIR/transmute.rs:80:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:86:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:88:31\n+  --> $DIR/transmute.rs:87:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:89:31\n+  --> $DIR/transmute.rs:88:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:90:31\n+  --> $DIR/transmute.rs:89:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:108:28\n+  --> $DIR/transmute.rs:107:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:109:32\n+  --> $DIR/transmute.rs:108:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`"}, {"sha": "806b2d77dc77de8945ae875a22db7b5e3fe4c3eb", "filename": "src/tools/clippy/tests/ui/transmute_float_to_int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![warn(clippy::transmute_float_to_int)]\n \n fn float_to_int() {"}, {"sha": "eb786bb39f95aa5c1f7110d053acf78cd96b340b", "filename": "src/tools/clippy/tests/ui/transmute_float_to_int.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_float_to_int.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,37 +1,37 @@\n error: transmute from a `f32` to a `u32`\n-  --> $DIR/transmute_float_to_int.rs:5:27\n+  --> $DIR/transmute_float_to_int.rs:4:27\n    |\n LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n    |\n    = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n \n error: transmute from a `f32` to a `i32`\n-  --> $DIR/transmute_float_to_int.rs:6:27\n+  --> $DIR/transmute_float_to_int.rs:5:27\n    |\n LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:7:27\n+  --> $DIR/transmute_float_to_int.rs:6:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n \n error: transmute from a `f64` to a `i64`\n-  --> $DIR/transmute_float_to_int.rs:8:27\n+  --> $DIR/transmute_float_to_int.rs:7:27\n    |\n LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:9:27\n+  --> $DIR/transmute_float_to_int.rs:8:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:10:27\n+  --> $DIR/transmute_float_to_int.rs:9:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`"}]}