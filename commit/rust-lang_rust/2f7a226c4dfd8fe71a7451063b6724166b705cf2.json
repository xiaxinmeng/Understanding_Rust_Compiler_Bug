{"sha": "2f7a226c4dfd8fe71a7451063b6724166b705cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmN2EyMjZjNGRmZDhmZTcxYTc0NTEwNjNiNjcyNDE2NmI3MDVjZjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T19:31:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T19:31:55Z"}, "message": "Rollup merge of #57540 - estebank:eval-more, r=petrochenkov\n\nModify some parser diagnostics to continue evaluating beyond the parser\n\nContinue evaluating further errors after parser errors on:\n - trailing type argument attribute\n - lifetime in incorrect location\n - incorrect binary literal\n - missing `for` in `impl Trait for Foo`\n - type argument in `where` clause\n - incorrect float literal\n - incorrect `..` in pattern\n - associated types\n - incorrect discriminator value variant error\n\nand others. All of these were found by making `continue-parse-after-error` `true` by default to identify errors that would need few changes. There are now only a handful of errors that have any change with `continue-parse-after-error` enabled.\n\nThese changes make it so `rust` _won't_ stop evaluation after finishing parsing, enabling type checking errors to be displayed on the existing code without having to fix the parse errors.\n\nEach commit has an individual diagnostic change with their corresponding tests.\n\nCC #48724.", "tree": {"sha": "379e29c97d1847840c5b054f516d3ea71e85a8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379e29c97d1847840c5b054f516d3ea71e85a8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7a226c4dfd8fe71a7451063b6724166b705cf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPOOrCRBK7hj4Ov3rIwAAdHIIAKLnybnWEbCreEBr0JkEBfxv\neRnOQpzFbSAW94VABqjCschhkAgi47CXP4JcANyEbf2sMBlaQznvt61XmoXT8Pc0\n+q5qsqJW2BC9wH/VeC4XxllqQ/OtGd3oLa1ZcNxq+R2dcdmxMFYjE1BtvqEnVvwN\nLRtbEFVGa94IU0eUfLKxEeKXxVmaGWeSB7YWjNGym/iMkMm/4XKt68cfba0WMzeF\nfNhNoaf08kaJ8xj7ow9dvQXCr7V+ydBfiXjA7x0bxhX2J1JwQ8c2Wc+54jfSoHFn\nuIIvq4s2eyt/CZC6KTUvDiy3mVgbVo/KFM/vXVT2tmNJ+ogymQ2DWpjW/8WBjJc=\n=ipKD\n-----END PGP SIGNATURE-----\n", "payload": "tree 379e29c97d1847840c5b054f516d3ea71e85a8da\nparent 816e31b1c608626f1a67387676f85544f3da843d\nparent 28ea03e11477032a29b30284487d6d73e181ecaf\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547494315 +0100\ncommitter GitHub <noreply@github.com> 1547494315 +0100\n\nRollup merge of #57540 - estebank:eval-more, r=petrochenkov\n\nModify some parser diagnostics to continue evaluating beyond the parser\n\nContinue evaluating further errors after parser errors on:\n - trailing type argument attribute\n - lifetime in incorrect location\n - incorrect binary literal\n - missing `for` in `impl Trait for Foo`\n - type argument in `where` clause\n - incorrect float literal\n - incorrect `..` in pattern\n - associated types\n - incorrect discriminator value variant error\n\nand others. All of these were found by making `continue-parse-after-error` `true` by default to identify errors that would need few changes. There are now only a handful of errors that have any change with `continue-parse-after-error` enabled.\n\nThese changes make it so `rust` _won't_ stop evaluation after finishing parsing, enabling type checking errors to be displayed on the existing code without having to fix the parse errors.\n\nEach commit has an individual diagnostic change with their corresponding tests.\n\nCC #48724.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a226c4dfd8fe71a7451063b6724166b705cf2", "html_url": "https://github.com/rust-lang/rust/commit/2f7a226c4dfd8fe71a7451063b6724166b705cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a226c4dfd8fe71a7451063b6724166b705cf2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816e31b1c608626f1a67387676f85544f3da843d", "url": "https://api.github.com/repos/rust-lang/rust/commits/816e31b1c608626f1a67387676f85544f3da843d", "html_url": "https://github.com/rust-lang/rust/commit/816e31b1c608626f1a67387676f85544f3da843d"}, {"sha": "28ea03e11477032a29b30284487d6d73e181ecaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ea03e11477032a29b30284487d6d73e181ecaf", "html_url": "https://github.com/rust-lang/rust/commit/28ea03e11477032a29b30284487d6d73e181ecaf"}], "stats": {"total": 485, "additions": 344, "deletions": 141}, "files": [{"sha": "0e1c3b4b61f3a86f6793811abe6360da20855821", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -299,7 +299,7 @@ impl<'a> StringReader<'a> {\n \n     /// Report a lexical error with a given span.\n     fn err_span(&self, sp: Span, m: &str) {\n-        self.sess.span_diagnostic.span_err(sp, m)\n+        self.sess.span_diagnostic.struct_span_err(sp, m).emit();\n     }\n \n "}, {"sha": "ea205530ca5ccb2dfdc8c35752203cd5e26cfcbb", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -520,6 +520,7 @@ fn filtered_float_lit(data: Symbol, suffix: Option<Symbol>, diag: Option<(Span,\n                 } else {\n                     let msg = format!(\"invalid suffix `{}` for float literal\", suf);\n                     diag.struct_span_err(span, &msg)\n+                        .span_label(span, format!(\"invalid suffix `{}`\", suf))\n                         .help(\"valid suffixes are `f32` and `f64`\")\n                         .emit();\n                 }\n@@ -673,7 +674,11 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                 _ => None,\n             };\n             if let Some(err) = err {\n-                err!(diag, |span, diag| diag.span_err(span, err));\n+                err!(diag, |span, diag| {\n+                    diag.struct_span_err(span, err)\n+                        .span_label(span, \"not supported\")\n+                        .emit();\n+                });\n             }\n             return filtered_float_lit(Symbol::intern(s), Some(suf), diag)\n         }\n@@ -712,6 +717,7 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                     } else {\n                         let msg = format!(\"invalid suffix `{}` for numeric literal\", suf);\n                         diag.struct_span_err(span, &msg)\n+                            .span_label(span, format!(\"invalid suffix `{}`\", suf))\n                             .help(\"the suffix must be one of the integral types \\\n                                    (`u32`, `isize`, etc)\")\n                             .emit();"}, {"sha": "06ba3bbd40263575e8774a8532d7806a6656476b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 114, "deletions": 29, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1012,7 +1012,10 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &format!(\"{} with a suffix is invalid\", kind));\n+                let msg = format!(\"{} with a suffix is invalid\", kind);\n+                self.struct_span_err(sp, &msg)\n+                    .span_label(sp, msg)\n+                    .emit();\n             }\n         }\n     }\n@@ -1768,9 +1771,11 @@ impl<'a> Parser<'a> {\n             Mutability::Immutable\n         } else {\n             let span = self.prev_span;\n-            self.span_err(span,\n-                          \"expected mut or const in raw pointer type (use \\\n-                           `*mut T` or `*const T` as appropriate)\");\n+            let msg = \"expected mut or const in raw pointer type\";\n+            self.struct_span_err(span, msg)\n+                .span_label(span, msg)\n+                .help(\"use `*mut T` or `*const T` as appropriate\")\n+                .emit();\n             Mutability::Immutable\n         };\n         let t = self.parse_ty_no_plus()?;\n@@ -3815,8 +3820,12 @@ impl<'a> Parser<'a> {\n                     ddpos = Some(fields.len());\n                 } else {\n                     // Emit a friendly error, ignore `..` and continue parsing\n-                    self.span_err(self.prev_span,\n-                                  \"`..` can only be used once per tuple or tuple struct pattern\");\n+                    self.struct_span_err(\n+                        self.prev_span,\n+                        \"`..` can only be used once per tuple or tuple struct pattern\",\n+                    )\n+                        .span_label(self.prev_span, \"can only be used once per pattern\")\n+                        .emit();\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n                 fields.push(self.parse_pat(None)?);\n@@ -3832,7 +3841,10 @@ impl<'a> Parser<'a> {\n \n         if ddpos == Some(fields.len()) && trailing_comma {\n             // `..` needs to be followed by `)` or `, pat`, `..,)` is disallowed.\n-            self.span_err(self.prev_span, \"trailing comma is not permitted after `..`\");\n+            let msg = \"trailing comma is not permitted after `..`\";\n+            self.struct_span_err(self.prev_span, msg)\n+                .span_label(self.prev_span, msg)\n+                .emit();\n         }\n \n         Ok((fields, ddpos, trailing_comma))\n@@ -5256,8 +5268,12 @@ impl<'a> Parser<'a> {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n                     let param_kind = if seen_ty_param.is_some() { \"type\" } else { \"lifetime\" };\n-                    self.span_err(attrs[0].span,\n-                        &format!(\"trailing attribute after {} parameters\", param_kind));\n+                    self.struct_span_err(\n+                        attrs[0].span,\n+                        &format!(\"trailing attribute after {} parameters\", param_kind),\n+                    )\n+                    .span_label(attrs[0].span, \"attributes must go before parameters\")\n+                    .emit();\n                 }\n                 break\n             }\n@@ -5315,39 +5331,62 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n-    fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n+    fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n+        let mut first_type_or_binding_span: Option<Span> = None;\n+        let mut bad_lifetime_pos = vec![];\n+        let mut last_comma_span = None;\n+        let mut suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n-                    self.span_err(self.prev_span,\n-                        \"lifetime parameters must be declared prior to type parameters\");\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_lifetime_pos.push(self.prev_span);\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n+                        suggestions.push((remove_sp, String::new()));\n+                        suggestions.push((\n+                            first_type_or_binding_span.unwrap().shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n+                    }\n                 }\n             } else if self.check_ident() && self.look_ahead(1, |t| t == &token::Eq) {\n                 // Parse associated type binding.\n                 let lo = self.span;\n                 let ident = self.parse_ident()?;\n                 self.bump();\n                 let ty = self.parse_ty()?;\n+                let span = lo.to(self.prev_span);\n                 bindings.push(TypeBinding {\n                     id: ast::DUMMY_NODE_ID,\n                     ident,\n                     ty,\n-                    span: lo.to(self.prev_span),\n+                    span,\n                 });\n                 seen_binding = true;\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(span);\n+                }\n             } else if self.check_type() {\n                 // Parse type argument.\n                 let ty_param = self.parse_ty()?;\n                 if seen_binding {\n-                    self.span_err(ty_param.span,\n-                        \"type parameters must be declared prior to associated type bindings\");\n+                    self.struct_span_err(\n+                        ty_param.span,\n+                        \"type parameters must be declared prior to associated type bindings\"\n+                    )\n+                        .span_label(\n+                            ty_param.span,\n+                            \"must be declared prior to associated type bindings\",\n+                        )\n+                        .emit();\n+                }\n+                if first_type_or_binding_span.is_none() {\n+                    first_type_or_binding_span = Some(ty_param.span);\n                 }\n                 args.push(GenericArg::Type(ty_param));\n                 seen_type = true;\n@@ -5357,7 +5396,29 @@ impl<'a> Parser<'a> {\n \n             if !self.eat(&token::Comma) {\n                 break\n+            } else {\n+                last_comma_span = Some(self.prev_span);\n+            }\n+        }\n+        if !bad_lifetime_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_lifetime_pos.clone(),\n+                \"lifetime parameters must be declared prior to type parameters\"\n+            );\n+            for sp in &bad_lifetime_pos {\n+                err.span_label(*sp, \"must be declared prior to type parameters\");\n+            }\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    &format!(\n+                        \"move the lifetime parameter{} prior to the first type parameter\",\n+                        if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n+                    ),\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n             }\n+            err.emit();\n         }\n         Ok((args, bindings))\n     }\n@@ -5386,8 +5447,12 @@ impl<'a> Parser<'a> {\n         // change we parse those generics now, but report an error.\n         if self.choose_generics_over_qpath() {\n             let generics = self.parse_generics()?;\n-            self.span_err(generics.span,\n-                          \"generic parameters on `where` clauses are reserved for future use\");\n+            self.struct_span_err(\n+                generics.span,\n+                \"generic parameters on `where` clauses are reserved for future use\",\n+            )\n+                .span_label(generics.span, \"currently unsupported\")\n+                .emit();\n         }\n \n         loop {\n@@ -5587,15 +5652,20 @@ impl<'a> Parser<'a> {\n                 // *mut self\n                 // *not_self\n                 // Emit special error for `self` cases.\n+                let msg = \"cannot pass `self` by raw pointer\";\n                 (if isolated_self(self, 1) {\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_mutability()) &&\n                           isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else {\n                     return Ok(None);\n@@ -5932,7 +6002,10 @@ impl<'a> Parser<'a> {\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n             if unsafety != Unsafety::Normal {\n-                self.span_err(self.prev_span, \"trait aliases cannot be unsafe\");\n+                let msg = \"trait aliases cannot be unsafe\";\n+                self.struct_span_err(self.prev_span, msg)\n+                    .span_label(self.prev_span, msg)\n+                    .emit();\n             }\n             Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n         } else {\n@@ -6048,7 +6121,13 @@ impl<'a> Parser<'a> {\n             Some(ty_second) => {\n                 // impl Trait for Type\n                 if !has_for {\n-                    self.span_err(missing_for_span, \"missing `for` in a trait impl\");\n+                    self.struct_span_err(missing_for_span, \"missing `for` in a trait impl\")\n+                        .span_suggestion_short_with_applicability(\n+                            missing_for_span,\n+                            \"add `for` here\",\n+                            \" for \".to_string(),\n+                            Applicability::MachineApplicable,\n+                        ).emit();\n                 }\n \n                 let ty_first = ty_first.into_inner();\n@@ -6939,7 +7018,7 @@ impl<'a> Parser<'a> {\n     fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<'a, EnumDef> {\n         let mut variants = Vec::new();\n         let mut all_nullary = true;\n-        let mut any_disr = None;\n+        let mut any_disr = vec![];\n         while self.token != token::CloseDelim(token::Brace) {\n             let variant_attrs = self.parse_outer_attributes()?;\n             let vlo = self.span;\n@@ -6961,7 +7040,9 @@ impl<'a> Parser<'a> {\n                     id: ast::DUMMY_NODE_ID,\n                     value: self.parse_expr()?,\n                 });\n-                any_disr = disr_expr.as_ref().map(|c| c.value.span);\n+                if let Some(sp) = disr_expr.as_ref().map(|c| c.value.span) {\n+                    any_disr.push(sp);\n+                }\n                 struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n             } else {\n                 struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n@@ -6978,11 +7059,15 @@ impl<'a> Parser<'a> {\n             if !self.eat(&token::Comma) { break; }\n         }\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        match any_disr {\n-            Some(disr_span) if !all_nullary =>\n-                self.span_err(disr_span,\n-                    \"discriminator values can only be used with a field-less enum\"),\n-            _ => ()\n+        if !any_disr.is_empty() && !all_nullary {\n+            let mut err =self.struct_span_err(\n+                any_disr.clone(),\n+                \"discriminator values can only be used with a field-less enum\",\n+            );\n+            for sp in any_disr {\n+                err.span_label(sp, \"only valid in field-less enums\");\n+            }\n+            err.emit();\n         }\n \n         Ok(ast::EnumDef { variants })"}, {"sha": "c4c0cee5ccc31fb938a9cb4d3a9b38d289cb0988", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,7 +2,7 @@ error: trailing attribute after lifetime parameters\n   --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:25\n    |\n LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n-   |                         ^^^^^^^\n+   |                         ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "9099d74ce1be9e846a9d49b4ad192a8b3cceb970", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,7 +2,7 @@ error: trailing attribute after type parameters\n   --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:35\n    |\n LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n-   |                                   ^^^^^^^\n+   |                                   ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "e9f908d479f649ac7efbbe98d37f306773336732", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -5,12 +5,8 @@\n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n fn hof_lt<Q>(_: Q)\n-    where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+    where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n     //~^ ERROR trailing attribute after lifetime parameters\n-{\n+{}\n \n-}\n-\n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "452f0ea5e1753406aa2ebaa7e6a2561e7039fe01", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,8 @@\n error: trailing attribute after lifetime parameters\n-  --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:38\n+  --> $DIR/attrs-with-no-formal-in-generics-3.rs:8:44\n    |\n-LL |     where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n-   |                                      ^^^^^^^\n+LL |     where Q: for <#[allow(unused)] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+   |                                            ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "c54b72a3585d11726fa62712179f1a36cede3e63", "filename": "src/test/ui/old-suffixes-are-really-forbidden.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fold-suffixes-are-really-forbidden.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,15 +2,15 @@ error: invalid suffix `is` for numeric literal\n   --> $DIR/old-suffixes-are-really-forbidden.rs:2:13\n    |\n LL |     let a = 1_is; //~ ERROR invalid suffix\n-   |             ^^^^\n+   |             ^^^^ invalid suffix `is`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `us` for numeric literal\n   --> $DIR/old-suffixes-are-really-forbidden.rs:3:13\n    |\n LL |     let b = 2_us; //~ ERROR invalid suffix\n-   |             ^^^^\n+   |             ^^^^ invalid suffix `us`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n "}, {"sha": "608c5fda2482aa490a6a71ff008299f5ca3bfce2", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,49 +2,49 @@ error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:5:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:9:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     \"\"suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     b\"\"suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     r#\"\"#suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:16:5\n    |\n LL |     br#\"\"#suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: char literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     'a'suffix; //~ ERROR char literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ char literal with a suffix is invalid\n \n error: byte literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ byte literal with a suffix is invalid\n \n error: invalid width `1024` for integer literal\n   --> $DIR/bad-lit-suffixes.rs:20:5\n@@ -82,31 +82,31 @@ error: invalid suffix `suffix` for numeric literal\n   --> $DIR/bad-lit-suffixes.rs:25:5\n    |\n LL |     1234suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for numeric literal\n   --> $DIR/bad-lit-suffixes.rs:26:5\n    |\n LL |     0b101suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for float literal\n   --> $DIR/bad-lit-suffixes.rs:27:5\n    |\n LL |     1.0suffix; //~ ERROR invalid suffix `suffix` for float literal\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n error: invalid suffix `suffix` for float literal\n   --> $DIR/bad-lit-suffixes.rs:28:5\n    |\n LL |     1.0e10suffix; //~ ERROR invalid suffix `suffix` for float literal\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n "}, {"sha": "59e5e0c5d31db6fa0b91d199bc9387febfce7b54", "filename": "src/test/ui/parser/bad-pointer-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,5 +1,5 @@\n fn foo(_: *()) {\n-    //~^ expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+    //~^ ERROR expected mut or const in raw pointer type\n }\n \n fn main() {}"}, {"sha": "e18c220affe6ebd2947cdef1d5cf5189aef3e153", "filename": "src/test/ui/parser/bad-pointer-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,10 @@\n-error: expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+error: expected mut or const in raw pointer type\n   --> $DIR/bad-pointer-type.rs:1:11\n    |\n LL | fn foo(_: *()) {\n-   |           ^\n+   |           ^ expected mut or const in raw pointer type\n+   |\n+   = help: use `*mut T` or `*const T` as appropriate\n \n error: aborting due to previous error\n "}, {"sha": "353f5e21ee64192992aa66cb8935e36a435db7a8", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,13 +2,13 @@ error: missing `for` in a trait impl\n   --> $DIR/impl-parsing.rs:6:11\n    |\n LL | impl Trait Type {} //~ ERROR missing `for` in a trait impl\n-   |           ^\n+   |           ^ help: add `for` here\n \n error: missing `for` in a trait impl\n   --> $DIR/impl-parsing.rs:7:11\n    |\n LL | impl Trait .. {} //~ ERROR missing `for` in a trait impl\n-   |           ^\n+   |           ^ help: add `for` here\n \n error: expected a trait, found type\n   --> $DIR/impl-parsing.rs:8:6"}, {"sha": "17b9b766b21816f75d23d2d2c0698e35f1253ea1", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,6 +1,17 @@\n-fn main() {\n-    (0..4)\n-    .map(|x| x * 2)\n-    .collect::<Vec<'a, usize, 'b>>()\n-    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+// can't run rustfix because it doesn't handle multipart suggestions correctly\n+// compile-flags: -Zborrowck=mir\n+// we need the above to avoid ast borrowck failure in recovered code\n+\n+struct S<'a, T> {\n+    a: &'a T,\n+    b: &'a T,\n }\n+\n+fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n+    let _x = (*start..*end)\n+        .map(|x| S { a: start, b: end })\n+        .collect::<Vec<S<_, 'a>>>();\n+        //~^ ERROR lifetime parameters must be declared prior to type parameters\n+}\n+\n+fn main() {}"}, {"sha": "2a7364915949efd3dbbeb3569b9f404543b929dd", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,12 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-fncall.rs:4:31\n+  --> $DIR/issue-14303-fncall.rs:13:29\n    |\n-LL |     .collect::<Vec<'a, usize, 'b>>()\n-   |                               ^^\n+LL |         .collect::<Vec<S<_, 'a>>>();\n+   |                             ^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL |         .collect::<Vec<S<'a, _>>>();\n+   |                          ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "a08c89f3437b4be1c97fd7dc65d26077f1fdf808", "filename": "src/test/ui/parser/issue-14303-path.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,4 +1,13 @@\n-fn bar<'a, T>(x: mymodule::X<'a, T, 'b, 'c>) {}\n+mod foo {\n+    pub struct X<'a, 'b, 'c, T> {\n+        a: &'a str,\n+        b: &'b str,\n+        c: &'c str,\n+        t: T,\n+    }\n+}\n+\n+fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "fb4fb32e11e50021d11fdf0841ec59a09d1ac0a1", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,14 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-14303-path.rs:1:37\n+  --> $DIR/issue-14303-path.rs:10:40\n    |\n-LL | fn bar<'a, T>(x: mymodule::X<'a, T, 'b, 'c>) {}\n-   |                                     ^^\n+LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n+   |                                        ^^  ^^ must be declared prior to type parameters\n+   |                                        |\n+   |                                        must be declared prior to type parameters\n+help: move the lifetime parameters prior to the first type parameter\n+   |\n+LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, 'b, 'c, T>) {}\n+   |                                     ^^^ ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "04cd43d0b10714af5d02205711dbf05ea34b29e8", "filename": "src/test/ui/parser/issue-17383.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,7 @@\n enum X {\n-    A =\n-        b'a' //~ ERROR discriminator values can only be used with a field-less enum\n-    ,\n-    B(isize)\n+    A = 3,\n+    //~^ ERROR discriminator values can only be used with a field-less enum\n+    B(usize)\n }\n \n fn main() {}"}, {"sha": "57caa3372a629dc076a17a7cc51f0e015c4f54ef", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,8 @@\n error: discriminator values can only be used with a field-less enum\n-  --> $DIR/issue-17383.rs:3:9\n+  --> $DIR/issue-17383.rs:2:9\n    |\n-LL |         b'a' //~ ERROR discriminator values can only be used with a field-less enum\n-   |         ^^^^\n+LL |     A = 3,\n+   |         ^ only valid in field-less enums\n \n error: aborting due to previous error\n "}, {"sha": "3c34b0d8febbcc3193074819cdec00a39f57b6d5", "filename": "src/test/ui/parser/issue-1802-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,4 +1,7 @@\n-// error-pattern:no valid digits found for number\n+fn log(a: i32, b: i32) {}\n+\n fn main() {\n+    let error = 42;\n     log(error, 0b);\n+    //~^ ERROR no valid digits found for number\n }"}, {"sha": "b7d003df56b71ea11e69ea5c0b256dbb00310559", "filename": "src/test/ui/parser/issue-1802-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,5 +1,5 @@\n error: no valid digits found for number\n-  --> $DIR/issue-1802-1.rs:3:16\n+  --> $DIR/issue-1802-1.rs:5:16\n    |\n LL |     log(error, 0b);\n    |                ^^"}, {"sha": "3c34b0d8febbcc3193074819cdec00a39f57b6d5", "filename": "src/test/ui/parser/issue-1802-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,4 +1,7 @@\n-// error-pattern:no valid digits found for number\n+fn log(a: i32, b: i32) {}\n+\n fn main() {\n-    log(error, 0b_usize);\n+    let error = 42;\n+    log(error, 0b);\n+    //~^ ERROR no valid digits found for number\n }"}, {"sha": "8491dd07cb788aad2e3b7d983be0400b4b78b41a", "filename": "src/test/ui/parser/issue-1802-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,8 @@\n error: no valid digits found for number\n-  --> $DIR/issue-1802-2.rs:3:16\n+  --> $DIR/issue-1802-2.rs:5:16\n    |\n-LL |     log(error, 0b_usize);\n-   |                ^^^\n+LL |     log(error, 0b);\n+   |                ^^\n \n error: aborting due to previous error\n "}, {"sha": "d619688e10183d03ca870456e1f1cb783d3b18c9", "filename": "src/test/ui/parser/issue-27255.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-27255.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,3 +1,10 @@\n-impl A .. {} //~ ERROR\n+trait A {}\n+\n+impl A .. {}\n+//~^ ERROR missing `for` in a trait impl\n+//~| ERROR `impl Trait for .. {}` is an obsolete syntax\n+\n+impl A      usize {}\n+//~^ ERROR missing `for` in a trait impl\n \n fn main() {}"}, {"sha": "391a23556c4e07fcd600814950b9b328f9719cc8", "filename": "src/test/ui/parser/issue-27255.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-27255.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,22 @@\n error: missing `for` in a trait impl\n-  --> $DIR/issue-27255.rs:1:7\n+  --> $DIR/issue-27255.rs:3:7\n    |\n-LL | impl A .. {} //~ ERROR\n-   |       ^\n+LL | impl A .. {}\n+   |       ^ help: add `for` here\n \n-error: aborting due to previous error\n+error: missing `for` in a trait impl\n+  --> $DIR/issue-27255.rs:7:7\n+   |\n+LL | impl A      usize {}\n+   |       ^^^^^^ help: add `for` here\n+\n+error: `impl Trait for .. {}` is an obsolete syntax\n+  --> $DIR/issue-27255.rs:3:1\n+   |\n+LL | impl A .. {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: use `auto trait Trait {}` instead\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "a889513eaee520b84ae590e2ee69c6da0b8f9085", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,7 +2,7 @@ error: type parameters must be declared prior to associated type bindings\n   --> $DIR/issue-32214.rs:5:34\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n-   |                                  ^\n+   |                                  ^ must be declared prior to associated type bindings\n \n error: aborting due to previous error\n "}, {"sha": "1fa23b8b73c9e3e941ecca75dda1167695d77fba", "filename": "src/test/ui/parser/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -110,7 +110,7 @@ error: octal float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:5:5\n    |\n LL |     0o2f32; //~ ERROR: octal float literal is not supported\n-   |     ^^^^^^\n+   |     ^^^^^^ not supported\n \n error: int literal is too large\n   --> $DIR/lex-bad-numeric-literals.rs:16:5\n@@ -128,13 +128,13 @@ error: octal float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:23:5\n    |\n LL |     0o123f64; //~ ERROR: octal float literal is not supported\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ not supported\n \n error: binary float literal is not supported\n   --> $DIR/lex-bad-numeric-literals.rs:25:5\n    |\n LL |     0b101f64; //~ ERROR: binary float literal is not supported\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ not supported\n \n error: aborting due to 23 previous errors\n "}, {"sha": "a42d2cbc442f0c89b6bed838cd662825cc84ddbc", "filename": "src/test/ui/parser/no-binary-float-literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,7 +1,8 @@\n-// error-pattern:binary float literal is not supported\n-\n fn main() {\n     0b101010f64;\n+    //~^ ERROR binary float literal is not supported\n     0b101.010;\n+    //~^ ERROR binary float literal is not supported\n     0b101p4f64;\n+    //~^ ERROR invalid suffix `p4f64` for numeric literal\n }"}, {"sha": "21f415bcfb0003b22a24dbf8684d7cfdb53489c1", "filename": "src/test/ui/parser/no-binary-float-literal.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-binary-float-literal.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,22 @@\n error: binary float literal is not supported\n-  --> $DIR/no-binary-float-literal.rs:5:5\n+  --> $DIR/no-binary-float-literal.rs:4:5\n    |\n LL |     0b101.010;\n    |     ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: binary float literal is not supported\n+  --> $DIR/no-binary-float-literal.rs:2:5\n+   |\n+LL |     0b101010f64;\n+   |     ^^^^^^^^^^^ not supported\n+\n+error: invalid suffix `p4f64` for numeric literal\n+  --> $DIR/no-binary-float-literal.rs:6:5\n+   |\n+LL |     0b101p4f64;\n+   |     ^^^^^^^^^^ invalid suffix `p4f64`\n+   |\n+   = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "bf11dee08338e91184dbdc198b44c48c11417dc5", "filename": "src/test/ui/parser/no-hex-float-literal.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,7 +1,9 @@\n-// error-pattern:hexadecimal float literal is not supported\n-\n fn main() {\n     0xABC.Df;\n+    //~^ ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     0x567.89;\n+    //~^ ERROR hexadecimal float literal is not supported\n     0xDEAD.BEEFp-2f;\n+    //~^ ERROR invalid suffix `f` for float literal\n+    //~| ERROR `{integer}` is a primitive type and therefore doesn't have fields\n }"}, {"sha": "258ab06d5ee2f2940c7ef45405be18782cfbeb49", "filename": "src/test/ui/parser/no-hex-float-literal.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-hex-float-literal.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,29 @@\n error: hexadecimal float literal is not supported\n-  --> $DIR/no-hex-float-literal.rs:5:5\n+  --> $DIR/no-hex-float-literal.rs:4:5\n    |\n LL |     0x567.89;\n    |     ^^^^^^^^\n \n-error: aborting due to previous error\n+error: invalid suffix `f` for float literal\n+  --> $DIR/no-hex-float-literal.rs:6:18\n+   |\n+LL |     0xDEAD.BEEFp-2f;\n+   |                  ^^ invalid suffix `f`\n+   |\n+   = help: valid suffixes are `f32` and `f64`\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/no-hex-float-literal.rs:2:11\n+   |\n+LL |     0xABC.Df;\n+   |           ^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/no-hex-float-literal.rs:6:12\n+   |\n+LL |     0xDEAD.BEEFp-2f;\n+   |            ^^^^^\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "84779b09dc7c6ae68081c28386ffdc45e9072a4b", "filename": "src/test/ui/parser/no-unsafe-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,37 +2,37 @@ error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:4:17\n    |\n LL |     fn foo(*mut self); //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:5:19\n    |\n LL |     fn baz(*const self); //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:6:13\n    |\n LL |     fn bar(*self); //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:11:17\n    |\n LL |     fn foo(*mut self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:12:19\n    |\n LL |     fn baz(*const self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:13:13\n    |\n LL |     fn bar(*self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fd25499381a2849df1801e7b5733a52ff5bddf86", "filename": "src/test/ui/parser/pat-tuple-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n-    match 0 {\n-        (pat, ..,) => {} //~ ERROR trailing comma is not permitted after `..`\n+    match (0, 1, 2) {\n+        (pat, ..,) => {}\n+        //~^ ERROR trailing comma is not permitted after `..`\n     }\n }"}, {"sha": "c3a5c39a8e32ac8e5953d180c76324a8037f30f0", "filename": "src/test/ui/parser/pat-tuple-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-2.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,8 @@\n error: trailing comma is not permitted after `..`\n   --> $DIR/pat-tuple-2.rs:3:17\n    |\n-LL |         (pat, ..,) => {} //~ ERROR trailing comma is not permitted after `..`\n-   |                 ^\n+LL |         (pat, ..,) => {}\n+   |                 ^ trailing comma is not permitted after `..`\n \n error: aborting due to previous error\n "}, {"sha": "e1e975d3c3ea04b3a7d3a42b434d2a9f998ce65e", "filename": "src/test/ui/parser/pat-tuple-3.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n-    match 0 {\n-        (.., pat, ..) => {} //~ ERROR `..` can only be used once per tuple or tuple struct pattern\n+    match (0, 1, 2) {\n+        (.., pat, ..) => {}\n+        //~^ ERROR `..` can only be used once per tuple or tuple struct pattern\n     }\n }"}, {"sha": "0ad7d27b94e541fed59b3572b2e326703d67595a", "filename": "src/test/ui/parser/pat-tuple-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,8 @@\n error: `..` can only be used once per tuple or tuple struct pattern\n   --> $DIR/pat-tuple-3.rs:3:19\n    |\n-LL |         (.., pat, ..) => {} //~ ERROR `..` can only be used once per tuple or tuple struct pattern\n-   |                   ^^\n+LL |         (.., pat, ..) => {}\n+   |                   ^^ can only be used once per pattern\n \n error: aborting due to previous error\n "}, {"sha": "83a3b727982b5401e648ab537302ba7ad03dc6a7", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,12 +1,11 @@\n-//error-pattern: discriminator values can only be used with a field-less enum\n-\n-enum color {\n-    red = 0xff0000,\n-    green = 0x00ff00,\n-    blue = 0x0000ff,\n-    black = 0x000000,\n-    white = 0xffffff,\n-    other (str),\n+enum Color {\n+    Red = 0xff0000,\n+    //~^ ERROR discriminator values can only be used with a field-less enum\n+    Green = 0x00ff00,\n+    Blue = 0x0000ff,\n+    Black = 0x000000,\n+    White = 0xffffff,\n+    Other(usize),\n }\n \n fn main() {}"}, {"sha": "cc6312b45455155a216143df3cccfd1d9849ca93", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,17 @@\n error: discriminator values can only be used with a field-less enum\n-  --> $DIR/tag-variant-disr-non-nullary.rs:8:13\n+  --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n    |\n-LL |     white = 0xffffff,\n-   |             ^^^^^^^^\n+LL |     Red = 0xff0000,\n+   |           ^^^^^^^^ only valid in field-less enums\n+LL |     //~^ ERROR discriminator values can only be used with a field-less enum\n+LL |     Green = 0x00ff00,\n+   |             ^^^^^^^^ only valid in field-less enums\n+LL |     Blue = 0x0000ff,\n+   |            ^^^^^^^^ only valid in field-less enums\n+LL |     Black = 0x000000,\n+   |             ^^^^^^^^ only valid in field-less enums\n+LL |     White = 0xffffff,\n+   |             ^^^^^^^^ only valid in field-less enums\n \n error: aborting due to previous error\n "}, {"sha": "3ca45f1889c9ccdb6e2ec9eeced793245b16ee23", "filename": "src/test/ui/parser/where_with_bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,4 +1,5 @@\n fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n //~^ ERROR generic parameters on `where` clauses are reserved for future use\n+//~| ERROR cannot find type `Item` in the crate root\n \n fn main() {}"}, {"sha": "ff98b3f5fed6121aeabf2d803bf5e39a03a6abda", "filename": "src/test/ui/parser/where_with_bound.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere_with_bound.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -2,7 +2,14 @@ error: generic parameters on `where` clauses are reserved for future use\n   --> $DIR/where_with_bound.rs:1:19\n    |\n LL | fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n-   |                   ^^^\n+   |                   ^^^ currently unsupported\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `Item` in the crate root\n+  --> $DIR/where_with_bound.rs:1:24\n+   |\n+LL | fn foo<T>() where <T>::Item: ToString, T: Iterator { }\n+   |                        ^^^^ not found in the crate root\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "a12429c868ed028d414575a5d567a27bd5967208", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,8 +1,6 @@\n // A few contrived examples where lifetime should (or should not) be parsed as an object type.\n // Lifetimes parsed as types are still rejected later by semantic checks.\n \n-// compile-flags: -Z continue-parse-after-error\n-\n struct S<'a, T>(&'a u8, T);\n \n fn main() {"}, {"sha": "4cc96bae5cd171b4f0b51dc3f2fb3551e2a591fc", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a226c4dfd8fe71a7451063b6724166b705cf2/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=2f7a226c4dfd8fe71a7451063b6724166b705cf2", "patch": "@@ -1,29 +1,33 @@\n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/trait-object-vs-lifetime.rs:16:25\n+  --> $DIR/trait-object-vs-lifetime.rs:14:25\n    |\n LL |     let _: S<'static +, 'static>;\n-   |                         ^^^^^^^\n+   |                         ^^^^^^^ must be declared prior to type parameters\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL |     let _: S<'static, 'static +>;\n+   |              ^^^^^^^^         --\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:11:23\n+  --> $DIR/trait-object-vs-lifetime.rs:9:23\n    |\n LL |     let _: S<'static, 'static +>;\n    |                       ^^^^^^^^^\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/trait-object-vs-lifetime.rs:13:23\n+  --> $DIR/trait-object-vs-lifetime.rs:11:23\n    |\n LL |     let _: S<'static, 'static>;\n    |                       ^^^^^^^ unexpected lifetime argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/trait-object-vs-lifetime.rs:13:12\n+  --> $DIR/trait-object-vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n    |            ^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n \n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime.rs:16:14\n+  --> $DIR/trait-object-vs-lifetime.rs:14:14\n    |\n LL |     let _: S<'static +, 'static>;\n    |              ^^^^^^^^^"}]}