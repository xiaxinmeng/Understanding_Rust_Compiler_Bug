{"sha": "f32f1113c93fe84f252293ae4af86be1ceae4a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMmYxMTEzYzkzZmU4NGYyNTIyOTNhZTRhZjg2YmUxY2VhZTRhODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-27T09:56:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-27T09:56:37Z"}, "message": "Auto merge of #55150 - pnkfelix:issues-47215-54797-fix-ice-from-moving-out-of-thread-local-under-ast-borrowck, r=nikomatsakis\n\nDo not allow moving out of thread local under ast borrowck\n\nAST borrowck failed to prevent moving out of a thread-local static.\n\nThis was broken. And it also (sometimes?) caused an ICE during drop elaboration.\n\nFix #47215\nFix #54797", "tree": {"sha": "bc9f4b7a97d608194170eb7a07707ce23a811379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc9f4b7a97d608194170eb7a07707ce23a811379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f32f1113c93fe84f252293ae4af86be1ceae4a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f32f1113c93fe84f252293ae4af86be1ceae4a84", "html_url": "https://github.com/rust-lang/rust/commit/f32f1113c93fe84f252293ae4af86be1ceae4a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f32f1113c93fe84f252293ae4af86be1ceae4a84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c11de47b6b1da71537eb161b102177d798a08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c11de47b6b1da71537eb161b102177d798a08d", "html_url": "https://github.com/rust-lang/rust/commit/42c11de47b6b1da71537eb161b102177d798a08d"}, {"sha": "1d46ce5a7229111850e2619bf297a0561b878cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d46ce5a7229111850e2619bf297a0561b878cec", "html_url": "https://github.com/rust-lang/rust/commit/1d46ce5a7229111850e2619bf297a0561b878cec"}], "stats": {"total": 105, "additions": 91, "deletions": 14}, "files": [{"sha": "9d3f37bc36a9d5873796ba3bd66a3f8582ba8947", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -93,6 +93,7 @@ use util::nodemap::ItemLocalSet;\n #[derive(Clone, Debug, PartialEq)]\n pub enum Categorization<'tcx> {\n     Rvalue(ty::Region<'tcx>),            // temporary val, argument is its scope\n+    ThreadLocal(ty::Region<'tcx>),       // value that cannot move, but still restricted in scope\n     StaticItem,\n     Upvar(Upvar),                        // upvar referenced by closure env\n     Local(ast::NodeId),                  // local variable\n@@ -268,6 +269,7 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Deref(ref base_cmt, _) => {\n                 base_cmt.immutability_blame()\n             }\n+            Categorization::ThreadLocal(..) |\n             Categorization::StaticItem => {\n                 // Do we want to do something here?\n                 None\n@@ -715,17 +717,23 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n \n             Def::Static(def_id, mutbl) => {\n-                // `#[thread_local]` statics may not outlive the current function.\n-                for attr in &self.tcx.get_attrs(def_id)[..] {\n-                    if attr.check_name(\"thread_local\") {\n-                        return Ok(self.cat_rvalue_node(hir_id, span, expr_ty));\n-                    }\n-                }\n+                // `#[thread_local]` statics may not outlive the current function, but\n+                // they also cannot be moved out of.\n+                let is_thread_local = self.tcx.get_attrs(def_id)[..]\n+                    .iter()\n+                    .any(|attr| attr.check_name(\"thread_local\"));\n+\n+                let cat = if is_thread_local {\n+                    let re = self.temporary_scope(hir_id.local_id);\n+                    Categorization::ThreadLocal(re)\n+                } else {\n+                    Categorization::StaticItem\n+                };\n \n                 Ok(cmt_ {\n                     hir_id,\n-                    span:span,\n-                    cat:Categorization::StaticItem,\n+                    span,\n+                    cat,\n                     mutbl: if mutbl { McDeclared } else { McImmutable},\n                     ty:expr_ty,\n                     note: NoteNone\n@@ -1408,6 +1416,7 @@ impl<'tcx> cmt_<'tcx> {\n         match self.cat {\n             Categorization::Rvalue(..) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |\n             Categorization::Deref(_, UnsafePtr(..)) |\n             Categorization::Deref(_, BorrowedPtr(..)) |\n@@ -1439,6 +1448,7 @@ impl<'tcx> cmt_<'tcx> {\n             }\n \n             Categorization::Rvalue(..) |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n             Categorization::Deref(_, UnsafePtr(..)) => { // yes, it's aliasable, but...\n@@ -1485,6 +1495,9 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::StaticItem => {\n                 \"static item\".into()\n             }\n+            Categorization::ThreadLocal(..) => {\n+                \"thread-local static item\".into()\n+            }\n             Categorization::Rvalue(..) => {\n                 \"non-place\".into()\n             }"}, {"sha": "1fc9ee07a1ae49e03aac74689c59cfa858871359", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -377,6 +377,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 // by-move upvars, which is local data for generators\n                 Categorization::Upvar(..) => true,\n \n+                Categorization::ThreadLocal(region) |\n                 Categorization::Rvalue(region) => {\n                     // Rvalues promoted to 'static are no longer local\n                     if let RegionKind::ReStatic = *region {"}, {"sha": "7bb5f411752fe45630d92aacbbe6af082e2b7711", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -177,6 +177,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     match cmt.cat {\n         Categorization::Deref(_, mc::BorrowedPtr(..)) |\n         Categorization::Deref(_, mc::UnsafePtr(..)) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             Some(cmt.clone())\n         }"}, {"sha": "6ef5d65d10dca6ade262c1fce3706ff0e13fc70a", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -70,6 +70,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n \n         match cmt.cat {\n             Categorization::Rvalue(..) |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |                     // L-Local\n             Categorization::Upvar(..) |\n             Categorization::Deref(_, mc::BorrowedPtr(..)) | // L-Deref-Borrowed\n@@ -105,6 +106,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n         //! rooting etc, and presuming `cmt` is not mutated.\n \n         match cmt.cat {\n+            Categorization::ThreadLocal(temp_scope) |\n             Categorization::Rvalue(temp_scope) => {\n                 temp_scope\n             }"}, {"sha": "e1a4473539c8c567c531caabb8b167aebddcb805", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -145,6 +145,8 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     match move_from.cat {\n         Categorization::Deref(_, mc::BorrowedPtr(..)) |\n         Categorization::Deref(_, mc::UnsafePtr(..)) |\n+        Categorization::Deref(_, mc::Unique) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             bccx.cannot_move_out_of(\n                 move_from.span, &move_from.descriptive_string(bccx.tcx), Origin::Ast)\n@@ -166,7 +168,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n                 }\n             }\n         }\n-        _ => {\n+\n+        Categorization::Rvalue(..) |\n+        Categorization::Local(..) |\n+        Categorization::Upvar(..) => {\n             span_bug!(move_from.span, \"this path should not cause illegal move\");\n         }\n     }"}, {"sha": "52c7ebb4beb0234906183c5f3fcedcbaafb8d358", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -70,6 +70,12 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 RestrictionResult::Safe\n             }\n \n+            Categorization::ThreadLocal(..) => {\n+                // Thread-locals are statics that have a scope, with\n+                // no underlying structure to provide restrictions.\n+                RestrictionResult::Safe\n+            }\n+\n             Categorization::Local(local_id) => {\n                 // R-Variable, locally declared\n                 let lp = new_lp(LpVar(local_id));"}, {"sha": "d52d78181b77ab7dbd8f7ecfe56c6705b63c0117", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -520,6 +520,7 @@ pub fn opt_loan_path_is_field<'tcx>(cmt: &mc::cmt_<'tcx>) -> (Option<Rc<LoanPath\n \n     match cmt.cat {\n         Categorization::Rvalue(..) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             (None, false)\n         }"}, {"sha": "ca58239df8eac3b77fa42c23574df7663483dc19", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -663,6 +663,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n         let mut cur = cmt;\n         loop {\n             match cur.cat {\n+                Categorization::ThreadLocal(..) |\n                 Categorization::Rvalue(..) => {\n                     if loan_cause == euv::MatchDiscriminant {\n                         // Ignore the dummy immutable borrow created by EUV."}, {"sha": "212ee2698e012063d3b63e0e52b284a658438836", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -1243,6 +1243,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 | Categorization::StaticItem\n                 | Categorization::Upvar(..)\n                 | Categorization::Local(..)\n+                | Categorization::ThreadLocal(..)\n                 | Categorization::Rvalue(..) => {\n                     // These are all \"base cases\" with independent lifetimes\n                     // that are not subject to inference"}, {"sha": "df994ad9e55c4d3dc78f1cad670b59292c19e6ff", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -401,6 +401,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {\n@@ -431,6 +432,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {}"}, {"sha": "505bcfb1e6e1467600139535afbe5ff1c1d78e28", "filename": "src/test/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.ast.stderr?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -2,9 +2,9 @@ error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-thread-local-static-borrow-outlives-fn.rs:21:21\n    |\n LL |      assert_static(&FOO); //[ast]~ ERROR [E0597]\n-   |                     ^^^ - temporary value only lives until here\n+   |                     ^^^ - borrowed value only lives until here\n    |                     |\n-   |                     temporary value does not live long enough\n+   |                     borrowed value does not live long enough\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "255eb757a498939a741216a7df7e5ce61f74b512", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of static item\n+  --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n+   |\n+LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+   |                     ^\n+   |                     |\n+   |                     cannot move out of static item\n+   |                     help: consider borrowing here: `&X`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "670c6bb869d59962ffbc78cbda8efc2854fea41f", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -0,0 +1,20 @@\n+// rust-lang/rust#47215: at one time, the compiler categorized\n+// thread-local statics as a temporary rvalue, as a way to enforce\n+// that they are only valid for a given lifetime.\n+//\n+// The problem with this is that you cannot move out of static items,\n+// but you *can* move temporary rvalues. I.e., the categorization\n+// above only solves half of the problem presented by thread-local\n+// statics.\n+\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::ATOMIC_USIZE_INIT;\n+\n+fn main() {\n+    unsafe {\n+        let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+        let _y = x.get_mut();\n+    }\n+}"}, {"sha": "219a1fd2e7727305fb9a6cc120771abd4ec75769", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of thread-local static item\n+  --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n+   |\n+LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+   |                     ^\n+   |                     |\n+   |                     cannot move out of thread-local static item\n+   |                     help: consider using a reference instead: `&X`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "5f003436951ce9a91b2cd12b20a9bd3cee102387", "filename": "src/test/ui/issues/issue-17954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fissues%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fissues%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17954.rs?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -23,4 +23,4 @@ fn main() {\n         println!(\"{}\", a);\n     });\n }\n-//~^ NOTE temporary value only lives until here\n+//~^ NOTE borrowed value only lives until here"}, {"sha": "020e544ad10ffbaf46c3a1c5a52e0b9bcef3ee98", "filename": "src/test/ui/issues/issue-17954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fissues%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32f1113c93fe84f252293ae4af86be1ceae4a84/src%2Ftest%2Fui%2Fissues%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17954.stderr?ref=f32f1113c93fe84f252293ae4af86be1ceae4a84", "patch": "@@ -2,10 +2,10 @@ error[E0597]: borrowed value does not live long enough\n   --> $DIR/issue-17954.rs:17:14\n    |\n LL |     let a = &FOO;\n-   |              ^^^ temporary value does not live long enough\n+   |              ^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}]}