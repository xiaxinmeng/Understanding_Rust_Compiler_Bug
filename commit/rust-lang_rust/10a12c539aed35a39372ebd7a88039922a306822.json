{"sha": "10a12c539aed35a39372ebd7a88039922a306822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYTEyYzUzOWFlZDM1YTM5MzcyZWJkN2E4ODAzOTkyMmEzMDY4MjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-05T17:14:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-05T17:14:33Z"}, "message": "Rollup merge of #67881 - varkor:scattering-of-backticks, r=Centril\n\nAdd backticks to various diagnostics", "tree": {"sha": "688d96fbe495e845e96b4e87fc536241e197c9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688d96fbe495e845e96b4e87fc536241e197c9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a12c539aed35a39372ebd7a88039922a306822", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeEhl5CRBK7hj4Ov3rIwAAdHIIAGBqX/gRNcexMEQCiXEQq03U\nneKBAO3jsllpBSUzOGZSvC2Uh06YifTVmHSCPmMMAfECPc/iZZ4Ot7YVimT2dtB7\nW7WgCA3Nj9ONCFuhLJR8E+TMxl5tPmPtMhYymCnzRN5lN/nmwTzVbz3f/hdDa9BZ\nq+desqvubyChQBiWrFWVv0mxza4HWl7UYY7SE/8ZD2NTygR4H9Exc52roTurgJN/\navNLN/rtyXQQZE4nl8F4EoLO2sWeeBrtqlJRBsl5R3GRZ9EM96V3MJ2MBUH2w0Lq\n11klOg/oJ280Rursp9r7M+S+JXaXWjiDhTZvSS9r3hlZdmqsDq/IrFz3wXD6Z9o=\n=O5me\n-----END PGP SIGNATURE-----\n", "payload": "tree 688d96fbe495e845e96b4e87fc536241e197c9c3\nparent eae08b25a6da51eac515a270c4216324901057a6\nparent 0c2cf07d6e37a0e957e731453916445140673002\nauthor Dylan DPC <dylan.dpc@gmail.com> 1578244473 +0530\ncommitter GitHub <noreply@github.com> 1578244473 +0530\n\nRollup merge of #67881 - varkor:scattering-of-backticks, r=Centril\n\nAdd backticks to various diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a12c539aed35a39372ebd7a88039922a306822", "html_url": "https://github.com/rust-lang/rust/commit/10a12c539aed35a39372ebd7a88039922a306822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a12c539aed35a39372ebd7a88039922a306822/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae08b25a6da51eac515a270c4216324901057a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae08b25a6da51eac515a270c4216324901057a6", "html_url": "https://github.com/rust-lang/rust/commit/eae08b25a6da51eac515a270c4216324901057a6"}, {"sha": "0c2cf07d6e37a0e957e731453916445140673002", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2cf07d6e37a0e957e731453916445140673002", "html_url": "https://github.com/rust-lang/rust/commit/0c2cf07d6e37a0e957e731453916445140673002"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "69c5ea56ad626272f86a4420dc7b9aa381f5c3ba", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -661,7 +661,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             },\n             ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {\n                 err.span_label(then, \"expected because of this\");\n-                outer.map(|sp| err.span_label(sp, \"if and else have incompatible types\"));\n+                outer.map(|sp| err.span_label(sp, \"`if` and `else` have incompatible types\"));\n                 if let Some(sp) = semicolon {\n                     err.span_suggestion_short(\n                         sp,\n@@ -1883,13 +1883,13 @@ impl<'tcx> ObligationCause<'tcx> {\n                     hir::MatchSource::TryDesugar => {\n                         \"try expression alternatives have incompatible types\"\n                     }\n-                    _ => \"match arms have incompatible types\",\n+                    _ => \"`match` arms have incompatible types\",\n                 })\n             }\n-            IfExpression { .. } => Error0308(\"if and else have incompatible types\"),\n-            IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n-            MainFunctionType => Error0580(\"main function has wrong type\"),\n-            StartFunctionType => Error0308(\"start function has wrong type\"),\n+            IfExpression { .. } => Error0308(\"`if` and `else` have incompatible types\"),\n+            IfExpressionWithNoElse => Error0317(\"`if` may be missing an `else` clause\"),\n+            MainFunctionType => Error0580(\"`main` function has wrong type\"),\n+            StartFunctionType => Error0308(\"`#[start]` function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n             MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n@@ -1917,12 +1917,12 @@ impl<'tcx> ObligationCause<'tcx> {\n             ExprAssignable => \"expression is assignable\",\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n-                _ => \"match arms have compatible types\",\n+                _ => \"`match` arms have compatible types\",\n             },\n-            IfExpression { .. } => \"if and else have incompatible types\",\n-            IfExpressionWithNoElse => \"if missing an else returns ()\",\n+            IfExpression { .. } => \"`if` and `else` have incompatible types\",\n+            IfExpressionWithNoElse => \"`if` missing an `else` returns `()`\",\n             MainFunctionType => \"`main` function has the correct type\",\n-            StartFunctionType => \"`start` function has the correct type\",\n+            StartFunctionType => \"`#[start]` function has the correct type\",\n             IntrinsicType => \"intrinsic has the correct type\",\n             MethodReceiver => \"method receiver has the correct type\",\n             _ => \"types are compatible\","}, {"sha": "910d752359908230a48d8d489727796f38c090e9", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -134,7 +134,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.start_fn = Some((item.hir_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n-                    .span_label(ctxt.start_fn.unwrap().1, \"previous `start` function here\")\n+                    .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n             }"}, {"sha": "47e80e8db19f66229ab5f99d0934390e841bd535", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -81,7 +81,7 @@ pub fn options() -> TargetOptions {\n         dynamic_linking: true,\n         only_cdylib: true,\n \n-        // This means we'll just embed a `start` function in the wasm module\n+        // This means we'll just embed a `#[start]` function in the wasm module\n         executables: true,\n \n         // relatively self-explanatory!"}, {"sha": "1f0bc6a8e13c4e924e6872d9f4d1807f8891507d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // LL ||         10u32\n             //    ||         ^^^^^ expected `i32`, found `u32`\n             // LL ||     };\n-            //    ||_____- if and else have incompatible types\n+            //    ||_____- `if` and `else` have incompatible types\n             // ```\n             Some(span)\n         } else {\n@@ -340,7 +340,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // by not pointing at the entire expression:\n                 // ```\n                 // 2 |       let x = if true {\n-                //   |               ------- if and else have incompatible types\n+                //   |               ------- `if` and `else` have incompatible types\n                 // 3 |           3\n                 //   |           - expected because of this\n                 // 4 |       } else {"}, {"sha": "0e94a722777515dc6e6b00b35f69e9ab07fb06e7", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -387,8 +387,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         &self,\n                         start,\n                         i.span,\n-                        \"a `#[start]` function is an experimental \\\n-                                       feature whose signature may change \\\n+                        \"`#[start]` functions are experimental \\\n+                                       and their signature may change \\\n                                        over time\"\n                     );\n                 }"}, {"sha": "3ab8220b4aff3d17df54c8a7395bc46e426c77f7", "filename": "src/test/ui/async-await/issue-66387-if-without-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n async fn f() -> i32 {\n-    if true { //~ ERROR if may be missing an else clause\n+    if true { //~ ERROR `if` may be missing an `else` clause\n         return 0;\n     }\n     // An `if` block without `else` causes the type table not to have a type for this expr."}, {"sha": "e8e2a48983c89e3840087e102498fe924aa5ab1c", "filename": "src/test/ui/async-await/issue-66387-if-without-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-66387-if-without-else.rs:3:5\n    |\n LL | /     if true {"}, {"sha": "31fc9cf2cb575620d7a02d6fa91c2470c8f0e73a", "filename": "src/test/ui/bad/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,6 +1,6 @@\n mod m1 {}\n \n-fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+fn main(arguments: Vec<String>) { //~ ERROR `main` function has wrong type\n     log(debug, m1::arguments);\n     //~^ ERROR cannot find function `log` in this scope\n     //~| ERROR cannot find value `debug` in this scope"}, {"sha": "56bb6e2be88c4d385a0280e38ec43e93c8905752", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -16,7 +16,7 @@ error[E0425]: cannot find value `arguments` in module `m1`\n LL |     log(debug, m1::arguments);\n    |                    ^^^^^^^^^ not found in `m1`\n \n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path.rs:3:1\n    |\n LL | fn main(arguments: Vec<String>) {"}, {"sha": "eb88edb9071ef0ddc8428ca79adf4017385d126b", "filename": "src/test/ui/bad/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -2,7 +2,7 @@ mod m1 {\n     pub mod arguments {}\n }\n \n-fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+fn main(arguments: Vec<String>) { //~ ERROR `main` function has wrong type\n     log(debug, m1::arguments);\n     //~^ ERROR cannot find function `log` in this scope\n     //~| ERROR cannot find value `debug` in this scope"}, {"sha": "e217c45b267af9f3f887b6e83aafebf13592fb7d", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -16,7 +16,7 @@ error[E0423]: expected value, found module `m1::arguments`\n LL |     log(debug, m1::arguments);\n    |                ^^^^^^^^^^^^^ not a value\n \n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path2.rs:5:1\n    |\n LL | fn main(arguments: Vec<String>) {"}, {"sha": "7511599614247426d652bba0638a45b6a056be2b", "filename": "src/test/ui/bad/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1 +1 @@\n-fn main(x: isize) { } //~ ERROR: main function has wrong type [E0580]\n+fn main(x: isize) { } //~ ERROR: `main` function has wrong type [E0580]"}, {"sha": "675b66d057838d0931a15417817639f6f73324d6", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-main.rs:1:1\n    |\n LL | fn main(x: isize) { }"}, {"sha": "6771224e6cf5ea630b7513fde2a1219dfd207eb6", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)"}, {"sha": "9600f8b6aeeab8fda71d7cb3a21d2a922b164717", "filename": "src/test/ui/consts/control-flow/issue-50577.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n-        //[stock,if_match]~^ ERROR if may be missing an else clause\n+        //[stock,if_match]~^ ERROR `if` may be missing an `else` clause\n         //[stock]~^^ ERROR `match` is not allowed in a `const`\n         //[stock]~| ERROR `match` is not allowed in a `const`\n         //[stock]~| ERROR `if` is not allowed in a `const`"}, {"sha": "7d637f5aa9671925559c82c35f43e9ba5bfe2a1f", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -28,7 +28,7 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)"}, {"sha": "2dc6976fe0e9cf6e8312dabc5b4f3aa482b9e32f", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -2,7 +2,7 @@ error[E0138]: multiple `start` functions\n   --> $DIR/E0138.rs:7:1\n    |\n LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n-   | ---------------------------------------------------------- previous `start` function here\n+   | ---------------------------------------------------------- previous `#[start]` function here\n ...\n LL | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions"}, {"sha": "ddf2e136f03ce247c4798f484b2ba6dbae8b126f", "filename": "src/test/ui/extern/extern-main-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1 +1 @@\n-extern fn main() {} //~ ERROR: main function has wrong type [E0580]\n+extern fn main() {} //~ ERROR: `main` function has wrong type [E0580]"}, {"sha": "9c994985a3e0d6d7738dc20676c51a8fa564d3b5", "filename": "src/test/ui/extern/extern-main-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/extern-main-fn.rs:1:1\n    |\n LL | extern fn main() {}"}, {"sha": "e617f1c47594dc2e03e1a29cf2eec4bed95bb06e", "filename": "src/test/ui/feature-gates/feature-gate-start.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,3 +1,3 @@\n #[start]\n fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n-//~^ ERROR a `#[start]` function is an experimental feature\n+//~^ ERROR `#[start]` functions are experimental"}, {"sha": "f42e42ea0391f07c544c33982e3cc6d2330b1e0b", "filename": "src/test/ui/feature-gates/feature-gate-start.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: a `#[start]` function is an experimental feature whose signature may change over time\n+error[E0658]: `#[start]` functions are experimental and their signature may change over time\n   --> $DIR/feature-gate-start.rs:2:1\n    |\n LL | fn foo(_: isize, _: *const *const u8) -> isize { 0 }"}, {"sha": "1a0a36df2ad63f1746b349ec456c3349f7db7ae8", "filename": "src/test/ui/if-else-type-mismatch.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -4,43 +4,43 @@ fn main() {\n     } else {\n         2u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true { 42i32 } else { 42u32 };\n-    //~^ ERROR if and else have incompatible types\n+    //~^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         3u32;\n     } else {\n         4u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         5u32\n     } else {\n         6u32;\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         7i32;\n     } else {\n         8u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         9i32\n     } else {\n         10u32;\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n \n     } else {\n         11u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         12i32\n     } else {\n \n     };\n-    //~^^^ ERROR if and else have incompatible types\n+    //~^^^ ERROR `if` and `else` have incompatible types\n }"}, {"sha": "9fa190d6c9df3d0c6d047a6198a402896a441456", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:5:9\n    |\n LL |       let _ = if true {\n@@ -9,17 +9,17 @@ LL | |     } else {\n LL | |         2u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n    |\n LL |     let _ = if true { 42i32 } else { 42u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9\n    |\n LL |       let _ = if true {\n@@ -33,9 +33,9 @@ LL | |     } else {\n LL | |         4u32\n    | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:19:9\n    |\n LL |       let _ = if true {\n@@ -49,9 +49,9 @@ LL | |         6u32;\n    | |         |   help: consider removing this semicolon\n    | |         expected `u32`, found `()`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:25:9\n    |\n LL |       let _ = if true {\n@@ -62,9 +62,9 @@ LL | |     } else {\n LL | |         8u32\n    | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:31:9\n    |\n LL |       let _ = if true {\n@@ -75,9 +75,9 @@ LL | |     } else {\n LL | |         10u32;\n    | |         ^^^^^^ expected `i32`, found `()`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:37:9\n    |\n LL |       let _ = if true {\n@@ -88,11 +88,11 @@ LL | |     } else {\n LL |           11u32\n    |           ^^^^^ expected `()`, found `u32`\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:42:12\n    |\n LL |       let _ = if true {\n-   |               ------- if and else have incompatible types\n+   |               ------- `if` and `else` have incompatible types\n LL |           12i32\n    |           ----- expected because of this\n LL |       } else {"}, {"sha": "c125ba30606c553df7d36e26fcc98ee78211dfcc", "filename": "src/test/ui/if/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = if true { 10i32 } else { 10u32 };\n-    //~^ ERROR if and else have incompatible types\n+    //~^ ERROR `if` and `else` have incompatible types\n     //~| expected `i32`, found `u32`\n }"}, {"sha": "14f02163a8320f212a099abdf0e1a134c8b1b33e", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-branch-types.rs:2:38\n    |\n LL |     let x = if true { 10i32 } else { 10u32 };"}, {"sha": "1e8260a017da2b57d23842095944caf36fbe2536", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     if let Some(b) = None {\n-        //~^ NOTE if and else have incompatible types\n+        //~^ NOTE `if` and `else` have incompatible types\n         ()\n         //~^ NOTE expected because of this\n     } else {\n         1\n     };\n-    //~^^ ERROR: if and else have incompatible types\n+    //~^^ ERROR: `if` and `else` have incompatible types\n     //~| NOTE expected `()`, found integer\n }"}, {"sha": "b40a0f479d3185136b7cd79367f2fc66372314a0", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-let-arm-types.rs:7:9\n    |\n LL | /     if let Some(b) = None {\n@@ -10,7 +10,7 @@ LL | |     } else {\n LL | |         1\n    | |         ^ expected `()`, found integer\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n error: aborting due to previous error\n "}, {"sha": "19fbfb27ba6e97b9bc66f063d779e3a160b2a7e1", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -2,44 +2,44 @@ fn foo(bar: usize) -> usize {\n     if bar % 5 == 0 {\n         return 3;\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo2(bar: usize) -> usize {\n     let x: usize = if bar % 5 == 0 {\n         return 3;\n     };\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n     x\n }\n \n fn foo3(bar: usize) -> usize {\n     if bar % 5 == 0 {\n         3\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo_let(bar: usize) -> usize {\n     if let 0 = 1 {\n         return 3;\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo2_let(bar: usize) -> usize {\n     let x: usize = if let 0 = 1 {\n         return 3;\n     };\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n     x\n }\n \n fn foo3_let(bar: usize) -> usize {\n     if let 0 = 1 {\n         3\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n // FIXME(60254): deduplicate first error in favor of second."}, {"sha": "4daf27493c19d3a857f6f66f6e43b25dcf7cbaab", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:2:5\n    |\n LL |   fn foo(bar: usize) -> usize {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:9:20\n    |\n LL |       let x: usize = if bar % 5 == 0 {\n@@ -25,7 +25,7 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:17:5\n    |\n LL |   fn foo3(bar: usize) -> usize {\n@@ -38,7 +38,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:24:5\n    |\n LL |   fn foo_let(bar: usize) -> usize {\n@@ -51,7 +51,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:31:20\n    |\n LL |       let x: usize = if let 0 = 1 {\n@@ -65,7 +65,7 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:39:5\n    |\n LL |   fn foo3_let(bar: usize) -> usize {"}, {"sha": "cf84a99e53fa113b2eee3795bd8c635cd146c198", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a = if true { true };\n-    //~^ ERROR if may be missing an else clause [E0317]\n+    //~^ ERROR `if` may be missing an `else` clause [E0317]\n     //~| expected `()`, found `bool`\n     println!(\"{}\", a);\n }"}, {"sha": "821635d3768f319fc48a8f1db8fa970621d94d8b", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-result.rs:2:13\n    |\n LL |     let a = if true { true };"}, {"sha": "ab69ab250ff05c9c24149e41919f5a7735dcd958", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -6,7 +6,7 @@ fn main() {\n         Some(2) => true,\n         //~^ NOTE this is found to be of type `bool`\n         None    => (),\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `bool`, found `()`\n         _       => true\n     }"}, {"sha": "fc44205e81e6cf90c1700796840d23cebd60d7a5", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-11319.rs:8:20\n    |\n LL | /     match Some(10) {"}, {"sha": "d515cf451c410d8beb627a15ae987814fce34edc", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-17728.rs:109:14\n    |\n LL | /     match to_parse {"}, {"sha": "bec52d87d29838af79a94be3f0930c9f9448b4a7", "filename": "src/test/ui/issues/issue-17728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -108,7 +108,7 @@ fn str_to_direction(to_parse: &str) -> RoomDirection {\n         \"down\" => RoomDirection::Down,\n         _ => None\n     }\n-        //~^^ ERROR match arms have incompatible types\n+        //~^^ ERROR `match` arms have incompatible types\n }\n \n fn main() {"}, {"sha": "2f9ae63aa41453adaf730c9a5c2fb548c7fcf83c", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -9,7 +9,7 @@ LL |     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&R\n LL |             Some(entry) => Ok(entry),\n    |                            ^^^^^^^^^ ...but data from `room` is returned here\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-17728.rs:109:14\n    |\n LL | /     match to_parse {"}, {"sha": "0f3f83001d3c689c99b3c03233243df4cb6eecd6", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,8 +1,8 @@\n // Test if the sugared if-let construct correctly prints \"missing an else clause\" when an else\n-// clause does not exist, instead of the unsympathetic \"match arms have incompatible types\"\n+// clause does not exist, instead of the unsympathetic \"`match` arms have incompatible types\"\n \n fn main() {\n-    if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n+    if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an `else` clause\n                                            //~| expected `()`, found integer\n         765\n     };"}, {"sha": "6e92be87a02e9a730944286e90aa3bd4cded4138", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-19991.rs:5:5\n    |\n LL | /     if let Some(homura) = Some(\"madoka\") {"}, {"sha": "bd82f95c9ef663c8d63a21d2ec616788c0b2cbe9", "filename": "src/test/ui/issues/issue-24036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -10,7 +10,7 @@ fn closure_from_match() {\n         2 => |c| c - 1,\n         _ => |c| c - 1\n     };\n-    //~^^^ ERROR match arms have incompatible types\n+    //~^^^ ERROR `match` arms have incompatible types\n }\n \n fn main() { }"}, {"sha": "b0e729a59eb22921ef751bd0b89c9fd5e07fb40a", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -9,7 +9,7 @@ LL |     x = |c| c + 1;\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-24036.rs:10:14\n    |\n LL |       let x = match 1usize {"}, {"sha": "1f292229fd6cd54414e1d5a68f54fa63bd77c4b2", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let a = if true {\n         0\n     } else if false {\n-//~^ ERROR if may be missing an else clause\n+//~^ ERROR `if` may be missing an `else` clause\n //~| expected `()`, found integer\n         1\n     };"}, {"sha": "bc638ddf55be03e51cb17b13522e952adade1f98", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-4201.rs:4:12\n    |\n LL |       } else if false {"}, {"sha": "06b252990b642b0560c2f49cdd4687b59d190d6e", "filename": "src/test/ui/issues/issue-9575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -2,6 +2,6 @@\n \n #[start]\n fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {\n-    //~^ start function has wrong type\n+    //~^ `#[start]` function has wrong type\n    0\n }"}, {"sha": "5b8ce84a0716832051ec74d037fce3b518d4d364", "filename": "src/test/ui/issues/issue-9575.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: start function has wrong type\n+error[E0308]: `#[start]` function has wrong type\n   --> $DIR/issue-9575.rs:4:1\n    |\n LL | fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {"}, {"sha": "bc7b787cd65ac3bff77e4b354bd08839731e2f3b", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -13,7 +13,7 @@ fn foo(\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR match arms have incompatible types\n+        _ => y, //~ ERROR `match` arms have incompatible types\n     };\n }\n "}, {"sha": "6d5d51174699fa17569e33b837610acf441487f0", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/old-lub-glb-hr.rs:16:14\n    |\n LL |       let z = match 22 {"}, {"sha": "63bbae59991bc3e9ad736754c36aaecdc7619449", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -9,7 +9,7 @@ fn foo(\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR match arms have incompatible types\n+        _ => y, //~ ERROR `match` arms have incompatible types\n     };\n }\n "}, {"sha": "65c797f6b19d70083531f76d7c1fa928aa850d81", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/old-lub-glb-object.rs:12:14\n    |\n LL |       let z = match 22 {"}, {"sha": "31deba72af4b3eb404ab07390d39d25bd353962a", "filename": "src/test/ui/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-type.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -4,5 +4,5 @@ struct S {\n }\n \n fn main(foo: S) {\n-//~^ ERROR: main function has wrong type [E0580]\n+//~^ ERROR: `main` function has wrong type [E0580]\n }"}, {"sha": "43efaf884e3a7aab2a36f1f732b29e32b9cdb724", "filename": "src/test/ui/main-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-type.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/main-wrong-type.rs:6:1\n    |\n LL | fn main(foo: S) {"}, {"sha": "6ef249c05247e390231ce8fa98d7d9a8a0b97bbf", "filename": "src/test/ui/match/match-arm-resolving-to-never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         E::C => 3,\n         E::D => 4,\n         E::E => unimplemented!(\"\"),\n-        E::F => \"\", //~ ERROR match arms have incompatible types\n+        E::F => \"\", //~ ERROR `match` arms have incompatible types\n     };\n }"}, {"sha": "3a723de9f6b8a346defb89157128928d27318a34", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-arm-resolving-to-never.rs:17:17\n    |\n LL | /     match E::F {"}, {"sha": "e9027eb24897fe2e0c2d6889f38897c9a8474107", "filename": "src/test/ui/match/match-type-err-first-arm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -16,7 +16,7 @@ fn test_func2(n: i32) -> i32 {\n     let x = match n { //~ NOTE `match` arms have incompatible types\n         12 => 'b', //~ NOTE this is found to be of type `char`\n         _ => 42,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `char`, found integer\n     };\n     x\n@@ -32,7 +32,7 @@ fn test_func3(n: i32) -> i32 {\n         6 => 'b',\n         //~^ NOTE this and all prior arms are found to be of type `char`\n         _ => 42,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `char`, found integer\n     };\n     x\n@@ -44,7 +44,7 @@ fn test_func4() {\n             x //~ NOTE this is found to be of type `u32`\n         },\n         None => {}\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `u32`, found `()`\n     };\n }"}, {"sha": "fd489afa84db4ed5f2dcb156003113673956015a", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -7,7 +7,7 @@ LL |     match n {\n LL |         12 => 'b',\n    |               ^^^ expected `i32`, found `char`\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14\n    |\n LL |       let x = match n {\n@@ -21,7 +21,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:34:14\n    |\n LL |       let x = match n {\n@@ -40,7 +40,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:46:17\n    |\n LL | /     match Some(0u32) {"}, {"sha": "a80e5df1a26a2057c00adf868a00be3ec94a476a", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -29,7 +29,7 @@ fn qux() -> impl std::fmt::Display {\n         0i32\n     } else {\n         1u32\n-        //~^ ERROR if and else have incompatible types\n+        //~^ ERROR `if` and `else` have incompatible types\n     }\n }\n "}, {"sha": "27b86007451d860fe3b6385aa904d665e3fff79f", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -34,7 +34,7 @@ LL |     } else {\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n    |\n LL | /     if false {\n@@ -45,7 +45,7 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |\n LL | |     }\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14"}, {"sha": "750cc3566e032e3afe251d11c2f7eeca55c06faf", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/region-invariant-static-error-reporting.rs:17:9\n    |\n LL |       let bad = if x.is_some() {\n@@ -9,7 +9,7 @@ LL | |     } else {\n LL | |         mk_static()\n    | |         ^^^^^^^^^^^ lifetime mismatch\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n    |\n    = note: expected struct `Invariant<'a>`\n               found struct `Invariant<'static>`"}, {"sha": "323eefb381af92b1eb2de54d88c165d35a59083c", "filename": "src/test/ui/str/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n   let s = \"abc\";\n   let t = if true { s[..2] } else { s };\n-  //~^ ERROR if and else have incompatible types\n+  //~^ ERROR `if` and `else` have incompatible types\n   let u: &str = if true { s[..2] } else { s };\n   //~^ ERROR mismatched types\n   let v = s[..2];"}, {"sha": "cc767de3845d28c1d382d6add13d8a70df7ccb3f", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/str-array-assignment.rs:3:37\n    |\n LL |   let t = if true { s[..2] } else { s };"}, {"sha": "5e1147403143e55bd436d9b707a6031adcd3e200", "filename": "src/test/ui/suggestions/opaque-type-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -17,7 +17,7 @@ async fn thing() -> Result<(), ()> {\n     if true {\n         thing_one()\n     } else {\n-        thing_two() //~ ERROR if and else have incompatible types\n+        thing_two() //~ ERROR `if` and `else` have incompatible types\n     }.await\n }\n "}, {"sha": "1465b9e49ef1aba38880a2fc2c77dbe2cc2fb9f1", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n LL | /     if true {\n@@ -8,7 +8,7 @@ LL | |     } else {\n LL | |         thing_two()\n    | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n LL | |     }.await\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n    |\n    = note:     expected type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n            found opaque type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)"}, {"sha": "c39ab954473cd6f4eed6cb3a45e473ef473cf003", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -20,7 +20,7 @@ fn main() {\n         // However, in #67273, we would delay the unification of this arm with the above\n         // because we used the hitherto accumulated coercion as opposed to the \"initial\" type.\n         2 => i = 1,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n \n         _ => (),\n     }"}, {"sha": "a431fe89c237c5a6439486c1a98c066ae1a19c4c", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs:22:14\n    |\n LL | /     match i {"}, {"sha": "594fad4138505fcfb0e28b2ec430d370894a59ff", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a12c539aed35a39372ebd7a88039922a306822/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=10a12c539aed35a39372ebd7a88039922a306822", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/wf-unsafe-trait-obj-match.rs:23:17\n    |\n LL | /     match opt() {"}]}