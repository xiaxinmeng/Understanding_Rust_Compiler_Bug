{"sha": "f2a1aa2649ad030f189c54245ee182a0aa6983ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYTFhYTI2NDlhZDAzMGYxODljNTQyNDVlZTE4MmEwYWE2OTgzZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T00:11:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:42:51Z"}, "message": "rt: Hold schedulers in a map", "tree": {"sha": "2bb59ac5f6ea60227f4c33a61228ba4441410530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bb59ac5f6ea60227f4c33a61228ba4441410530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a1aa2649ad030f189c54245ee182a0aa6983ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a1aa2649ad030f189c54245ee182a0aa6983ed", "html_url": "https://github.com/rust-lang/rust/commit/f2a1aa2649ad030f189c54245ee182a0aa6983ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a1aa2649ad030f189c54245ee182a0aa6983ed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028af5cb6c588a33b0bf5cbf451236407f5ba110", "url": "https://api.github.com/repos/rust-lang/rust/commits/028af5cb6c588a33b0bf5cbf451236407f5ba110", "html_url": "https://github.com/rust-lang/rust/commit/028af5cb6c588a33b0bf5cbf451236407f5ba110"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "b534c7f5414457544f0030d82f8713b3d5ca1ea8", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f2a1aa2649ad030f189c54245ee182a0aa6983ed/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f2a1aa2649ad030f189c54245ee182a0aa6983ed/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=f2a1aa2649ad030f189c54245ee182a0aa6983ed", "patch": "@@ -1,3 +1,4 @@\n+#include <vector>\n #include \"rust_internal.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n@@ -15,6 +16,7 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     max_task_id(0),\n     rval(0),\n     live_schedulers(0),\n+    max_sched_id(0),\n     env(srv->env)\n {\n }\n@@ -56,25 +58,45 @@ void rust_kernel::free(void *mem) {\n \n rust_sched_id\n rust_kernel::create_scheduler(size_t num_threads) {\n-    I(this, live_schedulers == 0);\n-    sched = new (this, \"rust_scheduler\")\n-        rust_scheduler(this, srv, num_threads, 0);\n-    live_schedulers = 1;\n+    I(this, !sched_lock.lock_held_by_current_thread());\n+    rust_scheduler *sched;\n+    {\n+        scoped_lock with(sched_lock);\n+        rust_sched_id id = max_sched_id++;\n+        K(srv, id != INTPTR_MAX, \"Hit the maximum scheduler id\");\n+        sched = new (this, \"rust_scheduler\")\n+            rust_scheduler(this, srv, num_threads, id);\n+        bool is_new = sched_table\n+            .insert(std::pair<rust_sched_id, rust_scheduler*>(id, sched)).second;\n+        A(this, is_new, \"Reusing a sched id?\");\n+        live_schedulers++;\n+    }\n     sched->start_task_threads();\n     return 0;\n }\n \n rust_scheduler *\n rust_kernel::get_scheduler_by_id(rust_sched_id id) {\n-    return sched;\n+    I(this, !sched_lock.lock_held_by_current_thread());\n+    scoped_lock with(sched_lock);\n+    sched_map::iterator iter = sched_table.find(id);\n+    if (iter != sched_table.end()) {\n+        return iter->second;\n+    } else {\n+        return NULL;\n+    }\n }\n \n void\n rust_kernel::release_scheduler_id(rust_sched_id id) {\n     I(this, !sched_lock.lock_held_by_current_thread());\n     scoped_lock with(sched_lock);\n+    sched_map::iterator iter = sched_table.find(id);\n+    I(this, iter != sched_table.end());\n+    rust_scheduler *sched = iter->second;\n+    sched_table.erase(iter);\n     delete sched;\n-    --live_schedulers;\n+    live_schedulers--;\n     if (live_schedulers == 0) {\n         // We're all done. Tell the main thread to continue\n         sched_lock.signal();\n@@ -93,6 +115,7 @@ rust_kernel::wait_for_schedulers()\n     return rval;\n }\n \n+// FIXME: Fix all these FIXMEs\n void\n rust_kernel::fail() {\n     // FIXME: On windows we're getting \"Application has requested the\n@@ -102,7 +125,29 @@ rust_kernel::fail() {\n #if defined(__WIN32__)\n     exit(rval);\n #endif\n-    sched->kill_all_tasks();\n+    // Copy the list of schedulers so that we don't hold the lock while\n+    // running kill_all_tasks.\n+    // FIXME: There's a lot that happens under kill_all_tasks, and I don't\n+    // know that holding sched_lock here is ok, but we need to hold the\n+    // sched lock to prevent the scheduler from being destroyed while\n+    // we are using it. Probably we need to make rust_scheduler atomicly\n+    // reference counted.\n+    std::vector<rust_scheduler*> scheds;\n+    {\n+        scoped_lock with(sched_lock);\n+        for (sched_map::iterator iter = sched_table.begin();\n+             iter != sched_table.end(); iter++) {\n+            scheds.push_back(iter->second);\n+        }\n+    }\n+\n+    // FIXME: This is not a foolproof way to kill all tasks while ensuring\n+    // that no new tasks or schedulers are created in the meantime that\n+    // keep the scheduler alive.\n+    for (std::vector<rust_scheduler*>::iterator iter = scheds.begin();\n+         iter != scheds.end(); iter++) {\n+        (*iter)->kill_all_tasks();\n+    }\n }\n \n void"}, {"sha": "2b7662220fd1c2f97e724de189994da2bbbfff19", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2a1aa2649ad030f189c54245ee182a0aa6983ed/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/f2a1aa2649ad030f189c54245ee182a0aa6983ed/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=f2a1aa2649ad030f189c54245ee182a0aa6983ed", "patch": "@@ -2,12 +2,15 @@\n #ifndef RUST_KERNEL_H\n #define RUST_KERNEL_H\n \n+#include <map>\n #include \"memory_region.h\"\n #include \"rust_log.h\"\n \n struct rust_task_thread;\n struct rust_scheduler;\n \n+typedef std::map<rust_sched_id, rust_scheduler*> sched_map;\n+\n /**\n  * A global object shared by all thread domains. Most of the data structures\n  * in this class are synchronized since they are accessed from multiple\n@@ -20,8 +23,6 @@ class rust_kernel {\n public:\n     rust_srv *srv;\n private:\n-    rust_scheduler *sched;\n-\n     // Protects live_tasks, max_task_id and task_table\n     lock_and_signal task_lock;\n     // Tracks the number of tasks that are being managed by\n@@ -35,12 +36,14 @@ class rust_kernel {\n     lock_and_signal rval_lock;\n     int rval;\n \n-    // Protects live_schedulers\n+    // Protects live_schedulers, max_sched_id and sched_table\n     lock_and_signal sched_lock;\n     // Tracks the number of schedulers currently running.\n     // When this hits 0 we will signal the sched_lock and the\n     // kernel will terminate.\n     uintptr_t live_schedulers;\n+    rust_sched_id max_sched_id;\n+    sched_map sched_table;\n \n public:\n "}]}