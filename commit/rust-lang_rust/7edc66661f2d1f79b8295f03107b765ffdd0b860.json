{"sha": "7edc66661f2d1f79b8295f03107b765ffdd0b860", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZGM2NjY2MWYyZDFmNzliODI5NWYwMzEwN2I3NjVmZmRkMGI4NjA=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-11T16:34:57Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-11T16:34:57Z"}, "message": "updates based on reviews\n\nFix an error in `map_or_else`. Use more descriptive text for\n\"don't care\" in truth tables. Make minor corrections to truth tables.\nRename `makeiter` to `make_iter` in examples.", "tree": {"sha": "7f791090551f0f95630c0f1af650064473929cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f791090551f0f95630c0f1af650064473929cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7edc66661f2d1f79b8295f03107b765ffdd0b860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7edc66661f2d1f79b8295f03107b765ffdd0b860", "html_url": "https://github.com/rust-lang/rust/commit/7edc66661f2d1f79b8295f03107b765ffdd0b860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7edc66661f2d1f79b8295f03107b765ffdd0b860/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54d59b1824eaf006eb966a93596b980eac2c934", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54d59b1824eaf006eb966a93596b980eac2c934", "html_url": "https://github.com/rust-lang/rust/commit/d54d59b1824eaf006eb966a93596b980eac2c934"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "a2abfe658bd6d310db638b3726d76f01dcc77827", "filename": "library/core/src/option.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7edc66661f2d1f79b8295f03107b765ffdd0b860/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edc66661f2d1f79b8295f03107b765ffdd0b860/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7edc66661f2d1f79b8295f03107b765ffdd0b860", "patch": "@@ -148,7 +148,7 @@\n //! * [`map_or`] transforms [`Some<T>`] to a value of `U` using the\n //!   provided function, or transforms [`None`] to a provided default value\n //!   of `U`\n-//! * [`map_or_else`] transforms [`Some<T>`] to [`Some<U>`] using the\n+//! * [`map_or_else`] transforms [`Some<T>`] to a value of `U` using the\n //!   provided function, or transforms [`None`] to a value of `U` using\n //!   another provided function\n //! * [`ok_or`] transforms [`Some(v)`] to [`Ok(v)`], and [`None`] to\n@@ -179,11 +179,12 @@\n //!\n //! | method  | self      | input     | output    |\n //! |---------|-----------|-----------|-----------|\n-//! | [`and`] | N/A       | `None`    | `None`    |\n+//! | [`and`] | `None`    | (ignored) | `None`    |\n+//! | [`and`] | `Some(x)` | `None`    | `None`    |\n //! | [`and`] | `Some(x)` | `Some(y)` | `Some(y)` |\n //! | [`or`]  | `None`    | `None`    | `None`    |\n //! | [`or`]  | `None`    | `Some(y)` | `Some(y)` |\n-//! | [`or`]  | `Some(x)` | N/A       | `Some(x)` |\n+//! | [`or`]  | `Some(x)` | (ignored) | `Some(x)` |\n //! | [`xor`] | `None`    | `None`    | `None`    |\n //! | [`xor`] | `None`    | `Some(y)` | `Some(y)` |\n //! | [`xor`] | `Some(x)` | `None`    | `Some(x)` |\n@@ -199,15 +200,15 @@\n //!\n //! | method       | self      | function input | function result | output    |\n //! |--------------|-----------|----------------|-----------------|-----------|\n-//! | [`and_then`] | `None`    | N/A            | (not evaluated) | `None`    |\n+//! | [`and_then`] | `None`    | (not provided) | (not evaluated) | `None`    |\n //! | [`and_then`] | `Some(x)` | `x`            | `None`          | `None`    |\n //! | [`and_then`] | `Some(x)` | `x`            | `Some(y)`       | `Some(y)` |\n-//! | [`filter`]   | `None`    | N/A            | (not evaluated) | `None`    |\n+//! | [`filter`]   | `None`    | (not provided) | (not evaluated) | `None`    |\n //! | [`filter`]   | `Some(x)` | `x`            | `false`         | `None`    |\n //! | [`filter`]   | `Some(x)` | `x`            | `true`          | `Some(x)` |\n-//! | [`or_else`]  | `None`    | N/A            | `None`          | `None`    |\n-//! | [`or_else`]  | `None`    | N/A            | `Some(y)`       | `Some(y)` |\n-//! | [`or_else`]  | `Some(x)` | N/A            | (not evaluated) | `Some(x)` |\n+//! | [`or_else`]  | `None`    | (not provided) | `None`          | `None`    |\n+//! | [`or_else`]  | `None`    | (not provided) | `Some(y)`       | `Some(y)` |\n+//! | [`or_else`]  | `Some(x)` | (not provided) | (not evaluated) | `Some(x)` |\n //!\n //! [`and`]: Option::and\n //! [`and_then`]: Option::and_then\n@@ -266,11 +267,11 @@\n //! let yep = Some(42);\n //! let nope = None;\n //!\n-//! fn makeiter(opt: Option<i32>) -> impl Iterator<Item = i32> {\n+//! fn make_iter(opt: Option<i32>) -> impl Iterator<Item = i32> {\n //!     (0..4).chain(opt.into_iter()).chain(4..8)\n //! }\n-//! println!(\"{:?}\", makeiter(yep).collect::<Vec<_>>());\n-//! println!(\"{:?}\", makeiter(nope).collect::<Vec<_>>());\n+//! println!(\"{:?}\", make_iter(yep).collect::<Vec<_>>());\n+//! println!(\"{:?}\", make_iter(nope).collect::<Vec<_>>());\n //! ```\n //!\n //! If we try to do the same thing, but using pattern matching, we can't\n@@ -281,7 +282,7 @@\n //! # use std::iter::{empty, once};\n //! // This won't compile because all possible returns from the function\n //! // must have the same concrete type.\n-//! fn makeiter(opt: Option<i32>) -> impl Iterator<Item = i32> {\n+//! fn make_iter(opt: Option<i32>) -> impl Iterator<Item = i32> {\n //!     match opt {\n //!         Some(x) => return (0..4).chain(once(x)).chain(4..8),\n //!         None => return (0..4).chain(empty()).chain(4..8)"}, {"sha": "bad75b722b1bd7cb511cd9c00ae596ba7c0786c7", "filename": "library/core/src/result.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7edc66661f2d1f79b8295f03107b765ffdd0b860/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edc66661f2d1f79b8295f03107b765ffdd0b860/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=7edc66661f2d1f79b8295f03107b765ffdd0b860", "patch": "@@ -239,13 +239,14 @@\n //! [`Result<U, E>`] value having a different inner type `U` than\n //! [`Result<T, E>`].\n //!\n-//! | method  | self     | input    | output   |\n-//! |---------|----------|----------|----------|\n-//! | [`and`] | N/A      | `Err(e)` | `Err(e)` |\n-//! | [`and`] | `Ok(x)`  | `Ok(y)`  | `Ok(y)`  |\n-//! | [`or`]  | `Err(e)` | `Err(d)` | `Err(d)` |\n-//! | [`or`]  | `Err(e)` | `Ok(y)`  | `Ok(y)`  |\n-//! | [`or`]  | `Ok(x)`  | N/A      | `Ok(x)`  |\n+//! | method  | self     | input     | output   |\n+//! |---------|----------|-----------|----------|\n+//! | [`and`] | `Err(e)` | (ignored) | `Err(e)` |\n+//! | [`and`] | `Ok(x)`  | `Err(d)`  | `Err(d)` |\n+//! | [`and`] | `Ok(x)`  | `Ok(y)`   | `Ok(y)`  |\n+//! | [`or`]  | `Err(e)` | `Err(d)`  | `Err(d)` |\n+//! | [`or`]  | `Err(e)` | `Ok(y)`   | `Ok(y)`  |\n+//! | [`or`]  | `Ok(x)`  | (ignored) | `Ok(x)`  |\n //!\n //! The [`and_then`] and [`or_else`] methods take a function as input, and\n //! only evaluate the function when they need to produce a new value. Only\n@@ -254,12 +255,12 @@\n //!\n //! | method       | self     | function input | function result | output   |\n //! |--------------|----------|----------------|-----------------|----------|\n-//! | [`and_then`] | `Err(e)` | N/A            | (not evaluated) | `Err(e)` |\n+//! | [`and_then`] | `Err(e)` | (not provided) | (not evaluated) | `Err(e)` |\n //! | [`and_then`] | `Ok(x)`  | `x`            | `Err(d)`        | `Err(d)` |\n //! | [`and_then`] | `Ok(x)`  | `x`            | `Ok(y)`         | `Ok(y)`  |\n //! | [`or_else`]  | `Err(e)` | `e`            | `Err(d)`        | `Err(d)` |\n //! | [`or_else`]  | `Err(e)` | `e`            | `Ok(y)`         | `Ok(y)`  |\n-//! | [`or_else`]  | `Ok(x)`  | N/A            | (not evaluated) | `Ok(x)`  |\n+//! | [`or_else`]  | `Ok(x)`  | (not provided) | (not evaluated) | `Ok(x)`  |\n //!\n //! [`and`]: Result::and\n //! [`and_then`]: Result::and_then"}]}