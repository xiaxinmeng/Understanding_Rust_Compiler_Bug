{"sha": "8b64988575d4b71616620bd78d9c2e9a4f526232", "node_id": "C_kwDOAAsO6NoAKDhiNjQ5ODg1NzVkNGI3MTYxNjYyMGJkNzhkOWMyZTlhNGY1MjYyMzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-30T09:41:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T01:21:11Z"}, "message": "Fix error message with non-tupled bare fn trait", "tree": {"sha": "f952d4c28b93b1e29015c00389e4c770f64df516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f952d4c28b93b1e29015c00389e4c770f64df516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b64988575d4b71616620bd78d9c2e9a4f526232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b64988575d4b71616620bd78d9c2e9a4f526232", "html_url": "https://github.com/rust-lang/rust/commit/8b64988575d4b71616620bd78d9c2e9a4f526232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b64988575d4b71616620bd78d9c2e9a4f526232/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40336865fe7d4a01139a3336639c6971647e885c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40336865fe7d4a01139a3336639c6971647e885c", "html_url": "https://github.com/rust-lang/rust/commit/40336865fe7d4a01139a3336639c6971647e885c"}], "stats": {"total": 139, "additions": 101, "deletions": 38}, "files": [{"sha": "3c7dac2bfd816876d04a9b55d7c45595285ac6e2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -1750,6 +1750,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()\n             && let Some(def_id) = def_id.as_local()\n+            && terr.involves_regions()\n         {\n             let span = self.tcx.def_span(def_id);\n             diag.span_note(span, \"this closure does not fulfill the lifetime requirements\");"}, {"sha": "444817f396e567b87744da72c5d221665370ad4b", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -1935,6 +1935,18 @@ impl<'tcx> TypeTrace<'tcx> {\n         }\n     }\n \n+    pub fn poly_trait_refs(\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: ty::PolyTraitRef<'tcx>,\n+        b: ty::PolyTraitRef<'tcx>,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n+    }\n+\n     pub fn consts(\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,"}, {"sha": "ac89bec702efddd04e176750b07c452b642d881e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -74,6 +74,18 @@ pub enum TypeError<'tcx> {\n     TargetFeatureCast(DefId),\n }\n \n+impl TypeError<'_> {\n+    pub fn involves_regions(self) -> bool {\n+        match self {\n+            TypeError::RegionsDoesNotOutlive(_, _)\n+            | TypeError::RegionsInsufficientlyPolymorphic(_, _)\n+            | TypeError::RegionsOverlyPolymorphic(_, _)\n+            | TypeError::RegionsPlaceholderMismatch => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// Explains the source of a type err in a short, human readable way. This is meant to be placed\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related"}, {"sha": "1a39a1680384dced9379ddbeb194c840cfe09330", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -22,6 +22,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n+use rustc_infer::infer::TypeTrace;\n use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n@@ -941,20 +942,43 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 self.reported_closure_mismatch.borrow_mut().insert((span, found_span));\n \n+                let mut not_tupled = false;\n+\n                 let found = match found_trait_ref.skip_binder().substs.type_at(1).kind() {\n                     ty::Tuple(ref tys) => vec![ArgKind::empty(); tys.len()],\n-                    _ => vec![ArgKind::empty()],\n+                    _ => {\n+                        not_tupled = true;\n+                        vec![ArgKind::empty()]\n+                    }\n                 };\n \n                 let expected_ty = expected_trait_ref.skip_binder().substs.type_at(1);\n                 let expected = match expected_ty.kind() {\n                     ty::Tuple(ref tys) => {\n                         tys.iter().map(|t| ArgKind::from_expected_ty(t, Some(span))).collect()\n                     }\n-                    _ => vec![ArgKind::Arg(\"_\".to_owned(), expected_ty.to_string())],\n+                    _ => {\n+                        not_tupled = true;\n+                        vec![ArgKind::Arg(\"_\".to_owned(), expected_ty.to_string())]\n+                    }\n                 };\n \n-                if found.len() == expected.len() {\n+                // If this is a `Fn` family trait and either the expected or found\n+                // is not tupled, then fall back to just a regular mismatch error.\n+                // This shouldn't be common unless manually implementing one of the\n+                // traits manually, but don't make it more confusing when it does\n+                // happen.\n+                if Some(expected_trait_ref.def_id()) != tcx.lang_items().gen_trait() && not_tupled {\n+                    self.report_and_explain_type_error(\n+                        TypeTrace::poly_trait_refs(\n+                            &obligation.cause,\n+                            true,\n+                            expected_trait_ref,\n+                            found_trait_ref,\n+                        ),\n+                        ty::error::TypeError::Mismatch,\n+                    )\n+                } else if found.len() == expected.len() {\n                     self.report_closure_arg_mismatch(\n                         span,\n                         found_span,"}, {"sha": "e66ef6aaeda062b7a4a874d67db7fc391514f331", "filename": "src/test/ui/mismatched_types/E0631.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -5,7 +5,7 @@ fn bar<F: Fn<usize>>(_: F) {}\n fn main() {\n     fn f(_: u64) {}\n     foo(|_: isize| {}); //~ ERROR type mismatch\n-    bar(|_: isize| {}); //~ ERROR type mismatch\n+    bar(|_: isize| {}); //~ ERROR mismatched types\n     foo(f); //~ ERROR type mismatch\n-    bar(f); //~ ERROR type mismatch\n+    bar(f); //~ ERROR mismatched types\n }"}, {"sha": "fefb6fea4eb9f2bec7c142221863e763ae194c9f", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -14,16 +14,14 @@ note: required by a bound in `foo`\n LL | fn foo<F: Fn(usize)>(_: F) {}\n    |           ^^^^^^^^^ required by this bound in `foo`\n \n-error[E0631]: type mismatch in closure arguments\n+error[E0308]: mismatched types\n   --> $DIR/E0631.rs:8:5\n    |\n LL |     bar(|_: isize| {});\n-   |     ^^^ ---------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     ^^^ types differ\n    |\n-   = note: expected closure signature `fn(usize) -> _`\n-              found closure signature `fn(isize) -> _`\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<(isize,)>`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n@@ -49,19 +47,16 @@ note: required by a bound in `foo`\n LL | fn foo<F: Fn(usize)>(_: F) {}\n    |           ^^^^^^^^^ required by this bound in `foo`\n \n-error[E0631]: type mismatch in function arguments\n+error[E0308]: mismatched types\n   --> $DIR/E0631.rs:10:9\n    |\n-LL |     fn f(_: u64) {}\n-   |     ------------ found signature defined here\n-...\n LL |     bar(f);\n-   |     --- ^ expected due to this\n+   |     --- ^ types differ\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: expected function signature `fn(usize) -> _`\n-              found function signature `fn(u64) -> _`\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<(u64,)>`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n@@ -70,4 +65,5 @@ LL | fn bar<F: Fn<usize>>(_: F) {}\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0631`.\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "b6759d750c8c96a593fc112a2567c96f929218ce", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -11,9 +11,9 @@ fn main() {\n     [1, 2, 3].sort_by(|(tuple, tuple2): (usize, _)| panic!());\n     //~^ ERROR closure is expected to take\n     f(|| panic!());\n-    //~^ ERROR closure is expected to take\n+    //~^ ERROR mismatched types\n     f(  move    || panic!());\n-    //~^ ERROR closure is expected to take\n+    //~^ ERROR mismatched types\n \n     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n     //~^ ERROR closure is expected to take"}, {"sha": "d13e5d682da47cb0303ff39e2d9239b5bd382cb2", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -45,41 +45,33 @@ help: change the closure to take multiple arguments instead of a single tuple\n LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n    |                       ~~~~~~~~~~~~~~~\n \n-error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n+error[E0308]: mismatched types\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n LL |     f(|| panic!());\n-   |     ^ -- takes 0 arguments\n-   |     |\n-   |     expected closure that takes 1 argument\n+   |     ^ types differ\n    |\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<()>`\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n    |         ^^^^^^^^^ required by this bound in `f`\n-help: consider changing the closure to take and ignore the expected argument\n-   |\n-LL |     f(|_| panic!());\n-   |       ~~~\n \n-error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n+error[E0308]: mismatched types\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n LL |     f(  move    || panic!());\n-   |     ^   ---------- takes 0 arguments\n-   |     |\n-   |     expected closure that takes 1 argument\n+   |     ^ types differ\n    |\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<()>`\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n    |         ^^^^^^^^^ required by this bound in `f`\n-help: consider changing the closure to take and ignore the expected argument\n-   |\n-LL |     f(  move    |_| panic!());\n-   |                 ~~~\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:18:53\n@@ -198,4 +190,5 @@ LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n \n error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0593`.\n+Some errors have detailed explanations: E0308, E0593.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "925463d6deedc1fa156434fcd72c8473cff4f9b1", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -0,0 +1,8 @@\n+#![feature(unboxed_closures)]\n+\n+fn a<F: Fn<usize>>(f: F) {}\n+\n+fn main() {\n+    a(|_: usize| {});\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9a24fb8c2beec57fcf2f38af5418ecde62272af1", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b64988575d4b71616620bd78d9c2e9a4f526232/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=8b64988575d4b71616620bd78d9c2e9a4f526232", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n+   |\n+LL |     a(|_: usize| {});\n+   |     ^ types differ\n+   |\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<(usize,)>`\n+note: required by a bound in `a`\n+  --> $DIR/non-tupled-arg-mismatch.rs:3:9\n+   |\n+LL | fn a<F: Fn<usize>>(f: F) {}\n+   |         ^^^^^^^^^ required by this bound in `a`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}