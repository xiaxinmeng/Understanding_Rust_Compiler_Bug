{"sha": "8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYmFiNTEyMWUyMTRhMDg2OTBlZWZkYWEzZWU0NWJiMmQxYmJkNWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-16T16:48:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-24T17:59:44Z"}, "message": "syntax: Don't parse idents with `parse_path`\n\nLift some restrictions on type parameters in paths\nSanity check import paths for type parameters", "tree": {"sha": "d210176cf841c3da5b57b53ac84805b5d92b653b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d210176cf841c3da5b57b53ac84805b5d92b653b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "html_url": "https://github.com/rust-lang/rust/commit/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c821d35ee5cb5211f92480a53b409b2b2c359e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c821d35ee5cb5211f92480a53b409b2b2c359e", "html_url": "https://github.com/rust-lang/rust/commit/e2c821d35ee5cb5211f92480a53b409b2b2c359e"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "f92673b781e322010c60719e1f78a9095587ad90", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "patch": "@@ -120,7 +120,7 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n         // prevent `self` or `super` at beginning of global path\n         if path.global && path.segments.len() > 0 {\n             let first = path.segments[0].identifier.name;\n-            if first == keywords::Super.to_name() || first == keywords::SelfValue.to_name() {\n+            if first == keywords::Super.ident.name || first == keywords::SelfValue.ident.name {\n                 self.session.add_lint(\n                     lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH, id, path.span,\n                     format!(\"expected identifier, found keyword `{}`\", first)"}, {"sha": "3eec497c3317c6fdddd2ccf7b2013281d1e9c62c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8dbab5121e214a08690eefdaa3ee45bb2d1bbd5e", "patch": "@@ -583,6 +583,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_ident_into_path(&mut self) -> PResult<'a, ast::Path> {\n+        let ident = self.parse_ident()?;\n+        Ok(ast::Path::from_ident(self.last_span, ident))\n+    }\n+\n     /// Check if the next token is `tok`, and return `true` if so.\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not\n@@ -1462,7 +1467,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_lt() {\n \n             let (qself, path) =\n-                 self.parse_qualified_path(NoTypesAllowed)?;\n+                 self.parse_qualified_path(LifetimeAndTypesWithoutColons)?;\n \n             TyKind::Path(Some(qself), path)\n         } else if self.is_path_start() {\n@@ -3573,7 +3578,7 @@ impl<'a> Parser<'a> {\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path\n                 let (qself, path) =\n-                    self.parse_qualified_path(NoTypesAllowed)?;\n+                    self.parse_qualified_path(LifetimeAndTypesWithColons)?;\n                 (Some(qself), path)\n             } else {\n                 // Parse an unqualified path\n@@ -3651,9 +3656,7 @@ impl<'a> Parser<'a> {\n                     // Plain idents have some extra abilities here compared to general paths\n                     if self.look_ahead(1, |t| *t == token::Not) {\n                         // Parse macro invocation\n-                        let ident = self.parse_ident()?;\n-                        let ident_span = self.last_span;\n-                        let path = ast::Path::from_ident(ident_span, ident);\n+                        let path = self.parse_ident_into_path()?;\n                         self.bump();\n                         let delim = self.expect_open_delim()?;\n                         let tts = self.parse_seq_to_end(\n@@ -3673,7 +3676,7 @@ impl<'a> Parser<'a> {\n                     let (qself, path) = if self.eat_lt() {\n                         // Parse a qualified path\n                         let (qself, path) =\n-                            self.parse_qualified_path(NoTypesAllowed)?;\n+                            self.parse_qualified_path(LifetimeAndTypesWithColons)?;\n                         (Some(qself), path)\n                     } else {\n                         // Parse an unqualified path\n@@ -3936,7 +3939,7 @@ impl<'a> Parser<'a> {\n \n             // Potential trouble: if we allow macros with paths instead of\n             // idents, we'd need to look ahead past the whole path here...\n-            let pth = self.parse_path(NoTypesAllowed)?;\n+            let pth = self.parse_ident_into_path()?;\n             self.bump();\n \n             let id = match self.token {\n@@ -4956,7 +4959,7 @@ impl<'a> Parser<'a> {\n             self.complain_if_pub_macro(&vis, last_span);\n \n             let lo = self.span.lo;\n-            let pth = self.parse_path(NoTypesAllowed)?;\n+            let pth = self.parse_ident_into_path()?;\n             self.expect(&token::Not)?;\n \n             // eat a matched-delimiter token tree:\n@@ -6009,7 +6012,7 @@ impl<'a> Parser<'a> {\n             let mac_lo = self.span.lo;\n \n             // item macro.\n-            let pth = self.parse_path(NoTypesAllowed)?;\n+            let pth = self.parse_ident_into_path()?;\n             self.expect(&token::Not)?;\n \n             // a 'special' identifier (like what `macro_rules!` uses)"}]}