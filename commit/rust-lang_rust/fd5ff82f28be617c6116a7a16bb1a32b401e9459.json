{"sha": "fd5ff82f28be617c6116a7a16bb1a32b401e9459", "node_id": "C_kwDOAAsO6NoAKGZkNWZmODJmMjhiZTYxN2M2MTE2YTdhMTZiYjFhMzJiNDAxZTk0NTk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:29Z"}, "message": "Rollup merge of #103468 - chenyukang:yukang/fix-103435-extra-parentheses, r=estebank\n\nFix unused lint and parser caring about spaces to won't produce invalid code\n\nFixes #103435", "tree": {"sha": "ae92031f0b9fc93db96cc59fabf83d2c240917f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae92031f0b9fc93db96cc59fabf83d2c240917f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5ff82f28be617c6116a7a16bb1a32b401e9459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ9CRBK7hj4Ov3rIwAADaQIAEyiEuKQUq2QuT30mFeOv5MN\noH639B2T4xvQef949jwRkNbQYgk3UOF9ksdvpRrdTT4JrTQ9K9GY+GFOL2uPNUNt\n6+iHYsnDDYISb3SgZb+BrBUtZF78zgMPfJQXJfea/40T3KXJsWCPHj7EBxc/Mlb3\nZjPqIaiNmZtDr1tKARse+EiO8gpsuqE5WhVJNHG4HIo3fmzM6VI80TTWvZ8gUT/X\n8mypN1FQj7INP3pRBnk9g4PsICxKL0LPboUMIjaFOk+BQ58yJB2Y2+gFPFXyMvkr\n9cIDeyxF9Fi/G6DbjYtVQ7IcLOeUMACuu4gZW86WhmsHNCO8xNrzpayxMupfZgg=\n=6Tew\n-----END PGP SIGNATURE-----\n", "payload": "tree ae92031f0b9fc93db96cc59fabf83d2c240917f9\nparent 9553fea23a8e04162684ec0679b1ca05e61159cb\nparent a46af18cb1aedf7ccc5fbebd6f126c71da6cd4ee\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186749 -0500\ncommitter GitHub <noreply@github.com> 1668186749 -0500\n\nRollup merge of #103468 - chenyukang:yukang/fix-103435-extra-parentheses, r=estebank\n\nFix unused lint and parser caring about spaces to won't produce invalid code\n\nFixes #103435\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5ff82f28be617c6116a7a16bb1a32b401e9459", "html_url": "https://github.com/rust-lang/rust/commit/fd5ff82f28be617c6116a7a16bb1a32b401e9459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5ff82f28be617c6116a7a16bb1a32b401e9459/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9553fea23a8e04162684ec0679b1ca05e61159cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9553fea23a8e04162684ec0679b1ca05e61159cb", "html_url": "https://github.com/rust-lang/rust/commit/9553fea23a8e04162684ec0679b1ca05e61159cb"}, {"sha": "a46af18cb1aedf7ccc5fbebd6f126c71da6cd4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a46af18cb1aedf7ccc5fbebd6f126c71da6cd4ee", "html_url": "https://github.com/rust-lang/rust/commit/a46af18cb1aedf7ccc5fbebd6f126c71da6cd4ee"}], "stats": {"total": 169, "additions": 149, "deletions": 20}, "files": [{"sha": "d4b083de27624360a9622b4499a006f71d89ecf9", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -565,10 +565,24 @@ trait UnusedDelimLint {\n             lint.set_arg(\"delim\", Self::DELIM_STR);\n             lint.set_arg(\"item\", msg);\n             if let Some((lo, hi)) = spans {\n-                let replacement = vec![\n-                    (lo, if keep_space.0 { \" \".into() } else { \"\".into() }),\n-                    (hi, if keep_space.1 { \" \".into() } else { \"\".into() }),\n-                ];\n+                let sm = cx.sess().source_map();\n+                let lo_replace =\n+                    if keep_space.0 &&\n+                        let Ok(snip) = sm.span_to_prev_source(lo) && !snip.ends_with(\" \") {\n+                        \" \".to_string()\n+                        } else {\n+                            \"\".to_string()\n+                        };\n+\n+                let hi_replace =\n+                    if keep_space.1 &&\n+                        let Ok(snip) = sm.span_to_next_source(hi) && !snip.starts_with(\" \") {\n+                        \" \".to_string()\n+                        } else {\n+                            \"\".to_string()\n+                        };\n+\n+                let replacement = vec![(lo, lo_replace), (hi, hi_replace)];\n                 lint.multipart_suggestion(\n                     fluent::suggestion,\n                     replacement,\n@@ -765,6 +779,7 @@ impl UnusedParens {\n         value: &ast::Pat,\n         avoid_or: bool,\n         avoid_mut: bool,\n+        keep_space: (bool, bool),\n     ) {\n         use ast::{BindingAnnotation, PatKind};\n \n@@ -789,7 +804,7 @@ impl UnusedParens {\n             } else {\n                 None\n             };\n-            self.emit_unused_delims(cx, value.span, spans, \"pattern\", (false, false));\n+            self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space);\n         }\n     }\n }\n@@ -798,7 +813,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         match e.kind {\n             ExprKind::Let(ref pat, _, _) | ExprKind::ForLoop(ref pat, ..) => {\n-                self.check_unused_parens_pat(cx, pat, false, false);\n+                self.check_unused_parens_pat(cx, pat, false, false, (true, true));\n             }\n             // We ignore parens in cases like `if (((let Some(0) = Some(1))))` because we already\n             // handle a hard error for them during AST lowering in `lower_expr_mut`, but we still\n@@ -842,40 +857,41 @@ impl EarlyLintPass for UnusedParens {\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n         use ast::{Mutability, PatKind::*};\n+        let keep_space = (false, false);\n         match &p.kind {\n             // Do not lint on `(..)` as that will result in the other arms being useless.\n             Paren(_)\n             // The other cases do not contain sub-patterns.\n             | Wild | Rest | Lit(..) | MacCall(..) | Range(..) | Ident(.., None) | Path(..) => {},\n             // These are list-like patterns; parens can always be removed.\n             TupleStruct(_, _, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n-                self.check_unused_parens_pat(cx, p, false, false);\n+                self.check_unused_parens_pat(cx, p, false, false, keep_space);\n             },\n             Struct(_, _, fps, _) => for f in fps {\n-                self.check_unused_parens_pat(cx, &f.pat, false, false);\n+                self.check_unused_parens_pat(cx, &f.pat, false, false, keep_space);\n             },\n             // Avoid linting on `i @ (p0 | .. | pn)` and `box (p0 | .. | pn)`, #64106.\n-            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false),\n+            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false, keep_space),\n             // Avoid linting on `&(mut x)` as `&mut x` has a different meaning, #55342.\n             // Also avoid linting on `& mut? (p0 | .. | pn)`, #64106.\n-            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Not),\n+            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Not, keep_space),\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let StmtKind::Local(ref local) = s.kind {\n-            self.check_unused_parens_pat(cx, &local.pat, true, false);\n+            self.check_unused_parens_pat(cx, &local.pat, true, false, (false, false));\n         }\n \n         <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, param: &ast::Param) {\n-        self.check_unused_parens_pat(cx, &param.pat, true, false);\n+        self.check_unused_parens_pat(cx, &param.pat, true, false, (false, false));\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n-        self.check_unused_parens_pat(cx, &arm.pat, false, false);\n+        self.check_unused_parens_pat(cx, &arm.pat, false, false, (false, false));\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {"}, {"sha": "d59982f7063f33e5756cdf62cfb60eecc0b7e576", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -1165,10 +1165,12 @@ pub(crate) struct ParenthesesInForHead {\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct ParenthesesInForHeadSugg {\n-    #[suggestion_part(code = \"\")]\n+    #[suggestion_part(code = \"{left_snippet}\")]\n     pub left: Span,\n-    #[suggestion_part(code = \"\")]\n+    pub left_snippet: String,\n+    #[suggestion_part(code = \"{right_snippet}\")]\n     pub right: Span,\n+    pub right_snippet: String,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "0bbe073fe2af4621c19f95e570bdd13367249e82", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -1653,15 +1653,29 @@ impl<'a> Parser<'a> {\n             (token::CloseDelim(Delimiter::Parenthesis), Some(begin_par_sp)) => {\n                 self.bump();\n \n+                let sm = self.sess.source_map();\n+                let left = begin_par_sp;\n+                let right = self.prev_token.span;\n+                let left_snippet = if let Ok(snip) = sm.span_to_prev_source(left) &&\n+                        !snip.ends_with(\" \") {\n+                                \" \".to_string()\n+                            } else {\n+                                \"\".to_string()\n+                            };\n+\n+                let right_snippet = if let Ok(snip) = sm.span_to_next_source(right) &&\n+                        !snip.starts_with(\" \") {\n+                                \" \".to_string()\n+                            } else {\n+                                \"\".to_string()\n+                        };\n+\n                 self.sess.emit_err(ParenthesesInForHead {\n-                    span: vec![begin_par_sp, self.prev_token.span],\n+                    span: vec![left, right],\n                     // With e.g. `for (x) in y)` this would replace `(x) in y)`\n                     // with `x) in y)` which is syntactically invalid.\n                     // However, this is prevented before we get here.\n-                    sugg: ParenthesesInForHeadSugg {\n-                        left: begin_par_sp,\n-                        right: self.prev_token.span,\n-                    },\n+                    sugg: ParenthesesInForHeadSugg { left, right, left_snippet, right_snippet },\n                 });\n \n                 // Unwrap `(pat)` into `pat` to avoid the `unused_parens` lint."}, {"sha": "2b01b414baa6ea8f57b33d0c2c858f11de50d838", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    if let Some(_) = Some(1) {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    for _x in 1..10 {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    if 2 == 1 {}\n+    //~^ ERROR unnecessary parentheses around `if` condition\n+\n+    // reported by parser\n+    for _x in 1..10 {}\n+    //~^ ERROR expected one of\n+    //~| ERROR unexpected parentheses surrounding\n+}"}, {"sha": "8261610cf5646ee045c4953718d926c30989da46", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    if let(Some(_))= Some(1) {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    for(_x)in 1..10 {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    if(2 == 1){}\n+    //~^ ERROR unnecessary parentheses around `if` condition\n+\n+    // reported by parser\n+    for(_x in 1..10){}\n+    //~^ ERROR expected one of\n+    //~| ERROR unexpected parentheses surrounding\n+}"}, {"sha": "29c41c91050b96e2de3bc587b3923f07e320debe", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd5ff82f28be617c6116a7a16bb1a32b401e9459/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr?ref=fd5ff82f28be617c6116a7a16bb1a32b401e9459", "patch": "@@ -0,0 +1,61 @@\n+error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n+  --> $DIR/issue-103435-extra-parentheses.rs:15:12\n+   |\n+LL |     for(_x in 1..10){}\n+   |            ^^ expected one of `)`, `,`, `@`, or `|`\n+\n+error: unexpected parentheses surrounding `for` loop head\n+  --> $DIR/issue-103435-extra-parentheses.rs:15:8\n+   |\n+LL |     for(_x in 1..10){}\n+   |        ^           ^\n+   |\n+help: remove parentheses in `for` loop\n+   |\n+LL -     for(_x in 1..10){}\n+LL +     for _x in 1..10 {}\n+   |\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-103435-extra-parentheses.rs:5:11\n+   |\n+LL |     if let(Some(_))= Some(1) {}\n+   |           ^       ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-103435-extra-parentheses.rs:2:9\n+   |\n+LL | #![deny(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     if let(Some(_))= Some(1) {}\n+LL +     if let Some(_) = Some(1) {}\n+   |\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-103435-extra-parentheses.rs:8:8\n+   |\n+LL |     for(_x)in 1..10 {}\n+   |        ^  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for(_x)in 1..10 {}\n+LL +     for _x in 1..10 {}\n+   |\n+\n+error: unnecessary parentheses around `if` condition\n+  --> $DIR/issue-103435-extra-parentheses.rs:11:7\n+   |\n+LL |     if(2 == 1){}\n+   |       ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if(2 == 1){}\n+LL +     if 2 == 1 {}\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}]}