{"sha": "680ff86391f19e12b485293f01372036e85ba87c", "node_id": "C_kwDOAAsO6NoAKDY4MGZmODYzOTFmMTllMTJiNDg1MjkzZjAxMzcyMDM2ZTg1YmE4N2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T11:34:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T11:34:40Z"}, "message": "Auto merge of #86525 - shamatar:array_len_opt, r=oli-obk\n\nArray `.len()` MIR optimization pass\n\nThis pass kind-of works back the `[T; N].len()` call that at the moment is first coerced as `&[T; N]` -> `&[T]` and then uses `&[T].len()`. Depends on #86383", "tree": {"sha": "408c58bd268e34156e8f42b8a4a36753277cba67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408c58bd268e34156e8f42b8a4a36753277cba67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680ff86391f19e12b485293f01372036e85ba87c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680ff86391f19e12b485293f01372036e85ba87c", "html_url": "https://github.com/rust-lang/rust/commit/680ff86391f19e12b485293f01372036e85ba87c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680ff86391f19e12b485293f01372036e85ba87c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "html_url": "https://github.com/rust-lang/rust/commit/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc"}, {"sha": "a31518fbf4843e7c998131a97f4a35beb60dd625", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31518fbf4843e7c998131a97f4a35beb60dd625", "html_url": "https://github.com/rust-lang/rust/commit/a31518fbf4843e7c998131a97f4a35beb60dd625"}], "stats": {"total": 988, "additions": 979, "deletions": 9}, "files": [{"sha": "9b11c8f0b24c0836fb96b3d31f82236d26e10b85", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -58,6 +58,7 @@ mod lower_intrinsics;\n mod lower_slice_len;\n mod match_branches;\n mod multiple_return_terminators;\n+mod normalize_array_len;\n mod nrvo;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n@@ -488,6 +489,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     // machine than on MIR with async primitives.\n     let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n         &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n+        &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n         &unreachable_prop::UnreachablePropagation,\n         &uninhabited_enum_branching::UninhabitedEnumBranching,\n         &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),"}, {"sha": "60e71130cd1dbc28920e9c6262a01f103015331e", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "added", "additions": 287, "deletions": 0, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,287 @@\n+//! This pass eliminates casting of arrays into slices when their length\n+//! is taken using `.len()` method. Handy to preserve information in MIR for const prop\n+\n+use crate::MirPass;\n+use rustc_data_structures::fx::FxIndexMap;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+\n+const MAX_NUM_BLOCKS: usize = 800;\n+const MAX_NUM_LOCALS: usize = 3000;\n+\n+pub struct NormalizeArrayLen;\n+\n+impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        if tcx.sess.mir_opt_level() < 4 {\n+            return;\n+        }\n+\n+        // early returns for edge cases of highly unrolled functions\n+        if body.basic_blocks().len() > MAX_NUM_BLOCKS {\n+            return;\n+        }\n+        if body.local_decls().len() > MAX_NUM_LOCALS {\n+            return;\n+        }\n+        normalize_array_len_calls(tcx, body)\n+    }\n+}\n+\n+pub fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+\n+    // do a preliminary analysis to see if we ever have locals of type `[T;N]` or `&[T;N]`\n+    let mut interesting_locals = BitSet::new_empty(local_decls.len());\n+    for (local, decl) in local_decls.iter_enumerated() {\n+        match decl.ty.kind() {\n+            ty::Array(..) => {\n+                interesting_locals.insert(local);\n+            }\n+            ty::Ref(.., ty, Mutability::Not) => match ty.kind() {\n+                ty::Array(..) => {\n+                    interesting_locals.insert(local);\n+                }\n+                _ => {}\n+            },\n+            _ => {}\n+        }\n+    }\n+    if interesting_locals.is_empty() {\n+        // we have found nothing to analyze\n+        return;\n+    }\n+    let num_intesting_locals = interesting_locals.count();\n+    let mut state = FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n+    let mut patches_scratchpad =\n+        FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n+    let mut replacements_scratchpad =\n+        FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n+    for block in basic_blocks {\n+        // make length calls for arrays [T; N] not to decay into length calls for &[T]\n+        // that forbids constant propagation\n+        normalize_array_len_call(\n+            tcx,\n+            block,\n+            local_decls,\n+            &interesting_locals,\n+            &mut state,\n+            &mut patches_scratchpad,\n+            &mut replacements_scratchpad,\n+        );\n+        state.clear();\n+        patches_scratchpad.clear();\n+        replacements_scratchpad.clear();\n+    }\n+}\n+\n+struct Patcher<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    patches_scratchpad: &'a FxIndexMap<usize, usize>,\n+    replacements_scratchpad: &'a mut FxIndexMap<usize, Local>,\n+    local_decls: &'a mut IndexVec<Local, LocalDecl<'tcx>>,\n+    statement_idx: usize,\n+}\n+\n+impl<'a, 'tcx> Patcher<'a, 'tcx> {\n+    fn patch_expand_statement(\n+        &mut self,\n+        statement: &mut Statement<'tcx>,\n+    ) -> Option<std::vec::IntoIter<Statement<'tcx>>> {\n+        let idx = self.statement_idx;\n+        if let Some(len_statemnt_idx) = self.patches_scratchpad.get(&idx).copied() {\n+            let mut statements = Vec::with_capacity(2);\n+\n+            // we are at statement that performs a cast. The only sound way is\n+            // to create another local that performs a similar copy without a cast and then\n+            // use this copy in the Len operation\n+\n+            match &statement.kind {\n+                StatementKind::Assign(box (\n+                    ..,\n+                    Rvalue::Cast(\n+                        CastKind::Pointer(ty::adjustment::PointerCast::Unsize),\n+                        operand,\n+                        _,\n+                    ),\n+                )) => {\n+                    match operand {\n+                        Operand::Copy(place) | Operand::Move(place) => {\n+                            // create new local\n+                            let ty = operand.ty(self.local_decls, self.tcx);\n+                            let local_decl =\n+                                LocalDecl::with_source_info(ty, statement.source_info.clone());\n+                            let local = self.local_decls.push(local_decl);\n+                            // make it live\n+                            let mut make_live_statement = statement.clone();\n+                            make_live_statement.kind = StatementKind::StorageLive(local);\n+                            statements.push(make_live_statement);\n+                            // copy into it\n+\n+                            let operand = Operand::Copy(*place);\n+                            let mut make_copy_statement = statement.clone();\n+                            let assign_to = Place::from(local);\n+                            let rvalue = Rvalue::Use(operand);\n+                            make_copy_statement.kind =\n+                                StatementKind::Assign(box (assign_to, rvalue));\n+                            statements.push(make_copy_statement);\n+\n+                            // to reorder we have to copy and make NOP\n+                            statements.push(statement.clone());\n+                            statement.make_nop();\n+\n+                            self.replacements_scratchpad.insert(len_statemnt_idx, local);\n+                        }\n+                        _ => {\n+                            unreachable!(\"it's a bug in the implementation\")\n+                        }\n+                    }\n+                }\n+                _ => {\n+                    unreachable!(\"it's a bug in the implementation\")\n+                }\n+            }\n+\n+            self.statement_idx += 1;\n+\n+            Some(statements.into_iter())\n+        } else if let Some(local) = self.replacements_scratchpad.get(&idx).copied() {\n+            let mut statements = Vec::with_capacity(2);\n+\n+            match &statement.kind {\n+                StatementKind::Assign(box (into, Rvalue::Len(place))) => {\n+                    let add_deref = if let Some(..) = place.as_local() {\n+                        false\n+                    } else if let Some(..) = place.local_or_deref_local() {\n+                        true\n+                    } else {\n+                        unreachable!(\"it's a bug in the implementation\")\n+                    };\n+                    // replace len statement\n+                    let mut len_statement = statement.clone();\n+                    let mut place = Place::from(local);\n+                    if add_deref {\n+                        place = self.tcx.mk_place_deref(place);\n+                    }\n+                    len_statement.kind = StatementKind::Assign(box (*into, Rvalue::Len(place)));\n+                    statements.push(len_statement);\n+\n+                    // make temporary dead\n+                    let mut make_dead_statement = statement.clone();\n+                    make_dead_statement.kind = StatementKind::StorageDead(local);\n+                    statements.push(make_dead_statement);\n+\n+                    // make original statement NOP\n+                    statement.make_nop();\n+                }\n+                _ => {\n+                    unreachable!(\"it's a bug in the implementation\")\n+                }\n+            }\n+\n+            self.statement_idx += 1;\n+\n+            Some(statements.into_iter())\n+        } else {\n+            self.statement_idx += 1;\n+            None\n+        }\n+    }\n+}\n+\n+fn normalize_array_len_call<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    block: &mut BasicBlockData<'tcx>,\n+    local_decls: &mut IndexVec<Local, LocalDecl<'tcx>>,\n+    interesting_locals: &BitSet<Local>,\n+    state: &mut FxIndexMap<Local, usize>,\n+    patches_scratchpad: &mut FxIndexMap<usize, usize>,\n+    replacements_scratchpad: &mut FxIndexMap<usize, Local>,\n+) {\n+    for (statement_idx, statement) in block.statements.iter_mut().enumerate() {\n+        match &mut statement.kind {\n+            StatementKind::Assign(box (place, rvalue)) => {\n+                match rvalue {\n+                    Rvalue::Cast(\n+                        CastKind::Pointer(ty::adjustment::PointerCast::Unsize),\n+                        operand,\n+                        cast_ty,\n+                    ) => {\n+                        let local = if let Some(local) = place.as_local() { local } else { return };\n+                        match operand {\n+                            Operand::Copy(place) | Operand::Move(place) => {\n+                                let operand_local =\n+                                    if let Some(local) = place.local_or_deref_local() {\n+                                        local\n+                                    } else {\n+                                        return;\n+                                    };\n+                                if !interesting_locals.contains(operand_local) {\n+                                    return;\n+                                }\n+                                let operand_ty = local_decls[operand_local].ty;\n+                                match (operand_ty.kind(), cast_ty.kind()) {\n+                                    (ty::Array(of_ty_src, ..), ty::Slice(of_ty_dst)) => {\n+                                        if of_ty_src == of_ty_dst {\n+                                            // this is a cast from [T; N] into [T], so we are good\n+                                            state.insert(local, statement_idx);\n+                                        }\n+                                    }\n+                                    // current way of patching doesn't allow to work with `mut`\n+                                    (\n+                                        ty::Ref(\n+                                            ty::RegionKind::ReErased,\n+                                            operand_ty,\n+                                            Mutability::Not,\n+                                        ),\n+                                        ty::Ref(ty::RegionKind::ReErased, cast_ty, Mutability::Not),\n+                                    ) => {\n+                                        match (operand_ty.kind(), cast_ty.kind()) {\n+                                            // current way of patching doesn't allow to work with `mut`\n+                                            (ty::Array(of_ty_src, ..), ty::Slice(of_ty_dst)) => {\n+                                                if of_ty_src == of_ty_dst {\n+                                                    // this is a cast from [T; N] into [T], so we are good\n+                                                    state.insert(local, statement_idx);\n+                                                }\n+                                            }\n+                                            _ => {}\n+                                        }\n+                                    }\n+                                    _ => {}\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                    Rvalue::Len(place) => {\n+                        let local = if let Some(local) = place.local_or_deref_local() {\n+                            local\n+                        } else {\n+                            return;\n+                        };\n+                        if let Some(cast_statement_idx) = state.get(&local).copied() {\n+                            patches_scratchpad.insert(cast_statement_idx, statement_idx);\n+                        }\n+                    }\n+                    _ => {\n+                        // invalidate\n+                        state.remove(&place.local);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    let mut patcher = Patcher {\n+        tcx,\n+        patches_scratchpad: &*patches_scratchpad,\n+        replacements_scratchpad,\n+        local_decls,\n+        statement_idx: 0,\n+    };\n+\n+    block.expand_statements(|st| patcher.patch_expand_statement(st));\n+}"}, {"sha": "dfb5b98d5c97cbab0cd1d0406fc32348c282d7ca", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -12,6 +12,7 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n@@ -27,14 +28,16 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }"}, {"sha": "dfb5b98d5c97cbab0cd1d0406fc32348c282d7ca", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -12,6 +12,7 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n@@ -27,14 +28,16 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }"}, {"sha": "97c549dc9c8aec8babfc5c418e96438fe9ab99c5", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -22,6 +22,7 @@\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n@@ -51,16 +52,17 @@\n           StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          StorageLive(_23);                // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          _23 = _3;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n           StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:7:29: 7:30\n           StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:8:5: 11:6\n-          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          StorageDead(_23);                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n           _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n--         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n--         switchInt(move _12) -> [false: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n-+         nop;                             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n-+         switchInt(move _10) -> [3_usize: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          _12 = const true;                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          goto -> bb2;                     // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n       }\n   \n       bb1: {"}, {"sha": "c7226573d75c52f17eaed715b28b5b2b0651203e", "filename": "src/test/mir-opt/lower_array_len.array_bound.InstCombine.diff", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `array_bound` before InstCombine\n++ // MIR for `array_bound` after InstCombine\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb1: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb2: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb3: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "d6c1c92cd9177a273a7b11cbefd73ffe7c1c41e9", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,68 @@\n+- // MIR for `array_bound` before NormalizeArrayLen\n++ // MIR for `array_bound` after NormalizeArrayLen\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb3: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "5cf3312cd641b528b4b737184e8c7d0b027e50b2", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,73 @@\n+- // MIR for `array_bound` before SimplifyLocals\n++ // MIR for `array_bound` after SimplifyLocals\n+  \n+  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:6:36: 6:41\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:6:50: 6:55\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:6:70: 6:72\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n++     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n+          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      }\n+  \n+      bb2: {\n+-         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n++         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb3: {\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:10:9: 10:11\n+          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "5622d48453213636615700b6928fa0140b05b27a", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.InstCombine.diff", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,79 @@\n+- // MIR for `array_bound_mut` before InstCombine\n++ // MIR for `array_bound_mut` after InstCombine\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+      let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb1: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb2: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb3: {\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _12 = Len((*_2));                // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          _13 = Lt(_11, _12);              // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, _11) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb4: {\n+          (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "11fc20aa693c71c18ffdefdf6fc62e68cac6d5d8", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,81 @@\n+- // MIR for `array_bound_mut` before NormalizeArrayLen\n++ // MIR for `array_bound_mut` after NormalizeArrayLen\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+      let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb3: {\n+          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb6;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+          _12 = Len((*_2));                // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          _13 = Lt(_11, _12);              // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+          assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, _11) -> bb5; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb5: {\n+          (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb6;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "f72aee0e502804108014d4fddebdabd4aae6f66c", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,96 @@\n+- // MIR for `array_bound_mut` before SimplifyLocals\n++ // MIR for `array_bound_mut` after SimplifyLocals\n+  \n+  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:17:40: 17:45\n+      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:17:54: 17:59\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:17:78: 17:80\n+      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-     let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-     let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-     let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n++     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++     let _9: usize;                       // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++     let mut _10: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++     let mut _11: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n+          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+      }\n+  \n+      bb2: {\n+-         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n++         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n+-         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-         _13 = Lt(const 0_usize, _12);    // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+-         assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         StorageLive(_9);                 // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++         _9 = const 0_usize;              // scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n++         _10 = const N;                   // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         _11 = Lt(const 0_usize, _10);    // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n++         assert(move _11, \"index out of bounds: the length is {} but the index is {}\", move _10, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      }\n+  \n+      bb4: {\n+-         (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n+-         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n++         (*_2)[_9] = const 42_u8;         // scope 0 at $DIR/lower_array_len.rs:21:9: 21:22\n++         StorageDead(_9);                 // scope 0 at $DIR/lower_array_len.rs:21:22: 21:23\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:23:9: 23:11\n+          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n+      }\n+  }\n+  "}, {"sha": "a818de39bcc8406769768b6ca350dae3b598aa98", "filename": "src/test/mir-opt/lower_array_len.array_len.InstCombine.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `array_len` before InstCombine\n++ // MIR for `array_len` after InstCombine\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+-         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "892fdda818ebd1694eeec93f89235b3f50c1bd4b", "filename": "src/test/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `array_len` before NormalizeArrayLen\n++ // MIR for `array_len` after NormalizeArrayLen\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+-         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n++         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "20e2685aba59f69656e5cbe1080ca84af6122ebf", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `array_len` before SimplifyLocals\n++ // MIR for `array_len` after SimplifyLocals\n+  \n+  fn array_len(_1: &[u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n+          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n+-         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n+      }\n+  }\n+  "}, {"sha": "ce12531e84bbf24fc2328e93095e6951c31de7b7", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.InstCombine.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `array_len_by_value` before InstCombine\n++ // MIR for `array_len_by_value` after InstCombine\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+-         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "201fffbf0d45a5752960262c671d39009d88f8b5", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `array_len_by_value` before NormalizeArrayLen\n++ // MIR for `array_len_by_value` after NormalizeArrayLen\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+-         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n++         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "7e7b708145f40a4ebd2b6c6dd298c3d7c650ab4a", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `array_len_by_value` before SimplifyLocals\n++ // MIR for `array_len_by_value` after SimplifyLocals\n+  \n+  fn array_len_by_value(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:37:43: 37:46\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:37:60: 37:65\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n+          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n+-         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n+      }\n+  }\n+  "}, {"sha": "fc12ee75fcfcd233bccd82626f2e907bfa06ca5d", "filename": "src/test/mir-opt/lower_array_len.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680ff86391f19e12b485293f01372036e85ba87c/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.rs?ref=680ff86391f19e12b485293f01372036e85ba87c", "patch": "@@ -0,0 +1,47 @@\n+// compile-flags: -Z mir-opt-level=4\n+\n+// EMIT_MIR lower_array_len.array_bound.NormalizeArrayLen.diff\n+// EMIT_MIR lower_array_len.array_bound.SimplifyLocals.diff\n+// EMIT_MIR lower_array_len.array_bound.InstCombine.diff\n+pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {\n+    if index < slice.len() {\n+        slice[index]\n+    } else {\n+        42\n+    }\n+}\n+\n+// EMIT_MIR lower_array_len.array_bound_mut.NormalizeArrayLen.diff\n+// EMIT_MIR lower_array_len.array_bound_mut.SimplifyLocals.diff\n+// EMIT_MIR lower_array_len.array_bound_mut.InstCombine.diff\n+pub fn array_bound_mut<const N: usize>(index: usize, slice: &mut [u8; N]) -> u8 {\n+    if index < slice.len() {\n+        slice[index]\n+    } else {\n+        slice[0] = 42;\n+\n+        42\n+    }\n+}\n+\n+// EMIT_MIR lower_array_len.array_len.NormalizeArrayLen.diff\n+// EMIT_MIR lower_array_len.array_len.SimplifyLocals.diff\n+// EMIT_MIR lower_array_len.array_len.InstCombine.diff\n+pub fn array_len<const N: usize>(arr: &[u8; N]) -> usize {\n+    arr.len()\n+}\n+\n+// EMIT_MIR lower_array_len.array_len_by_value.NormalizeArrayLen.diff\n+// EMIT_MIR lower_array_len.array_len_by_value.SimplifyLocals.diff\n+// EMIT_MIR lower_array_len.array_len_by_value.InstCombine.diff\n+pub fn array_len_by_value<const N: usize>(arr: [u8; N]) -> usize {\n+    arr.len()\n+}\n+\n+fn main() {\n+    let _ = array_bound(3, &[0, 1, 2, 3]);\n+    let mut tmp = [0, 1, 2, 3, 4];\n+    let _ = array_bound_mut(3, &mut [0, 1, 2, 3]);\n+    let _ = array_len(&[0]);\n+    let _ = array_len_by_value([0, 2]);\n+}"}]}