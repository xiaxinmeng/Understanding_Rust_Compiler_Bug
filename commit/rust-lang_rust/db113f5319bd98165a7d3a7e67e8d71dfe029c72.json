{"sha": "db113f5319bd98165a7d3a7e67e8d71dfe029c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTEzZjUzMTliZDk4MTY1YTdkM2E3ZTY3ZThkNzFkZmUwMjljNzI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-06-06T01:17:06Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-06-12T20:19:21Z"}, "message": "rustdoc: add --extern-html-root-url flag", "tree": {"sha": "ab0e073f9cdd06ee20a3e769466d651590eb5fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0e073f9cdd06ee20a3e769466d651590eb5fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db113f5319bd98165a7d3a7e67e8d71dfe029c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db113f5319bd98165a7d3a7e67e8d71dfe029c72", "html_url": "https://github.com/rust-lang/rust/commit/db113f5319bd98165a7d3a7e67e8d71dfe029c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db113f5319bd98165a7d3a7e67e8d71dfe029c72/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4122885e0f99b3f28e65c122cde48de5bfc8231a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4122885e0f99b3f28e65c122cde48de5bfc8231a", "html_url": "https://github.com/rust-lang/rust/commit/4122885e0f99b3f28e65c122cde48de5bfc8231a"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "ff00299aeba0aec6907f214763711424ae97f580", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=db113f5319bd98165a7d3a7e67e8d71dfe029c72", "patch": "@@ -361,6 +361,21 @@ This flag allows rustdoc to treat your rust code as the given edition. It will c\n the given edition as well. As with `rustc`, the default edition that `rustdoc` will use is `2015`\n (the first edition).\n \n+### `--extern-html-root-url`: control how rustdoc links to non-local crates\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --extern-html-root-url some-crate=https://example.com/some-crate/1.0.1\n+```\n+\n+Ordinarily, when rustdoc wants to link to a type from a different crate, it looks in two places:\n+docs that already exist in the output directory, or the `#![doc(doc_html_root)]` set in the other\n+crate. However, if you want to link to docs that exist in neither of those places, you can use these\n+flags to control that behavior. When the `--extern-html-root-url` flag is given with a name matching\n+one of your dependencies, rustdoc use that URL for those docs. Keep in mind that if those docs exist\n+in the output directory, those local docs will still override this flag.\n+\n ### `-Z force-unstable-if-unmarked`\n \n Using this flag looks like this:"}, {"sha": "2a7213653eae4af702ee82533e76162a3dcde3a6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=db113f5319bd98165a7d3a7e67e8d71dfe029c72", "patch": "@@ -507,6 +507,7 @@ pub fn derive_id(candidate: String) -> String {\n \n /// Generates the documentation for `crate` into the directory `dst`\n pub fn run(mut krate: clean::Crate,\n+           extern_urls: BTreeMap<String, String>,\n            external_html: &ExternalHtml,\n            playground_url: Option<String>,\n            dst: PathBuf,\n@@ -636,8 +637,9 @@ pub fn run(mut krate: clean::Crate,\n             },\n             _ => PathBuf::new(),\n         };\n+        let extern_url = extern_urls.get(&e.name).map(|u| &**u);\n         cache.extern_locations.insert(n, (e.name.clone(), src_root,\n-                                          extern_location(e, &cx.dst)));\n+                                          extern_location(e, extern_url, &cx.dst)));\n \n         let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n         cache.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n@@ -1088,13 +1090,23 @@ fn clean_srcpath<F>(src_root: &Path, p: &Path, keep_filename: bool, mut f: F) wh\n \n /// Attempts to find where an external crate is located, given that we're\n /// rendering in to the specified source destination.\n-fn extern_location(e: &clean::ExternalCrate, dst: &Path) -> ExternalLocation {\n+fn extern_location(e: &clean::ExternalCrate, extern_url: Option<&str>, dst: &Path)\n+    -> ExternalLocation\n+{\n     // See if there's documentation generated into the local directory\n     let local_location = dst.join(&e.name);\n     if local_location.is_dir() {\n         return Local;\n     }\n \n+    if let Some(url) = extern_url {\n+        let mut url = url.to_string();\n+        if !url.ends_with(\"/\") {\n+            url.push('/');\n+        }\n+        return Remote(url);\n+    }\n+\n     // Failing that, see if there's an attribute specifying where to find this\n     // external crate\n     e.attrs.lists(\"doc\")"}, {"sha": "3fe04b70359904d7a5f63b4fc8e53db40c877b7e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db113f5319bd98165a7d3a7e67e8d71dfe029c72/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=db113f5319bd98165a7d3a7e67e8d71dfe029c72", "patch": "@@ -158,6 +158,10 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         stable(\"extern\", |o| {\n             o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")\n         }),\n+        unstable(\"extern-html-root-url\", |o| {\n+            o.optmulti(\"\", \"extern-html-root-url\",\n+                       \"base URL to use for dependencies\", \"NAME=URL\")\n+        }),\n         stable(\"plugin-path\", |o| {\n             o.optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")\n         }),\n@@ -423,6 +427,13 @@ pub fn main_args(args: &[String]) -> isize {\n             return 1;\n         }\n     };\n+    let extern_urls = match parse_extern_html_roots(&matches) {\n+        Ok(ex) => ex,\n+        Err(err) => {\n+            diag.struct_err(err).emit();\n+            return 1;\n+        }\n+    };\n \n     let test_args = matches.opt_strs(\"test-args\");\n     let test_args: Vec<String> = test_args.iter()\n@@ -521,7 +532,7 @@ pub fn main_args(args: &[String]) -> isize {\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n             Some(\"html\") | None => {\n-                html::render::run(krate, &external_html, playground_url,\n+                html::render::run(krate, extern_urls, &external_html, playground_url,\n                                   output.unwrap_or(PathBuf::from(\"doc\")),\n                                   resource_suffix.unwrap_or(String::new()),\n                                   passes.into_iter().collect(),\n@@ -580,6 +591,23 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n     Ok(Externs::new(externs))\n }\n \n+/// Extracts `--extern-html-root-url` arguments from `matches` and returns a map of crate names to\n+/// the given URLs. If an `--extern-html-root-url` argument was ill-formed, returns an error\n+/// describing the issue.\n+fn parse_extern_html_roots(matches: &getopts::Matches)\n+    -> Result<BTreeMap<String, String>, &'static str>\n+{\n+    let mut externs = BTreeMap::new();\n+    for arg in &matches.opt_strs(\"extern-html-root-url\") {\n+        let mut parts = arg.splitn(2, '=');\n+        let name = parts.next().ok_or(\"--extern-html-root-url must not be empty\")?;\n+        let url = parts.next().ok_or(\"--extern-html-root-url must be of the form name=url\")?;\n+        externs.insert(name.to_string(), url.to_string());\n+    }\n+\n+    Ok(externs)\n+}\n+\n /// Interprets the input file as a rust source file, passing it through the\n /// compiler all the way through the analysis passes. The rustdoc output is then\n /// generated from the cleaned AST of the crate."}]}