{"sha": "6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2VjMmRmYTUxZDkyOTMwZTAyOGMyZWE1YWYxOTlkYmNjODEzZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:20:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:20:22Z"}, "message": "Refactor arg parsing", "tree": {"sha": "cd1354a25b5c2144152d4a33802a05000c695fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1354a25b5c2144152d4a33802a05000c695fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "html_url": "https://github.com/rust-lang/rust/commit/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "html_url": "https://github.com/rust-lang/rust/commit/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "9c23cf001479e6a85728458531613eb5f6631d49", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "patch": "@@ -132,18 +132,15 @@ fn main() -> Result<()> {\n             }\n             let verbose = matches.contains([\"-v\", \"--verbose\"]);\n             let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n-            let highlight_path = matches.opt_value_from_str(\"--highlight\")?;\n+            let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n             let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n-            if highlight_path.is_some() && complete_path.is_some() {\n-                panic!(\"either --highlight or --complete must be set, not both\")\n-            }\n-            let op = if let Some(path) = highlight_path {\n-                let path: String = path;\n-                analysis_bench::Op::Highlight { path: path.into() }\n-            } else if let Some(position) = complete_path {\n-                analysis_bench::Op::Complete(position.parse()?)\n-            } else {\n-                panic!(\"either --highlight or --complete must be set\")\n+            let op = match (highlight_path, complete_path) {\n+                (Some(path), None) => {\n+                    let path: String = path;\n+                    analysis_bench::Op::Highlight { path: path.into() }\n+                }\n+                (None, Some(position)) => analysis_bench::Op::Complete(position.parse()?),\n+                _ => panic!(\"exactly one of  `--highlight`, `--complete` must be set\"),\n             };\n             matches.finish().or_else(handle_extra_flags)?;\n             analysis_bench::run(verbose, path.as_ref(), op)?;"}]}