{"sha": "0d298f9904468b8f668cb9b505c19d64fdeb7633", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjk4Zjk5MDQ0NjhiOGY2NjhjYjliNTA1YzE5ZDY0ZmRlYjc2MzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-16T18:44:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-17T21:52:56Z"}, "message": "Deprecate name `OwnedSlice` and don't use it", "tree": {"sha": "7e65ebcb1ef74ec027cf31b2135b92f3a80e99ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e65ebcb1ef74ec027cf31b2135b92f3a80e99ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d298f9904468b8f668cb9b505c19d64fdeb7633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d298f9904468b8f668cb9b505c19d64fdeb7633", "html_url": "https://github.com/rust-lang/rust/commit/0d298f9904468b8f668cb9b505c19d64fdeb7633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d298f9904468b8f668cb9b505c19d64fdeb7633/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09d4a436a748a39f13d2d6d6c6ba56a885bb0d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d4a436a748a39f13d2d6d6c6ba56a885bb0d0c", "html_url": "https://github.com/rust-lang/rust/commit/09d4a436a748a39f13d2d6d6c6ba56a885bb0d0c"}], "stats": {"total": 210, "additions": 96, "deletions": 114}, "files": [{"sha": "d5ecb3f2e863f259857504d7ffad83596db6d56e", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -90,7 +90,6 @@ use std::cell::{Cell, RefCell};\n use std::char::from_u32;\n use std::fmt;\n use syntax::ast;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::codemap::{self, Pos, Span};\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -1154,10 +1153,10 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n     }\n \n     fn rebuild_ty_params(&self,\n-                         ty_params: OwnedSlice<hir::TyParam>,\n+                         ty_params: P<[hir::TyParam]>,\n                          lifetime: hir::Lifetime,\n                          region_names: &HashSet<ast::Name>)\n-                         -> OwnedSlice<hir::TyParam> {\n+                         -> P<[hir::TyParam]> {\n         ty_params.map(|ty_param| {\n             let bounds = self.rebuild_ty_param_bounds(ty_param.bounds.clone(),\n                                                       lifetime,\n@@ -1173,10 +1172,10 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n     }\n \n     fn rebuild_ty_param_bounds(&self,\n-                               ty_param_bounds: OwnedSlice<hir::TyParamBound>,\n+                               ty_param_bounds: hir::TyParamBounds,\n                                lifetime: hir::Lifetime,\n                                region_names: &HashSet<ast::Name>)\n-                               -> OwnedSlice<hir::TyParamBound> {\n+                               -> hir::TyParamBounds {\n         ty_param_bounds.map(|tpb| {\n             match tpb {\n                 &hir::RegionTyParamBound(lt) => {\n@@ -1249,7 +1248,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         add: &Vec<hir::Lifetime>,\n                         keep: &HashSet<ast::Name>,\n                         remove: &HashSet<ast::Name>,\n-                        ty_params: OwnedSlice<hir::TyParam>,\n+                        ty_params: P<[hir::TyParam]>,\n                         where_clause: hir::WhereClause)\n                         -> hir::Generics {\n         let mut lifetimes = Vec::new();"}, {"sha": "ecb2b85fd77445c98fea253e61f4404dc4aaeb88", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -16,7 +16,7 @@ use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use std::rc::Rc;\n use syntax::abi;\n-use syntax::owned_slice::OwnedSlice;\n+use syntax::ptr::P;\n \n use rustc_front::hir;\n \n@@ -555,8 +555,8 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for OwnedSlice<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> OwnedSlice<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for P<[T]> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> P<[T]> {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n }"}, {"sha": "0978c3f78e82ffe6e56951456474abea40c141f5", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -17,7 +17,6 @@ use syntax::ast::{MetaWord, MetaList, MetaNameValue};\n use syntax::attr::ThinAttributesExt;\n use hir;\n use syntax::codemap::{respan, Span, Spanned};\n-use syntax::owned_slice::OwnedSlice;\n use syntax::ptr::P;\n use syntax::parse::token;\n use syntax::util::move_map::MoveMap;\n@@ -211,7 +210,7 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_ty_params(&mut self, tps: OwnedSlice<TyParam>) -> OwnedSlice<TyParam> {\n+    fn fold_ty_params(&mut self, tps: P<[TyParam]>) -> P<[TyParam]> {\n         noop_fold_ty_params(tps, self)\n     }\n \n@@ -220,12 +219,12 @@ pub trait Folder : Sized {\n     }\n \n     fn fold_opt_bounds(&mut self,\n-                       b: Option<OwnedSlice<TyParamBound>>)\n-                       -> Option<OwnedSlice<TyParamBound>> {\n+                       b: Option<TyParamBounds>)\n+                       -> Option<TyParamBounds> {\n         noop_fold_opt_bounds(b, self)\n     }\n \n-    fn fold_bounds(&mut self, b: OwnedSlice<TyParamBound>) -> OwnedSlice<TyParamBound> {\n+    fn fold_bounds(&mut self, b: TyParamBounds) -> TyParamBounds {\n         noop_fold_bounds(b, self)\n     }\n \n@@ -576,9 +575,9 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n     }\n }\n \n-pub fn noop_fold_ty_params<T: Folder>(tps: OwnedSlice<TyParam>,\n+pub fn noop_fold_ty_params<T: Folder>(tps: P<[TyParam]>,\n                                       fld: &mut T)\n-                                      -> OwnedSlice<TyParam> {\n+                                      -> P<[TyParam]> {\n     tps.move_map(|tp| fld.fold_ty_param(tp))\n }\n \n@@ -726,9 +725,9 @@ pub fn noop_fold_mt<T: Folder>(MutTy { ty, mutbl }: MutTy, folder: &mut T) -> Mu\n     }\n }\n \n-pub fn noop_fold_opt_bounds<T: Folder>(b: Option<OwnedSlice<TyParamBound>>,\n+pub fn noop_fold_opt_bounds<T: Folder>(b: Option<TyParamBounds>,\n                                        folder: &mut T)\n-                                       -> Option<OwnedSlice<TyParamBound>> {\n+                                       -> Option<TyParamBounds> {\n     b.map(|bounds| folder.fold_bounds(bounds))\n }\n "}, {"sha": "1491ecc89af1f2f5a703e445c62d3ffbb5b6cf60", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -42,7 +42,6 @@ use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, TokenTree, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, CrateConfig};\n use syntax::attr::ThinAttributes;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n@@ -193,8 +192,8 @@ impl PathParameters {\n     pub fn none() -> PathParameters {\n         AngleBracketedParameters(AngleBracketedParameterData {\n             lifetimes: Vec::new(),\n-            types: OwnedSlice::empty(),\n-            bindings: OwnedSlice::empty(),\n+            types: P::empty(),\n+            bindings: P::empty(),\n         })\n     }\n \n@@ -267,10 +266,10 @@ pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    pub types: OwnedSlice<P<Ty>>,\n+    pub types: P<[P<Ty>]>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n-    pub bindings: OwnedSlice<TypeBinding>,\n+    pub bindings: P<[TypeBinding]>,\n }\n \n impl AngleBracketedParameterData {\n@@ -310,7 +309,7 @@ pub enum TraitBoundModifier {\n     Maybe,\n }\n \n-pub type TyParamBounds = OwnedSlice<TyParamBound>;\n+pub type TyParamBounds = P<[TyParamBound]>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n@@ -326,7 +325,7 @@ pub struct TyParam {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n-    pub ty_params: OwnedSlice<TyParam>,\n+    pub ty_params: P<[TyParam]>,\n     pub where_clause: WhereClause,\n }\n \n@@ -369,7 +368,7 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: OwnedSlice<TyParamBound>,\n+    pub bounds: TyParamBounds,\n }\n \n /// A lifetime predicate, e.g. `'a: 'b+'c`"}, {"sha": "614f6f0bd36dd9ce81b50c2cac80c1c5036d77a0", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -70,7 +70,6 @@ use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n@@ -430,8 +429,8 @@ pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n }\n \n pub fn lower_ty_params(lctx: &LoweringContext,\n-                       tps: &OwnedSlice<TyParam>)\n-                       -> OwnedSlice<hir::TyParam> {\n+                       tps: &P<[TyParam]>)\n+                       -> P<[hir::TyParam]> {\n     tps.iter().map(|tp| lower_ty_param(lctx, tp)).collect()\n }\n \n@@ -583,8 +582,8 @@ pub fn lower_mt(lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy {\n }\n \n pub fn lower_opt_bounds(lctx: &LoweringContext,\n-                        b: &Option<OwnedSlice<TyParamBound>>)\n-                        -> Option<OwnedSlice<hir::TyParamBound>> {\n+                        b: &Option<TyParamBounds>)\n+                        -> Option<hir::TyParamBounds> {\n     b.as_ref().map(|ref bounds| lower_bounds(lctx, bounds))\n }\n \n@@ -1795,8 +1794,8 @@ fn path_all(sp: Span,\n         identifier: last_identifier,\n         parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n             lifetimes: lifetimes,\n-            types: OwnedSlice::from_vec(types),\n-            bindings: OwnedSlice::from_vec(bindings),\n+            types: P::from_vec(types),\n+            bindings: P::from_vec(bindings),\n         }),\n     });\n     hir::Path {"}, {"sha": "a3bb005dfbdcaebb4e13cc9e3b8d15c7f4f09846", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -12,7 +12,6 @@ pub use self::AnnNode::*;\n \n use syntax::abi;\n use syntax::ast;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::codemap::{self, CodeMap, BytePos, Spanned};\n use syntax::diagnostic;\n use syntax::parse::token::{self, BinOpToken};\n@@ -519,7 +518,7 @@ impl<'a> State<'a> {\n             hir::TyBareFn(ref f) => {\n                 let generics = hir::Generics {\n                     lifetimes: f.lifetimes.clone(),\n-                    ty_params: OwnedSlice::empty(),\n+                    ty_params: P::empty(),\n                     where_clause: hir::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n@@ -2258,7 +2257,7 @@ impl<'a> State<'a> {\n         }\n         let generics = hir::Generics {\n             lifetimes: Vec::new(),\n-            ty_params: OwnedSlice::empty(),\n+            ty_params: P::empty(),\n             where_clause: hir::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "f85eb2bb4011e7c10fd359457f69b28e50b80f12", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -15,7 +15,6 @@ use syntax::ast_util;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::Span;\n use syntax::ptr::P;\n-use syntax::owned_slice::OwnedSlice;\n \n pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool\n     where F: FnMut(&Pat) -> bool\n@@ -336,7 +335,7 @@ pub fn is_path(e: P<Expr>) -> bool {\n pub fn empty_generics() -> Generics {\n     Generics {\n         lifetimes: Vec::new(),\n-        ty_params: OwnedSlice::empty(),\n+        ty_params: P::empty(),\n         where_clause: WhereClause {\n             id: DUMMY_NODE_ID,\n             predicates: Vec::new(),\n@@ -354,8 +353,8 @@ pub fn ident_to_path(s: Span, ident: Ident) -> Path {\n             identifier: ident,\n             parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n                 lifetimes: Vec::new(),\n-                types: OwnedSlice::empty(),\n-                bindings: OwnedSlice::empty(),\n+                types: P::empty(),\n+                bindings: P::empty(),\n             }),\n         }),\n     }"}, {"sha": "9c6b54e13796de6b9e2682a0a9c50978b841db8e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -41,7 +41,6 @@ use std::fs::File;\n use syntax::ast::{self, NodeId};\n use syntax::codemap::*;\n use syntax::parse::token::{self, keywords};\n-use syntax::owned_slice::OwnedSlice;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string};\n use syntax::ptr::P;\n@@ -572,7 +571,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     fn process_trait(&mut self,\n                      item: &ast::Item,\n                      generics: &ast::Generics,\n-                     trait_refs: &OwnedSlice<ast::TyParamBound>,\n+                     trait_refs: &ast::TyParamBounds,\n                      methods: &[P<ast::TraitItem>]) {\n         let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n         let val = self.span.snippet(item.span);"}, {"sha": "bddf0e9ffb0cb1d205aa00b2c8aff3f1e88010aa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -119,7 +119,6 @@ use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Spanned};\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::{self, InternedString};\n use syntax::ptr::P;\n use syntax::util::lev_distance::lev_distance;\n@@ -4907,7 +4906,7 @@ pub fn may_break(cx: &ty::ctxt, id: ast::NodeId, b: &hir::Block) -> bool {\n }\n \n pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                       tps: &OwnedSlice<hir::TyParam>,\n+                                       tps: &P<[hir::TyParam]>,\n                                        ty: Ty<'tcx>) {\n     debug!(\"check_bounds_are_used(n_tps={}, ty={:?})\",\n            tps.len(),  ty);"}, {"sha": "e217e7afad73744ea2399851bde204ba640ae3e5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -112,7 +112,7 @@ impl<T, U> Clean<U> for ty::Binder<T> where T: Clean<U> {\n     }\n }\n \n-impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n+impl<T: Clean<U>, U> Clean<Vec<U>> for P<[T]> {\n     fn clean(&self, cx: &DocContext) -> Vec<U> {\n         self.iter().map(|x| x.clean(cx)).collect()\n     }"}, {"sha": "4b0ec8578c12ed5a869d15fb3e8472c10cef5ed0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -50,7 +50,6 @@ use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n use ext::base;\n use ext::tt::macro_parser;\n-use owned_slice::OwnedSlice;\n use parse::token::InternedString;\n use parse::token;\n use parse::lexer;\n@@ -261,8 +260,8 @@ impl PathParameters {\n     pub fn none() -> PathParameters {\n         AngleBracketedParameters(AngleBracketedParameterData {\n             lifetimes: Vec::new(),\n-            types: OwnedSlice::empty(),\n-            bindings: OwnedSlice::empty(),\n+            types: P::empty(),\n+            bindings: P::empty(),\n         })\n     }\n \n@@ -334,10 +333,10 @@ pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    pub types: OwnedSlice<P<Ty>>,\n+    pub types: P<[P<Ty>]>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n-    pub bindings: OwnedSlice<P<TypeBinding>>,\n+    pub bindings: P<[P<TypeBinding>]>,\n }\n \n impl AngleBracketedParameterData {\n@@ -394,7 +393,7 @@ pub enum TraitBoundModifier {\n     Maybe,\n }\n \n-pub type TyParamBounds = OwnedSlice<TyParamBound>;\n+pub type TyParamBounds = P<[TyParamBound]>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n@@ -410,7 +409,7 @@ pub struct TyParam {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n-    pub ty_params: OwnedSlice<TyParam>,\n+    pub ty_params: P<[TyParam]>,\n     pub where_clause: WhereClause,\n }\n \n@@ -430,7 +429,7 @@ impl Default for Generics {\n     fn default() ->  Generics {\n         Generics {\n             lifetimes: Vec::new(),\n-            ty_params: OwnedSlice::empty(),\n+            ty_params: P::empty(),\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n@@ -466,7 +465,7 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: OwnedSlice<TyParamBound>,\n+    pub bounds: TyParamBounds,\n }\n \n /// A lifetime predicate, e.g. `'a: 'b+'c`"}, {"sha": "d38b771814c2874ae30e24df88d52523e2ffed68", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -12,7 +12,6 @@ use ast::*;\n use ast;\n use codemap;\n use codemap::Span;\n-use owned_slice::OwnedSlice;\n use parse::token;\n use print::pprust;\n use ptr::P;\n@@ -43,8 +42,8 @@ pub fn ident_to_path(s: Span, identifier: Ident) -> Path {\n                 identifier: identifier,\n                 parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n                     lifetimes: Vec::new(),\n-                    types: OwnedSlice::empty(),\n-                    bindings: OwnedSlice::empty(),\n+                    types: P::empty(),\n+                    bindings: P::empty(),\n                 })\n             }\n         ),"}, {"sha": "46a39b98058a2382a9387b9849edb1407a60ec20", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -14,7 +14,6 @@ use ast;\n use attr;\n use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n use ext::base::ExtCtxt;\n-use owned_slice::OwnedSlice;\n use parse::token::special_idents;\n use parse::token::InternedString;\n use parse::token;\n@@ -56,7 +55,7 @@ pub trait AstBuilder {\n \n     fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty>;\n     fn ty_path(&self, ast::Path) -> P<ast::Ty>;\n-    fn ty_sum(&self, ast::Path, OwnedSlice<ast::TyParamBound>) -> P<ast::Ty>;\n+    fn ty_sum(&self, ast::Path, ast::TyParamBounds) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n \n     fn ty_rptr(&self, span: Span,\n@@ -70,13 +69,13 @@ pub trait AstBuilder {\n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;\n     fn ty_infer(&self, sp: Span) -> P<ast::Ty>;\n \n-    fn ty_vars(&self, ty_params: &OwnedSlice<ast::TyParam>) -> Vec<P<ast::Ty>> ;\n-    fn ty_vars_global(&self, ty_params: &OwnedSlice<ast::TyParam>) -> Vec<P<ast::Ty>> ;\n+    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;\n+    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;\n \n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n-               bounds: OwnedSlice<ast::TyParamBound>,\n+               bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n@@ -331,8 +330,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             identifier: last_identifier,\n             parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n                 lifetimes: lifetimes,\n-                types: OwnedSlice::from_vec(types),\n-                bindings: OwnedSlice::from_vec(bindings),\n+                types: P::from_vec(types),\n+                bindings: P::from_vec(bindings),\n             })\n         });\n         ast::Path {\n@@ -369,8 +368,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             identifier: ident,\n             parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n                 lifetimes: lifetimes,\n-                types: OwnedSlice::from_vec(types),\n-                bindings: OwnedSlice::from_vec(bindings),\n+                types: P::from_vec(types),\n+                bindings: P::from_vec(bindings),\n             })\n         });\n \n@@ -399,7 +398,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.ty(path.span, ast::TyPath(None, path))\n     }\n \n-    fn ty_sum(&self, path: ast::Path, bounds: OwnedSlice<ast::TyParamBound>) -> P<ast::Ty> {\n+    fn ty_sum(&self, path: ast::Path, bounds: ast::TyParamBounds) -> P<ast::Ty> {\n         self.ty(path.span,\n                 ast::TyObjectSum(self.ty_path(path),\n                                  bounds))\n@@ -448,7 +447,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n-               bounds: OwnedSlice<ast::TyParamBound>,\n+               bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n@@ -462,11 +461,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     // these are strange, and probably shouldn't be used outside of\n     // pipes. Specifically, the global version possible generates\n     // incorrect code.\n-    fn ty_vars(&self, ty_params: &OwnedSlice<ast::TyParam>) -> Vec<P<ast::Ty>> {\n+    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> {\n         ty_params.iter().map(|p| self.ty_ident(DUMMY_SP, p.ident)).collect()\n     }\n \n-    fn ty_vars_global(&self, ty_params: &OwnedSlice<ast::TyParam>) -> Vec<P<ast::Ty>> {\n+    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> {\n         ty_params\n             .iter()\n             .map(|p| self.ty_path(self.path_global(DUMMY_SP, vec!(p.ident))))"}, {"sha": "cd2210c71b89539c3420f305fccebe6c323f8664", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -23,7 +23,6 @@ use ast;\n use attr::{ThinAttributes, ThinAttributesExt};\n use ast_util;\n use codemap::{respan, Span, Spanned};\n-use owned_slice::OwnedSlice;\n use parse::token;\n use ptr::P;\n use util::small_vector::SmallVector;\n@@ -233,7 +232,7 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_ty_params(&mut self, tps: OwnedSlice<TyParam>) -> OwnedSlice<TyParam> {\n+    fn fold_ty_params(&mut self, tps: P<[TyParam]>) -> P<[TyParam]> {\n         noop_fold_ty_params(tps, self)\n     }\n \n@@ -257,13 +256,13 @@ pub trait Folder : Sized {\n         noop_fold_opt_lifetime(o_lt, self)\n     }\n \n-    fn fold_opt_bounds(&mut self, b: Option<OwnedSlice<TyParamBound>>)\n-                       -> Option<OwnedSlice<TyParamBound>> {\n+    fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>)\n+                       -> Option<TyParamBounds> {\n         noop_fold_opt_bounds(b, self)\n     }\n \n-    fn fold_bounds(&mut self, b: OwnedSlice<TyParamBound>)\n-                       -> OwnedSlice<TyParamBound> {\n+    fn fold_bounds(&mut self, b: TyParamBounds)\n+                       -> TyParamBounds {\n         noop_fold_bounds(b, self)\n     }\n \n@@ -714,8 +713,8 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n     }\n }\n \n-pub fn noop_fold_ty_params<T: Folder>(tps: OwnedSlice<TyParam>, fld: &mut T)\n-                                      -> OwnedSlice<TyParam> {\n+pub fn noop_fold_ty_params<T: Folder>(tps: P<[TyParam]>, fld: &mut T)\n+                                      -> P<[TyParam]> {\n     tps.move_map(|tp| fld.fold_ty_param(tp))\n }\n \n@@ -871,8 +870,8 @@ pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutT\n     }\n }\n \n-pub fn noop_fold_opt_bounds<T: Folder>(b: Option<OwnedSlice<TyParamBound>>, folder: &mut T)\n-                                       -> Option<OwnedSlice<TyParamBound>> {\n+pub fn noop_fold_opt_bounds<T: Folder>(b: Option<TyParamBounds>, folder: &mut T)\n+                                       -> Option<TyParamBounds> {\n     b.map(|bounds| folder.fold_bounds(bounds))\n }\n "}, {"sha": "33a3d5785981ae50f55b9708fecef54b0e9331f2", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -9,4 +9,6 @@\n // except according to those terms.\n \n /// A non-growable owned slice.\n+#[unstable(feature = \"rustc_private\", issue = \"0\")]\n+#[rustc_deprecated(since = \"1.7.0\", reason = \"use `ptr::P<[T]>` instead\")]\n pub type OwnedSlice<T> = ::ptr::P<[T]>;"}, {"sha": "df2a9f30c7acfe0e3ef874a70009e40d7712d0fa", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -668,7 +668,6 @@ mod tests {\n     use super::*;\n     use std::rc::Rc;\n     use codemap::{Span, BytePos, Pos, Spanned, NO_EXPANSION};\n-    use owned_slice::OwnedSlice;\n     use ast::{self, TokenTree};\n     use abi;\n     use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n@@ -944,7 +943,7 @@ mod tests {\n                                     abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),\n-                                        ty_params: OwnedSlice::empty(),\n+                                        ty_params: P::empty(),\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),"}, {"sha": "8cf8533c3aaaa64cbfeba1950ab3c960c5ba553a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -50,7 +50,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n-use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPtr};\n+use ast::{TyParam, TyParamBounds, TyParen, TyPath, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec};\n use ast::TypeTraitItem;\n use ast::{UnnamedField, UnsafeBlock};\n@@ -73,7 +73,6 @@ use parse::{new_sub_parser_from_file, ParseSess};\n use util::parser::{AssocOp, Fixity};\n use print::pprust;\n use ptr::P;\n-use owned_slice::OwnedSlice;\n use parse::PResult;\n use diagnostic::FatalError;\n \n@@ -752,7 +751,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_before_gt_or_return<T, F>(&mut self,\n                                                   sep: Option<token::Token>,\n                                                   mut f: F)\n-                                                  -> PResult<(OwnedSlice<T>, bool)> where\n+                                                  -> PResult<(P<[T]>, bool)> where\n         F: FnMut(&mut Parser) -> PResult<Option<T>>,\n     {\n         let mut v = Vec::new();\n@@ -773,7 +772,7 @@ impl<'a> Parser<'a> {\n             if i % 2 == 0 {\n                 match try!(f(self)) {\n                     Some(result) => v.push(result),\n-                    None => return Ok((OwnedSlice::from_vec(v), true))\n+                    None => return Ok((P::from_vec(v), true))\n                 }\n             } else {\n                 if let Some(t) = sep.as_ref() {\n@@ -782,15 +781,15 @@ impl<'a> Parser<'a> {\n \n             }\n         }\n-        return Ok((OwnedSlice::from_vec(v), false));\n+        return Ok((P::from_vec(v), false));\n     }\n \n     /// Parse a sequence bracketed by '<' and '>', stopping\n     /// before the '>'.\n     pub fn parse_seq_to_before_gt<T, F>(&mut self,\n                                         sep: Option<token::Token>,\n                                         mut f: F)\n-                                        -> PResult<OwnedSlice<T>> where\n+                                        -> PResult<P<[T]>> where\n         F: FnMut(&mut Parser) -> PResult<T>,\n     {\n         let (result, returned) = try!(self.parse_seq_to_before_gt_or_return(sep,\n@@ -802,7 +801,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_gt<T, F>(&mut self,\n                                  sep: Option<token::Token>,\n                                  f: F)\n-                                 -> PResult<OwnedSlice<T>> where\n+                                 -> PResult<P<[T]>> where\n         F: FnMut(&mut Parser) -> PResult<T>,\n     {\n         let v = try!(self.parse_seq_to_before_gt(sep, f));\n@@ -813,7 +812,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_gt_or_return<T, F>(&mut self,\n                                            sep: Option<token::Token>,\n                                            f: F)\n-                                           -> PResult<(OwnedSlice<T>, bool)> where\n+                                           -> PResult<(P<[T]>, bool)> where\n         F: FnMut(&mut Parser) -> PResult<Option<T>>,\n     {\n         let (v, returned) = try!(self.parse_seq_to_before_gt_or_return(sep, f));\n@@ -1077,7 +1076,7 @@ impl<'a> Parser<'a> {\n             let other_bounds = if try!(self.eat(&token::BinOp(token::Plus)) ){\n                 try!(self.parse_ty_param_bounds(BoundParsingMode::Bare))\n             } else {\n-                OwnedSlice::empty()\n+                P::empty()\n             };\n             let all_bounds =\n                 Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n@@ -1710,8 +1709,8 @@ impl<'a> Parser<'a> {\n \n                 ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n                     lifetimes: lifetimes,\n-                    types: OwnedSlice::from_vec(types),\n-                    bindings: OwnedSlice::from_vec(bindings),\n+                    types: P::from_vec(types),\n+                    bindings: P::from_vec(bindings),\n                 })\n             } else if try!(self.eat(&token::OpenDelim(token::Paren)) ){\n                 let lo = self.last_span.lo;\n@@ -1774,8 +1773,8 @@ impl<'a> Parser<'a> {\n                     identifier: identifier,\n                     parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n                         lifetimes: lifetimes,\n-                        types: OwnedSlice::from_vec(types),\n-                        bindings: OwnedSlice::from_vec(bindings),\n+                        types: P::from_vec(types),\n+                        bindings: P::from_vec(bindings),\n                     }),\n                 });\n \n@@ -3883,10 +3882,10 @@ impl<'a> Parser<'a> {\n     // otherwise returns empty list.\n     fn parse_colon_then_ty_param_bounds(&mut self,\n                                         mode: BoundParsingMode)\n-                                        -> PResult<OwnedSlice<TyParamBound>>\n+                                        -> PResult<TyParamBounds>\n     {\n         if !try!(self.eat(&token::Colon) ){\n-            Ok(OwnedSlice::empty())\n+            Ok(P::empty())\n         } else {\n             self.parse_ty_param_bounds(mode)\n         }\n@@ -3898,7 +3897,7 @@ impl<'a> Parser<'a> {\n     // and     bound     = 'region | trait_ref\n     fn parse_ty_param_bounds(&mut self,\n                              mode: BoundParsingMode)\n-                             -> PResult<OwnedSlice<TyParamBound>>\n+                             -> PResult<TyParamBounds>\n     {\n         let mut result = vec!();\n         loop {\n@@ -3940,7 +3939,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        return Ok(OwnedSlice::from_vec(result));\n+        return Ok(P::from_vec(result));\n     }\n \n     /// Matches typaram = IDENT (`?` unbound)? optbounds ( EQ ty )?"}, {"sha": "457d7d150dd9ca2b74029fa762f1201afb8ad061", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -17,7 +17,6 @@ use ast::Attribute;\n use attr::ThinAttributesExt;\n use util::parser::AssocOp;\n use attr;\n-use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n use codemap::{self, CodeMap, BytePos};\n use diagnostic;\n@@ -1001,7 +1000,7 @@ impl<'a> State<'a> {\n             ast::TyBareFn(ref f) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n-                    ty_params: OwnedSlice::empty(),\n+                    ty_params: P::empty(),\n                     where_clause: ast::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n@@ -3024,7 +3023,7 @@ impl<'a> State<'a> {\n         }\n         let generics = ast::Generics {\n             lifetimes: Vec::new(),\n-            ty_params: OwnedSlice::empty(),\n+            ty_params: P::empty(),\n             where_clause: ast::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "e9581b9e05c57e3b7f22438119bc4d7eefdcd47a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -32,7 +32,6 @@ use ext::expand::ExpansionConfig;\n use fold::Folder;\n use util::move_map::MoveMap;\n use fold;\n-use owned_slice::OwnedSlice;\n use parse::token::{intern, InternedString};\n use parse::{token, ParseSess};\n use print::pprust;"}, {"sha": "e1078b719bf0679f07c4a64be63f6b817e556a42", "filename": "src/libsyntax/util/move_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Futil%2Fmove_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax%2Futil%2Fmove_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fmove_map.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use owned_slice::OwnedSlice;\n-\n use std::ptr;\n \n pub trait MoveMap<T>: Sized {\n@@ -69,11 +67,11 @@ impl<T> MoveMap<T> for Vec<T> {\n     }\n }\n \n-impl<T> MoveMap<T> for OwnedSlice<T> {\n+impl<T> MoveMap<T> for ::ptr::P<[T]> {\n     fn move_flat_map<F, I>(self, f: F) -> Self\n         where F: FnMut(T) -> I,\n               I: IntoIterator<Item=T>\n     {\n-        OwnedSlice::from_vec(self.into_vec().move_flat_map(f))\n+        ::ptr::P::from_vec(self.into_vec().move_flat_map(f))\n     }\n }"}, {"sha": "852458422685bd71ef00841785021a2130084cde", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -205,7 +205,6 @@ use syntax::codemap::{self, DUMMY_SP};\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n use syntax::util::move_map::MoveMap;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::{intern, InternedString};\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n@@ -516,7 +515,7 @@ impl<'a> TraitDef<'a> {\n \n             cx.typaram(self.span,\n                        ty_param.ident,\n-                       OwnedSlice::from_vec(bounds),\n+                       P::from_vec(bounds),\n                        None)\n         }));\n \n@@ -528,7 +527,7 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: wb.bound_lifetimes.clone(),\n                         bounded_ty: wb.bounded_ty.clone(),\n-                        bounds: OwnedSlice::from_vec(wb.bounds.iter().cloned().collect())\n+                        bounds: P::from_vec(wb.bounds.iter().cloned().collect())\n                     })\n                 }\n                 ast::WherePredicate::RegionPredicate(ref rb) => {\n@@ -579,7 +578,7 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: vec![],\n                         bounded_ty: ty,\n-                        bounds: OwnedSlice::from_vec(bounds),\n+                        bounds: P::from_vec(bounds),\n                     };\n \n                     let predicate = ast::WherePredicate::BoundPredicate(predicate);\n@@ -590,7 +589,7 @@ impl<'a> TraitDef<'a> {\n \n         let trait_generics = Generics {\n             lifetimes: lifetimes,\n-            ty_params: OwnedSlice::from_vec(ty_params),\n+            ty_params: P::from_vec(ty_params),\n             where_clause: where_clause\n         };\n "}, {"sha": "10564b5f6985b7c407b2c05a9b4b9b758ed288f5", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d298f9904468b8f668cb9b505c19d64fdeb7633/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=0d298f9904468b8f668cb9b505c19d64fdeb7633", "patch": "@@ -19,7 +19,6 @@ use syntax::ast::{Expr,Generics,Ident};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{Span,respan};\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n \n@@ -209,7 +208,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>)\n                -> Generics {\n     Generics {\n         lifetimes: lifetimes,\n-        ty_params: OwnedSlice::from_vec(ty_params),\n+        ty_params: P::from_vec(ty_params),\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),"}]}