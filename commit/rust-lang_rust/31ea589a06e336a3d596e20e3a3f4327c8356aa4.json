{"sha": "31ea589a06e336a3d596e20e3a3f4327c8356aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZWE1ODlhMDZlMzM2YTNkNTk2ZTIwZTNhM2Y0MzI3YzgzNTZhYTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-01T23:15:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:58Z"}, "message": "review comments: wording", "tree": {"sha": "05f65f4b4dd2f5519a226545f43b67ccab6e5366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f65f4b4dd2f5519a226545f43b67ccab6e5366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31ea589a06e336a3d596e20e3a3f4327c8356aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31ea589a06e336a3d596e20e3a3f4327c8356aa4", "html_url": "https://github.com/rust-lang/rust/commit/31ea589a06e336a3d596e20e3a3f4327c8356aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31ea589a06e336a3d596e20e3a3f4327c8356aa4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539e9783dfb713b3af0a9967af8fd0639d700555", "url": "https://api.github.com/repos/rust-lang/rust/commits/539e9783dfb713b3af0a9967af8fd0639d700555", "html_url": "https://github.com/rust-lang/rust/commit/539e9783dfb713b3af0a9967af8fd0639d700555"}], "stats": {"total": 166, "additions": 85, "deletions": 81}, "files": [{"sha": "86f310eb71d76b1f4e4793ed3ef5ab51444f27ec", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -75,18 +75,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             //    |           ----                               ^\n                             err.span_label(\n                                 sup_origin.span(),\n-                                \"...is captured here requiring it to live as long as `'static`\",\n+                                \"...is captured here, requiring it to live as long as `'static`\",\n                             );\n                         } else if sup_origin.span() <= return_sp {\n                             err.span_label(sup_origin.span(), \"...is captured here...\");\n                             err.span_label(\n                                 return_sp,\n-                                \"...and required to live as long as `'static` by this\",\n+                                \"...and is required to live as long as `'static` here\",\n                             );\n                         } else {\n                             err.span_label(\n                                 return_sp,\n-                                \"...is required to live as long as `'static` by this...\",\n+                                \"...is required to live as long as `'static` here...\",\n                             );\n                             err.span_label(sup_origin.span(), \"...and is captured here\");\n                         }\n@@ -101,6 +101,20 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     // explicit non-desugar'able return.\n                     if fn_return.span.desugaring_kind().is_none() {\n                         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n+\n+                        let consider = \"consider changing the\";\n+                        let declare = \"to declare that the\";\n+                        let arg = match param_info.param.pat.simple_ident() {\n+                            Some(simple_ident) => format!(\"argument `{}`\", simple_ident),\n+                            None => \"the argument\".to_string(),\n+                        };\n+                        let explicit =\n+                            format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n+                        let explicit_static = format!(\"explicit `'static` bound to {}\", arg);\n+                        let captures = format!(\"captures data from {}\", arg);\n+                        let add_static_bound =\n+                            \"alternatively, add an explicit `'static` bound to this reference\";\n+                        let plus_lt = format!(\" + {}\", lifetime_name);\n                         match fn_return.kind {\n                             TyKind::Def(item_id, _) => {\n                                 let item = self.tcx().hir().item(item_id.id);\n@@ -126,30 +140,26 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 {\n                                     err.span_suggestion_verbose(\n                                         span,\n-                                        &format!(\n-                                            \"consider changing the `impl Trait`'s explicit \\\n-                                             `'static` bound to {}\",\n-                                            lifetime,\n-                                        ),\n+                                        &format!(\"{} `impl Trait`'s {}\", consider, explicit_static),\n                                         lifetime_name,\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                     err.span_suggestion_verbose(\n                                         param_info.param_ty_span,\n-                                        \"alternatively, set an explicit `'static` lifetime to \\\n-                                         this parameter\",\n+                                        add_static_bound,\n                                         param_info.param_ty.to_string(),\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                 } else {\n                                     err.span_suggestion_verbose(\n                                         fn_return.span.shrink_to_hi(),\n                                         &format!(\n-                                            \"to permit non-static references in an `impl Trait` \\\n-                                             value, you can add an explicit bound for {}\",\n-                                            lifetime,\n+                                            \"{declare} `impl Trait` {captures}, {explicit}\",\n+                                            declare = declare,\n+                                            captures = captures,\n+                                            explicit = explicit,\n                                         ),\n-                                        format!(\" + {}\", lifetime_name),\n+                                        plus_lt,\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                 };\n@@ -159,31 +169,25 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                     err.span_suggestion_verbose(\n                                         fn_return.span.shrink_to_hi(),\n                                         &format!(\n-                                            \"to permit non-static references in a trait object \\\n-                                             value, you can add an explicit bound for {}\",\n-                                            lifetime,\n+                                            \"{declare} trait object {captures}, {explicit}\",\n+                                            declare = declare,\n+                                            captures = captures,\n+                                            explicit = explicit,\n                                         ),\n-                                        format!(\" + {}\", lifetime_name),\n+                                        plus_lt,\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                 }\n                                 _ => {\n                                     err.span_suggestion_verbose(\n                                         lt.span,\n-                                        &format!(\n-                                            \"consider changing the trait object's explicit \\\n-                                             `'static` bound to {}\",\n-                                            lifetime,\n-                                        ),\n+                                        &format!(\"{} trait object's {}\", consider, explicit_static),\n                                         lifetime_name,\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                     err.span_suggestion_verbose(\n                                         param_info.param_ty_span,\n-                                        &format!(\n-                                            \"alternatively, set an explicit `'static` lifetime \\\n-                                             in this parameter\",\n-                                        ),\n+                                        add_static_bound,\n                                         param_info.param_ty.to_string(),\n                                         Applicability::MaybeIncorrect,\n                                     );"}, {"sha": "e9f155c6ced31004753642f00b3d3272b1956313", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -7,7 +7,7 @@ LL |     pub async fn run_dummy_fn(&self) {\n    |                               this data with an anonymous lifetime `'_`...\n    |                               ...is captured here...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and required to live as long as `'static` by this\n+   |         --- ...and is required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "a9fa0e93fed61fc8a0dc9b31041abed1503421bb", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,10 +4,10 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----     ---------   ^ ...and is captured here\n    |              |        |\n-   |              |        ...is required to live as long as `'static` by this...\n+   |              |        ...is required to live as long as `'static` here...\n    |              this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n@@ -18,10 +18,10 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                    -------     ---------   ^ ...and is captured here\n    |                    |           |\n-   |                    |           ...is required to live as long as `'static` by this...\n+   |                    |           ...is required to live as long as `'static` here...\n    |                    this data with lifetime `'a`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`\n+help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n@@ -32,14 +32,14 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----     -------------------   ^ ...and is captured here\n    |               |        |\n-   |               |        ...is required to live as long as `'static` by this...\n+   |               |        ...is required to live as long as `'static` here...\n    |               this data with an anonymous lifetime `'_`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to an anonymous lifetime `'_`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ^^\n-help: alternatively, set an explicit `'static` lifetime to this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ^^^^^^^^^^^^\n@@ -50,14 +50,14 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------     -------------------   ^ ...and is captured here\n    |                     |           |\n-   |                     |           ...is required to live as long as `'static` by this...\n+   |                     |           ...is required to live as long as `'static` here...\n    |                     this data with lifetime `'a`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                             ^^\n-help: alternatively, set an explicit `'static` lifetime to this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ^^^^^^^^^^^^\n@@ -76,14 +76,14 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      -------     --------------------------------   ^ ...and is captured here\n    |                      |           |\n-   |                      |           ...is required to live as long as `'static` by this...\n+   |                      |           ...is required to live as long as `'static` here...\n    |                      this data with lifetime `'a`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n    |                                                           ^^\n-help: alternatively, set an explicit `'static` lifetime to this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ^^^^^^^^^^^^\n@@ -109,11 +109,11 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is captured here requiring it to live as long as `'static`\n+   |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n@@ -122,11 +122,11 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is captured here requiring it to live as long as `'static`\n+   |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for lifetime `'a`\n+help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n@@ -135,15 +135,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is captured here requiring it to live as long as `'static`\n+   |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n-help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                        ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ^^^^^^^^^^^^\n@@ -152,13 +152,13 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is captured here requiring it to live as long as `'static`\n+   |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n+help: consider changing the trait object's explicit `'static` bound to argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                                 ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ^^^^^^^^^^^^"}, {"sha": "6681eaa909ee046c4da04771c88cb9d5eed97ea9", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -2,15 +2,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ----------------------- ...is required to live as long as `'static` by this...\n+   |                         -----     ----------------------- ...is required to live as long as `'static` here...\n    |                         |\n    |                         this data with an anonymous lifetime `'_`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n    |         ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n@@ -19,15 +19,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        --------     ----------------------- ...is required to live as long as `'static` by this...\n+   |                        --------     ----------------------- ...is required to live as long as `'static` here...\n    |                        |\n    |                        this data with lifetime `'a`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n    |         ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ^^^^"}, {"sha": "95f46bd7f3eb6127c8b104b475d4f7c5e71bdd30", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,9 +4,9 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is captured here requiring it to live as long as `'static`\n+   |              ^^^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^"}, {"sha": "e585db262f2d8f658e85470bae80aeafb70342cd", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -7,7 +7,7 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n LL |     ss.r\n    |     ^^^^ ...is captured and required live as long as `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^"}, {"sha": "8d048d90cb345ea825fbe320132946e19fcb2d08", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,13 +4,13 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                              ^ ...is captured here requiring it to live as long as `'static`\n+   |                                              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to argument `v`\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n@@ -21,13 +21,13 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |              ^ ...is captured here requiring it to live as long as `'static`\n+   |              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to argument `v`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n@@ -39,9 +39,9 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |              ^ ...is captured here requiring it to live as long as `'static`\n+   |              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^"}, {"sha": "5dfe384112b2a52ec801193d4dd6cfe8241dbf4d", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,13 +4,13 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here requiring it to live as long as `'static`\n+   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n+help: consider changing the trait object's explicit `'static` bound to argument `v`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {\n    |                                                            ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn g<'a, T: 'static>(v: std::boxed::Box<(dyn A<T> + 'static)>) -> Box<dyn X + 'static> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4d23118ba06f09eeb0ac49f9ebd803fb9a59e8cc", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,13 +4,13 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here requiring it to live as long as `'static`\n+   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n+help: consider changing the trait object's explicit `'static` bound to argument `v`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {\n    |                                                    ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn i<'a, T, U>(v: std::boxed::Box<(dyn A<U> + 'static)>) -> Box<dyn X + 'static> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e36f77ec1da961e567f44544c5cbbf3a7d5b71a1", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -5,13 +5,13 @@ LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |              ^^^^^^^^^^^^^^ ...is captured here requiring it to live as long as `'static`\n+   |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to argument `x`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n    |                                                           ^^\n-help: alternatively, set an explicit `'static` lifetime in this parameter\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n LL | fn static_proc(x: &'static isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ^^^^^^^^^^^^^^"}, {"sha": "365e38515b12cf6b42d6de27261c8d268c043998", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -2,7 +2,7 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ----------     ---------- ...and required to live as long as `'static` by this\n+   |                ^^^^  ----------     ---------- ...and is required to live as long as `'static` here\n    |                |     |\n    |                |     this data with an anonymous lifetime `'_`...\n    |                ...is captured here..."}, {"sha": "bd3f3efad82f2782c969bfb80ffd864750236ed1", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -4,10 +4,10 @@ error[E0758]: cannot infer an appropriate lifetime\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ----------     ----------   ^^^^ ...and is captured here\n    |                |              |\n-   |                |              ...is required to live as long as `'static` by this...\n+   |                |              ...is required to live as long as `'static` here...\n    |                this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ^^^^"}, {"sha": "d96a5f961bdb87332f8c50150546b93ed8b2a3f7", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -10,7 +10,7 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------     ------------- ...is required to live as long as `'static` by this...\n+   |                            ------     ------------- ...is required to live as long as `'static` here...\n    |                            |\n    |                            this data with an anonymous lifetime `'_`...\n ...\n@@ -19,7 +19,7 @@ LL | |         *dest = g.get();\n LL | |     }\n    | |_____^ ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the `impl Trait` captures data from argument `dest`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ^^^^"}, {"sha": "7c649f9c08d640dfc0dc33f7b6a1e775ab06795a", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31ea589a06e336a3d596e20e3a3f4327c8356aa4/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=31ea589a06e336a3d596e20e3a3f4327c8356aa4", "patch": "@@ -7,7 +7,7 @@ LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to\n LL |     Box::new(items.iter())\n    |     ---------------^^^^--- ...is captured and required live as long as `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n+help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^"}]}