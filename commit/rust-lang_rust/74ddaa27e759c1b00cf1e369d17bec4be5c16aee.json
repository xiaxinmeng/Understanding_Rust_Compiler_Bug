{"sha": "74ddaa27e759c1b00cf1e369d17bec4be5c16aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGRhYTI3ZTc1OWMxYjAwY2YxZTM2OWQxN2JlYzRiZTVjMTZhZWU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:16:46Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:16:46Z"}, "message": "back: archive: remove dead code", "tree": {"sha": "e717f26dc02558fcb02fc417d3b519db4be56170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e717f26dc02558fcb02fc417d3b519db4be56170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ddaa27e759c1b00cf1e369d17bec4be5c16aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ddaa27e759c1b00cf1e369d17bec4be5c16aee", "html_url": "https://github.com/rust-lang/rust/commit/74ddaa27e759c1b00cf1e369d17bec4be5c16aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ddaa27e759c1b00cf1e369d17bec4be5c16aee/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4c8a9c5764bf323f55f94603453dffbba6b1cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4c8a9c5764bf323f55f94603453dffbba6b1cc", "html_url": "https://github.com/rust-lang/rust/commit/5a4c8a9c5764bf323f55f94603453dffbba6b1cc"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "6de7bb59b6180ea82ee96d0bf6881d7154a47b9f", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74ddaa27e759c1b00cf1e369d17bec4be5c16aee/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ddaa27e759c1b00cf1e369d17bec4be5c16aee/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=74ddaa27e759c1b00cf1e369d17bec4be5c16aee", "patch": "@@ -87,29 +87,6 @@ impl<'a> Archive<'a> {\n         Archive { sess: sess, dst: dst }\n     }\n \n-    /// Read a file in the archive\n-    pub fn read(&self, file: &str) -> Vec<u8> {\n-        // Apparently if \"ar p\" is used on windows, it generates a corrupt file\n-        // which has bad headers and LLVM will immediately choke on it\n-        if cfg!(windows) {\n-            let loc = TempDir::new(\"rsar\").unwrap();\n-            let archive = os::make_absolute(&self.dst);\n-            run_ar(self.sess, \"x\", Some(loc.path()), [&archive,\n-                                                      &Path::new(file)]);\n-            let result: Vec<u8> =\n-                fs::File::open(&loc.path().join(file)).read_to_end()\n-                                                      .unwrap()\n-                                                      .move_iter()\n-                                                      .collect();\n-            result\n-        } else {\n-            run_ar(self.sess,\n-                   \"p\",\n-                   None,\n-                   [&self.dst, &Path::new(file)]).output.move_iter().collect()\n-        }\n-    }\n-\n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n     pub fn add_native_library(&mut self, name: &str) -> io::IoResult<()> {"}]}