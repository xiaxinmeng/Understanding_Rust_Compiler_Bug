{"sha": "02079e44dd81754de064de1c6153f6b55e4ec06e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDc5ZTQ0ZGQ4MTc1NGRlMDY0ZGUxYzYxNTNmNmI1NWU0ZWMwNmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-14T01:27:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-15T06:45:45Z"}, "message": "Point at var in short lived borrows", "tree": {"sha": "ec2e9823d88a8f7081ef669fc90e8d00b35d37b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2e9823d88a8f7081ef669fc90e8d00b35d37b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02079e44dd81754de064de1c6153f6b55e4ec06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02079e44dd81754de064de1c6153f6b55e4ec06e", "html_url": "https://github.com/rust-lang/rust/commit/02079e44dd81754de064de1c6153f6b55e4ec06e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02079e44dd81754de064de1c6153f6b55e4ec06e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933103190950c97b966e789e9206bff2f7bd6118", "url": "https://api.github.com/repos/rust-lang/rust/commits/933103190950c97b966e789e9206bff2f7bd6118", "html_url": "https://github.com/rust-lang/rust/commit/933103190950c97b966e789e9206bff2f7bd6118"}], "stats": {"total": 984, "additions": 514, "deletions": 470}, "files": [{"sha": "62736db9260ac4ca2671e4e1c9cdcc8d762904b1", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -919,11 +919,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 }\n \n                 let mut db = self.path_does_not_live_long_enough(error_span, &msg, Origin::Ast);\n-                let (value_kind, value_msg) = match err.cmt.cat {\n-                    mc::Categorization::Rvalue(..) =>\n-                        (\"temporary value\", \"temporary value created here\"),\n-                    _ =>\n-                        (\"borrowed value\", \"borrow occurs here\")\n+                let value_kind = match err.cmt.cat {\n+                    mc::Categorization::Rvalue(..) => \"temporary value\",\n+                    _ => \"borrowed value\",\n                 };\n \n                 let is_closure = match cause {\n@@ -936,14 +934,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             Some(primary) => {\n                                 db.span = MultiSpan::from_span(s);\n                                 db.span_label(primary, \"capture occurs here\");\n-                                db.span_label(s, \"does not live long enough\");\n+                                db.span_label(s, format!(\"{} does not live long enough\",\n+                                                         value_kind));\n                                 true\n                             }\n                             None => false\n                         }\n                     }\n                     _ => {\n-                        db.span_label(error_span, \"does not live long enough\");\n+                        db.span_label(error_span, format!(\"{} does not live long enough\",\n+                                                          value_kind));\n                         false\n                     }\n                 };\n@@ -954,8 +954,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {\n                         if !is_closure {\n-                            db.span = MultiSpan::from_span(s1);\n-                            db.span_label(error_span, value_msg);\n                             let msg = match opt_loan_path(&err.cmt) {\n                                 None => value_kind.to_string(),\n                                 Some(lp) => {\n@@ -971,8 +969,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 they are created\");\n                     }\n                     (Some(s1), Some(s2)) if !is_closure => {\n-                        db.span = MultiSpan::from_span(s2);\n-                        db.span_label(error_span, value_msg);\n                         let msg = match opt_loan_path(&err.cmt) {\n                             None => value_kind.to_string(),\n                             Some(lp) => {"}, {"sha": "4f88b0e6fccf62ba68ebc882f1913cd79bfa346c", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -37,22 +37,23 @@ fn main() {\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n+    //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n-}//~ ERROR `c` does not live long enough\n-//~^ ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n+}"}, {"sha": "8aa4fba70852637ef196d19927f253578cfbdbf9", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,44 +1,44 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:39:20\n    |\n 39 |     dt = Dt(\"dt\", &c);\n-   |                    - borrow occurs here\n+   |                    ^ borrowed value does not live long enough\n ...\n-55 | }//~ ERROR `c` does not live long enough\n-   | ^ `c` dropped here while still borrowed\n+59 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:41:20\n    |\n-40 |     dr = Dr(\"dr\", &c);\n-   |                    - borrow occurs here\n+41 |     dr = Dr(\"dr\", &c);\n+   |                    ^ borrowed value does not live long enough\n ...\n-55 | }//~ ERROR `c` does not live long enough\n-   | ^ `c` dropped here while still borrowed\n+59 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:49:29\n    |\n-47 |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             - borrow occurs here\n+49 |     pt = Pt(\"pt\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-55 | }//~ ERROR `c` does not live long enough\n-   | ^ `c` dropped here while still borrowed\n+59 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:55:1\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:51:29\n    |\n-48 |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             - borrow occurs here\n+51 |     pr = Pr(\"pr\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-55 | }//~ ERROR `c` does not live long enough\n-   | ^ `c` dropped here while still borrowed\n+59 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "3bd9efb32b3b4fba046645a2072e66375638b1fc", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -55,23 +55,23 @@ fn main() {\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n+    //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }\n-//~^ ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough"}, {"sha": "4fa188908fddbf771ac0852be980132ea9b9a782", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,44 +1,44 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n+  --> $DIR/dropck-eyepatch-reorder.rs:57:20\n    |\n 57 |     dt = Dt(\"dt\", &c);\n-   |                    - borrow occurs here\n+   |                    ^ borrowed value does not live long enough\n ...\n-73 | }\n-   | ^ `c` dropped here while still borrowed\n+77 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n+  --> $DIR/dropck-eyepatch-reorder.rs:59:20\n    |\n-58 |     dr = Dr(\"dr\", &c);\n-   |                    - borrow occurs here\n+59 |     dr = Dr(\"dr\", &c);\n+   |                    ^ borrowed value does not live long enough\n ...\n-73 | }\n-   | ^ `c` dropped here while still borrowed\n+77 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n+  --> $DIR/dropck-eyepatch-reorder.rs:67:29\n    |\n-65 |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             - borrow occurs here\n+67 |     pt = Pt(\"pt\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-73 | }\n-   | ^ `c` dropped here while still borrowed\n+77 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:73:1\n+  --> $DIR/dropck-eyepatch-reorder.rs:69:29\n    |\n-66 |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             - borrow occurs here\n+69 |     pr = Pr(\"pr\", &c_long, &c);\n+   |                             ^ borrowed value does not live long enough\n ...\n-73 | }\n-   | ^ `c` dropped here while still borrowed\n+77 | }\n+   | - `c` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "abaae47189f8bf77703a1b1c8a25b44a80a4a17b", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -78,23 +78,23 @@ fn main() {\n     dr = Dr(\"dr\", &c_long);\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n+    //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c, &c_long);\n     pr = Pr(\"pr\", &c, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c);\n+    //~^ ERROR `c` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c);\n     sr = Sr(\"sr\", &c);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }\n-//~^ ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough\n-//~| ERROR `c` does not live long enough"}, {"sha": "79fb9222d5ca3438e1b27d2716f8b97f50ac6147", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,46 +1,46 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:96:1\n-   |\n-80 |     dt = Dt(\"dt\", &c);\n-   |                    - borrow occurs here\n+   --> $DIR/dropck-eyepatch.rs:80:20\n+    |\n+80  |     dt = Dt(\"dt\", &c);\n+    |                    ^ borrowed value does not live long enough\n ...\n-96 | }\n-   | ^ `c` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+100 | }\n+    | - `c` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:96:1\n-   |\n-81 |     dr = Dr(\"dr\", &c);\n-   |                    - borrow occurs here\n+   --> $DIR/dropck-eyepatch.rs:82:20\n+    |\n+82  |     dr = Dr(\"dr\", &c);\n+    |                    ^ borrowed value does not live long enough\n ...\n-96 | }\n-   | ^ `c` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+100 | }\n+    | - `c` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:96:1\n-   |\n-88 |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             - borrow occurs here\n+   --> $DIR/dropck-eyepatch.rs:90:29\n+    |\n+90  |     pt = Pt(\"pt\", &c_long, &c);\n+    |                             ^ borrowed value does not live long enough\n ...\n-96 | }\n-   | ^ `c` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+100 | }\n+    | - `c` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:96:1\n-   |\n-89 |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             - borrow occurs here\n+   --> $DIR/dropck-eyepatch.rs:92:29\n+    |\n+92  |     pr = Pr(\"pr\", &c_long, &c);\n+    |                             ^ borrowed value does not live long enough\n ...\n-96 | }\n-   | ^ `c` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+100 | }\n+    | - `c` dropped here while still borrowed\n+    |\n+    = note: values in a scope are dropped in the opposite order they are created\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cb84eaedb3354836a8b73532a077702c12e12e8b", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:18:20\n    |\n 18 |         (|| yield &a).resume()\n-   |          --        ^ does not live long enough\n+   |          --        ^ borrowed value does not live long enough\n    |          |\n    |          capture occurs here\n 19 |         //~^ ERROR: `a` does not live long enough\n@@ -18,7 +18,7 @@ error[E0597]: `a` does not live long enough\n 24 |         || {\n    |         -- capture occurs here\n 25 |             yield &a\n-   |                    ^ does not live long enough\n+   |                    ^ borrowed value does not live long enough\n ...\n 28 |     };\n    |     - borrowed value only lives until here"}, {"sha": "989949cd9d75a63fc370b7be24c28c76d3685583", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -22,7 +22,8 @@ fn foo(x: &i32) {\n         yield();\n         let b = 5;\n         a = &b;\n-    }; //~ ERROR\n+        //~^ ERROR `b` does not live long enough\n+    };\n }\n \n fn main() { }"}, {"sha": "fbb72884156ba9f968391bc4818050e0d81b6f82", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,12 @@\n error[E0597]: `b` does not live long enough\n-  --> $DIR/ref-escapes-but-not-over-yield.rs:25:5\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:24:14\n    |\n 24 |         a = &b;\n-   |              - borrow occurs here\n-25 |     }; //~ ERROR\n-   |     ^ `b` dropped here while still borrowed\n-26 | }\n+   |              ^ borrowed value does not live long enough\n+25 |         //~^ ERROR `b` does not live long enough\n+26 |     };\n+   |     - `b` dropped here while still borrowed\n+27 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "466ae501a320a5f268568b08eef0962f9bd1e889", "filename": "src/test/ui/issue-46471-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `z` does not live long enough (Ast)\n-  --> $DIR/issue-46471-1.rs:17:5\n+  --> $DIR/issue-46471-1.rs:16:14\n    |\n 16 |         &mut z\n-   |              - borrow occurs here\n+   |              ^ borrowed value does not live long enough\n 17 |     };\n-   |     ^ `z` dropped here while still borrowed\n+   |     - `z` dropped here while still borrowed\n ...\n 21 | }\n    | - borrowed value needs to live until here"}, {"sha": "bddd1a9f232bba9f9935d46b4dc8bb196e1984d1", "filename": "src/test/ui/issue-46471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `x` does not live long enough (Ast)\n   --> $DIR/issue-46471.rs:15:6\n    |\n 15 |     &x\n-   |      ^ does not live long enough\n+   |      ^ borrowed value does not live long enough\n ...\n 18 | }\n    | - borrowed value only lives until here"}, {"sha": "a6bde956fca62beaf932f02833185c46c162122a", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: borrowed value does not live long enough (Ast)\n   --> $DIR/issue-46472.rs:14:10\n    |\n 14 |     &mut 4\n-   |          ^ does not live long enough\n+   |          ^ temporary value does not live long enough\n ...\n 17 | }\n    | - temporary value only lives until here"}, {"sha": "1c904648f9e7b9827edb922dc8b7ce0b9663c4d4", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    let x = vec![1].iter(); //~ ERROR does not live long enough\n+    let x = vec![1].iter();\n }\n \n fn main() {"}, {"sha": "66be3f964ec5e80660927e91254f0a8941263d90", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion.rs:12:27\n+  --> $DIR/borrowck-let-suggestion.rs:12:13\n    |\n-12 |     let x = vec![1].iter(); //~ ERROR does not live long enough\n-   |             -------       ^ temporary value dropped here while still borrowed\n+12 |     let x = vec![1].iter();\n+   |             ^^^^^^^       - temporary value dropped here while still borrowed\n    |             |\n-   |             temporary value created here\n+   |             temporary value does not live long enough\n 13 | }\n    | - temporary value needs to live until here\n    |"}, {"sha": "5d7d1cd30c0cd8349f9e553f11e25577fea8fd93", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -19,29 +19,43 @@ fn f() {\n     let young = ['y'];       // statement 3\n \n     v2.push(&young[0]);      // statement 4\n+    //~^ ERROR `young[..]` does not live long enough\n+    //~| NOTE borrowed value does not live long enough\n+    //~| NOTE values in a scope are dropped in the opposite order they are created\n \n     let mut v3 = Vec::new(); // statement 5\n \n     v3.push(&id('x'));           // statement 6\n     //~^ ERROR borrowed value does not live long enough\n+    //~| NOTE temporary value does not live long enough\n+    //~| NOTE temporary value dropped here while still borrowed\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     {\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n         v4.push(&id('y'));\n         //~^ ERROR borrowed value does not live long enough\n+        //~| NOTE temporary value does not live long enough\n+        //~| NOTE temporary value dropped here while still borrowed\n+        //~| NOTE consider using a `let` binding to increase its lifetime\n \n     }                       // (statement 7)\n \n     let mut v5 = Vec::new(); // statement 8\n \n     v5.push(&id('z'));\n     //~^ ERROR borrowed value does not live long enough\n+    //~| NOTE temporary value does not live long enough\n+    //~| NOTE temporary value dropped here while still borrowed\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     v1.push(&old[0]);\n }\n-//~^ ERROR `young[..]` does not live long enough\n+//~^ NOTE `young[..]` dropped here while still borrowed\n+//~| NOTE temporary value needs to live until here\n+//~| NOTE temporary value needs to live until here\n \n fn main() {\n     f();"}, {"sha": "7f07a09358ab614488c10df0daade86353a7e8f3", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -12,9 +12,10 @@ fn main() {\n     let msg;\n     match Some(\"Hello\".to_string()) {\n         Some(ref m) => {\n+        //~^ ERROR borrowed value does not live long enough\n             msg = m;\n         },\n         None => { panic!() }\n-    } //~ ERROR borrowed value does not live long enough\n+    }\n     println!(\"{}\", *msg);\n }"}, {"sha": "80ddd150757e6c0357432c9dea6e238e9d9b2ee7", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,13 +1,13 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-ref-into-rvalue.rs:18:5\n+  --> $DIR/borrowck-ref-into-rvalue.rs:14:14\n    |\n 14 |         Some(ref m) => {\n-   |              ----- borrow occurs here\n+   |              ^^^^^ borrowed value does not live long enough\n ...\n-18 |     } //~ ERROR borrowed value does not live long enough\n-   |     ^ borrowed value dropped here while still borrowed\n-19 |     println!(\"{}\", *msg);\n-20 | }\n+19 |     }\n+   |     - borrowed value dropped here while still borrowed\n+20 |     println!(\"{}\", *msg);\n+21 | }\n    | - borrowed value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime"}, {"sha": "d20194422f737a1a60fa0ab10de83c73996b092d", "filename": "src/test/ui/span/destructor-restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     let b = {\n         let a = Box::new(RefCell::new(4));\n         *a.borrow() + 1\n-    }; //~ ERROR `*a` does not live long enough\n+    }; //~^ ERROR `*a` does not live long enough\n     println!(\"{}\", b);\n }"}, {"sha": "abe982c5ce3c16faeb27df6601170108082d190c", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `*a` does not live long enough\n-  --> $DIR/destructor-restrictions.rs:19:5\n+  --> $DIR/destructor-restrictions.rs:18:10\n    |\n 18 |         *a.borrow() + 1\n-   |          - borrow occurs here\n-19 |     }; //~ ERROR `*a` does not live long enough\n-   |     ^- borrowed value needs to live until here\n+   |          ^ borrowed value does not live long enough\n+19 |     }; //~^ ERROR `*a` does not live long enough\n+   |     -- borrowed value needs to live until here\n    |     |\n    |     `*a` dropped here while still borrowed\n "}, {"sha": "6bf2ae978a0dcba5545c0aca03be81e4eab87005", "filename": "src/test/ui/span/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -101,18 +101,18 @@ fn f() {\n     b2 = B::new();\n     b3 = B::new();\n     b1.a[0].v.set(Some(&b2));\n+    //~^ ERROR `b2` does not live long enough\n     b1.a[1].v.set(Some(&b3));\n+    //~^ ERROR `b3` does not live long enough\n     b2.a[0].v.set(Some(&b2));\n+    //~^ ERROR `b2` does not live long enough\n     b2.a[1].v.set(Some(&b3));\n+    //~^ ERROR `b3` does not live long enough\n     b3.a[0].v.set(Some(&b1));\n+    //~^ ERROR `b1` does not live long enough\n     b3.a[1].v.set(Some(&b2));\n+    //~^ ERROR `b2` does not live long enough\n }\n-//~^ ERROR `b2` does not live long enough\n-//~| ERROR `b3` does not live long enough\n-//~| ERROR `b2` does not live long enough\n-//~| ERROR `b3` does not live long enough\n-//~| ERROR `b1` does not live long enough\n-//~| ERROR `b2` does not live long enough\n \n fn main() {\n     f();"}, {"sha": "1225c36ab3de344c1f7c444d2ec4e5f9d1d96eeb", "filename": "src/test/ui/span/dropck_arr_cycle_checked.stderr", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,65 +1,66 @@\n error[E0597]: `b2` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:103:25\n     |\n 103 |     b1.a[0].v.set(Some(&b2));\n-    |                         -- borrow occurs here\n+    |                         ^^ borrowed value does not live long enough\n ...\n-109 | }\n-    | ^ `b2` dropped here while still borrowed\n+115 | }\n+    | - `b2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `b3` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:105:25\n     |\n-104 |     b1.a[1].v.set(Some(&b3));\n-    |                         -- borrow occurs here\n+105 |     b1.a[1].v.set(Some(&b3));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-109 | }\n-    | ^ `b3` dropped here while still borrowed\n+115 | }\n+    | - `b3` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `b2` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:107:25\n     |\n-105 |     b2.a[0].v.set(Some(&b2));\n-    |                         -- borrow occurs here\n+107 |     b2.a[0].v.set(Some(&b2));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-109 | }\n-    | ^ `b2` dropped here while still borrowed\n+115 | }\n+    | - `b2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `b3` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:109:25\n     |\n-106 |     b2.a[1].v.set(Some(&b3));\n-    |                         -- borrow occurs here\n+109 |     b2.a[1].v.set(Some(&b3));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-109 | }\n-    | ^ `b3` dropped here while still borrowed\n+115 | }\n+    | - `b3` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `b1` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:111:25\n     |\n-107 |     b3.a[0].v.set(Some(&b1));\n-    |                         -- borrow occurs here\n-108 |     b3.a[1].v.set(Some(&b2));\n-109 | }\n-    | ^ `b1` dropped here while still borrowed\n+111 |     b3.a[0].v.set(Some(&b1));\n+    |                         ^^ borrowed value does not live long enough\n+...\n+115 | }\n+    | - `b1` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `b2` does not live long enough\n-   --> $DIR/dropck_arr_cycle_checked.rs:109:1\n+   --> $DIR/dropck_arr_cycle_checked.rs:113:25\n     |\n-108 |     b3.a[1].v.set(Some(&b2));\n-    |                         -- borrow occurs here\n-109 | }\n-    | ^ `b2` dropped here while still borrowed\n+113 |     b3.a[1].v.set(Some(&b2));\n+    |                         ^^ borrowed value does not live long enough\n+114 |     //~^ ERROR `b2` does not live long enough\n+115 | }\n+    | - `b2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "0c6ebd5c8d8142cc3ff7fffbb6a76bedab175b76", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -44,10 +44,10 @@ impl<'a> Drop for D<'a> {\n fn g() {\n     let (d1, d2) = (D::new(format!(\"d1\")), D::new(format!(\"d2\")));\n     d1.p.set(Some(&d2));\n+    //~^ ERROR `d2` does not live long enough\n     d2.p.set(Some(&d1));\n+    //~^ ERROR `d1` does not live long enough\n }\n-//~^ ERROR `d2` does not live long enough\n-//~| ERROR `d1` does not live long enough\n \n fn main() {\n     g();"}, {"sha": "462b291f4fad002c7640bc5f2ab6a2cd316ad51d", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,22 @@\n error[E0597]: `d2` does not live long enough\n-  --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:46:20\n    |\n 46 |     d1.p.set(Some(&d2));\n-   |                    -- borrow occurs here\n-47 |     d2.p.set(Some(&d1));\n-48 | }\n-   | ^ `d2` dropped here while still borrowed\n+   |                    ^^ borrowed value does not live long enough\n+...\n+50 | }\n+   | - `d2` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `d1` does not live long enough\n-  --> $DIR/dropck_direct_cycle_with_drop.rs:48:1\n+  --> $DIR/dropck_direct_cycle_with_drop.rs:48:20\n    |\n-47 |     d2.p.set(Some(&d1));\n-   |                    -- borrow occurs here\n-48 | }\n-   | ^ `d1` dropped here while still borrowed\n+48 |     d2.p.set(Some(&d1));\n+   |                    ^^ borrowed value does not live long enough\n+49 |     //~^ ERROR `d1` does not live long enough\n+50 | }\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "a98cce32e9d7af16fff4c6aefdd067751399a9fb", "filename": "src/test/ui/span/dropck_misc_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -32,16 +32,16 @@ fn projection() {\n     bomb = vec![\"\"];\n     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n }\n-//~^ ERROR `bomb` does not live long enough\n+//~^^ ERROR `bomb` does not live long enough\n \n fn closure() {\n     let (_w,v);\n     v = vec![\"\"];\n     _w = {\n         let u = NoisyDrop(&v);\n+        //~^ ERROR `v` does not live long enough\n         move || u.0.len()\n     };\n }\n-//~^ ERROR `v` does not live long enough\n \n fn main() { closure(); projection() }"}, {"sha": "b839701f08b91bda8ad9a7c8a7ed2561a3a011bf", "filename": "src/test/ui/span/dropck_misc_variants.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,21 @@\n error[E0597]: `bomb` does not live long enough\n-  --> $DIR/dropck_misc_variants.rs:34:1\n+  --> $DIR/dropck_misc_variants.rs:33:37\n    |\n 33 |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n-   |                                     ---- borrow occurs here\n+   |                                     ^^^^ borrowed value does not live long enough\n 34 | }\n-   | ^ `bomb` dropped here while still borrowed\n+   | - `bomb` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `v` does not live long enough\n-  --> $DIR/dropck_misc_variants.rs:44:1\n+  --> $DIR/dropck_misc_variants.rs:41:28\n    |\n 41 |         let u = NoisyDrop(&v);\n-   |                            - borrow occurs here\n+   |                            ^ borrowed value does not live long enough\n ...\n-44 | }\n-   | ^ `v` dropped here while still borrowed\n+45 | }\n+   | - `v` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "0560900e85855c9c2da18f13eeb7970a31cbd52d", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -108,18 +108,18 @@ fn f() {\n     c3.v.push(CheckId(Cell::new(None)));\n \n     c1.v[0].v.set(Some(&c2));\n+    //~^ ERROR `c2` does not live long enough\n     c1.v[1].v.set(Some(&c3));\n+    //~^ ERROR `c3` does not live long enough\n     c2.v[0].v.set(Some(&c2));\n+    //~^ ERROR `c2` does not live long enough\n     c2.v[1].v.set(Some(&c3));\n+    //~^ ERROR `c3` does not live long enough\n     c3.v[0].v.set(Some(&c1));\n+    //~^ ERROR `c1` does not live long enough\n     c3.v[1].v.set(Some(&c2));\n+    //~^ ERROR `c2` does not live long enough\n }\n-//~^ ERROR `c2` does not live long enough\n-//~| ERROR `c3` does not live long enough\n-//~| ERROR `c2` does not live long enough\n-//~| ERROR `c3` does not live long enough\n-//~| ERROR `c1` does not live long enough\n-//~| ERROR `c2` does not live long enough\n \n fn main() {\n     f();"}, {"sha": "799dfb8e2010b2579f02570f0517eb89528cdbfd", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,65 +1,66 @@\n error[E0597]: `c2` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:110:25\n     |\n 110 |     c1.v[0].v.set(Some(&c2));\n-    |                         -- borrow occurs here\n+    |                         ^^ borrowed value does not live long enough\n ...\n-116 | }\n-    | ^ `c2` dropped here while still borrowed\n+122 | }\n+    | - `c2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:112:25\n     |\n-111 |     c1.v[1].v.set(Some(&c3));\n-    |                         -- borrow occurs here\n+112 |     c1.v[1].v.set(Some(&c3));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-116 | }\n-    | ^ `c3` dropped here while still borrowed\n+122 | }\n+    | - `c3` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:114:25\n     |\n-112 |     c2.v[0].v.set(Some(&c2));\n-    |                         -- borrow occurs here\n+114 |     c2.v[0].v.set(Some(&c2));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-116 | }\n-    | ^ `c2` dropped here while still borrowed\n+122 | }\n+    | - `c2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:116:25\n     |\n-113 |     c2.v[1].v.set(Some(&c3));\n-    |                         -- borrow occurs here\n+116 |     c2.v[1].v.set(Some(&c3));\n+    |                         ^^ borrowed value does not live long enough\n ...\n-116 | }\n-    | ^ `c3` dropped here while still borrowed\n+122 | }\n+    | - `c3` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c1` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:118:25\n     |\n-114 |     c3.v[0].v.set(Some(&c1));\n-    |                         -- borrow occurs here\n-115 |     c3.v[1].v.set(Some(&c2));\n-116 | }\n-    | ^ `c1` dropped here while still borrowed\n+118 |     c3.v[0].v.set(Some(&c1));\n+    |                         ^^ borrowed value does not live long enough\n+...\n+122 | }\n+    | - `c1` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-   --> $DIR/dropck_vec_cycle_checked.rs:116:1\n+   --> $DIR/dropck_vec_cycle_checked.rs:120:25\n     |\n-115 |     c3.v[1].v.set(Some(&c2));\n-    |                         -- borrow occurs here\n-116 | }\n-    | ^ `c2` dropped here while still borrowed\n+120 |     c3.v[1].v.set(Some(&c2));\n+    |                         ^^ borrowed value does not live long enough\n+121 |     //~^ ERROR `c2` does not live long enough\n+122 | }\n+    | - `c2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "01cd7661fb73d7da93af1f19cd4cd8d8c0ee397e", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n 18 |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n    |                                    ^\n    |                                    |\n-   |                                    borrow occurs here\n+   |                                    borrowed value does not live long enough\n    |                                    `x` dropped here while still borrowed\n ...\n 23 | }"}, {"sha": "2fbc63eb80537f14e43a8aa3aefc49cff5d632f5", "filename": "src/test/ui/span/issue-15480.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -13,7 +13,8 @@ fn id<T>(x: T) -> T { x }\n fn main() {\n     let v = vec![\n         &id(3)\n-    ]; //~ ERROR borrowed value does not live long enough\n+    ];\n+    //~^^ ERROR borrowed value does not live long enough\n \n     for &&x in &v {\n         println!(\"{}\", x + 3);"}, {"sha": "28841fbea973c55121095eb18be121e0d24f477a", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/issue-15480.rs:16:6\n+  --> $DIR/issue-15480.rs:15:10\n    |\n 15 |         &id(3)\n-   |          ----- temporary value created here\n-16 |     ]; //~ ERROR borrowed value does not live long enough\n-   |      ^ temporary value dropped here while still borrowed\n+   |          ^^^^^ temporary value does not live long enough\n+16 |     ];\n+   |      - temporary value dropped here while still borrowed\n ...\n-21 | }\n+22 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime"}, {"sha": "8f556d288198a155c802ae0d352f5518758d987f", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -19,13 +19,14 @@ fn foo(x: RefCell<String>) -> String {\n     let y = x;\n     y.borrow().clone()\n }\n-//~^ ERROR `y` does not live long enough\n+//~^^ ERROR `y` does not live long enough\n \n fn foo2(x: RefCell<String>) -> String {\n     let ret = {\n         let y = x;\n         y.borrow().clone()\n-    }; //~ ERROR `y` does not live long enough\n+    };\n+    //~^^ ERROR `y` does not live long enough\n     ret\n }\n "}, {"sha": "1c9a64bc21309ec1a77f69d3eb8c1bb640bae513", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,20 +1,20 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:21:1\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:20:5\n    |\n 20 |     y.borrow().clone()\n-   |     - borrow occurs here\n+   |     ^ borrowed value does not live long enough\n 21 | }\n-   | ^ `y` dropped here while still borrowed\n+   | - `y` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:28:5\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n    |\n 27 |         y.borrow().clone()\n-   |         - borrow occurs here\n-28 |     }; //~ ERROR `y` does not live long enough\n-   |     ^- borrowed value needs to live until here\n+   |         ^ borrowed value does not live long enough\n+28 |     };\n+   |     -- borrowed value needs to live until here\n    |     |\n    |     `y` dropped here while still borrowed\n "}, {"sha": "7b3c09659e1512c721191c4edd23cd2397f1a233", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -36,11 +36,11 @@ fn f_child() {\n     d1 = D_Child(1);\n     // ... we store a reference to `d1` within `_d` ...\n     _d = D_Child(&d1);\n+    //~^ ERROR `d1` does not live long enough\n \n     // ... dropck *should* complain, because Drop of _d could (and\n     // does) access the already dropped `d1` via the `foo` method.\n }\n-//~^ ERROR `d1` does not live long enough\n \n fn main() {\n     f_child();"}, {"sha": "f61a091950173411eb3ccf86b736a65046f3b51e", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,11 @@\n error[E0597]: `d1` does not live long enough\n-  --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:42:1\n+  --> $DIR/issue-24805-dropck-child-has-items-via-parent.rs:38:19\n    |\n 38 |     _d = D_Child(&d1);\n-   |                   -- borrow occurs here\n+   |                   ^^ borrowed value does not live long enough\n ...\n-42 | }\n-   | ^ `d1` dropped here while still borrowed\n+43 | }\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "75523386931c091f79609917a38973b2ab23f1d9", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -46,19 +46,19 @@ fn f_sm() {\n     d1 = D_HasSelfMethod(1);\n     _d = D_HasSelfMethod(&d1);\n }\n-//~^ ERROR `d1` does not live long enough\n+//~^^ ERROR `d1` does not live long enough\n fn f_mwsa() {\n     let (_d, d1);\n     d1 = D_HasMethodWithSelfArg(1);\n     _d = D_HasMethodWithSelfArg(&d1);\n }\n-//~^ ERROR `d1` does not live long enough\n+//~^^ ERROR `d1` does not live long enough\n fn f_t() {\n     let (_d, d1);\n     d1 = D_HasType(1);\n     _d = D_HasType(&d1);\n }\n-//~^ ERROR `d1` does not live long enough\n+//~^^ ERROR `d1` does not live long enough\n \n fn main() {\n     f_sm();"}, {"sha": "662ec58805d90f6d854150d449c3fa67892b44a5", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,30 +1,30 @@\n error[E0597]: `d1` does not live long enough\n-  --> $DIR/issue-24805-dropck-trait-has-items.rs:48:1\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:47:27\n    |\n 47 |     _d = D_HasSelfMethod(&d1);\n-   |                           -- borrow occurs here\n+   |                           ^^ borrowed value does not live long enough\n 48 | }\n-   | ^ `d1` dropped here while still borrowed\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `d1` does not live long enough\n-  --> $DIR/issue-24805-dropck-trait-has-items.rs:54:1\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:53:34\n    |\n 53 |     _d = D_HasMethodWithSelfArg(&d1);\n-   |                                  -- borrow occurs here\n+   |                                  ^^ borrowed value does not live long enough\n 54 | }\n-   | ^ `d1` dropped here while still borrowed\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `d1` does not live long enough\n-  --> $DIR/issue-24805-dropck-trait-has-items.rs:60:1\n+  --> $DIR/issue-24805-dropck-trait-has-items.rs:59:21\n    |\n 59 |     _d = D_HasType(&d1);\n-   |                     -- borrow occurs here\n+   |                     ^^ borrowed value does not live long enough\n 60 | }\n-   | ^ `d1` dropped here while still borrowed\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "326e6b43e25b45b07a7a7d76f448d70bf0ac8c48", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -35,4 +35,5 @@ fn main() {\n     let (d2, d1);\n     d1 = D(34, \"d1\");\n     d2 = D(S(&d1, \"inner\"), \"d2\");\n-} //~ ERROR `d1` does not live long enough\n+}\n+//~^^ ERROR `d1` does not live long enough"}, {"sha": "1c68cacad7c99c48416022c55fad5593d7693572", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `d1` does not live long enough\n-  --> $DIR/issue-24895-copy-clone-dropck.rs:38:1\n+  --> $DIR/issue-24895-copy-clone-dropck.rs:37:15\n    |\n 37 |     d2 = D(S(&d1, \"inner\"), \"d2\");\n-   |               -- borrow occurs here\n-38 | } //~ ERROR `d1` does not live long enough\n-   | ^ `d1` dropped here while still borrowed\n+   |               ^^ borrowed value does not live long enough\n+38 | }\n+   | - `d1` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "7b1f4005e63336459195a0298b93881f9b1ac8d6", "filename": "src/test/ui/span/issue-25199.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -78,8 +78,8 @@ impl<'a> Drop for Test<'a> {\n fn main() {\n     let container = Container::new();\n     let test = Test{test: &container};\n+    //~^ ERROR `container` does not live long enough\n     println!(\"container.v[30]: {:?}\", container.v.v[30]);\n     container.store(test);\n+    //~^ ERROR `container` does not live long enough\n }\n-//~^ ERROR `container` does not live long enough\n-//~| ERROR `container` does not live long enough"}, {"sha": "af02e9d6d54f16910278dcd43baf8b37e0a63072", "filename": "src/test/ui/span/issue-25199.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,22 @@\n error[E0597]: `container` does not live long enough\n-  --> $DIR/issue-25199.rs:83:1\n+  --> $DIR/issue-25199.rs:80:28\n    |\n 80 |     let test = Test{test: &container};\n-   |                            --------- borrow occurs here\n+   |                            ^^^^^^^^^ borrowed value does not live long enough\n ...\n-83 | }\n-   | ^ `container` dropped here while still borrowed\n+85 | }\n+   | - `container` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `container` does not live long enough\n-  --> $DIR/issue-25199.rs:83:1\n+  --> $DIR/issue-25199.rs:83:5\n    |\n-82 |     container.store(test);\n-   |     --------- borrow occurs here\n-83 | }\n-   | ^ `container` dropped here while still borrowed\n+83 |     container.store(test);\n+   |     ^^^^^^^^^ borrowed value does not live long enough\n+84 |     //~^ ERROR `container` does not live long enough\n+85 | }\n+   | - `container` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "05f0ea5474f1ebd4d3acfef7fcc2d0daaf0656e1", "filename": "src/test/ui/span/issue-26656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -49,4 +49,4 @@ fn main() {\n     ticking = Bomb { usable: true };\n     zook.button = B::BigRedButton(&ticking);\n }\n-//~^ ERROR `ticking` does not live long enough\n+//~^^ ERROR `ticking` does not live long enough"}, {"sha": "1d632271f81448405c037e2f71c62c79255518d1", "filename": "src/test/ui/span/issue-26656.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `ticking` does not live long enough\n-  --> $DIR/issue-26656.rs:51:1\n+  --> $DIR/issue-26656.rs:50:36\n    |\n 50 |     zook.button = B::BigRedButton(&ticking);\n-   |                                    ------- borrow occurs here\n+   |                                    ^^^^^^^ borrowed value does not live long enough\n 51 | }\n-   | ^ `ticking` dropped here while still borrowed\n+   | - `ticking` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "03a9a629c91358c99a89ed0e4f9fb6ae5e59c087", "filename": "src/test/ui/span/issue-29106.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -24,11 +24,13 @@ fn main() {\n         let (y, x);\n         x = \"alive\".to_string();\n         y = Arc::new(Foo(&x));\n-    } //~ ERROR `x` does not live long enough\n+    }\n+    //~^^ ERROR `x` does not live long enough\n \n     {\n         let (y, x);\n         x = \"alive\".to_string();\n         y = Rc::new(Foo(&x));\n-    } //~ ERROR `x` does not live long enough\n+    }\n+    //~^^ ERROR `x` does not live long enough\n }"}, {"sha": "24042e23fef0180737e82634cd8df93b8affd5fd", "filename": "src/test/ui/span/issue-29106.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,20 +1,20 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-29106.rs:27:5\n+  --> $DIR/issue-29106.rs:26:27\n    |\n 26 |         y = Arc::new(Foo(&x));\n-   |                           - borrow occurs here\n-27 |     } //~ ERROR `x` does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n+   |                           ^ borrowed value does not live long enough\n+27 |     }\n+   |     - `x` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-29106.rs:33:5\n+  --> $DIR/issue-29106.rs:33:26\n    |\n-32 |         y = Rc::new(Foo(&x));\n-   |                          - borrow occurs here\n-33 |     } //~ ERROR `x` does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n+33 |         y = Rc::new(Foo(&x));\n+   |                          ^ borrowed value does not live long enough\n+34 |     }\n+   |     - `x` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "cf33ccf8095b57ea8f040ce3281114e1a136ec89", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,11 @@\n error[E0597]: `foo` does not live long enough\n-  --> $DIR/issue-40157.rs:12:64\n+  --> $DIR/issue-40157.rs:12:53\n    |\n 12 |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n-   |      ----------------------------------------------------------^-------------\n+   |      -----------------------------------------------^^^----------------------\n    |      |                                              |          |\n    |      |                                              |          `foo` dropped here while still borrowed\n-   |      |                                              borrow occurs here\n+   |      |                                              borrowed value does not live long enough\n    |      borrowed value needs to live until here\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "cee7c57c2019fea29004764a1dab7b5be30eb87b", "filename": "src/test/ui/span/issue28498-reject-ex1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     foo.data.push(Concrete(0, Cell::new(None)));\n \n     foo.data[0].1.set(Some(&foo.data[1]));\n+    //~^ ERROR `foo.data` does not live long enough\n     foo.data[1].1.set(Some(&foo.data[0]));\n+    //~^ ERROR `foo.data` does not live long enough\n }\n-//~^ ERROR `foo.data` does not live long enough\n-//~| ERROR `foo.data` does not live long enough"}, {"sha": "8ade2f38eee3e81eea83e5d26f0408cd437a8b0e", "filename": "src/test/ui/span/issue28498-reject-ex1.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,22 @@\n error[E0597]: `foo.data` does not live long enough\n-  --> $DIR/issue28498-reject-ex1.rs:46:1\n+  --> $DIR/issue28498-reject-ex1.rs:44:29\n    |\n 44 |     foo.data[0].1.set(Some(&foo.data[1]));\n-   |                             -------- borrow occurs here\n-45 |     foo.data[1].1.set(Some(&foo.data[0]));\n-46 | }\n-   | ^ `foo.data` dropped here while still borrowed\n+   |                             ^^^^^^^^ borrowed value does not live long enough\n+...\n+48 | }\n+   | - `foo.data` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `foo.data` does not live long enough\n-  --> $DIR/issue28498-reject-ex1.rs:46:1\n+  --> $DIR/issue28498-reject-ex1.rs:46:29\n    |\n-45 |     foo.data[1].1.set(Some(&foo.data[0]));\n-   |                             -------- borrow occurs here\n-46 | }\n-   | ^ `foo.data` dropped here while still borrowed\n+46 |     foo.data[1].1.set(Some(&foo.data[0]));\n+   |                             ^^^^^^^^ borrowed value does not live long enough\n+47 |     //~^ ERROR `foo.data` does not live long enough\n+48 | }\n+   | - `foo.data` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "92028c7a818c206742cac8837509603e2df5f220", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -40,9 +40,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped);\n+    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped);\n+    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n-//~^ ERROR `last_dropped` does not live long enough\n-//~| ERROR `first_dropped` does not live long enough"}, {"sha": "eb287265dac2e7d07f4e3ad10a85610e48761231", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,22 +1,22 @@\n error[E0597]: `last_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n+  --> $DIR/issue28498-reject-lifetime-param.rs:42:20\n    |\n 42 |     foo0 = Foo(0, &last_dropped);\n-   |                    ------------ borrow occurs here\n+   |                    ^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-46 | }\n-   | ^ `last_dropped` dropped here while still borrowed\n+48 | }\n+   | - `last_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-lifetime-param.rs:46:1\n+  --> $DIR/issue28498-reject-lifetime-param.rs:44:20\n    |\n-43 |     foo1 = Foo(1, &first_dropped);\n-   |                    ------------- borrow occurs here\n+44 |     foo1 = Foo(1, &first_dropped);\n+   |                    ^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-46 | }\n-   | ^ `first_dropped` dropped here while still borrowed\n+48 | }\n+   | - `first_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "27378b1e0bec04da1b783a44be7adebd5b8692ea", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -42,9 +42,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped, Box::new(callback));\n+    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped, Box::new(callback));\n+    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n-//~^ ERROR `last_dropped` does not live long enough\n-//~| ERROR `first_dropped` does not live long enough"}, {"sha": "53e0e02319f6f1542fb0334fcaf909b23a6dfbfd", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,22 +1,22 @@\n error[E0597]: `last_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:44:20\n    |\n 44 |     foo0 = Foo(0, &last_dropped, Box::new(callback));\n-   |                    ------------ borrow occurs here\n+   |                    ^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-48 | }\n-   | ^ `last_dropped` dropped here while still borrowed\n+50 | }\n+   | - `last_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-passed-to-fn.rs:48:1\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:46:20\n    |\n-45 |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n-   |                    ------------- borrow occurs here\n+46 |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n+   |                    ^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-48 | }\n-   | ^ `first_dropped` dropped here while still borrowed\n+50 | }\n+   | - `first_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "3904d68ba19dbd18d4e180c06bacf883bbce608f", "filename": "src/test/ui/span/issue28498-reject-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -42,9 +42,9 @@ fn main() {\n     last_dropped = ScribbleOnDrop(format!(\"last\"));\n     first_dropped = ScribbleOnDrop(format!(\"first\"));\n     foo0 = Foo(0, &last_dropped);\n+    //~^ ERROR `last_dropped` does not live long enough\n     foo1 = Foo(1, &first_dropped);\n+    //~^ ERROR `first_dropped` does not live long enough\n \n     println!(\"foo0.1: {:?} foo1.1: {:?}\", foo0.1, foo1.1);\n }\n-//~^ ERROR `last_dropped` does not live long enough\n-//~| ERROR `first_dropped` does not live long enough"}, {"sha": "6b53745bbc86b8288ed922f18d54a1acb783af2f", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,22 +1,22 @@\n error[E0597]: `last_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-trait-bound.rs:48:1\n+  --> $DIR/issue28498-reject-trait-bound.rs:44:20\n    |\n 44 |     foo0 = Foo(0, &last_dropped);\n-   |                    ------------ borrow occurs here\n+   |                    ^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-48 | }\n-   | ^ `last_dropped` dropped here while still borrowed\n+50 | }\n+   | - `last_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-trait-bound.rs:48:1\n+  --> $DIR/issue28498-reject-trait-bound.rs:46:20\n    |\n-45 |     foo1 = Foo(1, &first_dropped);\n-   |                    ------------- borrow occurs here\n+46 |     foo1 = Foo(1, &first_dropped);\n+   |                    ^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n-48 | }\n-   | ^ `first_dropped` dropped here while still borrowed\n+50 | }\n+   | - `first_dropped` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "9dc0836c5e0628ed572764cb56a3145dda20356c", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -16,5 +16,6 @@ fn main() {\n     {\n         let b = m.borrow();\n         p = &*b;\n-    } //~ ERROR `b` does not live long enough\n+    }\n+    //~^^ ERROR `b` does not live long enough\n }"}, {"sha": "e39af8501742d90d1829a7942e5135d74301af27", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,12 @@\n error[E0597]: `b` does not live long enough\n-  --> $DIR/mut-ptr-cant-outlive-ref.rs:19:5\n+  --> $DIR/mut-ptr-cant-outlive-ref.rs:18:15\n    |\n 18 |         p = &*b;\n-   |               - borrow occurs here\n-19 |     } //~ ERROR `b` does not live long enough\n-   |     ^ `b` dropped here while still borrowed\n-20 | }\n+   |               ^ borrowed value does not live long enough\n+19 |     }\n+   |     - `b` dropped here while still borrowed\n+20 |     //~^^ ERROR `b` does not live long enough\n+21 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "d69b3ea098cb3b9d954f5a9e074f609eba502b60", "filename": "src/test/ui/span/range-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n         let b = 42;\n         &a..&b\n     };\n-    //~^ ERROR `a` does not live long enough\n-    //~^^ ERROR `b` does not live long enough\n+    //~^^ ERROR `a` does not live long enough\n+    //~| ERROR `b` does not live long enough\n }"}, {"sha": "106a8a7667fb420aecd74d1522c42046df7ae264", "filename": "src/test/ui/span/range-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,21 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/range-2.rs:18:5\n+  --> $DIR/range-2.rs:17:10\n    |\n 17 |         &a..&b\n-   |          - borrow occurs here\n+   |          ^ borrowed value does not live long enough\n 18 |     };\n-   |     ^ `a` dropped here while still borrowed\n+   |     - `a` dropped here while still borrowed\n ...\n 21 | }\n    | - borrowed value needs to live until here\n \n error[E0597]: `b` does not live long enough\n-  --> $DIR/range-2.rs:18:5\n+  --> $DIR/range-2.rs:17:14\n    |\n 17 |         &a..&b\n-   |              - borrow occurs here\n+   |              ^ borrowed value does not live long enough\n 18 |     };\n-   |     ^ `b` dropped here while still borrowed\n+   |     - `b` dropped here while still borrowed\n ...\n 21 | }\n    | - borrowed value needs to live until here"}, {"sha": "93b3d6733598e1c9edc8774d6c475419226aa38f", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     {\n         let c = 1;\n         let c_ref = &c;\n+        //~^ ERROR `c` does not live long enough\n         f = move |a: isize, b: isize| { a + b + *c_ref };\n-    } //~ ERROR `c` does not live long enough\n+    }\n }"}, {"sha": "ca453c22cce4fb989271fc5411ca258d0f40f601", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/regionck-unboxed-closure-lifetimes.rs:19:5\n+  --> $DIR/regionck-unboxed-closure-lifetimes.rs:17:22\n    |\n 17 |         let c_ref = &c;\n-   |                      - borrow occurs here\n-18 |         f = move |a: isize, b: isize| { a + b + *c_ref };\n-19 |     } //~ ERROR `c` does not live long enough\n-   |     ^ `c` dropped here while still borrowed\n-20 | }\n+   |                      ^ borrowed value does not live long enough\n+...\n+20 |     }\n+   |     - `c` dropped here while still borrowed\n+21 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "cf94969742efeaf222e8eb5fcf7596efa0e5e5cb", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -20,6 +20,7 @@ fn main() {\n     let blah;\n     {\n         let ss: &isize = &id(1);\n+        //~^ ERROR borrowed value does not live long enough\n         blah = box ss as Box<Foo>;\n-    } //~ ERROR does not live long enough\n+    }\n }"}, {"sha": "12f70676220b70ebeb95b8ee3f934a90c3edc4df", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:24:5\n+  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:27\n    |\n 22 |         let ss: &isize = &id(1);\n-   |                           ----- temporary value created here\n-23 |         blah = box ss as Box<Foo>;\n-24 |     } //~ ERROR does not live long enough\n-   |     ^ temporary value dropped here while still borrowed\n-25 | }\n+   |                           ^^^^^ temporary value does not live long enough\n+...\n+25 |     }\n+   |     - temporary value dropped here while still borrowed\n+26 | }\n    | - temporary value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "e7eff6f25591aac8763d58470f474368d5739879", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -32,5 +32,6 @@ fn main() {\n         let tmp0 = 3;\n         let tmp1 = &tmp0;\n         repeater3(tmp1)\n-    }; //~ ERROR `tmp0` does not live long enough\n+    };\n+    //~^^^ ERROR `tmp0` does not live long enough\n }"}, {"sha": "b90e67d5a3cee5ec2004f0cd6b7e8e0ed561ade9", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,11 @@\n error[E0597]: `tmp0` does not live long enough\n-  --> $DIR/regions-close-over-type-parameter-2.rs:35:5\n+  --> $DIR/regions-close-over-type-parameter-2.rs:33:21\n    |\n 33 |         let tmp1 = &tmp0;\n-   |                     ---- borrow occurs here\n+   |                     ^^^^ borrowed value does not live long enough\n 34 |         repeater3(tmp1)\n-35 |     }; //~ ERROR `tmp0` does not live long enough\n-   |     ^- borrowed value needs to live until here\n+35 |     };\n+   |     -- borrowed value needs to live until here\n    |     |\n    |     `tmp0` dropped here while still borrowed\n "}, {"sha": "96c1ccd5326ea8e141d93e2ee3a8f767e93de3cb", "filename": "src/test/ui/span/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -19,5 +19,6 @@ fn main() {\n     loop {\n         let x = 1 + *p;\n         p = &x;\n-    } //~ ERROR `x` does not live long enough\n+    }\n+    //~^^ ERROR `x` does not live long enough\n }"}, {"sha": "8cdf4e2d8226f49eb34a184f4cce3c0f18f4fc77", "filename": "src/test/ui/span/regions-escape-loop-via-variable.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,12 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/regions-escape-loop-via-variable.rs:22:5\n+  --> $DIR/regions-escape-loop-via-variable.rs:21:14\n    |\n 21 |         p = &x;\n-   |              - borrow occurs here\n-22 |     } //~ ERROR `x` does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n-23 | }\n+   |              ^ borrowed value does not live long enough\n+22 |     }\n+   |     - `x` dropped here while still borrowed\n+23 |     //~^^ ERROR `x` does not live long enough\n+24 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "b6adc2206e9ce9697c0c07833f40a1d15d7bc764", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -22,10 +22,11 @@ fn foo<C, M>(mut cond: C, mut make_box: M) where\n         // Here we complain because the resulting region\n         // of this borrow is the fn body as a whole.\n         y = borrow(&*x);\n+        //~^ ERROR `*x` does not live long enough\n \n         assert_eq!(*x, *y);\n         if cond() { break; }\n-    } //~ ERROR `*x` does not live long enough\n+    }\n     assert!(*y != 0);\n }\n "}, {"sha": "1fc7e05f496ba7f80eb15b641207f6a8f6d50b82", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,13 +1,13 @@\n error[E0597]: `*x` does not live long enough\n-  --> $DIR/regions-infer-borrow-scope-within-loop.rs:28:5\n+  --> $DIR/regions-infer-borrow-scope-within-loop.rs:24:21\n    |\n 24 |         y = borrow(&*x);\n-   |                     -- borrow occurs here\n+   |                     ^^ borrowed value does not live long enough\n ...\n-28 |     } //~ ERROR `*x` does not live long enough\n-   |     ^ `*x` dropped here while still borrowed\n-29 |     assert!(*y != 0);\n-30 | }\n+29 |     }\n+   |     - `*x` dropped here while still borrowed\n+30 |     assert!(*y != 0);\n+31 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "20f8d473ac369eb10d01961416fcc6f0f750e943", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -24,12 +24,13 @@ fn main() {\n     let bad = {\n         let x = 1;\n         let y = &x;\n+        //~^ ERROR `x` does not live long enough\n \n         scoped(|| {\n             let _z = y;\n             //~^ ERROR `y` does not live long enough\n         })\n-    }; //~ ERROR `x` does not live long enough\n+    };\n \n     bad.join();\n }"}, {"sha": "657682d962d1508c0d0bca8dda908164271b9e53", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,27 +1,27 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/send-is-not-static-ensures-scoping.rs:32:5\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:26:18\n    |\n 26 |         let y = &x;\n-   |                  - borrow occurs here\n+   |                  ^ borrowed value does not live long enough\n ...\n-32 |     }; //~ ERROR `x` does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n+33 |     };\n+   |     - `x` dropped here while still borrowed\n ...\n-35 | }\n+36 | }\n    | - borrowed value needs to live until here\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/send-is-not-static-ensures-scoping.rs:29:22\n+  --> $DIR/send-is-not-static-ensures-scoping.rs:30:22\n    |\n-28 |         scoped(|| {\n+29 |         scoped(|| {\n    |                -- capture occurs here\n-29 |             let _z = y;\n-   |                      ^ does not live long enough\n+30 |             let _z = y;\n+   |                      ^ borrowed value does not live long enough\n ...\n-32 |     }; //~ ERROR `x` does not live long enough\n+33 |     };\n    |     - borrowed value only lives until here\n ...\n-35 | }\n+36 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to 2 previous errors"}, {"sha": "a10f700fb541b7e19837561e89f72c2f1414ac79", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -19,7 +19,8 @@ fn mutex() {\n     let lock = {\n         let x = 1;\n         Mutex::new(&x)\n-    }; //~ ERROR does not live long enough\n+    };\n+    //~^^ ERROR `x` does not live long enough\n \n     let _dangling = *lock.lock().unwrap();\n }\n@@ -28,7 +29,8 @@ fn rwlock() {\n     let lock = {\n         let x = 1;\n         RwLock::new(&x)\n-    }; //~ ERROR does not live long enough\n+    };\n+    //~^^ ERROR `x` does not live long enough\n     let _dangling = *lock.read().unwrap();\n }\n \n@@ -38,7 +40,8 @@ fn channel() {\n         let (tx, rx) = mpsc::channel();\n         let _ = tx.send(&x);\n         (tx, rx)\n-    }; //~ ERROR does not live long enough\n+    };\n+    //~^^^ ERROR `x` does not live long enough\n \n     let _dangling = rx.recv();\n }"}, {"sha": "af8b7aeaa6357ccb9c5c6f4bca2ff5a667bee0fc", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,35 +1,35 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync-2.rs:22:5\n+  --> $DIR/send-is-not-static-std-sync-2.rs:21:21\n    |\n 21 |         Mutex::new(&x)\n-   |                     - borrow occurs here\n-22 |     }; //~ ERROR does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n+   |                     ^ borrowed value does not live long enough\n+22 |     };\n+   |     - `x` dropped here while still borrowed\n ...\n-25 | }\n+26 | }\n    | - borrowed value needs to live until here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync-2.rs:31:5\n+  --> $DIR/send-is-not-static-std-sync-2.rs:31:22\n    |\n-30 |         RwLock::new(&x)\n-   |                      - borrow occurs here\n-31 |     }; //~ ERROR does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n-32 |     let _dangling = *lock.read().unwrap();\n-33 | }\n+31 |         RwLock::new(&x)\n+   |                      ^ borrowed value does not live long enough\n+32 |     };\n+   |     - `x` dropped here while still borrowed\n+...\n+35 | }\n    | - borrowed value needs to live until here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync-2.rs:41:5\n+  --> $DIR/send-is-not-static-std-sync-2.rs:41:26\n    |\n-39 |         let _ = tx.send(&x);\n-   |                          - borrow occurs here\n-40 |         (tx, rx)\n-41 |     }; //~ ERROR does not live long enough\n-   |     ^ `x` dropped here while still borrowed\n+41 |         let _ = tx.send(&x);\n+   |                          ^ borrowed value does not live long enough\n+42 |         (tx, rx)\n+43 |     };\n+   |     - `x` dropped here while still borrowed\n ...\n-44 | }\n+47 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to 3 previous errors"}, {"sha": "4cf36e00a6fe88d63a28d9c0a8543140ae0fcdb5", "filename": "src/test/ui/span/send-is-not-static-std-sync.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -24,7 +24,8 @@ fn mutex() {\n     {\n         let z = 2;\n         *lock.lock().unwrap() = &z;\n-    } //~ ERROR does not live long enough\n+    }\n+    //~^^ ERROR `z` does not live long enough\n }\n \n fn rwlock() {\n@@ -36,7 +37,8 @@ fn rwlock() {\n     {\n         let z = 2;\n         *lock.write().unwrap() = &z;\n-    } //~ ERROR does not live long enough\n+    }\n+    //~^^ ERROR `z` does not live long enough\n }\n \n fn channel() {\n@@ -50,7 +52,8 @@ fn channel() {\n     {\n         let z = 2;\n         tx.send(&z).unwrap();\n-    } //~ ERROR does not live long enough\n+    }\n+    //~^^ ERROR `z` does not live long enough\n }\n \n fn main() {}"}, {"sha": "7c61398a8640e08c773fc890a171b5b63f5d8976", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,12 @@\n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:27:5\n+  --> $DIR/send-is-not-static-std-sync.rs:26:34\n    |\n 26 |         *lock.lock().unwrap() = &z;\n-   |                                  - borrow occurs here\n-27 |     } //~ ERROR does not live long enough\n-   |     ^ `z` dropped here while still borrowed\n-28 | }\n+   |                                  ^ borrowed value does not live long enough\n+27 |     }\n+   |     - `z` dropped here while still borrowed\n+28 |     //~^^ ERROR `z` does not live long enough\n+29 | }\n    | - borrowed value needs to live until here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n@@ -17,39 +18,41 @@ error[E0505]: cannot move out of `y` because it is borrowed\n    |          ^ move out of `y` occurs here\n \n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:39:5\n+  --> $DIR/send-is-not-static-std-sync.rs:39:35\n    |\n-38 |         *lock.write().unwrap() = &z;\n-   |                                   - borrow occurs here\n-39 |     } //~ ERROR does not live long enough\n-   |     ^ `z` dropped here while still borrowed\n-40 | }\n+39 |         *lock.write().unwrap() = &z;\n+   |                                   ^ borrowed value does not live long enough\n+40 |     }\n+   |     - `z` dropped here while still borrowed\n+41 |     //~^^ ERROR `z` does not live long enough\n+42 | }\n    | - borrowed value needs to live until here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:35:10\n+  --> $DIR/send-is-not-static-std-sync.rs:36:10\n    |\n-34 |     *lock.write().unwrap() = &*y;\n+35 |     *lock.write().unwrap() = &*y;\n    |                               -- borrow of `*y` occurs here\n-35 |     drop(y); //~ ERROR cannot move out\n+36 |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:53:5\n+  --> $DIR/send-is-not-static-std-sync.rs:54:18\n    |\n-52 |         tx.send(&z).unwrap();\n-   |                  - borrow occurs here\n-53 |     } //~ ERROR does not live long enough\n-   |     ^ `z` dropped here while still borrowed\n-54 | }\n+54 |         tx.send(&z).unwrap();\n+   |                  ^ borrowed value does not live long enough\n+55 |     }\n+   |     - `z` dropped here while still borrowed\n+56 |     //~^^ ERROR `z` does not live long enough\n+57 | }\n    | - borrowed value needs to live until here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:49:10\n+  --> $DIR/send-is-not-static-std-sync.rs:51:10\n    |\n-48 |     tx.send(&*y);\n+50 |     tx.send(&*y);\n    |              -- borrow of `*y` occurs here\n-49 |     drop(y); //~ ERROR cannot move out\n+51 |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n error: aborting due to 6 previous errors"}, {"sha": "1b022f23246628d56f27037501a2c37c6f5c0192", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -15,5 +15,5 @@ fn main() {\n     {\n         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n         y = &x[1..];\n-    } //~ ERROR does not live long enough\n+    }\n }"}, {"sha": "540aae0983a26f0d3be636df70c023175e3356c6", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,11 +1,11 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/slice-borrow.rs:18:5\n+  --> $DIR/slice-borrow.rs:16:28\n    |\n 16 |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n-   |                            ------------------- temporary value created here\n+   |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n 17 |         y = &x[1..];\n-18 |     } //~ ERROR does not live long enough\n-   |     ^ temporary value dropped here while still borrowed\n+18 |     }\n+   |     - temporary value dropped here while still borrowed\n 19 | }\n    | - temporary value needs to live until here\n    |"}, {"sha": "3cf07b8b098c4b4bdf4fa45a8ab35e9c01a3f65d", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -125,10 +125,10 @@ fn f() {\n     c1.v.push(CheckId(Cell::new(None)));\n     c2.v.push(CheckId(Cell::new(None)));\n     c1.v[0].v.set(Some(&c2));\n+    //~^ ERROR `c2` does not live long enough\n     c2.v[0].v.set(Some(&c1));\n+    //~^ ERROR `c1` does not live long enough\n }\n-//~^ ERROR `c2` does not live long enough\n-//~| ERROR `c1` does not live long enough\n \n fn main() {\n     f();"}, {"sha": "cc8e58179ed4f26143861c159589de37d38e029d", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,21 +1,22 @@\n error[E0597]: `c2` does not live long enough\n-   --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n+   --> $DIR/vec-must-not-hide-type-from-dropck.rs:127:25\n     |\n 127 |     c1.v[0].v.set(Some(&c2));\n-    |                         -- borrow occurs here\n-128 |     c2.v[0].v.set(Some(&c1));\n-129 | }\n-    | ^ `c2` dropped here while still borrowed\n+    |                         ^^ borrowed value does not live long enough\n+...\n+131 | }\n+    | - `c2` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c1` does not live long enough\n-   --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:1\n+   --> $DIR/vec-must-not-hide-type-from-dropck.rs:129:25\n     |\n-128 |     c2.v[0].v.set(Some(&c1));\n-    |                         -- borrow occurs here\n-129 | }\n-    | ^ `c1` dropped here while still borrowed\n+129 |     c2.v[0].v.set(Some(&c1));\n+    |                         ^^ borrowed value does not live long enough\n+130 |     //~^ ERROR `c1` does not live long enough\n+131 | }\n+    | - `c1` dropped here while still borrowed\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "42373a87a6c92e3a7ad8d18dc68fe6e9b6f51ac5", "filename": "src/test/ui/span/vec_refs_data_with_early_death.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -25,9 +25,9 @@ fn main() {\n     let y: i8 = 4;\n \n     v.push(&x);\n+    //~^ ERROR `x` does not live long enough\n     v.push(&y);\n+    //~^ ERROR `y` does not live long enough\n \n     assert_eq!(v, [&3, &4]);\n }\n-//~^ ERROR `x` does not live long enough\n-//~| ERROR `y` does not live long enough"}, {"sha": "acfc7babe01f79bf6d69ebace7f1437a3a965368", "filename": "src/test/ui/span/vec_refs_data_with_early_death.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,22 +1,22 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/vec_refs_data_with_early_death.rs:31:1\n+  --> $DIR/vec_refs_data_with_early_death.rs:27:13\n    |\n 27 |     v.push(&x);\n-   |             - borrow occurs here\n+   |             ^ borrowed value does not live long enough\n ...\n-31 | }\n-   | ^ `x` dropped here while still borrowed\n+33 | }\n+   | - `x` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/vec_refs_data_with_early_death.rs:31:1\n+  --> $DIR/vec_refs_data_with_early_death.rs:29:13\n    |\n-28 |     v.push(&y);\n-   |             - borrow occurs here\n+29 |     v.push(&y);\n+   |             ^ borrowed value does not live long enough\n ...\n-31 | }\n-   | ^ `y` dropped here while still borrowed\n+33 | }\n+   | - `y` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "d58c29d4a32d3bdfd307e4379b01302d6b1f7d85", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     let dangling = {\n         let pointer = Box::new(42);\n         f2.xmute(&pointer)\n-    }; //~ ERROR `pointer` does not live long enough\n+    };\n+    //~^^ ERROR `pointer` does not live long enough\n     println!(\"{}\", dangling);\n }"}, {"sha": "8dd772590356c0d9c1d900dcbef907d3a755be17", "filename": "src/test/ui/span/wf-method-late-bound-regions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02079e44dd81754de064de1c6153f6b55e4ec06e/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr?ref=02079e44dd81754de064de1c6153f6b55e4ec06e", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: `pointer` does not live long enough\n-  --> $DIR/wf-method-late-bound-regions.rs:31:5\n+  --> $DIR/wf-method-late-bound-regions.rs:30:19\n    |\n 30 |         f2.xmute(&pointer)\n-   |                   ------- borrow occurs here\n-31 |     }; //~ ERROR `pointer` does not live long enough\n-   |     ^ `pointer` dropped here while still borrowed\n-32 |     println!(\"{}\", dangling);\n-33 | }\n+   |                   ^^^^^^^ borrowed value does not live long enough\n+31 |     };\n+   |     - `pointer` dropped here while still borrowed\n+...\n+34 | }\n    | - borrowed value needs to live until here\n \n error: aborting due to previous error"}]}