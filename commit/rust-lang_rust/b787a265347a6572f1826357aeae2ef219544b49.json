{"sha": "b787a265347a6572f1826357aeae2ef219544b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODdhMjY1MzQ3YTY1NzJmMTgyNjM1N2FlYWUyZWYyMTk1NDRiNDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-02T19:03:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-02T19:05:08Z"}, "message": "De-export comm, task. Part of #3583.", "tree": {"sha": "f5ab07434da260ab9e45aa8e4454b45a401979b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ab07434da260ab9e45aa8e4454b45a401979b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b787a265347a6572f1826357aeae2ef219544b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b787a265347a6572f1826357aeae2ef219544b49", "html_url": "https://github.com/rust-lang/rust/commit/b787a265347a6572f1826357aeae2ef219544b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b787a265347a6572f1826357aeae2ef219544b49/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201513e8590bfc627546054f5ce317add7eef1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/201513e8590bfc627546054f5ce317add7eef1e6", "html_url": "https://github.com/rust-lang/rust/commit/201513e8590bfc627546054f5ce317add7eef1e6"}], "stats": {"total": 93, "additions": 23, "deletions": 70}, "files": [{"sha": "81b648d9840f120a709cbb237f5a17ce9c899b25", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=b787a265347a6572f1826357aeae2ef219544b49", "patch": "@@ -274,7 +274,6 @@ type port_id = int;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n     fn rust_port_id_send(target_port: port_id, data: *()) -> libc::uintptr_t;\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n@@ -297,7 +296,6 @@ extern mod rustrt {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n     fn init<T>() -> T;\n }\n "}, {"sha": "c781a26185af7bf24a9121b4b5242f15e31527d5", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b787a265347a6572f1826357aeae2ef219544b49", "patch": "@@ -216,7 +216,6 @@ mod dlist_iter {\n mod send_map;\n \n // Concurrency\n-#[legacy_exports]\n mod comm;\n #[legacy_exports]\n mod task {"}, {"sha": "912b7f712aabb1c345542d3773cab19d188748a7", "filename": "src/libcore/task.rs", "status": "modified", "additions": 23, "deletions": 67, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b787a265347a6572f1826357aeae2ef219544b49/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=b787a265347a6572f1826357aeae2ef219544b49", "patch": "@@ -32,54 +32,11 @@ use result::Result;\n use pipes::{stream, Chan, Port};\n use local_data_priv::{local_get, local_set};\n \n-export Task;\n-export TaskResult;\n-export Notification;\n-export SchedMode;\n-export SchedOpts;\n-export TaskOpts;\n-export TaskBuilder;\n-\n-export task;\n-export default_task_opts;\n-export get_opts;\n-export set_opts;\n-export set_sched_mode;\n-export add_wrapper;\n-export run;\n-\n-export future_result;\n-export run_listener;\n-export run_with;\n-\n-export spawn;\n-export spawn_unlinked;\n-export spawn_supervised;\n-export spawn_with;\n-export spawn_listener;\n-export spawn_conversation;\n-export spawn_sched;\n-export try;\n-\n-export yield;\n-export failing;\n-export get_task;\n-export unkillable, rekillable;\n-export atomically;\n-\n-export local_data;\n-\n-export SingleThreaded;\n-export ThreadPerCore;\n-export ThreadPerTask;\n-export ManualThreads;\n-export PlatformThread;\n-\n use rt::task_id;\n use rt::rust_task;\n \n /// A handle to a task\n-enum Task {\n+pub enum Task {\n     TaskHandle(task_id)\n }\n \n@@ -99,7 +56,7 @@ impl Task : cmp::Eq {\n  * If you wish for this result's delivery to block until all linked and/or\n  * children tasks complete, recommend using a result future.\n  */\n-enum TaskResult {\n+pub enum TaskResult {\n     Success,\n     Failure,\n }\n@@ -115,7 +72,7 @@ impl TaskResult : Eq {\n }\n \n /// A message type for notifying of task lifecycle events\n-enum Notification {\n+pub enum Notification {\n     /// Sent when a task exits with the task handle and result\n     Exit(Task, TaskResult)\n }\n@@ -134,7 +91,7 @@ impl Notification : cmp::Eq {\n }\n \n /// Scheduler modes\n-enum SchedMode {\n+pub enum SchedMode {\n     /// All tasks run in the same OS thread\n     SingleThreaded,\n     /// Tasks are distributed among available CPUs\n@@ -207,7 +164,7 @@ impl SchedMode : cmp::Eq {\n  *     default these foreign stacks have unspecified size, but with this\n  *     option their size can be precisely specified.\n  */\n-type SchedOpts = {\n+pub type SchedOpts = {\n     mode: SchedMode,\n     foreign_stack_size: Option<uint>\n };\n@@ -239,7 +196,7 @@ type SchedOpts = {\n  *     into foreign code that blocks. Without doing so in a different\n  *     scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n-type TaskOpts = {\n+pub type TaskOpts = {\n     linked: bool,\n     supervised: bool,\n     mut notify_chan: Option<Chan<Notification>>,\n@@ -260,7 +217,7 @@ type TaskOpts = {\n // the run function move them in.\n \n // FIXME (#2585): Replace the 'consumed' bit with move mode on self\n-enum TaskBuilder = {\n+pub enum TaskBuilder = {\n     opts: TaskOpts,\n     gen_body: fn@(+v: fn~()) -> fn~(),\n     can_not_copy: Option<util::NonCopyable>,\n@@ -272,7 +229,7 @@ enum TaskBuilder = {\n  * configuration methods can be chained.\n  * For example, task().unlinked().spawn is equivalent to spawn_unlinked.\n  */\n-fn task() -> TaskBuilder {\n+pub fn task() -> TaskBuilder {\n     TaskBuilder({\n         opts: default_task_opts(),\n         gen_body: |body| move body, // Identity function\n@@ -580,7 +537,7 @@ impl TaskBuilder {\n \n /* Task construction */\n \n-fn default_task_opts() -> TaskOpts {\n+pub fn default_task_opts() -> TaskOpts {\n     /*!\n      * The default task options\n      *\n@@ -598,7 +555,7 @@ fn default_task_opts() -> TaskOpts {\n \n /* Spawn convenience functions */\n \n-fn spawn(+f: fn~()) {\n+pub fn spawn(+f: fn~()) {\n     /*!\n      * Creates and executes a new child task\n      *\n@@ -611,7 +568,7 @@ fn spawn(+f: fn~()) {\n     task().spawn(move f)\n }\n \n-fn spawn_unlinked(+f: fn~()) {\n+pub fn spawn_unlinked(+f: fn~()) {\n     /*!\n      * Creates a child task unlinked from the current one. If either this\n      * task or the child task fails, the other will not be killed.\n@@ -620,7 +577,7 @@ fn spawn_unlinked(+f: fn~()) {\n     task().unlinked().spawn(move f)\n }\n \n-fn spawn_supervised(+f: fn~()) {\n+pub fn spawn_supervised(+f: fn~()) {\n     /*!\n      * Creates a child task unlinked from the current one. If either this\n      * task or the child task fails, the other will not be killed.\n@@ -629,7 +586,7 @@ fn spawn_supervised(+f: fn~()) {\n     task().supervised().spawn(move f)\n }\n \n-fn spawn_with<A:Send>(+arg: A, +f: fn~(+v: A)) {\n+pub fn spawn_with<A:Send>(+arg: A, +f: fn~(+v: A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n      * child.\n@@ -643,7 +600,7 @@ fn spawn_with<A:Send>(+arg: A, +f: fn~(+v: A)) {\n     task().spawn_with(move arg, move f)\n }\n \n-fn spawn_listener<A:Send>(+f: fn~(comm::Port<A>)) -> comm::Chan<A> {\n+pub fn spawn_listener<A:Send>(+f: fn~(comm::Port<A>)) -> comm::Chan<A> {\n     /*!\n      * Runs a new task while providing a channel from the parent to the child\n      *\n@@ -653,7 +610,7 @@ fn spawn_listener<A:Send>(+f: fn~(comm::Port<A>)) -> comm::Chan<A> {\n     task().spawn_listener(move f)\n }\n \n-fn spawn_conversation<A: Send, B: Send>\n+pub fn spawn_conversation<A: Send, B: Send>\n     (+f: fn~(comm::Port<A>, comm::Chan<B>))\n     -> (comm::Port<B>, comm::Chan<A>) {\n     /*!\n@@ -665,7 +622,7 @@ fn spawn_conversation<A: Send, B: Send>\n     task().spawn_conversation(move f)\n }\n \n-fn spawn_sched(mode: SchedMode, +f: fn~()) {\n+pub fn spawn_sched(mode: SchedMode, +f: fn~()) {\n     /*!\n      * Creates a new scheduler and executes a task on it\n      *\n@@ -682,7 +639,7 @@ fn spawn_sched(mode: SchedMode, +f: fn~()) {\n     task().sched_mode(mode).spawn(move f)\n }\n \n-fn try<T:Send>(+f: fn~() -> T) -> Result<T,()> {\n+pub fn try<T:Send>(+f: fn~() -> T) -> Result<T,()> {\n     /*!\n      * Execute a function in another task and return either the return value\n      * of the function or result::err.\n@@ -696,7 +653,7 @@ fn try<T:Send>(+f: fn~() -> T) -> Result<T,()> {\n \n /* Lifecycle functions */\n \n-fn yield() {\n+pub fn yield() {\n     //! Yield control to the task scheduler\n \n     let task_ = rt::rust_get_task();\n@@ -706,13 +663,13 @@ fn yield() {\n     }\n }\n \n-fn failing() -> bool {\n+pub fn failing() -> bool {\n     //! True if the running task has failed\n \n     rt::rust_task_is_unwinding(rt::rust_get_task())\n }\n \n-fn get_task() -> Task {\n+pub fn get_task() -> Task {\n     //! Get a handle to the running task\n \n     TaskHandle(rt::get_task_id())\n@@ -733,7 +690,7 @@ fn get_task() -> Task {\n  * }\n  * ~~~\n  */\n-unsafe fn unkillable<U>(f: fn() -> U) -> U {\n+pub unsafe fn unkillable<U>(f: fn() -> U) -> U {\n     struct AllowFailure {\n         t: *rust_task,\n         drop { rt::rust_task_allow_kill(self.t); }\n@@ -752,7 +709,7 @@ unsafe fn unkillable<U>(f: fn() -> U) -> U {\n }\n \n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n-unsafe fn rekillable<U>(f: fn() -> U) -> U {\n+pub unsafe fn rekillable<U>(f: fn() -> U) -> U {\n     struct DisallowFailure {\n         t: *rust_task,\n         drop { rt::rust_task_inhibit_kill(self.t); }\n@@ -774,7 +731,7 @@ unsafe fn rekillable<U>(f: fn() -> U) -> U {\n  * A stronger version of unkillable that also inhibits scheduling operations.\n  * For use with exclusive ARCs, which use pthread mutexes directly.\n  */\n-unsafe fn atomically<U>(f: fn() -> U) -> U {\n+pub unsafe fn atomically<U>(f: fn() -> U) -> U {\n     struct DeferInterrupts {\n         t: *rust_task,\n         drop {\n@@ -1102,7 +1059,6 @@ fn test_spawn_sched_childs_on_same_sched() {\n #[nolink]\n #[cfg(test)]\n extern mod testrt {\n-    #[legacy_exports];\n     fn rust_dbg_lock_create() -> *libc::c_void;\n     fn rust_dbg_lock_destroy(lock: *libc::c_void);\n     fn rust_dbg_lock_lock(lock: *libc::c_void);"}]}