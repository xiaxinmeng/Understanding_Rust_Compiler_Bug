{"sha": "c77024ca4e100a32163573407768c11bad760a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzAyNGNhNGUxMDBhMzIxNjM1NzM0MDc3NjhjMTFiYWQ3NjBhMDA=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2019-06-09T17:15:53Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2019-06-09T17:15:53Z"}, "message": "Fix more tests after revert of rustdoc cfg(test) feature", "tree": {"sha": "ef876de8a26cf1d969b2a5bad2b178a75767e4f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef876de8a26cf1d969b2a5bad2b178a75767e4f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c77024ca4e100a32163573407768c11bad760a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c77024ca4e100a32163573407768c11bad760a00", "html_url": "https://github.com/rust-lang/rust/commit/c77024ca4e100a32163573407768c11bad760a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c77024ca4e100a32163573407768c11bad760a00/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c747e030381ac8757274ba5bd6b7340aa0e63e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c747e030381ac8757274ba5bd6b7340aa0e63e6", "html_url": "https://github.com/rust-lang/rust/commit/6c747e030381ac8757274ba5bd6b7340aa0e63e6"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "d7cfccae29cec918a4b23947bbc54bd57df4e97c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c77024ca4e100a32163573407768c11bad760a00", "patch": "@@ -73,9 +73,9 @@ impl<T: ?Sized> !Send for *mut T { }\n /// impl Foo for Impl { }\n /// impl Bar for Impl { }\n ///\n-/// let x: &Foo = &Impl;    // OK\n-/// // let y: &Bar = &Impl; // error: the trait `Bar` cannot\n-///                         // be made into an object\n+/// let x: &dyn Foo = &Impl;    // OK\n+/// // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\n+///                             // be made into an object\n /// ```\n ///\n /// [trait object]: ../../book/ch17-02-trait-objects.html"}, {"sha": "e110e93a95412b73a0b72215a8b1345b86e6dc56", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=c77024ca4e100a32163573407768c11bad760a00", "patch": "@@ -510,6 +510,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// A simple example:\n ///\n /// ```\n+/// #![feature(mem_take)]\n+///\n /// use std::mem;\n ///\n /// let mut v: Vec<i32> = vec![1, 2];\n@@ -540,7 +542,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// `self`, allowing it to be returned:\n ///\n /// ```\n-/// # #![allow(dead_code)]\n+/// #![feature(mem_take)]\n+///\n /// use std::mem;\n ///\n /// # struct Buffer<T> { buf: Vec<T> }"}, {"sha": "75c329a7d6c10ad4a60d795a1fe58e48f6a69e02", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77024ca4e100a32163573407768c11bad760a00/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=c77024ca4e100a32163573407768c11bad760a00", "patch": "@@ -53,7 +53,7 @@\n /// let value: i32 = 123;\n ///\n /// // let the compiler make a trait object\n-/// let object: &Foo = &value;\n+/// let object: &dyn Foo = &value;\n ///\n /// // look at the raw representation\n /// let raw_object: raw::TraitObject = unsafe { mem::transmute(object) };\n@@ -65,7 +65,7 @@\n ///\n /// // construct a new object, pointing to a different `i32`, being\n /// // careful to use the `i32` vtable from `object`\n-/// let synthesized: &Foo = unsafe {\n+/// let synthesized: &dyn Foo = unsafe {\n ///      mem::transmute(raw::TraitObject {\n ///          data: &other_value as *const _ as *mut (),\n ///          vtable: raw_object.vtable,"}]}