{"sha": "e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYTRkNDc3MjBjMTY5ZmY3ZDJmYThkMGM1YWQ4MzFiYmNmNzI0ZDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-19T21:08:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-19T21:10:14Z"}, "message": "Copy section to docs on runtime services.", "tree": {"sha": "6cad32f29728680fa460c04980bc5646a220ce88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cad32f29728680fa460c04980bc5646a220ce88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2", "html_url": "https://github.com/rust-lang/rust/commit/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7df062f45879ef22d455434fcc8307a696944a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7df062f45879ef22d455434fcc8307a696944a", "html_url": "https://github.com/rust-lang/rust/commit/0d7df062f45879ef22d455434fcc8307a696944a"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "fcd152ba64164343dbd03049246ef3e7c9b33900", "filename": "doc/rust.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=e0a4d47720c169ff7d2fa8d0c5ad831bbcf724d2", "patch": "@@ -3100,6 +3100,94 @@ let s = recv(p);\n \n # Runtime services, linkage and debugging\n \n+\n+The Rust _runtime_ is a relatively compact collection of C and Rust code\n+that provides fundamental services and datatypes to all Rust tasks at\n+run-time. It is smaller and simpler than many modern language runtimes. It is\n+tightly integrated into the language's execution model of memory, tasks,\n+communication and logging.\n+\n+\n+### Memory allocation\n+\n+The runtime memory-management system is based on a _service-provider\n+interface_, through which the runtime requests blocks of memory from its\n+environment and releases them back to its environment when they are no longer\n+in use. The default implementation of the service-provider interface consists\n+of the C runtime functions `malloc` and `free`.\n+\n+The runtime memory-management system in turn supplies Rust tasks with\n+facilities for allocating, extending and releasing stacks, as well as\n+allocating and freeing boxed values.\n+\n+\n+### Built in types\n+\n+The runtime provides C and Rust code to assist with various built-in types,\n+such as vectors, strings, and the low level communication system (ports,\n+channels, tasks).\n+\n+Support for other built-in types such as simple types, tuples, records, and\n+tags is open-coded by the Rust compiler.\n+\n+\n+\n+### Task scheduling and communication\n+\n+The runtime provides code to manage inter-task communication.  This includes\n+the system of task-lifecycle state transitions depending on the contents of\n+queues, as well as code to copy values between queues and their recipients and\n+to serialize values for transmission over operating-system inter-process\n+communication facilities.\n+\n+\n+### Logging system\n+\n+The runtime contains a system for directing [logging\n+expressions](#log-expressions) to a logging console and/or internal logging\n+buffers. Logging expressions can be enabled per module.\n+\n+Logging output is enabled by setting the `RUST_LOG` environment variable.\n+`RUST_LOG` accepts a logging specification that is a comma-separated list of\n+paths. For each module containing log expressions, if `RUST_LOG` contains the\n+path to that module or a parent of that module, then its logs will be output\n+to the console. The path to an module consists of the crate name, any parent\n+modules, then the module itself, all separated by double colons (`::`).\n+\n+As an example, to see all the logs generated by the compiler, you would set\n+`RUST_LOG` to `rustc`, which is the crate name (as specified in its `link`\n+[attribute](#attributes)). To narrow down the logs to just crate resolution,\n+you would set it to `rustc::metadata::creader`.\n+\n+Note that when compiling either `.rs` or `.rc` files that don't specifiy a\n+crate name the crate is given a default name that matches the source file,\n+with the extension removed. In that case, to turn on logging for a program\n+compiled from, e.g. `helloworld.rs`, `RUST_LOG` should be set to `helloworld`.\n+\n+As a convenience, the logging spec can also be set to a special psuedo-crate,\n+`::help`. In this case, when the application starts, the runtime will\n+simply output a list of loaded modules containing log expressions, then exit.\n+\n+The Rust runtime itself generates logging information. The runtime's logs are\n+generated for a number of artificial modules in the `::rt` psuedo-crate,\n+and can be enabled just like the logs for any standard module. The full list\n+of runtime logging modules follows.\n+\n+* `::rt::mem` Memory management\n+* `::rt::comm` Messaging and task communication\n+* `::rt::task` Task management\n+* `::rt::dom` Task scheduling\n+* `::rt::trace` Unused\n+* `::rt::cache` Type descriptor cache\n+* `::rt::upcall` Compiler-generated runtime calls\n+* `::rt::timer` The scheduler timer\n+* `::rt::gc` Garbage collection\n+* `::rt::stdlib` Functions used directly by the standard library\n+* `::rt::kern` The runtime kernel\n+* `::rt::backtrace` Unused\n+* `::rt::callback` Unused\n+\n+\n # Appendix: Rationales and design tradeoffs\n \n *TODO*."}]}