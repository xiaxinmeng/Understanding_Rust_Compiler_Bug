{"sha": "540f95d9fad41a605e4c8b898d77f47374a76cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MGY5NWQ5ZmFkNDFhNjA1ZTRjOGI4OThkNzdmNDczNzRhNzZjYmQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-24T06:20:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-29T06:11:03Z"}, "message": "Add internal-only rustc_serialize_exclude_null attribute for making the field only exist in the json if the flag is passed", "tree": {"sha": "f8b26690a103e16aec8df59b458e702700899fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b26690a103e16aec8df59b458e702700899fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540f95d9fad41a605e4c8b898d77f47374a76cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540f95d9fad41a605e4c8b898d77f47374a76cbd", "html_url": "https://github.com/rust-lang/rust/commit/540f95d9fad41a605e4c8b898d77f47374a76cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540f95d9fad41a605e4c8b898d77f47374a76cbd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53bdc6212b9abf8538a877ebfde214120bf061f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53bdc6212b9abf8538a877ebfde214120bf061f", "html_url": "https://github.com/rust-lang/rust/commit/a53bdc6212b9abf8538a877ebfde214120bf061f"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "3e523fca92a037a969a38270e74caaa20da2a7c7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=540f95d9fad41a605e4c8b898d77f47374a76cbd", "patch": "@@ -788,6 +788,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n+    (\"rustc_serialize_exclude_null\", Normal, Gated(Stability::Unstable,\n+                                             \"rustc_attrs\",\n+                                             \"the `#[rustc_serialize_exclude_null]` attribute \\\n+                                              is an internal-only feature\",\n+                                             cfg_fn!(rustc_attrs))),\n     (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\"}, {"sha": "681e14a613740dc2024bc98e1f34f4a83ac8692b", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=540f95d9fad41a605e4c8b898d77f47374a76cbd", "patch": "@@ -108,6 +108,7 @@ struct Diagnostic {\n }\n \n #[derive(RustcEncodable)]\n+#[allow(unused_attributes)]\n struct DiagnosticSpan {\n     file_name: String,\n     byte_start: u32,\n@@ -129,6 +130,7 @@ struct DiagnosticSpan {\n     /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n     /// If the suggestion is approximate\n+    #[rustc_serialize_exclude_null]\n     suggestion_approximate: Option<bool>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,"}, {"sha": "9181cca215c848602d3f8bbe1a93a3ac45561588", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=540f95d9fad41a605e4c8b898d77f47374a76cbd", "patch": "@@ -25,6 +25,7 @@\n #![feature(match_default_bindings)]\n #![feature(i128_type)]\n #![feature(const_atomic_usize_new)]\n+#![feature(rustc_attrs)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "743f22b6b314075a34d3a76c9cc44de77fb6abab", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540f95d9fad41a605e4c8b898d77f47374a76cbd/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=540f95d9fad41a605e4c8b898d77f47374a76cbd", "patch": "@@ -190,7 +190,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n         Struct(_, ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\");\n             let mut stmts = Vec::new();\n-            for (i, &FieldInfo { name, ref self_, span, .. }) in fields.iter().enumerate() {\n+            for (i, &FieldInfo { name, ref self_, span, attrs, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n                     Some(id) => id.name,\n                     None => Symbol::intern(&format!(\"_field{}\", i)),\n@@ -212,7 +212,19 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                 } else {\n                     cx.expr(span, ExprKind::Ret(Some(call)))\n                 };\n-                stmts.push(cx.stmt_expr(call));\n+\n+                // This exists for https://github.com/rust-lang/rust/pull/47540\n+                //\n+                // If we decide to stabilize that flag this can be removed\n+                let expr = if attrs.iter().any(|a| a.check_name(\"rustc_serialize_exclude_null\")) {\n+                    let is_some = cx.ident_of(\"is_some\");\n+                    let condition = cx.expr_method_call(span, self_.clone(), is_some, vec![]);\n+                    cx.expr_if(span, condition, call, None)\n+                } else {\n+                    call\n+                };\n+                let stmt = cx.stmt_expr(expr);\n+                stmts.push(stmt);\n             }\n \n             // unit structs have no fields and need to return Ok()"}]}