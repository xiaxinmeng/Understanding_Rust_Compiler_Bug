{"sha": "93974cb09e2670eb4debfb3a9081844ba21799f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOTc0Y2IwOWUyNjcwZWI0ZGViZmIzYTkwODE4NDRiYTIxNzk5ZjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-25T08:47:59Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-25T08:47:59Z"}, "message": "Fix associated existentials for generic traits", "tree": {"sha": "6d1a7e81df34d989af90278b22d924c971647089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1a7e81df34d989af90278b22d924c971647089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93974cb09e2670eb4debfb3a9081844ba21799f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93974cb09e2670eb4debfb3a9081844ba21799f4", "html_url": "https://github.com/rust-lang/rust/commit/93974cb09e2670eb4debfb3a9081844ba21799f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93974cb09e2670eb4debfb3a9081844ba21799f4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9130efdad336820b3a9fad234915e4dc977a5d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/9130efdad336820b3a9fad234915e4dc977a5d93", "html_url": "https://github.com/rust-lang/rust/commit/9130efdad336820b3a9fad234915e4dc977a5d93"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "1ce60d8f05599e630905b5cf04fa5571106c8492", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93974cb09e2670eb4debfb3a9081844ba21799f4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93974cb09e2670eb4debfb3a9081844ba21799f4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=93974cb09e2670eb4debfb3a9081844ba21799f4", "patch": "@@ -1517,7 +1517,8 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n     }\n     let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n     let ty = if let ty::AssociatedKind::Existential = assoc_ty.item.kind {\n-        tcx.mk_anon(assoc_ty.item.def_id, substs)\n+        let item_substs = Substs::identity_for_item(tcx, assoc_ty.item.def_id);\n+        tcx.mk_anon(assoc_ty.item.def_id, item_substs)\n     } else {\n         tcx.type_of(assoc_ty.item.def_id)\n     };"}, {"sha": "c9bf7b87ef4a9885fad5f1fb4a39a0e003ae79a2", "filename": "src/test/ui/impl-trait/associated-existential-type-generic-trait.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93974cb09e2670eb4debfb3a9081844ba21799f4/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93974cb09e2670eb4debfb3a9081844ba21799f4/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs?ref=93974cb09e2670eb4debfb3a9081844ba21799f4", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(existential_type)]\n+// compile-pass\n+\n+trait Bar {}\n+struct Dummy<U>(U);\n+impl<V> Bar for Dummy<V> {}\n+\n+trait Foo<T> {\n+    type Assoc: Bar;\n+    fn foo(t: T) -> Self::Assoc;\n+}\n+\n+impl<W> Foo<W> for i32 {\n+    existential type Assoc: Bar;\n+    fn foo(w: W) -> Self::Assoc {\n+        Dummy(w)\n+    }\n+}\n+\n+struct NonGeneric;\n+impl Bar for NonGeneric {}\n+\n+impl<W> Foo<W> for u32 {\n+    existential type Assoc: Bar;\n+    fn foo(_: W) -> Self::Assoc {\n+        NonGeneric\n+    }\n+}\n+\n+fn main() {}"}]}