{"sha": "11258310e2b67f734d4d520e6f995342892ecc3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMjU4MzEwZTJiNjdmNzM0ZDRkNTIwZTZmOTk1MzQyODkyZWNjM2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-14T20:38:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-15T01:26:03Z"}, "message": "Convert more core types to camel case", "tree": {"sha": "782ce77f152dc1eb73b2f2384690a7af06b65e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782ce77f152dc1eb73b2f2384690a7af06b65e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11258310e2b67f734d4d520e6f995342892ecc3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11258310e2b67f734d4d520e6f995342892ecc3a", "html_url": "https://github.com/rust-lang/rust/commit/11258310e2b67f734d4d520e6f995342892ecc3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11258310e2b67f734d4d520e6f995342892ecc3a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e640a66eb494d991e570f9827e7b00122ea538b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e640a66eb494d991e570f9827e7b00122ea538b0", "html_url": "https://github.com/rust-lang/rust/commit/e640a66eb494d991e570f9827e7b00122ea538b0"}], "stats": {"total": 825, "additions": 419, "deletions": 406}, "files": [{"sha": "115ae566c24b64312bad73bb21d59fad6a97c69f", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -8,7 +8,7 @@ import rustc::metadata::filesearch::{get_cargo_root, get_cargo_root_nearest,\n import syntax::diagnostic;\n \n import result::{ok, err};\n-import io::writer_util;\n+import io::WriterUtil;\n import std::{map, json, tempfile, term, sort, getopts};\n import map::hashmap;\n import to_str::to_str;"}, {"sha": "d5cddf0a4e0d918171c6e3c41b753592b3e9bd8c", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,5 +1,5 @@\n import run::spawn_process;\n-import io::writer_util;\n+import io::WriterUtil;\n import libc::{c_int, pid_t};\n \n import pipes::chan;"}, {"sha": "a6800053966c73443d61125bac12cf54d53bc1f8", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,4 +1,4 @@\n-import io::writer_util;\n+import io::WriterUtil;\n \n import common::mode_run_pass;\n import common::mode_run_fail;\n@@ -339,7 +339,7 @@ fn compose_and_run_compiler(\n                     config.compile_lib_path, input)\n }\n \n-fn ensure_dir(path: path) {\n+fn ensure_dir(path: Path) {\n     if os::path_is_dir(path) { return; }\n     if !os::make_dir(path, 0x1c0i32) {\n         fail fmt!{\"can't make dir %s\", path};\n@@ -455,7 +455,7 @@ fn dump_output_file(config: config, testfile: ~str,\n                     out: ~str, extension: ~str) {\n     let outfile = make_out_name(config, testfile, extension);\n     let writer = result::get(\n-        io::file_writer(outfile, ~[io::create, io::truncate]));\n+        io::file_writer(outfile, ~[io::Create, io::Truncate]));\n     writer.write_str(out);\n }\n "}, {"sha": "028fc4732e0d926aeb3f74d05bd6f685dfec526f", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -54,7 +54,7 @@ def scrub(b):\n d.write(\"use std;\\n\")\n d.write(\"use run_pass_stage2;\\n\")\n d.write(\"import run_pass_stage2::*;\\n\")\n-d.write(\"import io::writer_util;\\n\");\n+d.write(\"import io::WriterUtil;\\n\");\n d.write(\"fn main() {\\n\");\n d.write(\"    let out = io::stdout();\\n\");\n i = 0"}, {"sha": "352831c86e6203a58ea37207058de7b8c0972a0b", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,4 +1,4 @@\n-import io::writer_util;\n+import io::WriterUtil;\n \n import syntax::{ast, ast_util, fold, visit, codemap};\n import syntax::parse;\n@@ -10,7 +10,7 @@ type context = { mode: test_mode }; // + rng\n \n fn write_file(filename: ~str, content: ~str) {\n     result::get(\n-        io::file_writer(filename, ~[io::create, io::truncate]))\n+        io::file_writer(filename, ~[io::Create, io::Truncate]))\n         .write_str(content);\n }\n \n@@ -216,9 +216,9 @@ fn under(n: uint, it: fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-fn devnull() -> io::writer { io::mem_buffer_writer(io::mem_buffer()) }\n+fn devnull() -> io::Writer { io::mem_buffer_writer(io::mem_buffer()) }\n \n-fn as_str(f: fn@(io::writer)) -> ~str {\n+fn as_str(f: fn@(io::Writer)) -> ~str {\n     let buf = io::mem_buffer();\n     f(io::mem_buffer_writer(buf));\n     io::mem_buffer_str(buf)"}, {"sha": "f5c9039ad25c97ba0927eaa3ec400042ea8f3ee5", "filename": "src/libcore/core.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -54,6 +54,7 @@ export send_map;\n export hash;\n export cmp;\n export num;\n+export path;\n \n // NDM seems to be necessary for resolve to work\n export option_iter;\n@@ -214,11 +215,16 @@ mod pipes;\n \n // Runtime and language-primitive support\n \n+#[warn(non_camel_case_types)]\n mod io;\n mod libc;\n+#[warn(non_camel_case_types)]\n mod os;\n+#[warn(non_camel_case_types)]\n mod path;\n+#[warn(non_camel_case_types)]\n mod rand;\n+#[warn(non_camel_case_types)]\n mod run;\n #[warn(non_camel_case_types)]\n mod sys;"}, {"sha": "f6a721d102ab2889fdd7d6532635aefd1c173276", "filename": "src/libcore/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -4,7 +4,7 @@\n \n import option::{some, none};\n import option = option::option;\n-import path = path::path;\n+import Path = path::Path;\n import tuple::{TupleOps, ExtendedTupleOps};\n import str::{str_slice, unique_str};\n import vec::{const_vector, copyable_vector, immutable_vector};\n@@ -14,7 +14,7 @@ import num::Num;\n import ptr::ptr;\n import to_str::ToStr;\n \n-export path, option, some, none, unreachable;\n+export Path, option, some, none, unreachable;\n export extensions;\n // The following exports are the extension impls for numeric types\n export Num, times, timesi;"}, {"sha": "2237dad299fedef8d3d429ec80b91a20a6e03529", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -13,8 +13,8 @@\n  * CPRNG like rand::rng.\n  */\n \n-import io::writer;\n-import io::writer_util;\n+import io::Writer;\n+import io::WriterUtil;\n \n export Streaming, State;\n export default_state;\n@@ -126,7 +126,7 @@ fn SipState(key0: u64, key1: u64) -> SipState {\n }\n \n \n-impl &SipState : io::writer {\n+impl &SipState : io::Writer {\n \n     // Methods for io::writer\n     fn write(msg: &[const u8]) {\n@@ -209,7 +209,7 @@ impl &SipState : io::writer {\n         self.ntail = left;\n     }\n \n-    fn seek(_x: int, _s: io::seek_style) {\n+    fn seek(_x: int, _s: io::SeekStyle) {\n         fail;\n     }\n     fn tell() -> uint {\n@@ -218,8 +218,8 @@ impl &SipState : io::writer {\n     fn flush() -> int {\n         0\n     }\n-    fn get_type() -> io::writer_type {\n-        io::file\n+    fn get_type() -> io::WriterType {\n+        io::File\n     }\n }\n "}, {"sha": "c01672b5c738daef1b2cf499742e5f90a33fe573", "filename": "src/libcore/io.rs", "status": "modified", "additions": 114, "deletions": 110, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -11,6 +11,7 @@ import libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n import libc::consts::os::posix88::*;\n import libc::consts::os::extra::*;\n \n+#[allow(non_camel_case_types)] // not sure what to do about this\n type fd_t = c_int;\n \n #[abi = \"cdecl\"]\n@@ -24,25 +25,25 @@ extern mod rustrt {\n \n // FIXME (#2004): This is all buffered. We might need an unbuffered variant\n // as well\n-enum seek_style { seek_set, seek_end, seek_cur, }\n+enum SeekStyle { SeekSet, SeekEnd, SeekCur, }\n \n \n // The raw underlying reader trait. All readers must implement this.\n-trait reader {\n+trait Reader {\n     // FIXME (#2004): Seekable really should be orthogonal.\n \n     // FIXME (#2982): This should probably return an error.\n     fn read(buf: &[mut u8], len: uint) -> uint;\n     fn read_byte() -> int;\n     fn unread_byte(int);\n     fn eof() -> bool;\n-    fn seek(int, seek_style);\n+    fn seek(int, SeekStyle);\n     fn tell() -> uint;\n }\n \n // Generic utility functions defined on readers\n \n-impl reader {\n+impl Reader {\n     fn read_bytes(len: uint) -> ~[u8] {\n         let mut buf = ~[mut];\n         vec::reserve(buf, len);\n@@ -195,15 +196,15 @@ impl reader {\n \n // Reader implementations\n \n-fn convert_whence(whence: seek_style) -> i32 {\n+fn convert_whence(whence: SeekStyle) -> i32 {\n     return match whence {\n-      seek_set => 0i32,\n-      seek_cur => 1i32,\n-      seek_end => 2i32\n+      SeekSet => 0i32,\n+      SeekCur => 1i32,\n+      SeekEnd => 2i32\n     };\n }\n \n-impl *libc::FILE: reader {\n+impl *libc::FILE: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         do vec::as_buf(buf) |buf_p, buf_len| {\n             assert buf_len <= len;\n@@ -217,7 +218,7 @@ impl *libc::FILE: reader {\n     fn read_byte() -> int { return libc::fgetc(self) as int; }\n     fn unread_byte(byte: int) { libc::ungetc(byte as c_int, self); }\n     fn eof() -> bool { return libc::feof(self) != 0 as c_int; }\n-    fn seek(offset: int, whence: seek_style) {\n+    fn seek(offset: int, whence: SeekStyle) {\n         assert libc::fseek(self, offset as c_long, convert_whence(whence))\n             == 0 as c_int;\n     }\n@@ -227,36 +228,36 @@ impl *libc::FILE: reader {\n // A forwarding impl of reader that also holds on to a resource for the\n // duration of its lifetime.\n // FIXME there really should be a better way to do this // #2004\n-impl<T: reader, C> {base: T, cleanup: C}: reader {\n+impl<T: Reader, C> {base: T, cleanup: C}: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint { self.base.read(buf, len) }\n     fn read_byte() -> int { self.base.read_byte() }\n     fn unread_byte(byte: int) { self.base.unread_byte(byte); }\n     fn eof() -> bool { self.base.eof() }\n-    fn seek(off: int, whence: seek_style) { self.base.seek(off, whence) }\n+    fn seek(off: int, whence: SeekStyle) { self.base.seek(off, whence) }\n     fn tell() -> uint { self.base.tell() }\n }\n \n-class FILE_res {\n+class FILERes {\n     let f: *libc::FILE;\n     new(f: *libc::FILE) { self.f = f; }\n     drop { libc::fclose(self.f); }\n }\n \n-fn FILE_reader(f: *libc::FILE, cleanup: bool) -> reader {\n+fn FILE_reader(f: *libc::FILE, cleanup: bool) -> Reader {\n     if cleanup {\n-        {base: f, cleanup: FILE_res(f)} as reader\n+        {base: f, cleanup: FILERes(f)} as Reader\n     } else {\n-        f as reader\n+        f as Reader\n     }\n }\n \n // FIXME (#2004): this should either be an trait-less impl, a set of\n // top-level functions that take a reader, or a set of default methods on\n // reader (which can then be called reader)\n \n-fn stdin() -> reader { rustrt::rust_get_stdin() as reader }\n+fn stdin() -> Reader { rustrt::rust_get_stdin() as Reader }\n \n-fn file_reader(path: ~str) -> result<reader, ~str> {\n+fn file_reader(path: ~str) -> result<Reader, ~str> {\n     let f = os::as_c_charp(path, |pathbuf| {\n         os::as_c_charp(~\"r\", |modebuf|\n             libc::fopen(pathbuf, modebuf)\n@@ -271,9 +272,9 @@ fn file_reader(path: ~str) -> result<reader, ~str> {\n \n // Byte buffer readers\n \n-type byte_buf = {buf: ~[const u8], mut pos: uint, len: uint};\n+type ByteBuf = {buf: ~[const u8], mut pos: uint, len: uint};\n \n-impl byte_buf: reader {\n+impl ByteBuf: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         let count = uint::min(len, self.len - self.pos);\n \n@@ -293,65 +294,65 @@ impl byte_buf: reader {\n     // FIXME (#2738): implement this\n     fn unread_byte(_byte: int) { error!{\"Unimplemented: unread_byte\"}; fail; }\n     fn eof() -> bool { self.pos == self.len }\n-    fn seek(offset: int, whence: seek_style) {\n+    fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;\n         self.pos = seek_in_buf(offset, pos, self.len, whence);\n     }\n     fn tell() -> uint { self.pos }\n }\n \n-fn bytes_reader(bytes: ~[u8]) -> reader {\n+fn bytes_reader(bytes: ~[u8]) -> Reader {\n     bytes_reader_between(bytes, 0u, vec::len(bytes))\n }\n \n-fn bytes_reader_between(bytes: ~[u8], start: uint, end: uint) -> reader {\n-    {buf: bytes, mut pos: start, len: end} as reader\n+fn bytes_reader_between(bytes: ~[u8], start: uint, end: uint) -> Reader {\n+    {buf: bytes, mut pos: start, len: end} as Reader\n }\n \n-fn with_bytes_reader<t>(bytes: ~[u8], f: fn(reader) -> t) -> t {\n+fn with_bytes_reader<t>(bytes: ~[u8], f: fn(Reader) -> t) -> t {\n     f(bytes_reader(bytes))\n }\n \n fn with_bytes_reader_between<t>(bytes: ~[u8], start: uint, end: uint,\n-                                f: fn(reader) -> t) -> t {\n+                                f: fn(Reader) -> t) -> t {\n     f(bytes_reader_between(bytes, start, end))\n }\n \n-fn str_reader(s: ~str) -> reader {\n+fn str_reader(s: ~str) -> Reader {\n     bytes_reader(str::bytes(s))\n }\n \n-fn with_str_reader<T>(s: ~str, f: fn(reader) -> T) -> T {\n+fn with_str_reader<T>(s: ~str, f: fn(Reader) -> T) -> T {\n     do str::as_bytes(s) |bytes| {\n         with_bytes_reader_between(bytes, 0u, str::len(s), f)\n     }\n }\n \n // Writing\n-enum fileflag { append, create, truncate, no_flag, }\n+enum FileFlag { Append, Create, Truncate, NoFlag, }\n \n // What type of writer are we?\n-enum writer_type { screen, file }\n+enum WriterType { Screen, File }\n \n // FIXME (#2004): Seekable really should be orthogonal.\n // FIXME (#2004): eventually u64\n-trait writer {\n+trait Writer {\n     fn write(v: &[const u8]);\n-    fn seek(int, seek_style);\n+    fn seek(int, SeekStyle);\n     fn tell() -> uint;\n     fn flush() -> int;\n-    fn get_type() -> writer_type;\n+    fn get_type() -> WriterType;\n }\n \n-impl<T: writer, C> {base: T, cleanup: C}: writer {\n+impl<T: Writer, C> {base: T, cleanup: C}: Writer {\n     fn write(bs: &[const u8]) { self.base.write(bs); }\n-    fn seek(off: int, style: seek_style) { self.base.seek(off, style); }\n+    fn seek(off: int, style: SeekStyle) { self.base.seek(off, style); }\n     fn tell() -> uint { self.base.tell() }\n     fn flush() -> int { self.base.flush() }\n-    fn get_type() -> writer_type { file }\n+    fn get_type() -> WriterType { File }\n }\n \n-impl *libc::FILE: writer {\n+impl *libc::FILE: Writer {\n     fn write(v: &[const u8]) {\n         do vec::as_const_buf(v) |vbuf, len| {\n             let nout = libc::fwrite(vbuf as *c_void, len as size_t,\n@@ -363,28 +364,28 @@ impl *libc::FILE: writer {\n             }\n         }\n     }\n-    fn seek(offset: int, whence: seek_style) {\n+    fn seek(offset: int, whence: SeekStyle) {\n         assert libc::fseek(self, offset as c_long, convert_whence(whence))\n             == 0 as c_int;\n     }\n     fn tell() -> uint { libc::ftell(self) as uint }\n     fn flush() -> int { libc::fflush(self) as int }\n-    fn get_type() -> writer_type {\n+    fn get_type() -> WriterType {\n         let fd = libc::fileno(self);\n-        if libc::isatty(fd) == 0 { file   }\n-        else                     { screen }\n+        if libc::isatty(fd) == 0 { File   }\n+        else                     { Screen }\n     }\n }\n \n-fn FILE_writer(f: *libc::FILE, cleanup: bool) -> writer {\n+fn FILE_writer(f: *libc::FILE, cleanup: bool) -> Writer {\n     if cleanup {\n-        {base: f, cleanup: FILE_res(f)} as writer\n+        {base: f, cleanup: FILERes(f)} as Writer\n     } else {\n-        f as writer\n+        f as Writer\n     }\n }\n \n-impl fd_t: writer {\n+impl fd_t: Writer {\n     fn write(v: &[const u8]) {\n         let mut count = 0u;\n         do vec::as_const_buf(v) |vbuf, len| {\n@@ -400,7 +401,7 @@ impl fd_t: writer {\n             }\n         }\n     }\n-    fn seek(_offset: int, _whence: seek_style) {\n+    fn seek(_offset: int, _whence: SeekStyle) {\n         error!{\"need 64-bit foreign calls for seek, sorry\"};\n         fail;\n     }\n@@ -409,28 +410,28 @@ impl fd_t: writer {\n         fail;\n     }\n     fn flush() -> int { 0 }\n-    fn get_type() -> writer_type {\n-        if libc::isatty(self) == 0 { file } else { screen }\n+    fn get_type() -> WriterType {\n+        if libc::isatty(self) == 0 { File } else { Screen }\n     }\n }\n \n-class fd_res {\n+class FdRes {\n     let fd: fd_t;\n     new(fd: fd_t) { self.fd = fd; }\n     drop { libc::close(self.fd); }\n }\n \n-fn fd_writer(fd: fd_t, cleanup: bool) -> writer {\n+fn fd_writer(fd: fd_t, cleanup: bool) -> Writer {\n     if cleanup {\n-        {base: fd, cleanup: fd_res(fd)} as writer\n+        {base: fd, cleanup: FdRes(fd)} as Writer\n     } else {\n-        fd as writer\n+        fd as Writer\n     }\n }\n \n \n-fn mk_file_writer(path: ~str, flags: ~[fileflag])\n-    -> result<writer, ~str> {\n+fn mk_file_writer(path: ~str, flags: ~[FileFlag])\n+    -> result<Writer, ~str> {\n \n     #[cfg(windows)]\n     fn wb() -> c_int { (O_WRONLY | O_BINARY) as c_int }\n@@ -441,10 +442,10 @@ fn mk_file_writer(path: ~str, flags: ~[fileflag])\n     let mut fflags: c_int = wb();\n     for vec::each(flags) |f| {\n         match f {\n-          append => fflags |= O_APPEND as c_int,\n-          create => fflags |= O_CREAT as c_int,\n-          truncate => fflags |= O_TRUNC as c_int,\n-          no_flag => ()\n+          Append => fflags |= O_APPEND as c_int,\n+          Create => fflags |= O_CREAT as c_int,\n+          Truncate => fflags |= O_TRUNC as c_int,\n+          NoFlag => ()\n         }\n     }\n     let fd = do os::as_c_charp(path) |pathbuf| {\n@@ -535,7 +536,7 @@ fn u64_from_be_bytes(data: ~[u8], start: uint, size: uint) -> u64 {\n \n // FIXME: #3048 combine trait+impl (or just move these to\n // default methods on writer)\n-trait writer_util {\n+trait WriterUtil {\n     fn write_char(ch: char);\n     fn write_str(s: &str);\n     fn write_line(s: &str);\n@@ -560,7 +561,7 @@ trait writer_util {\n     fn write_u8(n: u8);\n }\n \n-impl<T:writer> T : writer_util {\n+impl<T: Writer> T : WriterUtil {\n     fn write_char(ch: char) {\n         if ch as uint < 128u {\n             self.write(&[ch as u8]);\n@@ -631,13 +632,13 @@ impl<T:writer> T : writer_util {\n     fn write_u8(n: u8) { self.write(&[n]) }\n }\n \n-fn file_writer(path: ~str, flags: ~[fileflag]) -> result<writer, ~str> {\n+fn file_writer(path: ~str, flags: ~[FileFlag]) -> result<Writer, ~str> {\n     result::chain(mk_file_writer(path, flags), |w| result::ok(w))\n }\n \n \n // FIXME: fileflags // #2004\n-fn buffered_file_writer(path: ~str) -> result<writer, ~str> {\n+fn buffered_file_writer(path: ~str) -> result<Writer, ~str> {\n     let f = do os::as_c_charp(path) |pathbuf| {\n         do os::as_c_charp(~\"w\") |modebuf| {\n             libc::fopen(pathbuf, modebuf)\n@@ -650,15 +651,15 @@ fn buffered_file_writer(path: ~str) -> result<writer, ~str> {\n // FIXME (#2004) it would be great if this could be a const\n // FIXME (#2004) why are these different from the way stdin() is\n // implemented?\n-fn stdout() -> writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n-fn stderr() -> writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n+fn stdout() -> Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n+fn stderr() -> Writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n \n fn print(s: &str) { stdout().write_str(s); }\n fn println(s: &str) { stdout().write_line(s); }\n \n-type mem_buffer = @{buf: dvec<u8>, mut pos: uint};\n+type MemBuffer = @{buf: dvec<u8>, mut pos: uint};\n \n-impl mem_buffer: writer {\n+impl MemBuffer: Writer {\n     fn write(v: &[const u8]) {\n         // Fast path.\n         let vlen = vec::len(v);\n@@ -679,48 +680,48 @@ impl mem_buffer: writer {\n         self.buf.push_slice(v, vpos, vlen);\n         self.pos += vlen;\n     }\n-    fn seek(offset: int, whence: seek_style) {\n+    fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;\n         let len = self.buf.len();\n         self.pos = seek_in_buf(offset, pos, len, whence);\n     }\n     fn tell() -> uint { self.pos }\n     fn flush() -> int { 0 }\n-    fn get_type() -> writer_type { file }\n+    fn get_type() -> WriterType { File }\n }\n \n-fn mem_buffer() -> mem_buffer {\n+fn mem_buffer() -> MemBuffer {\n     @{buf: dvec(), mut pos: 0u}\n }\n-fn mem_buffer_writer(b: mem_buffer) -> writer { b as writer }\n-fn mem_buffer_buf(b: mem_buffer) -> ~[u8] { b.buf.get() }\n-fn mem_buffer_str(b: mem_buffer) -> ~str {\n+fn mem_buffer_writer(b: MemBuffer) -> Writer { b as Writer }\n+fn mem_buffer_buf(b: MemBuffer) -> ~[u8] { b.buf.get() }\n+fn mem_buffer_str(b: MemBuffer) -> ~str {\n     str::from_bytes(b.buf.get())\n }\n \n-fn with_str_writer(f: fn(writer)) -> ~str {\n+fn with_str_writer(f: fn(Writer)) -> ~str {\n     let buf = mem_buffer();\n     let wr = mem_buffer_writer(buf);\n     f(wr);\n     io::mem_buffer_str(buf)\n }\n \n-fn with_buf_writer(f: fn(writer)) -> ~[u8] {\n+fn with_buf_writer(f: fn(Writer)) -> ~[u8] {\n     let buf = mem_buffer();\n     let wr = mem_buffer_writer(buf);\n     f(wr);\n     io::mem_buffer_buf(buf)\n }\n \n // Utility functions\n-fn seek_in_buf(offset: int, pos: uint, len: uint, whence: seek_style) ->\n+fn seek_in_buf(offset: int, pos: uint, len: uint, whence: SeekStyle) ->\n    uint {\n     let mut bpos = pos as int;\n     let blen = len as int;\n     match whence {\n-      seek_set => bpos = offset,\n-      seek_cur => bpos += offset,\n-      seek_end => bpos = blen + offset\n+      SeekSet => bpos = offset,\n+      SeekCur => bpos += offset,\n+      SeekEnd => bpos = blen + offset\n     }\n     if bpos < 0 { bpos = 0; } else if bpos > blen { bpos = blen; }\n     return bpos as uint;\n@@ -748,24 +749,24 @@ fn read_whole_file(file: ~str) -> result<~[u8], ~str> {\n \n mod fsync {\n \n-    enum level {\n+    enum Level {\n         // whatever fsync does on that platform\n-        fsync,\n+        FSync,\n \n         // fdatasync on linux, similiar or more on other platforms\n-        fdatasync,\n+        FDataSync,\n \n         // full fsync\n         //\n         // You must additionally sync the parent directory as well!\n-        fullfsync,\n+        FullFSync,\n     }\n \n \n     // Artifacts that need to fsync on destruction\n-    class res<t> {\n-        let arg: arg<t>;\n-        new(-arg: arg<t>) { self.arg <- arg; }\n+    class Res<t> {\n+        let arg: Arg<t>;\n+        new(-arg: Arg<t>) { self.arg <- arg; }\n         drop {\n           match self.arg.opt_level {\n             option::none => (),\n@@ -777,44 +778,47 @@ mod fsync {\n         }\n     }\n \n-    type arg<t> = {\n+    type Arg<t> = {\n         val: t,\n-        opt_level: option<level>,\n-        fsync_fn: fn@(t, level) -> int\n+        opt_level: option<Level>,\n+        fsync_fn: fn@(t, Level) -> int\n     };\n \n     // fsync file after executing blk\n     // FIXME (#2004) find better way to create resources within lifetime of\n     // outer res\n-    fn FILE_res_sync(&&file: FILE_res, opt_level: option<level>,\n-                  blk: fn(&&res<*libc::FILE>)) {\n-        blk(res({\n+    fn FILE_res_sync(&&file: FILERes, opt_level: option<Level>,\n+                  blk: fn(&&Res<*libc::FILE>)) {\n+        blk(Res({\n             val: file.f, opt_level: opt_level,\n-            fsync_fn: fn@(&&file: *libc::FILE, l: level) -> int {\n+            fsync_fn: fn@(&&file: *libc::FILE, l: Level) -> int {\n                 return os::fsync_fd(libc::fileno(file), l) as int;\n             }\n         }));\n     }\n \n     // fsync fd after executing blk\n-    fn fd_res_sync(&&fd: fd_res, opt_level: option<level>,\n-                   blk: fn(&&res<fd_t>)) {\n-        blk(res({\n+    fn fd_res_sync(&&fd: FdRes, opt_level: option<Level>,\n+                   blk: fn(&&Res<fd_t>)) {\n+        blk(Res({\n             val: fd.fd, opt_level: opt_level,\n-            fsync_fn: fn@(&&fd: fd_t, l: level) -> int {\n+            fsync_fn: fn@(&&fd: fd_t, l: Level) -> int {\n                 return os::fsync_fd(fd, l) as int;\n             }\n         }));\n     }\n \n     // Type of objects that may want to fsync\n-    trait t { fn fsync(l: level) -> int; }\n+    trait FSyncable { fn fsync(l: Level) -> int; }\n \n     // Call o.fsync after executing blk\n-    fn obj_sync(&&o: t, opt_level: option<level>, blk: fn(&&res<t>)) {\n-        blk(res({\n+    fn obj_sync(&&o: FSyncable, opt_level: option<Level>,\n+                blk: fn(&&Res<FSyncable>)) {\n+        blk(Res({\n             val: o, opt_level: opt_level,\n-            fsync_fn: fn@(&&o: t, l: level) -> int { return o.fsync(l); }\n+            fsync_fn: fn@(&&o: FSyncable, l: Level) -> int {\n+                return o.fsync(l);\n+            }\n         }));\n     }\n }\n@@ -830,20 +834,20 @@ mod tests {\n             ~\"A hoopy frood who really knows where his towel is.\";\n         log(debug, frood);\n         {\n-            let out: io::writer =\n+            let out: io::Writer =\n                 result::get(\n-                    io::file_writer(tmpfile, ~[io::create, io::truncate]));\n+                    io::file_writer(tmpfile, ~[io::Create, io::Truncate]));\n             out.write_str(frood);\n         }\n-        let inp: io::reader = result::get(io::file_reader(tmpfile));\n+        let inp: io::Reader = result::get(io::file_reader(tmpfile));\n         let frood2: ~str = inp.read_c_str();\n         log(debug, frood2);\n         assert frood == frood2;\n     }\n \n     #[test]\n     fn test_readchars_empty() {\n-        let inp : io::reader = io::str_reader(~\"\");\n+        let inp : io::Reader = io::str_reader(~\"\");\n         let res : ~[char] = inp.read_chars(128u);\n         assert(vec::len(res) == 0u);\n     }\n@@ -858,7 +862,7 @@ mod tests {\n             29983, 38152, 30340, 27748,\n             21273, 20999, 32905, 27748];\n         fn check_read_ln(len : uint, s: ~str, ivals: ~[int]) {\n-            let inp : io::reader = io::str_reader(s);\n+            let inp : io::Reader = io::str_reader(s);\n             let res : ~[char] = inp.read_chars(len);\n             if (len <= vec::len(ivals)) {\n                 assert(vec::len(res) == len);\n@@ -877,14 +881,14 @@ mod tests {\n \n     #[test]\n     fn test_readchar() {\n-        let inp : io::reader = io::str_reader(~\"\u751f\");\n+        let inp : io::Reader = io::str_reader(~\"\u751f\");\n         let res : char = inp.read_char();\n         assert(res as int == 29983);\n     }\n \n     #[test]\n     fn test_readchar_empty() {\n-        let inp : io::reader = io::str_reader(~\"\");\n+        let inp : io::Reader = io::str_reader(~\"\");\n         let res : char = inp.read_char();\n         assert(res as int == -1);\n     }\n@@ -924,12 +928,12 @@ mod tests {\n         let mbuf = mem_buffer();\n         mbuf.write(~[0u8, 1u8, 2u8, 3u8]);\n         assert mem_buffer_buf(mbuf) == ~[0u8, 1u8, 2u8, 3u8];\n-        mbuf.seek(-2, seek_cur);\n+        mbuf.seek(-2, SeekCur);\n         mbuf.write(~[4u8, 5u8, 6u8, 7u8]);\n         assert mem_buffer_buf(mbuf) == ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8];\n-        mbuf.seek(-2, seek_end);\n+        mbuf.seek(-2, SeekEnd);\n         mbuf.write(~[8u8]);\n-        mbuf.seek(1, seek_set);\n+        mbuf.seek(1, SeekSet);\n         mbuf.write(~[9u8]);\n         assert mem_buffer_buf(mbuf) == ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8];\n     }"}, {"sha": "09dd614525edfbf0ec04710db67afe422bf0ce4e", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -37,6 +37,8 @@\n  * dissolved.\n  */\n \n+#[allow(non_camel_case_types)];\n+\n // Initial glob-exports mean that all the contents of all the modules\n // wind up exported, if you're interested in writing platform-specific code.\n "}, {"sha": "ec4485bb1233409ee8c5316fa88605907295bb7a", "filename": "src/libcore/os.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -134,34 +134,34 @@ mod global_env {\n         fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n     }\n \n-    enum msg {\n-        msg_getenv(~str, comm::chan<option<~str>>),\n-        msg_setenv(~str, ~str, comm::chan<()>),\n-        msg_env(comm::chan<~[(~str,~str)]>)\n+    enum Msg {\n+        MsgGetEnv(~str, comm::chan<option<~str>>),\n+        MsgSetEnv(~str, ~str, comm::chan<()>),\n+        MsgEnv(comm::chan<~[(~str,~str)]>)\n     }\n \n     fn getenv(n: ~str) -> option<~str> {\n         let env_ch = get_global_env_chan();\n         let po = comm::port();\n-        comm::send(env_ch, msg_getenv(n, comm::chan(po)));\n+        comm::send(env_ch, MsgGetEnv(n, comm::chan(po)));\n         comm::recv(po)\n     }\n \n     fn setenv(n: ~str, v: ~str) {\n         let env_ch = get_global_env_chan();\n         let po = comm::port();\n-        comm::send(env_ch, msg_setenv(n, v, comm::chan(po)));\n+        comm::send(env_ch, MsgSetEnv(n, v, comm::chan(po)));\n         comm::recv(po)\n     }\n \n     fn env() -> ~[(~str,~str)] {\n         let env_ch = get_global_env_chan();\n         let po = comm::port();\n-        comm::send(env_ch, msg_env(comm::chan(po)));\n+        comm::send(env_ch, MsgEnv(comm::chan(po)));\n         comm::recv(po)\n     }\n \n-    fn get_global_env_chan() -> comm::chan<msg> {\n+    fn get_global_env_chan() -> comm::chan<Msg> {\n         let global_ptr = rustrt::rust_global_env_chan_ptr();\n         unsafe {\n             priv::chan_from_global_ptr(global_ptr, || {\n@@ -172,18 +172,18 @@ mod global_env {\n         }\n     }\n \n-    fn global_env_task(msg_po: comm::port<msg>) {\n+    fn global_env_task(msg_po: comm::port<Msg>) {\n         unsafe {\n             do priv::weaken_task |weak_po| {\n                 loop {\n                     match comm::select2(msg_po, weak_po) {\n-                      either::left(msg_getenv(n, resp_ch)) => {\n+                      either::left(MsgGetEnv(n, resp_ch)) => {\n                         comm::send(resp_ch, impl::getenv(n))\n                       }\n-                      either::left(msg_setenv(n, v, resp_ch)) => {\n+                      either::left(MsgSetEnv(n, v, resp_ch)) => {\n                         comm::send(resp_ch, impl::setenv(n, v))\n                       }\n-                      either::left(msg_env(resp_ch)) => {\n+                      either::left(MsgEnv(resp_ch)) => {\n                         comm::send(resp_ch, impl::env())\n                       }\n                       either::right(_) => break\n@@ -272,28 +272,28 @@ fn fdopen(fd: c_int) -> *FILE {\n // fsync related\n \n #[cfg(windows)]\n-fn fsync_fd(fd: c_int, _level: io::fsync::level) -> c_int {\n+fn fsync_fd(fd: c_int, _level: io::fsync::Level) -> c_int {\n     import libc::funcs::extra::msvcrt::*;\n     return commit(fd);\n }\n \n #[cfg(target_os = \"linux\")]\n-fn fsync_fd(fd: c_int, level: io::fsync::level) -> c_int {\n+fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n     import libc::funcs::posix01::unistd::*;\n     match level {\n-      io::fsync::fsync\n-      | io::fsync::fullfsync => return fsync(fd),\n-      io::fsync::fdatasync => return fdatasync(fd)\n+      io::fsync::FSync\n+      | io::fsync::FullFSync => return fsync(fd),\n+      io::fsync::FDataSync => return fdatasync(fd)\n     }\n }\n \n #[cfg(target_os = \"macos\")]\n-fn fsync_fd(fd: c_int, level: io::fsync::level) -> c_int {\n+fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n     import libc::consts::os::extra::*;\n     import libc::funcs::posix88::fcntl::*;\n     import libc::funcs::posix01::unistd::*;\n     match level {\n-      io::fsync::fsync => return fsync(fd),\n+      io::fsync::FSync => return fsync(fd),\n       _ => {\n         // According to man fnctl, the ok retval is only specified to be !=-1\n         if (fcntl(F_FULLFSYNC as c_int, fd) == -1 as c_int)\n@@ -305,7 +305,7 @@ fn fsync_fd(fd: c_int, level: io::fsync::level) -> c_int {\n }\n \n #[cfg(target_os = \"freebsd\")]\n-fn fsync_fd(fd: c_int, _l: io::fsync::level) -> c_int {\n+fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n     import libc::funcs::posix01::unistd::*;\n     return fsync(fd);\n }\n@@ -369,10 +369,10 @@ fn dll_filename(base: ~str) -> ~str {\n }\n \n \n-fn self_exe_path() -> option<path> {\n+fn self_exe_path() -> option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n-    fn load_self() -> option<path> {\n+    fn load_self() -> option<Path> {\n         unsafe {\n             import libc::funcs::bsd44::*;\n             import libc::consts::os::extra::*;\n@@ -388,7 +388,7 @@ fn self_exe_path() -> option<path> {\n     }\n \n     #[cfg(target_os = \"linux\")]\n-    fn load_self() -> option<path> {\n+    fn load_self() -> option<Path> {\n         import libc::funcs::posix01::unistd::readlink;\n         do fill_charp_buf() |buf, sz| {\n             do as_c_charp(~\"/proc/self/exe\") |proc_self_buf| {\n@@ -398,7 +398,7 @@ fn self_exe_path() -> option<path> {\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    fn load_self() -> option<path> {\n+    fn load_self() -> option<Path> {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::*;\n         do fill_charp_buf() |buf, sz| {\n@@ -408,7 +408,7 @@ fn self_exe_path() -> option<path> {\n     }\n \n     #[cfg(windows)]\n-    fn load_self() -> option<path> {\n+    fn load_self() -> option<Path> {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::types::os::arch::extra::*;\n         import libc::funcs::extra::kernel32::*;\n@@ -437,7 +437,7 @@ fn self_exe_path() -> option<path> {\n  *\n  * Otherwise, homedir returns option::none.\n  */\n-fn homedir() -> option<path> {\n+fn homedir() -> option<Path> {\n     return match getenv(~\"HOME\") {\n         some(p) => if !str::is_empty(p) {\n           some(p)\n@@ -448,12 +448,12 @@ fn homedir() -> option<path> {\n     };\n \n     #[cfg(unix)]\n-    fn secondary() -> option<path> {\n+    fn secondary() -> option<Path> {\n         none\n     }\n \n     #[cfg(windows)]\n-    fn secondary() -> option<path> {\n+    fn secondary() -> option<Path> {\n         do option::chain(getenv(~\"USERPROFILE\")) |p| {\n             if !str::is_empty(p) {\n                 some(p)\n@@ -465,11 +465,11 @@ fn homedir() -> option<path> {\n }\n \n /// Recursively walk a directory structure\n-fn walk_dir(p: path, f: fn(path) -> bool) {\n+fn walk_dir(p: Path, f: fn(Path) -> bool) {\n \n     walk_dir_(p, f);\n \n-    fn walk_dir_(p: path, f: fn(path) -> bool) -> bool {\n+    fn walk_dir_(p: Path, f: fn(Path) -> bool) -> bool {\n         let mut keepgoing = true;\n         do list_dir(p).each |q| {\n             let path = path::connect(p, q);\n@@ -494,14 +494,14 @@ fn walk_dir(p: path, f: fn(path) -> bool) {\n }\n \n /// Indicates whether a path represents a directory\n-fn path_is_dir(p: path) -> bool {\n+fn path_is_dir(p: Path) -> bool {\n     do str::as_c_str(p) |buf| {\n         rustrt::rust_path_is_dir(buf) != 0 as c_int\n     }\n }\n \n /// Indicates whether a path exists\n-fn path_exists(p: path) -> bool {\n+fn path_exists(p: Path) -> bool {\n     do str::as_c_str(p) |buf| {\n         rustrt::rust_path_exists(buf) != 0 as c_int\n     }\n@@ -519,7 +519,7 @@ fn path_exists(p: path) -> bool {\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n-fn make_absolute(p: path) -> path {\n+fn make_absolute(p: Path) -> Path {\n     if path::path_is_absolute(p) {\n         p\n     } else {\n@@ -529,11 +529,11 @@ fn make_absolute(p: path) -> path {\n \n \n /// Creates a directory at the specified path\n-fn make_dir(p: path, mode: c_int) -> bool {\n+fn make_dir(p: Path, mode: c_int) -> bool {\n     return mkdir(p, mode);\n \n     #[cfg(windows)]\n-    fn mkdir(p: path, _mode: c_int) -> bool {\n+    fn mkdir(p: Path, _mode: c_int) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::types::os::arch::extra::*;\n         import libc::funcs::extra::kernel32::*;\n@@ -546,15 +546,15 @@ fn make_dir(p: path, mode: c_int) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn mkdir(p: path, mode: c_int) -> bool {\n+    fn mkdir(p: Path, mode: c_int) -> bool {\n         do as_c_charp(p) |c| {\n             libc::mkdir(c, mode as mode_t) == (0 as c_int)\n         }\n     }\n }\n \n /// Lists the contents of a directory\n-fn list_dir(p: path) -> ~[~str] {\n+fn list_dir(p: Path) -> ~[~str] {\n \n     #[cfg(unix)]\n     fn star(p: ~str) -> ~str { p }\n@@ -580,7 +580,7 @@ fn list_dir(p: path) -> ~[~str] {\n  *\n  * This version prepends each entry with the directory.\n  */\n-fn list_dir_path(p: path) -> ~[~str] {\n+fn list_dir_path(p: Path) -> ~[~str] {\n     let mut p = p;\n     let pl = str::len(p);\n     if pl == 0u || (p[pl - 1u] as char != path::consts::path_sep\n@@ -591,11 +591,11 @@ fn list_dir_path(p: path) -> ~[~str] {\n }\n \n /// Removes a directory at the specified path\n-fn remove_dir(p: path) -> bool {\n+fn remove_dir(p: Path) -> bool {\n    return rmdir(p);\n \n     #[cfg(windows)]\n-    fn rmdir(p: path) -> bool {\n+    fn rmdir(p: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -606,18 +606,18 @@ fn remove_dir(p: path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn rmdir(p: path) -> bool {\n+    fn rmdir(p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::rmdir(buf) == (0 as c_int)\n         };\n     }\n }\n \n-fn change_dir(p: path) -> bool {\n+fn change_dir(p: Path) -> bool {\n     return chdir(p);\n \n     #[cfg(windows)]\n-    fn chdir(p: path) -> bool {\n+    fn chdir(p: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -628,19 +628,19 @@ fn change_dir(p: path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn chdir(p: path) -> bool {\n+    fn chdir(p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::chdir(buf) == (0 as c_int)\n         };\n     }\n }\n \n /// Copies a file from one location to another\n-fn copy_file(from: path, to: path) -> bool {\n+fn copy_file(from: Path, to: Path) -> bool {\n     return do_copy_file(from, to);\n \n     #[cfg(windows)]\n-    fn do_copy_file(from: path, to: path) -> bool {\n+    fn do_copy_file(from: Path, to: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -653,7 +653,7 @@ fn copy_file(from: path, to: path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn do_copy_file(from: path, to: path) -> bool {\n+    fn do_copy_file(from: Path, to: Path) -> bool {\n         let istream = do as_c_charp(from) |fromp| {\n             do as_c_charp(~\"rb\") |modebuf| {\n                 libc::fopen(fromp, modebuf)\n@@ -699,11 +699,11 @@ fn copy_file(from: path, to: path) -> bool {\n }\n \n /// Deletes an existing file\n-fn remove_file(p: path) -> bool {\n+fn remove_file(p: Path) -> bool {\n     return unlink(p);\n \n     #[cfg(windows)]\n-    fn unlink(p: path) -> bool {\n+    fn unlink(p: Path) -> bool {\n         // FIXME (similar to Issue #2006): remove imports when export globs\n         // work properly.\n         import libc::funcs::extra::kernel32::*;\n@@ -715,7 +715,7 @@ fn remove_file(p: path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn unlink(p: path) -> bool {\n+    fn unlink(p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::unlink(buf) == (0 as c_int)\n         };\n@@ -792,7 +792,7 @@ mod tests {\n \n     fn make_rand_name() -> ~str {\n         import rand;\n-        let rng: rand::rng = rand::rng();\n+        let rng: rand::Rng = rand::rng();\n         let n = ~\"TEST\" + rng.gen_str(10u);\n         assert option::is_none(getenv(n));\n         n"}, {"sha": "12c5dd90ead2e7149bfefadd1d0aec9463417212", "filename": "src/libcore/path.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,6 +1,6 @@\n //! Path data type and helper functions\n \n-export path;\n+export Path;\n export consts;\n export path_is_absolute;\n export path_sep;\n@@ -14,7 +14,7 @@ export normalize;\n \n // FIXME: This type should probably be constrained (#2624)\n /// A path or fragment of a filesystem path\n-type path = ~str;\n+type Path = ~str;\n \n #[cfg(unix)]\n mod consts {\n@@ -45,7 +45,7 @@ mod consts {\n  * on Windows, begins with a drive letter.\n  */\n #[cfg(unix)]\n-fn path_is_absolute(p: path) -> bool {\n+fn path_is_absolute(p: Path) -> bool {\n     str::char_at(p, 0u) == '/'\n }\n \n@@ -60,7 +60,7 @@ fn path_is_absolute(p: ~str) -> bool {\n /// Get the default path separator for the host platform\n fn path_sep() -> ~str { return str::from_char(consts::path_sep); }\n \n-fn split_dirname_basename (pp: path) -> {dirname: ~str, basename: ~str} {\n+fn split_dirname_basename (pp: Path) -> {dirname: ~str, basename: ~str} {\n     match str::rfind(pp, |ch|\n         ch == consts::path_sep || ch == consts::alt_path_sep\n     ) {\n@@ -81,7 +81,7 @@ fn split_dirname_basename (pp: path) -> {dirname: ~str, basename: ~str} {\n  *\n  * If the path is not prefixed with a directory, then \".\" is returned.\n  */\n-fn dirname(pp: path) -> path {\n+fn dirname(pp: Path) -> Path {\n     return split_dirname_basename(pp).dirname;\n }\n \n@@ -94,7 +94,7 @@ fn dirname(pp: path) -> path {\n  * the provided path. If an empty path is provided or the path ends\n  * with a path separator then an empty path is returned.\n  */\n-fn basename(pp: path) -> path {\n+fn basename(pp: Path) -> Path {\n     return split_dirname_basename(pp).basename;\n }\n \n@@ -105,7 +105,7 @@ fn basename(pp: path) -> path {\n  * and any leading path separator on `post`, and returns the concatenation of\n  * the two with a single path separator between them.\n  */\n-fn connect(pre: path, post: path) -> path {\n+fn connect(pre: Path, post: Path) -> Path {\n     let mut pre_ = pre;\n     let mut post_ = post;\n     let sep = consts::path_sep as u8;\n@@ -127,7 +127,7 @@ fn connect(pre: path, post: path) -> path {\n  *\n  * Inserts path separators as needed.\n  */\n-fn connect_many(paths: ~[path]) -> path {\n+fn connect_many(paths: ~[Path]) -> Path {\n     return if vec::len(paths) == 1u {\n         paths[0]\n     } else {\n@@ -144,7 +144,7 @@ fn connect_many(paths: ~[path]) -> path {\n  * the first element of the returned vector will be the drive letter\n  * followed by a colon.\n  */\n-fn split(p: path) -> ~[path] {\n+fn split(p: Path) -> ~[Path] {\n     str::split_nonempty(p, |c| {\n         c == consts::path_sep || c == consts::alt_path_sep\n     })\n@@ -159,7 +159,7 @@ fn split(p: path) -> ~[path] {\n  * ignored.  If the path includes directory components then they are included\n  * in the filename part of the result pair.\n  */\n-fn splitext(p: path) -> (~str, ~str) {\n+fn splitext(p: Path) -> (~str, ~str) {\n     if str::is_empty(p) { (~\"\", ~\"\") }\n     else {\n         let parts = str::split_char(p, '.');\n@@ -212,7 +212,7 @@ fn splitext(p: path) -> (~str, ~str) {\n  * * 'a/b/../../../' becomes '..'\n  * * '/a/b/c/../d/./../../e/' becomes '/a/e/'\n  */\n-fn normalize(p: path) -> path {\n+fn normalize(p: Path) -> Path {\n     let s = split(p);\n     let s = strip_dots(s);\n     let s = rollup_doubledots(s);\n@@ -233,7 +233,7 @@ fn normalize(p: path) -> path {\n \n     return s;\n \n-    fn strip_dots(s: ~[path]) -> ~[path] {\n+    fn strip_dots(s: ~[Path]) -> ~[Path] {\n         vec::filter_map(s, |elem|\n             if elem == ~\".\" {\n                 option::none\n@@ -242,7 +242,7 @@ fn normalize(p: path) -> path {\n             })\n     }\n \n-    fn rollup_doubledots(s: ~[path]) -> ~[path] {\n+    fn rollup_doubledots(s: ~[Path]) -> ~[Path] {\n         if vec::is_empty(s) {\n             return ~[];\n         }\n@@ -271,7 +271,7 @@ fn normalize(p: path) -> path {\n     }\n \n     #[cfg(unix)]\n-    fn reabsolute(orig: path, n: path) -> path {\n+    fn reabsolute(orig: Path, n: Path) -> Path {\n         if path_is_absolute(orig) {\n             path_sep() + n\n         } else {\n@@ -280,15 +280,15 @@ fn normalize(p: path) -> path {\n     }\n \n     #[cfg(windows)]\n-    fn reabsolute(orig: path, newp: path) -> path {\n+    fn reabsolute(orig: Path, newp: Path) -> Path {\n        if path_is_absolute(orig) && orig[0] == consts::path_sep as u8 {\n            str::from_char(consts::path_sep) + newp\n        } else {\n            newp\n        }\n     }\n \n-    fn reterminate(orig: path, newp: path) -> path {\n+    fn reterminate(orig: Path, newp: Path) -> Path {\n         let last = orig[str::len(orig) - 1u];\n         if last == consts::path_sep as u8\n             || last == consts::path_sep as u8 {"}, {"sha": "fa197a365c3bdf6ffaaf5e83fc9924970bde0f6f", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,8 +1,9 @@\n //! Random number generation\n \n-export rng, seed, seeded_rng, weighted, extensions;\n+export Rng, rng, seed, seeded_rng, Weighted, extensions;\n export xorshift, seeded_xorshift;\n \n+#[allow(non_camel_case_types)] // runtime type\n enum rctx {}\n \n #[abi = \"cdecl\"]\n@@ -15,16 +16,16 @@ extern mod rustrt {\n }\n \n /// A random number generator\n-trait rng {\n+trait Rng {\n     /// Return the next random integer\n     fn next() -> u32;\n }\n \n /// A value with a particular weight compared to other values\n-type weighted<T> = { weight: uint, item: T };\n+type Weighted<T> = { weight: uint, item: T };\n \n /// Extension methods for random number generators\n-impl rng {\n+impl Rng {\n \n     /// Return a random int\n     fn gen_int() -> int {\n@@ -181,15 +182,15 @@ impl rng {\n      * Choose an item respecting the relative weights, failing if the sum of\n      * the weights is 0\n      */\n-    fn choose_weighted<T: copy>(v : ~[weighted<T>]) -> T {\n+    fn choose_weighted<T: copy>(v : ~[Weighted<T>]) -> T {\n         self.choose_weighted_option(v).get()\n     }\n \n     /**\n      * Choose some(item) respecting the relative weights, returning none if\n      * the sum of the weights is 0\n      */\n-    fn choose_weighted_option<T:copy>(v: ~[weighted<T>]) -> option<T> {\n+    fn choose_weighted_option<T:copy>(v: ~[Weighted<T>]) -> option<T> {\n         let mut total = 0u;\n         for v.each |item| {\n             total += item.weight;\n@@ -212,7 +213,7 @@ impl rng {\n      * Return a vec containing copies of the items, in order, where\n      * the weight of the item determines how many copies there are\n      */\n-    fn weighted_vec<T:copy>(v: ~[weighted<T>]) -> ~[T] {\n+    fn weighted_vec<T:copy>(v: ~[Weighted<T>]) -> ~[T] {\n         let mut r = ~[];\n         for v.each |item| {\n             for uint::range(0u, item.weight) |_i| {\n@@ -242,13 +243,13 @@ impl rng {\n \n }\n \n-class rand_res {\n+class RandRes {\n     let c: *rctx;\n     new(c: *rctx) { self.c = c; }\n     drop { rustrt::rand_free(self.c); }\n }\n \n-impl @rand_res: rng {\n+impl @RandRes: Rng {\n     fn next() -> u32 { return rustrt::rand_next((*self).c); }\n }\n \n@@ -258,8 +259,8 @@ fn seed() -> ~[u8] {\n }\n \n /// Create a random number generator with a system specified seed\n-fn rng() -> rng {\n-    @rand_res(rustrt::rand_new()) as rng\n+fn rng() -> Rng {\n+    @RandRes(rustrt::rand_new()) as Rng\n }\n \n /**\n@@ -268,18 +269,18 @@ fn rng() -> rng {\n  * all other generators constructed with the same seed. The seed may be any\n  * length.\n  */\n-fn seeded_rng(seed: ~[u8]) -> rng {\n-    @rand_res(rustrt::rand_new_seeded(seed)) as rng\n+fn seeded_rng(seed: ~[u8]) -> Rng {\n+    @RandRes(rustrt::rand_new_seeded(seed)) as Rng\n }\n \n-type xorshift_state = {\n+type XorShiftState = {\n     mut x: u32,\n     mut y: u32,\n     mut z: u32,\n     mut w: u32\n };\n \n-impl xorshift_state: rng {\n+impl XorShiftState: Rng {\n     fn next() -> u32 {\n         let x = self.x;\n         let mut t = x ^ (x << 11);\n@@ -292,13 +293,13 @@ impl xorshift_state: rng {\n     }\n }\n \n-fn xorshift() -> rng {\n+fn xorshift() -> Rng {\n     // constants taken from http://en.wikipedia.org/wiki/Xorshift\n     seeded_xorshift(123456789u32, 362436069u32, 521288629u32, 88675123u32)\n }\n \n-fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> rng {\n-    {mut x: x, mut y: y, mut z: z, mut w: w} as rng\n+fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n+    {mut x: x, mut y: y, mut z: z, mut w: w} as Rng\n }\n \n #[cfg(test)]"}, {"sha": "f754391a50d15204ad79d997d4299ed81c888b57", "filename": "src/libcore/run.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -6,7 +6,7 @@\n import option::{some, none};\n import libc::{pid_t, c_void, c_int};\n \n-export program;\n+export Program;\n export run_program;\n export start_program;\n export program_output;\n@@ -22,18 +22,18 @@ extern mod rustrt {\n }\n \n /// A value representing a child process\n-trait program {\n+trait Program {\n     /// Returns the process id of the program\n     fn get_id() -> pid_t;\n \n     /// Returns an io::writer that can be used to write to stdin\n-    fn input() -> io::writer;\n+    fn input() -> io::Writer;\n \n     /// Returns an io::reader that can be used to read from stdout\n-    fn output() -> io::reader;\n+    fn output() -> io::Reader;\n \n     /// Returns an io::reader that can be used to read from stderr\n-    fn err() -> io::reader;\n+    fn err() -> io::Reader;\n \n     /// Closes the handle to the child processes standard input\n     fn close_input();\n@@ -187,7 +187,7 @@ fn run_program(prog: &str, args: &[~str]) -> int {\n  *\n  * A class with a <program> field\n  */\n-fn start_program(prog: &str, args: &[~str]) -> program {\n+fn start_program(prog: &str, args: &[~str]) -> Program {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -201,41 +201,41 @@ fn start_program(prog: &str, args: &[~str]) -> program {\n     libc::close(pipe_output.out);\n     libc::close(pipe_err.out);\n \n-    type prog_repr = {pid: pid_t,\n-                      mut in_fd: c_int,\n-                      out_file: *libc::FILE,\n-                      err_file: *libc::FILE,\n-                      mut finished: bool};\n+    type ProgRepr = {pid: pid_t,\n+                     mut in_fd: c_int,\n+                     out_file: *libc::FILE,\n+                     err_file: *libc::FILE,\n+                     mut finished: bool};\n \n-    fn close_repr_input(r: &prog_repr) {\n+    fn close_repr_input(r: &ProgRepr) {\n         let invalid_fd = -1i32;\n         if r.in_fd != invalid_fd {\n             libc::close(r.in_fd);\n             r.in_fd = invalid_fd;\n         }\n     }\n-    fn finish_repr(r: &prog_repr) -> int {\n+    fn finish_repr(r: &ProgRepr) -> int {\n         if r.finished { return 0; }\n         r.finished = true;\n         close_repr_input(r);\n         return waitpid(r.pid);\n     }\n-    fn destroy_repr(r: &prog_repr) {\n+    fn destroy_repr(r: &ProgRepr) {\n         finish_repr(r);\n        libc::fclose(r.out_file);\n        libc::fclose(r.err_file);\n     }\n-    class prog_res {\n-        let r: prog_repr;\n-        new(+r: prog_repr) { self.r = r; }\n+    class ProgRes {\n+        let r: ProgRepr;\n+        new(+r: ProgRepr) { self.r = r; }\n         drop { destroy_repr(&self.r); }\n     }\n \n-    impl prog_res: program {\n+    impl ProgRes: Program {\n         fn get_id() -> pid_t { return self.r.pid; }\n-        fn input() -> io::writer { io::fd_writer(self.r.in_fd, false) }\n-        fn output() -> io::reader { io::FILE_reader(self.r.out_file, false) }\n-        fn err() -> io::reader { io::FILE_reader(self.r.err_file, false) }\n+        fn input() -> io::Writer { io::fd_writer(self.r.in_fd, false) }\n+        fn output() -> io::Reader { io::FILE_reader(self.r.out_file, false) }\n+        fn err() -> io::Reader { io::FILE_reader(self.r.err_file, false) }\n         fn close_input() { close_repr_input(&self.r); }\n         fn finish() -> int { finish_repr(&self.r) }\n         fn destroy() { destroy_repr(&self.r); }\n@@ -245,10 +245,10 @@ fn start_program(prog: &str, args: &[~str]) -> program {\n                 out_file: os::fdopen(pipe_output.in),\n                 err_file: os::fdopen(pipe_err.in),\n                 mut finished: false};\n-    return prog_res(move repr) as program;\n+    return ProgRes(move repr) as Program;\n }\n \n-fn read_all(rd: io::reader) -> ~str {\n+fn read_all(rd: io::Reader) -> ~str {\n     let mut buf = ~\"\";\n     while !rd.eof() {\n         let bytes = rd.read_bytes(4096u);\n@@ -326,7 +326,7 @@ fn program_output(prog: &str, args: &[~str]) ->\n }\n \n fn writeclose(fd: c_int, s: &str) {\n-    import io::writer_util;\n+    import io::WriterUtil;\n \n     error!{\"writeclose %d, %s\", fd as int, s};\n     let writer = io::fd_writer(fd, false);\n@@ -392,7 +392,7 @@ fn waitpid(pid: pid_t) -> int {\n #[cfg(test)]\n mod tests {\n \n-    import io::writer_util;\n+    import io::WriterUtil;\n \n     // Regression test for memory leaks\n     #[ignore(cfg(windows))] // FIXME (#2626)"}, {"sha": "181c36932d049b0e80c59253fcc12f7c2810f486", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -8,7 +8,7 @@\n  */\n \n import libc::size_t;\n-import io::writer_util;\n+import io::WriterUtil;\n \n export\n    // Creating a string"}, {"sha": "b22fe2b95820b3e579a1bd1a60737e3337c85f41", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,4 +1,4 @@\n-import io::reader;\n+import io::Reader;\n \n trait to_base64 {\n     fn to_base64() -> ~str;"}, {"sha": "5a58775209354e2c94604eec48898aeaa8e7ca6c", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -172,13 +172,13 @@ fn doc_as_i32(d: doc) -> i32 { doc_as_u32(d) as i32 }\n fn doc_as_i64(d: doc) -> i64 { doc_as_u64(d) as i64 }\n \n // ebml writing\n-type writer_ = {writer: io::writer, mut size_positions: ~[uint]};\n+type writer_ = {writer: io::Writer, mut size_positions: ~[uint]};\n \n enum writer {\n     writer_(writer_)\n }\n \n-fn write_sized_vuint(w: io::writer, n: uint, size: uint) {\n+fn write_sized_vuint(w: io::Writer, n: uint, size: uint) {\n     match size {\n       1u => w.write(&[0x80u8 | (n as u8)]),\n       2u => w.write(&[0x40u8 | ((n >> 8_u) as u8), n as u8]),\n@@ -190,15 +190,15 @@ fn write_sized_vuint(w: io::writer, n: uint, size: uint) {\n     };\n }\n \n-fn write_vuint(w: io::writer, n: uint) {\n+fn write_vuint(w: io::Writer, n: uint) {\n     if n < 0x7f_u { write_sized_vuint(w, n, 1u); return; }\n     if n < 0x4000_u { write_sized_vuint(w, n, 2u); return; }\n     if n < 0x200000_u { write_sized_vuint(w, n, 3u); return; }\n     if n < 0x10000000_u { write_sized_vuint(w, n, 4u); return; }\n     fail fmt!{\"vint to write too big: %?\", n};\n }\n \n-fn writer(w: io::writer) -> writer {\n+fn writer(w: io::Writer) -> writer {\n     let size_positions: ~[uint] = ~[];\n     return writer_({writer: w, mut size_positions: size_positions});\n }\n@@ -220,10 +220,10 @@ impl writer {\n     fn end_tag() {\n         let last_size_pos = vec::pop::<uint>(self.size_positions);\n         let cur_pos = self.writer.tell();\n-        self.writer.seek(last_size_pos as int, io::seek_set);\n+        self.writer.seek(last_size_pos as int, io::SeekSet);\n         let size = (cur_pos - last_size_pos - 4u);\n         write_sized_vuint(self.writer, size, 4u);\n-        self.writer.seek(cur_pos as int, io::seek_set);\n+        self.writer.seek(cur_pos as int, io::SeekSet);\n \n         debug!{\"End tag (size = %u)\", size};\n     }"}, {"sha": "715062a06c9eb15f393c85e865d34569e168371f", "filename": "src/libstd/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -5,7 +5,7 @@\n \n import result::{result, ok, err};\n import io;\n-import io::writer_util;\n+import io::WriterUtil;\n import map;\n import map::hashmap;\n import map::map;\n@@ -43,7 +43,7 @@ type error = {\n };\n \n /// Serializes a json value into a io::writer\n-fn to_writer(wr: io::writer, j: json) {\n+fn to_writer(wr: io::Writer, j: json) {\n     match j {\n       num(n) => wr.write_str(float::to_str(n, 6u)),\n       string(s) => wr.write_str(escape_str(*s)),\n@@ -109,7 +109,7 @@ fn to_str(j: json) -> ~str {\n }\n \n type parser_ = {\n-    rdr: io::reader,\n+    rdr: io::Reader,\n     mut ch: char,\n     mut line: uint,\n     mut col: uint,\n@@ -458,7 +458,7 @@ impl parser {\n }\n \n /// Deserializes a json value from an io::reader\n-fn from_reader(rdr: io::reader) -> result<json, error> {\n+fn from_reader(rdr: io::Reader) -> result<json, error> {\n     let parser = parser_({\n         rdr: rdr,\n         mut ch: rdr.read_char(),"}, {"sha": "e6f44d76b4ce5da8d98743d218beff3ca308f94b", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -2,7 +2,7 @@\n \n #[warn(deprecated_mode)];\n \n-import io::writer_util;\n+import io::WriterUtil;\n import to_str::ToStr;\n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n export box_str_hash;\n@@ -328,7 +328,7 @@ mod chained {\n     }\n \n     impl<K: copy ToStr, V: ToStr copy> t<K, V>: ToStr {\n-        fn to_writer(wr: io::writer) {\n+        fn to_writer(wr: io::Writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");\n                 return;"}, {"sha": "b07c2fdfda72e5c9dd0f562fce0ab8b30cfdd5ea", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -8,7 +8,7 @@ import future_spawn = future::spawn;\n // should be able to, but can't atm, replace w/ result::{result, extensions};\n import result::*;\n import libc::size_t;\n-import io::{reader, writer};\n+import io::{Reader, Writer};\n \n // tcp interfaces\n export tcp_socket;\n@@ -752,7 +752,7 @@ impl tcp_socket {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl @tcp_socket_buf: io::reader {\n+impl @tcp_socket_buf: io::Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         // Loop until our buffer has enough data in it for us to read from.\n         while self.data.buf.len() < len {\n@@ -795,7 +795,7 @@ impl @tcp_socket_buf: io::reader {\n     fn eof() -> bool {\n         false // noop\n     }\n-    fn seek(dist: int, seek: io::seek_style) {\n+    fn seek(dist: int, seek: io::SeekStyle) {\n         log(debug, fmt!{\"tcp_socket_buf seek stub %? %?\", dist, seek});\n         // noop\n     }\n@@ -805,7 +805,7 @@ impl @tcp_socket_buf: io::reader {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl @tcp_socket_buf: io::writer {\n+impl @tcp_socket_buf: io::Writer {\n     fn write(data: &[const u8]) unsafe {\n         let socket_data_ptr =\n             ptr::addr_of(*((*(self.data)).sock).socket_data);\n@@ -817,7 +817,7 @@ impl @tcp_socket_buf: io::writer {\n                              err_data.err_name, err_data.err_msg});\n         }\n     }\n-    fn seek(dist: int, seek: io::seek_style) {\n+    fn seek(dist: int, seek: io::SeekStyle) {\n       log(debug, fmt!{\"tcp_socket_buf seek stub %? %?\", dist, seek});\n         // noop\n     }\n@@ -827,8 +827,8 @@ impl @tcp_socket_buf: io::writer {\n     fn flush() -> int {\n         0\n     }\n-    fn get_type() -> io::writer_type {\n-        io::file\n+    fn get_type() -> io::WriterType {\n+        io::File\n     }\n }\n \n@@ -1441,11 +1441,11 @@ mod test {\n             assert false;\n         }\n         let sock_buf = @socket_buf(result::unwrap(conn_result));\n-        buf_write(sock_buf as io::writer, expected_req);\n+        buf_write(sock_buf as io::Writer, expected_req);\n \n         // so contrived!\n         let actual_resp = do str::as_bytes(expected_resp) |resp_buf| {\n-            buf_read(sock_buf as io::reader,\n+            buf_read(sock_buf as io::Reader,\n                      vec::len(resp_buf))\n         };\n \n@@ -1458,7 +1458,7 @@ mod test {\n         assert str::contains(actual_resp, expected_resp);\n     }\n \n-    fn buf_write(+w: io::writer, val: ~str) {\n+    fn buf_write(+w: io::Writer, val: ~str) {\n         log(debug, fmt!{\"BUF_WRITE: val len %?\", str::len(val)});\n         do str::byte_slice(val) |b_slice| {\n             log(debug, fmt!{\"BUF_WRITE: b_slice len %?\",\n@@ -1467,7 +1467,7 @@ mod test {\n         }\n     }\n \n-    fn buf_read(+r: io::reader, len: uint) -> ~str {\n+    fn buf_read(+r: io::Reader, len: uint) -> ~str {\n         let new_bytes = r.read_bytes(len);\n         log(debug, fmt!{\"in buf_read.. new_bytes len: %?\",\n                         vec::len(new_bytes)});"}, {"sha": "927fe75b1a93878a5961909a9ecd67e9f5569d50", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -2,7 +2,7 @@\n \n import map;\n import map::{hashmap, str_hash};\n-import io::reader;\n+import io::Reader;\n import dvec::dvec;\n \n export url, userinfo, query;"}, {"sha": "49fe0f4c0bf4bd0cd4cbf0032f9ed28ddcba472f", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,8 +1,8 @@\n-import io::writer;\n-import io::writer_util;\n+import io::Writer;\n+import io::WriterUtil;\n import serialization::serializer;\n \n-impl writer: serializer {\n+impl Writer: serializer {\n     fn emit_nil() {\n         self.write_str(~\"()\")\n     }"}, {"sha": "be18915128787b54947e776fd958ad57aa11b9d6", "filename": "src/libstd/term.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -23,10 +23,10 @@ const color_bright_magenta: u8 = 13u8;\n const color_bright_cyan: u8 = 14u8;\n const color_bright_white: u8 = 15u8;\n \n-fn esc(writer: io::writer) { writer.write(~[0x1bu8, '[' as u8]); }\n+fn esc(writer: io::Writer) { writer.write(~[0x1bu8, '[' as u8]); }\n \n /// Reset the foreground and background colors to default\n-fn reset(writer: io::writer) {\n+fn reset(writer: io::Writer) {\n     esc(writer);\n     writer.write(~['0' as u8, 'm' as u8]);\n }\n@@ -46,7 +46,7 @@ fn color_supported() -> bool {\n         };\n }\n \n-fn set_color(writer: io::writer, first_char: u8, color: u8) {\n+fn set_color(writer: io::Writer, first_char: u8, color: u8) {\n     assert (color < 16u8);\n     esc(writer);\n     let mut color = color;\n@@ -55,12 +55,12 @@ fn set_color(writer: io::writer, first_char: u8, color: u8) {\n }\n \n /// Set the foreground color\n-fn fg(writer: io::writer, color: u8) {\n+fn fg(writer: io::Writer, color: u8) {\n     return set_color(writer, '3' as u8, color);\n }\n \n /// Set the background color\n-fn bg(writer: io::writer, color: u8) {\n+fn bg(writer: io::Writer, color: u8) {\n     return set_color(writer, '4' as u8, color);\n }\n "}, {"sha": "9d33431f0003fbbe85277e2eedbc855aad116b2d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -7,7 +7,7 @@\n \n import either::either;\n import result::{ok, err};\n-import io::writer_util;\n+import io::WriterUtil;\n import libc::size_t;\n import task::task_builder;\n \n@@ -91,8 +91,8 @@ fn parse_opts(args: ~[~str]) -> opt_res {\n enum test_result { tr_ok, tr_failed, tr_ignored, }\n \n type console_test_state =\n-    @{out: io::writer,\n-      log_out: option<io::writer>,\n+    @{out: io::Writer,\n+      log_out: option<io::Writer>,\n       use_color: bool,\n       mut total: uint,\n       mut passed: uint,\n@@ -141,7 +141,7 @@ fn run_tests_console(opts: test_opts,\n \n     let log_out = match opts.logfile {\n         some(path) => match io::file_writer(path,\n-                                            ~[io::create, io::truncate]) {\n+                                            ~[io::Create, io::Truncate]) {\n           result::ok(w) => some(w),\n           result::err(s) => {\n               fail(fmt!{\"can't open output file: %s\", s})\n@@ -179,7 +179,7 @@ fn run_tests_console(opts: test_opts,\n \n     return success;\n \n-    fn write_log(out: io::writer, result: test_result, test: test_desc) {\n+    fn write_log(out: io::Writer, result: test_result, test: test_desc) {\n         out.write_line(fmt!{\"%s %s\",\n                     match result {\n                         tr_ok => ~\"ok\",\n@@ -188,19 +188,19 @@ fn run_tests_console(opts: test_opts,\n                     }, test.name});\n     }\n \n-    fn write_ok(out: io::writer, use_color: bool) {\n+    fn write_ok(out: io::Writer, use_color: bool) {\n         write_pretty(out, ~\"ok\", term::color_green, use_color);\n     }\n \n-    fn write_failed(out: io::writer, use_color: bool) {\n+    fn write_failed(out: io::Writer, use_color: bool) {\n         write_pretty(out, ~\"FAILED\", term::color_red, use_color);\n     }\n \n-    fn write_ignored(out: io::writer, use_color: bool) {\n+    fn write_ignored(out: io::Writer, use_color: bool) {\n         write_pretty(out, ~\"ignored\", term::color_yellow, use_color);\n     }\n \n-    fn write_pretty(out: io::writer, word: ~str, color: u8, use_color: bool) {\n+    fn write_pretty(out: io::Writer, word: ~str, color: u8, use_color: bool) {\n         if use_color && term::color_supported() {\n             term::fg(out, color);\n         }"}, {"sha": "47dbff2ccb154031053158353e070ca1b6c4edda", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,5 +1,5 @@\n import libc::{c_char, c_int, c_long, size_t, time_t};\n-import io::reader;\n+import io::Reader;\n import result::{result, ok, err};\n \n export"}, {"sha": "38c8131147cdc86d046ddc64e7ea5234deb9afe9", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,5 +1,5 @@\n import std::term;\n-import io::writer_util;\n+import io::WriterUtil;\n import codemap::span;\n \n export emitter, emit;\n@@ -166,7 +166,7 @@ fn diagnosticcolor(lvl: level) -> u8 {\n \n fn print_diagnostic(topic: ~str, lvl: level, msg: ~str) {\n     let use_color = term::color_supported() &&\n-        io::stderr().get_type() == io::screen;\n+        io::stderr().get_type() == io::Screen;\n     if str::is_not_empty(topic) {\n         io::stderr().write_str(fmt!{\"%s \", topic});\n     }"}, {"sha": "4ab3bb29045d71362f24cd1adb71b9c8bda35318", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,5 +1,5 @@\n import base::*;\n-import io::writer_util;\n+import io::WriterUtil;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n     -> base::mac_result {"}, {"sha": "8664277bcdcba859e3c7371e2f3b0072295cc22d", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -99,7 +99,7 @@ fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     }\n }\n \n-fn res_rel_file(cx: ext_ctxt, sp: codemap::span, +arg: path) -> path {\n+fn res_rel_file(cx: ext_ctxt, sp: codemap::span, +arg: Path) -> Path {\n     // NB: relative paths are resolved relative to the compilation unit\n     if !path::path_is_absolute(arg) {\n         let cu = codemap::span_to_filename(sp, cx.codemap());"}, {"sha": "2da34539321ec5125ecc672269bedea6aefd8a8a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -273,7 +273,7 @@ type lit = {lit: ~str, pos: uint};\n \n fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n                                 path: ~str,\n-                                srdr: io::reader) ->\n+                                srdr: io::Reader) ->\n    {cmnts: ~[cmnt], lits: ~[lit]} {\n     let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<@~str>("}, {"sha": "0d81d40ca8c6dbb65c2aba02c9dc7f89a785347b", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,4 +1,4 @@\n-import io::writer_util;\n+import io::WriterUtil;\n import dvec::dvec;\n \n /*\n@@ -95,7 +95,7 @@ type print_stack_elt = {offset: int, pbreak: print_stack_break};\n \n const size_infinity: int = 0xffff;\n \n-fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n+fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n     let n: uint = 3u * linewidth;\n@@ -201,7 +201,7 @@ fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n  * called 'print'.\n  */\n type printer_ = {\n-    out: io::writer,\n+    out: io::Writer,\n     buf_len: uint,\n     mut margin: int, // width of lines we're constrained to\n     mut space: int, // number of spaces left on line"}, {"sha": "05b6ca8c5049f2a60a1d143ee0b746804d509561", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -48,7 +48,7 @@ fn end(s: ps) {\n     pp::end(s.s);\n }\n \n-fn rust_printer(writer: io::writer) -> ps {\n+fn rust_printer(writer: io::Writer) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n              cm: none::<codemap>,\n              intr: @interner::mk::<@~str>(|x| str::hash(*x),\n@@ -61,7 +61,7 @@ fn rust_printer(writer: io::writer) -> ps {\n              ann: no_ann()};\n }\n \n-fn unexpanded_rust_printer(writer: io::writer, intr: ident_interner) -> ps {\n+fn unexpanded_rust_printer(writer: io::Writer, intr: ident_interner) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n              cm: none::<codemap>,\n              intr: intr,\n@@ -83,8 +83,8 @@ const default_columns: uint = 78u;\n // copy forward.\n fn print_crate(cm: codemap, intr: @interner::interner<@~str>,\n                span_diagnostic: diagnostic::span_handler,\n-               crate: @ast::crate, filename: ~str, in: io::reader,\n-               out: io::writer, ann: pp_ann, is_expanded: bool) {\n+               crate: @ast::crate, filename: ~str, in: io::Reader,\n+               out: io::Writer, ann: pp_ann, is_expanded: bool) {\n     let r = comments::gather_comments_and_literals(span_diagnostic,\n                                                    filename, in);\n     let s ="}, {"sha": "8ac75916da0e651a8e63d22c4f9fbf436493196e", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -15,7 +15,7 @@ import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n         FileType};\n import metadata::filesearch;\n import syntax::ast_map::{path, path_mod, path_name};\n-import io::{writer, writer_util};\n+import io::{Writer, WriterUtil};\n \n enum output_type {\n     output_type_none,"}, {"sha": "85975897facaf92ca2fa2d91f34444ddfa5a4006", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -36,7 +36,7 @@ fn get_rpath_flags(sess: session::session, out_filename: ~str) -> ~[~str] {\n     rpaths_to_flags(rpaths)\n }\n \n-fn get_sysroot_absolute_rt_lib(sess: session::session) -> path::path {\n+fn get_sysroot_absolute_rt_lib(sess: session::session) -> path::Path {\n     let mut path = vec::append(~[sess.filesearch.sysroot()],\n                            filesearch::relative_target_lib_path(\n                                sess.opts.target_triple));\n@@ -48,8 +48,8 @@ fn rpaths_to_flags(rpaths: ~[~str]) -> ~[~str] {\n     vec::map(rpaths, |rpath| fmt!{\"-Wl,-rpath,%s\",rpath} )\n }\n \n-fn get_rpaths(os: session::os, cwd: path::path, sysroot: path::path,\n-              output: path::path, libs: ~[path::path],\n+fn get_rpaths(os: session::os, cwd: path::Path, sysroot: path::Path,\n+              output: path::Path, libs: ~[path::Path],\n               target_triple: ~str) -> ~[~str] {\n     debug!{\"cwd: %s\", cwd};\n     debug!{\"sysroot: %s\", sysroot};\n@@ -93,18 +93,18 @@ fn get_rpaths(os: session::os, cwd: path::path, sysroot: path::path,\n }\n \n fn get_rpaths_relative_to_output(os: session::os,\n-                                 cwd: path::path,\n-                                 output: path::path,\n-                                 libs: ~[path::path]) -> ~[~str] {\n+                                 cwd: path::Path,\n+                                 output: path::Path,\n+                                 libs: ~[path::Path]) -> ~[~str] {\n     vec::map(libs, |a| {\n         get_rpath_relative_to_output(os, cwd, output, a)\n     })\n }\n \n fn get_rpath_relative_to_output(os: session::os,\n-                                cwd: path::path,\n-                                output: path::path,\n-                                &&lib: path::path) -> ~str {\n+                                cwd: path::Path,\n+                                output: path::Path,\n+                                &&lib: path::Path) -> ~str {\n     assert not_win32(os);\n \n     // Mac doesn't appear to support $ORIGIN\n@@ -121,7 +121,7 @@ fn get_rpath_relative_to_output(os: session::os,\n }\n \n // Find the relative path from one file to another\n-fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n+fn get_relative_to(abs1: path::Path, abs2: path::Path) -> path::Path {\n     assert path::path_is_absolute(abs1);\n     assert path::path_is_absolute(abs2);\n     debug!{\"finding relative path from %s to %s\",\n@@ -154,23 +154,23 @@ fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n     }\n }\n \n-fn get_absolute_rpaths(cwd: path::path, libs: ~[path::path]) -> ~[~str] {\n+fn get_absolute_rpaths(cwd: path::Path, libs: ~[path::Path]) -> ~[~str] {\n     vec::map(libs, |a| get_absolute_rpath(cwd, a) )\n }\n \n-fn get_absolute_rpath(cwd: path::path, &&lib: path::path) -> ~str {\n+fn get_absolute_rpath(cwd: path::Path, &&lib: path::Path) -> ~str {\n     path::dirname(get_absolute(cwd, lib))\n }\n \n-fn get_absolute(cwd: path::path, lib: path::path) -> path::path {\n+fn get_absolute(cwd: path::Path, lib: path::Path) -> path::Path {\n     if path::path_is_absolute(lib) {\n         lib\n     } else {\n         path::connect(cwd, lib)\n     }\n }\n \n-fn get_install_prefix_rpath(cwd: path::path, target_triple: ~str) -> ~str {\n+fn get_install_prefix_rpath(cwd: path::Path, target_triple: ~str) -> ~str {\n     let install_prefix = env!{\"CFG_PREFIX\"};\n \n     if install_prefix == ~\"\" {"}, {"sha": "5f21d46adc965a485cf5059c00f90a89ff342849", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -10,7 +10,7 @@ import util::ppaux;\n import back::link;\n import result::{ok, err};\n import std::getopts;\n-import io::writer_util;\n+import io::WriterUtil;\n import getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::{x86, x86_64};\n import std::map::hashmap;\n@@ -701,7 +701,7 @@ fn early_error(emitter: diagnostic::emitter, msg: ~str) -> ! {\n     fail;\n }\n \n-fn list_metadata(sess: session, path: ~str, out: io::writer) {\n+fn list_metadata(sess: session, path: ~str, out: io::Writer) {\n     metadata::loader::list_file_metadata(\n         session::sess_os_to_meta_os(sess.targ_cfg.os), path, out);\n }"}, {"sha": "d6d9b2701e4c93c8bf7292a8091ad03b32555640", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -3,7 +3,7 @@\n import std::{ebml, map};\n import std::map::{hashmap, str_hash};\n import dvec::dvec;\n-import io::writer_util;\n+import io::WriterUtil;\n import syntax::{ast, ast_util};\n import syntax::attr;\n import middle::ty;\n@@ -846,13 +846,13 @@ fn get_attributes(md: ebml::doc) -> ~[ast::attribute] {\n     return attrs;\n }\n \n-fn list_meta_items(meta_items: ebml::doc, out: io::writer) {\n+fn list_meta_items(meta_items: ebml::doc, out: io::Writer) {\n     for get_meta_items(meta_items).each |mi| {\n         out.write_str(fmt!{\"%s\\n\", pprust::meta_item_to_str(*mi)});\n     }\n }\n \n-fn list_crate_attributes(md: ebml::doc, hash: @~str, out: io::writer) {\n+fn list_crate_attributes(md: ebml::doc, hash: @~str, out: io::Writer) {\n     out.write_str(fmt!{\"=Crate Attributes (%s)=\\n\", *hash});\n \n     for get_attributes(md).each |attr| {\n@@ -887,7 +887,7 @@ fn get_crate_deps(data: @~[u8]) -> ~[crate_dep] {\n     return deps;\n }\n \n-fn list_crate_deps(data: @~[u8], out: io::writer) {\n+fn list_crate_deps(data: @~[u8], out: io::Writer) {\n     out.write_str(~\"=External Dependencies=\\n\");\n \n     for get_crate_deps(data).each |dep| {\n@@ -913,7 +913,7 @@ fn get_crate_vers(data: @~[u8]) -> @~str {\n     };\n }\n \n-fn list_crate_items(bytes: @~[u8], md: ebml::doc, out: io::writer) {\n+fn list_crate_items(bytes: @~[u8], md: ebml::doc, out: io::Writer) {\n     out.write_str(~\"=Items=\\n\");\n     let items = ebml::get_doc(md, tag_items);\n     do iter_crate_items(bytes) |tag, path, did| {\n@@ -969,7 +969,7 @@ fn get_crate_module_paths(bytes: @~[u8]) -> ~[(ast::def_id, ~str)] {\n     }\n }\n \n-fn list_crate_metadata(bytes: @~[u8], out: io::writer) {\n+fn list_crate_metadata(bytes: @~[u8], out: io::Writer) {\n     let hash = get_crate_hash(bytes);\n     let md = ebml::doc(bytes);\n     list_crate_attributes(md, hash, out);"}, {"sha": "7d006369359d0d2cd6703450ddb2dc89b80d495a", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -4,7 +4,7 @@ import util::ppaux::ty_to_str;\n \n import std::{ebml, map};\n import std::map::hashmap;\n-import io::writer_util;\n+import io::WriterUtil;\n import ebml::writer;\n import syntax::ast::*;\n import syntax::print::pprust;\n@@ -1005,7 +1005,7 @@ fn create_index<T: copy>(index: ~[entry<T>], hash_fn: fn@(T) -> uint) ->\n }\n \n fn encode_index<T>(ebml_w: ebml::writer, buckets: ~[@~[entry<T>]],\n-                   write_fn: fn(io::writer, T)) {\n+                   write_fn: fn(io::Writer, T)) {\n     let writer = ebml_w.writer;\n     ebml_w.start_tag(tag_index);\n     let mut bucket_locs: ~[uint] = ~[];\n@@ -1032,9 +1032,9 @@ fn encode_index<T>(ebml_w: ebml::writer, buckets: ~[@~[entry<T>]],\n     ebml_w.end_tag();\n }\n \n-fn write_str(writer: io::writer, &&s: ~str) { writer.write_str(s); }\n+fn write_str(writer: io::Writer, &&s: ~str) { writer.write_str(s); }\n \n-fn write_int(writer: io::writer, &&n: int) {\n+fn write_int(writer: io::Writer, &&n: int) {\n     assert n < 0x7fff_ffff;\n     writer.write_be_u32(n as u32);\n }"}, {"sha": "24e6d3267cc02aa736ca53d12fda5790dc304036", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -14,31 +14,31 @@ export get_cargo_root;\n export get_cargo_root_nearest;\n export libdir;\n \n-import path::path;\n+import path::Path;\n \n-type pick<T> = fn(path: path) -> option<T>;\n+type pick<T> = fn(path: Path) -> option<T>;\n \n-fn pick_file(file: path, path: path) -> option<path> {\n+fn pick_file(file: Path, path: Path) -> option<Path> {\n     if path::basename(path) == file { option::some(path) }\n     else { option::none }\n }\n \n trait filesearch {\n-    fn sysroot() -> path;\n-    fn lib_search_paths() -> ~[path];\n-    fn get_target_lib_path() -> path;\n-    fn get_target_lib_file_path(file: path) -> path;\n+    fn sysroot() -> Path;\n+    fn lib_search_paths() -> ~[Path];\n+    fn get_target_lib_path() -> Path;\n+    fn get_target_lib_file_path(file: Path) -> Path;\n }\n \n-fn mk_filesearch(maybe_sysroot: option<path>,\n+fn mk_filesearch(maybe_sysroot: option<Path>,\n                  target_triple: ~str,\n-                 addl_lib_search_paths: ~[path]) -> filesearch {\n-    type filesearch_impl = {sysroot: path,\n-                            addl_lib_search_paths: ~[path],\n+                 addl_lib_search_paths: ~[Path]) -> filesearch {\n+    type filesearch_impl = {sysroot: Path,\n+                            addl_lib_search_paths: ~[Path],\n                             target_triple: ~str};\n     impl filesearch_impl: filesearch {\n-        fn sysroot() -> path { self.sysroot }\n-        fn lib_search_paths() -> ~[path] {\n+        fn sysroot() -> Path { self.sysroot }\n+        fn lib_search_paths() -> ~[Path] {\n             let mut paths = self.addl_lib_search_paths;\n \n             vec::push(paths,\n@@ -53,10 +53,10 @@ fn mk_filesearch(maybe_sysroot: option<path>,\n             }\n             paths\n         }\n-        fn get_target_lib_path() -> path {\n+        fn get_target_lib_path() -> Path {\n             make_target_lib_path(self.sysroot, self.target_triple)\n         }\n-        fn get_target_lib_file_path(file: path) -> path {\n+        fn get_target_lib_file_path(file: Path) -> Path {\n             path::connect(self.get_target_lib_path(), file)\n         }\n     }\n@@ -88,38 +88,38 @@ fn search<T: copy>(filesearch: filesearch, pick: pick<T>) -> option<T> {\n     return rslt;\n }\n \n-fn relative_target_lib_path(target_triple: ~str) -> ~[path] {\n+fn relative_target_lib_path(target_triple: ~str) -> ~[Path] {\n     ~[libdir(), ~\"rustc\", target_triple, libdir()]\n }\n \n-fn make_target_lib_path(sysroot: path,\n-                        target_triple: ~str) -> path {\n+fn make_target_lib_path(sysroot: Path,\n+                        target_triple: ~str) -> Path {\n     let path = vec::append(~[sysroot],\n                            relative_target_lib_path(target_triple));\n     let path = path::connect_many(path);\n     return path;\n }\n \n-fn get_default_sysroot() -> path {\n+fn get_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::some(p) => path::normalize(path::connect(p, ~\"..\")),\n       option::none => fail ~\"can't determine value for sysroot\"\n     }\n }\n \n-fn get_sysroot(maybe_sysroot: option<path>) -> path {\n+fn get_sysroot(maybe_sysroot: option<Path>) -> Path {\n     match maybe_sysroot {\n       option::some(sr) => sr,\n       option::none => get_default_sysroot()\n     }\n }\n \n-fn get_cargo_sysroot() -> result<path, ~str> {\n+fn get_cargo_sysroot() -> result<Path, ~str> {\n     let path = ~[get_default_sysroot(), libdir(), ~\"cargo\"];\n     result::ok(path::connect_many(path))\n }\n \n-fn get_cargo_root() -> result<path, ~str> {\n+fn get_cargo_root() -> result<Path, ~str> {\n     match os::getenv(~\"CARGO_ROOT\") {\n         some(_p) => result::ok(_p),\n         none => match os::homedir() {\n@@ -129,7 +129,7 @@ fn get_cargo_root() -> result<path, ~str> {\n     }\n }\n \n-fn get_cargo_root_nearest() -> result<path, ~str> {\n+fn get_cargo_root_nearest() -> result<Path, ~str> {\n     do result::chain(get_cargo_root()) |p| {\n         let cwd = os::getcwd();\n         let mut dirname = path::dirname(cwd);\n@@ -153,13 +153,13 @@ fn get_cargo_root_nearest() -> result<path, ~str> {\n     }\n }\n \n-fn get_cargo_lib_path() -> result<path, ~str> {\n+fn get_cargo_lib_path() -> result<Path, ~str> {\n     do result::chain(get_cargo_root()) |p| {\n         result::ok(path::connect(p, libdir()))\n     }\n }\n \n-fn get_cargo_lib_path_nearest() -> result<path, ~str> {\n+fn get_cargo_lib_path_nearest() -> result<Path, ~str> {\n     do result::chain(get_cargo_root_nearest()) |p| {\n         result::ok(path::connect(p, libdir()))\n     }"}, {"sha": "d1e24642927edc3e94f1e93182b6344e620f841d", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -6,7 +6,7 @@ import syntax::print::pprust;\n import syntax::codemap::span;\n import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n import filesearch::filesearch;\n-import io::writer_util;\n+import io::WriterUtil;\n \n export os;\n export os_macos, os_win32, os_linux, os_freebsd;\n@@ -206,7 +206,7 @@ fn meta_section_name(os: os) -> ~str {\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-fn list_file_metadata(os: os, path: ~str, out: io::writer) {\n+fn list_file_metadata(os: os, path: ~str, out: io::Writer) {\n     match get_metadata_section(os, path) {\n       option::some(bytes) => decoder::list_crate_metadata(bytes, out),\n       option::none => {"}, {"sha": "f26ccff18069ac7c87e6c9f150d0359191f8f3d5", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,6 +1,6 @@\n // Type encoding\n \n-import io::writer_util;\n+import io::WriterUtil;\n import std::map::hashmap;\n import syntax::ast::*;\n import syntax::diagnostic::span_handler;\n@@ -40,7 +40,7 @@ fn cx_uses_abbrevs(cx: @ctxt) -> bool {\n     }\n }\n \n-fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n+fn enc_ty(w: io::Writer, cx: @ctxt, t: ty::t) {\n     match cx.abbrevs {\n       ac_no_abbrevs => {\n         let result_str = match cx.tcx.short_names_cache.find(t) {\n@@ -95,7 +95,7 @@ fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n       }\n     }\n }\n-fn enc_mt(w: io::writer, cx: @ctxt, mt: ty::mt) {\n+fn enc_mt(w: io::Writer, cx: @ctxt, mt: ty::mt) {\n     match mt.mutbl {\n       m_imm => (),\n       m_mutbl => w.write_char('m'),\n@@ -104,7 +104,7 @@ fn enc_mt(w: io::writer, cx: @ctxt, mt: ty::mt) {\n     enc_ty(w, cx, mt.ty);\n }\n \n-fn enc_opt<T>(w: io::writer, t: option<T>, enc_f: fn(T)) {\n+fn enc_opt<T>(w: io::Writer, t: option<T>, enc_f: fn(T)) {\n     match t {\n       none => w.write_char('n'),\n       some(v) => {\n@@ -114,15 +114,15 @@ fn enc_opt<T>(w: io::writer, t: option<T>, enc_f: fn(T)) {\n     }\n }\n \n-fn enc_substs(w: io::writer, cx: @ctxt, substs: ty::substs) {\n+fn enc_substs(w: io::Writer, cx: @ctxt, substs: ty::substs) {\n     do enc_opt(w, substs.self_r) |r| { enc_region(w, cx, r) }\n     do enc_opt(w, substs.self_ty) |t| { enc_ty(w, cx, t) }\n     w.write_char('[');\n     for substs.tps.each |t| { enc_ty(w, cx, t); }\n     w.write_char(']');\n }\n \n-fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n+fn enc_region(w: io::Writer, cx: @ctxt, r: ty::region) {\n     match r {\n       ty::re_bound(br) => {\n         w.write_char('b');\n@@ -151,7 +151,7 @@ fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n     }\n }\n \n-fn enc_bound_region(w: io::writer, br: ty::bound_region) {\n+fn enc_bound_region(w: io::Writer, br: ty::bound_region) {\n     match br {\n       ty::br_self => w.write_char('s'),\n       ty::br_anon => w.write_char('a'),\n@@ -169,7 +169,7 @@ fn enc_bound_region(w: io::writer, br: ty::bound_region) {\n     }\n }\n \n-fn enc_vstore(w: io::writer, cx: @ctxt, v: ty::vstore) {\n+fn enc_vstore(w: io::Writer, cx: @ctxt, v: ty::vstore) {\n     w.write_char('/');\n     match v {\n       ty::vstore_fixed(u) => {\n@@ -189,7 +189,7 @@ fn enc_vstore(w: io::writer, cx: @ctxt, v: ty::vstore) {\n     }\n }\n \n-fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n+fn enc_sty(w: io::Writer, cx: @ctxt, st: ty::sty) {\n     match st {\n       ty::ty_nil => w.write_char('n'),\n       ty::ty_bot => w.write_char('z'),\n@@ -307,7 +307,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n     }\n }\n \n-fn enc_proto(w: io::writer, cx: @ctxt, proto: ty::fn_proto) {\n+fn enc_proto(w: io::Writer, cx: @ctxt, proto: ty::fn_proto) {\n     w.write_str(&\"f\");\n     match proto {\n         ty::proto_bare => w.write_str(&\"n\"),\n@@ -318,7 +318,7 @@ fn enc_proto(w: io::writer, cx: @ctxt, proto: ty::fn_proto) {\n     }\n }\n \n-fn enc_mode(w: io::writer, cx: @ctxt, m: mode) {\n+fn enc_mode(w: io::Writer, cx: @ctxt, m: mode) {\n     match ty::resolved_mode(cx.tcx, m) {\n       by_mutbl_ref => w.write_char('&'),\n       by_move => w.write_char('-'),\n@@ -328,7 +328,7 @@ fn enc_mode(w: io::writer, cx: @ctxt, m: mode) {\n     }\n }\n \n-fn enc_purity(w: io::writer, p: purity) {\n+fn enc_purity(w: io::Writer, p: purity) {\n     match p {\n       pure_fn => w.write_char('p'),\n       impure_fn => w.write_char('i'),\n@@ -337,7 +337,7 @@ fn enc_purity(w: io::writer, p: purity) {\n     }\n }\n \n-fn enc_ty_fn(w: io::writer, cx: @ctxt, ft: ty::fn_ty) {\n+fn enc_ty_fn(w: io::Writer, cx: @ctxt, ft: ty::fn_ty) {\n     enc_proto(w, cx, ft.proto);\n     enc_purity(w, ft.purity);\n     enc_bounds(w, cx, ft.bounds);\n@@ -353,7 +353,7 @@ fn enc_ty_fn(w: io::writer, cx: @ctxt, ft: ty::fn_ty) {\n     }\n }\n \n-fn enc_bounds(w: io::writer, cx: @ctxt, bs: @~[ty::param_bound]) {\n+fn enc_bounds(w: io::Writer, cx: @ctxt, bs: @~[ty::param_bound]) {\n     for vec::each(*bs) |bound| {\n         match bound {\n           ty::bound_send => w.write_char('S'),"}, {"sha": "ca4a5866a0aa9d9c538c41069beb386754039a6e", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -6,7 +6,7 @@ import syntax::attr;\n import syntax::codemap::span;\n import std::map::{map,hashmap,int_hash,hash_from_strs};\n import std::smallintmap::{map,smallintmap};\n-import io::writer_util;\n+import io::WriterUtil;\n import util::ppaux::{ty_to_str};\n import middle::pat_util::{pat_bindings};\n import syntax::ast_util::{path_to_ident};"}, {"sha": "61feb22f1b4bc9040358c1ef0111c9eb61c82fb5", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -108,7 +108,7 @@ import visit::vt;\n import syntax::codemap::span;\n import syntax::ast::*;\n import driver::session::session;\n-import io::writer_util;\n+import io::WriterUtil;\n import capture::{cap_move, cap_drop, cap_copy, cap_ref};\n \n export check_crate;\n@@ -647,7 +647,7 @@ class liveness {\n         }\n     }\n \n-    fn write_vars(wr: io::writer,\n+    fn write_vars(wr: io::Writer,\n                   ln: live_node,\n                   test: fn(uint) -> live_node) {\n         let node_base_idx = self.idx(ln, variable(0u));"}, {"sha": "8265bbe17d884d2610fb76628376e4ea9bb31052", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -88,7 +88,7 @@ fn pandoc_writer(\n     ];\n \n     do generic_writer |markdown| {\n-        import io::writer_util;\n+        import io::WriterUtil;\n \n         debug!{\"pandoc cmd: %s\", pandoc_cmd};\n         debug!{\"pandoc args: %s\", str::connect(pandoc_args, ~\" \")};\n@@ -254,9 +254,9 @@ mod test {\n }\n \n fn write_file(path: ~str, s: ~str) {\n-    import io::writer_util;\n+    import io::WriterUtil;\n \n-    match io::file_writer(path, ~[io::create, io::truncate]) {\n+    match io::file_writer(path, ~[io::Create, io::Truncate]) {\n       result::ok(writer) => {\n         writer.write_str(s);\n       }"}, {"sha": "d58cd1ef4cf0549002264c7716bffedaf92e7206", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -6,7 +6,7 @@ import std::time::precise_time_s;\n import std::map;\n import std::map::{map, hashmap};\n \n-import io::reader;\n+import io::Reader;\n \n fn main(argv: ~[~str]) {\n     #macro["}, {"sha": "b480d92a0d849fde2d325299b21b89a2f87acb14", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -2,7 +2,7 @@\n \n use std;\n import dvec::dvec;\n-import io::writer_util;\n+import io::WriterUtil;\n \n fn collect_raw(num: uint) -> ~[uint] {\n     let mut result = ~[];"}, {"sha": "35ff2e648c9a6af36f83a3e20150dccdc965a101", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -13,7 +13,7 @@ import std::map::hashmap;\n import std::deque;\n import std::deque::t;\n import std::par;\n-import io::writer_util;\n+import io::WriterUtil;\n import comm::*;\n import int::abs;\n \n@@ -24,7 +24,7 @@ type bfs_result = ~[node_id];\n fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n     let r = rand::xorshift();\n \n-    fn choose_edge(i: node_id, j: node_id, scale: uint, r: rand::rng)\n+    fn choose_edge(i: node_id, j: node_id, scale: uint, r: rand::Rng)\n         -> (node_id, node_id) {\n \n         let A = 0.57;"}, {"sha": "8b0eeb15cb3fa539a7b81cf04fa7205d84ce9988", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -11,8 +11,8 @@\n // xfail-pretty\n \n use std;\n-import io::writer;\n-import io::writer_util;\n+import io::Writer;\n+import io::WriterUtil;\n \n import pipes::{port, chan, shared_chan};\n "}, {"sha": "06b4213970b0825edd02c0a3947b5e0f650c8d5d", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -7,8 +7,8 @@\n // xfail-pretty\n \n use std;\n-import io::writer;\n-import io::writer_util;\n+import io::Writer;\n+import io::WriterUtil;\n \n import pipes::{port, port_set, chan};\n "}, {"sha": "abcf9f4ed54877223c433b0b59bba2433526d16a", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -5,8 +5,8 @@\n // I *think* it's the same, more or less.\n \n use std;\n-import io::writer;\n-import io::writer_util;\n+import io::Writer;\n+import io::WriterUtil;\n \n enum request {\n     get_count,"}, {"sha": "4b83b14c98fd21b332e0b687d59041d36f652b6b", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -10,7 +10,7 @@ import vec;\n import uint;\n import int;\n import str;\n-import io::writer_util;\n+import io::WriterUtil;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n \n@@ -43,7 +43,7 @@ fn select_random(r: u32, genelist: ~[aminoacids]) -> char {\n     return bisect(genelist, 0u, vec::len::<aminoacids>(genelist) - 1u, r);\n }\n \n-fn make_random_fasta(wr: io::writer, id: ~str, desc: ~str, genelist: ~[aminoacids], n: int) {\n+fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[aminoacids], n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n     let rng = @{mut last: rand::rng().next()};\n     let mut op: ~str = ~\"\";\n@@ -58,7 +58,7 @@ fn make_random_fasta(wr: io::writer, id: ~str, desc: ~str, genelist: ~[aminoacid\n     if str::len(op) > 0u { wr.write_line(op); }\n }\n \n-fn make_repeat_fasta(wr: io::writer, id: ~str, desc: ~str, s: ~str, n: int) unsafe {\n+fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) unsafe {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n     let mut op: ~str = ~\"\";\n     let sl: uint = str::len(s);\n@@ -85,7 +85,7 @@ fn main(args: ~[~str]) {\n     };\n \n     let writer = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        result::get(io::file_writer(~\"./shootout-fasta.data\", ~[io::truncate, io::create]))\n+        result::get(io::file_writer(~\"./shootout-fasta.data\", ~[io::Truncate, io::Create]))\n     } else {\n         io::stdout()\n     };"}, {"sha": "fcbd2e6fed015ffd53fe7d6b8552fefce1d794b9", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -13,7 +13,7 @@\n //  writes pbm image to output path\n \n use std;\n-import io::writer_util;\n+import io::WriterUtil;\n import std::map::hashmap;\n \n struct cmplx {\n@@ -90,30 +90,30 @@ fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n \n type devnull = {dn: int};\n \n-impl devnull: io::writer {\n+impl devnull: io::Writer {\n     fn write(_b: &[const u8]) {}\n-    fn seek(_i: int, _s: io::seek_style) {}\n+    fn seek(_i: int, _s: io::SeekStyle) {}\n     fn tell() -> uint {0_u}\n     fn flush() -> int {0}\n-    fn get_type() -> io::writer_type { io::file }\n+    fn get_type() -> io::WriterType { io::File }\n }\n \n fn writer(path: ~str, writech: comm::chan<comm::chan<line>>, size: uint)\n {\n     let p: comm::port<line> = comm::port();\n     let ch = comm::chan(p);\n     comm::send(writech, ch);\n-    let cout: io::writer = match path {\n+    let cout: io::Writer = match path {\n         ~\"\" => {\n-            {dn: 0} as io::writer\n+            {dn: 0} as io::Writer\n         }\n         ~\"-\" => {\n             io::stdout()\n         }\n         _ => {\n             result::get(\n                 io::file_writer(path,\n-                ~[io::create, io::truncate]))\n+                ~[io::Create, io::Truncate]))\n         }\n     };\n     cout.write_line(~\"P4\");"}, {"sha": "7942392f2b80fa02ceb621694412e22f47c68610", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -13,7 +13,7 @@\n use std;\n \n import std::{time, getopts};\n-import io::writer_util;\n+import io::WriterUtil;\n import int::range;\n import pipes::port;\n import pipes::chan;"}, {"sha": "a9cab862e2e9ef0ed324c7d862f6474fc8b2c083", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -3,7 +3,7 @@\n use std;\n import std::smallintmap;\n import std::smallintmap::smallintmap;\n-import io::writer_util;\n+import io::WriterUtil;\n \n fn append_sequential(min: uint, max: uint, map: smallintmap<uint>) {\n     for uint::range(min, max) |i| {"}, {"sha": "7c72244213306d911cba642b38d8fd33c2e2136a", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,7 +1,7 @@\n use std;\n \n import std::bitv;\n-import io::writer_util;\n+import io::WriterUtil;\n \n // Computes a single solution to a given 9x9 sudoku\n //\n@@ -28,7 +28,7 @@ type grid = ~[~[mut u8]];\n enum grid_t { grid_ctor(grid), }\n \n // read a sudoku problem from file f\n-fn read_grid(f: io::reader) -> grid_t {\n+fn read_grid(f: io::Reader) -> grid_t {\n     assert f.read_line() == ~\"9,9\"; /* assert first line is exactly \"9,9\" */\n \n     let g = vec::from_fn(10u, {|_i|\n@@ -116,7 +116,7 @@ fn solve_grid(g: grid_t) {\n     }\n }\n \n-fn write_grid(f: io::writer, g: grid_t) {\n+fn write_grid(f: io::Writer, g: grid_t) {\n     for u8::range(0u8, 9u8) |row| {\n         f.write_str(fmt!{\"%u\", (*g)[row][0] as uint});\n         for u8::range(1u8, 9u8) |col| {"}, {"sha": "f48b05d0f1715d86f9b5f30b67cdb34f72840209", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -20,7 +20,7 @@ import std::map;\n import std::map::hashmap;\n import vec;\n import io;\n-import io::writer_util;\n+import io::WriterUtil;\n \n import std::time;\n import u64;\n@@ -73,7 +73,7 @@ fn join(t: joinable_task) {\n     t.recv()\n }\n \n-impl io::reader: word_reader {\n+impl io::Reader: word_reader {\n     fn read_word() -> option<~str> { read_word(self) }\n }\n \n@@ -331,7 +331,7 @@ fn main(argv: ~[~str]) {\n              + u64::str(elapsed) + ~\"ms\");\n }\n \n-fn read_word(r: io::reader) -> option<~str> {\n+fn read_word(r: io::Reader) -> option<~str> {\n     let mut w = ~\"\";\n \n     while !r.eof() {\n@@ -350,7 +350,7 @@ fn is_word_char(c: char) -> bool {\n \n class random_word_reader: word_reader {\n     let mut remaining: uint;\n-    let rng: rand::rng;\n+    let rng: rand::Rng;\n     new(count: uint) {\n         self.remaining = count;\n         self.rng = rand::rng();"}, {"sha": "8084558ab6952e06dbcab99a3c76995f635d879b", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:explicit failure\n // Don't double free the string\n use std;\n-import io::reader;\n+import io::Reader;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {"}, {"sha": "4a36e7a1c46cb184b44b6555c3baf38bf9698c67", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -85,7 +85,7 @@ fn main() {\n \n fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: ~str) {\n     let buf = mem_buffer();\n-    let pp = pprust::rust_printer(buf as io::writer);\n+    let pp = pprust::rust_printer(buf as io::Writer);\n     f(pp, expr);\n     pp::eof(pp.s);\n     let str = mem_buffer_str(buf);"}, {"sha": "cd7abd4b40049195775a2c85aad75c18c363519c", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -4,14 +4,14 @@ use std;\n // the common code.\n \n import std::ebml;\n-import io::writer;\n+import io::Writer;\n import std::serialization::{serialize_uint, deserialize_uint};\n \n fn test_ser_and_deser<A>(a1: A,\n                          expected: ~str,\n                          ebml_ser_fn: fn(ebml::writer, A),\n                          ebml_deser_fn: fn(ebml::ebml_deserializer) -> A,\n-                         io_ser_fn: fn(io::writer, A)) {\n+                         io_ser_fn: fn(io::Writer, A)) {\n \n     // check the pretty printer:\n     io_ser_fn(io::stdout(), a1);\n@@ -21,7 +21,7 @@ fn test_ser_and_deser<A>(a1: A,\n \n     // check the EBML serializer:\n     let buf = io::mem_buffer();\n-    let w = ebml::writer(buf as io::writer);\n+    let w = ebml::writer(buf as io::Writer);\n     ebml_ser_fn(w, a1);\n     let d = ebml::doc(@io::mem_buffer_buf(buf));\n     let a2 = ebml_deser_fn(ebml::ebml_deserializer(d));"}, {"sha": "e245fba4f66d2eb25cb876a50b817650f211ccab", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -1,6 +1,6 @@\n use std;\n import io;\n-import io::writer_util;\n+import io::WriterUtil;\n import std::map::hashmap;\n \n enum object"}, {"sha": "c75880e146a2f9096b51dff8f2198db7dd418559", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11258310e2b67f734d4d520e6f995342892ecc3a/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=11258310e2b67f734d4d520e6f995342892ecc3a", "patch": "@@ -45,8 +45,8 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr: owned io::reader>(+in: rdr) -> ~[~[square]] {\n-    let in = in as io::reader;\n+fn read_board_grid<rdr: owned io::Reader>(+in: rdr) -> ~[~[square]] {\n+    let in = in as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {\n         let mut row = ~[];"}]}