{"sha": "659859c537b5d867da5543bbe8a09f1323daa52f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OTg1OWM1MzdiNWQ4NjdkYTU1NDNiYmU4YTA5ZjEzMjNkYWE1MmY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-25T03:46:34Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-25T03:46:34Z"}, "message": "save-analysis: walk path expressions\n\nThis is actually kinda hard to hit, but it fixes missing the `foo` in `for _ in foo {}`.", "tree": {"sha": "55bbfdc92c809b9fa6f4abd7a0b5cb82c3b35524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55bbfdc92c809b9fa6f4abd7a0b5cb82c3b35524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659859c537b5d867da5543bbe8a09f1323daa52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659859c537b5d867da5543bbe8a09f1323daa52f", "html_url": "https://github.com/rust-lang/rust/commit/659859c537b5d867da5543bbe8a09f1323daa52f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659859c537b5d867da5543bbe8a09f1323daa52f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c2d95238e3545e7ae9af4873c48b1e3651c164", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c2d95238e3545e7ae9af4873c48b1e3651c164", "html_url": "https://github.com/rust-lang/rust/commit/83c2d95238e3545e7ae9af4873c48b1e3651c164"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "13e9e99fbb926b07bbf5ee12dd1103be58d331a5", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659859c537b5d867da5543bbe8a09f1323daa52f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659859c537b5d867da5543bbe8a09f1323daa52f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=659859c537b5d867da5543bbe8a09f1323daa52f", "patch": "@@ -1369,6 +1369,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n     }\n \n     fn visit_expr(&mut self, ex: &'l ast::Expr) {\n+        debug!(\"visit_expr {:?}\", ex.node);\n         self.process_macro_use(ex.span, ex.id);\n         match ex.node {\n             ast::ExprKind::Call(ref _f, ref _args) => {\n@@ -1462,6 +1463,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             ast::ExprKind::WhileLet(ref pattern, ref subexpression, ref block, _) => {\n                 let value = self.span.snippet(subexpression.span);\n                 self.process_var_decl(pattern, value);\n+                debug!(\"for loop, walk sub-expr: {:?}\", subexpression.node);\n                 visit::walk_expr(self, subexpression);\n                 visit::walk_block(self, block);\n             }\n@@ -1556,6 +1558,10 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n         self.visit_expr(&arm.body);\n     }\n \n+    fn visit_path(&mut self, p: &'l ast::Path, id: NodeId) {\n+        self.process_path(id, p, None);\n+    }\n+\n     fn visit_stmt(&mut self, s: &'l ast::Stmt) {\n         self.process_macro_use(s.span, s.id);\n         visit::walk_stmt(self, s)"}]}