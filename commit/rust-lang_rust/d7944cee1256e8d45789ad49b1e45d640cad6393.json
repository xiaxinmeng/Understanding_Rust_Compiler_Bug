{"sha": "d7944cee1256e8d45789ad49b1e45d640cad6393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTQ0Y2VlMTI1NmU4ZDQ1Nzg5YWQ0OWIxZTQ1ZDY0MGNhZDYzOTM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-10-26T15:46:11Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-10-26T15:46:11Z"}, "message": "Distinguish argument from local variable", "tree": {"sha": "3d37b9ed28224525737fe137e5c294e3f1e85846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d37b9ed28224525737fe137e5c294e3f1e85846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7944cee1256e8d45789ad49b1e45d640cad6393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7944cee1256e8d45789ad49b1e45d640cad6393", "html_url": "https://github.com/rust-lang/rust/commit/d7944cee1256e8d45789ad49b1e45d640cad6393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7944cee1256e8d45789ad49b1e45d640cad6393/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908979d53d9261de7bb87708762c099fb069840c", "url": "https://api.github.com/repos/rust-lang/rust/commits/908979d53d9261de7bb87708762c099fb069840c", "html_url": "https://github.com/rust-lang/rust/commit/908979d53d9261de7bb87708762c099fb069840c"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "68ed0cda5f106a453d479f18ea42c2545ae0f7fc", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -348,6 +348,27 @@ impl<'ast> Map<'ast> {\n         self.find_entry(id).and_then(|x| x.parent_node()).unwrap_or(id)\n     }\n \n+    /// Check if the node is an argument. An argument is a local variable whose\n+    /// immediate parent is an item or a closure.\n+    pub fn is_argument(&self, id: NodeId) -> bool {\n+        match self.find(id) {\n+            Some(NodeLocal(_)) => (),\n+            _ => return false,\n+        }\n+        match self.find(self.get_parent_node(id)) {\n+            Some(NodeItem(_)) |\n+            Some(NodeTraitItem(_)) |\n+            Some(NodeImplItem(_)) => true,\n+            Some(NodeExpr(e)) => {\n+                match e.node {\n+                    ExprClosure(..) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good node id we found. Note that reaching the crate root (id == 0),"}, {"sha": "fb3a6b0f4202713ac303307d2a8e709d22fd3747", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -278,7 +278,7 @@ enum PassArgs {\n impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n     pub fn new(delegate: &'d mut (Delegate<'tcx>),\n                typer: &'t infer::InferCtxt<'a, 'tcx>)\n-               -> ExprUseVisitor<'d,'t,'a,'tcx> where 'tcx:'a\n+               -> ExprUseVisitor<'d,'t,'a,'tcx> where 'tcx:'a+'d\n     {\n         let mc: mc::MemCategorizationContext<'t, 'a, 'tcx> =\n             mc::MemCategorizationContext::new(typer);"}, {"sha": "186a8b1390e065b54f124d08dff1fdb6ddb13c87", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -1463,11 +1463,10 @@ impl<'tcx> cmt_<'tcx> {\n                 \"non-lvalue\".to_string()\n             }\n             cat_local(vid) => {\n-                match tcx.map.find(vid) {\n-                    Some(ast_map::NodeArg(_)) => {\n-                        \"argument\".to_string()\n-                    }\n-                    _ => \"local variable\".to_string()\n+                if tcx.map.is_argument(vid) {\n+                    \"argument\".to_string()\n+                } else {\n+                    \"local variable\".to_string()\n                 }\n             }\n             cat_deref(_, _, pk) => {"}, {"sha": "3230689e53c8a5611fab1af16dc3e4669df15b0f", "filename": "src/test/compile-fail/borrowck-argument.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy, Clone)]\n+struct S;\n+\n+impl S {\n+    fn mutate(&mut self) {\n+    }\n+}\n+\n+fn func(arg: S) {\n+    arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+}\n+\n+impl S {\n+    fn method(&self, arg: S) {\n+        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+    }\n+}\n+\n+trait T {\n+    fn default(&self, arg: S) {\n+        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+    }\n+}\n+\n+impl T for S {}\n+\n+fn main() {\n+    let s = S;\n+    func(s);\n+    s.method(s);\n+    s.default(s);\n+    (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+}"}, {"sha": "3646a68f06fd745ed09fb0f41df2a2c971339559", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -43,7 +43,7 @@ fn d(x: &mut isize) {\n }\n \n fn e(x: &mut isize) {\n-    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n+    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n }\n \n fn main() {"}, {"sha": "1c12ca9c1de76234a3e4d72554992b55048d8074", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7944cee1256e8d45789ad49b1e45d640cad6393/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=d7944cee1256e8d45789ad49b1e45d640cad6393", "patch": "@@ -17,7 +17,7 @@ fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n }\n \n fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n-    f(1, 2);    //~ ERROR cannot borrow immutable local variable\n+    f(1, 2);    //~ ERROR cannot borrow immutable argument\n }\n \n fn c<F:FnOnce(isize, isize) -> isize>(f: F) {"}]}