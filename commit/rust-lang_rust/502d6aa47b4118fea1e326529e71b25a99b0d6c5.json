{"sha": "502d6aa47b4118fea1e326529e71b25a99b0d6c5", "node_id": "C_kwDOAAsO6NoAKDUwMmQ2YWE0N2I0MTE4ZmVhMWUzMjY1MjllNzFiMjVhOTliMGQ2YzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-10T12:31:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-10T12:31:51Z"}, "message": "Auto merge of #93854 - matthiaskrgr:rollup-bh2a85j, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92670 (add kernel target for RustyHermit)\n - #93756 (Support custom options for LLVM build)\n - #93802 (fix oversight in the `min_const_generics` checks)\n - #93808 (Remove first headings indent)\n - #93824 (Stabilize cfg_target_has_atomic)\n - #93830 (Refactor sidebar printing code)\n - #93843 (kmc-solid: Fix wait queue manipulation errors in the `Condvar` implementation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "08e0fa6b79462f1a2eb2467ca8becea4e220eb35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e0fa6b79462f1a2eb2467ca8becea4e220eb35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/502d6aa47b4118fea1e326529e71b25a99b0d6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/502d6aa47b4118fea1e326529e71b25a99b0d6c5", "html_url": "https://github.com/rust-lang/rust/commit/502d6aa47b4118fea1e326529e71b25a99b0d6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/502d6aa47b4118fea1e326529e71b25a99b0d6c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56cd04af5c389b6ab676ba16f59d9f70bc465090", "url": "https://api.github.com/repos/rust-lang/rust/commits/56cd04af5c389b6ab676ba16f59d9f70bc465090", "html_url": "https://github.com/rust-lang/rust/commit/56cd04af5c389b6ab676ba16f59d9f70bc465090"}, {"sha": "8c60f4487733fb8fdbe2cfc2bbdb9dab736423f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c60f4487733fb8fdbe2cfc2bbdb9dab736423f0", "html_url": "https://github.com/rust-lang/rust/commit/8c60f4487733fb8fdbe2cfc2bbdb9dab736423f0"}], "stats": {"total": 1044, "additions": 445, "deletions": 599}, "files": [{"sha": "88edaec916972f70b564b8b6c53b393fa8770fb3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -72,6 +72,8 @@ declare_features! (\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n     /// Allows `cfg(target_feature = \"...\")`.\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    /// Allows `cfg(target_has_atomic = \"...\")`.\n+    (accepted, cfg_target_has_atomic, \"1.60.0\", Some(32976), None),\n     /// Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n     /// Allows implementing `Clone` for closures where possible (RFC 2132)."}, {"sha": "fab22e4e6cf32aaf5bd216aeb139fe284eeec6b3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -309,8 +309,8 @@ declare_features! (\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`.\n     (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n-    /// Allows `cfg(target_has_atomic = \"...\")`.\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n+    /// Allows `cfg(target_has_atomic_equal_alignment = \"...\")`.\n+    (active, cfg_target_has_atomic_equal_alignment, \"1.60.0\", Some(93822), None),\n     /// Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version"}, {"sha": "69ce21d231f27803b9d4b774d9acad74a7f46de5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -26,12 +26,10 @@ const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n-    (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n-    (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (\n         sym::target_has_atomic_equal_alignment,\n-        sym::cfg_target_has_atomic,\n-        cfg_fn!(cfg_target_has_atomic),\n+        sym::cfg_target_has_atomic_equal_alignment,\n+        cfg_fn!(cfg_target_has_atomic_equal_alignment),\n     ),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n     (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),"}, {"sha": "cab1d4e21c9b5a45de34135907ac102989e22782", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -421,6 +421,7 @@ symbols! {\n         cfg_target_abi,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n+        cfg_target_has_atomic_equal_alignment,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n         cfg_version,"}, {"sha": "f8e1e1b02f5a285cc8b23ab7beadb332b56dcd3c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -3,6 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.features = \"+strict-align,+neon,+fp-armv8\".to_string();\n \n     Target {\n         llvm_target: \"aarch64-unknown-hermit\".to_string(),"}, {"sha": "6e9d6c6221ccc58ec8f7ef9bfe14231cd0c25aaf", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_hermitkernel.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_hermitkernel.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,16 @@\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::hermit_kernel_base::opts();\n+    base.max_atomic_width = Some(128);\n+    base.abi = \"softfloat\".to_string();\n+    base.features = \"+strict-align,-neon,-fp-armv8\".to_string();\n+\n+    Target {\n+        llvm_target: \"aarch64-unknown-hermit\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "d735f3d41fdb0a7780882fabec629787ac4d3ff7", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -964,6 +964,7 @@ supported_targets! {\n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n \n+    (\"aarch64-unknown-none-hermitkernel\", aarch64_unknown_none_hermitkernel),\n     (\"x86_64-unknown-none-hermitkernel\", x86_64_unknown_none_hermitkernel),\n \n     (\"riscv32i-unknown-none-elf\", riscv32i_unknown_none_elf),"}, {"sha": "aa054043c4e886e0d9a60a0b4e2fef0286b3a3ea", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -2281,8 +2281,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n-                let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n-                if forbid_generic && normalized_ty.needs_subst() {\n+                let ty = tcx.at(span).type_of(def_id);\n+                // HACK(min_const_generics): Forbid generic `Self` types\n+                // here as we can't easily do that during nameres.\n+                //\n+                // We do this before normalization as we otherwise allow\n+                // ```rust\n+                // trait AlwaysApplicable { type Assoc; }\n+                // impl<T: ?Sized> AlwaysApplicable for T { type Assoc = usize; }\n+                //\n+                // trait BindsParam<T> {\n+                //     type ArrayTy;\n+                // }\n+                // impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+                //    type ArrayTy = [u8; Self::MAX];\n+                // }\n+                // ```\n+                // Note that the normalization happens in the param env of\n+                // the anon const, which is empty. This is why the\n+                // `AlwaysApplicable` impl needs a `T: ?Sized` bound for\n+                // this to compile if we were to normalize here.\n+                if forbid_generic && ty.needs_subst() {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\",\n@@ -2297,7 +2316,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     err.emit();\n                     tcx.ty_error()\n                 } else {\n-                    normalized_ty\n+                    self.normalize_ty(span, ty)\n                 }\n             }\n             Res::Def(DefKind::AssocTy, def_id) => {"}, {"sha": "ad48cc881f3e665252869c0b9b02b40450312ff4", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -157,6 +157,9 @@ changelog-seen = 2\n # Whether to build the clang compiler.\n #clang = false\n \n+# Custom CMake defines to set when building LLVM.\n+#build-config = {}\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "ab9f0b9d7378fbceca09ab6adb372f35698e07b0", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -140,7 +140,7 @@\n #![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_deref)]\n #![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]"}, {"sha": "72d8e1b39030a13e41105b44cc6e5f96362f6aa4", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -155,7 +155,8 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n+#![cfg_attr(not(bootstrap), feature(cfg_target_has_atomic_equal_alignment))]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_fn_trait_bound)]"}, {"sha": "1c512471c95cbff0d5878ec797437d230100cc00", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -7,7 +7,7 @@\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(cfg_panic)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_assume)]\n #![feature(const_black_box)]\n #![feature(const_bool_to_option)]"}, {"sha": "2aae29f21544da6be1979cb452149ca1313ab232", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -242,7 +242,7 @@\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n #![feature(cfg_eval)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]"}, {"sha": "2992a6a542901ccd5fc0d521368344bdbc8fd437", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -15,10 +15,12 @@ unsafe impl Sync for Condvar {}\n pub type MovableCondvar = Condvar;\n \n impl Condvar {\n+    #[inline]\n     pub const fn new() -> Condvar {\n         Condvar { waiters: SpinMutex::new(waiter_queue::WaiterQueue::new()) }\n     }\n \n+    #[inline]\n     pub unsafe fn init(&mut self) {}\n \n     pub unsafe fn notify_one(&self) {\n@@ -190,7 +192,7 @@ mod waiter_queue {\n                     let insert_after = {\n                         let mut cursor = head.last;\n                         loop {\n-                            if waiter.priority <= cursor.as_ref().priority {\n+                            if waiter.priority >= cursor.as_ref().priority {\n                                 // `cursor` and all previous waiters have the same or higher\n                                 // priority than `current_task_priority`. Insert the new\n                                 // waiter right after `cursor`.\n@@ -206,14 +208,16 @@ mod waiter_queue {\n \n                     if let Some(mut insert_after) = insert_after {\n                         // Insert `waiter` after `insert_after`\n-                        let insert_before = insert_after.as_ref().prev;\n+                        let insert_before = insert_after.as_ref().next;\n \n                         waiter.prev = Some(insert_after);\n                         insert_after.as_mut().next = Some(waiter_ptr);\n \n                         waiter.next = insert_before;\n                         if let Some(mut insert_before) = insert_before {\n                             insert_before.as_mut().prev = Some(waiter_ptr);\n+                        } else {\n+                            head.last = waiter_ptr;\n                         }\n                     } else {\n                         // Insert `waiter` to the front\n@@ -240,11 +244,11 @@ mod waiter_queue {\n                     match (waiter.prev, waiter.next) {\n                         (Some(mut prev), Some(mut next)) => {\n                             prev.as_mut().next = Some(next);\n-                            next.as_mut().next = Some(prev);\n+                            next.as_mut().prev = Some(prev);\n                         }\n                         (None, Some(mut next)) => {\n                             head.first = next;\n-                            next.as_mut().next = None;\n+                            next.as_mut().prev = None;\n                         }\n                         (Some(mut prev), None) => {\n                             prev.as_mut().next = None;\n@@ -271,6 +275,7 @@ mod waiter_queue {\n             unsafe { waiter.as_ref().task != 0 }\n         }\n \n+        #[inline]\n         pub fn pop_front(&mut self) -> Option<abi::ID> {\n             unsafe {\n                 let head = self.head.as_mut()?;"}, {"sha": "d6f77fe6cd6d0c06e54ea744d7a7d746044a1dc9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -108,6 +108,7 @@ pub struct Config {\n     pub llvm_polly: bool,\n     pub llvm_clang: bool,\n     pub llvm_from_ci: bool,\n+    pub llvm_build_config: HashMap<String, String>,\n \n     pub use_lld: bool,\n     pub lld_enabled: bool,\n@@ -477,6 +478,7 @@ derive_merge! {\n         polly: Option<bool>,\n         clang: Option<bool>,\n         download_ci_llvm: Option<StringOrBool>,\n+        build_config: Option<HashMap<String, String>>,\n     }\n }\n \n@@ -807,6 +809,7 @@ impl Config {\n             config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.unwrap_or(false);\n             config.llvm_polly = llvm.polly.unwrap_or(false);\n             config.llvm_clang = llvm.clang.unwrap_or(false);\n+            config.llvm_build_config = llvm.build_config.clone().unwrap_or(Default::default());\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n@@ -876,6 +879,7 @@ impl Config {\n                 check_ci_llvm!(llvm.allow_old_toolchain);\n                 check_ci_llvm!(llvm.polly);\n                 check_ci_llvm!(llvm.clang);\n+                check_ci_llvm!(llvm.build_config);\n                 check_ci_llvm!(llvm.plugins);\n \n                 // CI-built LLVM can be either dynamic or static."}, {"sha": "14de1531f73ab0ca28e924ce2e10a0dca19aa51e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -353,6 +353,10 @@ impl Step for Llvm {\n \n         configure_cmake(builder, target, &mut cfg, true);\n \n+        for (key, val) in &builder.config.llvm_build_config {\n+            cfg.define(key, val);\n+        }\n+\n         // FIXME: we don't actually need to build all LLVM tools and all LLVM\n         //        libraries here, e.g., we just want a few components and a few\n         //        tools. Figure out how to filter them down and only build the right"}, {"sha": "aecd892ce8b3b0f39b9d47bd144b37c1a441d338", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -17,6 +17,7 @@\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n+    - [aarch64-unknown-none-hermitkernel](platform-support/aarch64-unknown-none-hermitkernel.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)"}, {"sha": "d4a5f0e5a98c2541f5aa41aff583d9f92c8c78a8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -204,7 +204,8 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n-`aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n+[`aarch64-unknown-none-hermitkernel`](platform-support/aarch64-unknown-none-hermitkernel.md) | * |  | ARM64 HermitCore kernel\n `aarch64-unknown-uefi` | * |  | ARM64 UEFI\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n@@ -286,10 +287,10 @@ target | std | host | notes\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n-`x86_64-unknown-hermit` | ? |  |\n+`x86_64-unknown-hermit` | \u2713 |  | HermitCore\n `x86_64-unknown-l4re-uclibc` | ? |  |\n [`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * |  | Freestanding/bare-metal x86_64, softfloat\n-`x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n+`x86_64-unknown-none-hermitkernel` | * |  | HermitCore kernel\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n [`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-unknown-uefi` | * |  | 64-bit UEFI"}, {"sha": "b8967f631878c8d0230c0a686ef6e6cafd99b0d5", "filename": "src/doc/rustc/src/platform-support/aarch64-unknown-none-hermitkernel.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-unknown-none-hermitkernel.md?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,77 @@\n+# `aarch64-unknown-none-hermitkernel`\n+\n+**Tier: 3**\n+\n+Required to build the kernel for [HermitCore](https://github.com/hermitcore/hermit-playground)\n+or [RustyHermit](https://github.com/hermitcore/rusty-hermit).\n+The result is a bare-metal aarch64 binary in ELF format.\n+\n+## Target maintainers\n+\n+- Stefan Lankes, https://github.com/stlankes\n+\n+## Requirements\n+\n+This target is cross-compiled. There is no support for `std`, but the\n+library operating system provides a simple allocator to use `alloc`.\n+\n+By default, Rust code generated for this target does not use any vector or\n+floating-point registers. This allows the generated code to build the library\n+operaring system, which may need to avoid the use of such\n+registers or which may have special considerations about the use of such\n+registers (e.g. saving and restoring them to avoid breaking userspace code\n+using the same registers). In contrast to `aarch64-unknown-none-softfloat`,\n+the target is completly relocatable, which is a required feature of RustyHermit.\n+\n+By default, code generated with this target should run on any `aarch64`\n+hardware; enabling additional target features may raise this baseline.\n+On `aarch64-unknown-none-hermitkernel`, `extern \"C\"` uses the [standard System V calling\n+convention](https://github.com/ARM-software/abi-aa/releases/download/2021Q3/sysvabi64.pdf),\n+without red zones.\n+\n+This target generated binaries in the ELF format.\n+\n+## Building the target\n+\n+Typical you should not use the target directly. The target `aarch64-unknown-hermit`\n+builds the _user space_ of RustyHermit and supports red zones and floating-point\n+operations.\n+To build and link the kernel to the application, the crate\n+[hermit-sys](https://github.com/hermitcore/rusty-hermit/tree/master/hermit-sys)\n+should be used by adding the following lines to the `Cargo.toml` file of\n+your application.\n+\n+```toml\n+[target.'cfg(target_os = \"hermit\")'.dependencies]\n+hermit-sys = \"0.1.*\"\n+```\n+\n+The crate `hermit-sys` uses the target `aarch64-unknown-none-hermitkernel`\n+to build the kernel.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you need to build the crate `hermit-sys` (see\n+\"Building the target\" above).\n+\n+## Testing\n+\n+As `aarch64-unknown-none-hermitkernel` does not support `std`\n+and does not support running any Rust testsuite.\n+\n+## Cross-compilation toolchains and C code\n+\n+If you want to compile C code along with Rust you will need an\n+appropriate `aarch64` toolchain.\n+\n+Rust *may* be able to use an `aarch64-linux-gnu-` toolchain with appropriate\n+standalone flags to build for this toolchain (depending on the assumptions of\n+that toolchain, see below), or you may wish to use a separate\n+`aarch64-unknown-none` (or `aarch64-elf-`) toolchain.\n+\n+On some `aarch64` hosts that use ELF binaries, you *may* be able to use the host\n+C toolchain, if it does not introduce assumptions about the host environment\n+that don't match the expectations of a standalone environment. Otherwise, you\n+may need a separate toolchain for standalone/freestanding development, just as\n+when cross-compiling from a non-`aarch64` platform."}, {"sha": "1c0448828a2795344528f6550f9e88d6e70cc044", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = SpannedEvent<'a>>> Iterator\n             self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n \n             let start_tags = format!(\n-                \"<h{level} id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n+                \"<h{level} id=\\\"{id}\\\">\\\n                     <a href=\\\"#{id}\\\">\",\n                 id = id,\n                 level = level"}, {"sha": "5c0bf0ed942f4169ffde9eae363db910791b9323", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -159,25 +159,22 @@ fn test_header() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n-    t(\n-        \"# Foo bar\",\n-        \"<h2 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h2>\",\n-    );\n+    t(\"# Foo bar\", \"<h2 id=\\\"foo-bar\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h2>\");\n     t(\n         \"## Foo-bar_baz qux\",\n-        \"<h3 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n+        \"<h3 id=\\\"foo-bar_baz-qux\\\">\\\n          <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h3>\",\n     );\n     t(\n         \"### **Foo** *bar* baz!?!& -_qux_-%\",\n-        \"<h4 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n+        \"<h4 id=\\\"foo-bar-baz--qux-\\\">\\\n             <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n             <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a>\\\n          </h4>\",\n     );\n     t(\n         \"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n-        \"<h5 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n+        \"<h5 id=\\\"foo--bar--baz--qux\\\">\\\n              <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n              <em><code>baz</code></em> \u2764 #qux</a>\\\n          </h5>\",\n@@ -201,36 +198,12 @@ fn test_header_ids_multiple_blocks() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n-    t(\n-        &mut map,\n-        \"# Example\",\n-        \"<h2 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h2>\",\n-    );\n-    t(\n-        &mut map,\n-        \"# Panics\",\n-        \"<h2 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h2>\",\n-    );\n-    t(\n-        &mut map,\n-        \"# Example\",\n-        \"<h2 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h2>\",\n-    );\n-    t(\n-        &mut map,\n-        \"# Search\",\n-        \"<h2 id=\\\"search-1\\\" class=\\\"section-header\\\"><a href=\\\"#search-1\\\">Search</a></h2>\",\n-    );\n-    t(\n-        &mut map,\n-        \"# Example\",\n-        \"<h2 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h2>\",\n-    );\n-    t(\n-        &mut map,\n-        \"# Panics\",\n-        \"<h2 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h2>\",\n-    );\n+    t(&mut map, \"# Example\", \"<h2 id=\\\"example\\\"><a href=\\\"#example\\\">Example</a></h2>\");\n+    t(&mut map, \"# Panics\", \"<h2 id=\\\"panics\\\"><a href=\\\"#panics\\\">Panics</a></h2>\");\n+    t(&mut map, \"# Example\", \"<h2 id=\\\"example-1\\\"><a href=\\\"#example-1\\\">Example</a></h2>\");\n+    t(&mut map, \"# Search\", \"<h2 id=\\\"search-1\\\"><a href=\\\"#search-1\\\">Search</a></h2>\");\n+    t(&mut map, \"# Example\", \"<h2 id=\\\"example-2\\\"><a href=\\\"#example-2\\\">Example</a></h2>\");\n+    t(&mut map, \"# Panics\", \"<h2 id=\\\"panics-1\\\"><a href=\\\"#panics-1\\\">Panics</a></h2>\");\n }\n \n #[test]"}, {"sha": "1c3f9b56b474e533c025746efb42a7b7dccc0094", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 157, "deletions": 65, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -2402,78 +2402,170 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n     }\n }\n \n-fn item_ty_to_strs(ty: ItemType) -> (&'static str, &'static str) {\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+enum ItemSection {\n+    Reexports,\n+    PrimitiveTypes,\n+    Modules,\n+    Macros,\n+    Structs,\n+    Enums,\n+    Constants,\n+    Statics,\n+    Traits,\n+    Functions,\n+    TypeDefinitions,\n+    Unions,\n+    Implementations,\n+    TypeMethods,\n+    Methods,\n+    StructFields,\n+    Variants,\n+    AssociatedTypes,\n+    AssociatedConstants,\n+    ForeignTypes,\n+    Keywords,\n+    OpaqueTypes,\n+    AttributeMacros,\n+    DeriveMacros,\n+    TraitAliases,\n+}\n+\n+impl ItemSection {\n+    const ALL: &'static [Self] = {\n+        use ItemSection::*;\n+        // NOTE: The order here affects the order in the UI.\n+        &[\n+            Reexports,\n+            PrimitiveTypes,\n+            Modules,\n+            Macros,\n+            Structs,\n+            Enums,\n+            Constants,\n+            Statics,\n+            Traits,\n+            Functions,\n+            TypeDefinitions,\n+            Unions,\n+            Implementations,\n+            TypeMethods,\n+            Methods,\n+            StructFields,\n+            Variants,\n+            AssociatedTypes,\n+            AssociatedConstants,\n+            ForeignTypes,\n+            Keywords,\n+            OpaqueTypes,\n+            AttributeMacros,\n+            DeriveMacros,\n+            TraitAliases,\n+        ]\n+    };\n+\n+    fn id(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"reexports\",\n+            Self::Modules => \"modules\",\n+            Self::Structs => \"structs\",\n+            Self::Unions => \"unions\",\n+            Self::Enums => \"enums\",\n+            Self::Functions => \"functions\",\n+            Self::TypeDefinitions => \"types\",\n+            Self::Statics => \"statics\",\n+            Self::Constants => \"constants\",\n+            Self::Traits => \"traits\",\n+            Self::Implementations => \"impls\",\n+            Self::TypeMethods => \"tymethods\",\n+            Self::Methods => \"methods\",\n+            Self::StructFields => \"fields\",\n+            Self::Variants => \"variants\",\n+            Self::Macros => \"macros\",\n+            Self::PrimitiveTypes => \"primitives\",\n+            Self::AssociatedTypes => \"associated-types\",\n+            Self::AssociatedConstants => \"associated-consts\",\n+            Self::ForeignTypes => \"foreign-types\",\n+            Self::Keywords => \"keywords\",\n+            Self::OpaqueTypes => \"opaque-types\",\n+            Self::AttributeMacros => \"attributes\",\n+            Self::DeriveMacros => \"derives\",\n+            Self::TraitAliases => \"trait-aliases\",\n+        }\n+    }\n+\n+    fn name(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"Re-exports\",\n+            Self::Modules => \"Modules\",\n+            Self::Structs => \"Structs\",\n+            Self::Unions => \"Unions\",\n+            Self::Enums => \"Enums\",\n+            Self::Functions => \"Functions\",\n+            Self::TypeDefinitions => \"Type Definitions\",\n+            Self::Statics => \"Statics\",\n+            Self::Constants => \"Constants\",\n+            Self::Traits => \"Traits\",\n+            Self::Implementations => \"Implementations\",\n+            Self::TypeMethods => \"Type Methods\",\n+            Self::Methods => \"Methods\",\n+            Self::StructFields => \"Struct Fields\",\n+            Self::Variants => \"Variants\",\n+            Self::Macros => \"Macros\",\n+            Self::PrimitiveTypes => \"Primitive Types\",\n+            Self::AssociatedTypes => \"Associated Types\",\n+            Self::AssociatedConstants => \"Associated Constants\",\n+            Self::ForeignTypes => \"Foreign Types\",\n+            Self::Keywords => \"Keywords\",\n+            Self::OpaqueTypes => \"Opaque Types\",\n+            Self::AttributeMacros => \"Attribute Macros\",\n+            Self::DeriveMacros => \"Derive Macros\",\n+            Self::TraitAliases => \"Trait Aliases\",\n+        }\n+    }\n+}\n+\n+fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     match ty {\n-        ItemType::ExternCrate | ItemType::Import => (\"reexports\", \"Re-exports\"),\n-        ItemType::Module => (\"modules\", \"Modules\"),\n-        ItemType::Struct => (\"structs\", \"Structs\"),\n-        ItemType::Union => (\"unions\", \"Unions\"),\n-        ItemType::Enum => (\"enums\", \"Enums\"),\n-        ItemType::Function => (\"functions\", \"Functions\"),\n-        ItemType::Typedef => (\"types\", \"Type Definitions\"),\n-        ItemType::Static => (\"statics\", \"Statics\"),\n-        ItemType::Constant => (\"constants\", \"Constants\"),\n-        ItemType::Trait => (\"traits\", \"Traits\"),\n-        ItemType::Impl => (\"impls\", \"Implementations\"),\n-        ItemType::TyMethod => (\"tymethods\", \"Type Methods\"),\n-        ItemType::Method => (\"methods\", \"Methods\"),\n-        ItemType::StructField => (\"fields\", \"Struct Fields\"),\n-        ItemType::Variant => (\"variants\", \"Variants\"),\n-        ItemType::Macro => (\"macros\", \"Macros\"),\n-        ItemType::Primitive => (\"primitives\", \"Primitive Types\"),\n-        ItemType::AssocType => (\"associated-types\", \"Associated Types\"),\n-        ItemType::AssocConst => (\"associated-consts\", \"Associated Constants\"),\n-        ItemType::ForeignType => (\"foreign-types\", \"Foreign Types\"),\n-        ItemType::Keyword => (\"keywords\", \"Keywords\"),\n-        ItemType::OpaqueTy => (\"opaque-types\", \"Opaque Types\"),\n-        ItemType::ProcAttribute => (\"attributes\", \"Attribute Macros\"),\n-        ItemType::ProcDerive => (\"derives\", \"Derive Macros\"),\n-        ItemType::TraitAlias => (\"trait-aliases\", \"Trait aliases\"),\n+        ItemType::ExternCrate | ItemType::Import => ItemSection::Reexports,\n+        ItemType::Module => ItemSection::Modules,\n+        ItemType::Struct => ItemSection::Structs,\n+        ItemType::Union => ItemSection::Unions,\n+        ItemType::Enum => ItemSection::Enums,\n+        ItemType::Function => ItemSection::Functions,\n+        ItemType::Typedef => ItemSection::TypeDefinitions,\n+        ItemType::Static => ItemSection::Statics,\n+        ItemType::Constant => ItemSection::Constants,\n+        ItemType::Trait => ItemSection::Traits,\n+        ItemType::Impl => ItemSection::Implementations,\n+        ItemType::TyMethod => ItemSection::TypeMethods,\n+        ItemType::Method => ItemSection::Methods,\n+        ItemType::StructField => ItemSection::StructFields,\n+        ItemType::Variant => ItemSection::Variants,\n+        ItemType::Macro => ItemSection::Macros,\n+        ItemType::Primitive => ItemSection::PrimitiveTypes,\n+        ItemType::AssocType => ItemSection::AssociatedTypes,\n+        ItemType::AssocConst => ItemSection::AssociatedConstants,\n+        ItemType::ForeignType => ItemSection::ForeignTypes,\n+        ItemType::Keyword => ItemSection::Keywords,\n+        ItemType::OpaqueTy => ItemSection::OpaqueTypes,\n+        ItemType::ProcAttribute => ItemSection::AttributeMacros,\n+        ItemType::ProcDerive => ItemSection::DeriveMacros,\n+        ItemType::TraitAlias => ItemSection::TraitAliases,\n         ItemType::Generic => unreachable!(),\n     }\n }\n \n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    // Re-exports are handled a bit differently because they can be extern crates or imports.\n-    if items.iter().any(|it| {\n-        it.name.is_some()\n-            && (it.type_() == ItemType::ExternCrate\n-                || (it.type_() == ItemType::Import && !it.is_stripped()))\n-    }) {\n-        let (id, name) = item_ty_to_strs(ItemType::Import);\n-        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n-    }\n-\n-    // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n-    // to print its headings\n-    for &myty in &[\n-        ItemType::Primitive,\n-        ItemType::Module,\n-        ItemType::Macro,\n-        ItemType::Struct,\n-        ItemType::Enum,\n-        ItemType::Constant,\n-        ItemType::Static,\n-        ItemType::Trait,\n-        ItemType::Function,\n-        ItemType::Typedef,\n-        ItemType::Union,\n-        ItemType::Impl,\n-        ItemType::TyMethod,\n-        ItemType::Method,\n-        ItemType::StructField,\n-        ItemType::Variant,\n-        ItemType::AssocType,\n-        ItemType::AssocConst,\n-        ItemType::ForeignType,\n-        ItemType::Keyword,\n-    ] {\n-        if items.iter().any(|it| !it.is_stripped() && it.type_() == myty && it.name.is_some()) {\n-            let (id, name) = item_ty_to_strs(myty);\n-            sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n-        }\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| !it.is_stripped() && it.name.is_some())\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+    for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n+        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n     }\n \n     if !sidebar.is_empty() {\n@@ -2567,7 +2659,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n         w,\n         \"<div class=\\\"docblock scraped-example-list\\\">\\\n           <span></span>\\\n-          <h5 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n+          <h5 id=\\\"{id}\\\">\\\n              <a href=\\\"#{id}\\\">Examples found in repository</a>\\\n           </h5>\",\n         id = id"}, {"sha": "2ae7626b886445b2d140b14e6dd6f34bcd66edf0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -16,10 +16,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n-    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n-    ImplRenderingParameters,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_section,\n+    notable_traits_decl, render_assoc_item, render_assoc_items, render_attributes_in_code,\n+    render_attributes_in_pre, render_impl, render_stability_since_raw, write_srclink,\n+    AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n use crate::formats::item_type::ItemType;\n@@ -221,7 +221,9 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     ) -> Ordering {\n         let ty1 = i1.type_();\n         let ty2 = i2.type_();\n-        if ty1 != ty2 {\n+        if item_ty_to_section(ty1) != item_ty_to_section(ty2)\n+            || (ty1 != ty2 && (ty1 == ItemType::ExternCrate || ty2 == ItemType::ExternCrate))\n+        {\n             return (reorder(ty1), idx1).cmp(&(reorder(ty2), idx2));\n         }\n         let s1 = i1.stability(tcx).as_ref().map(|s| s.level);\n@@ -270,32 +272,28 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     });\n \n     debug!(\"{:?}\", indices);\n-    let mut curty = None;\n+    let mut last_section = None;\n \n     for &idx in &indices {\n         let myitem = &items[idx];\n         if myitem.is_stripped() {\n             continue;\n         }\n \n-        let myty = Some(myitem.type_());\n-        if curty == Some(ItemType::ExternCrate) && myty == Some(ItemType::Import) {\n-            // Put `extern crate` and `use` re-exports in the same section.\n-            curty = myty;\n-        } else if myty != curty {\n-            if curty.is_some() {\n+        let my_section = item_ty_to_section(myitem.type_());\n+        if Some(my_section) != last_section {\n+            if last_section.is_some() {\n                 w.write_str(ITEM_TABLE_CLOSE);\n             }\n-            curty = myty;\n-            let (short, name) = item_ty_to_strs(myty.unwrap());\n+            last_section = Some(my_section);\n             write!(\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n                  </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,\n-                id = cx.derive_id(short.to_owned()),\n-                name = name\n+                id = cx.derive_id(my_section.id().to_owned()),\n+                name = my_section.name(),\n             );\n         }\n \n@@ -407,7 +405,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n         }\n     }\n \n-    if curty.is_some() {\n+    if last_section.is_some() {\n         w.write_str(ITEM_TABLE_CLOSE);\n     }\n }"}, {"sha": "78e7c97d71d258ea951263fd03a7f034c07d83da", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -1141,16 +1141,6 @@ a.test-arrow {\n a.test-arrow:hover{\n \ttext-decoration: none;\n }\n-.section-header:hover a:before {\n-\tposition: absolute;\n-\tleft: -25px;\n-\tpadding-right: 10px; /* avoid gap that causes hover to disappear */\n-\tcontent: '\\2002\\00a7\\2002';\n-}\n-\n-.section-header:hover a {\n-\ttext-decoration: none;\n-}\n \n .code-attribute {\n \tfont-weight: 300;\n@@ -1196,17 +1186,6 @@ h3.variant {\n \tmargin-top: 3px;\n }\n \n-.top-doc .docblock > .section-header:first-child {\n-\tmargin-left: 15px;\n-}\n-.top-doc .docblock > .section-header:first-child:hover > a:before {\n-\tleft: -10px;\n-}\n-\n-.docblock > .section-header:first-child {\n-\tmargin-top: 0;\n-}\n-\n :target > code, :target > .code-header {\n \topacity: 1;\n }"}, {"sha": "e9b28504a907a4c5fa02769f49ab0d15180b89e9", "filename": "src/test/run-make-fulldeps/atomic-lock-free/atomic_lock_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -1,4 +1,4 @@\n-#![feature(cfg_target_has_atomic, no_core, intrinsics, lang_items)]\n+#![feature(no_core, intrinsics, lang_items)]\n #![crate_type=\"rlib\"]\n #![no_core]\n "}, {"sha": "ddfb23a4f86ba555a3cf20f84c2111e68a02356f", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -31,46 +31,4 @@ assert-css: (\"h2#implementations a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n move-cursor-to: \"#impl\"\n assert-css: (\"#impl a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n \n-// Now we check the positions: only the first heading of the top doc comment should\n-// have a different position.\n-move-cursor-to: \".top-doc .docblock .section-header:first-child\"\n-assert-css: (\n-    \".top-doc .docblock .section-header:first-child > a::before\",\n-    {\"left\": \"-10px\", \"padding-right\": \"10px\"},\n-)\n-// We also check that the heading itself has a different indent.\n-assert-css: (\".top-doc .docblock .section-header:first-child\", {\"margin-left\": \"15px\"})\n-\n-move-cursor-to: \".top-doc .docblock .section-header:not(:first-child)\"\n-assert-css: (\n-    \".top-doc .docblock .section-header:not(:first-child) > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n-)\n-assert-css: (\".top-doc .docblock .section-header:not(:first-child)\", {\"margin-left\": \"0px\"})\n-\n-// Now let's check some other docblock headings...\n-// First the impl block docs.\n-move-cursor-to: \"#title-for-struct-impl-doc\"\n-assert-css: (\n-    \"#title-for-struct-impl-doc > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n-)\n-assert-css: (\"#title-for-struct-impl-doc\", {\"margin-left\": \"0px\"})\n-// Now a method docs.\n-move-cursor-to: \"#title-for-struct-impl-item-doc\"\n-assert-css: (\n-    \"#title-for-struct-impl-item-doc > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n-)\n assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n-\n-// Finally, we want to ensure that if the first element of the doc block isn't a heading,\n-// if there is a heading afterwards, it won't have the indent.\n-goto: file://|DOC_PATH|/test_docs/enum.WhoLetTheDogOut.html\n-\n-move-cursor-to: \".top-doc .docblock .section-header\"\n-assert-css: (\n-    \".top-doc .docblock .section-header > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n-)\n-assert-css: (\".top-doc .docblock .section-header\", {\"margin-left\": \"0px\"})"}, {"sha": "cf9caa2d5866a150ad2da9e3d88fe02a500c1682", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -40,7 +40,8 @@ goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n+// We select headings (h2, h3, h...).\n+assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n \n // Dark theme\n local-storage: {\n@@ -78,7 +79,8 @@ goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n+// We select headings (h2, h3, h...).\n+assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n \n // Light theme\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n@@ -111,4 +113,5 @@ goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)\n+// We select headings (h2, h3, h...).\n+assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)"}, {"sha": "a0c657d9a054d09bede9897ac1ab835fb275a474", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -8,7 +8,7 @@ use std::fmt::Debug;\n // @has foo/all.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n // @has foo/all.html '//a[@href=\"traitalias.Foo.html\"]' 'Foo'\n \n-// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait aliases'\n+// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait Aliases'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'CopyAlias'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'"}, {"sha": "e1cf7b579aa5a3a2336281f538c2e38bb604a6f9", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,15 @@\n+trait AlwaysApplicable {\n+    type Assoc;\n+}\n+impl<T: ?Sized> AlwaysApplicable for T {\n+    type Assoc = usize;\n+}\n+\n+trait BindsParam<T> {\n+    type ArrayTy;\n+}\n+impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+    type ArrayTy = [u8; Self::MAX]; //~ ERROR generic `Self` types\n+}\n+\n+fn main() {}"}, {"sha": "bda88597006803a96e5e7902816205e50478f6fc", "filename": "src/test/ui/const-generics/min_const_generics/forbid-self-no-normalize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-self-no-normalize.stderr?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/forbid-self-no-normalize.rs:12:25\n+   |\n+LL |     type ArrayTy = [u8; Self::MAX];\n+   |                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/forbid-self-no-normalize.rs:11:27\n+   |\n+LL | impl<T> BindsParam<T> for <T as AlwaysApplicable>::Assoc {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3d692a070019747004ffd8597a99d11d198815bd", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    cfg!(target_has_atomic_equal_alignment = \"8\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"16\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"32\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"64\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"128\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+}"}, {"sha": "8ad3b034aa51ffbef802c515cecfcce98c6e5de1", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/502d6aa47b4118fea1e326529e71b25a99b0d6c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr?ref=502d6aa47b4118fea1e326529e71b25a99b0d6c5", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:2:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"8\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:4:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"16\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:6:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"32\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:8:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"64\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:10:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"128\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:12:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "049fdd84d8c22e71a8dae4a329b97cfbe60f74fe", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/56cd04af5c389b6ab676ba16f59d9f70bc465090/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56cd04af5c389b6ab676ba16f59d9f70bc465090/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=56cd04af5c389b6ab676ba16f59d9f70bc465090", "patch": "@@ -1,118 +0,0 @@\n-#![feature(intrinsics, lang_items, no_core, rustc_attrs)]\n-\n-#![crate_type=\"rlib\"]\n-#![no_core]\n-\n-extern \"rust-intrinsic\" {\n-    fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n-}\n-\n-#[lang = \"sized\"]\n-trait Sized {}\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n-#[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u8(x: *mut u8) {\n-    atomic_xadd(x, 1);\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i8(x: *mut i8) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u16(x: *mut u16) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i16(x: *mut i16) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u32(x: *mut u32) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i32(x: *mut i32) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u64(x: *mut u64) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i64(x: *mut i64) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u128(x: *mut u128) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i128(x: *mut i128) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_usize(x: *mut usize) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_isize(x: *mut isize) {\n-    atomic_xadd(x, 1);\n-}\n-\n-fn main() {\n-    cfg!(target_has_atomic = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-}\n-\n-#[macro_export]\n-#[rustc_builtin_macro]\n-macro_rules! cfg { () => () }"}, {"sha": "16e1dc644008433ca55be33c2449b5fed9309028", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "removed", "additions": 0, "deletions": 273, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/56cd04af5c389b6ab676ba16f59d9f70bc465090/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56cd04af5c389b6ab676ba16f59d9f70bc465090/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=56cd04af5c389b6ab676ba16f59d9f70bc465090", "patch": "@@ -1,273 +0,0 @@\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:15:7\n-   |\n-LL | #[cfg(target_has_atomic = \"8\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:21:7\n-   |\n-LL | #[cfg(target_has_atomic = \"8\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:26:7\n-   |\n-LL | #[cfg(target_has_atomic = \"16\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:31:7\n-   |\n-LL | #[cfg(target_has_atomic = \"16\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:36:7\n-   |\n-LL | #[cfg(target_has_atomic = \"32\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:41:7\n-   |\n-LL | #[cfg(target_has_atomic = \"32\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:46:7\n-   |\n-LL | #[cfg(target_has_atomic = \"64\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:51:7\n-   |\n-LL | #[cfg(target_has_atomic = \"64\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:56:7\n-   |\n-LL | #[cfg(target_has_atomic = \"128\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:61:7\n-   |\n-LL | #[cfg(target_has_atomic = \"128\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:66:7\n-   |\n-LL | #[cfg(target_has_atomic = \"ptr\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:71:7\n-   |\n-LL | #[cfg(target_has_atomic = \"ptr\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n-   |\n-LL |     cfg!(target_has_atomic = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n-   |\n-LL |     cfg!(target_has_atomic = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n-   |\n-LL |     cfg!(target_has_atomic = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n-   |\n-LL |     cfg!(target_has_atomic = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n-   |\n-LL |     cfg!(target_has_atomic = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:88:10\n-   |\n-LL |     cfg!(target_has_atomic = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:90:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:92:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:94:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:96:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:98:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:100:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:102:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:104:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:106:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:108:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:110:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:112:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error: aborting due to 30 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}