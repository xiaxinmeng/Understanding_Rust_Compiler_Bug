{"sha": "1716932743a7b3705cbf0c34db0c4e070ed1930d", "node_id": "C_kwDOAAsO6NoAKDE3MTY5MzI3NDNhN2IzNzA1Y2JmMGMzNGRiMGM0ZTA3MGVkMTkzMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T17:40:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T17:40:52Z"}, "message": "Auto merge of #109130 - matthiaskrgr:rollup-dm3jza6, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108722 (Support for Fuchsia RISC-V target)\n - #108880 (Remove tests/ui/impl-trait/in-trait/new-lowering-strategy in favor of using revisions on existing tests)\n - #108909 (Fix object safety checks for new RPITITs)\n - #108915 (Remove some direct calls to local_def_id_to_hir_id on diagnostics)\n - #108923 (Make fns from other crates with RPITIT work for -Zlower-impl-trait-in-trait-to-assoc-ty)\n - #109101 (Fall back to old metadata computation when type references errors)\n - #109105 (Don't ICE for late-bound consts across `AnonConstBoundary`)\n - #109110 (Don't codegen impossible to satisfy impls)\n - #109116 (Emit diagnostic when calling methods on the unit type in method chains)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3a1d0b0801e72f0229b3b7f9ba9489252d7c7b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a1d0b0801e72f0229b3b7f9ba9489252d7c7b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1716932743a7b3705cbf0c34db0c4e070ed1930d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1716932743a7b3705cbf0c34db0c4e070ed1930d", "html_url": "https://github.com/rust-lang/rust/commit/1716932743a7b3705cbf0c34db0c4e070ed1930d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1716932743a7b3705cbf0c34db0c4e070ed1930d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "html_url": "https://github.com/rust-lang/rust/commit/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5"}, {"sha": "b17ee106d8d6c3402020c72b703455305432b759", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17ee106d8d6c3402020c72b703455305432b759", "html_url": "https://github.com/rust-lang/rust/commit/b17ee106d8d6c3402020c72b703455305432b759"}], "stats": {"total": 718, "additions": 612, "deletions": 106}, "files": [{"sha": "3c4fc9cb530a453f620ac042ce7274884514cbfc", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -404,8 +404,12 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n+            // We use this name when collecting `ModChild`s.\n+            // FIXME this could probably be removed with some refactoring to the name resolver.\n+            ImplTraitAssocTy => Some(kw::Empty),\n+\n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait | ImplTraitAssocTy => None,\n+            | ImplTrait => None,\n         }\n     }\n "}, {"sha": "f830269b45daedef9a1d45c48f9cbc756a1a99f3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1440,6 +1440,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.associated_items(pred.def_id())\n                                 .in_definition_order()\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n+                                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n                                 .map(|item| item.def_id),\n                         );\n                     }"}, {"sha": "465ae047de3735babcfabc9788853200bba2e741", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1427,25 +1427,25 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             if let ResolvedArg::LateBound(..) = def && crossed_anon_const {\n                 let use_span = self.tcx.hir().span(hir_id);\n                 let def_span = self.tcx.def_span(param_def_id);\n-                match self.tcx.def_kind(param_def_id) {\n+                let guar = match self.tcx.def_kind(param_def_id) {\n                     DefKind::ConstParam => {\n                         self.tcx.sess.emit_err(errors::CannotCaptureLateBoundInAnonConst::Const {\n                             use_span,\n                             def_span,\n-                        });\n+                        })\n                     }\n                     DefKind::TyParam => {\n                         self.tcx.sess.emit_err(errors::CannotCaptureLateBoundInAnonConst::Type {\n                             use_span,\n                             def_span,\n-                        });\n+                        })\n                     }\n                     _ => unreachable!(),\n-                }\n-                return;\n+                };\n+                self.map.defs.insert(hir_id, ResolvedArg::Error(guar));\n+            } else {\n+                self.map.defs.insert(hir_id, def);\n             }\n-\n-            self.map.defs.insert(hir_id, def);\n             return;\n         }\n "}, {"sha": "0ec10dc9ea32d200d58b3bd09f2a3fd0fe8614b3", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.emit_type_mismatch_suggestions(err, expr, expr_ty, expected, expected_ty_expr, error);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n-        self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n+        self.note_internal_mutation_in_method(err, expr, Some(expected), expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n         self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n         self.check_wrong_return_type_due_to_generic_arg(err, expr, expr_ty);"}, {"sha": "ac73cd7cc6e17a35564be2b6ed6888d2876d312e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -950,44 +950,75 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n-        expected: Ty<'tcx>,\n+        expected: Option<Ty<'tcx>>,\n         found: Ty<'tcx>,\n     ) {\n         if found != self.tcx.types.unit {\n             return;\n         }\n-        if let ExprKind::MethodCall(path_segment, rcvr, ..) = expr.kind {\n-            if self\n-                .typeck_results\n+\n+        let ExprKind::MethodCall(path_segment, rcvr, ..) = expr.kind else {\n+            return;\n+        };\n+\n+        let rcvr_has_the_expected_type = self\n+            .typeck_results\n+            .borrow()\n+            .expr_ty_adjusted_opt(rcvr)\n+            .and_then(|ty| expected.map(|expected_ty| expected_ty.peel_refs() == ty.peel_refs()))\n+            .unwrap_or(false);\n+\n+        let prev_call_mutates_and_returns_unit = || {\n+            self.typeck_results\n                 .borrow()\n-                .expr_ty_adjusted_opt(rcvr)\n-                .map_or(true, |ty| expected.peel_refs() != ty.peel_refs())\n-            {\n-                return;\n-            }\n-            let mut sp = MultiSpan::from_span(path_segment.ident.span);\n-            sp.push_span_label(\n-                path_segment.ident.span,\n-                format!(\n-                    \"this call modifies {} in-place\",\n-                    match rcvr.kind {\n-                        ExprKind::Path(QPath::Resolved(\n-                            None,\n-                            hir::Path { segments: [segment], .. },\n-                        )) => format!(\"`{}`\", segment.ident),\n-                        _ => \"its receiver\".to_string(),\n-                    }\n-                ),\n-            );\n+                .type_dependent_def_id(expr.hir_id)\n+                .map(|def_id| self.tcx.fn_sig(def_id).skip_binder().skip_binder())\n+                .and_then(|sig| sig.inputs_and_output.split_last())\n+                .map(|(output, inputs)| {\n+                    output.is_unit()\n+                        && inputs\n+                            .get(0)\n+                            .and_then(|self_ty| self_ty.ref_mutability())\n+                            .map_or(false, rustc_ast::Mutability::is_mut)\n+                })\n+                .unwrap_or(false)\n+        };\n+\n+        if !(rcvr_has_the_expected_type || prev_call_mutates_and_returns_unit()) {\n+            return;\n+        }\n+\n+        let mut sp = MultiSpan::from_span(path_segment.ident.span);\n+        sp.push_span_label(\n+            path_segment.ident.span,\n+            format!(\n+                \"this call modifies {} in-place\",\n+                match rcvr.kind {\n+                    ExprKind::Path(QPath::Resolved(\n+                        None,\n+                        hir::Path { segments: [segment], .. },\n+                    )) => format!(\"`{}`\", segment.ident),\n+                    _ => \"its receiver\".to_string(),\n+                }\n+            ),\n+        );\n+\n+        let modifies_rcvr_note =\n+            format!(\"method `{}` modifies its receiver in-place\", path_segment.ident);\n+        if rcvr_has_the_expected_type {\n             sp.push_span_label(\n                 rcvr.span,\n                 \"you probably want to use this value after calling the method...\",\n             );\n+            err.span_note(sp, &modifies_rcvr_note);\n+            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+        } else if let ExprKind::MethodCall(..) = rcvr.kind {\n             err.span_note(\n                 sp,\n-                &format!(\"method `{}` modifies its receiver in-place\", path_segment.ident),\n+                modifies_rcvr_note.clone() + \", it is not meant to be used in method chains.\",\n             );\n-            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+        } else {\n+            err.span_note(sp, &modifies_rcvr_note);\n         }\n     }\n "}, {"sha": "50f2b71250c015c3894f06131e158f31d8f20d92", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -416,6 +416,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 probe.is_ok()\n             });\n+\n+            self.note_internal_mutation_in_method(\n+                &mut err,\n+                rcvr_expr,\n+                expected.to_option(&self),\n+                rcvr_ty,\n+            );\n         }\n \n         let mut custom_span_label = false;"}, {"sha": "59e2e57e6c25a2d6ebf3c0e57247224c15f5b670", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1356,13 +1356,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_impl_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n-        self.tables.impl_defaultness.set_some(def_id.index, ast_item.defaultness);\n+        let defaultness = self.tcx.impl_defaultness(def_id.expect_local());\n+        self.tables.impl_defaultness.set_some(def_id.index, defaultness);\n         let impl_item = self.tcx.associated_item(def_id);\n         self.tables.assoc_container.set_some(def_id.index, impl_item.container);\n \n         match impl_item.kind {\n             ty::AssocKind::Fn => {\n+                let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n                 self.tables.asyncness.set_some(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));"}, {"sha": "8a4c10cd71c03c5b31a882e0c550199eaee69900", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -316,7 +316,7 @@ impl<'hir> Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     #[inline]\n     pub fn find_by_def_id(self, id: LocalDefId) -> Option<Node<'hir>> {\n-        self.find(self.local_def_id_to_hir_id(id))\n+        self.find(self.tcx.opt_local_def_id_to_hir_id(id)?)\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n@@ -333,7 +333,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_if_local(self, id: DefId) -> Option<Node<'hir>> {\n-        id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))\n+        id.as_local().and_then(|id| self.find(self.tcx.opt_local_def_id_to_hir_id(id)?))\n     }\n \n     pub fn get_generics(self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {"}, {"sha": "42fb5d031bbc9d17104b454b2d959c640e88f6db", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -730,7 +730,11 @@ where\n                         */\n                     };\n \n-                    let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+                    let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type()\n+                        // Projection eagerly bails out when the pointee references errors,\n+                        // fall back to structurally deducing metadata.\n+                        && !pointee.references_error()\n+                    {\n                         let metadata = tcx.normalize_erasing_regions(\n                             cx.param_env(),\n                             tcx.mk_projection(metadata_def_id, [pointee]),"}, {"sha": "aff27e5664b75127fe1542d8b662d7ef45dfadb9", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1326,6 +1326,21 @@ fn create_mono_items_for_default_impls<'tcx>(\n         return;\n     }\n \n+    // Unlike 'lazy' monomorphization that begins by collecting items transitively\n+    // called by `main` or other global items, when eagerly monomorphizing impl\n+    // items, we never actually check that the predicates of this impl are satisfied\n+    // in a empty reveal-all param env (i.e. with no assumptions).\n+    //\n+    // Even though this impl has no substitutions, because we don't consider higher-\n+    // ranked predicates such as `for<'a> &'a mut [u8]: Copy` to be trivially false,\n+    // we must now check that the impl has no impossible-to-satisfy predicates.\n+    if tcx.subst_and_check_impossible_predicates((\n+        item.owner_id.to_def_id(),\n+        &InternalSubsts::identity_for_item(tcx, item.owner_id.to_def_id()),\n+    )) {\n+        return;\n+    }\n+\n     let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) else {\n         return;\n     };"}, {"sha": "f3304e9142920cf79f731476ad606069e6148514", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1115,6 +1115,7 @@ supported_targets! {\n     // FIXME(#106649): Remove aarch64-fuchsia in favor of aarch64-unknown-fuchsia\n     (\"aarch64-fuchsia\", aarch64_fuchsia),\n     (\"aarch64-unknown-fuchsia\", aarch64_unknown_fuchsia),\n+    (\"riscv64gc-unknown-fuchsia\", riscv64gc_unknown_fuchsia),\n     // FIXME(#106649): Remove x86_64-fuchsia in favor of x86_64-unknown-fuchsia\n     (\"x86_64-fuchsia\", x86_64_fuchsia),\n     (\"x86_64-unknown-fuchsia\", x86_64_unknown_fuchsia),"}, {"sha": "ab7c08958fa8868e95a99cdc295aa3449ee201f5", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_fuchsia.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{CodeModel, SanitizerSet, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"riscv64gc-unknown-fuchsia\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"riscv64\".into(),\n+        options: TargetOptions {\n+            code_model: Some(CodeModel::Medium),\n+            cpu: \"generic-rv64\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            supported_sanitizers: SanitizerSet::SHADOWCALLSTACK,\n+            ..super::fuchsia_base::opts()\n+        },\n+    }\n+}"}, {"sha": "277926688e21d51f7038bb277bef412ec5d809fd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -144,6 +144,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n+        if self.tcx.opt_rpitit_info(obligation.cause.body_id.to_def_id()).is_some() {\n+            return OnUnimplementedNote::default();\n+        }\n+\n         let (def_id, substs) = self\n             .impl_similar_to(trait_ref, obligation)\n             .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));"}, {"sha": "a5def4151bfda5d2d73ccb75388a4f2080204a05", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -13,7 +13,6 @@ use super::{elaborate_predicates, elaborate_trait_ref};\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n-use hir::def::DefKind;\n use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -157,6 +156,7 @@ fn object_safety_violations_for_trait(\n                 .in_definition_order()\n                 .filter(|item| item.kind == ty::AssocKind::Type)\n                 .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n                 .map(|item| {\n                     let ident = item.ident(tcx);\n                     ObjectSafetyViolation::GAT(ident.name, ident.span)\n@@ -854,7 +854,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n                     }\n                 }\n                 ty::Alias(ty::Projection, ref data)\n-                    if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n+                    if self.tcx.is_impl_trait_in_trait(data.def_id) =>\n                 {\n                     // We'll deny these later in their own pass\n                     ControlFlow::Continue(())\n@@ -921,7 +921,7 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && tcx.is_impl_trait_in_trait(proj.def_id)\n         {\n             Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.def_id)))\n         } else {"}, {"sha": "a28161245384c033812c60d899001a80e5bdae14", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -328,6 +328,9 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     // `opt_local_def_id_to_hir_id` with `None`.\n     impl_assoc_ty.opt_local_def_id_to_hir_id(None);\n \n+    // Copy span of the opaque.\n+    impl_assoc_ty.def_ident_span(Some(span));\n+\n     impl_assoc_ty.associated_item(ty::AssocItem {\n         name: kw::Empty,\n         kind: ty::AssocKind::Type,\n@@ -342,6 +345,9 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     // extra predicates to assume.\n     impl_assoc_ty.param_env(tcx.param_env(impl_fn_def_id));\n \n+    // Copy visility of the containing function.\n+    impl_assoc_ty.visibility(tcx.visibility(impl_fn_def_id));\n+\n     // Copy impl_defaultness of the containing function.\n     impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n "}, {"sha": "1788f544a7f9a1ccddaa973c7a346264ac3e7b23", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -156,7 +156,11 @@ fn layout_of_uncached<'tcx>(\n \n             let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n \n-            let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+            let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type()\n+                // Projection eagerly bails out when the pointee references errors,\n+                // fall back to structurally deducing metadata.\n+                && !pointee.references_error()\n+            {\n                 let metadata_ty = tcx.normalize_erasing_regions(\n                     param_env,\n                     tcx.mk_projection(metadata_def_id, [pointee]),"}, {"sha": "2d74a2240969ccf0ee94f22d795374e68834588e", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -295,6 +295,7 @@ target | std | host | notes\n [`riscv32imac-unknown-xous-elf`](platform-support/riscv32imac-unknown-xous-elf.md) | ? |  | RISC-V Xous (RV32IMAC ISA)\n `riscv32imc-esp-espidf` | \u2713 |  | RISC-V ESP-IDF\n `riscv64gc-unknown-freebsd` |   |   | RISC-V FreeBSD\n+`riscv64gc-unknown-fuchsia` |   |   | RISC-V Fuchsia\n `riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n [`riscv64gc-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/riscv64\n `s390x-unknown-linux-musl` |  |  | S390x Linux (kernel 3.2, MUSL)"}, {"sha": "89ca4039bce9120da804cab91ee7ca3b96aca955", "filename": "tests/ui/async-await/in-trait/async-associated-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(impl_trait_projections)]"}, {"sha": "cdecb02bfad1e53d773eeb13fc3b4eefe4baa2da", "filename": "tests/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,11 +1,11 @@\n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n    |\n LL |     async fn foo(&self) -> i32 {\n    |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n    |\n note: type in trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n    |\n LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected signature `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found signature `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "7b53379b24b784cd49d90eb2ee9f76038637a7ac", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-boxed.rs:15:5\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.stderr"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "916488ffafaf45a3d9c30fd9bfd3b05b3f055e54", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "edac0b374a3259ade7e9ae67f5e47e940ffbd241", "filename": "tests/ui/async-await/in-trait/async-example-desugared-extra.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "934f7643dd1c9c43fe077cc843724dbb5dacd11d", "filename": "tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-manual.rs:23:5\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.stderr"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> MyFuture {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4883828d32fef979507020e6b9313910e5839e3f", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "214171b2e2cba01403af4c80f75c4e6418e7b646", "filename": "tests/ui/async-await/in-trait/async-example-desugared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive-generic.rs:11:48\n+  --> $DIR/async-recursive-generic.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> T {\n    |                                                ^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive-generic.stderr"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "64c6ba15c0cf0d9f528e89065e99ebc93ce86e27", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive.rs:11:48\n+  --> $DIR/async-recursive.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n    |                                                ^^^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive.stderr"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "d928909e3ae5bc7f25b2a84203a8905b56cbf3f4", "filename": "tests/ui/async-await/in-trait/async-recursive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n@@ -14,7 +14,7 @@ LL |     async fn bar(&abc self);\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:3:12\n+  --> $DIR/bad-signatures.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/bad-signatures.stderr"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.next.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected one of `:`, `@`, or `|`, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                  -----^^^^\n+   |                  |    |\n+   |                  |    expected one of `:`, `@`, or `|`\n+   |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-signatures.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "e0093be8cb33fdb3a44d7b75c4115f359f48982e", "filename": "tests/ui/async-await/in-trait/bad-signatures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete"}, {"sha": "30843473defc77dac6578d54a4b12459d35ac461", "filename": "tests/ui/async-await/in-trait/early-bound-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1c5a68c2a5adfb6be7e82c48e0c4604629627e53", "filename": "tests/ui/async-await/in-trait/early-bound-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n-  --> $DIR/fn-not-async-err2.rs:13:22\n+  --> $DIR/fn-not-async-err2.rs:15:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n+  --> $DIR/fn-not-async-err2.rs:15:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "5fdb7296aaf97d2133ace7c2f033dc6b96e8ca34", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "45ada1d84c320cb574d1c3f81dac0b1377b5322a", "filename": "tests/ui/async-await/in-trait/implied-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "ced30b7e4e4b99866ff146301ff57365bbec0e80", "filename": "tests/ui/async-await/in-trait/issue-102138.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "f3fdfa3459aeaf3949b3bde0385618c66a66205d", "filename": "tests/ui/async-await/in-trait/issue-102219.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,6 +1,8 @@\n // compile-flags:--crate-type=lib\n // edition:2021\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:3:12\n+  --> $DIR/object-safety.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:11:12\n+  --> $DIR/object-safety.rs:13:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:14\n+  --> $DIR/object-safety.rs:9:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/async-await/in-trait/object-safety.stderr"}, {"sha": "90e049a99606f69d20f6256d2d47381d2f34184a", "filename": "tests/ui/async-await/in-trait/object-safety.next.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:13:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:9:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "f67286a20a24404be9d829f5925dfba5ae85fb2b", "filename": "tests/ui/async-await/in-trait/object-safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "1ea32ed2c4fac33d8ba2ce6d3809953f473c49c8", "filename": "tests/ui/codegen/mono-impossible.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fcodegen%2Fmono-impossible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fcodegen%2Fmono-impossible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcodegen%2Fmono-impossible.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Clink-dead-code=on --crate-type=lib\n+// build-pass\n+\n+// Make sure that we don't monomorphize the impossible method `<() as Visit>::visit`,\n+// which does not hold under a reveal-all param env.\n+\n+pub trait Visit {\n+    fn visit() {}\n+}\n+\n+pub trait Array<'a> {}\n+\n+impl Visit for () where (): for<'a> Array<'a> {}"}, {"sha": "5c9d2e356fc7048fb301b9ff7898497599038ab0", "filename": "tests/ui/impl-trait/in-trait/deep-match-works.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n@@ -10,7 +12,9 @@ trait Foo {\n }\n \n impl Foo for () {\n-    fn bar() -> Wrapper<i32> { Wrapper(0) }\n+    fn bar() -> Wrapper<i32> {\n+        Wrapper(0)\n+    }\n }\n \n fn main() {}"}, {"sha": "400db20c79c928fe1f863df3f8e146b34816d3b4", "filename": "tests/ui/impl-trait/in-trait/deep-match.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,7 +1,7 @@\n error[E0053]: method `bar` has an incompatible return type for trait\n-  --> $DIR/deep-match.rs:11:17\n+  --> $DIR/deep-match.rs:14:17\n    |\n-LL |     fn bar() -> i32 { 0 }\n+LL |     fn bar() -> i32 {\n    |                 ^^^\n    |                 |\n    |                 expected `Wrapper<_>`, found `i32`", "previous_filename": "tests/ui/impl-trait/in-trait/deep-match.stderr"}, {"sha": "400db20c79c928fe1f863df3f8e146b34816d3b4", "filename": "tests/ui/impl-trait/in-trait/deep-match.next.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,15 @@\n+error[E0053]: method `bar` has an incompatible return type for trait\n+  --> $DIR/deep-match.rs:14:17\n+   |\n+LL |     fn bar() -> i32 {\n+   |                 ^^^\n+   |                 |\n+   |                 expected `Wrapper<_>`, found `i32`\n+   |                 return type in trait\n+   |\n+   = note: expected struct `Wrapper<_>`\n+                found type `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "413d054e148a6f8f8a75040c3355397ab642182b", "filename": "tests/ui/impl-trait/in-trait/deep-match.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n \n@@ -8,8 +11,10 @@ trait Foo {\n }\n \n impl Foo for () {\n-    fn bar() -> i32 { 0 }\n-    //~^ ERROR method `bar` has an incompatible return type for trait\n+    fn bar() -> i32 {\n+        //~^ ERROR method `bar` has an incompatible return type for trait\n+        0\n+    }\n }\n \n fn main() {}"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:3:12\n+  --> $DIR/default-method-binder-shifting.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.stderr"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-binder-shifting.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "75b0ec939847af189e9b2423f18ad6f7fe5a4bbd", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "98aaf4a6553f53c454123f8d4fecbcbb2817c0f3", "filename": "tests/ui/impl-trait/in-trait/encode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // build-pass\n // compile-flags: --crate-type=lib\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "df77372aabdfcf51bcda7bf479eb8fd62c3bb7f8", "filename": "tests/ui/impl-trait/in-trait/foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // aux-build: rpitit.rs\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n extern crate rpitit;\n "}, {"sha": "7aa7880e258839df79df9fa5047e0db92de10cc6", "filename": "tests/ui/impl-trait/in-trait/issue-102140.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:22\n+  --> $DIR/issue-102140.rs:26:22\n    |\n LL |         MyTrait::foo(&self)\n    |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n@@ -13,15 +13,15 @@ LL +         MyTrait::foo(self)\n    |\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:9\n+  --> $DIR/issue-102140.rs:26:9\n    |\n LL |         MyTrait::foo(&self)\n    |         ^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n    |\n    = help: the trait `MyTrait` is implemented for `Outer`\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n-  --> $DIR/issue-102140.rs:23:9\n+  --> $DIR/issue-102140.rs:26:9\n    |\n LL |         MyTrait::foo(&self)\n    |         ^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102140.stderr"}, {"sha": "7aa7880e258839df79df9fa5047e0db92de10cc6", "filename": "tests/ui/impl-trait/in-trait/issue-102140.next.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:22\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+help: consider removing the leading `&`-reference\n+   |\n+LL -         MyTrait::foo(&self)\n+LL +         MyTrait::foo(self)\n+   |\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:26:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4dcac4f5b0eac053d885a1656dd031e17f45a9ef", "filename": "tests/ui/impl-trait/in-trait/issue-102140.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "ae09d20f6f5b76ae721a5653618b9155abe1d638", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-impl-trait.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs?ref=2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "patch": "@@ -1,17 +0,0 @@\n-// check-pass\n-// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n-\n-#![feature(return_position_impl_trait_in_trait)]\n-#![allow(incomplete_features)]\n-\n-trait Foo {\n-    fn foo() -> impl Sized;\n-}\n-\n-impl Foo for String {\n-    fn foo() -> i32 {\n-        22\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "dfce973d770b906b4449ca539625ba9699b9a10d", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-trait.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs?ref=2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n-\n-#![feature(return_position_impl_trait_in_trait)]\n-#![allow(incomplete_features)]\n-\n-trait Foo {\n-    fn foo() -> impl Sized;\n-}\n-\n-fn main() {}"}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:33\n+  --> $DIR/object-safety.rs:20:33\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -14,13 +14,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:20:13\n+  --> $DIR/object-safety.rs:23:13\n    |\n LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -29,13 +29,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:13\n+  --> $DIR/object-safety.rs:20:13\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/impl-trait/in-trait/object-safety.stderr"}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,50 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:33\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:23:13\n+   |\n+LL |     let s = i.baz();\n+   |             ^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:13\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n+   = note: required by cast to type `Box<dyn Foo>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "016a0aaae4b6e4b4cd0ec18521f613d4bec8f16a", "filename": "tests/ui/impl-trait/in-trait/object-safety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "a57653b2c9ed76ddb212df8a2a77c2a817326289", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/opaque-in-impl-is-opaque.rs:17:19\n+  --> $DIR/opaque-in-impl-is-opaque.rs:20:19\n    |\n LL |     fn bar(&self) -> impl Display {\n    |                      ------------ the found opaque type", "previous_filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.stderr"}, {"sha": "a57653b2c9ed76ddb212df8a2a77c2a817326289", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/opaque-in-impl-is-opaque.rs:20:19\n+   |\n+LL |     fn bar(&self) -> impl Display {\n+   |                      ------------ the found opaque type\n+...\n+LL |     let x: &str = ().bar();\n+   |            ----   ^^^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl std::fmt::Display`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c07ece15a8324a919797365665493663e62a87f1", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "1f42ec744dbe8031a1e3d4c38de3dae8fd036169", "filename": "tests/ui/impl-trait/in-trait/reveal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "eba270af7f0ee918d853f73cfe3345dde343fbb0", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/signature-mismatch.rs:15:5\n+  --> $DIR/signature-mismatch.rs:17:5\n    |\n LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n    |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`", "previous_filename": "tests/ui/impl-trait/in-trait/signature-mismatch.stderr"}, {"sha": "eba270af7f0ee918d853f73cfe3345dde343fbb0", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.next.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,16 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/signature-mismatch.rs:17:5\n+   |\n+LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n+...\n+LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   |\n+   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n+              found signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to previous error\n+"}, {"sha": "38c902a97a980382b60aec36d73800e58455e1a7", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "dbc5d38f192929430e269b407b7148f9c3758ca3", "filename": "tests/ui/impl-trait/in-trait/specialization-substs-remap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(specialization)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0e69e0490c776aece731e301d6b812726f433e80", "filename": "tests/ui/impl-trait/in-trait/success.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "6753ce15ed15827ed4351dba2429ec84e60c5461", "filename": "tests/ui/layout/transmute-to-tail-with-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,8 @@\n+trait Trait<T> {}\n+\n+struct Bar(Box<dyn Trait<T>>);\n+//~^ ERROR cannot find type `T` in this scope\n+\n+fn main() {\n+    let x: Bar = unsafe { std::mem::transmute(()) };\n+}"}, {"sha": "97ab59c398a3baa1b51d7ebbaa2439fb4fee3d66", "filename": "tests/ui/layout/transmute-to-tail-with-err.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Ftransmute-to-tail-with-err.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,14 @@\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/transmute-to-tail-with-err.rs:3:26\n+   |\n+LL | struct Bar(Box<dyn Trait<T>>);\n+   |                          ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Bar<T>(Box<dyn Trait<T>>);\n+   |           +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "7a4c747961c623d34d6b34017e1cd7aa27ce292d", "filename": "tests/ui/suggestions/chain-method-call-mutation-in-place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,4 +1,8 @@\n-fn main() {}\n+fn main() {\n+    let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i); //~ ERROR mismatched types\n+    vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort(); //~ ERROR no method named `sort` found for unit type `()` in the current scope\n+}\n+\n fn foo(mut s: String) -> String {\n     s.push_str(\"asdf\") //~ ERROR mismatched types\n }"}, {"sha": "128160f10adb342e3099620b16ef8fce1b604255", "filename": "tests/ui/suggestions/chain-method-call-mutation-in-place.stderr", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -1,20 +1,49 @@\n error[E0308]: mismatched types\n-  --> $DIR/chain-method-call-mutation-in-place.rs:3:5\n+  --> $DIR/chain-method-call-mutation-in-place.rs:2:23\n+   |\n+LL |     let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i);\n+   |            --------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<i32>`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Vec<i32>`\n+           found unit type `()`\n+note: method `sort_by_key` modifies its receiver in-place, it is not meant to be used in method chains.\n+  --> $DIR/chain-method-call-mutation-in-place.rs:2:71\n+   |\n+LL |     let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i);\n+   |                                                                       ^^^^^^^^^^^ this call modifies its receiver in-place\n+\n+error[E0599]: no method named `sort` found for unit type `()` in the current scope\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:72\n+   |\n+LL |     vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort();\n+   |                                                                        ^^^^ method not found in `()`\n+   |\n+note: method `sort_by_key` modifies its receiver in-place, it is not meant to be used in method chains.\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:53\n+   |\n+LL |     vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort();\n+   |                                                     ^^^^^^^^^^^ this call modifies its receiver in-place\n+\n+error[E0308]: mismatched types\n+  --> $DIR/chain-method-call-mutation-in-place.rs:7:5\n    |\n LL | fn foo(mut s: String) -> String {\n    |                          ------ expected `String` because of return type\n LL |     s.push_str(\"asdf\")\n    |     ^^^^^^^^^^^^^^^^^^ expected `String`, found `()`\n    |\n note: method `push_str` modifies its receiver in-place\n-  --> $DIR/chain-method-call-mutation-in-place.rs:3:7\n+  --> $DIR/chain-method-call-mutation-in-place.rs:7:7\n    |\n LL |     s.push_str(\"asdf\")\n    |     - ^^^^^^^^ this call modifies `s` in-place\n    |     |\n    |     you probably want to use this value after calling the method...\n    = note: ...instead of the `()` output of method `push_str`\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0599.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "91c6dfb8e0a923ff64d8f3db00c5a26c624de63a", "filename": "tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.rs?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,11 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn b()\n+where\n+    for<const C: usize> [(); C]: Copy,\n+    //~^ ERROR cannot capture late-bound const parameter in a constant\n+{\n+}\n+\n+fn main() {}"}, {"sha": "69bb605bf41ca02c0a6d75bf5c47bbe0043c67f5", "filename": "tests/ui/traits/non_lifetime_binders/capture-late-ct-in-anon.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1716932743a7b3705cbf0c34db0c4e070ed1930d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fcapture-late-ct-in-anon.stderr?ref=1716932743a7b3705cbf0c34db0c4e070ed1930d", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-late-ct-in-anon.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: cannot capture late-bound const parameter in a constant\n+  --> $DIR/capture-late-ct-in-anon.rs:6:30\n+   |\n+LL |     for<const C: usize> [(); C]: Copy,\n+   |         --------------       ^\n+   |         |\n+   |         parameter defined here\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}