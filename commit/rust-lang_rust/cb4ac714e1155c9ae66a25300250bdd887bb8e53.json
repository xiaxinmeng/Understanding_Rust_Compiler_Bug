{"sha": "cb4ac714e1155c9ae66a25300250bdd887bb8e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNGFjNzE0ZTExNTVjOWFlNjZhMjUzMDAyNTBiZGQ4ODdiYjhlNTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-16T06:16:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-25T14:04:28Z"}, "message": "Allocate HIR id counters for use trees in MiscCollector", "tree": {"sha": "2283cff303d45f49f5751d3f1604190f2c7c3d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2283cff303d45f49f5751d3f1604190f2c7c3d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4ac714e1155c9ae66a25300250bdd887bb8e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ac714e1155c9ae66a25300250bdd887bb8e53", "html_url": "https://github.com/rust-lang/rust/commit/cb4ac714e1155c9ae66a25300250bdd887bb8e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ac714e1155c9ae66a25300250bdd887bb8e53/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd8b776b5107f11bf0988d8c1947f49d2f6cec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd8b776b5107f11bf0988d8c1947f49d2f6cec2", "html_url": "https://github.com/rust-lang/rust/commit/7dd8b776b5107f11bf0988d8c1947f49d2f6cec2"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "2a085f1c0a879773e7ec390be2bc1f0e3e33767d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ac714e1155c9ae66a25300250bdd887bb8e53/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ac714e1155c9ae66a25300250bdd887bb8e53/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cb4ac714e1155c9ae66a25300250bdd887bb8e53", "patch": "@@ -361,9 +361,40 @@ impl<'a> LoweringContext<'a> {\n             lctx: &'lcx mut LoweringContext<'interner>,\n         }\n \n+        impl MiscCollector<'_, '_> {\n+            fn allocate_use_tree_hir_id_counters(\n+                &mut self,\n+                tree: &UseTree,\n+                owner: DefIndex,\n+            ) {\n+                match tree.kind {\n+                    UseTreeKind::Simple(_, id1, id2) => {\n+                        for &id in &[id1, id2] {\n+                            self.lctx.resolver.definitions().create_def_with_parent(\n+                                owner,\n+                                id,\n+                                DefPathData::Misc,\n+                                DefIndexAddressSpace::High,\n+                                Mark::root(),\n+                                tree.prefix.span,\n+                            );\n+                            self.lctx.allocate_hir_id_counter(id, &tree);\n+                        }\n+                    }\n+                    UseTreeKind::Glob => (),\n+                    UseTreeKind::Nested(ref trees) => {\n+                        for &(ref use_tree, id) in trees {\n+                            let hir_id = self.lctx.allocate_hir_id_counter(id, &use_tree).hir_id;\n+                            self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n             fn visit_item(&mut self, item: &'lcx Item) {\n-                self.lctx.allocate_hir_id_counter(item.id, item);\n+                let hir_id = self.lctx.allocate_hir_id_counter(item.id, item).hir_id;\n \n                 match item.node {\n                     ItemKind::Struct(_, ref generics)\n@@ -383,6 +414,9 @@ impl<'a> LoweringContext<'a> {\n                             .count();\n                         self.lctx.type_def_lifetime_params.insert(def_id, count);\n                     }\n+                    ItemKind::Use(ref use_tree) => {\n+                        self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                    }\n                     _ => {}\n                 }\n                 visit::walk_item(self, item);\n@@ -517,6 +551,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn insert_item(&mut self, item: hir::Item) {\n         let id = item.hir_id;\n+        // FIXME: Use debug_asset-rt\n+        assert_eq!(id.local_id, hir::ItemLocalId::from_u32(0));\n         self.items.insert(id, item);\n         self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n     }\n@@ -3065,7 +3101,6 @@ impl<'a> LoweringContext<'a> {\n                     }\n                 }\n \n-                let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n                 let mut defs = self.expect_full_def_from_use(id);\n                 // We want to return *something* from this function, so hold onto the first item\n                 // for later.\n@@ -3084,14 +3119,6 @@ impl<'a> LoweringContext<'a> {\n                         seg.id = self.sess.next_node_id();\n                     }\n                     let span = path.span;\n-                    self.resolver.definitions().create_def_with_parent(\n-                        parent_def_index,\n-                        new_node_id,\n-                        DefPathData::Misc,\n-                        DefIndexAddressSpace::High,\n-                        Mark::root(),\n-                        span);\n-                    self.allocate_hir_id_counter(new_node_id, &path);\n \n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let new_id = this.lower_node_id(new_node_id);\n@@ -3173,8 +3200,6 @@ impl<'a> LoweringContext<'a> {\n \n                 // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {\n-                    self.allocate_hir_id_counter(id, &use_tree);\n-\n                     let LoweredNodeId {\n                         node_id: new_id,\n                         hir_id: new_hir_id,\n@@ -3469,9 +3494,11 @@ impl<'a> LoweringContext<'a> {\n             _ => smallvec![i.id],\n         };\n \n-        node_ids.into_iter()\n-                .map(|node_id| hir::ItemId { id: self.lower_node_id(node_id).hir_id })\n-                .collect()\n+        node_ids.into_iter().map(|node_id| hir::ItemId {\n+            id: self.lower_node_id_generic(node_id, |_| {\n+                panic!(\"expected node_id to be lowered already {:#?}\", i)\n+            }).hir_id\n+        }).collect()\n     }\n \n     fn lower_item_id_use_tree(&mut self,"}, {"sha": "0a0a1dee7f07c52fdae3e01b46f8a0afc7fa505a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ac714e1155c9ae66a25300250bdd887bb8e53/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ac714e1155c9ae66a25300250bdd887bb8e53/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=cb4ac714e1155c9ae66a25300250bdd887bb8e53", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         match ty.node {\n             TyKind::Def(item_id, _) => {\n-                let item = self.tcx.hir().expect_item(item_id.id);\n+                let item = self.tcx.hir().expect_item_by_hir_id(item_id.id);\n                 intravisit::walk_item(self, item);\n             }\n             _ => ()"}]}