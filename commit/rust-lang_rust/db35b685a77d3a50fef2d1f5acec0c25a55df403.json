{"sha": "db35b685a77d3a50fef2d1f5acec0c25a55df403", "node_id": "C_kwDOAAsO6NoAKGRiMzViNjg1YTc3ZDNhNTBmZWYyZDFmNWFjZWMwYzI1YTU1ZGY0MDM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T05:43:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-28T20:35:14Z"}, "message": "Use `&'hir Expr` everywhere.\n\nFor consistency, and because it makes HIR measurement simpler and more\naccurate.", "tree": {"sha": "2bc143978ddfaa766e871bc806adb78d29336f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc143978ddfaa766e871bc806adb78d29336f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db35b685a77d3a50fef2d1f5acec0c25a55df403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db35b685a77d3a50fef2d1f5acec0c25a55df403", "html_url": "https://github.com/rust-lang/rust/commit/db35b685a77d3a50fef2d1f5acec0c25a55df403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db35b685a77d3a50fef2d1f5acec0c25a55df403/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854219d2adc84b1cc9d8662e7bba19807a55731f", "url": "https://api.github.com/repos/rust-lang/rust/commits/854219d2adc84b1cc9d8662e7bba19807a55731f", "html_url": "https://github.com/rust-lang/rust/commit/854219d2adc84b1cc9d8662e7bba19807a55731f"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "b0e9fe0469c41baab379f1b599301efda043f76f", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -155,26 +155,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let op = match *op {\n                     InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n                         reg: lower_reg(reg),\n-                        expr: self.lower_expr_mut(expr),\n+                        expr: self.lower_expr(expr),\n                     },\n                     InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n                         reg: lower_reg(reg),\n                         late,\n-                        expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                        expr: expr.as_ref().map(|expr| self.lower_expr(expr)),\n                     },\n                     InlineAsmOperand::InOut { reg, late, ref expr } => {\n                         hir::InlineAsmOperand::InOut {\n                             reg: lower_reg(reg),\n                             late,\n-                            expr: self.lower_expr_mut(expr),\n+                            expr: self.lower_expr(expr),\n                         }\n                     }\n                     InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n                             reg: lower_reg(reg),\n                             late,\n-                            in_expr: self.lower_expr_mut(in_expr),\n-                            out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                            in_expr: self.lower_expr(in_expr),\n+                            out_expr: out_expr.as_ref().map(|expr| self.lower_expr(expr)),\n                         }\n                     }\n                     InlineAsmOperand::Const { ref anon_const } => {"}, {"sha": "8e1ba064d64d036a157c5ae72637a2de5f5a4491", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -947,7 +947,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         params: &'hir [hir::Param<'hir>],\n         value: hir::Expr<'hir>,\n     ) -> hir::BodyId {\n-        let body = hir::Body { generator_kind: self.generator_kind, params, value };\n+        let body = hir::Body {\n+            generator_kind: self.generator_kind,\n+            params,\n+            value: self.arena.alloc(value),\n+        };\n         let id = body.id();\n         debug_assert_eq!(id.hir_id.owner, self.current_hir_id_owner);\n         self.bodies.push((id.hir_id.local_id, self.arena.alloc(body)));"}, {"sha": "b4c60c4be68d4e0195a45d93a70a5c0e0fe07eb9", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -1438,7 +1438,7 @@ pub struct BodyId {\n #[derive(Debug, HashStable_Generic)]\n pub struct Body<'hir> {\n     pub params: &'hir [Param<'hir>],\n-    pub value: Expr<'hir>,\n+    pub value: &'hir Expr<'hir>,\n     pub generator_kind: Option<GeneratorKind>,\n }\n \n@@ -2561,23 +2561,23 @@ pub enum TyKind<'hir> {\n pub enum InlineAsmOperand<'hir> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n-        expr: Expr<'hir>,\n+        expr: &'hir Expr<'hir>,\n     },\n     Out {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        expr: Option<Expr<'hir>>,\n+        expr: Option<&'hir Expr<'hir>>,\n     },\n     InOut {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        expr: Expr<'hir>,\n+        expr: &'hir Expr<'hir>,\n     },\n     SplitInOut {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        in_expr: Expr<'hir>,\n-        out_expr: Option<Expr<'hir>>,\n+        in_expr: &'hir Expr<'hir>,\n+        out_expr: Option<&'hir Expr<'hir>>,\n     },\n     Const {\n         anon_const: AnonConst,\n@@ -3496,7 +3496,7 @@ mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block<'_>, 48);\n-    static_assert_size!(Body<'_>, 80);\n+    static_assert_size!(Body<'_>, 32);\n     static_assert_size!(Expr<'_>, 56);\n     static_assert_size!(ExprKind<'_>, 40);\n     static_assert_size!(FnDecl<'_>, 40);"}, {"sha": "ce0d5cbc479b43e4d6399973cfb16890d337e127", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -974,7 +974,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.process_macro_use(trait_item.span);\n         match trait_item.kind {\n             hir::TraitItemKind::Const(ref ty, body) => {\n-                let body = body.map(|b| &self.tcx.hir().body(b).value);\n+                let body = body.map(|b| self.tcx.hir().body(b).value);\n                 let attrs = self.tcx.hir().attrs(trait_item.hir_id());\n                 self.process_assoc_const(\n                     trait_item.def_id,"}, {"sha": "5448360049d2e2bd62c8faabf7552ff0f8acbee4", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -178,9 +178,9 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 InlineAsmOperand::In { expr, .. } | InlineAsmOperand::InOut { expr, .. } => {\n                     never_loop_expr(expr, main_loop_id)\n                 },\n-                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n+                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter().copied(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n-                    never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n+                    never_loop_expr_all(&mut once(*in_expr).chain(out_expr.iter().copied()), main_loop_id)\n                 },\n                 InlineAsmOperand::Const { .. }\n                 | InlineAsmOperand::SymFn { .. }"}, {"sha": "3ffcaa90af3e57dd3b37cc97cfc65a882a6d282a", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n     }\n \n     fn body(&self, body_id: &Binding<hir::BodyId>) {\n-        let expr = &self.cx.tcx.hir().body(body_id.value).value;\n+        let expr = self.cx.tcx.hir().body(body_id.value).value;\n         bind!(self, expr);\n         out!(\"let {expr} = &cx.tcx.hir().body({body_id}).value;\");\n         self.expr(expr);"}, {"sha": "dd1ceb6a4dc481864574e7660897677f8cf53532", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35b685a77d3a50fef2d1f5acec0c25a55df403/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=db35b685a77d3a50fef2d1f5acec0c25a55df403", "patch": "@@ -1804,7 +1804,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n             }\n         };\n \n-        let mut expr = &func.value;\n+        let mut expr = func.value;\n         loop {\n             match expr.kind {\n                 #[rustfmt::skip]"}]}