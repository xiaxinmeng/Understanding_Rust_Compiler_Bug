{"sha": "c08fb75dcd656707faf28264e93513da4606ea29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOGZiNzVkY2Q2NTY3MDdmYWYyODI2NGU5MzUxM2RhNDYwNmVhMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-04T22:36:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-04T22:36:58Z"}, "message": "auto merge of #5431 : crabtw/rust/mips-rt, r=brson\n\nBecause the PTHREAD_STACK_MIN of my system is larger than default size, I add the stack_sz check to prevent assertion failure.\r\n\r\nBesides, libuv has to be modified because some flags are different from other targets. Instead of using hardcoded numbers, I change them to predefined symbols.\r\n\r\nBy the way, the toolchain I used is http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/mips-gnu-linux\r\n\r\nlibuv patch: http://people.cs.nctu.edu.tw/~jyyou/rust/mips-uv.patch\r\n\r\nBelow is the current test result.\r\n\r\n* core test\r\n\r\n  stackwalk tests can cause segfault so I ignored them.\r\n\r\n```\r\nfailures:\r\n    io::tests::test_read_be_int_n\r\n    io::tests::test_read_buffer_big_enough\r\n    io::tests::test_read_f32\r\n    io::tests::test_read_write_be\r\n    io::tests::test_read_write_f32\r\n    io::tests::test_read_write_le\r\n    io::tests::test_simple\r\n    io::tests::test_write_empty\r\n    rand::tests::rng_seeded_custom_seed2\r\n    unstable::uvll::test::test_uv_ll_struct_size_addrinfo\r\n    unstable::uvll::test::test_uv_ll_struct_size_uv_timer_t\r\n\r\nresult: FAILED. 596 passed; 11 failed; 49 ignored\r\n```\r\n\r\n* std test:\r\n\r\n```\r\nfailures:\r\n    time::tests::run_tests\r\n\r\nresult: FAILED. 330 passed; 1 failed; 21 ignored\r\n```", "tree": {"sha": "8ce9bca99a6ebc59b8749fa7329395fa7b5cae94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce9bca99a6ebc59b8749fa7329395fa7b5cae94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08fb75dcd656707faf28264e93513da4606ea29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08fb75dcd656707faf28264e93513da4606ea29", "html_url": "https://github.com/rust-lang/rust/commit/c08fb75dcd656707faf28264e93513da4606ea29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08fb75dcd656707faf28264e93513da4606ea29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717ed51f123aac1cb25ba710ffacdd7821a577df", "url": "https://api.github.com/repos/rust-lang/rust/commits/717ed51f123aac1cb25ba710ffacdd7821a577df", "html_url": "https://github.com/rust-lang/rust/commit/717ed51f123aac1cb25ba710ffacdd7821a577df"}, {"sha": "4f1d8cb6fce625d13baf12f49e41d29f1433c8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1d8cb6fce625d13baf12f49e41d29f1433c8dd", "html_url": "https://github.com/rust-lang/rust/commit/4f1d8cb6fce625d13baf12f49e41d29f1433c8dd"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "1e102587bf4a0813baff6ac87e94fe9db11fcecc", "filename": "mk/platform.mk", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -239,6 +239,31 @@ CFG_RUN_arm-linux-androideabi=\n CFG_RUN_TARG_arm-linux-androideabi=\n RUSTC_FLAGS_arm-linux-androideabi :=--android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n \n+# mips-unknown-linux-gnu configuration\n+CC_mips-unknown-linux-gnu=mips-linux-gnu-gcc\n+CXX_mips-unknown-linux-gnu=mips-linux-gnu-g++\n+CPP_mips-unknown-linux-gnu=mips-linux-gnu-gcc -E\n+AR_mips-unknown-linux-gnu=mips-linux-gnu-ar\n+CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n+CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32\n+CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n+CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_mips-unknown-linux-gnu := .linux.def\n+CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n+CFG_LIBUV_LINK_FLAGS_mips-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_mips-unknown-linux-gnu :=\n+CFG_WINDOWSY_mips-unknown-linux-gnu :=\n+CFG_UNIXY_mips-unknown-linux-gnu := 1\n+CFG_PATH_MUNGE_mips-unknown-linux-gnu := true\n+CFG_LDPATH_mips-unknown-linux-gnu :=\n+CFG_RUN_mips-unknown-linux-gnu=\n+CFG_RUN_TARG_mips-unknown-linux-gnu=\n+\n # i686-pc-mingw32 configuration\n CC_i686-pc-mingw32=$(CC)\n CXX_i686-pc-mingw32=$(CXX)"}, {"sha": "b2c282e207fbc04de9c8df8c5d94808804ef8915", "filename": "mk/rt.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -27,6 +27,7 @@\n LIBUV_FLAGS_i386 = -m32 -fPIC\n LIBUV_FLAGS_x86_64 = -m64 -fPIC\n LIBUV_FLAGS_arm = -fPIC -DANDROID -std=gnu99\n+LIBUV_FLAGS_mips = -fPIC -mips32r2 -msoft-float -mabi=32\n \n # when we're doing a snapshot build, we intentionally degrade as many\n # features in libuv and the runtime as possible, to ease portability.\n@@ -180,6 +181,10 @@ else\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n+\t\tLDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n+\t\tCC=\"$$(CC_$(1))\" \\\n+\t\tCXX=\"$$(CXX_$(1))\" \\\n+\t\tAR=\"$$(AR_$(1))\" \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n \t\tV=$$(VERBOSE)\n endif"}, {"sha": "9dc9f5da8c1dac0998e166a02485189e38bdc03f", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -189,6 +189,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n \n     regs[4] = arg as uint;\n     regs[29] = sp as uint;\n+    regs[25] = fptr as uint;\n     regs[31] = fptr as uint;\n }\n "}, {"sha": "3b1401ae1d2c8a57085e59da80c8f5ad8e8a0cee", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -89,7 +89,7 @@ pub fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n         abi::X86 => (~\"little\",~\"x86\",~\"32\"),\n         abi::X86_64 => (~\"little\",~\"x86_64\",~\"64\"),\n         abi::Arm => (~\"little\",~\"arm\",~\"32\"),\n-        abi::Mips => (~\"little\",~\"arm\",~\"32\")\n+        abi::Mips => (~\"big\",~\"mips\",~\"32\")\n     };\n \n     return ~[ // Target bindings."}, {"sha": "6d8207d97d094a18d97b1e74c482bc82da561162", "filename": "src/rt/arch/mips/_context.S", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2F_context.S?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -51,7 +51,6 @@ swap_registers:\n         lw $2, 2 * 4($5)\n         lw $3, 3 * 4($5)\n         lw $4, 4 * 4($5)\n-        lw $5, 5 * 4($5)\n         lw $6, 6 * 4($5)\n         lw $7, 7 * 4($5)\n \n@@ -82,6 +81,8 @@ swap_registers:\n         lw $30, 30 * 4($5)\n         lw $31, 31 * 4($5)\n \n+        lw $5, 5 * 4($5)\n+\n         jr $31\n         nop\n .end swap_registers"}, {"sha": "abbbad164fd372ec24f2caac971ed04a0322d690", "filename": "src/rt/arch/mips/ccall.S", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fccall.S?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -5,30 +5,39 @@\n \n .text\n \n+.align 2\n .globl __morestack\n .hidden __morestack\n-.align 2\n+.cfi_sections .eh_frame_entry\n+.cfi_startproc\n .set nomips16\n .ent __morestack\n __morestack:\n         .set noreorder\n         .set nomacro\n-        move $7, $29\n-        move $29, $6\n \n-        sw $7, 0($29)\n-        sw $31, -4($29)\n+        addiu $29, $29, -8\n+        sw $31, 4($29)\n+        sw $30, 0($29)\n \n-        addiu $29, $29, -24\n+        .cfi_def_cfa_offset 8\n+        .cfi_offset 31, -4\n+        .cfi_offset 30, -8\n+\n+        move $30, $29\n+        .cfi_def_cfa_register 30\n+\n+        move $29, $6\n         move $25, $5\n         jalr $25\n         nop\n-        addiu $29, $29, 24\n+        move $29, $30\n \n-        lw $31, -4($29)\n-        lw $7, 0($29)\n+        lw $30, 0($29)\n+        lw $31, 4($29)\n+        addiu $29, $29, 8\n \n-        move $29, $7\n         jr $31\n         nop\n .end __morestack\n+.cfi_endproc"}, {"sha": "7347a92e98b92c556be9f5d46e55f0cdd7189e45", "filename": "src/rt/arch/mips/context.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Farch%2Fmips%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fcontext.cpp?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -40,6 +40,7 @@ void context::call(void *f, void *arg, void *stack)\n \n   regs.data[4] = (uint32_t)arg;\n   regs.data[29] = (uint32_t)sp;\n+  regs.data[25] = (uint32_t)f;\n   regs.data[31] = (uint32_t)f;\n \n   // Last base pointer on the stack should be 0"}, {"sha": "824642fc435d02625550d1a03f51608e09cae4fa", "filename": "src/rt/sync/rust_thread.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Fsync%2Frust_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c08fb75dcd656707faf28264e93513da4606ea29/src%2Frt%2Fsync%2Frust_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.cpp?ref=c08fb75dcd656707faf28264e93513da4606ea29", "patch": "@@ -10,6 +10,7 @@\n \n \n #include \"rust_thread.h\"\n+#include <limits.h>\n \n const size_t default_stack_sz = 1024*1024;\n \n@@ -41,6 +42,11 @@ rust_thread::start() {\n #if defined(__WIN32__)\n    thread = CreateThread(NULL, stack_sz, rust_thread_start, this, 0, NULL);\n #else\n+   // PTHREAD_STACK_MIN of some system is larger than default size\n+   // so we check stack_sz to prevent assertion failure.\n+   if (stack_sz < PTHREAD_STACK_MIN) {\n+      stack_sz = PTHREAD_STACK_MIN;\n+   }\n    pthread_attr_t attr;\n    CHECKED(pthread_attr_init(&attr));\n    CHECKED(pthread_attr_setstacksize(&attr, stack_sz));"}]}