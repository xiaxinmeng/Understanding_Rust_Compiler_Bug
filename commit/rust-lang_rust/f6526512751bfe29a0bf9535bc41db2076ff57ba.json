{"sha": "f6526512751bfe29a0bf9535bc41db2076ff57ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NTI2NTEyNzUxYmZlMjlhMGJmOTUzNWJjNDFkYjIwNzZmZjU3YmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-11T18:02:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:07:45Z"}, "message": "retool EarlyLint to track a Diagnostic", "tree": {"sha": "bb03dcf1be6a9997ac28ecd1c46b772c2459a9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb03dcf1be6a9997ac28ecd1c46b772c2459a9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6526512751bfe29a0bf9535bc41db2076ff57ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6526512751bfe29a0bf9535bc41db2076ff57ba", "html_url": "https://github.com/rust-lang/rust/commit/f6526512751bfe29a0bf9535bc41db2076ff57ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6526512751bfe29a0bf9535bc41db2076ff57ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888a92cef37342c7878028eda967c85eb15afe43", "url": "https://api.github.com/repos/rust-lang/rust/commits/888a92cef37342c7878028eda967c85eb15afe43", "html_url": "https://github.com/rust-lang/rust/commit/888a92cef37342c7878028eda967c85eb15afe43"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "848f8b866395ff75f528ef0e7c8cb5eb853e0b92", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f6526512751bfe29a0bf9535bc41db2076ff57ba", "patch": "@@ -43,7 +43,7 @@ use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax_pos::Span;\n-use errors::DiagnosticBuilder;\n+use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n@@ -87,30 +87,36 @@ pub struct EarlyLint {\n     /// what lint is this? (e.g., `dead_code`)\n     pub id: LintId,\n \n-    /// the span where the lint will be reported at\n+    /// what span was it attached to (this is used for Eq comparisons;\n+    /// it duplicates to some extent the information in\n+    /// `diagnostic.span`)\n     pub span: Span,\n \n     /// the main message\n-    pub msg: String,\n+    pub diagnostic: Diagnostic,\n }\n \n impl fmt::Debug for EarlyLint {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"EarlyLint\")\n             .field(\"id\", &self.id)\n-            .field(\"span\", &self.span)\n-            .field(\"msg\", &self.msg)\n+            .field(\"span\", &self.diagnostic.span)\n+            .field(\"diagnostic\", &self.diagnostic)\n             .finish()\n     }\n }\n \n impl EarlyLint {\n     pub fn new(id: LintId, span: Span, msg: String) -> Self {\n-        EarlyLint { id: id, span: span, msg: msg }\n+        let mut diagnostic = Diagnostic::new(errors::Level::Warning, &msg);\n+        diagnostic.set_span(span);\n+        EarlyLint { id: id, span: span, diagnostic: diagnostic }\n     }\n \n     pub fn matches(&self, other: &EarlyLint) -> bool {\n-        self.id == other.id && self.span == other.span && self.msg == other.msg\n+        self.id == other.id &&\n+            self.span == other.span &&\n+            self.diagnostic.message == other.diagnostic.message\n     }\n }\n \n@@ -551,7 +557,10 @@ pub trait LintContext: Sized {\n     }\n \n     fn early_lint(&self, early_lint: EarlyLint) {\n-        let mut err = self.struct_span_lint(early_lint.id.lint, early_lint.span, &early_lint.msg);\n+        let mut err = self.struct_span_lint(early_lint.id.lint,\n+                                            early_lint.span,\n+                                            &early_lint.diagnostic.message);\n+        err.copy_details_not_message(&early_lint.diagnostic);\n         err.emit();\n     }\n "}, {"sha": "cb03257a5ee0fbc6d84c719c5839d51af285f40e", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=f6526512751bfe29a0bf9535bc41db2076ff57ba", "patch": "@@ -166,6 +166,14 @@ impl Diagnostic {\n         self.level\n     }\n \n+    /// Used by a lint. Copies over all details *but* the \"main\n+    /// message\".\n+    pub fn copy_details_not_message(&mut self, from: &Diagnostic) {\n+        self.span = from.span.clone();\n+        self.code = from.code.clone();\n+        self.children.extend(from.children.iter().cloned())\n+    }\n+\n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n     fn sub(&mut self,"}, {"sha": "d99850332c36e8321addd6de76fccf67a8ae1835", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6526512751bfe29a0bf9535bc41db2076ff57ba/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=f6526512751bfe29a0bf9535bc41db2076ff57ba", "patch": "@@ -67,7 +67,7 @@ pub struct Span {\n ///   the error, and would be rendered with `^^^`.\n /// - they can have a *label*. In this case, the label is written next\n ///   to the mark in the snippet when we render.\n-#[derive(Clone)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct MultiSpan {\n     primary_spans: Vec<Span>,\n     span_labels: Vec<(Span, String)>,"}]}