{"sha": "01b17af1083ffc0630255c7ac172d32812c610fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjE3YWYxMDgzZmZjMDYzMDI1NWM3YWMxNzJkMzI4MTJjNjEwZmE=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-09-02T11:58:25Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-09-02T12:04:47Z"}, "message": "Fix fallout from re-applying patches", "tree": {"sha": "ba63d39385762a2d8595410eade4174206623e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba63d39385762a2d8595410eade4174206623e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b17af1083ffc0630255c7ac172d32812c610fa", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmEwvd8ACgkQHKDfKvWd\naKU8+Q//a8NYsAGFuzK57lZp1GC6ISQ/UofayvjQJk1dwpZMtjy8dyvrvqyNEw1X\nkDtFgLS0aKCWTqr2pSd2gHHSC1nTgGj/jDLdDzBTe1yO6Xi7kmg7g7NtPy2U5y+Q\nuEfINMaQ5d6NI6RfbCL/K+4cFJSpUQEaREl+ubJ+bNSF+HhA+wDkACgLDycTiRDV\ndeX9rbOSIXBJn3UT/uyvgUP3fPNZIFWhkRulCmyEcbGBEmUuCPJpHj1emxy4Z3Pv\nGQ66SIFYqBiQwJgKU4VLwb3NttMQJdvS07wCZ9pLRBLW7Thhodf+6zlkS6KMFxXB\nsEEDk2Gk3BGT5QgTdzUtE6fdXWgpHZsctGq/O+51TKEfeYQGsgb0s+oWmR3uBCdl\n+s9Ez+5j6S3yvO59g5IeTmPiL/9HVoH9Z00IOq4EZkoQ7jRJX8VlvZEBIBsMHAv+\n1mPoc0hXSF9bFFoR/gJGLSr4EMlnt9sA68Q/awHemN/NVBjRq6NP+w7vBum8FQAK\nABeyZf4cG5wI5zn1OT4yHUS4ljNwW7qTFwIjsuGyV09v3Pv2b49+KBFfvSnxvHmk\naMGKN+ct7Jz+CX1RY0oySvhUuvO0iZ7EZujK8IqpEDVAubHr5d8yzqdSukellkZh\nd4CsfgaKG+o7WGuh52fy9w7dwPCe/y9AMjWIqs9OuBevZOavCKc=\n=omt4\n-----END PGP SIGNATURE-----", "payload": "tree ba63d39385762a2d8595410eade4174206623e55\nparent fb6839db2d4a6e0239c400a599e691c7ec969ad1\nauthor flip1995 <philipp.krones@embecosm.com> 1630583905 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1630584287 +0100\n\nFix fallout from re-applying patches\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b17af1083ffc0630255c7ac172d32812c610fa", "html_url": "https://github.com/rust-lang/rust/commit/01b17af1083ffc0630255c7ac172d32812c610fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b17af1083ffc0630255c7ac172d32812c610fa/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6839db2d4a6e0239c400a599e691c7ec969ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6839db2d4a6e0239c400a599e691c7ec969ad1", "html_url": "https://github.com/rust-lang/rust/commit/fb6839db2d4a6e0239c400a599e691c7ec969ad1"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "a4693fa213bc4a110470615ba12b9912754fe297", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=01b17af1083ffc0630255c7ac172d32812c610fa", "patch": "@@ -107,7 +107,8 @@ fn check_arm<'tcx>(\n             (Some(a), Some(b)) => SpanlessEq::new(cx).eq_expr(a, b),\n         };\n         // the binding must not be used in the if guard\n-        if outer_guard.map_or(true, |(Guard::If(e) | Guard::IfLet(_, e))| !is_local_used(cx, *e, binding_id));        // ...or anywhere in the inner expression\n+        if outer_guard.map_or(true, |(Guard::If(e) | Guard::IfLet(_, e))| !is_local_used(cx, *e, binding_id));\n+        // ...or anywhere in the inner expression\n         if match inner {\n             IfLetOrMatch::IfLet(_, _, body, els) => {\n                 !is_local_used(cx, body, binding_id) && els.map_or(true, |e| !is_local_used(cx, e, binding_id))"}, {"sha": "2b76eacb7d61c473e2cda20e76ad8a728b1e1f5d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=01b17af1083ffc0630255c7ac172d32812c610fa", "patch": "@@ -2199,6 +2199,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n     ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n+    ls.register_renamed(\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "15f6dcae8870b498563190acabdb263ff9e49e17", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=01b17af1083ffc0630255c7ac172d32812c610fa", "patch": "@@ -3,7 +3,8 @@ use clippy_utils::higher;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{\n-    can_move_expr_to_closure, eager_or_lazy, in_macro, is_else_clause, is_lang_ctor, peel_hir_expr_while, CaptureKind,\n+    can_move_expr_to_closure, eager_or_lazy, in_constant, in_macro, is_else_clause, is_lang_ctor, peel_hir_expr_while,\n+    CaptureKind,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -126,6 +127,7 @@ fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: boo\n fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionIfLetElseOccurence> {\n     if_chain! {\n         if !in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n+        if !in_constant(cx, expr.hir_id);\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else: Some(if_else) })\n             = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);"}, {"sha": "42d51272279e2f9a78754ab3d20e828d407f0b9e", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=01b17af1083ffc0630255c7ac172d32812c610fa", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::consts::{constant_simple, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::higher;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use clippy_utils::{\n@@ -17,8 +18,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Block, Crate, Expr, ExprKind, HirId, Item, Local, MatchSource, MutTy, Mutability, Node, Path, Stmt,\n-    StmtKind, Ty, TyKind, UnOp,\n+    BinOpKind, Block, Crate, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n+    TyKind, UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -1106,16 +1107,10 @@ impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        let (cond, then, els) = match expr.kind {\n-            ExprKind::If(cond, then, els) => (Some(cond), then, els.is_some()),\n-            ExprKind::Match(\n-                _,\n-                [arm, ..],\n-                MatchSource::IfLetDesugar {\n-                    contains_else_clause: els,\n-                },\n-            ) => (None, arm.body, els),\n-            _ => return,\n+        let (cond, then, els) = if let Some(higher::IfOrIfLet { cond, r#else, then }) = higher::IfOrIfLet::hir(expr) {\n+            (cond, then, r#else.is_some())\n+        } else {\n+            return;\n         };\n         let then_block = match then.kind {\n             ExprKind::Block(block, _) => block,\n@@ -1131,7 +1126,6 @@ impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n         };\n         // check for `if a && b;`\n         if_chain! {\n-            if let Some(cond) = cond;\n             if let ExprKind::Binary(op, _, _) = cond.kind;\n             if op.node == BinOpKind::And;\n             if cx.sess().source_map().is_multiline(cond.span);\n@@ -1166,9 +1160,7 @@ fn check_nested_if_chains(\n         _ => return,\n     };\n     if_chain! {\n-        if matches!(tail.kind,\n-            ExprKind::If(_, _, None)\n-            | ExprKind::Match(.., MatchSource::IfLetDesugar { contains_else_clause: false }));\n+        if let Some(higher::IfOrIfLet { r#else: None, .. }) = higher::IfOrIfLet::hir(tail);\n         let sm = cx.sess().source_map();\n         if head\n             .iter()"}, {"sha": "ab05a0b423853f245ca00b5d2f940383da0d8ef9", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b17af1083ffc0630255c7ac172d32812c610fa/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=01b17af1083ffc0630255c7ac172d32812c610fa", "patch": "@@ -329,7 +329,7 @@ fn has_enclosing_paren(sugg: impl AsRef<str>) -> bool {\n     }\n }\n \n-// Copied from the rust standart library, and then edited\n+/// Copied from the rust standard library, and then edited\n macro_rules! forward_binop_impls_to_ref {\n     (impl $imp:ident, $method:ident for $t:ty, type Output = $o:ty) => {\n         impl $imp<$t> for &$t {"}]}