{"sha": "b0fab966fad61cac073d1494e0539961e1c442a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmFiOTY2ZmFkNjFjYWMwNzNkMTQ5NGUwNTM5OTYxZTFjNDQyYTA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T20:49:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-27T00:30:10Z"}, "message": "Shorten line during rendering instead of in markdown", "tree": {"sha": "ab8963d7d19e06cc11294c8411e3ff0764d8d577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8963d7d19e06cc11294c8411e3ff0764d8d577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0fab966fad61cac073d1494e0539961e1c442a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fab966fad61cac073d1494e0539961e1c442a0", "html_url": "https://github.com/rust-lang/rust/commit/b0fab966fad61cac073d1494e0539961e1c442a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0fab966fad61cac073d1494e0539961e1c442a0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f01753b0134af903eeeea4c177e2abf1eac26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f01753b0134af903eeeea4c177e2abf1eac26e", "html_url": "https://github.com/rust-lang/rust/commit/b3f01753b0134af903eeeea4c177e2abf1eac26e"}], "stats": {"total": 80, "additions": 36, "deletions": 44}, "files": [{"sha": "74413a7f905d45fc0bf5c7bc92aac504bcf18efe", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0fab966fad61cac073d1494e0539961e1c442a0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fab966fad61cac073d1494e0539961e1c442a0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b0fab966fad61cac073d1494e0539961e1c442a0", "patch": "@@ -785,10 +785,6 @@ impl MarkdownSummaryLine<'_> {\n }\n \n pub fn plain_summary_line(md: &str) -> String {\n-    plain_summary_line_full(md, false)\n-}\n-\n-pub fn plain_summary_line_full(md: &str, limit_length: bool) -> String {\n     struct ParserWrapper<'a> {\n         inner: Parser<'a>,\n         is_in: isize,\n@@ -834,21 +830,7 @@ pub fn plain_summary_line_full(md: &str, limit_length: bool) -> String {\n             s.push_str(&t);\n         }\n     }\n-    if limit_length && s.chars().count() > 60 {\n-        let mut len = 0;\n-        let mut ret = s.split_whitespace()\n-                       .take_while(|p| {\n-                           // + 1 for the added character after the word.\n-                           len += p.chars().count() + 1;\n-                           len < 60\n-                       })\n-                       .collect::<Vec<_>>()\n-                       .join(\" \");\n-        ret.push('\u2026');\n-        ret\n-    } else {\n-        s\n-    }\n+    s\n }\n \n pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {"}, {"sha": "2a4a2fcea58389f51c475f1c7d61b3ce2a808cd4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b0fab966fad61cac073d1494e0539961e1c442a0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fab966fad61cac073d1494e0539961e1c442a0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b0fab966fad61cac073d1494e0539961e1c442a0", "patch": "@@ -732,7 +732,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: plain_summary_line_short(item.doc_value()),\n+                desc: shorten(plain_summary_line(item.doc_value())),\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n@@ -770,7 +770,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     }\n \n     let crate_doc = krate.module.as_ref().map(|module| {\n-        plain_summary_line_short(module.doc_value())\n+        shorten(plain_summary_line(module.doc_value()))\n     }).unwrap_or(String::new());\n \n     let mut crate_data = BTreeMap::new();\n@@ -1482,7 +1482,7 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: plain_summary_line_short(item.doc_value()),\n+                            desc: shorten(plain_summary_line(item.doc_value())),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),\n@@ -1664,7 +1664,7 @@ impl Cache {\n                                 ty: item.type_(),\n                                 name: item_name.to_string(),\n                                 path: path.clone(),\n-                                desc: plain_summary_line_short(item.doc_value()),\n+                                desc: shorten(plain_summary_line(item.doc_value())),\n                                 parent: None,\n                                 parent_idx: None,\n                                 search_type: get_index_search_type(&item),\n@@ -2360,29 +2360,39 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-fn shorter(s: Option<&str>) -> String {\n-    match s {\n-        Some(s) => s.lines()\n-            .skip_while(|s| s.chars().all(|c| c.is_whitespace()))\n-            .take_while(|line|{\n-            (*line).chars().any(|chr|{\n-                !chr.is_whitespace()\n-            })\n-        }).collect::<Vec<_>>().join(\"\\n\"),\n-        None => String::new()\n-    }\n-}\n-\n #[inline]\n fn plain_summary_line(s: Option<&str>) -> String {\n-    let line = shorter(s).replace(\"\\n\", \" \");\n-    markdown::plain_summary_line_full(&line[..], false)\n-}\n-\n-#[inline]\n-fn plain_summary_line_short(s: Option<&str>) -> String {\n-    let line = shorter(s).replace(\"\\n\", \" \");\n-    markdown::plain_summary_line_full(&line[..], true)\n+    let s = s.unwrap_or(\"\");\n+    // This essentially gets the first paragraph of text in one line.\n+    let mut line = s.lines()\n+        .skip_while(|line| line.chars().all(|c| c.is_whitespace()))\n+        .take_while(|line| line.chars().any(|c| !c.is_whitespace()))\n+        .fold(String::new(), |mut acc, line| {\n+            acc.push_str(line);\n+            acc.push(' ');\n+            acc\n+        });\n+    // remove final whitespace\n+    line.pop();\n+    markdown::plain_summary_line(&line[..])\n+}\n+\n+fn shorten(s: String) -> String {\n+    if s.chars().count() > 60 {\n+        let mut len = 0;\n+        let mut ret = s.split_whitespace()\n+                        .take_while(|p| {\n+                            // + 1 for the added character after the word.\n+                            len += p.chars().count() + 1;\n+                            len < 60\n+                        })\n+                        .collect::<Vec<_>>()\n+                        .join(\" \");\n+        ret.push('\u2026');\n+        ret\n+    } else {\n+        s\n+    }\n }\n \n fn document(w: &mut fmt::Formatter<'_>, cx: &Context, item: &clean::Item) -> fmt::Result {"}]}