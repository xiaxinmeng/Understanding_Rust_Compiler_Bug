{"sha": "56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "node_id": "C_kwDOAAsO6NoAKDU2ZjEzMjU2NWViMzFlZWI5ZWM3ZTE4MDBhNmFiMmNhMzU0ZTcxMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-24T04:14:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-24T04:14:46Z"}, "message": "Auto merge of #100848 - xfix:use-metadata-for-slice-len, r=thomcc\n\nUse ptr::metadata in <[T]>::len implementation\n\nThis avoids duplication of ptr::metadata code.\n\nI believe this is acceptable as the previous approach essentially duplicated `ptr::metadata` because back then `rustc_allow_const_fn_unstable` annotation did not exist.\n\nI would like somebody to ping `@rust-lang/wg-const-eval` as the documentation says:\n\n> Always ping `@rust-lang/wg-const-eval` if you are adding more rustc_allow_const_fn_unstable attributes to any const fn.", "tree": {"sha": "3352d72b0837b9e077b2da975d869cc8f243fef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3352d72b0837b9e077b2da975d869cc8f243fef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "html_url": "https://github.com/rust-lang/rust/commit/56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7feb003882ecf7699e6705b537673e20985accff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7feb003882ecf7699e6705b537673e20985accff", "html_url": "https://github.com/rust-lang/rust/commit/7feb003882ecf7699e6705b537673e20985accff"}, {"sha": "155b4c28c11b56bfe94acab0006530694acfcee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/155b4c28c11b56bfe94acab0006530694acfcee4", "html_url": "https://github.com/rust-lang/rust/commit/155b4c28c11b56bfe94acab0006530694acfcee4"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "caa10f1818b4d08e6c419fcc4d4b4c98efa267b9", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "patch": "@@ -135,16 +135,16 @@ pub const fn from_raw_parts_mut<T: ?Sized>(\n }\n \n #[repr(C)]\n-pub(crate) union PtrRepr<T: ?Sized> {\n-    pub(crate) const_ptr: *const T,\n-    pub(crate) mut_ptr: *mut T,\n-    pub(crate) components: PtrComponents<T>,\n+union PtrRepr<T: ?Sized> {\n+    const_ptr: *const T,\n+    mut_ptr: *mut T,\n+    components: PtrComponents<T>,\n }\n \n #[repr(C)]\n-pub(crate) struct PtrComponents<T: ?Sized> {\n-    pub(crate) data_address: *const (),\n-    pub(crate) metadata: <T as Pointee>::Metadata,\n+struct PtrComponents<T: ?Sized> {\n+    data_address: *const (),\n+    metadata: <T as Pointee>::Metadata,\n }\n \n // Manual impl needed to avoid `T: Copy` bound."}, {"sha": "cfffe351a87d99ce71d079ef05f5615eb1236b42", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "patch": "@@ -394,7 +394,6 @@ pub use crate::intrinsics::copy;\n pub use crate::intrinsics::write_bytes;\n \n mod metadata;\n-pub(crate) use metadata::PtrRepr;\n #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n pub use metadata::{from_raw_parts, from_raw_parts_mut, metadata, DynMetadata, Pointee, Thin};\n "}, {"sha": "94ab13ed2e04f286f91d2554ccd60c7672104d07", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f132565eb31eeb9ec7e1800a6ab2ca354e710e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "patch": "@@ -123,18 +123,11 @@ impl<T> [T] {\n     #[lang = \"slice_len_fn\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n+    #[rustc_allow_const_fn_unstable(ptr_metadata)]\n     #[inline]\n     #[must_use]\n-    // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     pub const fn len(&self) -> usize {\n-        // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n-        // As of this writing this causes a \"Const-stable functions can only call other\n-        // const-stable functions\" error.\n-\n-        // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n-        // and PtrComponents<T> have the same memory layouts. Only std can make this\n-        // guarantee.\n-        unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }\n+        ptr::metadata(self)\n     }\n \n     /// Returns `true` if the slice has a length of 0."}]}