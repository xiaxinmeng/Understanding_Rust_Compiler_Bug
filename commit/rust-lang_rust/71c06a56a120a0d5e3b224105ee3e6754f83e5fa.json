{"sha": "71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYzA2YTU2YTEyMGEwZDVlM2IyMjQxMDVlZTNlNjc1NGY4M2U1ZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-18T22:06:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-18T22:06:34Z"}, "message": "Auto merge of #38051 - sanxiyn:unused-type-alias-3, r=eddyb\n\n Warn unused type aliases, reimplemented\n\nReimplementation of #37631. Fix #37455.", "tree": {"sha": "5a5f30b34654fa20fa381917bd8abf17f93f5d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5f30b34654fa20fa381917bd8abf17f93f5d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "html_url": "https://github.com/rust-lang/rust/commit/71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617", "html_url": "https://github.com/rust-lang/rust/commit/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617"}, {"sha": "f71f31aa6113bb9fe0e0afa91da2190b1f5cc492", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71f31aa6113bb9fe0e0afa91da2190b1f5cc492", "html_url": "https://github.com/rust-lang/rust/commit/f71f31aa6113bb9fe0e0afa91da2190b1f5cc492"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "1c5dd97b74bd332c2b5854116df34f5910c34649", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -86,20 +86,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn handle_definition(&mut self, id: ast::NodeId, def: Def) {\n-        // If `bar` is a trait item, make sure to mark Foo as alive in `Foo::bar`\n-        match def {\n-            Def::AssociatedTy(..) | Def::Method(_) | Def::AssociatedConst(_)\n-            if self.tcx.trait_of_item(def.def_id()).is_some() => {\n-                if let Some(substs) = self.tcx.tables().item_substs.get(&id) {\n-                    if let ty::TyAdt(tyid, _) = substs.substs.type_at(0).sty {\n-                        self.check_def_id(tyid.did);\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-\n+    fn handle_definition(&mut self, def: Def) {\n         match def {\n             Def::Const(_) | Def::AssociatedConst(..) => {\n                 self.check_def_id(def.def_id());\n@@ -241,7 +228,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         match expr.node {\n             hir::ExprPath(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tcx.tables().qpath_def(qpath, expr.id);\n-                self.handle_definition(expr.id, def);\n+                self.handle_definition(def);\n             }\n             hir::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id);\n@@ -281,7 +268,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             }\n             PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tcx.tables().qpath_def(qpath, pat.id);\n-                self.handle_definition(pat.id, def);\n+                self.handle_definition(def);\n             }\n             _ => ()\n         }\n@@ -291,8 +278,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         self.ignore_non_const_paths = false;\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n-        self.handle_definition(id, path.def);\n+    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n+        self.handle_definition(path.def);\n         intravisit::walk_path(self, path);\n     }\n }\n@@ -426,6 +413,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n             hir::ItemStatic(..)\n             | hir::ItemConst(..)\n             | hir::ItemFn(..)\n+            | hir::ItemTy(..)\n             | hir::ItemEnum(..)\n             | hir::ItemStruct(..)\n             | hir::ItemUnion(..) => true,"}, {"sha": "bdefc39a61a851077c44a2dcda3ce3a8dd2e28b4", "filename": "src/librustc_data_structures/graph/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc_data_structures%2Fgraph%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc_data_structures%2Fgraph%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftests.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -11,8 +11,6 @@\n use graph::*;\n use std::fmt::Debug;\n \n-type TestNode = Node<&'static str>;\n-type TestEdge = Edge<&'static str>;\n type TestGraph = Graph<&'static str, &'static str>;\n \n fn create_graph() -> TestGraph {"}, {"sha": "8242f53896afc6c762a3ff2ef84edf62295456de", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -12,7 +12,7 @@ use std::io;\n use std::ffi::{OsString, OsStr};\n use std::os::windows::prelude::*;\n use std::ptr;\n-use libc::{c_void, c_long};\n+use libc::c_long;\n \n pub type DWORD = u32;\n type LPCWSTR = *const u16;\n@@ -38,8 +38,6 @@ pub enum __HKEY__ {}\n pub type HKEY = *mut __HKEY__;\n pub type PHKEY = *mut HKEY;\n pub type REGSAM = DWORD;\n-pub type LPWSTR = *mut u16;\n-pub type PFILETIME = *mut c_void;\n \n #[link(name = \"advapi32\")]\n extern \"system\" {"}, {"sha": "5384ef46e9ae3ce91816c577332c701b1f8e1317", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -47,7 +47,9 @@ pub type CHAR = c_char;\n pub type HCRYPTPROV = LONG_PTR;\n pub type ULONG_PTR = c_ulonglong;\n pub type ULONG = c_ulong;\n+#[cfg(target_arch = \"x86_64\")]\n pub type ULONGLONG = u64;\n+#[cfg(target_arch = \"x86_64\")]\n pub type DWORDLONG = ULONGLONG;\n \n pub type LPBOOL = *mut BOOL;\n@@ -66,7 +68,6 @@ pub type LPVOID = *mut c_void;\n pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n-pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n@@ -311,8 +312,6 @@ pub struct WSADATA {\n     pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n }\n \n-pub type WSAEVENT = HANDLE;\n-\n #[repr(C)]\n pub struct WSAPROTOCOL_INFO {\n     pub dwServiceFlags1: DWORD,"}, {"sha": "e630a01a59300f8edb415e383579c64d922af608", "filename": "src/test/compile-fail/issue-32119.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Fissue-32119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Fissue-32119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32119.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n+#![allow(dead_code)]\n \n pub type T = ();\n mod foo { pub use super::T; }"}, {"sha": "aaa01aa6bbe0b5de257caf66f24ef687b93f5556", "filename": "src/test/compile-fail/lint-dead-code-type-alias.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Flint-dead-code-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Flint-dead-code-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-type-alias.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+type Used = u8;\n+type Unused = u8; //~ ERROR type alias is never used\n+\n+fn id(x: Used) -> Used { x }\n+\n+fn main() {\n+    id(0);\n+}"}, {"sha": "969f1500717d73f41cabba776782a741105b204f", "filename": "src/test/compile-fail/macro-tt-matchers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n+#![allow(dead_code)]\n \n macro_rules! foo {\n     ($x:tt) => (type Alias = $x<i32>;)"}, {"sha": "26a2e96f571081ef8b6fff2c7b289d0b11988937", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c06a56a120a0d5e3b224105ee3e6754f83e5fa/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=71c06a56a120a0d5e3b224105ee3e6754f83e5fa", "patch": "@@ -24,7 +24,7 @@ struct Test {\n const TEST_REPOS: &'static [Test] = &[Test {\n                                           name: \"cargo\",\n                                           repo: \"https://github.com/rust-lang/cargo\",\n-                                          sha: \"806e3c368a15f618244a3b4e918bf77f9c403fd0\",\n+                                          sha: \"b7be4f2ef2cf743492edc6dfb55d087ed88f2d76\",\n                                           lock: None,\n                                       },\n                                       Test {"}]}