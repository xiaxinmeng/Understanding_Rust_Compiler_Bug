{"sha": "a502e856034bcd4bc38152b3bd74cad792b62c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDJlODU2MDM0YmNkNGJjMzgxNTJiM2JkNzRjYWQ3OTJiNjJjNjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-31T16:31:55Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T23:31:59Z"}, "message": "AllTypes to function", "tree": {"sha": "bb1be651ef360f12d2b6b93180a90bda09147406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1be651ef360f12d2b6b93180a90bda09147406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a502e856034bcd4bc38152b3bd74cad792b62c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a502e856034bcd4bc38152b3bd74cad792b62c63", "html_url": "https://github.com/rust-lang/rust/commit/a502e856034bcd4bc38152b3bd74cad792b62c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a502e856034bcd4bc38152b3bd74cad792b62c63/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17bef30d0b1cc3851fb76fdd84b4d15bb629dc39", "url": "https://api.github.com/repos/rust-lang/rust/commits/17bef30d0b1cc3851fb76fdd84b4d15bb629dc39", "html_url": "https://github.com/rust-lang/rust/commit/17bef30d0b1cc3851fb76fdd84b4d15bb629dc39"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "ee7981aba013ae67b38befa85c84ec44ceb6e37b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a502e856034bcd4bc38152b3bd74cad792b62c63/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a502e856034bcd4bc38152b3bd74cad792b62c63/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a502e856034bcd4bc38152b3bd74cad792b62c63", "patch": "@@ -1757,48 +1757,46 @@ impl AllTypes {\n     }\n }\n \n-fn print_entries(f: &mut fmt::Formatter<'_>, e: &FxHashSet<ItemEntry>, title: &str,\n-                 class: &str) -> fmt::Result {\n+fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str, class: &str) {\n     if !e.is_empty() {\n         let mut e: Vec<&ItemEntry> = e.iter().collect();\n         e.sort();\n         write!(f, \"<h3 id='{}'>{}</h3><ul class='{} docblock'>{}</ul>\",\n                title,\n                Escape(title),\n                class,\n-               e.iter().map(|s| format!(\"<li>{}</li>\", s)).collect::<String>())?;\n+               e.iter().map(|s| format!(\"<li>{}</li>\", s)).collect::<String>());\n     }\n-    Ok(())\n }\n \n-impl fmt::Display for AllTypes {\n-fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    write!(f,\n-\"<h1 class='fqn'>\\\n-    <span class='out-of-band'>\\\n-        <span id='render-detail'>\\\n-            <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n-                [<span class='inner'>&#x2212;</span>]\\\n-            </a>\\\n+impl AllTypes {\n+    fn print(self, f: &mut Buffer) {\n+        write!(f,\n+    \"<h1 class='fqn'>\\\n+        <span class='out-of-band'>\\\n+            <span id='render-detail'>\\\n+                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n+                    [<span class='inner'>&#x2212;</span>]\\\n+                </a>\\\n+            </span>\n         </span>\n-    </span>\n-    <span class='in-band'>List of all items</span>\\\n-</h1>\")?;\n-    print_entries(f, &self.structs, \"Structs\", \"structs\")?;\n-    print_entries(f, &self.enums, \"Enums\", \"enums\")?;\n-    print_entries(f, &self.unions, \"Unions\", \"unions\")?;\n-    print_entries(f, &self.primitives, \"Primitives\", \"primitives\")?;\n-    print_entries(f, &self.traits, \"Traits\", \"traits\")?;\n-    print_entries(f, &self.macros, \"Macros\", \"macros\")?;\n-    print_entries(f, &self.attributes, \"Attribute Macros\", \"attributes\")?;\n-    print_entries(f, &self.derives, \"Derive Macros\", \"derives\")?;\n-    print_entries(f, &self.functions, \"Functions\", \"functions\")?;\n-    print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\")?;\n-    print_entries(f, &self.trait_aliases, \"Trait Aliases\", \"trait-aliases\")?;\n-    print_entries(f, &self.opaque_tys, \"Opaque Types\", \"opaque-types\")?;\n-    print_entries(f, &self.statics, \"Statics\", \"statics\")?;\n-    print_entries(f, &self.constants, \"Constants\", \"constants\")\n-}\n+        <span class='in-band'>List of all items</span>\\\n+    </h1>\");\n+        print_entries(f, &self.structs, \"Structs\", \"structs\");\n+        print_entries(f, &self.enums, \"Enums\", \"enums\");\n+        print_entries(f, &self.unions, \"Unions\", \"unions\");\n+        print_entries(f, &self.primitives, \"Primitives\", \"primitives\");\n+        print_entries(f, &self.traits, \"Traits\", \"traits\");\n+        print_entries(f, &self.macros, \"Macros\", \"macros\");\n+        print_entries(f, &self.attributes, \"Attribute Macros\", \"attributes\");\n+        print_entries(f, &self.derives, \"Derive Macros\", \"derives\");\n+        print_entries(f, &self.functions, \"Functions\", \"functions\");\n+        print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\");\n+        print_entries(f, &self.trait_aliases, \"Trait Aliases\", \"trait-aliases\");\n+        print_entries(f, &self.opaque_tys, \"Opaque Types\", \"opaque-types\");\n+        print_entries(f, &self.statics, \"Statics\", \"statics\");\n+        print_entries(f, &self.constants, \"Constants\", \"constants\")\n+    }\n }\n \n fn settings(root_path: &str, suffix: &str) -> String {\n@@ -1901,7 +1899,7 @@ impl Context {\n             String::new()\n         };\n         let v = layout::render(&self.shared.layout,\n-                       &page, sidebar, |buf: &mut Buffer| buf.from_display(all),\n+                       &page, sidebar, |buf: &mut Buffer| all.print(buf),\n                        &self.shared.themes);\n         self.shared.fs.write(&final_file, v.as_bytes())?;\n "}]}