{"sha": "4288a08e9a640e2b24d2f5974f6785f0ab82694b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODhhMDhlOWE2NDBlMmIyNGQyZjU5NzRmNjc4NWYwYWI4MjY5NGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-30T23:37:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-30T23:37:26Z"}, "message": "std: Favor cfg! over #[cfg] in unix rwlocks", "tree": {"sha": "0d57a251be748b1d508f361e3dffc1f25daef046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d57a251be748b1d508f361e3dffc1f25daef046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4288a08e9a640e2b24d2f5974f6785f0ab82694b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4288a08e9a640e2b24d2f5974f6785f0ab82694b", "html_url": "https://github.com/rust-lang/rust/commit/4288a08e9a640e2b24d2f5974f6785f0ab82694b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4288a08e9a640e2b24d2f5974f6785f0ab82694b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e962870420fef19e8f23a299dbe7499aca1656a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e962870420fef19e8f23a299dbe7499aca1656a5", "html_url": "https://github.com/rust-lang/rust/commit/e962870420fef19e8f23a299dbe7499aca1656a5"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "b754d3a97cf5ecde6503f810c0104a6bcba8fea6", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4288a08e9a640e2b24d2f5974f6785f0ab82694b/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4288a08e9a640e2b24d2f5974f6785f0ab82694b/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=4288a08e9a640e2b24d2f5974f6785f0ab82694b", "patch": "@@ -49,21 +49,16 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn write_unlock(&self) { self.read_unlock() }\n     #[inline]\n-    #[cfg(not(target_os = \"dragonfly\"))]\n     pub unsafe fn destroy(&self) {\n-        let r = ffi::pthread_rwlock_destroy(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-\n-    #[inline]\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n-        use libc;\n         let r = ffi::pthread_rwlock_destroy(self.inner.get());\n         // On DragonFly pthread_rwlock_destroy() returns EINVAL if called on a\n         // rwlock that was just initialized with\n         // ffi::PTHREAD_RWLOCK_INITIALIZER. Once it is used (locked/unlocked)\n         // or pthread_rwlock_init() is called, this behaviour no longer occurs.\n-        debug_assert!(r == 0 || r == libc::EINVAL);\n+        if cfg!(target_os = \"dragonfly\") {\n+            debug_assert!(r == 0 || r == libc::EINVAL);\n+        } else {\n+            debug_assert_eq!(r, 0);\n+        }\n     }\n }"}]}