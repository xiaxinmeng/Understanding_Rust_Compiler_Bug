{"sha": "d38f759c631039d11cb490692b5e07b00324ff10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOGY3NTljNjMxMDM5ZDExY2I0OTA2OTJiNWUwN2IwMDMyNGZmMTA=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T15:24:35Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T15:24:35Z"}, "message": "Use closure in trailing position and strongly type header map", "tree": {"sha": "84843c6e72a023fe011dfefd98cfd809d003dec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84843c6e72a023fe011dfefd98cfd809d003dec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38f759c631039d11cb490692b5e07b00324ff10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38f759c631039d11cb490692b5e07b00324ff10", "html_url": "https://github.com/rust-lang/rust/commit/d38f759c631039d11cb490692b5e07b00324ff10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38f759c631039d11cb490692b5e07b00324ff10/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87933e15ce3b7a603b6e28597cdc152669e90cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/87933e15ce3b7a603b6e28597cdc152669e90cca", "html_url": "https://github.com/rust-lang/rust/commit/87933e15ce3b7a603b6e28597cdc152669e90cca"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "0ee5280cc02d89ed2047185b801b05b7a885bfbb", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d38f759c631039d11cb490692b5e07b00324ff10/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d38f759c631039d11cb490692b5e07b00324ff10/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d38f759c631039d11cb490692b5e07b00324ff10", "patch": "@@ -177,9 +177,9 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         if (!shouldCheckForNewNightly) return;\n     }\n \n-    const release = await performDownloadWithRetryDialog(async () => {\n+    const release = await performDownloadWithRetryDialog(state, async () => {\n         return await fetchRelease(\"nightly\", state.githubToken);\n-    }, state).catch((e) => {\n+    }).catch((e) => {\n         log.error(e);\n         if (state.releaseId === undefined) { // Show error only for the initial download\n             vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n@@ -199,7 +199,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n \n-    await performDownloadWithRetryDialog(async () => {\n+    await performDownloadWithRetryDialog(state, async () => {\n         // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n         await fs.unlink(dest).catch(err => {\n             if (err.code !== \"ENOENT\") throw err;\n@@ -210,7 +210,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n             dest,\n             progressTitle: \"Downloading rust-analyzer extension\",\n         });\n-    }, state);\n+    });\n \n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n     await fs.unlink(dest);\n@@ -323,13 +323,13 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     const releaseTag = config.package.releaseTag;\n-    const release = await performDownloadWithRetryDialog(async () => {\n+    const release = await performDownloadWithRetryDialog(state, async () => {\n         return await fetchRelease(releaseTag, state.githubToken);\n-    }, state);\n+    });\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n-    await performDownloadWithRetryDialog(async () => {\n+    await performDownloadWithRetryDialog(state, async () => {\n         // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n         await fs.unlink(dest).catch(err => {\n             if (err.code !== \"ENOENT\") throw err;\n@@ -342,7 +342,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n             gunzip: true,\n             mode: 0o755\n         });\n-    }, state);\n+    });\n \n     // Patching executable if that's NixOS.\n     if (await fs.stat(\"/etc/nixos\").then(_ => true).catch(_ => false)) {\n@@ -353,7 +353,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     return dest;\n }\n \n-async function performDownloadWithRetryDialog<T>(downloadFunc: () => Promise<T>, state: PersistentState): Promise<T> {\n+async function performDownloadWithRetryDialog<T>(state: PersistentState, downloadFunc: () => Promise<T>): Promise<T> {\n     while (true) {\n         try {\n             return await downloadFunc();\n@@ -392,13 +392,16 @@ async function queryForGithubToken(state: PersistentState): Promise<void> {\n     };\n \n     const newToken = await vscode.window.showInputBox(githubTokenOptions);\n-    if (newToken !== undefined) {\n-        if (newToken === \"\") {\n-            log.info(\"Clearing github token\");\n-            await state.updateGithubToken(undefined);\n-        } else {\n-            log.info(\"Storing new github token\");\n-            await state.updateGithubToken(newToken);\n-        }\n+    if (newToken === undefined) {\n+        // The user aborted the dialog => Do not update the stored token\n+        return;\n+    }\n+\n+    if (newToken === \"\") {\n+        log.info(\"Clearing github token\");\n+        await state.updateGithubToken(undefined);\n+    } else {\n+        log.info(\"Storing new github token\");\n+        await state.updateGithubToken(newToken);\n     }\n }"}, {"sha": "cfbe1fd486b49ecda1d690cfda254187876f4046", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38f759c631039d11cb490692b5e07b00324ff10/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d38f759c631039d11cb490692b5e07b00324ff10/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=d38f759c631039d11cb490692b5e07b00324ff10", "patch": "@@ -28,7 +28,7 @@ export async function fetchRelease(\n \n     log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n-    var headers: any = { Accept: \"application/vnd.github.v3+json\" };\n+    const headers: Record<string, string> = { Accept: \"application/vnd.github.v3+json\" };\n     if (githubToken != null) {\n         headers.Authorization = \"token \" + githubToken;\n     }"}]}