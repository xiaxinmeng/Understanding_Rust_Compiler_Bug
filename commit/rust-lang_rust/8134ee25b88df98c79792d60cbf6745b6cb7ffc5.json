{"sha": "8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzRlZTI1Yjg4ZGY5OGM3OTc5MmQ2MGNiZjY3NDViNmNiN2ZmYzU=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-11T14:32:41Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-11T14:32:41Z"}, "message": "renamed emit_nil to emit_unit", "tree": {"sha": "8b5b2ec3c10fe72b00818ee7a96e117617ce2e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5b2ec3c10fe72b00818ee7a96e117617ce2e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "html_url": "https://github.com/rust-lang/rust/commit/8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e7b6bf6b96e54051aeeede43378b925e2e5201", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e7b6bf6b96e54051aeeede43378b925e2e5201", "html_url": "https://github.com/rust-lang/rust/commit/a0e7b6bf6b96e54051aeeede43378b925e2e5201"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "19e235154cbd08d23cc440f856bcb6358fb27905", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "patch": "@@ -1020,7 +1020,7 @@ impl<'enc, 'a, 'tcx, E> Encoder for CacheEncoder<'enc, 'a, 'tcx, E>\n {\n     type Error = E::Error;\n \n-    fn emit_nil(&mut self) -> Result<(), Self::Error> {\n+    fn emit_unit(&mut self) -> Result<(), Self::Error> {\n         Ok(())\n     }\n "}, {"sha": "56b38cfbc872a2711e0b7912f27a556bdfdc7830", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "patch": "@@ -75,7 +75,7 @@ macro_rules! encoder_methods {\n impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n     type Error = <opaque::Encoder as Encoder>::Error;\n \n-    fn emit_nil(&mut self) -> Result<(), Self::Error> {\n+    fn emit_unit(&mut self) -> Result<(), Self::Error> {\n         Ok(())\n     }\n "}, {"sha": "9439dc78d3ca447029f0ce336d689d6d83c4c6a0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "patch": "@@ -490,7 +490,7 @@ macro_rules! emit_enquoted_if_mapkey {\n impl<'a> ::Encoder for Encoder<'a> {\n     type Error = EncoderError;\n \n-    fn emit_nil(&mut self) -> EncodeResult {\n+    fn emit_unit(&mut self) -> EncodeResult {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         write!(self.writer, \"null\")?;\n         Ok(())\n@@ -648,7 +648,7 @@ impl<'a> ::Encoder for Encoder<'a> {\n     }\n     fn emit_option_none(&mut self) -> EncodeResult {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n-        self.emit_nil()\n+        self.emit_unit()\n     }\n     fn emit_option_some<F>(&mut self, f: F) -> EncodeResult where\n         F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n@@ -740,7 +740,7 @@ impl<'a> PrettyEncoder<'a> {\n impl<'a> ::Encoder for PrettyEncoder<'a> {\n     type Error = EncoderError;\n \n-    fn emit_nil(&mut self) -> EncodeResult {\n+    fn emit_unit(&mut self) -> EncodeResult {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         write!(self.writer, \"null\")?;\n         Ok(())\n@@ -923,7 +923,7 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n     }\n     fn emit_option_none(&mut self) -> EncodeResult {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n-        self.emit_nil()\n+        self.emit_unit()\n     }\n     fn emit_option_some<F>(&mut self, f: F) -> EncodeResult where\n         F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n@@ -1016,7 +1016,7 @@ impl Encodable for Json {\n             Json::Boolean(v) => v.encode(e),\n             Json::Array(ref v) => v.encode(e),\n             Json::Object(ref v) => v.encode(e),\n-            Json::Null => e.emit_nil(),\n+            Json::Null => e.emit_unit(),\n         }\n     }\n }"}, {"sha": "4ce80bc36a080a44ce6b693d283a8f9fe043077e", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "patch": "@@ -55,7 +55,7 @@ impl serialize::Encoder for Encoder {\n     type Error = !;\n \n     #[inline]\n-    fn emit_nil(&mut self) -> EncodeResult {\n+    fn emit_unit(&mut self) -> EncodeResult {\n         Ok(())\n     }\n "}, {"sha": "f0b49c3d9bc8faec0db174a40eeafe0f555e8d70", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134ee25b88df98c79792d60cbf6745b6cb7ffc5/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=8134ee25b88df98c79792d60cbf6745b6cb7ffc5", "patch": "@@ -25,7 +25,7 @@ pub trait Encoder {\n     type Error;\n \n     // Primitive types:\n-    fn emit_nil(&mut self) -> Result<(), Self::Error>;\n+    fn emit_unit(&mut self) -> Result<(), Self::Error>;\n     fn emit_usize(&mut self, v: usize) -> Result<(), Self::Error>;\n     fn emit_u128(&mut self, v: u128) -> Result<(), Self::Error>;\n     fn emit_u64(&mut self, v: u64) -> Result<(), Self::Error>;\n@@ -537,7 +537,7 @@ impl Decodable for char {\n \n impl Encodable for () {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_nil()\n+        s.emit_unit()\n     }\n }\n "}]}