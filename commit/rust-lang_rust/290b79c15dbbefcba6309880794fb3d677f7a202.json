{"sha": "290b79c15dbbefcba6309880794fb3d677f7a202", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MGI3OWMxNWRiYmVmY2JhNjMwOTg4MDc5NGZiM2Q2NzdmN2EyMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-24T23:18:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-02-05T22:37:16Z"}, "message": "Clean up tidy scripts, coverage, performance\n\nThis restructures tidy.py to walk the tree itself,\nand improves performance considerably by not loading entire\nfiles into buffers for licenseck.\n\nSplits build rules into 'tidy', 'tidy-basic', 'tidy-binaries',\n'tidy-errors', 'tidy-features'.", "tree": {"sha": "4e16333f0ab109930500455f58fe6536e1c00008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e16333f0ab109930500455f58fe6536e1c00008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290b79c15dbbefcba6309880794fb3d677f7a202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290b79c15dbbefcba6309880794fb3d677f7a202", "html_url": "https://github.com/rust-lang/rust/commit/290b79c15dbbefcba6309880794fb3d677f7a202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290b79c15dbbefcba6309880794fb3d677f7a202/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e16ad8c3f78cf750d12afac03a1d2cc9312651c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e16ad8c3f78cf750d12afac03a1d2cc9312651c", "html_url": "https://github.com/rust-lang/rust/commit/0e16ad8c3f78cf750d12afac03a1d2cc9312651c"}], "stats": {"total": 302, "additions": 196, "deletions": 106}, "files": [{"sha": "13d12c99dc96451b08351b0a86f12b7248ecdb04", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -235,30 +235,10 @@ cleantestlibs:\n ######################################################################\n \n ifdef CFG_NOTIDY\n+.PHONY: tidy\n tidy:\n else\n \n-ALL_CS := $(wildcard $(S)src/rt/*.cpp \\\n-                     $(S)src/rt/*/*.cpp \\\n-                     $(S)src/rt/*/*/*.cpp \\\n-                     $(S)src/rustllvm/*.cpp)\n-ALL_CS := $(filter-out $(S)src/rt/miniz.cpp \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/src/*.c) \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.c) \\\n-\t,$(ALL_CS))\n-ALL_HS := $(wildcard $(S)src/rt/*.h \\\n-                     $(S)src/rt/*/*.h \\\n-                     $(S)src/rt/*/*/*.h \\\n-                     $(S)src/rustllvm/*.h)\n-ALL_HS := $(filter-out $(S)src/rt/valgrind/valgrind.h \\\n-                       $(S)src/rt/valgrind/memcheck.h \\\n-                       $(S)src/rt/msvc/typeof.h \\\n-                       $(S)src/rt/msvc/stdint.h \\\n-                       $(S)src/rt/msvc/inttypes.h \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/src/*.h) \\\n-\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.h) \\\n-\t,$(ALL_HS))\n-\n # Run the tidy script in multiple parts to avoid huge 'echo' commands\n .PHONY: tidy\n tidy: tidy-basic tidy-binaries tidy-errors tidy-features\n@@ -268,30 +248,7 @@ endif\n .PHONY: tidy-basic\n tidy-basic:\n \t\t@$(call E, check: formatting)\n-\t\t$(Q)find $(S)src -name '*.r[sc]' \\\n-\t\t    -and -not -regex '^$(S)src/jemalloc.*' \\\n-\t\t    -and -not -regex '^$(S)src/libuv.*' \\\n-\t\t    -and -not -regex '^$(S)src/llvm.*' \\\n-\t\t    -and -not -regex '^$(S)src/gyp.*' \\\n-\t\t    -and -not -regex '^$(S)src/libbacktrace.*' \\\n-\t\t    -print0 \\\n-\t\t| xargs -0 -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.py' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/doc -name '*.js' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.sh' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.pl' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.c' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src/etc -name '*.h' \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)echo $(ALL_CS) \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)echo $(ALL_HS) \\\n-\t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n+\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/tidy.py $(S)src/\n \n .PHONY: tidy-binaries\n tidy-binaries:"}, {"sha": "7b11504f3cd8023b63c4948f7bb2a97f15f54b27", "filename": "src/etc/errorck.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -15,6 +15,10 @@\n import os\n import re\n \n+if len(sys.argv) < 2:\n+    print \"usage: errorck.py <src-dir>\"\n+    sys.exit(1)\n+\n src_dir = sys.argv[1]\n errcode_map = {}\n error_re = re.compile(\"(E\\d\\d\\d\\d)\")"}, {"sha": "df4ea998fefc2b330ae2d0d0afcae0eb56275a1c", "filename": "src/etc/featureck.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -20,6 +20,10 @@\n \n import sys, os, re\n \n+if len(sys.argv) < 2:\n+    print \"usage: featurkck.py <src-dir>\"\n+    sys.exit(1)\n+\n src_dir = sys.argv[1]\n \n # Features that are allowed to exist in both the language and the library"}, {"sha": "889b2c95a7ea88c5a740c8a4bfda2e607801d006", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -22,11 +22,6 @@\n \\\\1 except according to those terms.\"\"\")\n \n exceptions = [\n-    \"rt/rust_android_dummy.cpp\", # BSD, chromium\n-    \"rt/rust_android_dummy.h\", # BSD, chromium\n-    \"rt/isaac/randport.cpp\", # public domain\n-    \"rt/isaac/rand.h\", # public domain\n-    \"rt/isaac/standard.h\", # public domain\n     \"libstd/sync/mpsc/mpsc_queue.rs\", # BSD\n     \"libstd/sync/mpsc/spsc_queue.rs\", # BSD\n     \"test/bench/shootout-binarytrees.rs\", # BSD"}, {"sha": "d055576f430f3a7f072d54bc0a4855f4b042abc6", "filename": "src/etc/tidy.py", "status": "modified", "additions": 155, "deletions": 49, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -51,78 +51,184 @@ def do_license_check(name, contents):\n     if not check_license(name, contents):\n         report_error_name_no(name, 1, \"incorrect license\")\n \n-\n-file_names = [s for s in sys.argv[1:] if (not s.endswith(\"_gen.rs\"))\n-                                     and (not \".#\" in s)]\n-\n current_name = \"\"\n current_contents = \"\"\n check_tab = True\n check_cr = True\n check_linelength = True\n \n+if len(sys.argv) < 2:\n+    print \"usage: tidy.py <src-dir>\"\n+    sys.exit(1)\n+\n+src_dir = sys.argv[1]\n \n try:\n-    for line in fileinput.input(file_names,\n+    count_rs = 0\n+    count_py = 0\n+    count_js = 0\n+    count_sh = 0\n+    count_pl = 0\n+    count_c = 0\n+    count_h = 0\n+    count_other = 0\n+\n+    count_lines = 0\n+    count_non_blank_lines = 0\n+\n+    def update_counts(current_name):\n+        global count_rs\n+        global count_py\n+        global count_js\n+        global count_sh\n+        global count_pl\n+        global count_c\n+        global count_h\n+        global count_other\n+\n+        if current_name.endswith(\".rs\"):\n+            count_rs += 1\n+        if current_name.endswith(\".py\"):\n+            count_py += 1\n+        if current_name.endswith(\".js\"):\n+            count_js += 1\n+        if current_name.endswith(\".sh\"):\n+            count_sh += 1\n+        if current_name.endswith(\".pl\"):\n+            count_pl += 1\n+        if current_name.endswith(\".c\"):\n+            count_c += 1\n+        if current_name.endswith(\".h\"):\n+            count_h += 1\n+\n+    all_paths = set()\n+\n+    for (dirpath, dirnames, filenames) in os.walk(src_dir):\n+\n+        # Skip some third-party directories\n+        if \"src/jemalloc\" in dirpath: continue\n+        if \"src/llvm\" in dirpath: continue\n+        if \"src/gyp\" in dirpath: continue\n+        if \"src/libbacktrace\" in dirpath: continue\n+        if \"src/compiler-rt\" in dirpath: continue\n+        if \"src/rt/hoedown\" in dirpath: continue\n+        if \"src/rustllvm\" in dirpath: continue\n+        if \"src/rt/valgrind\" in dirpath: continue\n+        if \"src/rt/msvc\" in dirpath: continue\n+        if \"src/rust-installer\" in dirpath: continue\n+\n+        def interesting_file(f):\n+            if \"miniz.c\" in f \\\n+            or \"jquery\" in f \\\n+            or \"rust_android_dummy\" in f:\n+                return False\n+\n+            if f.endswith(\".rs\") \\\n+            or f.endswith(\".py\") \\\n+            or f.endswith(\".js\") \\\n+            or f.endswith(\".sh\") \\\n+            or f.endswith(\".pl\") \\\n+            or f.endswith(\".c\") \\\n+            or f.endswith(\".h\") :\n+                return True\n+            else:\n+                return False\n+\n+        file_names = [os.path.join(dirpath, f) for f in filenames\n+                      if interesting_file(f)\n+                      and not f.endswith(\"_gen.rs\")\n+                      and not \".#\" is f]\n+\n+        if not file_names:\n+            continue\n+\n+        for line in fileinput.input(file_names,\n                                 openhook=fileinput.hook_encoded(\"utf-8\")):\n \n-        if \"tidy.py\" not in fileinput.filename():\n+            filename = fileinput.filename()\n+\n+            if \"tidy.py\" not in filename:\n+                if \"TODO\" in line:\n+                    report_err(\"TODO is deprecated; use FIXME\")\n+                match = re.match(r'^.*/(\\*|/!?)\\s*XXX', line)\n+                if match:\n+                    report_err(\"XXX is no longer necessary, use FIXME\")\n+                match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n+                if match and \"TRAVIS\" not in os.environ:\n+                    m = match.group(1)\n+                    if \"snap\" in m.lower():\n+                        report_warn(match.group(1))\n+                match = re.match(r'^.*//\\s*SNAP\\s+(\\w+)', line)\n+                if match:\n+                    hsh = match.group(1)\n+                    date, rev = snapshot.curr_snapshot_rev()\n+                    if not hsh.startswith(rev):\n+                        report_err(\"snapshot out of date (\" + date\n+                            + \"): \" + line)\n+                else:\n+                    if \"SNAP\" in line:\n+                        report_warn(\"unmatched SNAP line: \" + line)\n+\n             if cr_flag in line:\n                 check_cr = False\n             if tab_flag in line:\n                 check_tab = False\n             if linelength_flag in line:\n                 check_linelength = False\n-            if \"TODO\" in line:\n-                report_err(\"TODO is deprecated; use FIXME\")\n-            match = re.match(r'^.*/(\\*|/!?)\\s*XXX', line)\n-            if match:\n-                report_err(\"XXX is no longer necessary, use FIXME\")\n-            match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n-            if match and \"TRAVIS\" not in os.environ:\n-                m = match.group(1)\n-                if \"snap\" in m.lower():\n-                    report_warn(match.group(1))\n-            match = re.match(r'^.*//\\s*SNAP\\s+(\\w+)', line)\n-            if match:\n-                hsh = match.group(1)\n-                date, rev = snapshot.curr_snapshot_rev()\n-                if not hsh.startswith(rev):\n-                    report_err(\"snapshot out of date (\" + date\n-                               + \"): \" + line)\n-            else:\n-                if \"SNAP\" in line:\n-                    report_warn(\"unmatched SNAP line: \" + line)\n-\n-        if check_tab and ('\\t' in line and\n-                          \"Makefile\" not in fileinput.filename()):\n-            report_err(\"tab character\")\n-        if check_cr and not autocrlf and '\\r' in line:\n-            report_err(\"CR character\")\n-        if line.endswith(\" \\n\") or line.endswith(\"\\t\\n\"):\n-            report_err(\"trailing whitespace\")\n-        line_len = len(line)-2 if autocrlf else len(line)-1\n-\n-        if check_linelength and line_len > cols:\n-            report_err(\"line longer than %d chars\" % cols)\n-\n-        if fileinput.isfirstline() and current_name != \"\":\n-            do_license_check(current_name, current_contents)\n-\n-        if fileinput.isfirstline():\n-            current_name = fileinput.filename()\n-            current_contents = \"\"\n-            check_cr = True\n-            check_tab = True\n-            check_linelength = True\n \n-        current_contents += line\n+            if check_tab and ('\\t' in line and\n+                              \"Makefile\" not in filename):\n+                report_err(\"tab character\")\n+            if check_cr and not autocrlf and '\\r' in line:\n+                report_err(\"CR character\")\n+            if line.endswith(\" \\n\") or line.endswith(\"\\t\\n\"):\n+                report_err(\"trailing whitespace\")\n+            line_len = len(line)-2 if autocrlf else len(line)-1\n+\n+            if check_linelength and line_len > cols:\n+                report_err(\"line longer than %d chars\" % cols)\n+\n+            if fileinput.isfirstline():\n+                # This happens at the end of each file except the last.\n+                if current_name != \"\":\n+                    update_counts(current_name)\n+                    assert len(current_contents) > 0\n+                    do_license_check(current_name, current_contents)\n+\n+                current_name = filename\n+                current_contents = \"\"\n+                check_cr = True\n+                check_tab = True\n+                check_linelength = True\n+\n+            # Put a reasonable limit on the amount of header data we use for\n+            # the licenseck\n+            if len(current_contents) < 1000:\n+                current_contents += line\n+\n+            count_lines += 1\n+            if line.strip():\n+                count_non_blank_lines += 1\n \n     if current_name != \"\":\n+        update_counts(current_name)\n+        assert len(current_contents) > 0\n         do_license_check(current_name, current_contents)\n \n except UnicodeDecodeError as e:\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n+print\n+print \"* linted .rs files: \" + str(count_rs)\n+print \"* linted .py files: \" + str(count_py)\n+print \"* linted .js files: \" + str(count_js)\n+print \"* linted .sh files: \" + str(count_sh)\n+print \"* linted .pl files: \" + str(count_pl)\n+print \"* linted .c files: \" + str(count_c)\n+print \"* linted .h files: \" + str(count_h)\n+print \"* other linted files: \" + str(count_other)\n+print \"* total lines of code: \" + str(count_lines)\n+print \"* total non-blank lines of code: \" + str(count_non_blank_lines)\n+print\n \n sys.exit(err)"}, {"sha": "b5be3daa13e1d01b4f294f61b81b94f42dc1011f", "filename": "src/grammar/check.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,5 +1,7 @@\n #!/bin/sh\n \n+# ignore-license\n+\n # Run the reference lexer against libsyntax and compare the tokens and spans.\n # If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n "}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-dynamic-dylib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fcfoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-dynamic-rlib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fcfoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/c-link-to-rust-dylib/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/c-link-to-rust-staticlib/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-static-dylib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fcfoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make/c-static-rlib/cfoo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fcfoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int foo() { return 0; }"}, {"sha": "f9faef64afc41a519832a2372d48e7cea401fad4", "filename": "src/test/run-make/extern-fn-generic/test.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,16 +1,17 @@\n+// ignore-license\n #include <stdint.h>\n \n typedef struct TestStruct {\n-\tuint8_t x;\n-\tint32_t y;\n+        uint8_t x;\n+        int32_t y;\n } TestStruct;\n \n typedef int callback(TestStruct s);\n \n uint32_t call(callback *c) {\n-\tTestStruct s;\n-\ts.x = 'a';\n-\ts.y = 3;\n+        TestStruct s;\n+        s.x = 'a';\n+        s.y = 3;\n \n-\treturn c(s);\n+        return c(s);\n }"}, {"sha": "1a9855dedec490f85bcec3c5efc8212d19f44fb6", "filename": "src/test/run-make/extern-fn-mangle/test.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-mangle%2Ftest.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,8 +1,9 @@\n+// ignore-license\n #include <stdint.h>\n \n uint32_t foo();\n uint32_t bar();\n \n uint32_t add() {\n-\treturn foo() + bar();\n+        return foo() + bar();\n }"}, {"sha": "121e48e84e46fd8ba2fbbbbf1eb32c99f4859a37", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n // Pragma needed cause of gcc bug on windows: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n #pragma pack(1)\n struct __attribute__((packed)) Foo {"}, {"sha": "8c87c230693d1d0d490d2028ac9b302f2c0d12f3", "filename": "src/test/run-make/extern-fn-with-union/test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n #include <stdio.h>\n #include <stdint.h>\n "}, {"sha": "c761f029effbec56ea1bf0e5a7690eb3f3baa57c", "filename": "src/test/run-make/interdependent-c-libraries/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n void bar() { foo(); }"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/interdependent-c-libraries/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}, {"sha": "186a0046e80ac2dc6a9c56a245a247f80946083e", "filename": "src/test/run-make/issue-12446/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void some_c_symbol() {}"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/issue-15460/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}, {"sha": "a595939f92e8ceaed80490e0752c7472df873c63", "filename": "src/test/run-make/link-path-order/correct.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int should_return_one() { return 1; }"}, {"sha": "c53e7e3c48c058cdf12cf54043aa94e4882d71ec", "filename": "src/test/run-make/link-path-order/wrong.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n int should_return_one() { return 0; }"}, {"sha": "d7d33ea12e8061544e43400232159f3fe500ecf8", "filename": "src/test/run-make/linkage-attr-on-static/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n #include <stdint.h>\n \n extern int32_t BAZ;"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make/lto-smoke-c/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n void foo();\n \n int main() {"}, {"sha": "3c167b45af98d47cac41dffb772ea7a054f83c94", "filename": "src/test/run-make/manual-link/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void bar() {}"}, {"sha": "3c167b45af98d47cac41dffb772ea7a054f83c94", "filename": "src/test/run-make/manual-link/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void bar() {}"}, {"sha": "a7b02a2f10b635341d9dc9f3239a4f39fa3b6c60", "filename": "src/test/run-make/no-duplicate-libs/bar.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1,3 +1,4 @@\n+// ignore-license\n extern void foo();\n \n void bar() { foo(); }"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make/no-duplicate-libs/foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/290b79c15dbbefcba6309880794fb3d677f7a202/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.c?ref=290b79c15dbbefcba6309880794fb3d677f7a202", "patch": "@@ -1 +1,2 @@\n+// ignore-license\n void foo() {}"}]}