{"sha": "866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NmE1YjFjNzhlNTJiZDVjMWMzNGRmNGExYTNjMzYzYWQ2YmZlN2M=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-02T21:34:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-02T21:35:36Z"}, "message": "Added support for struct-like enum variants in middle::ty::enum_variants().", "tree": {"sha": "03eb23f8ed158fceaa3a61ab6c626111c87940c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03eb23f8ed158fceaa3a61ab6c626111c87940c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c", "html_url": "https://github.com/rust-lang/rust/commit/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab34864a304fa364dc91bf16988e272e93de8d62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab34864a304fa364dc91bf16988e272e93de8d62", "html_url": "https://github.com/rust-lang/rust/commit/ab34864a304fa364dc91bf16988e272e93de8d62"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "8c70c6204768501a19e9c120d20817f9b1fa0f3c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=866a5b1c78e52bd5c1c34df4a1a3c363ad6bfe7c", "patch": "@@ -3816,41 +3816,62 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                 }, _) => {\n             let mut disr_val = -1;\n             @enum_definition.variants.iter().transform(|variant| {\n+\n+                let ctor_ty = node_id_to_type(cx, variant.node.id);\n+\n                 match variant.node.kind {\n                     ast::tuple_variant_kind(ref args) => {\n-                        let ctor_ty = node_id_to_type(cx, variant.node.id);\n-                        let arg_tys = {\n-                            if args.len() > 0u {\n-                                ty_fn_args(ctor_ty).map(|a| *a)\n-                            } else {\n+                        let arg_tys = if args.len() > 0u {\n+                                ty_fn_args(ctor_ty).map(|a| *a) }\n+                            else {\n                                 ~[]\n-                            }\n-                        };\n+                            };\n+\n                         match variant.node.disr_expr {\n                           Some (ex) => {\n                             disr_val = match const_eval::eval_const_expr(cx,\n                                                                          ex) {\n                               const_eval::const_int(val) => val as int,\n-                              _ => cx.sess.bug(\"tag_variants: bad disr expr\")\n+                              _ => cx.sess.bug(\"enum_variants: bad disr expr\")\n                             }\n                           }\n                           _ => disr_val += 1\n                         }\n-                        @VariantInfo_{args: arg_tys,\n-                          ctor_ty: ctor_ty,\n-                          name: variant.node.name,\n-                          id: ast_util::local_def(variant.node.id),\n-                          disr_val: disr_val,\n-                          vis: variant.node.vis\n+                        @VariantInfo_{\n+                            args: arg_tys,\n+                            ctor_ty: ctor_ty,\n+                            name: variant.node.name,\n+                            id: ast_util::local_def(variant.node.id),\n+                            disr_val: disr_val,\n+                            vis: variant.node.vis\n                          }\n-                    }\n-                    ast::struct_variant_kind(_) => {\n-                        fail!(\"struct variant kinds unimpl in enum_variants\")\n+                    },\n+                    ast::struct_variant_kind(struct_def) => {\n+                        let arg_tys =\n+                            // Is this check needed for structs too, or are they always guaranteed\n+                            // to have a valid constructor function?\n+                            if struct_def.fields.len() > 0 {\n+                                ty_fn_args(ctor_ty).map(|a| *a)\n+                            } else {\n+                                ~[]\n+                            };\n+\n+                        assert!(variant.node.disr_expr.is_none());\n+                        disr_val += 1;\n+\n+                        @VariantInfo_{\n+                            args: arg_tys,\n+                            ctor_ty: ctor_ty,\n+                            name: variant.node.name,\n+                            id: ast_util::local_def(variant.node.id),\n+                            disr_val: disr_val,\n+                            vis: variant.node.vis\n+                        }\n                     }\n                 }\n             }).collect()\n           }\n-          _ => cx.sess.bug(\"tag_variants: id not bound to an enum\")\n+          _ => cx.sess.bug(\"enum_variants: id not bound to an enum\")\n         }\n     };\n     cx.enum_var_cache.insert(id, result);"}]}