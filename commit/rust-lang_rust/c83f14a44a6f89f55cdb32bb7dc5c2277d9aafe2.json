{"sha": "c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "node_id": "C_kwDOAAsO6NoAKGM4M2YxNGE0NGE2Zjg5ZjU1Y2RiMzJiYjdkYzVjMjI3N2Q5YWFmZTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T00:00:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T00:01:07Z"}, "message": "Remove AstIdMap from Expander as it is seldom needed", "tree": {"sha": "fa0e05f560b532ce7d90e0738437d81b4d16289a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0e05f560b532ce7d90e0738437d81b4d16289a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "html_url": "https://github.com/rust-lang/rust/commit/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5078078375ffeac80770973920446d9cb97302d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5078078375ffeac80770973920446d9cb97302d", "html_url": "https://github.com/rust-lang/rust/commit/e5078078375ffeac80770973920446d9cb97302d"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "080a307b1f8a4540ef1dd3a6a217a0e0f4c3b017", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "patch": "@@ -5,21 +5,18 @@ mod lower;\n mod tests;\n pub mod scope;\n \n-use std::{mem, ops::Index, sync::Arc};\n+use std::{ops::Index, sync::Arc};\n \n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use drop_bomb::DropBomb;\n use either::Either;\n-use hir_expand::{\n-    ast_id_map::AstIdMap, hygiene::Hygiene, AstId, ExpandError, ExpandResult, HirFileId, InFile,\n-    MacroCallId,\n-};\n+use hir_expand::{hygiene::Hygiene, ExpandError, ExpandResult, HirFileId, InFile, MacroCallId};\n use la_arena::{Arena, ArenaMap};\n use limit::Limit;\n use profile::Count;\n use rustc_hash::FxHashMap;\n-use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use crate::{\n     attr::{Attrs, RawAttrs},\n@@ -50,7 +47,6 @@ pub struct Expander {\n     cfg_expander: CfgExpander,\n     def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n-    ast_id_map: Option<Arc<AstIdMap>>,\n     module: LocalModuleId,\n     recursion_limit: usize,\n }\n@@ -84,7 +80,6 @@ impl Expander {\n             cfg_expander,\n             def_map,\n             current_file_id,\n-            ast_id_map: None,\n             module: module.local_id,\n             recursion_limit: 0,\n         }\n@@ -167,22 +162,17 @@ impl Expander {\n         tracing::debug!(\"macro expansion {:#?}\", node.syntax());\n \n         self.recursion_limit += 1;\n-        let mark = Mark {\n-            file_id: self.current_file_id,\n-            ast_id_map: mem::take(&mut self.ast_id_map),\n-            bomb: DropBomb::new(\"expansion mark dropped\"),\n-        };\n+        let mark =\n+            Mark { file_id: self.current_file_id, bomb: DropBomb::new(\"expansion mark dropped\") };\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n         self.current_file_id = file_id;\n-        self.ast_id_map = None;\n \n         ExpandResult { value: Some((mark, node)), err }\n     }\n \n     pub fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n-        self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         self.recursion_limit -= 1;\n         mark.bomb.defuse();\n     }\n@@ -212,12 +202,6 @@ impl Expander {\n         self.def_map.resolve_path(db, self.module, path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n-    fn ast_id<N: AstNode>(&mut self, db: &dyn DefDatabase, item: &N) -> AstId<N> {\n-        let file_local_id =\n-            self.ast_id_map.get_or_insert_with(|| db.ast_id_map(self.current_file_id)).ast_id(item);\n-        AstId::new(self.current_file_id, file_local_id)\n-    }\n-\n     fn recursion_limit(&self, db: &dyn DefDatabase) -> Limit {\n         let limit = db.crate_limits(self.cfg_expander.krate).recursion_limit as _;\n \n@@ -233,7 +217,6 @@ impl Expander {\n #[derive(Debug)]\n pub struct Mark {\n     file_id: HirFileId,\n-    ast_id_map: Option<Arc<AstIdMap>>,\n     bomb: DropBomb,\n }\n "}, {"sha": "8cef31ed151c1107e48e832eefe41f181ce0d513", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{\n     ast_id_map::{AstIdMap, FileAstId},\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    ExpandError, HirFileId, InFile,\n+    AstId, ExpandError, HirFileId, InFile,\n };\n use la_arena::Arena;\n use once_cell::unsync::OnceCell;\n@@ -90,6 +90,7 @@ pub(super) fn lower(\n     ExprCollector {\n         db,\n         source_map: BodySourceMap::default(),\n+        ast_id_map: db.ast_id_map(expander.current_file_id),\n         body: Body {\n             exprs: Arena::default(),\n             pats: Arena::default(),\n@@ -110,6 +111,7 @@ pub(super) fn lower(\n struct ExprCollector<'a> {\n     db: &'a dyn DefDatabase,\n     expander: Expander,\n+    ast_id_map: Arc<AstIdMap>,\n     body: Body,\n     source_map: BodySourceMap,\n     // a poor-mans union-find?\n@@ -591,8 +593,13 @@ impl ExprCollector<'_> {\n         match res.value {\n             Some((mark, expansion)) => {\n                 self.source_map.expansions.insert(macro_call_ptr, self.expander.current_file_id);\n+                let prev_ast_id_map = mem::replace(\n+                    &mut self.ast_id_map,\n+                    self.db.ast_id_map(self.expander.current_file_id),\n+                );\n \n                 let id = collector(self, Some(expansion));\n+                self.ast_id_map = prev_ast_id_map;\n                 self.expander.exit(self.db, mark);\n                 id\n             }\n@@ -680,7 +687,8 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n-        let ast_id = self.expander.ast_id(self.db, &block);\n+        let file_local_id = self.ast_id_map.ast_id(&block);\n+        let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n         let block_loc =\n             BlockLoc { ast_id, module: self.expander.def_map.module_id(self.expander.module) };\n         let block_id = self.db.intern_block(block_loc);"}]}