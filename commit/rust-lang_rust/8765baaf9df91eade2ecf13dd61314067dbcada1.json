{"sha": "8765baaf9df91eade2ecf13dd61314067dbcada1", "node_id": "C_kwDOAAsO6NoAKDg3NjViYWFmOWRmOTFlYWRlMmVjZjEzZGQ2MTMxNDA2N2RiY2FkYTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-07T13:23:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-07T13:23:50Z"}, "message": "Merge #11924\n\n11924: internal: remove `FnFlags::IS_IN_EXTERN_BLOCK` r=jonas-schievink a=jonas-schievink\n\nThis flag was determined purely based on the AST, which cannot work reliably since macros are allowed in `extern` blocks (in which case the function would not have an extern block parent in the AST).\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "a994fb717a0fea04484a6a3dc47f96450f8632f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a994fb717a0fea04484a6a3dc47f96450f8632f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8765baaf9df91eade2ecf13dd61314067dbcada1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTuXmCRBK7hj4Ov3rIwAA238IAHnLudtim69e5wOWR2dWMGUL\n0k0xt8E5h0vaEQrFI0gDVRGxHRExL7xn/Cqfn9MUgTTvsWEcTbI0hVQwMMGLtY4J\nRVgwuoiT6NVAiqaSqTCL15wfDlxwfP9EVyYX6ZV5I3jFGV1q7qycENBYzKKMmYSs\nBsaoJzU3BXp5iUcWoakqQhsEin5rxSzdaOWcxHuuAPdSUIeahBuuUbl39a/LBFgq\n9R99l7OWEcX0tcpMP0WhXVKAnd1UvZppMgecXpXdKviSNTrW30YfVK1bxH3Do8gO\njQ9sTNDCyn6+bABLgxvA0L24O3kz7oImUxW80FDfZyYMhiXVukH+XdjkkLE8fFw=\n=atO4\n-----END PGP SIGNATURE-----\n", "payload": "tree a994fb717a0fea04484a6a3dc47f96450f8632f1\nparent 134dbc6104e906a14c331bda9a388eda1af92f2d\nparent 6501e45131d689053e32e7775a7ed04e488a419e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649337830 +0000\ncommitter GitHub <noreply@github.com> 1649337830 +0000\n\nMerge #11924\n\n11924: internal: remove `FnFlags::IS_IN_EXTERN_BLOCK` r=jonas-schievink a=jonas-schievink\n\nThis flag was determined purely based on the AST, which cannot work reliably since macros are allowed in `extern` blocks (in which case the function would not have an extern block parent in the AST).\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8765baaf9df91eade2ecf13dd61314067dbcada1", "html_url": "https://github.com/rust-lang/rust/commit/8765baaf9df91eade2ecf13dd61314067dbcada1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8765baaf9df91eade2ecf13dd61314067dbcada1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134dbc6104e906a14c331bda9a388eda1af92f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/134dbc6104e906a14c331bda9a388eda1af92f2d", "html_url": "https://github.com/rust-lang/rust/commit/134dbc6104e906a14c331bda9a388eda1af92f2d"}, {"sha": "6501e45131d689053e32e7775a7ed04e488a419e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6501e45131d689053e32e7775a7ed04e488a419e", "html_url": "https://github.com/rust-lang/rust/commit/6501e45131d689053e32e7775a7ed04e488a419e"}], "stats": {"total": 16, "additions": 3, "deletions": 13}, "files": [{"sha": "8e0bb0c34d394229b71b7b3fb3734bc8cd5a7f8d", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=8765baaf9df91eade2ecf13dd61314067dbcada1", "patch": "@@ -57,10 +57,6 @@ impl FunctionData {\n             flags.bits |= FnFlags::IS_VARARGS;\n         }\n \n-        if matches!(loc.container, ItemContainerId::ExternBlockId(_)) {\n-            flags.bits |= FnFlags::IS_IN_EXTERN_BLOCK;\n-        }\n-\n         let legacy_const_generics_indices = item_tree\n             .attrs(db, krate, ModItem::from(loc.id.value).into())\n             .by_key(\"rustc_legacy_const_generics\")\n@@ -114,10 +110,6 @@ impl FunctionData {\n         self.flags.bits & FnFlags::IS_UNSAFE != 0\n     }\n \n-    pub fn is_in_extern_block(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_IN_EXTERN_BLOCK != 0\n-    }\n-\n     pub fn is_varargs(&self) -> bool {\n         self.flags.bits & FnFlags::IS_VARARGS != 0\n     }"}, {"sha": "bf60c6bc6afdf1372b33111443884b902893b0fd", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=8765baaf9df91eade2ecf13dd61314067dbcada1", "patch": "@@ -612,9 +612,6 @@ impl FnFlags {\n     pub(crate) const IS_CONST: u8 = 1 << 3;\n     pub(crate) const IS_ASYNC: u8 = 1 << 4;\n     pub(crate) const IS_UNSAFE: u8 = 1 << 5;\n-    /// Whether the function is located in an `extern` block (*not* whether it is an\n-    /// `extern \"abi\" fn`).\n-    pub(crate) const IS_IN_EXTERN_BLOCK: u8 = 1 << 6;\n     pub(crate) const IS_VARARGS: u8 = 1 << 7;\n }\n "}, {"sha": "f7031a8546a290a3d458c0a31d802bf535be7b53", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8765baaf9df91eade2ecf13dd61314067dbcada1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=8765baaf9df91eade2ecf13dd61314067dbcada1", "patch": "@@ -19,7 +19,8 @@ use hir_def::{\n     adt::VariantData,\n     expr::{Pat, PatId},\n     src::HasSource,\n-    AdtId, AttrDefId, ConstId, EnumId, FunctionId, Lookup, ModuleDefId, StaticId, StructId,\n+    AdtId, AttrDefId, ConstId, EnumId, FunctionId, ItemContainerId, Lookup, ModuleDefId, StaticId,\n+    StructId,\n };\n use hir_expand::{\n     name::{AsName, Name},\n@@ -198,7 +199,7 @@ impl<'a> DeclValidator<'a> {\n \n     fn validate_func(&mut self, func: FunctionId) {\n         let data = self.db.function_data(func);\n-        if data.is_in_extern_block() {\n+        if matches!(func.lookup(self.db.upcast()).container, ItemContainerId::ExternBlockId(_)) {\n             cov_mark::hit!(extern_func_incorrect_case_ignored);\n             return;\n         }"}]}