{"sha": "10706d62da83c4ec215165bc72df46219536648f", "node_id": "C_kwDOAAsO6NoAKDEwNzA2ZDYyZGE4M2M0ZWMyMTUxNjViYzcyZGY0NjIxOTUzNjY0OGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T22:12:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T22:12:32Z"}, "message": "Auto merge of #101295 - matthiaskrgr:rollup-046o38p, r=matthiaskrgr\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #94467 (Add `special_module_name` lint)\n - #100852 (Use `getuid` to check instead of `USER` env var in rustbuild)\n - #101072 (bootstrap: Add llvm-has-rust-patches target option)\n - #101190 (Make docs formulation more consistent for NonZero{int})\n - #101245 (Remove unneeded where whitespace)\n - #101251 (Fix  bad target name in Walkthrough)\n - #101254 (rustdoc: remove unused `.docblock .impl-items` CSS)\n - #101256 (Fixes/adjustments to Fuchsia doc walkthrough)\n - #101270 (Update outdated comment about output capturing in print_to.)\n - #101271 (Fix filename of armv4t-none-eabi.md)\n - #101274 (Fix typo in comment)\n - #101279 (Fix doc_auto_cfg for impl blocks in different modules with different `cfg`)\n - #101285 (Do not suggest adding `move` to closure when `move` is already used)\n - #101292 (rustdoc: remove unneeded CSS `.content table td:first-child > a`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "56447cae81680c661c794e470279f32f9dbf7f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56447cae81680c661c794e470279f32f9dbf7f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10706d62da83c4ec215165bc72df46219536648f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10706d62da83c4ec215165bc72df46219536648f", "html_url": "https://github.com/rust-lang/rust/commit/10706d62da83c4ec215165bc72df46219536648f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10706d62da83c4ec215165bc72df46219536648f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e35f954ada0f0c777844dc4fa66684efe90a035", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e35f954ada0f0c777844dc4fa66684efe90a035", "html_url": "https://github.com/rust-lang/rust/commit/2e35f954ada0f0c777844dc4fa66684efe90a035"}, {"sha": "1c12dedd5382804b6ea289e36969340194f8d44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c12dedd5382804b6ea289e36969340194f8d44c", "html_url": "https://github.com/rust-lang/rust/commit/1c12dedd5382804b6ea289e36969340194f8d44c"}], "stats": {"total": 548, "additions": 412, "deletions": 136}, "files": [{"sha": "37972532b361429f281f8d52f34ea4d1ca621540", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -46,6 +46,7 @@ no_llvm_build\n /dist/\n /unicode-downloads\n /target\n+/src/bootstrap/target\n /src/tools/x/target\n # Created by default with `src/ci/docker/run.sh`\n /obj/"}, {"sha": "082dd86902354843822df54b8cee1b6dd56b63a3", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -902,7 +902,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             hir::ExprKind::MethodCall(.., args, _) => {\n                 // only the first closre parameter of the method. args[0] is MethodCall PathSegment\n                 for i in 1..args.len() {\n-                    if let hir::ExprKind::Closure(..) = args[i].kind {\n+                    if let hir::ExprKind::Closure(hir::Closure {\n+                        capture_clause: hir::CaptureBy::Ref,\n+                        ..\n+                    }) = args[i].kind\n+                    {\n                         closure_span = Some(args[i].span.shrink_to_lo());\n                         break;\n                     }\n@@ -911,7 +915,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             hir::ExprKind::Block(blk, _) => {\n                 if let Some(ref expr) = blk.expr {\n                     // only when the block is a closure\n-                    if let hir::ExprKind::Closure(..) = expr.kind {\n+                    if let hir::ExprKind::Closure(hir::Closure {\n+                        capture_clause: hir::CaptureBy::Ref,\n+                        ..\n+                    }) = expr.kind\n+                    {\n                         closure_span = Some(expr.span.shrink_to_lo());\n                     }\n                 }\n@@ -921,7 +929,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let Some(closure_span) = closure_span {\n             diag.span_suggestion_verbose(\n                 closure_span,\n-                format!(\"consider adding 'move' keyword before the nested closure\"),\n+                \"consider adding 'move' keyword before the nested closure\",\n                 \"move \",\n                 Applicability::MaybeIncorrect,\n             );"}, {"sha": "4e9c209a58400aa176d13cf336cf7c01e1cc4a86", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -3172,3 +3172,81 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `special_module_name` lint detects module\n+    /// declarations for files that have a special meaning.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// mod lib;\n+    ///\n+    /// fn main() {\n+    ///     lib::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Cargo recognizes `lib.rs` and `main.rs` as the root of a\n+    /// library or binary crate, so declaring them as modules\n+    /// will lead to miscompilation of the crate unless configured\n+    /// explicitly.\n+    ///\n+    /// To access a library from a binary target within the same crate,\n+    /// use `your_crate_name::` as the path path instead of `lib::`:\n+    ///\n+    /// ```rust,compile_fail\n+    /// // bar/src/lib.rs\n+    /// fn run() {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// // bar/src/main.rs\n+    /// fn main() {\n+    ///     bar::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// Binary targets cannot be used as libraries and so declaring\n+    /// one as a module is not allowed.\n+    pub SPECIAL_MODULE_NAME,\n+    Warn,\n+    \"module declarations for files with a special meaning\",\n+}\n+\n+declare_lint_pass!(SpecialModuleName => [SPECIAL_MODULE_NAME]);\n+\n+impl EarlyLintPass for SpecialModuleName {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n+        for item in &krate.items {\n+            if let ast::ItemKind::Mod(\n+                _,\n+                ast::ModKind::Unloaded | ast::ModKind::Loaded(_, ast::Inline::No, _),\n+            ) = item.kind\n+            {\n+                if item.attrs.iter().any(|a| a.has_name(sym::path)) {\n+                    continue;\n+                }\n+\n+                match item.ident.name.as_str() {\n+                    \"lib\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for lib.rs\")\n+                            .note(\"lib.rs is the root of this crate's library target\")\n+                            .help(\"to refer to it from other targets, use the library's name as the path\")\n+                            .emit()\n+                    }),\n+                    \"main\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for main.rs\")\n+                            .note(\"a binary crate cannot be used as library\")\n+                            .emit()\n+                    }),\n+                    _ => continue\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "3478be1ed5d92c4c5bc4e1c9830b777e3ae65200", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -133,6 +133,7 @@ macro_rules! early_lint_passes {\n                 UnusedBraces: UnusedBraces,\n                 UnusedImportBraces: UnusedImportBraces,\n                 UnsafeCode: UnsafeCode,\n+                SpecialModuleName: SpecialModuleName,\n                 AnonymousParameters: AnonymousParameters,\n                 EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n                 NonCamelCaseTypes: NonCamelCaseTypes,"}, {"sha": "a967d881b029b7facb6af929d2d18c3fc6bc6d93", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -666,6 +666,10 @@ changelog-seen = 2\n # target.\n #llvm-config = <none> (path)\n \n+# Override detection of whether this is a Rust-patched LLVM. This would be used\n+# in conjunction with either an llvm-config or build.submodules = false.\n+#llvm-has-rust-patches = if llvm-config { false } else { true }\n+\n # Normally the build system can find LLVM's FileCheck utility, but if\n # not, you can specify an explicit file name for it.\n #llvm-filecheck = \"/path/to/llvm-version/bin/FileCheck\""}, {"sha": "1cf306f2103b4ff02ca0dfdeee6918725054fdf1", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -309,8 +309,8 @@ macro_rules! nonzero_unsigned_operations {\n     ( $( $Ty: ident($Int: ident); )+ ) => {\n         $(\n             impl $Ty {\n-                /// Add an unsigned integer to a non-zero value.\n-                /// Check for overflow and return [`None`] on overflow\n+                /// Adds an unsigned integer to a non-zero value.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 ///\n@@ -346,7 +346,7 @@ macro_rules! nonzero_unsigned_operations {\n                     }\n                 }\n \n-                /// Add an unsigned integer to a non-zero value.\n+                /// Adds an unsigned integer to a non-zero value.\n                 #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n@@ -377,7 +377,7 @@ macro_rules! nonzero_unsigned_operations {\n                     unsafe { $Ty::new_unchecked(self.get().saturating_add(other)) }\n                 }\n \n-                /// Add an unsigned integer to a non-zero value,\n+                /// Adds an unsigned integer to a non-zero value,\n                 /// assuming overflow cannot occur.\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n@@ -409,7 +409,7 @@ macro_rules! nonzero_unsigned_operations {\n                 }\n \n                 /// Returns the smallest power of two greater than or equal to n.\n-                /// Check for overflow and return [`None`]\n+                /// Checks for overflow and returns [`None`]\n                 /// if the next power of two is greater than the type\u2019s maximum value.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n@@ -545,7 +545,7 @@ macro_rules! nonzero_signed_operations {\n                 }\n \n                 /// Checked absolute value.\n-                /// Check for overflow and returns [`None`] if\n+                /// Checks for overflow and returns [`None`] if\n                 #[doc = concat!(\"`self == \", stringify!($Int), \"::MIN`.\")]\n                 /// The result cannot be zero.\n                 ///\n@@ -740,8 +740,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n     ( $( $signedness:ident $Ty: ident($Int: ty); )+ ) => {\n         $(\n             impl $Ty {\n-                /// Multiply two non-zero integers together.\n-                /// Check for overflow and return [`None`] on overflow.\n+                /// Multiplies two non-zero integers together.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 /// # Examples\n@@ -777,7 +777,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     }\n                 }\n \n-                /// Multiply two non-zero integers together.\n+                /// Multiplies two non-zero integers together.\n                 #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n@@ -809,7 +809,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     unsafe { $Ty::new_unchecked(self.get().saturating_mul(other.get())) }\n                 }\n \n-                /// Multiply two non-zero integers together,\n+                /// Multiplies two non-zero integers together,\n                 /// assuming overflow cannot occur.\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n@@ -849,8 +849,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     unsafe { $Ty::new_unchecked(self.get().unchecked_mul(other.get())) }\n                 }\n \n-                /// Raise non-zero value to an integer power.\n-                /// Check for overflow and return [`None`] on overflow.\n+                /// Raises non-zero value to an integer power.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 /// # Examples"}, {"sha": "07239746258d109adb6130bd10b95cafe5d3190b", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -986,10 +986,10 @@ pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {\n /// otherwise. `label` identifies the stream in a panic message.\n ///\n /// This function is used to print error messages, so it takes extra\n-/// care to avoid causing a panic when `local_s` is unusable.\n-/// For instance, if the TLS key for the local stream is\n-/// already destroyed, or if the local stream is locked by another\n-/// thread, it will just fall back to the global stream.\n+/// care to avoid causing a panic when `OUTPUT_CAPTURE` is unusable.\n+/// For instance, if the TLS key for output capturing is already destroyed, or\n+/// if the local stream is in use by another thread, it will just fall back to\n+/// the global stream.\n ///\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)"}, {"sha": "cc08ae5f99f0e80d03c36998ad02df043dcf10d0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -793,6 +793,8 @@ def set_dist_environment(self, url):\n \n     def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n+        # keep this consistent with the equivalent check in rustbuild:\n+        # https://github.com/rust-lang/rust/blob/a8a33cf27166d3eabaffc58ed3799e054af3b0c6/src/bootstrap/lib.rs#L399-L405\n         if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n             if os.getuid() == 0:\n                 self.use_vendored_sources = True"}, {"sha": "7c062460c4f16e8eb21475c0e5da443bbc015f64", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -388,6 +388,7 @@ impl PartialEq<&str> for TargetSelection {\n pub struct Target {\n     /// Some(path to llvm-config) if using an external LLVM.\n     pub llvm_config: Option<PathBuf>,\n+    pub llvm_has_rust_patches: Option<bool>,\n     /// Some(path to FileCheck) if one was specified.\n     pub llvm_filecheck: Option<PathBuf>,\n     pub llvm_libunwind: Option<LlvmLibunwind>,\n@@ -733,6 +734,7 @@ define_config! {\n         default_linker: Option<PathBuf> = \"default-linker\",\n         linker: Option<String> = \"linker\",\n         llvm_config: Option<String> = \"llvm-config\",\n+        llvm_has_rust_patches: Option<bool> = \"llvm-has-rust-patches\",\n         llvm_filecheck: Option<String> = \"llvm-filecheck\",\n         llvm_libunwind: Option<String> = \"llvm-libunwind\",\n         android_ndk: Option<String> = \"android-ndk\",\n@@ -1109,6 +1111,7 @@ impl Config {\n                 if let Some(ref s) = cfg.llvm_config {\n                     target.llvm_config = Some(config.src.join(s));\n                 }\n+                target.llvm_has_rust_patches = cfg.llvm_has_rust_patches;\n                 if let Some(ref s) = cfg.llvm_filecheck {\n                     target.llvm_filecheck = Some(config.src.join(s));\n                 }"}, {"sha": "9336f958cf28ae2c74d2d6de244108422b62dc80", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -112,6 +112,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n+use config::Target;\n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n \n@@ -395,13 +396,18 @@ impl Build {\n         let src = config.src.clone();\n         let out = config.out.clone();\n \n+        #[cfg(unix)]\n+        // keep this consistent with the equivalent check in x.py:\n+        // https://github.com/rust-lang/rust/blob/a8a33cf27166d3eabaffc58ed3799e054af3b0c6/src/bootstrap/bootstrap.py#L796-L797\n         let is_sudo = match env::var_os(\"SUDO_USER\") {\n-            Some(sudo_user) => match env::var_os(\"USER\") {\n-                Some(user) => user != sudo_user,\n-                None => false,\n-            },\n+            Some(_sudo_user) => {\n+                let uid = unsafe { libc::getuid() };\n+                uid == 0\n+            }\n             None => false,\n         };\n+        #[cfg(not(unix))]\n+        let is_sudo = false;\n \n         let ignore_git = config.ignore_git;\n         let rust_info = channel::GitInfo::new(ignore_git, &src);\n@@ -834,12 +840,13 @@ impl Build {\n     ///\n     /// If no custom `llvm-config` was specified then Rust's llvm will be used.\n     fn is_rust_llvm(&self, target: TargetSelection) -> bool {\n-        if self.config.llvm_from_ci && target == self.config.build {\n-            return true;\n-        }\n-\n         match self.config.target_config.get(&target) {\n-            Some(ref c) => c.llvm_config.is_none(),\n+            Some(Target { llvm_has_rust_patches: Some(patched), .. }) => *patched,\n+            Some(Target { llvm_config, .. }) => {\n+                // If the user set llvm-config we assume Rust is not patched,\n+                // but first check to see if it was configured by llvm-from-ci.\n+                (self.config.llvm_from_ci && target == self.config.build) || llvm_config.is_none()\n+            }\n             None => true,\n         }\n     }"}, {"sha": "cf831e1595e40eae131d6cfa640009c2cec7d104", "filename": "src/doc/rustc/src/platform-support/armv4t-none-eabi.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md?ref=10706d62da83c4ec215165bc72df46219536648f", "previous_filename": "src/doc/rustc/src/platform-support/armv4t_none_eabi.md"}, {"sha": "53a510f080ece9cd899052107f28de1fad2a15ba", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -79,7 +79,7 @@ the following commands:\n \n ```sh\n rustup target add x86_64-fuchsia\n-rustup target add aarch_64-fuchsia\n+rustup target add aarch64-fuchsia\n ```\n \n After installing our Fuchsia targets, we can now compile a Rust binary that targets\n@@ -125,13 +125,20 @@ during compilation:\n [target.x86_64-fuchsia]\n \n rustflags = [\n-    \"-Lnative\", \"<SDK_PATH>/arch/x64/sysroot/lib\",\n-    \"-Lnative\", \"<SDK_PATH>/arch/x64/lib\"\n+    \"-Lnative=<SDK_PATH>/arch/x64/lib\",\n+    \"-Lnative=<SDK_PATH>/arch/x64/sysroot/lib\"\n ]\n ```\n \n *Note: Make sure to fill out `<SDK_PATH>` with the path to the downloaded [Fuchsia SDK].*\n \n+These options configure the following:\n+\n+* `-Lnative=${SDK_PATH}/arch/${ARCH}/lib`: Link against Fuchsia libraries from\n+  the SDK\n+* `-Lnative=${SDK_PATH}/arch/${ARCH}/sysroot/lib`: Link against Fuchsia kernel\n+  libraries from the SDK\n+\n In total, our new project will look like:\n \n **Current directory structure**\n@@ -368,6 +375,7 @@ language called CML. The Fuchsia devsite contains an [overview of CML] and a\n }\n ```\n \n+**Current directory structure**\n ```txt\n hello_fuchsia/\n \u2517\u2501 pkg/\n@@ -386,6 +394,9 @@ ${SDK_PATH}/tools/${ARCH}/cmc compile \\\n     -o pkg/meta/hello_fuchsia.cm\n ```\n \n+*Note: `--includepath` tells the compiler where to look for `include`s from our CML.\n+In our case, we're only using `syslog/client.shard.cml`.*\n+\n **Current directory structure**\n ```txt\n hello_fuchsia/\n@@ -397,19 +408,16 @@ hello_fuchsia/\n    \u2517\u2501 hello_fuchsia.cml\n ```\n \n-*Note: `--includepath` tells the compiler where to look for `include`s from our CML.\n-In our case, we're only using `syslog/client.shard.cml`.*\n-\n ### Building a Fuchsia package\n \n Next, we'll build a package manifest as defined by our manifest:\n \n ```sh\n ${SDK_PATH}/tools/${ARCH}/pm \\\n-    -o hello_fuchsia_manifest \\\n+    -o pkg/hello_fuchsia_manifest \\\n     -m pkg/hello_fuchsia.manifest \\\n     build \\\n-    -output-package-manifest hello_fuchsia_package_manifest\n+    -output-package-manifest pkg/hello_fuchsia_package_manifest\n ```\n \n This will produce `pkg/hello_fuchsia_manifest/` which is a package manifest we can\n@@ -469,15 +477,15 @@ We can publish our new package to that repository with:\n \n ```sh\n ${SDK_PATH}/tools/${ARCH}/pm publish \\\n-    -repo repo \\\n-    -lp -f <(echo \"hello_fuchsia_package_manifest\")\n+    -repo pkg/repo \\\n+    -lp -f <(echo \"pkg/hello_fuchsia_package_manifest\")\n ```\n \n Then we can add the repository to `ffx`'s package server as `hello-fuchsia` using:\n \n ```sh\n ${SDK_PATH}/tools/${ARCH}/ffx repository add-from-pm \\\n-    repo \\\n+    pkg/repo \\\n     -r hello-fuchsia\n ```\n "}, {"sha": "be10a5c101f7ffa3e5ad5c9aa028f40201a07d45", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -349,8 +349,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n         let where_preds = comma_sep(where_predicates, false);\n         let clause = if f.alternate() {\n             if ending == Ending::Newline {\n-                // add a space so stripping <br> tags and breaking spaces still renders properly\n-                format!(\" where{where_preds}, \")\n+                format!(\" where{where_preds},\")\n             } else {\n                 format!(\" where{where_preds}\")\n             }\n@@ -364,20 +363,16 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n \n             if ending == Ending::Newline {\n                 let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n-                // add a space so stripping <br> tags and breaking spaces still renders properly\n-                write!(\n-                    clause,\n-                    \" <span class=\\\"where fmt-newline\\\">where{where_preds},&nbsp;</span>\"\n-                )?;\n+                write!(clause, \"<span class=\\\"where fmt-newline\\\">where{where_preds},</span>\")?;\n                 clause\n             } else {\n                 // insert a <br> tag after a single space but before multiple spaces at the start\n                 if indent == 0 {\n-                    format!(\" <br><span class=\\\"where\\\">where{where_preds}</span>\")\n+                    format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     let mut clause = br_with_padding;\n                     clause.truncate(clause.len() - 5 * \"&nbsp;\".len());\n-                    write!(clause, \" <span class=\\\"where\\\">where{where_preds}</span>\")?;\n+                    write!(clause, \"<span class=\\\"where\\\">where{where_preds}</span>\")?;\n                     clause\n                 }\n             }"}, {"sha": "7577c71962388ebc2617ebebd3b722d0ff55af10", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -1737,8 +1737,8 @@ pub(crate) fn render_impl_summary(\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let id =\n-        cx.derive_id(get_id_for_impl(&i.inner_impl().for_, i.inner_impl().trait_.as_ref(), cx));\n+    let inner_impl = i.inner_impl();\n+    let id = cx.derive_id(get_id_for_impl(&inner_impl.for_, inner_impl.trait_.as_ref(), cx));\n     let aliases = if aliases.is_empty() {\n         String::new()\n     } else {\n@@ -1750,9 +1750,9 @@ pub(crate) fn render_impl_summary(\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n \n     if let Some(use_absolute) = use_absolute {\n-        write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+        write!(w, \"{}\", inner_impl.print(use_absolute, cx));\n         if show_def_docs {\n-            for it in &i.inner_impl().items {\n+            for it in &inner_impl.items {\n                 if let clean::AssocTypeItem(ref tydef, ref _bounds) = *it.kind {\n                     w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n                     assoc_type(\n@@ -1770,11 +1770,11 @@ pub(crate) fn render_impl_summary(\n             }\n         }\n     } else {\n-        write!(w, \"{}\", i.inner_impl().print(false, cx));\n+        write!(w, \"{}\", inner_impl.print(false, cx));\n     }\n     write!(w, \"</h3>\");\n \n-    let is_trait = i.inner_impl().trait_.is_some();\n+    let is_trait = inner_impl.trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n             write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);"}, {"sha": "abbfecd849781f7fd85006fbe2b182b6e06b47cc", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -207,7 +207,6 @@ h1, h2, h3, h4, h5, h6,\n a.source,\n .search-input,\n .search-results .result-name,\n-.content table td:first-child > a,\n .item-left > a,\n .out-of-band,\n span.since,\n@@ -759,14 +758,6 @@ pre, .rustdoc.source .example-wrap {\n \tmargin-bottom: 15px;\n }\n \n-.content .docblock > .impl-items {\n-\tmargin-left: 20px;\n-\tmargin-top: -34px;\n-}\n-.content .docblock >.impl-items table td {\n-\tpadding: 0;\n-}\n-\n .item-info {\n \tdisplay: block;\n }"}, {"sha": "765f7c61bd392dc433d5e2e5aa2c55ea95828992", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use crate::clean::cfg::Cfg;\n use crate::clean::inline::{load_attrs, merge_attrs};\n-use crate::clean::{Crate, Item};\n+use crate::clean::{Crate, Item, ItemKind};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n@@ -26,30 +26,50 @@ struct CfgPropagator<'a, 'tcx> {\n     cx: &'a mut DocContext<'tcx>,\n }\n \n-impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n-    fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n-        let old_parent_cfg = self.parent_cfg.clone();\n+impl<'a, 'tcx> CfgPropagator<'a, 'tcx> {\n+    // Some items need to merge their attributes with their parents' otherwise a few of them\n+    // (mostly `cfg` ones) will be missing.\n+    fn merge_with_parent_attributes(&mut self, item: &mut Item) {\n+        let check_parent = match &*item.kind {\n+            // impl blocks can be in different modules with different cfg and we need to get them\n+            // as well.\n+            ItemKind::ImplItem(_) => false,\n+            kind if kind.is_non_assoc() => true,\n+            _ => return,\n+        };\n \n-        if item.kind.is_non_assoc() &&\n-            let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n-            let hir = self.cx.tcx.hir();\n-            let hir_id = hir.local_def_id_to_hir_id(def_id);\n+        let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local())\n+            else { return };\n+\n+        let hir = self.cx.tcx.hir();\n+        let hir_id = hir.local_def_id_to_hir_id(def_id);\n+\n+        if check_parent {\n             let expected_parent = hir.get_parent_item(hir_id);\n+            // If parents are different, it means that `item` is a reexport and we need\n+            // to compute the actual `cfg` by iterating through its \"real\" parents.\n+            if self.parent == Some(expected_parent) {\n+                return;\n+            }\n+        }\n \n-            // If parents are different, it means that `item` is a reexport and we need to compute\n-            // the actual `cfg` by iterating through its \"real\" parents.\n-            if self.parent != Some(expected_parent) {\n-                let mut attrs = Vec::new();\n-                for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n-                    if let Some(def_id) = hir.opt_local_def_id(parent_hir_id) {\n-                        attrs.extend_from_slice(load_attrs(self.cx, def_id.to_def_id()));\n-                    }\n-                }\n-                let (_, cfg) =\n-                    merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n-                item.cfg = cfg;\n+        let mut attrs = Vec::new();\n+        for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n+            if let Some(def_id) = hir.opt_local_def_id(parent_hir_id) {\n+                attrs.extend_from_slice(load_attrs(self.cx, def_id.to_def_id()));\n             }\n         }\n+        let (_, cfg) = merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n+        item.cfg = cfg;\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n+    fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n+        let old_parent_cfg = self.parent_cfg.clone();\n+\n+        self.merge_with_parent_attributes(&mut item);\n+\n         let new_cfg = match (self.parent_cfg.take(), item.cfg.take()) {\n             (None, None) => None,\n             (Some(rc), None) | (None, Some(rc)) => Some(rc),"}, {"sha": "a9d768f0149d6280d561806d47bb3d038f50e414", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -91,7 +91,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             clean::ExternCrateItem { .. } => {}\n             clean::ImportItem(ref imp) => {\n                 // Because json doesn't inline imports from private modules, we need to mark\n-                // the imported item as retained so it's impls won't be stripped.i\n+                // the imported item as retained so it's impls won't be stripped.\n                 //\n                 // FIXME: Is it necessary to check for json output here: See\n                 // https://github.com/rust-lang/rust/pull/100325#discussion_r941495215"}, {"sha": "7f3172878bfb5f74325ee5b1a0f75db7143c30d1", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -143,3 +143,30 @@ pub struct LongItemInfo2;\n /// Some docs.\n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"emscripten\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\")))]\n impl SimpleTrait for LongItemInfo2 {}\n+\n+pub struct WhereWhitespace<T>;\n+\n+impl<T> WhereWhitespace<T> {\n+    pub fn new<F>(f: F) -> Self\n+    where\n+        F: FnMut() -> i32,\n+    {}\n+}\n+\n+impl<K, T> Whitespace<&K> for WhereWhitespace<T>\n+where\n+    K: std::fmt::Debug,\n+{\n+    type Output = WhereWhitespace<T>;\n+    fn index(&self, _key: &K) -> &Self::Output {\n+        self\n+    }\n+}\n+\n+pub trait Whitespace<Idx>\n+where\n+    Idx: ?Sized,\n+{\n+    type Output;\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}"}, {"sha": "1a3ff1f491cbbff8fe55c6f3dff28da522b4c90a", "filename": "src/test/rustdoc-gui/where-whitespace.goml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,27 @@\n+// This test ensures that the where conditions are correctly displayed.\n+goto: file://|DOC_PATH|/lib2/trait.Whitespace.html\n+show-text: true\n+// First, we check in the trait definition if the where clause is \"on its own\" (not on the same\n+// line than \"pub trait Whitespace<Idx>\").\n+compare-elements-position-false: (\".item-decl code\", \".where.fmt-newline\", (\"y\"))\n+// And that the code following it isn't on the same line either.\n+compare-elements-position-false: (\".item-decl .fnname\", \".where.fmt-newline\", (\"y\"))\n+\n+goto: file://|DOC_PATH|/lib2/struct.WhereWhitespace.html\n+// We make the screen a bit wider to ensure that the trait impl is on one line.\n+size: (915, 915)\n+\n+compare-elements-position-false: (\"#method\\.new .fnname\", \"#method\\.new .where.fmt-newline\", (\"y\"))\n+// We ensure that both the trait name and the struct name are on the same line in\n+// \"impl<K, T> Whitespace<&K> for WhereWhitespace<T>\".\n+compare-elements-position: (\n+    \"#trait-implementations-list .impl h3 .trait\",\n+    \"#trait-implementations-list .impl h3 .struct\",\n+    (\"y\"),\n+)\n+// And we now check that the where condition isn't on the same line.\n+compare-elements-position-false: (\n+    \"#trait-implementations-list .impl h3 .trait\",\n+    \"#trait-implementations-list .impl h3 .where.fmt-newline\",\n+    (\"y\"),\n+)"}, {"sha": "87d2f29e26055461a284f5b581469cc2e421e399", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -31,12 +31,12 @@ impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n-//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n+//      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -50,14 +50,14 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n // @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8%2C%20M%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n-    //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'\n+    //      'pub fn hey<const N: usize>(&self) -> Foo<N>where u8: Trait<N>'\n     pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N> {\n         Foo\n     }\n }\n \n // @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n-//      'pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N>'\n+//      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }"}, {"sha": "4d73e0d829ad53bd1e14e124efa13a8c9bc11e76", "filename": "src/test/rustdoc/doc_auto_cfg_nested_impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc_auto_cfg_nested_impl.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/101129>.\n+\n+#![feature(doc_auto_cfg)]\n+#![crate_type = \"lib\"]\n+#![crate_name = \"foo\"]\n+\n+pub struct S;\n+pub trait MyTrait1 {}\n+pub trait MyTrait2 {}\n+\n+// @has foo/struct.S.html\n+// @has - '//*[@id=\"impl-MyTrait1-for-S\"]//*[@class=\"stab portability\"]' \\\n+//        'Available on non-crate feature coolstuff only.'\n+#[cfg(not(feature = \"coolstuff\"))]\n+impl MyTrait1 for S {}\n+\n+#[cfg(not(feature = \"coolstuff\"))]\n+mod submod {\n+    use crate::{S, MyTrait2};\n+    // This impl should also have the `not(feature = \"coolstuff\")`.\n+    // @has - '//*[@id=\"impl-MyTrait2-for-S\"]//*[@class=\"stab portability\"]' \\\n+    //        'Available on non-crate feature coolstuff only.'\n+    impl MyTrait2 for S {}\n+}"}, {"sha": "2b9d4952d04eecd6c670d920b4f530b62dfc009d", "filename": "src/test/rustdoc/generic-associated-types/gats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -3,7 +3,7 @@\n \n // @has foo/trait.LendingIterator.html\n pub trait LendingIterator {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a\"\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a\"\n     type Item<'a> where Self: 'a;\n \n     // @has - '//*[@id=\"tymethod.next\"]//h4[@class=\"code-header\"]' \\\n@@ -24,7 +24,7 @@ impl LendingIterator for () {\n pub struct Infinite<T>(T);\n \n // @has foo/trait.LendingIterator.html\n-// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a = &'a T\"\n+// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a = &'a T\"\n impl<T> LendingIterator for Infinite<T> {\n     type Item<'a> where Self: 'a = &'a T;\n "}, {"sha": "59b5b6e5797cc47e3037fdd914df2f6476a24187", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -4,23 +4,23 @@\n pub trait Trait<'x> {}\n \n // @has foo/fn.test1.html\n-// @has - '//pre' \"pub fn test1<T>() where for<'a> &'a T: Iterator,\"\n+// @has - '//pre' \"pub fn test1<T>()where for<'a> &'a T: Iterator,\"\n pub fn test1<T>()\n where\n     for<'a> &'a T: Iterator,\n {\n }\n \n // @has foo/fn.test2.html\n-// @has - '//pre' \"pub fn test2<T>() where for<'a, 'b> &'a T: Trait<'b>,\"\n+// @has - '//pre' \"pub fn test2<T>()where for<'a, 'b> &'a T: Trait<'b>,\"\n pub fn test2<T>()\n where\n     for<'a, 'b> &'a T: Trait<'b>,\n {\n }\n \n // @has foo/fn.test3.html\n-// @has - '//pre' \"pub fn test3<F>() where F: for<'a, 'b> Fn(&'a u8, &'b u8),\"\n+// @has - '//pre' \"pub fn test3<F>()where F: for<'a, 'b> Fn(&'a u8, &'b u8),\"\n pub fn test3<F>()\n where\n     F: for<'a, 'b> Fn(&'a u8, &'b u8),\n@@ -38,7 +38,7 @@ pub struct Foo<'a> {\n // @has - '//span[@id=\"structfield.some_trait\"]' \"some_trait: &'a dyn for<'b> Trait<'b>\"\n \n impl<'a> Foo<'a> {\n-    // @has - '//h4[@class=\"code-header\"]' \"pub fn bar<T>() where T: Trait<'a>,\"\n+    // @has - '//h4[@class=\"code-header\"]' \"pub fn bar<T>()where T: Trait<'a>,\"\n     pub fn bar<T>()\n     where\n         T: Trait<'a>,"}, {"sha": "b1481e1f27978045e6864c92d42841fdf5d0755a", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -6,7 +6,7 @@ pub auto trait AnAutoTrait {}\n pub struct Foo<T> { field: T }\n \n // @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n // @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "643f93875909390b0b8bf410c325ecfd9393a309", "filename": "src/test/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -25,15 +25,15 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx> where Idx: ?Sized, {'\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n     // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n     // @has - '//*[@class=\"rust trait\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n     // @has - '//*[@class=\"rust trait\"]' \\\n-    //        'trait IndexMut<Idx>: Index<Idx> where Idx: ?Sized, {'\n+    //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n     // @has - '//*[@class=\"rust trait\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;"}, {"sha": "29d2ec64c206d007d1d1a395fc0c38a3feb10615", "filename": "src/test/rustdoc/issue-21801.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21801.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -5,5 +5,5 @@ extern crate issue_21801;\n \n // @has issue_21801/struct.Foo.html\n // @has - '//*[@id=\"method.new\"]' \\\n-//        'fn new<F>(f: F) -> Foo where F: FnMut() -> i32'\n+//        'fn new<F>(f: F) -> Foowhere F: FnMut() -> i32'\n pub use issue_21801::Foo;"}, {"sha": "134821e1ef3ea9bc724bb81e119a664724597461", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for Twhere T: Debug\"\n impl<T> MyTrait for T\n where\n     T: fmt::Debug,"}, {"sha": "91b67757453d2e788343eb82a15fa1d26313d309", "filename": "src/test/rustdoc/issue-34928.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-34928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-34928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34928.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -2,5 +2,5 @@\n \n pub trait Bar {}\n \n-// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T) where T: Bar;'\n+// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T)where T: Bar;'\n pub struct Foo<T>(pub T) where T: Bar;"}, {"sha": "43fb705f58994717d9868b4942bdf5801c7fb847", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -11,8 +11,8 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n }\n \n // @has issue_50159/struct.Switch.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B>where <B as Signal>::Item: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B>where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Switch<B: Signal> {"}, {"sha": "aa5890a84514fc56364e8724fbcaf5891fdbf6d0", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -8,7 +8,7 @@ pub mod traits {\n \n // @has issue_51236/struct.Owned.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Owned<T> where <T as Owned<'static>>::Reader: Send\"\n+// \"impl<T> Send for Owned<T>where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,\n }"}, {"sha": "ce0f85d25da56d70009b7fee9911db47c06bd05e", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -1,13 +1,11 @@\n pub trait ScopeHandle<'scope> {}\n \n-\n-\n // @has issue_54705/struct.ScopeFutureContents.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'scope, S> Send for ScopeFutureContents<'scope, S> where S: Sync\"\n+// \"impl<'scope, S> Send for ScopeFutureContents<'scope, S>where S: Sync\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n+// \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S>where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,\n {"}, {"sha": "a8841f137fecff11bb32a8a7fa028e850e30d40d", "filename": "src/test/rustdoc/issue-98697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-98697.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -8,7 +8,7 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>() where F: Fn(&str)'\n+// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>()where F: Fn(&str)'\n // @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n "}, {"sha": "7f8f74ff457a5ab906ec670ea3d930d4e049adaa", "filename": "src/test/rustdoc/primitive-slice-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -7,8 +7,8 @@\n // @has - '//span[@class=\"in-band\"]' 'Primitive Type slice'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n-// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T] where T: Send'\n-// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T] where T: Sync'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T]where T: Send'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T]where T: Sync'\n #[doc(primitive = \"slice\")]\n /// this is a test!\n mod slice_prim {}"}, {"sha": "19138fd1aceb20d1c1c8edb5699b83befb86cac9", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -1,6 +1,6 @@\n // @has basic/struct.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T> where T: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T> where T: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T>where T: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T>where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Foo<T> {"}, {"sha": "39f78983da2b031766ab2c8968a2d26d73e4f320", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -21,7 +21,7 @@ mod foo {\n \n // @has complex/struct.NotOuter.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n+// \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K>where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n \n pub use foo::{Foo, Inner as NotInner, MyTrait as NotMyTrait, Outer as NotOuter};"}, {"sha": "0c94850e78608c2cb12b5f90bf4cf80d6fd18e77", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -10,10 +10,10 @@ where\n \n // @has lifetimes/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Send for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n+// \"impl<'c, K> Send for Foo<'c, K>where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Sync for Foo<'c, K> where K: Sync\"\n+// \"impl<'c, K> Sync for Foo<'c, K>where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,\n }"}, {"sha": "35047e3e8c0717349eca64a02043ac1b06c4bc97", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -1,6 +1,6 @@\n // @has manual/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Sync for Foo<T> where T: Sync'\n+// 'impl<T> Sync for Foo<T>where T: Sync'\n //\n // @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Send for Foo<T>'"}, {"sha": "09587bcc30f13954f3c742080c7ec24be6453d9e", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -10,10 +10,10 @@ where\n \n // @has nested/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Send for Foo<T> where T: Copy'\n+// 'impl<T> Send for Foo<T>where T: Copy'\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Sync for Foo<T> where T: Sync'\n+// 'impl<T> Sync for Foo<T>where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,\n }"}, {"sha": "41375decc8a4aa6c9971764ab82fab822973f17c", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -10,7 +10,7 @@ where\n \n // @has no_redundancy/struct.Outer.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Outer<T> where T: Send + Copy\"\n+// \"impl<T> Send for Outer<T>where T: Send + Copy\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,\n }"}, {"sha": "e80b1b1dc9bcf99c96fc535bcc8d9ca7f9ed470a", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -24,10 +24,10 @@ where\n \n // @has project/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Send for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n+// \"impl<'c, K> Send for Foo<'c, K>where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Sync for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n+// \"impl<'c, K> Sync for Foo<'c, K>where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n // 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "d15a8de7d2fe14fdb20381086bc6dc7a6762e58c", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -24,6 +24,6 @@ impl<T> Pattern for Wrapper<T> {\n \n // @has self_referential/struct.WriteAndThen.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<P1> Send for WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n+// \"impl<P1> Send for WriteAndThen<P1>where    <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "08e9567313e22bb78f0faf6f5701537b6c9e3ecf", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -4,7 +4,7 @@ pub trait OwnedTrait<'a> {\n \n // @has static_region/struct.Owned.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n+// \"impl<T> Send for Owned<T>where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,\n }"}, {"sha": "b8502e10a48c4dcb5ad05e763930a673bae55046", "filename": "src/test/rustdoc/where-clause-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -7,7 +7,7 @@ where\n }\n \n // @has 'foo/trait.SomeTrait.html'\n-// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)\n where\n     A: PartialOrd<A> + PartialEq<A>,"}, {"sha": "c1a630e25ba0ef00881c4682afd10ed922f97351", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -3,17 +3,17 @@\n \n pub trait MyTrait { fn dummy(&self) { } }\n \n-// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_) where A: MyTrait\"\n+// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_)where A: MyTrait\"\n pub struct Alpha<A>(A) where A: MyTrait;\n-// @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B> where B: MyTrait\"\n+// @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B>where B: MyTrait\"\n pub trait Bravo<B> where B: MyTrait { fn get(&self, B: B); }\n-// @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>() where C: MyTrait\"\n+// @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>()where C: MyTrait\"\n pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n // @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<D> Delta<D> where D: MyTrait\"\n+//          \"impl<D> Delta<D>where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n@@ -33,19 +33,19 @@ pub trait TraitWhere {\n }\n \n // @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n+//          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n-impl<E> MyTrait for Echo<E> where E: MyTrait {}\n+//          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n+impl<E> MyTrait for Echo<E>where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n // @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n+//          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n-impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}\n+//          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n+impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n // @has foo/type.Golf.html '//pre[@class=\"rust typedef\"]' \\\n-//          \"type Golf<T> where T: Clone, = (T, T)\"\n+//          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}, {"sha": "524459291f85353470b45ab532544dd54f44f953", "filename": "src/test/ui/borrowck/do-not-suggest-adding-move-when-closure-is-already-marked-as-move.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut vec: Vec<i32> = Vec::new();\n+    let closure = move || {\n+        vec.clear();\n+        let mut iter = vec.iter();\n+        move || { iter.next() } //~ ERROR captured variable cannot escape `FnMut` closure bod\n+    };\n+}"}, {"sha": "78ca090feb72245bcef8d36e5e95b9de9b639eaf", "filename": "src/test/ui/borrowck/do-not-suggest-adding-move-when-closure-is-already-marked-as-move.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdo-not-suggest-adding-move-when-closure-is-already-marked-as-move.stderr?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,18 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/do-not-suggest-adding-move-when-closure-is-already-marked-as-move.rs:6:9\n+   |\n+LL |     let mut vec: Vec<i32> = Vec::new();\n+   |         ------- variable defined here\n+LL |     let closure = move || {\n+   |                         - inferred to be a `FnMut` closure\n+LL |         vec.clear();\n+   |         --- variable captured here\n+LL |         let mut iter = vec.iter();\n+LL |         move || { iter.next() }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "ef805c1f0203149dd8b7239d099991986638ca75", "filename": "src/test/ui/modules/auxiliary/dummy_lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,2 @@\n+#[allow(dead_code)]\n+pub struct Dummy;"}, {"sha": "15c59b2da828ca33dd668274da54d1b1fd04ad07", "filename": "src/test/ui/modules/special_module_name.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,8 @@\n+mod lib;\n+//~^ WARN found module declaration for lib.rs\n+//~| ERROR file not found for module `lib`\n+mod main;\n+//~^ WARN found module declaration for main.rs\n+//~| ERROR file not found for module `main`\n+\n+fn main() {}"}, {"sha": "8b3da29386df2b7b0aba84e98dfcb2d809581773", "filename": "src/test/ui/modules/special_module_name.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,37 @@\n+error[E0583]: file not found for module `lib`\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = help: to create the module `lib`, create file \"$DIR/lib.rs\" or \"$DIR/lib/mod.rs\"\n+\n+error[E0583]: file not found for module `main`\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = help: to create the module `main`, create file \"$DIR/main.rs\" or \"$DIR/main/mod.rs\"\n+\n+warning: found module declaration for lib.rs\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = note: `#[warn(special_module_name)]` on by default\n+   = note: lib.rs is the root of this crate's library target\n+   = help: to refer to it from other targets, use the library's name as the path\n+\n+warning: found module declaration for main.rs\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = note: a binary crate cannot be used as library\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0583`."}, {"sha": "07cea9b2b05a18db30ee926f7bfa5349b1fb0c86", "filename": "src/test/ui/modules/special_module_name_ignore.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10706d62da83c4ec215165bc72df46219536648f/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs?ref=10706d62da83c4ec215165bc72df46219536648f", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+#[path = \"auxiliary/dummy_lib.rs\"]\n+mod lib;\n+\n+#[path = \"auxiliary/dummy_lib.rs\"]\n+mod main;\n+\n+fn main() {}"}]}