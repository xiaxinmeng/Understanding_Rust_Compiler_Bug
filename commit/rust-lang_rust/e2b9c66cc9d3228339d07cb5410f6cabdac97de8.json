{"sha": "e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjljNjZjYzlkMzIyODMzOWQwN2NiNTQxMGY2Y2FiZGFjOTdkZTg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-19T14:22:26Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-19T14:22:26Z"}, "message": "Cargo fmt", "tree": {"sha": "5b796cfcd88ff2c317b5e1be540f6a58d01851a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b796cfcd88ff2c317b5e1be540f6a58d01851a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "html_url": "https://github.com/rust-lang/rust/commit/e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4f7e219dcd74989f695fe261534cc8fef5b1477", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f7e219dcd74989f695fe261534cc8fef5b1477", "html_url": "https://github.com/rust-lang/rust/commit/d4f7e219dcd74989f695fe261534cc8fef5b1477"}], "stats": {"total": 153, "additions": 102, "deletions": 51}, "files": [{"sha": "aa1517167d82e5c6159b6dd433412b6c794a6750", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -229,7 +229,8 @@ impl Rewrite for ast::MetaItem {\n                                 None,\n                                 &inner_meta_item.ident,\n                                 shape,\n-                            ).map_or(false, |s| s.len() + path.len() + 2 <= shape.width),\n+                            )\n+                            .map_or(false, |s| s.len() + path.len() + 2 <= shape.width),\n                             _ => false,\n                         }\n                     }"}, {"sha": "8676e6290e0a621a384acd850f5cfff781804abb", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -421,7 +421,8 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n             // we will do comparison later, so here tries to canonicalize first\n             // to get the expected behavior.\n             p.canonicalize().unwrap_or(p)\n-        }).collect();\n+        })\n+        .collect();\n \n     Ok(Operation::Format {\n         files,"}, {"sha": "eee102b6bf8b8ab03e0df774000cfd24b2798065", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -163,7 +163,8 @@ fn format_crate(\n             if verbosity == Verbosity::Verbose {\n                 println!(\"[{}] {:?}\", t.kind, t.path)\n             }\n-        }).map(|t| t.path)\n+        })\n+        .map(|t| t.path)\n         .collect();\n \n     run_rustfmt(&files, &rustfmt_args, verbosity)"}, {"sha": "36c89eef20dbd9d2f2e64e4a43105b0ddb71643a", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -558,7 +558,8 @@ impl<'a> ChainFormatterShared<'a> {\n             shape.width\n         } else {\n             min(shape.width, context.config.width_heuristics().chain_width)\n-        }.saturating_sub(almost_total);\n+        }\n+        .saturating_sub(almost_total);\n \n         let all_in_one_line = !self.children.iter().any(ChainItem::is_comment)\n             && self.rewrites.iter().all(|s| !s.contains('\\n'))\n@@ -710,7 +711,8 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n                 shape.block_indent(0)\n             } else {\n                 shape.block_indent(context.config.tab_spaces())\n-            }.with_max_width(context.config),\n+            }\n+            .with_max_width(context.config),\n         )\n     }\n "}, {"sha": "9546451d7ca9961be3801ee860cf06fae5b41536", "filename": "src/closures.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -198,7 +198,8 @@ fn rewrite_closure_expr(\n             } else {\n                 Some(rw)\n             }\n-        }).map(|rw| format!(\"{} {}\", prefix, rw))\n+        })\n+        .map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n // Rewrite closure whose body is block.\n@@ -367,8 +368,10 @@ where\n                 .map(|e| match e.node {\n                     ast::ExprKind::Closure(..) => true,\n                     _ => false,\n-                }).unwrap_or(false)\n-        }).count()\n+                })\n+                .unwrap_or(false)\n+        })\n+        .count()\n         > 1\n }\n "}, {"sha": "e79b9011cbf44cae3aa437b20d80e2909bac5bdf", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -370,7 +370,8 @@ fn rewrite_comment_inner(\n             }\n \n             line\n-        }).map(|s| left_trim_comment_line(s, &style))\n+        })\n+        .map(|s| left_trim_comment_line(s, &style))\n         .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n                 (\n@@ -542,7 +543,8 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n             } else {\n                 line\n             }\n-        }).collect::<Vec<_>>()\n+        })\n+        .collect::<Vec<_>>()\n         .join(\"\\n\")\n }\n \n@@ -630,7 +632,8 @@ fn light_rewrite_comment(\n             };\n             // Preserve markdown's double-space line break syntax in doc comment.\n             trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n-        }).collect();\n+        })\n+        .collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))\n }\n \n@@ -1455,7 +1458,8 @@ mod test {\n             .filter_map(|(s, c)| match s {\n                 FullCodeCharKind::Normal | FullCodeCharKind::InString => Some(c),\n                 _ => None,\n-            }).collect()\n+            })\n+            .collect()\n     }\n \n     #[test]"}, {"sha": "84ab0a8fc075db335b93ea556819d1d38d7cf608", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -216,7 +216,8 @@ impl FileLines {\n                 .map(|(file, range)| JsonSpan {\n                     file: file.to_owned(),\n                     range: (range.lo, range.hi),\n-                }).collect(),\n+                })\n+                .collect(),\n         }\n     }\n "}, {"sha": "7dca87e17775382159f264dc1a6e4332168c5a73", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -394,7 +394,8 @@ impl IgnoreList {\n                     path.push(s);\n                     path\n                 }\n-            }).collect();\n+            })\n+            .collect();\n     }\n \n     fn skip_file_inner(&self, file: &Path) -> bool {"}, {"sha": "674f719b5c74ba8957aece1eb818d6805fb73f29", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -1029,7 +1029,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                         false,\n                         true,\n                         mk_sp(else_block.span.lo(), self.span.hi()),\n-                    ).rewrite(context, shape)\n+                    )\n+                    .rewrite(context, shape)\n                 }\n                 ast::ExprKind::If(ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(\n@@ -1040,7 +1041,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                         false,\n                         true,\n                         mk_sp(else_block.span.lo(), self.span.hi()),\n-                    ).rewrite(context, shape)\n+                    )\n+                    .rewrite(context, shape)\n                 }\n                 _ => {\n                     last_in_chain = true;\n@@ -1237,7 +1239,8 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                             new_indent.to_string(context.config),\n                             line.trim_left()\n                         )\n-                    }).collect::<Vec<_>>()\n+                    })\n+                    .collect::<Vec<_>>()\n                     .join(\"\\n\")\n                     .trim_left(),\n             );"}, {"sha": "d940c35f1c734532b416fef590c2fa5a208f32e9", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -240,7 +240,8 @@ impl FormattingError {\n                     fl.file\n                         .get_line(fl.lines[0].line_index)\n                         .map(|l| l.into_owned())\n-                }).unwrap_or_else(String::new),\n+                })\n+                .unwrap_or_else(String::new),\n         }\n     }\n "}, {"sha": "4ad004d3a8b16aa7640e84f08779301f5eb9399a", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -46,7 +46,8 @@ fn prune_files(files: Vec<&str>) -> Vec<&str> {\n                 return true;\n             }\n             pruned_prefixes.iter().all(|pp| !f.starts_with(pp))\n-        }).collect()\n+        })\n+        .collect()\n }\n \n fn git_diff(commits: &str) -> String {"}, {"sha": "962d82868d78b8bc4fe6723bfe404d1cc6e16486", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -44,7 +44,8 @@ impl<'a> FmtVisitor<'a> {\n             Some(item.vis.clone()),\n             Some(item.span.lo()),\n             Some(item.attrs.clone()),\n-        ).rewrite_top_level(&self.get_context(), shape);\n+        )\n+        .rewrite_top_level(&self.get_context(), shape);\n         match rw {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n@@ -291,7 +292,8 @@ impl UseTree {\n                     } else {\n                         Some(item.attrs.clone())\n                     },\n-                ).normalize(),\n+                )\n+                .normalize(),\n             ),\n             _ => None,\n         }\n@@ -345,13 +347,15 @@ impl UseTree {\n                     context.snippet_provider.span_after(a.span, \"{\"),\n                     a.span.hi(),\n                     false,\n-                ).collect();\n+                )\n+                .collect();\n                 result.path.push(UseSegment::List(\n                     list.iter()\n                         .zip(items.into_iter())\n                         .map(|(t, list_item)| {\n                             Self::from_ast(context, &t.0, Some(list_item), None, None, None)\n-                        }).collect(),\n+                        })\n+                        .collect(),\n                 ));\n             }\n             UseTreeKind::Simple(ref rename, ..) => {"}, {"sha": "18b43972051cbf56e7c49ffb6d56b525a32b452f", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -460,7 +460,8 @@ impl<'a> FmtVisitor<'a> {\n             self.block_indent,\n             mk_sp(span.lo(), body_start),\n             last_line_width(&enum_header),\n-        ).unwrap();\n+        )\n+        .unwrap();\n         self.push_str(&generics_str);\n \n         self.last_pos = body_start;\n@@ -517,7 +518,8 @@ impl<'a> FmtVisitor<'a> {\n                 body_lo,\n                 body_hi,\n                 false,\n-            ).collect()\n+            )\n+            .collect()\n         };\n         let mut items: Vec<_> =\n             itemize_list_with(self.config.width_heuristics().struct_variant_width);\n@@ -1705,7 +1707,8 @@ fn rewrite_static(\n             lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n-        ).and_then(|res| recover_comment_removed(res, static_parts.span, context))\n+        )\n+        .and_then(|res| recover_comment_removed(res, static_parts.span, context))\n         .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))\n@@ -2233,7 +2236,8 @@ fn rewrite_args(\n         .map(|arg| {\n             arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n                 .unwrap_or_else(|| context.snippet(arg.span()).to_owned())\n-        }).collect::<Vec<_>>();\n+        })\n+        .collect::<Vec<_>>();\n \n     // Account for sugary self.\n     // FIXME: the comment for the self argument is dropped. This is blocked\n@@ -2815,7 +2819,8 @@ impl Rewrite for ast::ForeignItem {\n                 span,\n                 false,\n                 false,\n-            ).map(|(s, _)| format!(\"{};\", s)),\n+            )\n+            .map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "282519286faa8756988546c2ba8864e69f76773b", "filename": "src/macros.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -287,7 +287,8 @@ pub fn rewrite_macro_inner(\n                 } else {\n                     Some(SeparatorTactic::Never)\n                 },\n-            ).map(|rw| match position {\n+            )\n+            .map(|rw| match position {\n                 MacroPosition::Item => format!(\"{};\", rw),\n                 _ => rw,\n             })\n@@ -418,7 +419,8 @@ pub fn rewrite_macro_def(\n         context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,\n-    ).collect::<Vec<_>>();\n+    )\n+    .collect::<Vec<_>>();\n \n     let fmt = ListFormatting::new(arm_shape, context.config)\n         .separator(if def.legacy { \";\" } else { \"\" })\n@@ -1141,7 +1143,8 @@ fn indent_macro_snippet(\n                 FullCodeCharKind::InString | FullCodeCharKind::EndString => None,\n                 _ => prefix_space_width,\n             }\n-        }).min()?;\n+        })\n+        .min()?;\n \n     Some(\n         first_line + \"\\n\" + &trimmed_lines\n@@ -1157,7 +1160,8 @@ fn indent_macro_snippet(\n                     }\n                     None => String::new(),\n                 },\n-            ).collect::<Vec<_>>()\n+            )\n+            .collect::<Vec<_>>()\n             .join(\"\\n\"),\n     )\n }\n@@ -1322,7 +1326,8 @@ impl MacroBranch {\n                     }\n                     (s + l + \"\\n\", !kind.is_string() || l.ends_with('\\\\'))\n                 },\n-            ).0;\n+            )\n+            .0;\n \n         // Undo our replacement of macro variables.\n         // FIXME: this could be *much* more efficient."}, {"sha": "acf6d7b4d387eab696463c142cef736f0e1f22e6", "filename": "src/overflow.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -52,7 +52,8 @@ where\n         item_max_width,\n         force_separator_tactic,\n         None,\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n pub fn rewrite_with_angle_brackets<T>(\n@@ -76,7 +77,8 @@ where\n         context.config.max_width(),\n         None,\n         None,\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n pub fn rewrite_with_square_brackets<T>(\n@@ -107,7 +109,8 @@ where\n         context.config.width_heuristics().array_width,\n         force_separator_tactic,\n         Some((\"[\", \"]\")),\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n struct Context<'a, T: 'a> {\n@@ -242,7 +245,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                 list_items,\n                 self.one_line_shape,\n                 self.item_max_width,\n-            ).and_then(|arg_shape| {\n+            )\n+            .and_then(|arg_shape| {\n                 self.rewrite_last_item_with_overflow(\n                     &mut list_items[self.items.len() - 1],\n                     arg_shape,\n@@ -495,7 +499,8 @@ where\n     Shape {\n         width: min(args_max_width, shape.width),\n         ..shape\n-    }.offset_left(offset)\n+    }\n+    .offset_left(offset)\n }\n \n fn shape_from_indent_style("}, {"sha": "f078022b9e075f869616d508b1a24329cc75db86", "filename": "src/pairs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -124,7 +124,8 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n     let nested_shape = (match context.config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(0),\n         IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n-    }).with_max_width(&context.config)\n+    })\n+    .with_max_width(&context.config)\n     .sub_width(rhs_offset)?;\n \n     let indent_str = nested_shape.indent.to_string_with_newline(context.config);"}, {"sha": "13fea046aafaf4c5680de2dd527800fa62a61791", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -397,7 +397,8 @@ fn count_wildcard_suffix_len(\n         context.snippet_provider.span_after(span, \"(\"),\n         span.hi() - BytePos(1),\n         false,\n-    ).collect();\n+    )\n+    .collect();\n \n     for item in items.iter().rev().take_while(|i| match i.item {\n         Some(ref internal_string) if internal_string == \"_\" => true,"}, {"sha": "f990e68656590a601c07d82a0db0cbea6237b641", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -140,7 +140,8 @@ fn rewrite_reorderable_items(\n                 .map(|use_tree| ListItem {\n                     item: use_tree.rewrite_top_level(context, nested_shape),\n                     ..use_tree.list_item.unwrap_or_else(ListItem::empty)\n-                }).collect();\n+                })\n+                .collect();\n \n             wrap_reorderable_items(context, &item_vec, nested_shape)\n         }\n@@ -237,7 +238,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         last = current;\n                         in_same_group\n                     })\n-            }).count();\n+            })\n+            .count();\n         let items = &items[..item_length];\n \n         let at_least_one_in_file_lines = items"}, {"sha": "dbe1c05406ab44522c071c0c1e0ea8fa702bff91", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -207,7 +207,8 @@ where\n             out,\n             \"{} {} {}\",\n             mismatch.line_number_orig, num_removed, num_added\n-        ).unwrap();\n+        )\n+        .unwrap();\n \n         for line in mismatch.lines {\n             match line {"}, {"sha": "a9015cedf6a4f0c83e9b5b57abf7dab633d237a5", "filename": "src/test/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -514,7 +514,8 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n                         .to_owned(),\n                 )\n             })\n-        }).collect()\n+        })\n+        .collect()\n }\n \n // Compare output to input.\n@@ -882,7 +883,8 @@ fn configuration_snippet_tests() {\n         let mut file_iter = BufReader::new(\n             fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n                 .expect(&format!(\"Couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n-        ).lines()\n+        )\n+        .lines()\n         .map(|l| l.unwrap())\n         .enumerate();\n         let mut code_blocks: Vec<ConfigCodeBlock> = Vec::new();\n@@ -970,6 +972,7 @@ fn verify_check_works() {\n         rustfmt().to_str().unwrap(),\n         \"--check\",\n         temp_file.path.to_str().unwrap(),\n-    ]).succeeds()\n+    ])\n+    .succeeds()\n     .unwrap();\n }"}, {"sha": "5f71dd6bdc455772a85bf71509fb3e5f8a5905a9", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -844,7 +844,8 @@ fn rewrite_lifetime_param(\n         .filter(|p| match p.kind {\n             ast::GenericParamKind::Lifetime => true,\n             _ => false,\n-        }).map(|lt| lt.rewrite(context, shape))\n+        })\n+        .map(|lt| lt.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?\n         .join(\", \");\n     if result.is_empty() {"}, {"sha": "d18fa4b9b7587a8ab25b4e7bcad33215d358ac4f", "filename": "src/vertical.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -200,12 +200,14 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n                     Some(field_str.len())\n                 }\n             })\n-        }).fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n+        })\n+        .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n             (Some((max_len, min_len)), Some(len)) => {\n                 Some((cmp::max(max_len, len), cmp::min(min_len, len)))\n             }\n             _ => None,\n-        }).unwrap_or((0, 0))\n+        })\n+        .unwrap_or((0, 0))\n }\n \n fn rewrite_aligned_items_inner<T: AlignedItem>(\n@@ -236,7 +238,8 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         span.lo(),\n         span.hi(),\n         false,\n-    ).collect::<Vec<_>>();\n+    )\n+    .collect::<Vec<_>>();\n \n     let tactic = definitive_tactic(\n         &items,"}, {"sha": "ba87efb5052715f8ad690cd1c25e768c1070a87d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b9c66cc9d3228339d07cb5410f6cabdac97de8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "patch": "@@ -158,7 +158,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         item.attrs.first()\n                     } else {\n                         first_stmt.attrs().first()\n-                    }.and_then(|attr| {\n+                    }\n+                    .and_then(|attr| {\n                         // Some stmts can have embedded attributes.\n                         // e.g. `match { #![attr] ... }`\n                         let attr_lo = attr.span.lo();"}]}