{"sha": "8a7ca936e61d04399198911ee2b07ac110bf17b0", "node_id": "C_kwDOAAsO6NoAKDhhN2NhOTM2ZTYxZDA0Mzk5MTk4OTExZWUyYjA3YWMxMTBiZjE3YjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T10:12:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T10:12:23Z"}, "message": "Auto merge of #105587 - tgross35:once-cell-min, r=m-ou-se\n\nPartial stabilization of `once_cell`\n\nThis PR aims to stabilize a portion of the `once_cell` feature:\n\n- `core::cell::OnceCell`\n- `std::cell::OnceCell` (re-export of the above)\n- `std::sync::OnceLock`\n\nThis will leave `LazyCell` and `LazyLock` unstabilized, which have been moved to the `lazy_cell` feature flag.\n\nTracking issue: https://github.com/rust-lang/rust/issues/74465 (does not fully close, but it may make sense to move to a new issue)\n\nFuture steps for separate PRs:\n- ~~Add `#[inline]` to many methods~~ #105651\n- Update cranelift usage of the `once_cell` crate\n- Update rust-analyzer usage of the `once_cell` crate\n- Update error messages discussing once_cell\n\n## To be stabilized API summary\n\n```rust\n// core::cell (in core/cell/once.rs)\n\npub struct OnceCell<T> { .. }\n\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T>;\n    pub fn get(&self) -> Option<&T>;\n    pub fn get_mut(&mut self) -> Option<&mut T>;\n    pub fn set(&self, value: T) -> Result<(), T>;\n    pub fn get_or_init<F>(&self, f: F) -> &T where F: FnOnce() -> T;\n    pub fn into_inner(self) -> Option<T>;\n    pub fn take(&mut self) -> Option<T>;\n}\n\nimpl<T: Clone> Clone for OnceCell<T>;\nimpl<T: Debug> Debug for OnceCell<T>\nimpl<T> Default for OnceCell<T>;\nimpl<T> From<T> for OnceCell<T>;\nimpl<T: PartialEq> PartialEq for OnceCell<T>;\nimpl<T: Eq> Eq for OnceCell<T>;\n```\n\n```rust\n// std::sync (in std/sync/once_lock.rs)\n\nimpl<T> OnceLock<T> {\n    pub const fn new() -> OnceLock<T>;\n    pub fn get(&self) -> Option<&T>;\n    pub fn get_mut(&mut self) -> Option<&mut T>;\n    pub fn set(&self, value: T) -> Result<(), T>;\n    pub fn get_or_init<F>(&self, f: F) -> &T where F: FnOnce() -> T;\n    pub fn into_inner(self) -> Option<T>;\n    pub fn take(&mut self) -> Option<T>;\n}\n\nimpl<T: Clone> Clone for OnceLock<T>;\nimpl<T: Debug> Debug for OnceLock<T>;\nimpl<T> Default for OnceLock<T>;\nimpl<#[may_dangle] T> Drop for OnceLock<T>;\nimpl<T> From<T> for OnceLock<T>;\nimpl<T: PartialEq> PartialEq for OnceLock<T>\nimpl<T: Eq> Eq for OnceLock<T>;\nimpl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for OnceLock<T>;\nunsafe impl<T: Send> Send for OnceLock<T>;\nunsafe impl<T: Sync + Send> Sync for OnceLock<T>;\nimpl<T: UnwindSafe> UnwindSafe for OnceLock<T>;\n```\n\nNo longer planned as part of this PR, and moved to the `rust_cell_try` feature gate:\n\n```rust\nimpl<T> OnceCell<T> {\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>;\n}\n\nimpl<T> OnceLock<T> {\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>;\n}\n```\n\nI am new to this process so would appreciate mentorship wherever needed.", "tree": {"sha": "b156a4a640a1632279dfa86aaa4774d51acd8a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b156a4a640a1632279dfa86aaa4774d51acd8a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "html_url": "https://github.com/rust-lang/rust/commit/8a7ca936e61d04399198911ee2b07ac110bf17b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d9a3d0771504f1ae776226a5799dcb4408a91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "html_url": "https://github.com/rust-lang/rust/commit/f2d9a3d0771504f1ae776226a5799dcb4408a91a"}, {"sha": "9b5122976e9eb0f2f0b8def82fbcd972837880e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5122976e9eb0f2f0b8def82fbcd972837880e4", "html_url": "https://github.com/rust-lang/rust/commit/9b5122976e9eb0f2f0b8def82fbcd972837880e4"}], "stats": {"total": 319, "additions": 163, "deletions": 156}, "files": [{"sha": "8b463a018a8d4d246db4f4a9bb03b90d570acd26", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -5,7 +5,7 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]"}, {"sha": "3f77ea77effe31a35e283ca90350bc7361a68f2b", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -10,7 +10,6 @@\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "0ab12314b3c88c97526efe3316c77618f3157375", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -5,7 +5,6 @@\n #![feature(int_roundings)]\n #![feature(let_chains)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(strict_provenance)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]"}, {"sha": "9b52638e61249cbdd5076a23dadf27b26eec2e35", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -20,7 +20,7 @@\n #![feature(never_type)]\n #![feature(type_alias_impl_trait)]\n #![feature(new_uninit)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(rustc_attrs)]\n #![feature(negative_impls)]\n #![feature(test)]"}, {"sha": "b96b356f55177ddeb5d48caa62be22ba5f26ab09", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -6,7 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(is_terminal)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(decl_macro)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "6f319b96f2faf56d26b12a9d679dd82102c35ea9", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,5 @@\n #![feature(let_chains)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "3ce16e1566769d163a95b6fcfef68d0077ce2159", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -11,7 +11,7 @@\n //! even if it is stabilized or removed, *do not remove it*. Instead, move the\n //! symbol to the `accepted` or `removed` modules respectively.\n \n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "2a9025d60aba7a47e87dc82a855f440a7ed47727", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -67,7 +67,7 @@ This API is completely unstable and subject to change.\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(slice_partition_dedup)]\n #![feature(try_blocks)]\n #![feature(is_some_and)]"}, {"sha": "9664ba8bd8ac671e643a7265765fc4102eea0be6", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -2,7 +2,7 @@\n #![feature(decl_macro)]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "880da5ca5937609d324f03b4090e88846872eec6", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -4,7 +4,6 @@\n #![feature(generators)]\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n-#![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(macro_metavar_expr)]\n #![feature(min_specialization)]"}, {"sha": "0e883424fd47c90e72b79e5e764a2440df0590f2", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -39,7 +39,6 @@\n #![feature(never_type)]\n #![feature(extern_types)]\n #![feature(new_uninit)]\n-#![feature(once_cell)]\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "3f9236c9dd94ca4826e160852e9d371d31253f66", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -8,7 +8,6 @@\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(min_specialization)]\n-#![feature(once_cell)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "43caa2ea973923c858b918b75f9d6dcd10c33617", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -3,7 +3,6 @@\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]\n #![feature(min_specialization)]\n-#![feature(once_cell)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n #![recursion_limit = \"256\"]"}, {"sha": "6173b446b87c17f8e79cc9e5f810311849867a9a", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -5,7 +5,6 @@\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]"}, {"sha": "021a67c9513cddc014bd9be00a12c4cb8e1b8289", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -5,7 +5,6 @@\n #![feature(const_mut_refs)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "968728905e7e58d2140edcef1fe1d0241c784d89", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -2,7 +2,7 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(option_get_or_insert_default)]\n #![feature(rustc_attrs)]\n #![feature(map_many_mut)]"}, {"sha": "cd5301ee77f9011f12e93858f98b51362770e3b3", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -42,7 +42,6 @@\n #![feature(slice_flatten)]\n #![feature(thin_box)]\n #![feature(strict_provenance)]\n-#![feature(once_cell)]\n #![feature(drain_keep_rest)]\n #![deny(fuzzy_provenance_casts)]\n #![deny(unsafe_op_in_unsafe_fn)]"}, {"sha": "63bce5d0ccd442b37f5ebf16035406523c8a8e85", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 70, "deletions": 27, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -11,36 +11,77 @@\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n-//! presence of aliasing. Both [`Cell<T>`] and [`RefCell<T>`] allow doing this in a single-threaded\n-//! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n-//! [`Sync`]). If you need to do aliasing and mutation between multiple threads it is possible to\n-//! use [`Mutex<T>`], [`RwLock<T>`] or [`atomic`] types.\n+//! presence of aliasing. [`Cell<T>`], [`RefCell<T>`], and [`OnceCell<T>`] allow doing this in\n+//! a single-threaded way\u2014they do not implement [`Sync`]. (If you need to do aliasing and\n+//! mutation among multiple threads, [`Mutex<T>`], [`RwLock<T>`], [`OnceLock<T>`] or [`atomic`]\n+//! types are the correct data structures to do so).\n //!\n-//! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n-//! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n-//! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast\n-//! with typical Rust types that exhibit 'inherited mutability'.\n+//! Values of the `Cell<T>`, `RefCell<T>`, and `OnceCell<T>` types may be mutated through shared\n+//! references (i.e. the common `&T` type), whereas most Rust types can only be mutated through\n+//! unique (`&mut T`) references. We say these cell types provide 'interior mutability'\n+//! (mutable via `&T`), in contrast with typical Rust types that exhibit 'inherited mutability'\n+//! (mutable only via `&mut T`).\n //!\n-//! Cell types come in two flavors: `Cell<T>` and `RefCell<T>`. `Cell<T>` implements interior\n-//! mutability by moving values in and out of the `Cell<T>`. To use references instead of values,\n-//! one must use the `RefCell<T>` type, acquiring a write lock before mutating. `Cell<T>` provides\n-//! methods to retrieve and change the current interior value:\n+//! Cell types come in three flavors: `Cell<T>`, `RefCell<T>`, and `OnceCell<T>`. Each provides\n+//! a different way of providing safe interior mutability.\n+//!\n+//! ## `Cell<T>`\n+//!\n+//! [`Cell<T>`] implements interior mutability by moving values in and out of the cell. That is, an\n+//! `&mut T` to the inner value can never be obtained, and the value itself cannot be directly\n+//! obtained without replacing it with something else. Both of these rules ensure that there is\n+//! never more than one reference pointing to the inner value. This type provides the following\n+//! methods:\n //!\n //!  - For types that implement [`Copy`], the [`get`](Cell::get) method retrieves the current\n-//!    interior value.\n+//!    interior value by duplicating it.\n //!  - For types that implement [`Default`], the [`take`](Cell::take) method replaces the current\n //!    interior value with [`Default::default()`] and returns the replaced value.\n-//!  - For all types, the [`replace`](Cell::replace) method replaces the current interior value and\n-//!    returns the replaced value and the [`into_inner`](Cell::into_inner) method consumes the\n-//!    `Cell<T>` and returns the interior value. Additionally, the [`set`](Cell::set) method\n-//!    replaces the interior value, dropping the replaced value.\n+//!  - All types have:\n+//!    - [`replace`](Cell::replace): replaces the current interior value and returns the replaced\n+//!      value.\n+//!    - [`into_inner`](Cell::into_inner): this method consumes the `Cell<T>` and returns the\n+//!      interior value.\n+//!    - [`set`](Cell::set): this method replaces the interior value, dropping the replaced value.\n+//!\n+//! `Cell<T>` is typically used for more simple types where copying or moving values isn't too\n+//! resource intensive (e.g. numbers), and should usually be preferred over other cell types when\n+//! possible. For larger and non-copy types, `RefCell` provides some advantages.\n //!\n-//! `RefCell<T>` uses Rust's lifetimes to implement 'dynamic borrowing', a process whereby one can\n+//! ## `RefCell<T>`\n+//!\n+//! [`RefCell<T>`] uses Rust's lifetimes to implement \"dynamic borrowing\", a process whereby one can\n //! claim temporary, exclusive, mutable access to the inner value. Borrows for `RefCell<T>`s are\n-//! tracked 'at runtime', unlike Rust's native reference types which are entirely tracked\n-//! statically, at compile time. Because `RefCell<T>` borrows are dynamic it is possible to attempt\n-//! to borrow a value that is already mutably borrowed; when this happens it results in thread\n-//! panic.\n+//! tracked at _runtime_, unlike Rust's native reference types which are entirely tracked\n+//! statically, at compile time.\n+//!\n+//! An immutable reference to a `RefCell`'s inner value (`&T`) can be obtained with\n+//! [`borrow`](`RefCell::borrow`), and a mutable borrow (`&mut T`) can be obtained with\n+//! [`borrow_mut`](`RefCell::borrow_mut`). When these functions are called, they first verify that\n+//! Rust's borrow rules will be satisfied: any number of immutable borrows are allowed or a\n+//! single immutable borrow is allowed, but never both. If a borrow is attempted that would violate\n+//! these rules, the thread will panic.\n+//!\n+//! The corresponding [`Sync`] version of `RefCell<T>` is [`RwLock<T>`].\n+//!\n+//! ## `OnceCell<T>`\n+//!\n+//! [`OnceCell<T>`] is somewhat of a hybrid of `Cell` and `RefCell` that works for values that\n+//! typically only need to be set once. This means that a reference `&T` can be obtained without\n+//! moving or copying the inner value (unlike `Cell`) but also without runtime checks (unlike\n+//! `RefCell`). However, its value can also not be updated once set unless you have a mutable\n+//! reference to the `OnceCell`.\n+//!\n+//! `OnceCell` provides the following methods:\n+//!\n+//! - [`get`](OnceCell::get): obtain a reference to the inner value\n+//! - [`set`](OnceCell::set): set the inner value if it is unset (returns a `Result`)\n+//! - [`get_or_init`](OnceCell::get_or_init): return the inner value, initializing it if needed\n+//! - [`get_mut`](OnceCell::get_mut): provide a mutable reference to the inner value, only available\n+//!   if you have a mutable reference to the cell itself.\n+//!\n+//! The corresponding [`Sync`] version of `OnceCell<T>` is [`OnceLock<T>`].\n+//!\n //!\n //! # When to choose interior mutability\n //!\n@@ -188,6 +229,8 @@\n //! [`Rc<T>`]: ../../std/rc/struct.Rc.html\n //! [`RwLock<T>`]: ../../std/sync/struct.RwLock.html\n //! [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n+//! [`OnceLock<T>`]: ../../std/sync/struct.OnceLock.html\n+//! [`Sync`]: ../../std/marker/trait.Sync.html\n //! [`atomic`]: crate::sync::atomic\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -202,9 +245,9 @@ use crate::ptr::{self, NonNull};\n mod lazy;\n mod once;\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use lazy::LazyCell;\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use once::OnceCell;\n \n /// A mutable memory location.\n@@ -419,7 +462,7 @@ impl<T> Cell<T> {\n         mem::replace(unsafe { &mut *self.value.get() }, val)\n     }\n \n-    /// Unwraps the value.\n+    /// Unwraps the value, consuming the cell.\n     ///\n     /// # Examples\n     ///\n@@ -1969,7 +2012,7 @@ impl<T> UnsafeCell<T> {\n         UnsafeCell { value }\n     }\n \n-    /// Unwraps the value.\n+    /// Unwraps the value, consuming the cell.\n     ///\n     /// # Examples\n     ///\n@@ -2133,7 +2176,7 @@ impl<T> SyncUnsafeCell<T> {\n         Self { value: UnsafeCell { value } }\n     }\n \n-    /// Unwraps the value.\n+    /// Unwraps the value, consuming the cell.\n     #[inline]\n     pub const fn into_inner(self) -> T {\n         self.value.into_inner()"}, {"sha": "64a6ce51b2eca5043aa7069863a5297b4ce284e6", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -11,7 +11,7 @@ use crate::ops::Deref;\n /// # Examples\n ///\n /// ```\n-/// #![feature(once_cell)]\n+/// #![feature(lazy_cell)]\n ///\n /// use std::cell::LazyCell;\n ///\n@@ -29,7 +29,7 @@ use crate::ops::Deref;\n /// //   92\n /// //   92\n /// ```\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub struct LazyCell<T, F = fn() -> T> {\n     cell: OnceCell<T>,\n     init: Cell<Option<F>>,\n@@ -41,7 +41,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n+    /// #![feature(lazy_cell)]\n     ///\n     /// use std::cell::LazyCell;\n     ///\n@@ -52,7 +52,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n     pub const fn new(init: F) -> LazyCell<T, F> {\n         LazyCell { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n     }\n@@ -65,7 +65,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n+    /// #![feature(lazy_cell)]\n     ///\n     /// use std::cell::LazyCell;\n     ///\n@@ -75,7 +75,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// assert_eq!(&*lazy, &92);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n     pub fn force(this: &LazyCell<T, F>) -> &T {\n         this.cell.get_or_init(|| match this.init.take() {\n             Some(f) => f(),\n@@ -84,7 +84,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T, F: FnOnce() -> T> Deref for LazyCell<T, F> {\n     type Target = T;\n     #[inline]\n@@ -93,7 +93,7 @@ impl<T, F: FnOnce() -> T> Deref for LazyCell<T, F> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: Default> Default for LazyCell<T> {\n     /// Creates a new lazy value using `Default` as the initializing function.\n     #[inline]\n@@ -102,7 +102,7 @@ impl<T: Default> Default for LazyCell<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: fmt::Debug, F> fmt::Debug for LazyCell<T, F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Lazy\").field(\"cell\", &self.cell).field(\"init\", &\"..\").finish()"}, {"sha": "5dc2d523198001716965ff28154486f3c561c182", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -4,8 +4,10 @@ use crate::mem;\n \n /// A cell which can be written to only once.\n ///\n-/// Unlike [`RefCell`], a `OnceCell` only provides shared `&T` references to its value.\n-/// Unlike [`Cell`], a `OnceCell` doesn't require copying or replacing the value to access it.\n+/// This allows obtaining a shared `&T` reference to its inner value without copying or replacing\n+/// it (unlike [`Cell`]), and without runtime borrow checks (unlike [`RefCell`]). However,\n+/// only immutable references can be obtained unless one has a mutable reference to the cell\n+/// itself.\n ///\n /// For a thread-safe version of this struct, see [`std::sync::OnceLock`].\n ///\n@@ -16,8 +18,6 @@ use crate::mem;\n /// # Examples\n ///\n /// ```\n-/// #![feature(once_cell)]\n-///\n /// use std::cell::OnceCell;\n ///\n /// let cell = OnceCell::new();\n@@ -29,7 +29,7 @@ use crate::mem;\n /// assert_eq!(value, \"Hello, World!\");\n /// assert!(cell.get().is_some());\n /// ```\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n pub struct OnceCell<T> {\n     // Invariant: written to at most once.\n     inner: UnsafeCell<Option<T>>,\n@@ -39,7 +39,8 @@ impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }\n@@ -48,7 +49,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get(&self) -> Option<&T> {\n         // SAFETY: Safe due to `inner`'s invariant\n         unsafe { &*self.inner.get() }.as_ref()\n@@ -58,7 +59,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         self.inner.get_mut().as_mut()\n     }\n@@ -73,8 +74,6 @@ impl<T> OnceCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::cell::OnceCell;\n     ///\n     /// let cell = OnceCell::new();\n@@ -86,7 +85,7 @@ impl<T> OnceCell<T> {\n     /// assert!(cell.get().is_some());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         // SAFETY: Safe because we cannot have overlapping mutable borrows\n         let slot = unsafe { &*self.inner.get() };\n@@ -117,8 +116,6 @@ impl<T> OnceCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::cell::OnceCell;\n     ///\n     /// let cell = OnceCell::new();\n@@ -128,7 +125,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -153,7 +150,7 @@ impl<T> OnceCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n+    /// #![feature(once_cell_try)]\n     ///\n     /// use std::cell::OnceCell;\n     ///\n@@ -166,7 +163,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(value, Ok(&92));\n     /// assert_eq!(cell.get(), Some(&92))\n     /// ```\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"once_cell_try\", issue = \"109737\")]\n     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n     where\n         F: FnOnce() -> Result<T, E>,\n@@ -199,8 +196,6 @@ impl<T> OnceCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::cell::OnceCell;\n     ///\n     /// let cell: OnceCell<String> = OnceCell::new();\n@@ -211,7 +206,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(self) -> Option<T> {\n         // Because `into_inner` takes `self` by value, the compiler statically verifies\n         // that it is not currently borrowed. So it is safe to move out `Option<T>`.\n@@ -227,8 +222,6 @@ impl<T> OnceCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::cell::OnceCell;\n     ///\n     /// let mut cell: OnceCell<String> = OnceCell::new();\n@@ -240,21 +233,21 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn take(&mut self) -> Option<T> {\n         mem::take(self).into_inner()\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for OnceCell<T> {\n     #[inline]\n     fn default() -> Self {\n         Self::new()\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -264,7 +257,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: Clone> Clone for OnceCell<T> {\n     #[inline]\n     fn clone(&self) -> OnceCell<T> {\n@@ -279,18 +272,19 @@ impl<T: Clone> Clone for OnceCell<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: PartialEq> PartialEq for OnceCell<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: Eq> Eq for OnceCell<T> {}\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for OnceCell<T> {\n     /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     #[inline]\n@@ -300,5 +294,5 @@ impl<T> const From<T> for OnceCell<T> {\n }\n \n // Just like for `Cell<T>` this isn't needed, but results in nicer error messages.\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> !Sync for OnceCell<T> {}"}, {"sha": "344f0b61754e3ab92cba4ab88df8ab6c7f077314", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -94,7 +94,7 @@\n #![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(unsized_tuple_coercion)]\n #![feature(const_option)]\n #![feature(const_option_ext)]"}, {"sha": "8c118b95b0a75b99fd2cb02e2621cf97de9d71b2", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -339,7 +339,7 @@\n #![feature(edition_panic)]\n #![feature(format_args_nl)]\n #![feature(log_syntax)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(saturating_int_impl)]\n #![feature(stdsimd)]\n #![feature(test)]"}, {"sha": "8e9ea293ce4e9247fa4fb79cda88f206ddc8ca2a", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -26,7 +26,7 @@ union Data<T, F> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(once_cell)]\n+/// #![feature(lazy_cell)]\n ///\n /// use std::collections::HashMap;\n ///\n@@ -54,7 +54,7 @@ union Data<T, F> {\n ///     //   Some(\"Hoyten\")\n /// }\n /// ```\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub struct LazyLock<T, F = fn() -> T> {\n     once: Once,\n     data: UnsafeCell<Data<T, F>>,\n@@ -64,7 +64,7 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// Creates a new lazy value with the given initializing\n     /// function.\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n     pub const fn new(f: F) -> LazyLock<T, F> {\n         LazyLock { once: Once::new(), data: UnsafeCell::new(Data { f: ManuallyDrop::new(f) }) }\n     }\n@@ -76,7 +76,7 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n+    /// #![feature(lazy_cell)]\n     ///\n     /// use std::sync::LazyLock;\n     ///\n@@ -86,7 +86,7 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// assert_eq!(&*lazy, &92);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n     pub fn force(this: &LazyLock<T, F>) -> &T {\n         this.once.call_once(|| {\n             // SAFETY: `call_once` only runs this closure once, ever.\n@@ -122,7 +122,7 @@ impl<T, F> LazyLock<T, F> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T, F> Drop for LazyLock<T, F> {\n     fn drop(&mut self) {\n         match self.once.state() {\n@@ -135,7 +135,7 @@ impl<T, F> Drop for LazyLock<T, F> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T, F: FnOnce() -> T> Deref for LazyLock<T, F> {\n     type Target = T;\n \n@@ -145,7 +145,7 @@ impl<T, F: FnOnce() -> T> Deref for LazyLock<T, F> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: Default> Default for LazyLock<T> {\n     /// Creates a new lazy value using `Default` as the initializing function.\n     #[inline]\n@@ -154,7 +154,7 @@ impl<T: Default> Default for LazyLock<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: fmt::Debug, F> fmt::Debug for LazyLock<T, F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -166,13 +166,13 @@ impl<T: fmt::Debug, F> fmt::Debug for LazyLock<T, F> {\n \n // We never create a `&F` from a `&LazyLock<T, F>` so it is fine\n // to not impl `Sync` for `F`\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n unsafe impl<T: Sync + Send, F: Send> Sync for LazyLock<T, F> {}\n // auto-derived `Send` impl is OK.\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: RefUnwindSafe + UnwindSafe, F: UnwindSafe> RefUnwindSafe for LazyLock<T, F> {}\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: UnwindSafe, F: UnwindSafe> UnwindSafe for LazyLock<T, F> {}\n \n #[cfg(test)]"}, {"sha": "19641753ffe1dcec8b397cdeab5e5c7784a48380", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -133,7 +133,9 @@\n //! - [`Mutex`]: Mutual Exclusion mechanism, which ensures that at\n //!   most one thread at a time is able to access some data.\n //!\n-//! - [`Once`]: Used for thread-safe, one-time initialization of a\n+//! - [`Once`]: Used for a thread-safe, one-time global initialization routine\n+//!\n+//! - [`OnceLock`]: Used for thread-safe, one-time initialization of a\n //!   global variable.\n //!\n //! - [`RwLock`]: Provides a mutual exclusion mechanism which allows\n@@ -147,6 +149,7 @@\n //! [`mpsc`]: crate::sync::mpsc\n //! [`Mutex`]: crate::sync::Mutex\n //! [`Once`]: crate::sync::Once\n+//! [`OnceLock`]: crate::sync::OnceLock\n //! [`RwLock`]: crate::sync::RwLock\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -172,9 +175,9 @@ pub use self::poison::{LockResult, PoisonError, TryLockError, TryLockResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use self::lazy_lock::LazyLock;\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use self::once_lock::OnceLock;\n \n pub(crate) use self::remutex::{ReentrantMutex, ReentrantMutexGuard};"}, {"sha": "8c34375ea07123b6647e45c1ec3818d1eaa9fe01", "filename": "library/std/src/sync/once_lock.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -14,8 +14,6 @@ use crate::sync::Once;\n /// # Examples\n ///\n /// ```\n-/// #![feature(once_cell)]\n-///\n /// use std::sync::OnceLock;\n ///\n /// static CELL: OnceLock<String> = OnceLock::new();\n@@ -32,16 +30,14 @@ use crate::sync::Once;\n /// assert!(value.is_some());\n /// assert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n /// ```\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n pub struct OnceLock<T> {\n     once: Once,\n     // Whether or not the value is initialized is tracked by `once.is_completed()`.\n     value: UnsafeCell<MaybeUninit<T>>,\n     /// `PhantomData` to make sure dropck understands we're dropping T in our Drop impl.\n     ///\n     /// ```compile_fail,E0597\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// struct A<'a>(&'a str);\n@@ -63,7 +59,8 @@ impl<T> OnceLock<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn new() -> OnceLock<T> {\n         OnceLock {\n             once: Once::new(),\n@@ -77,7 +74,7 @@ impl<T> OnceLock<T> {\n     /// Returns `None` if the cell is empty, or being initialized. This\n     /// method never blocks.\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get(&self) -> Option<&T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized\n@@ -91,7 +88,7 @@ impl<T> OnceLock<T> {\n     ///\n     /// Returns `None` if the cell is empty. This method never blocks.\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized and we have a unique access\n@@ -111,8 +108,6 @@ impl<T> OnceLock<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// static CELL: OnceLock<i32> = OnceLock::new();\n@@ -129,7 +124,7 @@ impl<T> OnceLock<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         let mut value = Some(value);\n         self.get_or_init(|| value.take().unwrap());\n@@ -158,8 +153,6 @@ impl<T> OnceLock<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// let cell = OnceLock::new();\n@@ -169,7 +162,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -195,7 +188,7 @@ impl<T> OnceLock<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n+    /// #![feature(once_cell_try)]\n     ///\n     /// use std::sync::OnceLock;\n     ///\n@@ -209,7 +202,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.get(), Some(&92))\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[unstable(feature = \"once_cell_try\", issue = \"109737\")]\n     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n     where\n         F: FnOnce() -> Result<T, E>,\n@@ -236,8 +229,6 @@ impl<T> OnceLock<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// let cell: OnceLock<String> = OnceLock::new();\n@@ -248,7 +239,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(mut self) -> Option<T> {\n         self.take()\n     }\n@@ -262,8 +253,6 @@ impl<T> OnceLock<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// let mut cell: OnceLock<String> = OnceLock::new();\n@@ -275,7 +264,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn take(&mut self) -> Option<T> {\n         if self.is_initialized() {\n             self.once = Once::new();\n@@ -344,26 +333,24 @@ impl<T> OnceLock<T> {\n // scoped thread B, which fills the cell, which is\n // then destroyed by A. That is, destructor observes\n // a sent value.\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n unsafe impl<T: Sync + Send> Sync for OnceLock<T> {}\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n unsafe impl<T: Send> Send for OnceLock<T> {}\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for OnceLock<T> {}\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: UnwindSafe> UnwindSafe for OnceLock<T> {}\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n impl<T> const Default for OnceLock<T> {\n     /// Creates a new empty cell.\n     ///\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// fn main() {\n@@ -376,7 +363,7 @@ impl<T> const Default for OnceLock<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -386,7 +373,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: Clone> Clone for OnceLock<T> {\n     #[inline]\n     fn clone(&self) -> OnceLock<T> {\n@@ -401,15 +388,13 @@ impl<T: Clone> Clone for OnceLock<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> From<T> for OnceLock<T> {\n     /// Create a new cell with its contents set to `value`.\n     ///\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(once_cell)]\n-    ///\n     /// use std::sync::OnceLock;\n     ///\n     /// # fn main() -> Result<(), i32> {\n@@ -430,18 +415,18 @@ impl<T> From<T> for OnceLock<T> {\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: PartialEq> PartialEq for OnceLock<T> {\n     #[inline]\n     fn eq(&self, other: &OnceLock<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T: Eq> Eq for OnceLock<T> {}\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n unsafe impl<#[may_dangle] T> Drop for OnceLock<T> {\n     #[inline]\n     fn drop(&mut self) {"}, {"sha": "4c4dbc9864fd99c1f80643c1c70914b20ee1ec54", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -11,7 +11,7 @@\n #![feature(let_chains)]\n #![feature(test)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "8871873c6612f5e27ce1100b7dc6a17b182775ad", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,4 @@\n #![feature(let_chains)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "3da7f95c1b9fe3c98103a64198a95d075e5a86b6", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -7,7 +7,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"512\"]"}, {"sha": "619aa9f4bf6fab48be3119b28ff5a269b74cab53", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -3,7 +3,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]"}, {"sha": "9e0822404b6b8ed227c628d75609ee48418a825e", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_private)]\n #![feature(let_chains)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(lint_reasons)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "57890ff31737b5a95256b48f448a60774f0f3bc3", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,5 @@\n #![feature(test)] // compiletest_rs requires this attribute\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(is_sorted)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]"}, {"sha": "68a878e9a3d310058cc9fd8f473b470ed09eca6c", "filename": "src/tools/clippy/tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -3,7 +3,7 @@\n //!\n //! See [Eating your own dog food](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) for context\n \n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n "}, {"sha": "8feea800fdbe30b7d52d2173c9dcf6c9614b3ea7", "filename": "src/tools/clippy/tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n "}, {"sha": "c9cbc50546cf3949aa0cb82ae9fd57f9fd020ac8", "filename": "src/tools/clippy/tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n \n use std::path::PathBuf;\n use std::process::Command;"}, {"sha": "88e8a498ae995f5e0c5ddfd4366e2dd07cefc51a", "filename": "tests/run-make/libtest-thread-limit/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-thread-limit%2Ftest.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(once_cell)]\n-\n use std::{\n     io::ErrorKind,\n     sync::OnceLock,"}, {"sha": "0b423b340226d8258819b2ea82233254c554aebb", "filename": "tests/ui/rfc-2632-const-trait-impl/nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(const_trait_impl, once_cell)]\n+#![feature(const_trait_impl, lazy_cell)]\n \n use std::sync::LazyLock;\n "}, {"sha": "14f40ad87a3abebac6a9397f87a114b6c1130ddc", "filename": "tests/ui/sync/suggest-once-cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-once-cell.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(once_cell)]\n-\n fn require_sync<T: Sync>() {}\n //~^ NOTE required by this bound in `require_sync`\n //~| NOTE required by a bound in `require_sync`"}, {"sha": "20242f4b61c718727eae10cb7eb03b0fa95178ca", "filename": "tests/ui/sync/suggest-once-cell.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-once-cell.stderr?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `OnceCell<()>` cannot be shared between threads safely\n-  --> $DIR/suggest-once-cell.rs:8:20\n+  --> $DIR/suggest-once-cell.rs:6:20\n    |\n LL |     require_sync::<std::cell::OnceCell<()>>();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ `OnceCell<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `OnceCell<()>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::OnceLock` instead\n note: required by a bound in `require_sync`\n-  --> $DIR/suggest-once-cell.rs:3:20\n+  --> $DIR/suggest-once-cell.rs:1:20\n    |\n LL | fn require_sync<T: Sync>() {}\n    |                    ^^^^ required by this bound in `require_sync`"}, {"sha": "093a4999c6501e89401498967d53f9f95dc9c6e2", "filename": "tests/ui/sync/suggest-ref-cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-ref-cell.rs?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(once_cell)]\n-\n fn require_sync<T: Sync>() {}\n //~^ NOTE required by this bound in `require_sync`\n //~| NOTE required by a bound in `require_sync`"}, {"sha": "ca3ae77b1a052f5abe1f0553b4a2847846b9632a", "filename": "tests/ui/sync/suggest-ref-cell.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a7ca936e61d04399198911ee2b07ac110bf17b0/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsync%2Fsuggest-ref-cell.stderr?ref=8a7ca936e61d04399198911ee2b07ac110bf17b0", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `RefCell<()>` cannot be shared between threads safely\n-  --> $DIR/suggest-ref-cell.rs:8:20\n+  --> $DIR/suggest-ref-cell.rs:6:20\n    |\n LL |     require_sync::<std::cell::RefCell<()>>();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ `RefCell<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<()>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: required by a bound in `require_sync`\n-  --> $DIR/suggest-ref-cell.rs:3:20\n+  --> $DIR/suggest-ref-cell.rs:1:20\n    |\n LL | fn require_sync<T: Sync>() {}\n    |                    ^^^^ required by this bound in `require_sync`"}]}