{"sha": "92885e3a5bc855c24e302154635107c848f8b585", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODg1ZTNhNWJjODU1YzI0ZTMwMjE1NDYzNTEwN2M4NDhmOGI1ODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T21:39:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T07:38:32Z"}, "message": "rustc_typeck: remove rustc_hir_pretty usage", "tree": {"sha": "338280bf7458ee8ea47b97e0708586658c27b5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338280bf7458ee8ea47b97e0708586658c27b5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92885e3a5bc855c24e302154635107c848f8b585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92885e3a5bc855c24e302154635107c848f8b585", "html_url": "https://github.com/rust-lang/rust/commit/92885e3a5bc855c24e302154635107c848f8b585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92885e3a5bc855c24e302154635107c848f8b585/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3866a5c9315d2f882ab9f306df82c5fa66989bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3866a5c9315d2f882ab9f306df82c5fa66989bf", "html_url": "https://github.com/rust-lang/rust/commit/b3866a5c9315d2f882ab9f306df82c5fa66989bf"}], "stats": {"total": 109, "additions": 53, "deletions": 56}, "files": [{"sha": "549b82e40b2d060852e0fa6df2afa60bc6bed719", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -4229,7 +4229,6 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n- \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_session\","}, {"sha": "e61a36f844f87bc3bc660a077d963a877bc18df7", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -18,7 +18,6 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "432e7545b9ee638b2e53ac084b7b167986957540", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -20,9 +20,8 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, Fata\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::{walk_generics, Visitor};\n+use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{Constness, GenericArg, GenericArgs};\n-use rustc_hir_pretty::{to_string, NO_ANN};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -1118,6 +1117,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if !self.tcx().features().unboxed_closures\n             && trait_segment.generic_args().parenthesized != trait_def.paren_sugar\n         {\n+            let sess = &self.tcx().sess.parse_sess;\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n             let (msg, sugg) = if trait_def.paren_sugar {\n                 (\n@@ -1132,7 +1132,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .and_then(|args| args.args.get(0))\n                             .and_then(|arg| match arg {\n                                 hir::GenericArg::Type(ty) => {\n-                                    Some(to_string(NO_ANN, |s| s.print_type(ty)))\n+                                    sess.source_map().span_to_snippet(ty.span).ok()\n                                 }\n                                 _ => None,\n                             })\n@@ -1143,7 +1143,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .iter()\n                             .filter_map(|b| match (b.ident.as_str() == \"Output\", &b.kind) {\n                                 (true, hir::TypeBindingKind::Equality { ty }) => {\n-                                    Some(to_string(NO_ANN, |s| s.print_type(ty)))\n+                                    sess.source_map().span_to_snippet(ty.span).ok()\n                                 }\n                                 _ => None,\n                             })\n@@ -1154,7 +1154,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } else {\n                 (\"parenthetical notation is only stable when used with `Fn`-family traits\", None)\n             };\n-            let sess = &self.tcx().sess.parse_sess;\n             let mut err = feature_err(sess, sym::unboxed_closures, span, msg);\n             if let Some(sugg) = sugg {\n                 let msg = \"use parenthetical notation instead\";"}, {"sha": "f7ffb5a2218baa75d36c2fe533b0c1f14e3c8ee0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -10,7 +10,6 @@ use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Node};\n-use rustc_hir_pretty::{to_string, NO_ANN};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -199,15 +198,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .peekable();\n \n             if compatible_variants.peek().is_some() {\n-                let expr_text = self\n-                    .tcx\n-                    .sess\n-                    .source_map()\n-                    .span_to_snippet(expr.span)\n-                    .unwrap_or_else(|_| to_string(NO_ANN, |s| s.print_expr(expr)));\n-                let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n-                let msg = \"try using a variant of the expected enum\";\n-                err.span_suggestions(expr.span, msg, suggestions, Applicability::MaybeIncorrect);\n+                if let Ok(expr_text) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n+                    let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n+                    let msg = \"try using a variant of the expected enum\";\n+                    err.span_suggestions(\n+                        expr.span,\n+                        msg,\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "ae4750f9fd0fa48a9db05844fdfb54ece57f5a90", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -475,7 +475,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.types.err\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, expr.span, qpath);\n+                report_unexpected_variant_res(tcx, res, expr.span);\n                 tcx.types.err\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,"}, {"sha": "754cd7b160acbffe38928c91265cba40853e25cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -2656,14 +2656,14 @@ pub fn check_enum<'tcx>(\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath<'_>) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n     struct_span_err!(\n         tcx.sess,\n         span,\n         E0533,\n-        \"expected unit struct, unit variant or constant, found {} `{}`\",\n+        \"expected unit struct, unit variant or constant, found {}{}\",\n         res.descr(),\n-        rustc_hir_pretty::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false))\n+        tcx.sess.source_map().span_to_snippet(span).map_or(String::new(), |s| format!(\" `{}`\", s)),\n     )\n     .emit();\n }"}, {"sha": "17a6e0544a162f8ab7bc8fbf6cf3b2a945a483fc", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -171,9 +171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::TupleStruct(ref qpath, subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n-            PatKind::Path(ref qpath) => {\n-                self.check_pat_path(pat, path_res.unwrap(), qpath, expected, ti)\n-            }\n+            PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n             PatKind::Struct(ref qpath, fields, etc) => {\n                 self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, ti)\n             }\n@@ -694,7 +692,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &Pat<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n-        qpath: &hir::QPath<'_>,\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n@@ -707,17 +704,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssocFn, _)\n-            | Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _)\n-            | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, pat.span, qpath);\n+            Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n+                report_unexpected_variant_res(tcx, res, pat.span);\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n-            | Res::SelfCtor(..)\n-            | Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::ConstParam, _) => {} // OK\n+            Res::SelfCtor(..)\n+            | Res::Def(\n+                DefKind::Ctor(_, CtorKind::Const)\n+                | DefKind::Const\n+                | DefKind::AssocConst\n+                | DefKind::ConstParam,\n+                _,\n+            ) => {} // OK\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n         }\n \n@@ -791,14 +789,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n+            let sm = tcx.sess.source_map();\n+            let path_str = sm\n+                .span_to_snippet(sm.span_until_char(pat.span, '('))\n+                .map_or(String::new(), |s| format!(\" `{}`\", s.trim_end()));\n             let msg = format!(\n-                \"expected tuple struct or tuple variant, found {} `{}`\",\n+                \"expected tuple struct or tuple variant, found {}{}\",\n                 res.descr(),\n-                rustc_hir_pretty::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false)),\n+                path_str\n             );\n+\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n-            match (res, &pat.kind) {\n-                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::AssocFn, _), _) => {\n+            match res {\n+                Res::Def(DefKind::Fn | DefKind::AssocFn, _) => {\n                     err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n                     err.help(\n                         \"for more information, visit \\"}, {"sha": "9d8113e7b3fff4942f9665b69bf825e8d772ba5c", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -5,7 +5,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir_pretty::visibility_qualified;\n use rustc_session::lint;\n use rustc_span::Span;\n \n@@ -176,16 +175,13 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n                 Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n                 None => format!(\"use {};\", item.ident.name),\n             };\n-\n-            let replacement = visibility_qualified(&item.vis, base_replacement);\n-            let msg = \"`extern crate` is not idiomatic in the new edition\";\n-            let help = format!(\"convert it to a `{}`\", visibility_qualified(&item.vis, \"use\"));\n-\n-            lint.build(msg)\n+            let vis = tcx.sess.source_map().span_to_snippet(item.vis.span).unwrap_or_default();\n+            let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n+            lint.build(\"`extern crate` is not idiomatic in the new edition\")\n                 .span_suggestion_short(\n                     extern_crate.span,\n-                    &help,\n-                    replacement,\n+                    &format!(\"convert it to a `{}`\", add_vis(\"use\".to_string())),\n+                    add_vis(base_replacement),\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();"}, {"sha": "fd854c750184ea2907a99b0139a05ff7d3f1d24a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -62,6 +62,7 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![feature(slice_partition_dedup)]"}, {"sha": "ed3c0222c7542bdd71fbc961774c7e065df9550c", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -4,13 +4,13 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n@@ -22,7 +22,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}"}, {"sha": "b1482bc040f5332b2bc273af26be316fa9f1303b", "filename": "src/test/ui/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -21,9 +21,9 @@ mod priv_trait {\n         Pub.method();\n         //~^ ERROR type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is private\n         <Pub as PrivTr>::CONST;\n-        //~^ ERROR associated constant `PrivTr::CONST` is private\n+        //~^ ERROR associated constant `<Pub as PrivTr>::CONST` is private\n         let _: <Pub as PrivTr>::AssocTy;\n-        //~^ ERROR associated type `PrivTr::AssocTy` is private\n+        //~^ ERROR associated type `<Pub as PrivTr>::AssocTy` is private\n         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         pub trait InSignatureTr: PrivTr {}\n@@ -115,7 +115,7 @@ mod priv_parent_substs {\n         <Priv as PubTr<_>>::CONST;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n \n-        let _: <Pub as PubTr>::AssocTy;  // FIXME no longer an error?!\n+        let _: <Pub as PubTr>::AssocTy; // FIXME no longer an error?!\n         let _: <Pub as PubTr<_>>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n         let _: <Priv as PubTr<_>>::AssocTy;"}, {"sha": "b9f3e35d72261813e846413f40ab73bc4985b6e2", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -31,7 +31,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: associated constant `PrivTr::CONST` is private\n+error: associated constant `<Pub as PrivTr>::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:9\n    |\n LL |         <Pub as PrivTr>::CONST;\n@@ -42,7 +42,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: associated type `PrivTr::AssocTy` is private\n+error: associated type `<Pub as PrivTr>::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;"}, {"sha": "4214e2503c345cad36a3a4e12df95e88e21fcbd5", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92885e3a5bc855c24e302154635107c848f8b585/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=92885e3a5bc855c24e302154635107c848f8b585", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<<S as Tr>::A>::f<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<S as Tr>::A::f::<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}]}