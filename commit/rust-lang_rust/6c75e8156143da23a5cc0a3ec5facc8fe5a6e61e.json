{"sha": "6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNzVlODE1NjE0M2RhMjNhNWNjMGEzZWM1ZmFjYzhmZTVhNmU2MWU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-10-15T06:12:55Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-10-15T06:19:43Z"}, "message": "Refactor: Rename `db` locals to `diag`\n\nhttps://github.com/rust-lang/rust/pull/64272 replaced\n`DiagnosticBuilder` with `Diagnostic` in some places. This commit just\nrenames the DB variable from `db` to `diag` where it wasn't renamed.", "tree": {"sha": "25c518c3ef44f27566b68bda0d37a2f451b8f190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c518c3ef44f27566b68bda0d37a2f451b8f190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAl2lZUAQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5nQdD/92IBIOPXScaRIm4RvWm8wXfFHGm0QmIinV\nnSl31OgMBiDuob0ztG5bebnAeRApcSNsLkVZ+fWasDPPrR+feJqWifWADUNUf2JT\nJApfZ1gji150Pj/2+7rxmpKxWejKJRQ3KATT3jgGNwwzb+W2o9vUF3DojwbmFq2E\nVKR8njwAD0IpsTbiBe/eRpZfufoINQ8uaQSQdZBt3RgFbtY6lxNe2IUm4lZvNZM/\nwwwclqQUVXUEhEsS/L4LM3fSQfHjAK9yJruGGtjB+uc2LUaSqgrw5kAlHfZDzB6i\nHWUODDOkXR1KIGDh9laBt3F5ahPWcQP/Tm+J5S3vWmDXuS63Mugr7/aVSEUiHTqP\n+z+kj4DrrH+JtX6KYo5YANELbzRovNBkf9adtiR5Usa62BzNzuTL82psyQl8tJ52\nbKk41Gf6esFopftw0Qq3w+z5B045vln0tWM3pZnare1bA782X+yktqnXHRoR4rsP\nEBOnYA3kxOi5R+xDB0mWiP40jyPFo7fqapD438Rmnt7U80jMOHqEosQsSs2Q0DEB\ntFc5uEUhIvlCmn5QV014LQdScfpMQlSM20ANMNEBWFKHUbpKY/V4R758pLO/cp67\ncSTM6VxJ0lmMPtas69shgBH85tVcziCR3gOWJpUCMQxgqdpZR11oeAnDnm+J5zUN\nutcmBjoaeA==\n=F5BJ\n-----END PGP SIGNATURE-----", "payload": "tree 25c518c3ef44f27566b68bda0d37a2f451b8f190\nparent e369d87b015a84653343032833d65d0545fd3f26\nauthor Philipp Hansch <dev@phansch.net> 1571119975 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1571120383 +0200\n\nRefactor: Rename `db` locals to `diag`\n\nhttps://github.com/rust-lang/rust/pull/64272 replaced\n`DiagnosticBuilder` with `Diagnostic` in some places. This commit just\nrenames the DB variable from `db` to `diag` where it wasn't renamed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "html_url": "https://github.com/rust-lang/rust/commit/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e369d87b015a84653343032833d65d0545fd3f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e369d87b015a84653343032833d65d0545fd3f26", "html_url": "https://github.com/rust-lang/rust/commit/e369d87b015a84653343032833d65d0545fd3f26"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "5339134a2a84970633c883fbb02b5c7e338b7f76", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "patch": "@@ -1667,13 +1667,13 @@ impl SharedEmitter {\n }\n \n impl Emitter for SharedEmitter {\n-    fn emit_diagnostic(&mut self, db: &rustc_errors::Diagnostic) {\n+    fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-            msg: db.message(),\n-            code: db.code.clone(),\n-            lvl: db.level,\n+            msg: diag.message(),\n+            code: diag.code.clone(),\n+            lvl: diag.level,\n         })));\n-        for child in &db.children {\n+        for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n                 msg: child.message(),\n                 code: None,"}, {"sha": "491bc2aa6a2eb7034669b33c4ae7cbba214164e5", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "patch": "@@ -31,19 +31,19 @@ pub struct AnnotateSnippetEmitterWriter {\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n-    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n-        let mut children = db.children.clone();\n-        let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n+    fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n+        let mut children = diag.children.clone();\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n         self.fix_multispans_in_std_macros(&self.source_map,\n                                           &mut primary_span,\n                                           &mut children,\n-                                          &db.level,\n+                                          &diag.level,\n                                           self.external_macro_backtrace);\n \n-        self.emit_messages_default(&db.level,\n-                                   db.message(),\n-                                   &db.code,\n+        self.emit_messages_default(&diag.level,\n+                                   diag.message(),\n+                                   &diag.code,\n                                    &primary_span,\n                                    &children,\n                                    &suggestions);"}, {"sha": "1e486786f6861a90dff68ed0b2b7e0a11dfb7e05", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "patch": "@@ -180,7 +180,7 @@ const ANONYMIZED_LINE_NUM: &str = \"LL\";\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit_diagnostic(&mut self, db: &Diagnostic);\n+    fn emit_diagnostic(&mut self, diag: &Diagnostic);\n \n     /// Emit a notification that an artifact has been output.\n     /// This is currently only supported for the JSON format,\n@@ -206,10 +206,10 @@ pub trait Emitter {\n     ///   we return the original `primary_span` and the original suggestions.\n     fn primary_span_formatted<'a>(\n         &mut self,\n-        db: &'a Diagnostic,\n+        diag: &'a Diagnostic,\n     ) -> (MultiSpan, &'a [CodeSuggestion]) {\n-        let mut primary_span = db.span.clone();\n-        if let Some((sugg, rest)) = db.suggestions.split_first() {\n+        let mut primary_span = diag.span.clone();\n+        if let Some((sugg, rest)) = diag.suggestions.split_first() {\n             if rest.is_empty() &&\n                // ^ if there is only one suggestion\n                // don't display multi-suggestions as labels\n@@ -260,10 +260,10 @@ pub trait Emitter {\n                 // to be consistent. We could try to figure out if we can\n                 // make one (or the first one) inline, but that would give\n                 // undue importance to a semi-random suggestion\n-                (primary_span, &db.suggestions)\n+                (primary_span, &diag.suggestions)\n             }\n         } else {\n-            (primary_span, &db.suggestions)\n+            (primary_span, &diag.suggestions)\n         }\n     }\n \n@@ -401,19 +401,19 @@ impl Emitter for EmitterWriter {\n         self.sm.as_ref()\n     }\n \n-    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n-        let mut children = db.children.clone();\n-        let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n+    fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n+        let mut children = diag.children.clone();\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n         self.fix_multispans_in_std_macros(&self.sm,\n                                           &mut primary_span,\n                                           &mut children,\n-                                          &db.level,\n+                                          &diag.level,\n                                           self.external_macro_backtrace);\n \n-        self.emit_messages_default(&db.level,\n-                                   &db.styled_message(),\n-                                   &db.code,\n+        self.emit_messages_default(&diag.level,\n+                                   &diag.styled_message(),\n+                                   &diag.code,\n                                    &primary_span,\n                                    &children,\n                                    &suggestions);"}, {"sha": "e3296788d9fa78530ab1dd528a9e55e63076b417", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=6c75e8156143da23a5cc0a3ec5facc8fe5a6e61e", "patch": "@@ -89,8 +89,8 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_diagnostic(&mut self, db: &errors::Diagnostic) {\n-        let data = Diagnostic::from_errors_diagnostic(db, self);\n+    fn emit_diagnostic(&mut self, diag: &errors::Diagnostic) {\n+        let data = Diagnostic::from_errors_diagnostic(diag, self);\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n@@ -209,10 +209,10 @@ struct ArtifactNotification<'a> {\n }\n \n impl Diagnostic {\n-    fn from_errors_diagnostic(db: &errors::Diagnostic,\n+    fn from_errors_diagnostic(diag: &errors::Diagnostic,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n-        let sugg = db.suggestions.iter().map(|sugg| {\n+        let sugg = diag.suggestions.iter().map(|sugg| {\n             Diagnostic {\n                 message: sugg.msg.clone(),\n                 code: None,\n@@ -241,30 +241,30 @@ impl Diagnostic {\n         let output = buf.clone();\n         je.json_rendered.new_emitter(\n             Box::new(buf), Some(je.sm.clone()), false, None, je.external_macro_backtrace\n-        ).ui_testing(je.ui_testing).emit_diagnostic(db);\n+        ).ui_testing(je.ui_testing).emit_diagnostic(diag);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n \n         Diagnostic {\n-            message: db.message(),\n-            code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n-            level: db.level.to_str(),\n-            spans: DiagnosticSpan::from_multispan(&db.span, je),\n-            children: db.children.iter().map(|c| {\n+            message: diag.message(),\n+            code: DiagnosticCode::map_opt_string(diag.code.clone(), je),\n+            level: diag.level.to_str(),\n+            spans: DiagnosticSpan::from_multispan(&diag.span, je),\n+            children: diag.children.iter().map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n             }).chain(sugg).collect(),\n             rendered: Some(output),\n         }\n     }\n \n-    fn from_sub_diagnostic(db: &SubDiagnostic, je: &JsonEmitter) -> Diagnostic {\n+    fn from_sub_diagnostic(diag: &SubDiagnostic, je: &JsonEmitter) -> Diagnostic {\n         Diagnostic {\n-            message: db.message(),\n+            message: diag.message(),\n             code: None,\n-            level: db.level.to_str(),\n-            spans: db.render_span.as_ref()\n+            level: diag.level.to_str(),\n+            spans: diag.render_span.as_ref()\n                      .map(|sp| DiagnosticSpan::from_multispan(sp, je))\n-                     .unwrap_or_else(|| DiagnosticSpan::from_multispan(&db.span, je)),\n+                     .unwrap_or_else(|| DiagnosticSpan::from_multispan(&diag.span, je)),\n             children: vec![],\n             rendered: None,\n         }"}]}