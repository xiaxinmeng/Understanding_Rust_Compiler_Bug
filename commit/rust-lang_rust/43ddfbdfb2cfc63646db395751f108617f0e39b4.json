{"sha": "43ddfbdfb2cfc63646db395751f108617f0e39b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZGRmYmRmYjJjZmM2MzY0NmRiMzk1NzUxZjEwODYxN2YwZTM5YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-23T17:21:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-23T17:21:18Z"}, "message": "Auto merge of #31751 - gkoz:os_str_path_cmp, r=aturon", "tree": {"sha": "8eb98d6508f71375dbe0afa17b62c5498fc9342a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb98d6508f71375dbe0afa17b62c5498fc9342a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ddfbdfb2cfc63646db395751f108617f0e39b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ddfbdfb2cfc63646db395751f108617f0e39b4", "html_url": "https://github.com/rust-lang/rust/commit/43ddfbdfb2cfc63646db395751f108617f0e39b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ddfbdfb2cfc63646db395751f108617f0e39b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de3cace0a213f4fd4d843f59638c8be71354335", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de3cace0a213f4fd4d843f59638c8be71354335", "html_url": "https://github.com/rust-lang/rust/commit/0de3cace0a213f4fd4d843f59638c8be71354335"}, {"sha": "409bffa6545ffb760403a82f5fb27678ad2a0aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/409bffa6545ffb760403a82f5fb27678ad2a0aca", "html_url": "https://github.com/rust-lang/rust/commit/409bffa6545ffb760403a82f5fb27678ad2a0aca"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "cf4f4bdf291bca273af64c878588d0c87e0ec973", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/43ddfbdfb2cfc63646db395751f108617f0e39b4/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ddfbdfb2cfc63646db395751f108617f0e39b4/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=43ddfbdfb2cfc63646db395751f108617f0e39b4", "patch": "@@ -411,6 +411,44 @@ impl Ord for OsStr {\n     fn cmp(&self, other: &OsStr) -> cmp::Ordering { self.bytes().cmp(other.bytes()) }\n }\n \n+macro_rules! impl_cmp {\n+    ($lhs:ty, $rhs: ty) => {\n+        #[stable(feature = \"cmp_os_str\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+            #[inline]\n+            fn eq(&self, other: &$rhs) -> bool { <OsStr as PartialEq>::eq(self, other) }\n+        }\n+\n+        #[stable(feature = \"cmp_os_str\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+            #[inline]\n+            fn eq(&self, other: &$lhs) -> bool { <OsStr as PartialEq>::eq(self, other) }\n+        }\n+\n+        #[stable(feature = \"cmp_os_str\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n+                <OsStr as PartialOrd>::partial_cmp(self, other)\n+            }\n+        }\n+\n+        #[stable(feature = \"cmp_os_str\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n+                <OsStr as PartialOrd>::partial_cmp(self, other)\n+            }\n+        }\n+    }\n+}\n+\n+impl_cmp!(OsString, OsStr);\n+impl_cmp!(OsString, &'a OsStr);\n+impl_cmp!(Cow<'a, OsStr>, OsStr);\n+impl_cmp!(Cow<'a, OsStr>, &'b OsStr);\n+impl_cmp!(Cow<'a, OsStr>, OsString);\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Hash for OsStr {\n     #[inline]"}, {"sha": "937a7a8cae94fa9982b92668f44791c41bce35cc", "filename": "src/libstd/path.rs", "status": "modified", "additions": 75, "deletions": 6, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/43ddfbdfb2cfc63646db395751f108617f0e39b4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ddfbdfb2cfc63646db395751f108617f0e39b4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=43ddfbdfb2cfc63646db395751f108617f0e39b4", "patch": "@@ -2004,6 +2004,13 @@ impl AsRef<Path> for OsStr {\n     }\n }\n \n+#[stable(feature = \"cow_os_str_as_ref_path\", since = \"1.8.0\")]\n+impl<'a> AsRef<Path> for Cow<'a, OsStr> {\n+    fn as_ref(&self) -> &Path {\n+        Path::new(self)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<Path> for OsString {\n     fn as_ref(&self) -> &Path {\n@@ -2046,7 +2053,7 @@ impl<'a> IntoIterator for &'a Path {\n     fn into_iter(self) -> Iter<'a> { self.iter() }\n }\n \n-macro_rules! impl_eq {\n+macro_rules! impl_cmp {\n     ($lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n         impl<'a, 'b> PartialEq<$rhs> for $lhs {\n@@ -2060,14 +2067,76 @@ macro_rules! impl_eq {\n             fn eq(&self, other: &$lhs) -> bool { <Path as PartialEq>::eq(self, other) }\n         }\n \n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n+                <Path as PartialOrd>::partial_cmp(self, other)\n+            }\n+        }\n+\n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n+                <Path as PartialOrd>::partial_cmp(self, other)\n+            }\n+        }\n+    }\n+}\n+\n+impl_cmp!(PathBuf, Path);\n+impl_cmp!(PathBuf, &'a Path);\n+impl_cmp!(Cow<'a, Path>, Path);\n+impl_cmp!(Cow<'a, Path>, &'b Path);\n+impl_cmp!(Cow<'a, Path>, PathBuf);\n+\n+macro_rules! impl_cmp_os_str {\n+    ($lhs:ty, $rhs: ty) => {\n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+            #[inline]\n+            fn eq(&self, other: &$rhs) -> bool { <Path as PartialEq>::eq(self, other.as_ref()) }\n+        }\n+\n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+            #[inline]\n+            fn eq(&self, other: &$lhs) -> bool { <Path as PartialEq>::eq(self.as_ref(), other) }\n+        }\n+\n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n+                <Path as PartialOrd>::partial_cmp(self, other.as_ref())\n+            }\n+        }\n+\n+        #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n+        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+            #[inline]\n+            fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n+                <Path as PartialOrd>::partial_cmp(self.as_ref(), other)\n+            }\n+        }\n     }\n }\n \n-impl_eq!(PathBuf, Path);\n-impl_eq!(PathBuf, &'a Path);\n-impl_eq!(Cow<'a, Path>, Path);\n-impl_eq!(Cow<'a, Path>, &'b Path);\n-impl_eq!(Cow<'a, Path>, PathBuf);\n+impl_cmp_os_str!(PathBuf, OsStr);\n+impl_cmp_os_str!(PathBuf, &'a OsStr);\n+impl_cmp_os_str!(PathBuf, Cow<'a, OsStr>);\n+impl_cmp_os_str!(PathBuf, OsString);\n+impl_cmp_os_str!(Path, OsStr);\n+impl_cmp_os_str!(Path, &'a OsStr);\n+impl_cmp_os_str!(Path, Cow<'a, OsStr>);\n+impl_cmp_os_str!(Path, OsString);\n+impl_cmp_os_str!(&'a Path, OsStr);\n+impl_cmp_os_str!(&'a Path, Cow<'b, OsStr>);\n+impl_cmp_os_str!(&'a Path, OsString);\n+impl_cmp_os_str!(Cow<'a, Path>, OsStr);\n+impl_cmp_os_str!(Cow<'a, Path>, &'b OsStr);\n+impl_cmp_os_str!(Cow<'a, Path>, OsString);\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl fmt::Display for StripPrefixError {"}]}