{"sha": "18ca312984b331b87b1a205b3cb954b16912ed82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Y2EzMTI5ODRiMzMxYjg3YjFhMjA1YjNjYjk1NGIxNjkxMmVkODI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-11-28T22:50:21Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-11-29T19:19:18Z"}, "message": "Remove @ from json::Error", "tree": {"sha": "66f15d8a60eb8a645a450a647a30fd1a4c2d70df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f15d8a60eb8a645a450a647a30fd1a4c2d70df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ca312984b331b87b1a205b3cb954b16912ed82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ca312984b331b87b1a205b3cb954b16912ed82", "html_url": "https://github.com/rust-lang/rust/commit/18ca312984b331b87b1a205b3cb954b16912ed82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ca312984b331b87b1a205b3cb954b16912ed82/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631cbd2e11eda1937cefcd7d8ba7831cadec21cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/631cbd2e11eda1937cefcd7d8ba7831cadec21cf", "html_url": "https://github.com/rust-lang/rust/commit/631cbd2e11eda1937cefcd7d8ba7831cadec21cf"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "866f8203c482eb3a77d51aee9da581582da7bfac", "filename": "src/libextra/json.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/18ca312984b331b87b1a205b3cb954b16912ed82/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca312984b331b87b1a205b3cb954b16912ed82/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=18ca312984b331b87b1a205b3cb954b16912ed82", "patch": "@@ -54,7 +54,7 @@ pub struct Error {\n     /// The column number at which the error occurred\n     priv col: uint,\n     /// A message describing the type of the error\n-    priv msg: @~str,\n+    priv msg: ~str,\n }\n \n fn escape_str(s: &str) -> ~str {\n@@ -525,7 +525,7 @@ impl<T : Iterator<char>> Parser<T> {\n     }\n \n     fn error<T>(&self, msg: ~str) -> Result<T, Error> {\n-        Err(Error { line: self.line, col: self.col, msg: @msg })\n+        Err(Error { line: self.line, col: self.col, msg: msg })\n     }\n \n     fn parse_value(&mut self) -> Result<Json, Error> {\n@@ -1327,7 +1327,7 @@ impl to_str::ToStr for Json {\n \n impl to_str::ToStr for Error {\n     fn to_str(&self) -> ~str {\n-        format!(\"{}:{}: {}\", self.line, self.col, *self.msg)\n+        format!(\"{}:{}: {}\", self.line, self.col, self.msg)\n     }\n }\n \n@@ -1593,35 +1593,35 @@ mod tests {\n     #[test]\n     fn test_trailing_characters() {\n         assert_eq!(from_str(\"nulla\"),\n-            Err(Error {line: 1u, col: 5u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 5u, msg: ~\"trailing characters\"}));\n         assert_eq!(from_str(\"truea\"),\n-            Err(Error {line: 1u, col: 5u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 5u, msg: ~\"trailing characters\"}));\n         assert_eq!(from_str(\"falsea\"),\n-            Err(Error {line: 1u, col: 6u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 6u, msg: ~\"trailing characters\"}));\n         assert_eq!(from_str(\"1a\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"trailing characters\"}));\n         assert_eq!(from_str(\"[]a\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"trailing characters\"}));\n         assert_eq!(from_str(\"{}a\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"trailing characters\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"trailing characters\"}));\n     }\n \n     #[test]\n     fn test_read_identifiers() {\n         assert_eq!(from_str(\"n\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"invalid syntax\"}));\n         assert_eq!(from_str(\"nul\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"invalid syntax\"}));\n \n         assert_eq!(from_str(\"t\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"invalid syntax\"}));\n         assert_eq!(from_str(\"truz\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"invalid syntax\"}));\n \n         assert_eq!(from_str(\"f\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"invalid syntax\"}));\n         assert_eq!(from_str(\"faz\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"invalid syntax\"}));\n \n         assert_eq!(from_str(\"null\"), Ok(Null));\n         assert_eq!(from_str(\"true\"), Ok(Boolean(true)));\n@@ -1649,20 +1649,20 @@ mod tests {\n     #[test]\n     fn test_read_number() {\n         assert_eq!(from_str(\"+\"),\n-            Err(Error {line: 1u, col: 1u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 1u, msg: ~\"invalid syntax\"}));\n         assert_eq!(from_str(\".\"),\n-            Err(Error {line: 1u, col: 1u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 1u, msg: ~\"invalid syntax\"}));\n \n         assert_eq!(from_str(\"-\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"invalid number\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"invalid number\"}));\n         assert_eq!(from_str(\"00\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"invalid number\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"invalid number\"}));\n         assert_eq!(from_str(\"1.\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"invalid number\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"invalid number\"}));\n         assert_eq!(from_str(\"1e\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"invalid number\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"invalid number\"}));\n         assert_eq!(from_str(\"1e+\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"invalid number\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"invalid number\"}));\n \n         assert_eq!(from_str(\"3\"), Ok(Number(3.0)));\n         assert_eq!(from_str(\"3.1\"), Ok(Number(3.1)));\n@@ -1708,10 +1708,10 @@ mod tests {\n     #[test]\n     fn test_read_str() {\n         assert_eq!(from_str(\"\\\"\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"EOF while parsing string\"\n+            Err(Error {line: 1u, col: 2u, msg: ~\"EOF while parsing string\"\n         }));\n         assert_eq!(from_str(\"\\\"lol\"),\n-            Err(Error {line: 1u, col: 5u, msg: @~\"EOF while parsing string\"\n+            Err(Error {line: 1u, col: 5u, msg: ~\"EOF while parsing string\"\n         }));\n \n         assert_eq!(from_str(\"\\\"\\\"\"), Ok(String(~\"\")));\n@@ -1768,15 +1768,15 @@ mod tests {\n     #[test]\n     fn test_read_list() {\n         assert_eq!(from_str(\"[\"),\n-            Err(Error {line: 1u, col: 2u, msg: @~\"EOF while parsing value\"}));\n+            Err(Error {line: 1u, col: 2u, msg: ~\"EOF while parsing value\"}));\n         assert_eq!(from_str(\"[1\"),\n-            Err(Error {line: 1u, col: 3u, msg: @~\"EOF while parsing list\"}));\n+            Err(Error {line: 1u, col: 3u, msg: ~\"EOF while parsing list\"}));\n         assert_eq!(from_str(\"[1,\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"EOF while parsing value\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"EOF while parsing value\"}));\n         assert_eq!(from_str(\"[1,]\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"invalid syntax\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"invalid syntax\"}));\n         assert_eq!(from_str(\"[6 7]\"),\n-            Err(Error {line: 1u, col: 4u, msg: @~\"expected `,` or `]`\"}));\n+            Err(Error {line: 1u, col: 4u, msg: ~\"expected `,` or `]`\"}));\n \n         assert_eq!(from_str(\"[]\"), Ok(List(~[])));\n         assert_eq!(from_str(\"[ ]\"), Ok(List(~[])));\n@@ -1824,49 +1824,49 @@ mod tests {\n             Err(Error {\n                 line: 1u,\n                 col: 2u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n         assert_eq!(from_str(\"{ \"),\n             Err(Error {\n                 line: 1u,\n                 col: 3u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n         assert_eq!(from_str(\"{1\"),\n             Err(Error {\n                 line: 1u,\n                 col: 2u,\n-                msg: @~\"key must be a string\"}));\n+                msg: ~\"key must be a string\"}));\n         assert_eq!(from_str(\"{ \\\"a\\\"\"),\n             Err(Error {\n                 line: 1u,\n                 col: 6u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n         assert_eq!(from_str(\"{\\\"a\\\"\"),\n             Err(Error {\n                 line: 1u,\n                 col: 5u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n         assert_eq!(from_str(\"{\\\"a\\\" \"),\n             Err(Error {\n                 line: 1u,\n                 col: 6u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n \n         assert_eq!(from_str(\"{\\\"a\\\" 1\"),\n-            Err(Error {line: 1u, col: 6u, msg: @~\"expected `:`\"}));\n+            Err(Error {line: 1u, col: 6u, msg: ~\"expected `:`\"}));\n         assert_eq!(from_str(\"{\\\"a\\\":\"),\n-            Err(Error {line: 1u, col: 6u, msg: @~\"EOF while parsing value\"}));\n+            Err(Error {line: 1u, col: 6u, msg: ~\"EOF while parsing value\"}));\n         assert_eq!(from_str(\"{\\\"a\\\":1\"),\n             Err(Error {\n                 line: 1u,\n                 col: 7u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n         assert_eq!(from_str(\"{\\\"a\\\":1 1\"),\n-            Err(Error {line: 1u, col: 8u, msg: @~\"expected `,` or `}`\"}));\n+            Err(Error {line: 1u, col: 8u, msg: ~\"expected `,` or `}`\"}));\n         assert_eq!(from_str(\"{\\\"a\\\":1,\"),\n             Err(Error {\n                 line: 1u,\n                 col: 8u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n \n         assert_eq!(from_str(\"{}\").unwrap(), mk_object([]));\n         assert_eq!(from_str(\"{\\\"a\\\": 3}\").unwrap(),\n@@ -1966,7 +1966,7 @@ mod tests {\n             Err(Error {\n                 line: 3u,\n                 col: 8u,\n-                msg: @~\"EOF while parsing object\"}));\n+                msg: ~\"EOF while parsing object\"}));\n     }\n \n     #[deriving(Decodable)]"}]}