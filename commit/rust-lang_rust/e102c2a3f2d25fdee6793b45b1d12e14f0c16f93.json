{"sha": "e102c2a3f2d25fdee6793b45b1d12e14f0c16f93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDJjMmEzZjJkMjVmZGVlNjc5M2I0NWIxZDEyZTE0ZjBjMTZmOTM=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:46:48Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:46:48Z"}, "message": "Fix Windows compilation errors.", "tree": {"sha": "674a5b5b6b4df9d1e64814c68695d2474cb69d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674a5b5b6b4df9d1e64814c68695d2474cb69d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93", "html_url": "https://github.com/rust-lang/rust/commit/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b974813871a4dee6cac3128a4e3fa5e81125464", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b974813871a4dee6cac3128a4e3fa5e81125464", "html_url": "https://github.com/rust-lang/rust/commit/3b974813871a4dee6cac3128a4e3fa5e81125464"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "b1edc6c511f0eed57f79a56757ea8b02d245cb99", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e102c2a3f2d25fdee6793b45b1d12e14f0c16f93/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=e102c2a3f2d25fdee6793b45b1d12e14f0c16f93", "patch": "@@ -4,7 +4,6 @@\n \n use super::raw::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n use crate::convert::TryFrom;\n-use crate::ffi::c_void;\n use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n@@ -133,7 +132,7 @@ impl TryFrom<HandleOrNull> for OwnedHandle {\n     #[inline]\n     fn try_from(handle_or_null: HandleOrNull) -> Result<Self, ()> {\n         let owned_handle = handle_or_null.0;\n-        if owned_handle.handle.as_ptr().is_null() { Err(()) } else { Ok(owned_handle) }\n+        if owned_handle.handle.is_null() { Err(()) } else { Ok(owned_handle) }\n     }\n }\n \n@@ -143,32 +142,28 @@ impl TryFrom<HandleOrInvalid> for OwnedHandle {\n     #[inline]\n     fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n         let owned_handle = handle_or_invalid.0;\n-        if owned_handle.handle.as_ptr() == c::INVALID_HANDLE_VALUE {\n-            Err(())\n-        } else {\n-            Ok(owned_handle)\n-        }\n+        if owned_handle.handle == c::INVALID_HANDLE_VALUE { Err(()) } else { Ok(owned_handle) }\n     }\n }\n \n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n-        self.handle.as_ptr()\n+        self.handle\n     }\n }\n \n impl AsRawHandle for OwnedHandle {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n-        self.handle.as_ptr()\n+        self.handle\n     }\n }\n \n impl IntoRawHandle for OwnedHandle {\n     #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n-        let handle = self.handle.as_ptr();\n+        let handle = self.handle;\n         forget(self);\n         handle\n     }\n@@ -244,7 +239,7 @@ impl Drop for OwnedHandle {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            let _ = c::CloseHandle(self.handle.as_ptr());\n+            let _ = c::CloseHandle(self.handle);\n         }\n     }\n }"}]}