{"sha": "f88a1e6f21c000f2d3b2e71778a7fa655cd8423c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OGExZTZmMjFjMDAwZjJkM2IyZTcxNzc4YTdmYTY1NWNkODQyM2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-03-21T07:23:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-03-23T03:03:08Z"}, "message": "std: undo conversion of user defined try!s", "tree": {"sha": "6a84f728978dd87e0a6e725e44bd6b0018978432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a84f728978dd87e0a6e725e44bd6b0018978432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c", "html_url": "https://github.com/rust-lang/rust/commit/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c/comments", "author": null, "committer": null, "parents": [{"sha": "aa7fe93d4a6217dd6f2538bce857ab6a097afbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7fe93d4a6217dd6f2538bce857ab6a097afbeb", "html_url": "https://github.com/rust-lang/rust/commit/aa7fe93d4a6217dd6f2538bce857ab6a097afbeb"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b712091dc0b576b8da1d54b6c186db5a26ec5855", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88a1e6f21c000f2d3b2e71778a7fa655cd8423c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=f88a1e6f21c000f2d3b2e71778a7fa655cd8423c", "patch": "@@ -335,25 +335,25 @@ impl Command {\n     // have the drop glue anyway because this code never returns (the\n     // child will either exec() or invoke libc::exit)\n     unsafe fn do_exec(&mut self, stdio: ChildPipes) -> io::Error {\n-        macro_rules! try {\n+        macro_rules! t {\n             ($e:expr) => (match $e {\n                 Ok(e) => e,\n                 Err(e) => return e,\n             })\n         }\n \n         if let Some(fd) = stdio.stdin.fd() {\n-            cvt_r(|| libc::dup2(fd, libc::STDIN_FILENO))?;\n+            t!(cvt_r(|| libc::dup2(fd, libc::STDIN_FILENO)));\n         }\n         if let Some(fd) = stdio.stdout.fd() {\n-            cvt_r(|| libc::dup2(fd, libc::STDOUT_FILENO))?;\n+            t!(cvt_r(|| libc::dup2(fd, libc::STDOUT_FILENO)));\n         }\n         if let Some(fd) = stdio.stderr.fd() {\n-            cvt_r(|| libc::dup2(fd, libc::STDERR_FILENO))?;\n+            t!(cvt_r(|| libc::dup2(fd, libc::STDERR_FILENO)));\n         }\n \n         if let Some(u) = self.gid {\n-            cvt(libc::setgid(u as gid_t))?;\n+            t!(cvt(libc::setgid(u as gid_t)));\n         }\n         if let Some(u) = self.uid {\n             // When dropping privileges from root, the `setgroups` call\n@@ -365,7 +365,7 @@ impl Command {\n             // privilege dropping function.\n             let _ = libc::setgroups(0, ptr::null());\n \n-            cvt(libc::setuid(u as uid_t))?;\n+            t!(cvt(libc::setuid(u as uid_t)));\n         }\n         if self.session_leader {\n             // Don't check the error of setsid because it fails if we're the\n@@ -374,7 +374,7 @@ impl Command {\n             let _ = libc::setsid();\n         }\n         if let Some(ref cwd) = self.cwd {\n-            cvt(libc::chdir(cwd.as_ptr()))?;\n+            t!(cvt(libc::chdir(cwd.as_ptr())));\n         }\n         if let Some(ref envp) = self.envp {\n             *sys::os::environ() = envp.as_ptr();\n@@ -390,17 +390,17 @@ impl Command {\n             // need to clean things up now to avoid confusing the program\n             // we're about to run.\n             let mut set: libc::sigset_t = mem::uninitialized();\n-            cvt(libc::sigemptyset(&mut set))?;\n-            cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set,\n-                                           ptr::null_mut()))?;\n+            t!(cvt(libc::sigemptyset(&mut set)));\n+            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set,\n+                                           ptr::null_mut())));\n             let ret = libc::signal(libc::SIGPIPE, libc::SIG_DFL);\n             if ret == libc::SIG_ERR {\n                 return io::Error::last_os_error()\n             }\n         }\n \n         for callback in self.closures.iter_mut() {\n-            callback()?;\n+            t!(callback());\n         }\n \n         libc::execvp(self.argv[0], self.argv.as_ptr());"}]}