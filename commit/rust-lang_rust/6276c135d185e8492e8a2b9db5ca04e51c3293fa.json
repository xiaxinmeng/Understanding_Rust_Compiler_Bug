{"sha": "6276c135d185e8492e8a2b9db5ca04e51c3293fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNzZjMTM1ZDE4NWU4NDkyZThhMmI5ZGI1Y2EwNGU1MWMzMjkzZmE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-23T01:16:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T01:16:14Z"}, "message": "Rollup merge of #71756 - carstenandrich:master, r=dtolnay\n\nadd Windows system error codes that should map to io::ErrorKind::TimedOut\n\ncloses #71646\n\n**Disclaimer:** The author of this pull request has a negligible amount of experience (i.e., kinda zero) with the Windows API. This PR should _definitely_ be reviewed by someone familiar with the API and its error handling.\n\nWhile porting POSIX software using serial ports to Windows, I found that for many Windows system error codes, an `io::Error` created via `io::Error::from_raw_os_error()` or `io::Error::last_os_error()` is not `io::ErrorKind::TimedOut`. For example, when a (non-overlapped) write to a COM port via [`WriteFile()`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile) times out, [`GetLastError()`](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) returns `ERROR_SEM_TIMEOUT` ([121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-)). However, an `io::Error` created from this error code will have `io::ErrorKind::Other`.\n\nCurrently, only the error codes `ERROR_OPERATION_ABORTED` and `WSAETIMEDOUT` will instantiate `io::Error`s with kind `io::ErrorKind::TimedOut`.\nThis makes `io::Error::last_os_error()` unsuitable for error handling of syscalls that could time out, because timeouts can not be caught by matching the error's kind against `io::ErrorKind::TimedOut`.\n\nDownloading the [list of Windows system error codes](https://gist.github.com/carstenandrich/c331d557520b8a0e7f44689ca257f805) and grepping anything that sounds like a timeout (`egrep -i \"timed?.?(out|limit)\"`), I've identified the following error codes that should also have `io::ErrorKind::TimedOut`, because they could be I/O-related:\n\nName | Code | Description\n--- | --- | ---\n`ERROR_SEM_TIMEOUT` | [121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-) | The semaphore timeout period has expired.\n`WAIT_TIMEOUT` | [258](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-) | The wait operation timed out.\n`ERROR_DRIVER_CANCEL_TIMEOUT` | [594](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--500-999-) | The driver %hs failed to complete a cancelled I/O request in the allotted time.\n`ERROR_COUNTER_TIMEOUT` | [1121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-) | A serial I/O operation completed because the timeout period expired. The IOCTL_SERIAL_XOFF_COUNTER did not reach zero.)\n`ERROR_TIMEOUT` | [1460](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-) | This operation returned because the timeout period expired.\n`ERROR_CTX_MODEM_RESPONSE_TIMEOUT` | [7012](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The modem did not respond to the command sent to it. Verify that the modem is properly cabled and powered on.\n`ERROR_CTX_CLIENT_QUERY_TIMEOUT` | [7040](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The client failed to respond to the server connect message.\n`ERROR_DS_TIMELIMIT_EXCEEDED` | [8226](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--8200-8999-) | The time limit for this request was exceeded.\n`DNS_ERROR_RECORD_TIMED_OUT` | [9705](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--9000-11999-) | DNS record timed out.\n`ERROR_IPSEC_IKE_TIMED_OUT` | [13805](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | Negotiation timed out.\n\nThe following errors are also timeouts, but they don't seem to be directly related to I/O or network operations:\n\nName | Code | Description\n--- | --- | ---\n`ERROR_SERVICE_REQUEST_TIMEOUT` | [1053](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-) | The service did not respond to the start or control request in a timely fashion.\n`ERROR_RESOURCE_CALL_TIMED_OUT` | [5910](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--4000-5999-) | The call to the cluster resource DLL timed out.\n`FRS_ERR_SYSVOL_POPULATE_TIMEOUT` | [8014](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The file replication service cannot populate the system volume because of an internal timeout. The event log may have more information.\n`ERROR_RUNLEVEL_SWITCH_TIMEOUT` | [15402](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | The requested run level switch cannot be completed successfully since one or more services will not stop or restart within the specified timeout.\n`ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT` | [15403](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | A run level switch agent did not respond within the specified timeout.\n\nPlease note that `ERROR_SEM_TIMEOUT` is the only timeout error I have [seen in action](https://gist.github.com/carstenandrich/10b3962fa1abc9e50816b6460010900b). The remainder of the error codes listed above is based purely on reading documentation.\n\nThis pull request adds all of the errors listed in both tables, but I'm not sure whether adding all of them makes sense. Someone with actual Windows API experience should decide that.\n\nI expect these changes to be fairly backwards compatible, because only the error's [`.kind()`](https://doc.rust-lang.org/std/io/struct.Error.html#method.kind) will change, but matching the error's code via [`.raw_os_error()`](https://doc.rust-lang.org/std/io/struct.Error.html#method.raw_os_error) will not be affected.\nHowever, code expecting these errors to be `io::ErrorKind::Other` would break. Even though I personally do not think such an implementation would make sense, after all the docs say that `io::ErrorKind` is _intended to grow over time_, a residual risk remains, of course. I took the liberty to ammend the docstring of `io::ErrorKind::Other` with a remark that discourages matching against it.\n\nAs per the contributing guidelines I'm adding @steveklabnik due to the changed documentation. Also @retep998 might have some valuable insights on the error codes.\n\nr? @steveklabnik\ncc @retep998\ncc @Mark-Simulacrum", "tree": {"sha": "4ab51610e1b6ad1a55181902f6b9ccfa25b76460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab51610e1b6ad1a55181902f6b9ccfa25b76460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6276c135d185e8492e8a2b9db5ca04e51c3293fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8VfgCRBK7hj4Ov3rIwAAdHIIAJzgvR6/yqrZeNoBWHV0QP00\nvOXuM2jQyrkAj72xqh44ktonpgnWVDj/Fm2L8yRGseNw/NWik3Jo4c2jV0I978Rc\n0fJiAupw20OaatE+99WqUDS1GM79PL4zjTDcYx3HMeL3zaLoXpuDZeqkJjkxvSPr\nWrTtji1aPn2fFu51vDDxB9LQ3o6boUW47V+usHXnTMYpNAEMtE3AGpsGi/BNdKCX\nUV1vsVdNHcYn9hZQyKDVIaDG7rmmryuSNfdmJeQ7HF4IW4UZhKfOzd9fduSNtieF\nnUqi7CZfSl67o7H0hmZhLQLqdU4GABAIZTcmodhhRvG52CscFaea2bQ5xk+LaYY=\n=97wi\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ab51610e1b6ad1a55181902f6b9ccfa25b76460\nparent cbf356a1a5677b1c073f09ba833d8247c7ed01aa\nparent e27a8b59ed8046c9a9c73b680e0f767f4252077d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1592874974 +0200\ncommitter GitHub <noreply@github.com> 1592874974 +0200\n\nRollup merge of #71756 - carstenandrich:master, r=dtolnay\n\nadd Windows system error codes that should map to io::ErrorKind::TimedOut\n\ncloses #71646\n\n**Disclaimer:** The author of this pull request has a negligible amount of experience (i.e., kinda zero) with the Windows API. This PR should _definitely_ be reviewed by someone familiar with the API and its error handling.\n\nWhile porting POSIX software using serial ports to Windows, I found that for many Windows system error codes, an `io::Error` created via `io::Error::from_raw_os_error()` or `io::Error::last_os_error()` is not `io::ErrorKind::TimedOut`. For example, when a (non-overlapped) write to a COM port via [`WriteFile()`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile) times out, [`GetLastError()`](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) returns `ERROR_SEM_TIMEOUT` ([121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-)). However, an `io::Error` created from this error code will have `io::ErrorKind::Other`.\n\nCurrently, only the error codes `ERROR_OPERATION_ABORTED` and `WSAETIMEDOUT` will instantiate `io::Error`s with kind `io::ErrorKind::TimedOut`.\nThis makes `io::Error::last_os_error()` unsuitable for error handling of syscalls that could time out, because timeouts can not be caught by matching the error's kind against `io::ErrorKind::TimedOut`.\n\nDownloading the [list of Windows system error codes](https://gist.github.com/carstenandrich/c331d557520b8a0e7f44689ca257f805) and grepping anything that sounds like a timeout (`egrep -i \"timed?.?(out|limit)\"`), I've identified the following error codes that should also have `io::ErrorKind::TimedOut`, because they could be I/O-related:\n\nName | Code | Description\n--- | --- | ---\n`ERROR_SEM_TIMEOUT` | [121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-) | The semaphore timeout period has expired.\n`WAIT_TIMEOUT` | [258](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-) | The wait operation timed out.\n`ERROR_DRIVER_CANCEL_TIMEOUT` | [594](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--500-999-) | The driver %hs failed to complete a cancelled I/O request in the allotted time.\n`ERROR_COUNTER_TIMEOUT` | [1121](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-) | A serial I/O operation completed because the timeout period expired. The IOCTL_SERIAL_XOFF_COUNTER did not reach zero.)\n`ERROR_TIMEOUT` | [1460](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-) | This operation returned because the timeout period expired.\n`ERROR_CTX_MODEM_RESPONSE_TIMEOUT` | [7012](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The modem did not respond to the command sent to it. Verify that the modem is properly cabled and powered on.\n`ERROR_CTX_CLIENT_QUERY_TIMEOUT` | [7040](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The client failed to respond to the server connect message.\n`ERROR_DS_TIMELIMIT_EXCEEDED` | [8226](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--8200-8999-) | The time limit for this request was exceeded.\n`DNS_ERROR_RECORD_TIMED_OUT` | [9705](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--9000-11999-) | DNS record timed out.\n`ERROR_IPSEC_IKE_TIMED_OUT` | [13805](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | Negotiation timed out.\n\nThe following errors are also timeouts, but they don't seem to be directly related to I/O or network operations:\n\nName | Code | Description\n--- | --- | ---\n`ERROR_SERVICE_REQUEST_TIMEOUT` | [1053](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-) | The service did not respond to the start or control request in a timely fashion.\n`ERROR_RESOURCE_CALL_TIMED_OUT` | [5910](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--4000-5999-) | The call to the cluster resource DLL timed out.\n`FRS_ERR_SYSVOL_POPULATE_TIMEOUT` | [8014](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-) | The file replication service cannot populate the system volume because of an internal timeout. The event log may have more information.\n`ERROR_RUNLEVEL_SWITCH_TIMEOUT` | [15402](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | The requested run level switch cannot be completed successfully since one or more services will not stop or restart within the specified timeout.\n`ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT` | [15403](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-) | A run level switch agent did not respond within the specified timeout.\n\nPlease note that `ERROR_SEM_TIMEOUT` is the only timeout error I have [seen in action](https://gist.github.com/carstenandrich/10b3962fa1abc9e50816b6460010900b). The remainder of the error codes listed above is based purely on reading documentation.\n\nThis pull request adds all of the errors listed in both tables, but I'm not sure whether adding all of them makes sense. Someone with actual Windows API experience should decide that.\n\nI expect these changes to be fairly backwards compatible, because only the error's [`.kind()`](https://doc.rust-lang.org/std/io/struct.Error.html#method.kind) will change, but matching the error's code via [`.raw_os_error()`](https://doc.rust-lang.org/std/io/struct.Error.html#method.raw_os_error) will not be affected.\nHowever, code expecting these errors to be `io::ErrorKind::Other` would break. Even though I personally do not think such an implementation would make sense, after all the docs say that `io::ErrorKind` is _intended to grow over time_, a residual risk remains, of course. I took the liberty to ammend the docstring of `io::ErrorKind::Other` with a remark that discourages matching against it.\n\nAs per the contributing guidelines I'm adding @steveklabnik due to the changed documentation. Also @retep998 might have some valuable insights on the error codes.\n\nr? @steveklabnik\ncc @retep998\ncc @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6276c135d185e8492e8a2b9db5ca04e51c3293fa", "html_url": "https://github.com/rust-lang/rust/commit/6276c135d185e8492e8a2b9db5ca04e51c3293fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6276c135d185e8492e8a2b9db5ca04e51c3293fa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "html_url": "https://github.com/rust-lang/rust/commit/cbf356a1a5677b1c073f09ba833d8247c7ed01aa"}, {"sha": "e27a8b59ed8046c9a9c73b680e0f767f4252077d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27a8b59ed8046c9a9c73b680e0f767f4252077d", "html_url": "https://github.com/rust-lang/rust/commit/e27a8b59ed8046c9a9c73b680e0f767f4252077d"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "f7248e7547e27620b766649e48a7514a7a1ad158", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=6276c135d185e8492e8a2b9db5ca04e51c3293fa", "patch": "@@ -160,6 +160,11 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Interrupted,\n     /// Any I/O error not part of this list.\n+    ///\n+    /// Errors that are `Other` now may move to a different or a new\n+    /// [`ErrorKind`] variant in the future. It is not recommended to match\n+    /// an error against `Other` and to expect any additional characteristics,\n+    /// e.g., a specific [`Error::raw_os_error`] return value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Other,\n "}, {"sha": "f440442ca306279dfb7a0f49bbabb41fc54aabca", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=6276c135d185e8492e8a2b9db5ca04e51c3293fa", "patch": "@@ -161,6 +161,8 @@ pub const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n \n pub const PROGRESS_CONTINUE: DWORD = 0;\n \n+// List of Windows system error codes with descriptions:\n+// https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes#system-error-codes\n pub const ERROR_FILE_NOT_FOUND: DWORD = 2;\n pub const ERROR_PATH_NOT_FOUND: DWORD = 3;\n pub const ERROR_ACCESS_DENIED: DWORD = 5;\n@@ -171,13 +173,26 @@ pub const ERROR_FILE_EXISTS: DWORD = 80;\n pub const ERROR_INVALID_PARAMETER: DWORD = 87;\n pub const ERROR_BROKEN_PIPE: DWORD = 109;\n pub const ERROR_CALL_NOT_IMPLEMENTED: DWORD = 120;\n+pub const ERROR_SEM_TIMEOUT: DWORD = 121;\n pub const ERROR_INSUFFICIENT_BUFFER: DWORD = 122;\n pub const ERROR_ALREADY_EXISTS: DWORD = 183;\n-pub const ERROR_NO_DATA: DWORD = 232;\n pub const ERROR_ENVVAR_NOT_FOUND: DWORD = 203;\n+pub const ERROR_NO_DATA: DWORD = 232;\n+pub const ERROR_DRIVER_CANCEL_TIMEOUT: DWORD = 594;\n pub const ERROR_OPERATION_ABORTED: DWORD = 995;\n pub const ERROR_IO_PENDING: DWORD = 997;\n-pub const ERROR_TIMEOUT: DWORD = 0x5B4;\n+pub const ERROR_SERVICE_REQUEST_TIMEOUT: DWORD = 1053;\n+pub const ERROR_COUNTER_TIMEOUT: DWORD = 1121;\n+pub const ERROR_TIMEOUT: DWORD = 1460;\n+pub const ERROR_RESOURCE_CALL_TIMED_OUT: DWORD = 5910;\n+pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: DWORD = 7012;\n+pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: DWORD = 7040;\n+pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: DWORD = 8014;\n+pub const ERROR_DS_TIMELIMIT_EXCEEDED: DWORD = 8226;\n+pub const DNS_ERROR_RECORD_TIMED_OUT: DWORD = 9705;\n+pub const ERROR_IPSEC_IKE_TIMED_OUT: DWORD = 13805;\n+pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: DWORD = 15402;\n+pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: DWORD = 15403;\n \n pub const E_NOTIMPL: HRESULT = 0x80004001u32 as HRESULT;\n "}, {"sha": "640c9f3636d4b89262cf19045c0c9d346504ca53", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6276c135d185e8492e8a2b9db5ca04e51c3293fa/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=6276c135d185e8492e8a2b9db5ca04e51c3293fa", "patch": "@@ -61,7 +61,22 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_FILE_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_PATH_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_NO_DATA => return ErrorKind::BrokenPipe,\n-        c::ERROR_OPERATION_ABORTED => return ErrorKind::TimedOut,\n+        c::ERROR_SEM_TIMEOUT\n+        | c::WAIT_TIMEOUT\n+        | c::ERROR_DRIVER_CANCEL_TIMEOUT\n+        | c::ERROR_OPERATION_ABORTED\n+        | c::ERROR_SERVICE_REQUEST_TIMEOUT\n+        | c::ERROR_COUNTER_TIMEOUT\n+        | c::ERROR_TIMEOUT\n+        | c::ERROR_RESOURCE_CALL_TIMED_OUT\n+        | c::ERROR_CTX_MODEM_RESPONSE_TIMEOUT\n+        | c::ERROR_CTX_CLIENT_QUERY_TIMEOUT\n+        | c::FRS_ERR_SYSVOL_POPULATE_TIMEOUT\n+        | c::ERROR_DS_TIMELIMIT_EXCEEDED\n+        | c::DNS_ERROR_RECORD_TIMED_OUT\n+        | c::ERROR_IPSEC_IKE_TIMED_OUT\n+        | c::ERROR_RUNLEVEL_SWITCH_TIMEOUT\n+        | c::ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT => return ErrorKind::TimedOut,\n         _ => {}\n     }\n "}]}