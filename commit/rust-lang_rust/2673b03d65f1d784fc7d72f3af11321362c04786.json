{"sha": "2673b03d65f1d784fc7d72f3af11321362c04786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzNiMDNkNjVmMWQ3ODRmYzdkNzJmM2FmMTEzMjEzNjJjMDQ3ODY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-25T16:30:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-25T16:30:29Z"}, "message": "Rollup merge of #40734 - adamransom:fix/40661, r=jseyfried\n\nAdd warning for use of lifetime parameter with 'static bound\n\nPreviously a `'static` lifetime bound would result in an `undeclared lifetime` error when compiling, even though it could be considered valid.\n\nHowever, it is unnecessary to use it as a lifetime bound so we present the user with a warning instead and suggest using the `'static` lifetime directly, in place of the lifetime parameter. We can change this to an error (or warning with lint) if that's decided to be more appropriate.\n\nExample output:\n```\nwarning: unnecessary lifetime parameter `'a`\n --> ../static-lifetime-bound.rs:3:10\n  |\n3 | fn f<'a: 'static>(val: &'a i32) {\n  |      ^^^^^^^^^^^\n  |\n  = help: you can use the `'static` lifetime directly, in place `'a`\n```\n\nFixes #40661\n\nr? @jseyfried", "tree": {"sha": "cf64074f48af4de6fef66f75137ae2ed51c0a527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf64074f48af4de6fef66f75137ae2ed51c0a527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2673b03d65f1d784fc7d72f3af11321362c04786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2673b03d65f1d784fc7d72f3af11321362c04786", "html_url": "https://github.com/rust-lang/rust/commit/2673b03d65f1d784fc7d72f3af11321362c04786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2673b03d65f1d784fc7d72f3af11321362c04786/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43c336e7453ff8216671f44328841d9a3828d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43c336e7453ff8216671f44328841d9a3828d2b", "html_url": "https://github.com/rust-lang/rust/commit/f43c336e7453ff8216671f44328841d9a3828d2b"}, {"sha": "e7949d0013bb8b45c884b173ca22c20e6899d612", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7949d0013bb8b45c884b173ca22c20e6899d612", "html_url": "https://github.com/rust-lang/rust/commit/e7949d0013bb8b45c884b173ca22c20e6899d612"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "f4f2f4cf9211b532aa19a18001802a763a17225b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2673b03d65f1d784fc7d72f3af11321362c04786", "patch": "@@ -159,6 +159,10 @@ impl Lifetime {\n     pub fn is_elided(&self) -> bool {\n         self.name == keywords::Invalid.name()\n     }\n+\n+    pub fn is_static(&self) -> bool {\n+        self.name == keywords::StaticLifetime.name()\n+    }\n }\n \n /// A lifetime definition, eg `'a: 'b+'c+'d`"}, {"sha": "5094e28475b2640e9faea82e38e71fe28b91bba1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2673b03d65f1d784fc7d72f3af11321362c04786", "patch": "@@ -29,7 +29,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n-use syntax_pos::Span;\n+use syntax_pos::{mk_sp, Span};\n use errors::DiagnosticBuilder;\n use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n use rustc_back::slice;\n@@ -434,7 +434,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.resolve_elided_lifetimes(slice::ref_slice(lifetime_ref));\n             return;\n         }\n-        if lifetime_ref.name == keywords::StaticLifetime.name() {\n+        if lifetime_ref.is_static() {\n             self.insert_lifetime(lifetime_ref, Region::Static);\n             return;\n         }\n@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let lifetime_i = &lifetimes[i];\n \n             for lifetime in lifetimes {\n-                if lifetime.lifetime.name == keywords::StaticLifetime.name() {\n+                if lifetime.lifetime.is_static() {\n                     let lifetime = lifetime.lifetime;\n                     let mut err = struct_span_err!(self.sess, lifetime.span, E0262,\n                                   \"invalid lifetime parameter name: `{}`\", lifetime.name);\n@@ -1464,7 +1464,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             self.check_lifetime_def_for_shadowing(old_scope, &lifetime_i.lifetime);\n \n             for bound in &lifetime_i.bounds {\n-                self.resolve_lifetime_ref(bound);\n+                if !bound.is_static() {\n+                    self.resolve_lifetime_ref(bound);\n+                } else {\n+                    self.insert_lifetime(bound, Region::Static);\n+                    let full_span = mk_sp(lifetime_i.lifetime.span.lo, bound.span.hi);\n+                    self.sess.struct_span_warn(full_span,\n+                        &format!(\"unnecessary lifetime parameter `{}`\", lifetime_i.lifetime.name))\n+                        .help(&format!(\"you can use the `'static` lifetime directly, in place \\\n+                                        of `{}`\", lifetime_i.lifetime.name))\n+                        .emit();\n+                }\n             }\n         }\n     }"}, {"sha": "38534ab0a36876ec56346e519985365ea7213437", "filename": "src/test/compile-fail/static-lifetime-bound.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Ftest%2Fcompile-fail%2Fstatic-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2673b03d65f1d784fc7d72f3af11321362c04786/src%2Ftest%2Fcompile-fail%2Fstatic-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-lifetime-bound.rs?ref=2673b03d65f1d784fc7d72f3af11321362c04786", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<'a: 'static>(_: &'a i32) {} //~WARN unnecessary lifetime parameter `'a`\n+\n+fn main() {\n+    let x = 0;\n+    f(&x); //~ERROR does not live long enough\n+}"}]}