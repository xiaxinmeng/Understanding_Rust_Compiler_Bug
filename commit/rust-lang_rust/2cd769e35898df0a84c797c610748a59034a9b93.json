{"sha": "2cd769e35898df0a84c797c610748a59034a9b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZDc2OWUzNTg5OGRmMGE4NGM3OTdjNjEwNzQ4YTU5MDM0YTliOTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-18T23:57:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T18:40:16Z"}, "message": "Add ident as an argument to visit_fn (typestate wants it)", "tree": {"sha": "3e332e7a71ba9d4ec562cf3cfc85dba50235f060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e332e7a71ba9d4ec562cf3cfc85dba50235f060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd769e35898df0a84c797c610748a59034a9b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd769e35898df0a84c797c610748a59034a9b93", "html_url": "https://github.com/rust-lang/rust/commit/2cd769e35898df0a84c797c610748a59034a9b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd769e35898df0a84c797c610748a59034a9b93/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef5473deb1c6a9f80534fb40de88291de308d1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5473deb1c6a9f80534fb40de88291de308d1f5", "html_url": "https://github.com/rust-lang/rust/commit/ef5473deb1c6a9f80534fb40de88291de308d1f5"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "9dc7a7ca843a9ffcf1b952c4e414cd86e67feac0", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=2cd769e35898df0a84c797c610748a59034a9b93", "patch": "@@ -73,8 +73,6 @@ import front::ast::block;\n import front::ast::block_;\n import front::ast::method;\n \n-import middle::fold;\n-import middle::fold::respan;\n import middle::ty::expr_ann;\n \n import util::common::uistr;\n@@ -129,14 +127,14 @@ fn collect_ids_decl(&@decl d, @vec[uint] res) -> () {\n     }\n }\n \n-fn node_ids_in_fn(&_fn f, &def_id d, @vec[uint] res) -> () {\n+fn node_ids_in_fn(&_fn f, &ident i, &def_id d, @vec[uint] res) -> () {\n     auto collect_ids = walk::default_visitor();\n     collect_ids = rec(visit_expr_pre  = bind collect_ids_expr(_,res),\n                       visit_block_pre = bind collect_ids_block(_,res),\n                       visit_stmt_pre  = bind collect_ids_stmt(_,res),\n                       visit_decl_pre  = bind collect_ids_decl(_,res)\n                       with collect_ids);\n-    walk::walk_fn(collect_ids, f, d);\n+    walk::walk_fn(collect_ids, f, i, d);\n }\n \n fn init_vecs(&crate_ctxt ccx, @vec[uint] node_ids, uint len) -> () {\n@@ -146,22 +144,22 @@ fn init_vecs(&crate_ctxt ccx, @vec[uint] node_ids, uint len) -> () {\n     }\n }\n \n-fn visit_fn(&crate_ctxt ccx, uint num_locals, &_fn f, &def_id d) -> () {\n-     \n+fn visit_fn(&crate_ctxt ccx, uint num_locals, &_fn f, &ident i,\n+            &def_id d) -> () {\n     let vec[uint] node_ids_ = [];\n     let @vec[uint] node_ids = @node_ids_;\n-    node_ids_in_fn(f, d, node_ids);\n+    node_ids_in_fn(f, i, d, node_ids);\n     init_vecs(ccx, node_ids, num_locals);\n }\n \n-fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &def_id f_id) -> () {\n+fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &ident i, &def_id f_id) -> () {\n     auto f_info = get_fn_info(ccx, f_id);\n-    visit_fn(ccx, num_locals(f_info), f, f_id);\n+    visit_fn(ccx, num_locals(f_info), f, i, f_id);\n }\n \n fn annotate_crate(&crate_ctxt ccx, &crate crate) -> () {\n     auto do_ann = walk::default_visitor();\n-    do_ann = rec(visit_fn_pre = bind annotate_in_fn(ccx, _, _)\n+    do_ann = rec(visit_fn_pre = bind annotate_in_fn(ccx, _, _, _)\n                  with do_ann);\n     walk::walk_crate(do_ann, crate);\n }"}, {"sha": "c5b34a3a464b6aea1109e2708b44323cabc54193", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=2cd769e35898df0a84c797c610748a59034a9b93", "patch": "@@ -20,8 +20,6 @@ import front::ast::decl_local;\n import front::ast::def_id;\n import front::ast::ident;\n \n-import middle::fold::span;\n-import middle::fold::respan;\n import middle::walk::walk_crate;\n import middle::walk::walk_fn;\n import middle::walk::ast_visitor;\n@@ -47,13 +45,11 @@ fn collect_local(&@vec[tup(ident, def_id)] vars, &@decl d) -> () {\n     }\n }\n \n-fn find_locals(_fn f, def_id d) -> @vec[tup(ident,def_id)] {\n+fn find_locals(&_fn f, &ident i, &def_id d) -> @vec[tup(ident,def_id)] {\n   auto res = @vec::alloc[tup(ident,def_id)](0u);\n-\n   auto visitor = walk::default_visitor();\n   visitor = rec(visit_decl_pre=bind collect_local(res,_) with visitor);\n-  walk_fn(visitor, f, d);\n-\n+  walk_fn(visitor, f, i, d);\n   ret res;\n }\n \n@@ -66,7 +62,7 @@ fn add_var(def_id v, ident nm, uint next, fn_info tbl) -> uint {\n \n /* builds a table mapping each local var defined in f\n    to a bit number in the precondition/postcondition vectors */\n-fn mk_fn_info(_fn f, def_id f_id, ident f_name) -> fn_info {\n+fn mk_fn_info(&_fn f, &def_id f_id, &ident f_name) -> fn_info {\n     auto res = rec(vars=@new_def_hash[var_info](),\n                    cf=f.decl.cf);\n     let uint next = 0u;\n@@ -75,7 +71,7 @@ fn mk_fn_info(_fn f, def_id f_id, ident f_name) -> fn_info {\n     /* ignore args, which we know are initialized;\n        just collect locally declared vars */\n \n-    let @vec[tup(ident,def_id)] locals = find_locals(f, f_id);\n+    let @vec[tup(ident,def_id)] locals = find_locals(f, f_name, f_id);\n     // log (uistr(vec::len[tup(ident, def_id)](locals)) + \" locals\");\n     for (tup(ident,def_id) p in *locals) {\n         next = add_var(p._1, p._0, next, res);\n@@ -90,6 +86,8 @@ fn mk_fn_info(_fn f, def_id f_id, ident f_name) -> fn_info {\n     ret res;\n }\n \n+/* FIXME: can do this with just one case -- for fn -- now */\n+\n /* extends mk_fn_info to an item, side-effecting the map fi from\n    function IDs to fn_info maps\n    only looks at function and object items. */"}, {"sha": "f838b760e624b883d96c8f00720f57fccfcbf0e4", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd769e35898df0a84c797c610748a59034a9b93/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=2cd769e35898df0a84c797c610748a59034a9b93", "patch": "@@ -32,8 +32,8 @@ type ast_visitor =\n         fn (&@ast::expr e)              visit_expr_post,\n         fn (&@ast::ty t)                visit_ty_pre,\n         fn (&@ast::ty t)                visit_ty_post,\n-        fn (&ast::_fn f, &ast::def_id d_id) visit_fn_pre,\n-        fn (&ast::_fn f, &ast::def_id d_id)  visit_fn_post);\n+        fn (&ast::_fn f, &ast::ident name, &ast::def_id d_id) visit_fn_pre,\n+        fn (&ast::_fn f, &ast::ident name, &ast::def_id d_id)  visit_fn_post);\n \n fn walk_crate(&ast_visitor v, &ast::crate c) {\n     if (!v.keep_going()) { ret; }\n@@ -93,8 +93,8 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n             walk_ty(v, t);\n             walk_expr(v, e);\n         }\n-        case (ast::item_fn(_, ?f, _, ?d, _)) {\n-            walk_fn(v, f, d);\n+        case (ast::item_fn(?i, ?f, _, ?d, _)) {\n+            walk_fn(v, f, i, d);\n         }\n         case (ast::item_mod(_, ?m, _)) {\n             walk_mod(v, m);\n@@ -118,13 +118,13 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n             }\n             for (@ast::method m in ob.methods) {\n                 v.visit_method_pre(m);\n-                walk_fn(v, m.node.meth, m.node.id);\n+                walk_fn(v, m.node.meth, m.node.ident, m.node.id);\n                 v.visit_method_post(m);\n             }\n             alt (ob.dtor) {\n                 case (none[@ast::method]) {}\n                 case (some[@ast::method](?m)) {\n-                    walk_fn(v, m.node.meth, m.node.id);\n+                    walk_fn(v, m.node.meth, m.node.ident, m.node.id);\n                 }\n             }\n         }\n@@ -229,12 +229,12 @@ fn walk_fn_decl(&ast_visitor v, &ast::fn_decl fd) {\n     walk_ty(v, fd.output);\n }\n \n-fn walk_fn(&ast_visitor v, &ast::_fn f, &ast::def_id d) {\n+fn walk_fn(&ast_visitor v, &ast::_fn f, &ast::ident i, &ast::def_id d) {\n     if (!v.keep_going()) { ret; }\n-    v.visit_fn_pre(f, d);\n+    v.visit_fn_pre(f, i, d);\n     walk_fn_decl(v, f.decl);\n     walk_block(v, f.body);\n-    v.visit_fn_post(f, d);\n+    v.visit_fn_post(f, i, d);\n }\n \n fn walk_block(&ast_visitor v, &ast::block b) {\n@@ -459,7 +459,7 @@ fn def_visit_arm(&ast::arm a) { }\n fn def_visit_decl(&@ast::decl d) { }\n fn def_visit_expr(&@ast::expr e) { }\n fn def_visit_ty(&@ast::ty t) { }\n-fn def_visit_fn(&ast::_fn f, &ast::def_id d) { }\n+fn def_visit_fn(&ast::_fn f, &ast::ident i, &ast::def_id d) { }\n \n fn default_visitor() -> ast_visitor {\n "}]}