{"sha": "51c3ab5b85189b2430e438954dd792825c07ac87", "node_id": "C_kwDOAAsO6NoAKDUxYzNhYjViODUxODliMjQzMGU0Mzg5NTRkZDc5MjgyNWMwN2FjODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T11:45:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T11:45:22Z"}, "message": "Auto merge of #14920 - lowr:fix/overhaul-named-struct-to-tuple-struct, r=Veykril\n\nFix edits for `convert_named_struct_to_tuple_struct`\n\nTwo fixes:\n- When replacing syntax nodes, macro files weren't taken into account. Edits were simply made for `node.syntax().text_range()`, which would be wrong range when `node` is inside a macro file.\n- We do ancestor node traversal for every struct name reference to find record expressions/patterns to edit, but we didn't verify that expressions/patterns do actually refer to the struct we're operating on.\n\nBest reviewed one commit at a time.\n\nFixes #13780\nFixes #14927", "tree": {"sha": "ef6d82b5751a398e395b56fad9ff99df58007a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6d82b5751a398e395b56fad9ff99df58007a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51c3ab5b85189b2430e438954dd792825c07ac87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51c3ab5b85189b2430e438954dd792825c07ac87", "html_url": "https://github.com/rust-lang/rust/commit/51c3ab5b85189b2430e438954dd792825c07ac87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51c3ab5b85189b2430e438954dd792825c07ac87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8295255c5bcc293251d47590dcbfd320eaab87", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8295255c5bcc293251d47590dcbfd320eaab87", "html_url": "https://github.com/rust-lang/rust/commit/bc8295255c5bcc293251d47590dcbfd320eaab87"}, {"sha": "033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "html_url": "https://github.com/rust-lang/rust/commit/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b"}], "stats": {"total": 245, "additions": 203, "deletions": 42}, "files": [{"sha": "00a4e0530d2b9e5c2ecc3051c7b3987cc4ffd586", "filename": "crates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs", "status": "modified", "additions": 203, "deletions": 42, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/51c3ab5b85189b2430e438954dd792825c07ac87/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c3ab5b85189b2430e438954dd792825c07ac87/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs?ref=51c3ab5b85189b2430e438954dd792825c07ac87", "patch": "@@ -1,9 +1,9 @@\n use either::Either;\n-use ide_db::defs::Definition;\n+use ide_db::{defs::Definition, search::FileReference};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, HasGenericParams, HasVisibility},\n-    match_ast, SyntaxKind, SyntaxNode,\n+    match_ast, SyntaxKind,\n };\n \n use crate::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};\n@@ -52,6 +52,9 @@ pub(crate) fn convert_named_struct_to_tuple_struct(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,\n ) -> Option<()> {\n+    // XXX: We don't currently provide this assist for struct definitions inside macros, but if we\n+    // are to lift this limitation, don't forget to make `edit_struct_def()` consider macro files\n+    // too.\n     let strukt = ctx.find_node_at_offset::<Either<ast::Struct, ast::Variant>>()?;\n     let field_list = strukt.as_ref().either(|s| s.field_list(), |v| v.field_list())?;\n     let record_fields = match field_list {\n@@ -62,12 +65,11 @@ pub(crate) fn convert_named_struct_to_tuple_struct(\n         Either::Left(s) => Either::Left(ctx.sema.to_def(s)?),\n         Either::Right(v) => Either::Right(ctx.sema.to_def(v)?),\n     };\n-    let target = strukt.as_ref().either(|s| s.syntax(), |v| v.syntax()).text_range();\n \n     acc.add(\n         AssistId(\"convert_named_struct_to_tuple_struct\", AssistKind::RefactorRewrite),\n         \"Convert to tuple struct\",\n-        target,\n+        strukt.syntax().text_range(),\n         |edit| {\n             edit_field_references(ctx, edit, record_fields.fields());\n             edit_struct_references(ctx, edit, strukt_def);\n@@ -82,6 +84,8 @@ fn edit_struct_def(\n     strukt: &Either<ast::Struct, ast::Variant>,\n     record_fields: ast::RecordFieldList,\n ) {\n+    // Note that we don't need to consider macro files in this function because this this is\n+    // currently not triggered for struct definitions inside macro calls.\n     let tuple_fields = record_fields\n         .fields()\n         .filter_map(|f| Some(ast::make::tuple_field(f.visibility(), f.ty()?)));\n@@ -137,50 +141,72 @@ fn edit_struct_references(\n     };\n     let usages = strukt_def.usages(&ctx.sema).include_self_refs().all();\n \n-    let edit_node = |edit: &mut SourceChangeBuilder, node: SyntaxNode| -> Option<()> {\n-        match_ast! {\n-            match node {\n-                ast::RecordPat(record_struct_pat) => {\n-                    edit.replace(\n-                        record_struct_pat.syntax().text_range(),\n-                        ast::make::tuple_struct_pat(\n-                            record_struct_pat.path()?,\n-                            record_struct_pat\n-                                .record_pat_field_list()?\n-                                .fields()\n-                                .filter_map(|pat| pat.pat())\n-                        )\n-                        .to_string()\n-                    );\n-                },\n-                ast::RecordExpr(record_expr) => {\n-                    let path = record_expr.path()?;\n-                    let args = record_expr\n-                        .record_expr_field_list()?\n-                        .fields()\n-                        .filter_map(|f| f.expr())\n-                        .join(\", \");\n-\n-                    edit.replace(record_expr.syntax().text_range(), format!(\"{path}({args})\"));\n-                },\n-                _ => return None,\n-            }\n-        }\n-        Some(())\n-    };\n-\n     for (file_id, refs) in usages {\n         edit.edit_file(file_id);\n         for r in refs {\n-            for node in r.name.syntax().ancestors() {\n-                if edit_node(edit, node).is_some() {\n-                    break;\n-                }\n-            }\n+            process_struct_name_reference(ctx, r, edit);\n         }\n     }\n }\n \n+fn process_struct_name_reference(\n+    ctx: &AssistContext<'_>,\n+    r: FileReference,\n+    edit: &mut SourceChangeBuilder,\n+) -> Option<()> {\n+    // First check if it's the last semgnet of a path that directly belongs to a record\n+    // expression/pattern.\n+    let name_ref = r.name.as_name_ref()?;\n+    let path_segment = name_ref.syntax().parent().and_then(ast::PathSegment::cast)?;\n+    // A `PathSegment` always belongs to a `Path`, so there's at least one `Path` at this point.\n+    let full_path =\n+        path_segment.syntax().parent()?.ancestors().map_while(ast::Path::cast).last().unwrap();\n+\n+    if full_path.segment().unwrap().name_ref()? != *name_ref {\n+        // `name_ref` isn't the last segment of the path, so `full_path` doesn't point to the\n+        // struct we want to edit.\n+        return None;\n+    }\n+\n+    let parent = full_path.syntax().parent()?;\n+    match_ast! {\n+        match parent {\n+            ast::RecordPat(record_struct_pat) => {\n+                // When we failed to get the original range for the whole struct expression node,\n+                // we can't provide any reasonable edit. Leave it untouched.\n+                let file_range = ctx.sema.original_range_opt(record_struct_pat.syntax())?;\n+                edit.replace(\n+                    file_range.range,\n+                    ast::make::tuple_struct_pat(\n+                        record_struct_pat.path()?,\n+                        record_struct_pat\n+                            .record_pat_field_list()?\n+                            .fields()\n+                            .filter_map(|pat| pat.pat())\n+                    )\n+                    .to_string()\n+                );\n+            },\n+            ast::RecordExpr(record_expr) => {\n+                // When we failed to get the original range for the whole struct pattern node,\n+                // we can't provide any reasonable edit. Leave it untouched.\n+                let file_range = ctx.sema.original_range_opt(record_expr.syntax())?;\n+                let path = record_expr.path()?;\n+                let args = record_expr\n+                    .record_expr_field_list()?\n+                    .fields()\n+                    .filter_map(|f| f.expr())\n+                    .join(\", \");\n+\n+                edit.replace(file_range.range, format!(\"{path}({args})\"));\n+            },\n+            _ => {}\n+        }\n+    }\n+\n+    Some(())\n+}\n+\n fn edit_field_references(\n     ctx: &AssistContext<'_>,\n     edit: &mut SourceChangeBuilder,\n@@ -199,7 +225,7 @@ fn edit_field_references(\n                 if let Some(name_ref) = r.name.as_name_ref() {\n                     // Only edit the field reference if it's part of a `.field` access\n                     if name_ref.syntax().parent().and_then(ast::FieldExpr::cast).is_some() {\n-                        edit.replace(name_ref.syntax().text_range(), index.to_string());\n+                        edit.replace(r.range, index.to_string());\n                     }\n                 }\n             }\n@@ -813,6 +839,141 @@ use crate::{A::Variant, Inner};\n fn f() {\n     let a = Variant(Inner);\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn field_access_inside_macro_call() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+struct $0Struct {\n+    inner: i32,\n+}\n+\n+macro_rules! id {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test(c: Struct) {\n+    id!(c.inner);\n+}\n+\"#,\n+            r#\"\n+struct Struct(i32);\n+\n+macro_rules! id {\n+    ($e:expr) => { $e }\n+}\n+\n+fn test(c: Struct) {\n+    id!(c.0);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn struct_usage_inside_macro_call() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+macro_rules! id {\n+    ($($t:tt)*) => { $($t)* }\n+}\n+\n+struct $0Struct {\n+    inner: i32,\n+}\n+\n+fn test() {\n+    id! {\n+        let s = Struct {\n+            inner: 42,\n+        };\n+        let Struct { inner: value } = s;\n+        let Struct { inner } = s;\n+    }\n+}\n+\"#,\n+            r#\"\n+macro_rules! id {\n+    ($($t:tt)*) => { $($t)* }\n+}\n+\n+struct Struct(i32);\n+\n+fn test() {\n+    id! {\n+        let s = Struct(42);\n+        let Struct(value) = s;\n+        let Struct(inner) = s;\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_name_ref_may_not_be_part_of_struct_expr_or_struct_pat() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+struct $0Struct {\n+    inner: i32,\n+}\n+struct Outer<T> {\n+    value: T,\n+}\n+fn foo<T>() -> T { loop {} }\n+\n+fn test() {\n+    Outer {\n+        value: foo::<Struct>();\n+    }\n+}\n+\n+trait HasAssoc {\n+    type Assoc;\n+    fn test();\n+}\n+impl HasAssoc for Struct {\n+    type Assoc = Outer<i32>;\n+    fn test() {\n+        let a = Self::Assoc {\n+            value: 42,\n+        };\n+        let Self::Assoc { value } = a;\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Struct(i32);\n+struct Outer<T> {\n+    value: T,\n+}\n+fn foo<T>() -> T { loop {} }\n+\n+fn test() {\n+    Outer {\n+        value: foo::<Struct>();\n+    }\n+}\n+\n+trait HasAssoc {\n+    type Assoc;\n+    fn test();\n+}\n+impl HasAssoc for Struct {\n+    type Assoc = Outer<i32>;\n+    fn test() {\n+        let a = Self::Assoc {\n+            value: 42,\n+        };\n+        let Self::Assoc { value } = a;\n+    }\n+}\n \"#,\n         );\n     }"}]}