{"sha": "1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjBjMjkzYzE2ZGQ2MTA5M2E5YjdlOGUzYzQ0MWRmNmI1OWVhOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-01T14:50:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-01T14:50:51Z"}, "message": "Auto merge of #25025 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #24979, #24980, #24981, #24982, #24983, #24987, #24988, #24991, #24992, #24994, #24998, #25002, #25010, #25014, #25020, #25021\n- Failed merges:", "tree": {"sha": "474df956d29dcc2a2409e179c8b1d6bd5741c56a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474df956d29dcc2a2409e179c8b1d6bd5741c56a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "html_url": "https://github.com/rust-lang/rust/commit/1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecf3d8b659c1f5bc457a5a146357ba484e27346", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecf3d8b659c1f5bc457a5a146357ba484e27346", "html_url": "https://github.com/rust-lang/rust/commit/aecf3d8b659c1f5bc457a5a146357ba484e27346"}, {"sha": "616b94b66c20085e81ed43e450e78207177f54c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/616b94b66c20085e81ed43e450e78207177f54c6", "html_url": "https://github.com/rust-lang/rust/commit/616b94b66c20085e81ed43e450e78207177f54c6"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "3918a558cb330ba02a7865542d3a7dcffdc58cd7", "filename": "src/doc/reference.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -1557,8 +1557,7 @@ warnings are generated, or otherwise \"you used a private item of another module\n and weren't allowed to.\"\n \n By default, everything in Rust is *private*, with one exception. Enum variants\n-in a `pub` enum are also public by default. You are allowed to alter this\n-default visibility with the `priv` keyword. When an item is declared as `pub`,\n+in a `pub` enum are also public by default. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ```\n@@ -2426,11 +2425,18 @@ Tuples are written by enclosing zero or more comma-separated expressions in\n parentheses. They are used to create [tuple-typed](#tuple-types) values.\n \n ```{.tuple}\n-(0,);\n (0.0, 4.5);\n (\"a\", 4usize, true);\n ```\n \n+You can disambiguate a single-element tuple from a value in parentheses with a\n+comma:\n+\n+```\n+(0,); // single-element tuple\n+(0); // zero in parentheses\n+```\n+\n ### Unit expressions\n \n The expression `()` denotes the _unit value_, the only value of the type with"}, {"sha": "63496471b5a0141b2b900fe79e4ffa038d6488bb", "filename": "src/doc/trpl/attributes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fattributes.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -67,4 +67,4 @@ Rust attributes are used for a number of different things. There is a full list\n of attributes [in the reference][reference]. Currently, you are not allowed to\n create your own attributes, the Rust compiler defines them.\n \n-[reference]: reference.html#attributes\n+[reference]: ../reference.html#attributes"}, {"sha": "be0c87319b37cb22c2cbac081bbcdeff2a90095f", "filename": "src/doc/trpl/const-and-static.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconst-and-static.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -19,18 +19,16 @@ this reason.\n # `static`\n \n Rust provides a \u2018global variable\u2019 sort of facility in static items. They\u2019re\n-similar to [constants][const], but static items aren\u2019t inlined upon use. This\n-means that there is only one instance for each value, and it\u2019s at a fixed\n-location in memory.\n+similar to constants, but static items aren\u2019t inlined upon use. This means that\n+there is only one instance for each value, and it\u2019s at a fixed location in\n+memory.\n \n Here\u2019s an example:\n \n ```rust\n static N: i32 = 5;\n ```\n \n-[const]: const.html\n-\n Unlike [`let`][let] bindings, you must annotate the type of a `static`.\n \n [let]: variable-bindings.html"}, {"sha": "76f6a4243a0621054f2dc9c8cd538f40b24cc089", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -235,26 +235,15 @@ Ranges are one of two basic iterators that you'll see. The other is `iter()`.\n in turn:\n \n ```rust\n-let nums = [1, 2, 3];\n+let nums = vec![1, 2, 3];\n \n for num in nums.iter() {\n    println!(\"{}\", num);\n }\n ```\n \n These two basic iterators should serve you well. There are some more\n-advanced iterators, including ones that are infinite. Like using range syntax\n-and `step_by`:\n-\n-```rust\n-# #![feature(step_by)]\n-(1..).step_by(5);\n-```\n-\n-This iterator counts up from one, adding five each time. It will give\n-you a new integer every time, forever (well, technically, until it reaches the\n-maximum number representable by an `i32`). But since iterators are lazy,\n-that's okay! You probably don't want to use `collect()` on it, though...\n+advanced iterators, including ones that are infinite.\n \n That's enough about iterators. Iterator adapters are the last concept\n we need to talk about with regards to iterators. Let's get to it!"}, {"sha": "1cb62e8b2d3e9edb7f81f2e30966f96e2a9df0d1", "filename": "src/doc/trpl/nightly-rust.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fnightly-rust.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -93,8 +93,7 @@ If not, there are a number of places where you can get help. The easiest is\n [the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n [Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n (a silly nickname we call ourselves), and we can help you out. Other great\n-resources include [the user\u2019s forum][users], and [Stack Overflow][stack\n-overflow].\n+resources include [the user\u2019s forum][users], and [Stack Overflow][stack overflow].\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust"}, {"sha": "e017e222c74177b6f80a7b529220405e8ac136fe", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -248,6 +248,14 @@ or \u201cbreaks up\u201d the tuple, and assigns the bits to three bindings.\n \n This pattern is very powerful, and we\u2019ll see it repeated more later.\n \n+You can disambiguate a single-element tuple from a value in parentheses with a\n+comma:\n+\n+```\n+(0,); // single-element tuple\n+(0); // zero in parentheses\n+```\n+\n ## Tuple Indexing\n \n You can also access fields of a tuple with indexing syntax:"}, {"sha": "4a37af3c227827f779157a1d2f44dcb54df03126", "filename": "src/doc/trpl/raw-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fraw-pointers.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -80,7 +80,7 @@ Raw pointers are useful for FFI: Rust\u2019s `*const T` and `*mut T` are similar to\n C\u2019s `const T*` and `T*`, respectfully. For more about this use, consult the\n [FFI chapter][ffi].\n \n-[ffi]: ffi.md\n+[ffi]: ffi.html\n \n # References and raw pointers\n "}, {"sha": "fdb9c33a2b0b5d7676c967eb4bf19c324b953f9b", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -101,7 +101,7 @@ Rust has a feature called \u2018`static mut`\u2019 which allows for mutable global sta\n Doing so can cause a data race, and as such is inherently not safe. For more\n details, see the [static][static] section of the book.\n \n-[static]: static.html\n+[static]: const-and-static.html#static\n \n ## Dereference a raw pointer\n "}, {"sha": "b1a2bb5d4172f16ef56e7279ac7ed8dba2d46b3d", "filename": "src/doc/trpl/unsized-types.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Fdoc%2Ftrpl%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsized-types.md?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -38,9 +38,11 @@ impl Foo for &str {\n ```\n \n Meaning, this implementation would only work for [references][ref], and not\n-other types of pointers. With this `impl`, all pointers, including (at some\n-point, there are some bugs to fix first) user-defined custom smart pointers,\n-can use this `impl`.\n+other types of pointers. With the `impl for str`, all pointers, including (at\n+some point, there are some bugs to fix first) user-defined custom smart\n+pointers, can use this `impl`.\n+\n+[ref]: references-and-borrowing.html\n \n # ?Sized\n "}, {"sha": "80fa6d397c82911852f24658c2ae572cbc80cb6f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -398,7 +398,7 @@\n //! longer than this width, then it is truncated down to this many characters and only those are\n //! emitted.\n //!\n-//! For integral types, this has no meaning currently.\n+//! For integral types, this is ignored.\n //!\n //! For floating-point types, this indicates how many digits after the decimal point should be\n //! printed."}, {"sha": "22f4e8546554de03aaf11058873e2cfa8d470720", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -113,12 +113,14 @@ macro_rules! int_impl {\n      $mul_with_overflow:path) => {\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[inline]\n         pub fn min_value() -> $T {\n             (-1 as $T) << ($BITS - 1)\n         }\n \n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[inline]\n         pub fn max_value() -> $T {\n             let min = $T::min_value(); !min\n         }"}, {"sha": "014991f7ea560e377aeb751014bb65e05e67fb1d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -899,7 +899,7 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 if let ast::MethodImplItem(ref sig, _) = ii.node {\n                     // if the method specifies a visibility, use that, otherwise\n                     // inherit the visibility from the impl (so `foo` in `pub impl\n-                    // { fn foo(); }` is public, but private in `priv impl { fn\n+                    // { fn foo(); }` is public, but private in `impl { fn\n                     // foo(); }`).\n                     let method_vis = ii.vis.inherit_from(parent_visibility);\n                     Some((sig, ii.id, ii.ident, method_vis, ii.span))"}, {"sha": "f4c85f18a7e6795fc4b17fdaa9b7ed91b0037a9c", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -525,7 +525,7 @@ pub struct Utf16Encoder<I> {\n }\n \n impl<I> Utf16Encoder<I> {\n-    /// Create an UTF-16 encoder from any `char` iterator.\n+    /// Create a UTF-16 encoder from any `char` iterator.\n     pub fn new(chars: I) -> Utf16Encoder<I> where I: Iterator<Item=char> {\n         Utf16Encoder { chars: chars, extra: 0 }\n     }"}, {"sha": "facf33de6bb635e5d8cb77c6ec82e260917b9f7d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -27,7 +27,7 @@ use sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT, Ordering};\n use sync::{StaticMutex, MUTEX_INIT};\n use sys::os as os_imp;\n \n-/// Returns the current working directory as a `Path`.\n+/// Returns the current working directory as a `PathBuf`.\n ///\n /// # Errors\n ///"}, {"sha": "5a05c61e064df5b93ec6f171e2a98fd96a633f7b", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -643,7 +643,7 @@ impl Permissions {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n+    /// let f = try!(File::create(\"foo.txt\"));\n     /// let metadata = try!(f.metadata());\n     /// let mut permissions = metadata.permissions();\n     ///"}, {"sha": "9089b417fcb99422082d9f86f1e66d6810db0b39", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -236,7 +236,7 @@ pub trait Read {\n \n     /// Transforms this `Read` instance to an `Iterator` over `char`s.\n     ///\n-    /// This adaptor will attempt to interpret this reader as an UTF-8 encoded\n+    /// This adaptor will attempt to interpret this reader as a UTF-8 encoded\n     /// sequence of characters. The returned iterator will return `None` once\n     /// EOF is reached for this reader. Otherwise each element yielded will be a\n     /// `Result<char, E>` where `E` may contain information about what I/O error"}, {"sha": "86522cc1e795cf5d1f860282d0cf49f11e1e95ec", "filename": "src/libstd/os/dragonfly/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -11,7 +11,7 @@\n //! Dragonfly-specific raw type definitions\n \n use os::raw::c_long;\n-use os::unix::raw::{pid_t, uid_t, gid_t};\n+use os::unix::raw::{uid_t, gid_t};\n \n pub type blkcnt_t = i64;\n pub type blksize_t = u32;"}, {"sha": "a3b95738a1a1a1e2c1c3f042ee4ba3a4c8c71075", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -11,7 +11,7 @@\n //! FreeBSD-specific raw type definitions\n \n use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t, pid_t};\n+use os::unix::raw::{uid_t, gid_t};\n \n pub type blkcnt_t = i64;\n pub type blksize_t = i64;"}, {"sha": "a66e01b2c39922c33185f70b58b3ae18b0eaa15e", "filename": "src/libstd/os/ios/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fraw.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -11,7 +11,7 @@\n //! iOS-specific raw type definitions\n \n use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t, pid_t};\n+use os::unix::raw::{uid_t, gid_t};\n \n pub type blkcnt_t = i64;\n pub type blksize_t = i32;"}, {"sha": "0bdba9e3487f1c14acb1f2ecd749d1dbaf3e1c4f", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -11,7 +11,7 @@\n //! OpenBSD-specific raw type definitions\n \n use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t, pid_t};\n+use os::unix::raw::{uid_t, gid_t};\n \n pub type blkcnt_t = i64;\n pub type blksize_t = u32;"}, {"sha": "cb9239ed7ba57032fb320a6614d68adac27ee1b3", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -161,7 +161,7 @@ impl Wtf8Buf {\n         Wtf8Buf { bytes: Vec::with_capacity(n) }\n     }\n \n-    /// Creates a WTF-8 string from an UTF-8 `String`.\n+    /// Creates a WTF-8 string from a UTF-8 `String`.\n     ///\n     /// This takes ownership of the `String` and does not copy.\n     ///\n@@ -171,7 +171,7 @@ impl Wtf8Buf {\n         Wtf8Buf { bytes: string.into_bytes() }\n     }\n \n-    /// Creates a WTF-8 string from an UTF-8 `&str` slice.\n+    /// Creates a WTF-8 string from a UTF-8 `&str` slice.\n     ///\n     /// This copies the content of the slice.\n     ///\n@@ -245,7 +245,7 @@ impl Wtf8Buf {\n         self.bytes.capacity()\n     }\n \n-    /// Append an UTF-8 slice at the end of the string.\n+    /// Append a UTF-8 slice at the end of the string.\n     #[inline]\n     pub fn push_str(&mut self, other: &str) {\n         self.bytes.push_all(other.as_bytes())\n@@ -527,7 +527,7 @@ impl Wtf8 {\n     }\n \n     /// Lossily converts the string to UTF-8.\n-    /// Returns an UTF-8 `&str` slice if the contents are well-formed in UTF-8.\n+    /// Returns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.\n     ///\n     /// Surrogates are replaced with `\"\\u{FFFD}\"` (the replacement character \u201c\ufffd\u201d).\n     ///"}, {"sha": "a7b1beace51d31de0ccb7473d39640a33504e164", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -4775,7 +4775,7 @@ impl<'a> Parser<'a> {\n         return self.parse_single_struct_field(Inherited, attrs);\n     }\n \n-    /// Parse visibility: PUB, PRIV, or nothing\n+    /// Parse visibility: PUB or nothing\n     fn parse_visibility(&mut self) -> PResult<Visibility> {\n         if try!(self.eat_keyword(keywords::Pub)) { Ok(Public) }\n         else { Ok(Inherited) }"}, {"sha": "c9b684fd656940a8db975ef9758ff3eda5b35aca", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1320c293c16dd61093a9b7e8e3c441df6b59ea9e/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "patch": "@@ -28,7 +28,7 @@ enum Result {\n   Status(String)\n }\n \n-priv fn parse_data(len: usize, io: @io::Reader) -> Result {\n+fn parse_data(len: usize, io: @io::Reader) -> Result {\n   let res =\n       if (len > 0) {\n       let bytes = io.read_bytes(len as usize);\n@@ -42,7 +42,7 @@ priv fn parse_data(len: usize, io: @io::Reader) -> Result {\n   return res;\n }\n \n-priv fn parse_list(len: usize, io: @io::Reader) -> Result {\n+fn parse_list(len: usize, io: @io::Reader) -> Result {\n     let mut list: ~[Result] = ~[];\n     for _ in 0..len {\n         let v = match io.read_char() {\n@@ -55,11 +55,11 @@ priv fn parse_list(len: usize, io: @io::Reader) -> Result {\n     return List(list);\n }\n \n-priv fn chop(s: String) -> String {\n+fn chop(s: String) -> String {\n   s.slice(0, s.len() - 1).to_string()\n }\n \n-priv fn parse_bulk(io: @io::Reader) -> Result {\n+fn parse_bulk(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(-1) => Nil,\n@@ -68,7 +68,7 @@ priv fn parse_bulk(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn parse_multi(io: @io::Reader) -> Result {\n+fn parse_multi(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(-1) => Nil,\n@@ -78,14 +78,14 @@ priv fn parse_multi(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn parse_int(io: @io::Reader) -> Result {\n+fn parse_int(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(i) => Int(i)\n     }\n }\n \n-priv fn parse_response(io: @io::Reader) -> Result {\n+fn parse_response(io: @io::Reader) -> Result {\n     match io.read_char() {\n     '$' => parse_bulk(io),\n     '*' => parse_multi(io),\n@@ -96,7 +96,7 @@ priv fn parse_response(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn cmd_to_string(cmd: ~[String]) -> String {\n+fn cmd_to_string(cmd: ~[String]) -> String {\n   let mut res = \"*\".to_string();\n   res.push_str(cmd.len().to_string());\n   res.push_str(\"\\r\\n\");"}]}