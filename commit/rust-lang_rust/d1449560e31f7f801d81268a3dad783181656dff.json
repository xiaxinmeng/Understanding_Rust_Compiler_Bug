{"sha": "d1449560e31f7f801d81268a3dad783181656dff", "node_id": "C_kwDOAAsO6NoAKGQxNDQ5NTYwZTMxZjdmODAxZDgxMjY4YTNkYWQ3ODMxODE2NTZkZmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T22:46:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T22:46:11Z"}, "message": "Auto merge of #105094 - Swatinem:generator-not-future, r=compiler-errors\n\nMake sure async constructs do not `impl Generator`\n\nAsync lowering turns async functions and blocks into generators internally.\nThough these special kinds of generators should not `impl Generator` themselves.\nThe other way around, normal generators should not `impl Future`.\n\nThis was discovered in https://github.com/rust-lang/rust/pull/105082#issuecomment-1332210907 and is a regression from https://github.com/rust-lang/rust/pull/104321.\n\nr? `@compiler-errors`", "tree": {"sha": "d56ddb5e322b58132ce5e60aa5bfa6774b551a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56ddb5e322b58132ce5e60aa5bfa6774b551a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1449560e31f7f801d81268a3dad783181656dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1449560e31f7f801d81268a3dad783181656dff", "html_url": "https://github.com/rust-lang/rust/commit/d1449560e31f7f801d81268a3dad783181656dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1449560e31f7f801d81268a3dad783181656dff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "html_url": "https://github.com/rust-lang/rust/commit/53e4b9dd74c29cc9308b8d0f10facac70bb101a7"}, {"sha": "b5ae4c9629f697034fb93f660202f354f13b74c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ae4c9629f697034fb93f660202f354f13b74c3", "html_url": "https://github.com/rust-lang/rust/commit/b5ae4c9629f697034fb93f660202f354f13b74c3"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "e4b70f0d2ffa7afbfc54dbf7fdaa252400ef1226", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1449560e31f7f801d81268a3dad783181656dff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1449560e31f7f801d81268a3dad783181656dff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d1449560e31f7f801d81268a3dad783181656dff", "patch": "@@ -203,7 +203,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // type/region parameters.\n         let self_ty = obligation.self_ty().skip_binder();\n         match self_ty.kind() {\n-            ty::Generator(..) => {\n+            // async constructs get lowered to a special kind of generator that\n+            // should *not* `impl Generator`.\n+            ty::Generator(did, ..) if !self.tcx().generator_is_async(*did) => {\n                 debug!(?self_ty, ?obligation, \"assemble_generator_candidates\",);\n \n                 candidates.vec.push(GeneratorCandidate);\n@@ -223,6 +225,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         let self_ty = obligation.self_ty().skip_binder();\n         if let ty::Generator(did, ..) = self_ty.kind() {\n+            // async constructs get lowered to a special kind of generator that\n+            // should directly `impl Future`.\n             if self.tcx().generator_is_async(*did) {\n                 debug!(?self_ty, ?obligation, \"assemble_future_candidates\",);\n "}, {"sha": "37d7cfa6fb7a37aa20ebc991c91bc06812e20acd", "filename": "src/test/ui/async-await/generator-not-future.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d1449560e31f7f801d81268a3dad783181656dff/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1449560e31f7f801d81268a3dad783181656dff/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.rs?ref=d1449560e31f7f801d81268a3dad783181656dff", "patch": "@@ -0,0 +1,45 @@\n+// edition:2018\n+#![feature(generators, generator_trait)]\n+\n+use std::future::Future;\n+use std::ops::Generator;\n+\n+async fn async_fn() {}\n+fn returns_async_block() -> impl Future<Output = ()> {\n+    async {}\n+}\n+fn returns_generator() -> impl Generator<(), Yield = (), Return = ()> {\n+    || {\n+        let _: () = yield ();\n+    }\n+}\n+\n+fn takes_future(_f: impl Future<Output = ()>) {}\n+fn takes_generator<ResumeTy>(_g: impl Generator<ResumeTy, Yield = (), Return = ()>) {}\n+\n+fn main() {\n+    // okay:\n+    takes_future(async_fn());\n+    takes_future(returns_async_block());\n+    takes_future(async {});\n+    takes_generator(returns_generator());\n+    takes_generator(|| {\n+        let _: () = yield ();\n+    });\n+\n+    // async futures are not generators:\n+    takes_generator(async_fn());\n+    //~^ ERROR the trait bound\n+    takes_generator(returns_async_block());\n+    //~^ ERROR the trait bound\n+    takes_generator(async {});\n+    //~^ ERROR the trait bound\n+\n+    // generators are not futures:\n+    takes_future(returns_generator());\n+    //~^ ERROR is not a future\n+    takes_future(|ctx| {\n+        //~^ ERROR is not a future\n+        ctx = yield ();\n+    });\n+}"}, {"sha": "1b81b461f0aadb95fb3dc5240ff2ed961cfc35f0", "filename": "src/test/ui/async-await/generator-not-future.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d1449560e31f7f801d81268a3dad783181656dff/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1449560e31f7f801d81268a3dad783181656dff/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-not-future.stderr?ref=d1449560e31f7f801d81268a3dad783181656dff", "patch": "@@ -0,0 +1,81 @@\n+error[E0277]: the trait bound `impl Future<Output = ()>: Generator<_>` is not satisfied\n+  --> $DIR/generator-not-future.rs:31:21\n+   |\n+LL |     takes_generator(async_fn());\n+   |     --------------- ^^^^^^^^^^ the trait `Generator<_>` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `takes_generator`\n+  --> $DIR/generator-not-future.rs:18:39\n+   |\n+LL | fn takes_generator<ResumeTy>(_g: impl Generator<ResumeTy, Yield = (), Return = ()>) {}\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `takes_generator`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Generator<_>` is not satisfied\n+  --> $DIR/generator-not-future.rs:33:21\n+   |\n+LL |     takes_generator(returns_async_block());\n+   |     --------------- ^^^^^^^^^^^^^^^^^^^^^ the trait `Generator<_>` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `takes_generator`\n+  --> $DIR/generator-not-future.rs:18:39\n+   |\n+LL | fn takes_generator<ResumeTy>(_g: impl Generator<ResumeTy, Yield = (), Return = ()>) {}\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `takes_generator`\n+\n+error[E0277]: the trait bound `[async block@$DIR/generator-not-future.rs:35:21: 35:29]: Generator<_>` is not satisfied\n+  --> $DIR/generator-not-future.rs:35:21\n+   |\n+LL |     takes_generator(async {});\n+   |     --------------- ^^^^^^^^ the trait `Generator<_>` is not implemented for `[async block@$DIR/generator-not-future.rs:35:21: 35:29]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `takes_generator`\n+  --> $DIR/generator-not-future.rs:18:39\n+   |\n+LL | fn takes_generator<ResumeTy>(_g: impl Generator<ResumeTy, Yield = (), Return = ()>) {}\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `takes_generator`\n+\n+error[E0277]: `impl Generator<Yield = (), Return = ()>` is not a future\n+  --> $DIR/generator-not-future.rs:39:18\n+   |\n+LL |     takes_future(returns_generator());\n+   |     ------------ ^^^^^^^^^^^^^^^^^^^ `impl Generator<Yield = (), Return = ()>` is not a future\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Future` is not implemented for `impl Generator<Yield = (), Return = ()>`\n+   = note: impl Generator<Yield = (), Return = ()> must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `takes_future`\n+  --> $DIR/generator-not-future.rs:17:26\n+   |\n+LL | fn takes_future(_f: impl Future<Output = ()>) {}\n+   |                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `takes_future`\n+\n+error[E0277]: `[generator@$DIR/generator-not-future.rs:41:18: 41:23]` is not a future\n+  --> $DIR/generator-not-future.rs:41:18\n+   |\n+LL |       takes_future(|ctx| {\n+   |  _____------------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         ctx = yield ();\n+LL | |     });\n+   | |_____^ `[generator@$DIR/generator-not-future.rs:41:18: 41:23]` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `[generator@$DIR/generator-not-future.rs:41:18: 41:23]`\n+   = note: [generator@$DIR/generator-not-future.rs:41:18: 41:23] must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `takes_future`\n+  --> $DIR/generator-not-future.rs:17:26\n+   |\n+LL | fn takes_future(_f: impl Future<Output = ()>) {}\n+   |                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `takes_future`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}