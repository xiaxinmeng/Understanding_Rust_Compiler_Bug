{"sha": "da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzQxOWUxOGM2OGY0ZWI4YmViMzc2NWZjOWZkZTRjMmU2ODlkNDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-22T16:49:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-04T22:33:43Z"}, "message": "rustc_interface: Hide some hacky details of early linting from expand", "tree": {"sha": "2c17c8d245b244609b6d787dd2b0b292bf3115e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c17c8d245b244609b6d787dd2b0b292bf3115e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "html_url": "https://github.com/rust-lang/rust/commit/da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b67aa74d8ee7d9c41983e15f8cd0f17ee27ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b67aa74d8ee7d9c41983e15f8cd0f17ee27ae7", "html_url": "https://github.com/rust-lang/rust/commit/46b67aa74d8ee7d9c41983e15f8cd0f17ee27ae7"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "05c01deef5e1e1154f6100684beab49c30ad4544", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Nonterminal};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, LazyTokenStream, TokenStream};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n-use rustc_ast::{self as ast, AstLike, Attribute, NodeId, PatKind};\n+use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n@@ -925,6 +925,9 @@ pub struct ExpansionData {\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n+type OnExternModLoaded<'a> =\n+    Option<&'a dyn Fn(Ident, Vec<Attribute>, Vec<P<Item>>, Span) -> (Vec<Attribute>, Vec<P<Item>>)>;\n+\n /// One of these is made during expansion and incrementally updated as we go;\n /// when a macro expansion occurs, the resulting nodes have the `backtrace()\n /// -> expn_data` of their expansion context stored into their span.\n@@ -942,15 +945,15 @@ pub struct ExtCtxt<'a> {\n     /// Called directly after having parsed an external `mod foo;` in expansion.\n     ///\n     /// `Ident` is the module name.\n-    pub(super) extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate, Ident)>,\n+    pub(super) extern_mod_loaded: OnExternModLoaded<'a>,\n }\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         sess: &'a Session,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn ResolverExpand,\n-        extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate, Ident)>,\n+        extern_mod_loaded: OnExternModLoaded<'a>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             sess,"}, {"sha": "a42a60fe9a52b28ca7ba73ad5e529b4df8e52354", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "patch": "@@ -1298,7 +1298,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     ModKind::Unloaded => {\n                         // We have an outline `mod foo;` so we need to parse the file.\n                         let ParsedExternalMod {\n-                            items,\n+                            mut items,\n                             inner_span,\n                             file_path,\n                             dir_path,\n@@ -1312,14 +1312,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                             &mut attrs,\n                         );\n \n-                        let krate =\n-                            ast::Crate { attrs, items, span: inner_span, proc_macros: vec![] };\n                         if let Some(extern_mod_loaded) = self.cx.extern_mod_loaded {\n-                            extern_mod_loaded(&krate, ident);\n+                            (attrs, items) = extern_mod_loaded(ident, attrs, items, inner_span);\n                         }\n \n-                        *mod_kind = ModKind::Loaded(krate.items, Inline::No, inner_span);\n-                        item.attrs = krate.attrs;\n+                        *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);\n+                        item.attrs = attrs;\n                         // File can have inline attributes, e.g., `#![cfg(...)]` & co. => Reconfigure.\n                         item = configure!(self, item);\n                         (Some(file_path), dir_path, dir_ownership)"}, {"sha": "bcccb04c9efd3c25d31ff54d617b1b6be05790c1", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "patch": "@@ -1,5 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(destructuring_assignment)]\n #![feature(or_patterns)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "8328c07fbb730f0e4a8f8131526904fa28016ebe", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3419e18c68f4eb8beb3765fc9fde4c2e689d43/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "patch": "@@ -302,8 +302,10 @@ fn configure_and_expand_inner<'a>(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let extern_mod_loaded = |k: &ast::Crate, ident: Ident| {\n-            pre_expansion_lint(sess, lint_store, k, &*ident.name.as_str())\n+        let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n+            let krate = ast::Crate { attrs, items, span, proc_macros: vec![] };\n+            pre_expansion_lint(sess, lint_store, &krate, &ident.name.as_str());\n+            (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(&sess, cfg, &mut resolver, Some(&extern_mod_loaded));\n "}]}