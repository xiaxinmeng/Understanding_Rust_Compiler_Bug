{"sha": "237a01d116e666618ebf5cc5f5b704352c4fb276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzN2EwMWQxMTZlNjY2NjE4ZWJmNWNjNWY1YjcwNDM1MmM0ZmIyNzY=", "commit": {"author": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-11T19:26:25Z"}, "committer": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-16T03:20:51Z"}, "message": "Update documentation for adding new lints\n\n- Add instructions for adding new lints with\n  the new automation", "tree": {"sha": "a982dc62f53ff8097b83386d7aa057b996a39bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a982dc62f53ff8097b83386d7aa057b996a39bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237a01d116e666618ebf5cc5f5b704352c4fb276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237a01d116e666618ebf5cc5f5b704352c4fb276", "html_url": "https://github.com/rust-lang/rust/commit/237a01d116e666618ebf5cc5f5b704352c4fb276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237a01d116e666618ebf5cc5f5b704352c4fb276/comments", "author": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea82cbe790a706a62389d481f9927b8ced372f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea82cbe790a706a62389d481f9927b8ced372f3b", "html_url": "https://github.com/rust-lang/rust/commit/ea82cbe790a706a62389d481f9927b8ced372f3b"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "6fd052893bfce9c8c56430f4b63120a4c5b401f5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/237a01d116e666618ebf5cc5f5b704352c4fb276/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/237a01d116e666618ebf5cc5f5b704352c4fb276/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=237a01d116e666618ebf5cc5f5b704352c4fb276", "patch": "@@ -9,6 +9,7 @@ because that's clearly a non-descriptive name.\n \n - [Adding a new lint](#adding-a-new-lint)\n   - [Setup](#setup)\n+  - [Getting Started](#getting-started)\n   - [Testing](#testing)\n   - [Rustfix tests](#rustfix-tests)\n   - [Edition 2018 tests](#edition-2018-tests)\n@@ -31,6 +32,19 @@ which can change rapidly. Make sure you're working near rust-clippy's master,\n and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n for the Clippy directory.\n \n+### Getting Started\n+\n+There is a bit of boilerplate code that needs to be set up when creating a new\n+lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n+are naming our new lint `foo_functions` (lints are generally written in snake\n+case), and we don't need type information so it will have an early pass type\n+(more on this later on). To get started on this lint you can run\n+`./util/dev new_lint --name=foo_functions --pass=early --category=pedantic`\n+(category will default to nursery if not provided). This command will create\n+two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n+as well as run `./util/dev update_lints` to register the new lint. Next, we'll\n+open up these files and add our lint!\n+\n ### Testing\n \n Let's write some tests first that we can execute while we iterate on our lint.\n@@ -41,11 +55,9 @@ we want to check. The output of Clippy is compared against a `.stderr` file.\n Note that you don't have to create this file yourself, we'll get to\n generating the `.stderr` files further down.\n \n-We start by creating the test file at `tests/ui/foo_functions.rs`. It doesn't\n-really matter what the file is called, but it's a good convention to name it\n-after the lint it is testing, so `foo_functions.rs` it is.\n+We start by opening the test file created at `tests/ui/foo_functions.rs`. \n \n-Inside the file we put some examples to get started:\n+Update the file with some examples to get started:\n \n ```rust\n #![warn(clippy::foo_functions)]\n@@ -90,8 +102,8 @@ Once we are satisfied with the output, we need to run\n `tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n every time before running `tests/ui/update-all-references.sh`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we\n-commit our lint, we need to commit the generated `.stderr` files, too.\n+Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit \n+our lint, we need to commit the generated `.stderr` files, too.\n \n ### Rustfix tests\n \n@@ -121,26 +133,42 @@ With tests in place, let's have a look at implementing our lint now.\n \n ### Lint declaration\n \n-We start by creating a new file in the `clippy_lints` crate. That's the crate\n-where all the lint code is. We are going to call the file\n-`clippy_lints/src/foo_functions.rs` and import some initial things we need:\n+Let's start by opening the new file created in the `clippy_lints` crate \n+at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n+lint code is. This file has already imported some initial things we will need:\n \n ```rust\n-use rustc::lint::{LintArray, LintPass, EarlyLintPass};\n+use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use syntax::ast::*;\n ```\n \n-The next step is to provide a lint declaration. Lints are declared using the\n-[`declare_clippy_lint!`][declare_clippy_lint] macro:\n+The next step is to update the lint declaration. Lints are declared using the\n+[`declare_clippy_lint!`][declare_clippy_lint] macro, and we just need to update\n+the auto-generated lint declaration to have a real description, something like this:\n \n ```rust\n declare_clippy_lint! {\n+    /// **What it does:**\n+    ///\n+    /// **Why is this bad?**\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code\n+    /// ```\n     pub FOO_FUNCTIONS,\n     pedantic,\n     \"function named `foo`, which is not a descriptive name\"\n }\n ```\n \n+* The section of lines prefixed with `///` constitutes the lint documentation\n+section. This is the default documentation style and will be displayed at\n+https://rust-lang.github.io/rust-clippy/master/index.html.\n * `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n guidelines][lint_naming] here when naming your lint. In short, the name should\n state the thing that is being checked for and read well when used with\n@@ -150,8 +178,8 @@ state the thing that is being checked for and read well when used with\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-With our lint declaration done, we will now make sure that it is assigned to a\n-lint pass:\n+The rest of this file contains an empty implementation for our lint pass, \n+which in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -166,12 +194,9 @@ impl EarlyLintPass for FooFunctions {}\n Don't worry about the `name` method here. As long as it includes the name of the\n lint pass it should be fine.\n \n-Next we need to run `util/dev update_lints` to register the lint in various\n-places, mainly in `clippy_lints/src/lib.rs`.\n-\n-While `update_lints` automates some things, it doesn't automate everything. We\n-will have to register our lint pass manually in the `register_plugins` function\n-in `clippy_lints/src/lib.rs`:\n+The new lint automation runs `update_lints`, which automates some things, but it \n+doesn't automate everything. We will have to register our lint pass manually in\n+the `register_plugins` function in `clippy_lints/src/lib.rs`:\n \n ```rust\n reg.register_early_lint_pass(box foo_functions::FooFunctions);\n@@ -195,14 +220,9 @@ In short, the `LateLintPass` has access to type information while the\n `EarlyLintPass`. The `EarlyLintPass` is also faster. However linting speed\n hasn't really been a concern with Clippy so far.\n \n-Since we don't need type information for checking the function name, we are\n-going to use the `EarlyLintPass`. It has to be imported as well, changing our\n-imports to:\n-\n-```rust\n-use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n-use rustc::{declare_tool_lint, lint_array};\n-```\n+Since we don't need type information for checking the function name, we used\n+`--pass=early` when running the new lint automation and all the imports were\n+added accordingly.\n \n ### Emitting a lint\n "}]}