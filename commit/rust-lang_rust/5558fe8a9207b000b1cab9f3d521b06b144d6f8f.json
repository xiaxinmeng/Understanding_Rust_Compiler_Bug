{"sha": "5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NThmZThhOTIwN2IwMDBiMWNhYjlmM2Q1MjFiMDZiMTQ0ZDZmOGY=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-11-01T12:50:36Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-11-02T09:26:17Z"}, "message": "Suggest correct code when encountering an incorrect trait bound referencing the current trait", "tree": {"sha": "77fdc8f2c0fb4cfa8d7aa24baab877c32b8ee8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77fdc8f2c0fb4cfa8d7aa24baab877c32b8ee8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "html_url": "https://github.com/rust-lang/rust/commit/5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "html_url": "https://github.com/rust-lang/rust/commit/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "8bcf51eb9e3c0adc23f01779ff81ac215a3c4586", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "patch": "@@ -43,6 +43,8 @@ pub struct PathSeg(pub DefId, pub usize);\n pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n+    fn item_def_id(&self) -> Option<DefId>;\n+\n     /// Returns predicates in scope of the form `X: Foo`, where `X` is\n     /// a type parameter `X` with the given id `def_id`. This is a\n     /// subset of the full set of predicates.\n@@ -1759,17 +1761,31 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                    -> Ty<'tcx>\n     {\n         let tcx = self.tcx();\n+\n         let trait_def_id = tcx.parent(item_def_id).unwrap();\n \n+        debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n+\n         self.prohibit_generics(slice::from_ref(item_segment));\n \n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty\n         } else {\n             let path_str = tcx.def_path_str(trait_def_id);\n+\n+            // If the trait in segment is the same as the trait defining the item,\n+            // use the `<Self as ..>` syntax in the error.\n+            debug!(\"qpath_to_ty: self.item_def_id()={:?}\",  self.item_def_id());\n+\n+            let type_name = if self.item_def_id() == Some(trait_def_id) {\n+                \"Self\"\n+            } else {\n+                \"Type\"\n+            };\n+\n             self.report_ambiguous_associated_type(\n                 span,\n-                \"Type\",\n+                type_name,\n                 &path_str,\n                 item_segment.ident.name,\n             );"}, {"sha": "a2af29aef094bc22d9efb013af44389d06da3cd0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "patch": "@@ -2279,6 +2279,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        None\n+    }\n+\n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "7ef842cb7579c0a863559cf75a3ae3a8a1c0d95e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "patch": "@@ -182,6 +182,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        Some(self.item_def_id)\n+    }\n+\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)"}, {"sha": "202eecfa7b7f5c10e0829978f92c07c190deb49f", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs?ref=5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "patch": "@@ -12,6 +12,13 @@ trait Grab {\n     //~^ ERROR ambiguous associated type\n }\n \n+trait Bar {}\n+\n+trait Foo where Foo::Assoc: Bar {\n+//~^ ERROR ambiguous associated type\n+    type Assoc;\n+}\n+\n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n "}, {"sha": "db6dec6e899dc2d81a4aa74d4833219ed47b3bc0", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5558fe8a9207b000b1cab9f3d521b06b144d6f8f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "patch": "@@ -5,7 +5,13 @@ LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n    |                                    ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:15:10\n+  --> $DIR/associated-types-in-ambiguous-context.rs:17:17\n+   |\n+LL | trait Foo where Foo::Assoc: Bar {\n+   |                 ^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Foo>::Assoc`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:22:10\n    |\n LL | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n@@ -16,6 +22,6 @@ error[E0223]: ambiguous associated type\n LL |     fn grab(&self) -> Grab::Value;\n    |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Grab>::Value`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0223`."}]}