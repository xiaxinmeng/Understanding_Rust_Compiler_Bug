{"sha": "1d6024e460219d6d012c800107dc8169cf613ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjAyNGU0NjAyMTlkNmQwMTJjODAwMTA3ZGM4MTY5Y2Y2MTNlYzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-24T09:03:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T09:03:40Z"}, "message": "Merge #3695\n\n3695: vscode: simplify and refactor config r=matklad a=Veetaha\n\nRemoved unnecessary interfaces, changed `cfg` to be a getter to ensure the fresh values any time possible.\r\nMigrated from explicit casts to implicit.\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "fb08a36111a925a4fbe4e5924a141ad414d3fb3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb08a36111a925a4fbe4e5924a141ad414d3fb3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d6024e460219d6d012c800107dc8169cf613ec2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeczsCRBK7hj4Ov3rIwAAdHIIAGUfQ7EqOreA9upVDsp2lIdJ\njrmrBJkxMl36GMdD6eplSNriAU5N+OvVxWZdDEIp4ADNyKncoicUfg1Edagcf/0J\nUz/hJF+T1AAxHQGMshyXky1XPSxwLtYWxMx6YoMLXqF4zsb/tjJjKn0O6/qMMIz6\nN5nysK7AnbLHYuTyWu7VQrPT/JX2/7bROWqdkWbSj6Bf3nvqJS9xZXRlfcFoLt1g\n27nSS205FzSlMhYr8l6c4+/0xH7yjyEYOpQGAbgbuo03nIrH9adZfa2C++PLz+yh\nE4EQ6X1DpGknGmrQvaqi5+qZwjEw7QDoT4wc+9oaf9XYAmqygknXnhj9L8X6TQs=\n=l2aq\n-----END PGP SIGNATURE-----\n", "payload": "tree fb08a36111a925a4fbe4e5924a141ad414d3fb3d\nparent c6db6e235219e364d38a31a720cbe3d75f5c8c15\nparent 65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585040620 +0000\ncommitter GitHub <noreply@github.com> 1585040620 +0000\n\nMerge #3695\n\n3695: vscode: simplify and refactor config r=matklad a=Veetaha\n\nRemoved unnecessary interfaces, changed `cfg` to be a getter to ensure the fresh values any time possible.\r\nMigrated from explicit casts to implicit.\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6024e460219d6d012c800107dc8169cf613ec2", "html_url": "https://github.com/rust-lang/rust/commit/1d6024e460219d6d012c800107dc8169cf613ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d6024e460219d6d012c800107dc8169cf613ec2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6db6e235219e364d38a31a720cbe3d75f5c8c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6db6e235219e364d38a31a720cbe3d75f5c8c15", "html_url": "https://github.com/rust-lang/rust/commit/c6db6e235219e364d38a31a720cbe3d75f5c8c15"}, {"sha": "65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "html_url": "https://github.com/rust-lang/rust/commit/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8"}], "stats": {"total": 106, "additions": 45, "deletions": 61}, "files": [{"sha": "7668c20b70dbcf22ccbe0fd7192f1f9ba26ae344", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 45, "deletions": 61, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1d6024e460219d6d012c800107dc8169cf613ec2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1d6024e460219d6d012c800107dc8169cf613ec2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=1d6024e460219d6d012c800107dc8169cf613ec2", "patch": "@@ -1,29 +1,10 @@\n import * as vscode from 'vscode';\n import { log } from \"./util\";\n \n-export interface InlayHintOptions {\n-    typeHints: boolean;\n-    parameterHints: boolean;\n-    maxLength: number | null;\n-}\n-\n-export interface CargoWatchOptions {\n-    enable: boolean;\n-    arguments: string[];\n-    command: string;\n-    allTargets: boolean;\n-}\n-\n-export interface CargoFeatures {\n-    noDefaultFeatures: boolean;\n-    allFeatures: boolean;\n-    features: string[];\n-    loadOutDirsFromCheck: boolean;\n-}\n-\n export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n+\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -44,25 +25,24 @@ export class Config {\n         enableProposedApi: boolean | undefined;\n     } = vscode.extensions.getExtension(this.extensionId)!.packageJSON;\n \n-    private cfg!: vscode.WorkspaceConfiguration;\n+    readonly globalStoragePath: string;\n \n-    constructor(private readonly ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(this.onConfigChange, this, ctx.subscriptions);\n-        this.refreshConfig();\n+    constructor(ctx: vscode.ExtensionContext) {\n+        this.globalStoragePath = ctx.globalStoragePath;\n+        vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n+        this.refreshLogging();\n     }\n \n-    private refreshConfig() {\n-        this.cfg = vscode.workspace.getConfiguration(this.rootSection);\n-        const enableLogging = this.cfg.get(\"trace.extension\") as boolean;\n-        log.setEnabled(enableLogging);\n+    private refreshLogging() {\n+        log.setEnabled(this.traceExtension);\n         log.debug(\n             \"Extension version:\", this.package.version,\n             \"using configuration:\", this.cfg\n         );\n     }\n \n-    private async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n-        this.refreshConfig();\n+    private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n+        this.refreshLogging();\n \n         const requiresReloadOpt = this.requiresReloadOpts.find(\n             opt => event.affectsConfiguration(opt)\n@@ -80,49 +60,53 @@ export class Config {\n         }\n     }\n \n-    get globalStoragePath(): string { return this.ctx.globalStoragePath; }\n-\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n-    get serverPath() { return this.cfg.get(\"serverPath\") as null | string; }\n-    get channel() { return this.cfg.get<\"stable\" | \"nightly\">(\"updates.channel\")!; }\n-    get askBeforeDownload() { return this.cfg.get(\"updates.askBeforeDownload\") as boolean; }\n-    get highlightingSemanticTokens() { return this.cfg.get(\"highlighting.semanticTokens\") as boolean; }\n-    get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n-    get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n-    get lruCapacity() { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    get inlayHints(): InlayHintOptions {\n+    private get cfg(): vscode.WorkspaceConfiguration {\n+        return vscode.workspace.getConfiguration(this.rootSection);\n+    }\n+\n+    get serverPath() { return this.cfg.get<null | string>(\"serverPath\")!; }\n+    get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n+    get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n+    get highlightingSemanticTokens() { return this.cfg.get<boolean>(\"highlighting.semanticTokens\")!; }\n+    get highlightingOn() { return this.cfg.get<boolean>(\"highlightingOn\")!; }\n+    get rainbowHighlightingOn() { return this.cfg.get<boolean>(\"rainbowHighlightingOn\")!; }\n+    get lruCapacity() { return this.cfg.get<null | number>(\"lruCapacity\")!; }\n+    get excludeGlobs() { return this.cfg.get<string[]>(\"excludeGlobs\")!; }\n+    get useClientWatching() { return this.cfg.get<boolean>(\"useClientWatching\")!; }\n+    get featureFlags() { return this.cfg.get<Record<string, boolean>>(\"featureFlags\")!; }\n+    get rustfmtArgs() { return this.cfg.get<string[]>(\"rustfmtArgs\")!; }\n+    get loadOutDirsFromCheck() { return this.cfg.get<boolean>(\"loadOutDirsFromCheck\")!; }\n+    get traceExtension() { return this.cfg.get<boolean>(\"trace.extension\")!; }\n+\n+    // for internal use\n+    get withSysroot() { return this.cfg.get<boolean>(\"withSysroot\", true)!; }\n+\n+    get inlayHints() {\n         return {\n-            typeHints: this.cfg.get(\"inlayHints.typeHints\") as boolean,\n-            parameterHints: this.cfg.get(\"inlayHints.parameterHints\") as boolean,\n-            maxLength: this.cfg.get(\"inlayHints.maxLength\") as null | number,\n+            typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n+            parameterHints: this.cfg.get<boolean>(\"inlayHints.parameterHints\")!,\n+            maxLength: this.cfg.get<null | number>(\"inlayHints.maxLength\")!,\n         };\n     }\n-    get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n-    get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n-    get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n-    get rustfmtArgs() { return this.cfg.get(\"rustfmtArgs\") as string[]; }\n-    get loadOutDirsFromCheck() { return this.cfg.get(\"loadOutDirsFromCheck\") as boolean; }\n \n-    get cargoWatchOptions(): CargoWatchOptions {\n+    get cargoWatchOptions() {\n         return {\n-            enable: this.cfg.get(\"cargo-watch.enable\") as boolean,\n-            arguments: this.cfg.get(\"cargo-watch.arguments\") as string[],\n-            allTargets: this.cfg.get(\"cargo-watch.allTargets\") as boolean,\n-            command: this.cfg.get(\"cargo-watch.command\") as string,\n+            enable: this.cfg.get<boolean>(\"cargo-watch.enable\")!,\n+            arguments: this.cfg.get<string[]>(\"cargo-watch.arguments\")!,\n+            allTargets: this.cfg.get<boolean>(\"cargo-watch.allTargets\")!,\n+            command: this.cfg.get<string>(\"cargo-watch.command\")!,\n         };\n     }\n \n-    get cargoFeatures(): CargoFeatures {\n+    get cargoFeatures() {\n         return {\n-            noDefaultFeatures: this.cfg.get(\"cargoFeatures.noDefaultFeatures\") as boolean,\n-            allFeatures: this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n-            features: this.cfg.get(\"cargoFeatures.features\") as string[],\n-            loadOutDirsFromCheck: this.cfg.get(\"cargoFeatures.loadOutDirsFromCheck\") as boolean,\n+            noDefaultFeatures: this.cfg.get<boolean>(\"cargoFeatures.noDefaultFeatures\")!,\n+            allFeatures: this.cfg.get<boolean>(\"cargoFeatures.allFeatures\")!,\n+            features: this.cfg.get<string[]>(\"cargoFeatures.features\")!,\n+            loadOutDirsFromCheck: this.cfg.get<boolean>(\"cargoFeatures.loadOutDirsFromCheck\")!,\n         };\n     }\n-\n-    // for internal use\n-    get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }"}]}