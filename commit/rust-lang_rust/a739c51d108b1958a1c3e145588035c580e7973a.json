{"sha": "a739c51d108b1958a1c3e145588035c580e7973a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MzljNTFkMTA4YjE5NThhMWMzZTE0NTU4ODAzNWM1ODBlNzk3M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-03T23:54:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-03T23:54:25Z"}, "message": "Auto merge of #51926 - matthewjasper:Initialization-span, r=nikomatsakis\n\n[NLL] Use better span for initializing a variable twice\n\nCloses #51217\n\nWhen assigning to a (projection from a) local immutable local which starts initialised (everything except `let PATTERN;`):\n\n* Point to the declaration of that local\n* Make the error message refer to the local, rather than the projection.\n\nr? @nikomatsakis", "tree": {"sha": "5df02fc666acba494a673808e1c612bcf7e83b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df02fc666acba494a673808e1c612bcf7e83b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a739c51d108b1958a1c3e145588035c580e7973a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a739c51d108b1958a1c3e145588035c580e7973a", "html_url": "https://github.com/rust-lang/rust/commit/a739c51d108b1958a1c3e145588035c580e7973a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a739c51d108b1958a1c3e145588035c580e7973a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb97bb50d1da7b7cafdaf83797f3514279f80421", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb97bb50d1da7b7cafdaf83797f3514279f80421", "html_url": "https://github.com/rust-lang/rust/commit/fb97bb50d1da7b7cafdaf83797f3514279f80421"}, {"sha": "c613aa5a95a83ec77b4b0af1e74019cb8aca75b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c613aa5a95a83ec77b4b0af1e74019cb8aca75b4", "html_url": "https://github.com/rust-lang/rust/commit/c613aa5a95a83ec77b4b0af1e74019cb8aca75b4"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "f903dbd97a814bb1a9effde20547c82379e5e85b", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a739c51d108b1958a1c3e145588035c580e7973a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a739c51d108b1958a1c3e145588035c580e7973a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a739c51d108b1958a1c3e145588035c580e7973a", "patch": "@@ -10,8 +10,10 @@\n \n use borrow_check::WriteKind;\n use rustc::middle::region::ScopeTree;\n-use rustc::mir::{BorrowKind, Field, Local, LocalKind, Location, Operand};\n-use rustc::mir::{Place, ProjectionElem, Rvalue, Statement, StatementKind};\n+use rustc::mir::{BindingForm, BorrowKind, ClearCrossCrate, Field, Local};\n+use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n+use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n+use rustc::mir::VarBindingForm;\n use rustc::ty::{self, RegionKind};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n@@ -622,42 +624,55 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         assigned_span: Span,\n         err_place: &Place<'tcx>,\n     ) {\n-        let is_arg = if let Place::Local(local) = place {\n-            if let LocalKind::Arg = self.mir.local_kind(*local) {\n-                true\n+        let (from_arg, local_decl) = if let Place::Local(local) = *err_place {\n+            if let LocalKind::Arg = self.mir.local_kind(local) {\n+                (true, Some(&self.mir.local_decls[local]))\n             } else {\n-                false\n+                (false, Some(&self.mir.local_decls[local]))\n             }\n         } else {\n-            false\n+            (false, None)\n+        };\n+\n+        // If root local is initialized immediately (everything apart from let\n+        // PATTERN;) then make the error refer to that local, rather than the\n+        // place being assigned later.\n+        let (place_description, assigned_span) = match local_decl {\n+            Some(LocalDecl { is_user_variable: Some(ClearCrossCrate::Clear), .. })\n+            | Some(LocalDecl { is_user_variable: Some(ClearCrossCrate::Set(\n+                BindingForm::Var(VarBindingForm {\n+                    opt_match_place: None, ..\n+            }))), ..})\n+            | Some(LocalDecl { is_user_variable: None, .. })\n+            | None => (self.describe_place(place), assigned_span),\n+            Some(decl) => (self.describe_place(err_place), decl.source_info.span),\n         };\n \n         let mut err = self.tcx.cannot_reassign_immutable(\n             span,\n-            &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n-            is_arg,\n+            place_description.as_ref().map(AsRef::as_ref).unwrap_or(\"_\"),\n+            from_arg,\n             Origin::Mir,\n         );\n-        let msg = if is_arg {\n+        let msg = if from_arg {\n             \"cannot assign to immutable argument\"\n         } else {\n             \"cannot assign twice to immutable variable\"\n         };\n         if span != assigned_span {\n-            if !is_arg {\n-                let value_msg = match self.describe_place(place) {\n+            if !from_arg {\n+                let value_msg = match place_description {\n                     Some(name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n                 err.span_label(assigned_span, format!(\"first assignment to {}\", value_msg));\n             }\n         }\n-        if let Place::Local(local) = err_place {\n-            let local_decl = &self.mir.local_decls[*local];\n-            if let Some(name) = local_decl.name {\n-                if local_decl.can_be_made_mutable() {\n+        if let Some(decl) = local_decl {\n+            if let Some(name) = decl.name {\n+                if decl.can_be_made_mutable() {\n                     err.span_label(\n-                        local_decl.source_info.span,\n+                        decl.source_info.span,\n                         format!(\"consider changing this to `mut {}`\", name),\n                     );\n                 }"}, {"sha": "61a074952efd289fc51a51f3678b854848fdb851", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=a739c51d108b1958a1c3e145588035c580e7973a", "patch": "@@ -13,12 +13,12 @@\n \n fn f(y: Box<isize>) {\n     *y = 5; //[ast]~ ERROR cannot assign\n-            //[mir]~^ ERROR cannot assign twice\n+            //[mir]~^ ERROR cannot assign\n }\n \n fn g() {\n     let _frob = |q: Box<isize>| { *q = 2; }; //[ast]~ ERROR cannot assign\n-    //[mir]~^ ERROR cannot assign twice\n+    //[mir]~^ ERROR cannot assign\n }\n \n fn main() {}"}, {"sha": "46bb7c5af5744f9da42d2156b3800196dfd7ec87", "filename": "src/test/ui/command-line-diagnostics.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.nll.stderr?ref=a739c51d108b1958a1c3e145588035c580e7973a", "patch": "@@ -2,8 +2,9 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/command-line-diagnostics.rs:16:5\n    |\n LL |     let x = 42;\n-   |         -   -- first assignment to `x`\n+   |         -\n    |         |\n+   |         first assignment to `x`\n    |         consider changing this to `mut x`\n LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable"}, {"sha": "7eaa4c7d5fea0611e44c562f473965de43a93d86", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a739c51d108b1958a1c3e145588035c580e7973a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=a739c51d108b1958a1c3e145588035c580e7973a", "patch": "@@ -6,26 +6,24 @@ LL |     let f = Foo { v: Vec::new() };\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n \n-error[E0384]: cannot assign twice to immutable variable `s.x`\n+error[E0384]: cannot assign twice to immutable variable `s`\n   --> $DIR/issue-35937.rs:26:5\n    |\n LL |     let s = S { x: 42 };\n-   |         -   ----------- first assignment to `s.x`\n+   |         -\n    |         |\n+   |         first assignment to `s`\n    |         consider changing this to `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n    |     ^^^^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `s.x`\n+error[E0384]: cannot assign to immutable argument `s`\n   --> $DIR/issue-35937.rs:30:5\n    |\n LL | fn bar(s: S) {\n-   |        -\n-   |        |\n-   |        first assignment to `s.x`\n-   |        consider changing this to `mut s`\n+   |        - consider changing this to `mut s`\n LL |     s.x += 1; //~ ERROR cannot assign\n-   |     ^^^^^^^^ cannot assign twice to immutable variable\n+   |     ^^^^^^^^ cannot assign to immutable argument\n \n error: aborting due to 3 previous errors\n "}]}