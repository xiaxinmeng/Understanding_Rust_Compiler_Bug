{"sha": "a7735cd329da6f9a75c15bb86e5789925c860f31", "node_id": "C_kwDOAAsO6NoAKGE3NzM1Y2QzMjlkYTZmOWE3NWMxNWJiODZlNTc4OTkyNWM4NjBmMzE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-30T09:14:39Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-13T15:41:02Z"}, "message": "fixes/working version", "tree": {"sha": "1ef46827b6ccadf1c53a52f5c49b008ea529d51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef46827b6ccadf1c53a52f5c49b008ea529d51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7735cd329da6f9a75c15bb86e5789925c860f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7735cd329da6f9a75c15bb86e5789925c860f31", "html_url": "https://github.com/rust-lang/rust/commit/a7735cd329da6f9a75c15bb86e5789925c860f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7735cd329da6f9a75c15bb86e5789925c860f31/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2554fa1c8e14f2b34f10e87c115388d5498ffc0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2554fa1c8e14f2b34f10e87c115388d5498ffc0c", "html_url": "https://github.com/rust-lang/rust/commit/2554fa1c8e14f2b34f10e87c115388d5498ffc0c"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "a5f00d0aff24977ee4f671a95cb902bf6e9b0c37", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a7735cd329da6f9a75c15bb86e5789925c860f31", "patch": "@@ -585,7 +585,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         uneval: &ty::Unevaluated<'tcx>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let instance = self.resolve(uneval.def, uneval.substs)?;\n-        Ok(self.eval_to_allocation(GlobalId { instance, promoted: None })?.into())\n+        Ok(self.eval_to_allocation(GlobalId { instance, promoted: uneval.promoted })?.into())\n     }\n \n     pub fn mir_const_to_op("}, {"sha": "23a013980be06aebce715afa372eb057447e37a2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a7735cd329da6f9a75c15bb86e5789925c860f31", "patch": "@@ -346,32 +346,41 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: _ }) =\n-            ct.kind()\n-        {\n-            // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n-            // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n-            // check performed after the promotion. Verify that with an assertion.\n-\n-            // Don't peek inside trait associated constants.\n-            if cx.tcx.trait_of_item(def.did).is_none() {\n-                let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n-                    cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n-                } else {\n-                    cx.tcx.at(constant.span).mir_const_qualif(def.did)\n-                };\n-\n-                if !Q::in_qualifs(&qualifs) {\n-                    return false;\n-                }\n+    let uneval = match constant.literal {\n+        ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Unevaluated(_)) => {\n+            let ty::ConstKind::Unevaluated(uv) = ct.kind() else { unreachable!() };\n \n-                // Just in case the type is more specific than\n-                // the definition, e.g., impl associated const\n-                // with type parameters, take it into account.\n+            Some(uv.expand())\n+        }\n+        ConstantKind::Ty(_) => None,\n+        ConstantKind::Unevaluated(uv, _) => Some(uv),\n+        ConstantKind::Val(..) => None,\n+    };\n+\n+    if let Some(ty::Unevaluated { def, substs: _, promoted }) = uneval {\n+        // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n+        // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n+        // check performed after the promotion. Verify that with an assertion.\n+        assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n+\n+        // Don't peek inside trait associated constants.\n+        if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n+            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n+                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n+            } else {\n+                cx.tcx.at(constant.span).mir_const_qualif(def.did)\n+            };\n+\n+            if !Q::in_qualifs(&qualifs) {\n+                return false;\n             }\n+\n+            // Just in case the type is more specific than\n+            // the definition, e.g., impl associated const\n+            // with type parameters, take it into account.\n         }\n     }\n+\n     // Otherwise use the qualifs of the type.\n     Q::in_any_value_of_ty(cx, constant.literal.ty())\n }"}, {"sha": "022ec6f074db8c3173fec2f7e07d7d7b2f44bff8", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=a7735cd329da6f9a75c15bb86e5789925c860f31", "patch": "@@ -236,7 +236,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n             ConstantKind::Ty(c) => Ok(ConstantKind::Ty(c.try_fold_with(folder)?)),\n             ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n             ConstantKind::Unevaluated(uv, t) => {\n-                Ok(ConstantKind::Unevaluated(uv, t.try_fold_with(folder)?))\n+                Ok(ConstantKind::Unevaluated(uv.try_fold_with(folder)?, t.try_fold_with(folder)?))\n             }\n         }\n     }"}, {"sha": "4b3ad9cc5dadf46fd8d4a8d680b729f2245b7d2c", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=a7735cd329da6f9a75c15bb86e5789925c860f31", "patch": "@@ -185,6 +185,10 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ConstantKind<'tcx> {\n         match *self {\n             ConstantKind::Ty(c) => c.visit_with(visitor),\n             ConstantKind::Val(_, t) => t.visit_with(visitor),\n+            ConstantKind::Unevaluated(uv, t) => {\n+                uv.visit_with(visitor)?;\n+                t.visit_with(visitor)\n+            }\n         }\n     }\n }"}, {"sha": "b4bda57ba83eb51617365778eae8d5ab83bdcb5c", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7735cd329da6f9a75c15bb86e5789925c860f31/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=a7735cd329da6f9a75c15bb86e5789925c860f31", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n \n         match constant {\n-            ConstantKind::Ty(_) => constant.super_visit_with(self),\n+            ConstantKind::Ty(ct) => ct.visit_with(self),\n             ConstantKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p) }, _)\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`"}]}