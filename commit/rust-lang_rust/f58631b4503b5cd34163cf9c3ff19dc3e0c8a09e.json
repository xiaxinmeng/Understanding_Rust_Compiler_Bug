{"sha": "f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODYzMWI0NTAzYjVjZDM0MTYzY2Y5YzNmZjE5ZGMzZTBjOGEwOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T20:26:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T20:26:00Z"}, "message": "Auto merge of #85607 - LeSeulArtichaut:thir-unsafeck-closures, r=nikomatsakis\n\nMake closures inherit their parent's \"safety context\"\n\nFixes rust-lang/project-thir-unsafeck#9, ~~blocked on #85273~~.\nr? `@nikomatsakis`", "tree": {"sha": "545eefd36b62375afffbebd88d03da0451b996e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/545eefd36b62375afffbebd88d03da0451b996e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "html_url": "https://github.com/rust-lang/rust/commit/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e44ca6dba86faf76daa7b06d9486f23812d4ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e44ca6dba86faf76daa7b06d9486f23812d4ccf", "html_url": "https://github.com/rust-lang/rust/commit/0e44ca6dba86faf76daa7b06d9486f23812d4ccf"}, {"sha": "d1f0e9f65ce537f8026fdc207a596909c1fe4ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f0e9f65ce537f8026fdc207a596909c1fe4ed8", "html_url": "https://github.com/rust-lang/rust/commit/d1f0e9f65ce537f8026fdc207a596909c1fe4ed8"}], "stats": {"total": 190, "additions": 173, "deletions": 17}, "files": [{"sha": "d1aaabe92edaec2e97c8aa12b15935650863a2fe", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -213,6 +213,30 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     self.requires_unsafe(expr.span, CastOfPointerToInt);\n                 }\n             }\n+            ExprKind::Closure {\n+                closure_id,\n+                substs: _,\n+                upvars: _,\n+                movability: _,\n+                fake_reads: _,\n+            } => {\n+                let closure_id = closure_id.expect_local();\n+                let closure_def = if let Some((did, const_param_id)) =\n+                    ty::WithOptConstParam::try_lookup(closure_id, self.tcx)\n+                {\n+                    ty::WithOptConstParam { did, const_param_did: Some(const_param_id) }\n+                } else {\n+                    ty::WithOptConstParam::unknown(closure_id)\n+                };\n+                let (closure_thir, expr) = self.tcx.thir_body(closure_def);\n+                let closure_thir = &closure_thir.borrow();\n+                let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n+                let mut closure_visitor =\n+                    UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n+                closure_visitor.visit_expr(&closure_thir[expr]);\n+                // Unsafe blocks can be used in closures, make sure to take it into account\n+                self.safety_context = closure_visitor.safety_context;\n+            }\n             _ => {}\n         }\n \n@@ -335,14 +359,18 @@ impl UnsafeOpKind {\n     }\n }\n \n-// FIXME: checking unsafety for closures should be handled by their parent body,\n-// as they inherit their \"safety context\" from their declaration site.\n pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) {\n     // THIR unsafeck is gated under `-Z thir-unsafeck`\n     if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n         return;\n     }\n \n+    // Closures are handled by their parent function\n+    if tcx.is_closure(def.did.to_def_id()) {\n+        tcx.ensure().thir_check_unsafety(tcx.hir().local_def_id_to_hir_id(def.did).owner);\n+        return;\n+    }\n+\n     let (thir, expr) = tcx.thir_body(def);\n     let thir = &thir.borrow();\n     // If `thir` is empty, a type error occured, skip this body."}, {"sha": "3d22025bf286ab4d382f6bb618fad7c4e91bc555", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n \n-// revisions: default nomiropt\n+// revisions: default nomiropt thirunsafeck\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n+//[thirunsafeck]compile-flags: -Zthir-unsafeck\n \n #![allow(unused)]\n "}, {"sha": "61914e2293070459c03ee0a6c66edf2975e7829a", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n #![allow(stable_features)]\n // ignore-windows - this is a unix-specific test"}, {"sha": "0fa6d9cdc77b66759276668fff0346df5a803fca", "filename": "src/test/ui/generator/static-mut-reference-across-yield.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,4 +1,7 @@\n // build-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n+\n #![feature(generators)]\n \n static mut A: [i32; 5] = [1, 2, 3, 4, 5];"}, {"sha": "72c0d7913e5252699412ba41843dcf94b9bc400d", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // ignore-wasm32-bare compiled with panic=abort by default\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n "}, {"sha": "9faeb7770a75aed220f99f40df61d109ed2252ec", "filename": "src/test/ui/issues/issue-11740.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n struct Attr {\n     name: String,"}, {"sha": "e7beb8a0392e88510f9163e0292daba0b1c1ed66", "filename": "src/test/ui/issues/issue-39367.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-39367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-39367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39367.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n+\n use std::ops::Deref;\n \n struct ArenaSet<U: Deref, V=<U as Deref>::Target>(U, &'static V)"}, {"sha": "9e9cbcf33ae17a8ae52056360d4d608190c84260", "filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.mir.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:7:13\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:10:13\n    |\n LL |     unsafe {\n    |     ------ because it's nested under this `unsafe` block\n@@ -8,13 +8,13 @@ LL |             unsafe {\n    |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:1:8\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:4:8\n    |\n LL | #[deny(unused_unsafe)]\n    |        ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:9:38\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:12:38\n    |\n LL |     unsafe {\n    |     ------ because it's nested under this `unsafe` block\n@@ -23,7 +23,7 @@ LL |                 |w: &mut Vec<u32>| { unsafe {\n    |                                      ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:13:34\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:16:34\n    |\n LL |     unsafe {\n    |     ------ because it's nested under this `unsafe` block", "previous_filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.stderr"}, {"sha": "ac1cfd62a05687238f72c36a3ccbcb2697d63bb1", "filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n+\n #[deny(unused_unsafe)]\n fn main() {\n     let mut v = Vec::<i32>::with_capacity(24);"}, {"sha": "9e9cbcf33ae17a8ae52056360d4d608190c84260", "filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.thir.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -0,0 +1,35 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:10:13\n+   |\n+LL |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+LL |         let f = |v: &mut Vec<_>| {\n+LL |             unsafe {\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:4:8\n+   |\n+LL | #[deny(unused_unsafe)]\n+   |        ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:12:38\n+   |\n+LL |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+...\n+LL |                 |w: &mut Vec<u32>| { unsafe {\n+   |                                      ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:16:34\n+   |\n+LL |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+...\n+LL |             |x: &mut Vec<u32>| { unsafe {\n+   |                                  ^^^^^^ unnecessary `unsafe` block\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1c7368b36e135447188dbecfbaa1b78357ff4278", "filename": "src/test/ui/lto-still-runs-thread-dtors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Flto-still-runs-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Flto-still-runs-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-still-runs-thread-dtors.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -2,6 +2,8 @@\n // compile-flags: -C lto\n // no-prefer-dynamic\n // ignore-emscripten no threads support\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n use std::thread;\n "}, {"sha": "24985386a97a13ca25f03d36f5216ca31d8bec07", "filename": "src/test/ui/no-stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-stdio.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -2,6 +2,8 @@\n // ignore-android\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n #![feature(rustc_private)]\n "}, {"sha": "c575a6bec8e92b10b47ebd108a316586819e1c26", "filename": "src/test/ui/running-with-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // ignore-emscripten spawning processes is not supported\n // ignore-sgx no processes\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n #![feature(start)]\n "}, {"sha": "da5c42a1a9888139281cad44f09bd05eb1c8eb46", "filename": "src/test/ui/simd/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n \n #![feature(repr_simd, platform_intrinsics, concat_idents)]\n #![allow(non_camel_case_types)]"}, {"sha": "c2adb7be7a2208bc25259d803bfe65001982f11d", "filename": "src/test/ui/span/lint-unused-unsafe.mir.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,61 +1,61 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:16:13\n+  --> $DIR/lint-unused-unsafe.rs:19:13\n    |\n LL | fn bad1() { unsafe {} }\n    |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:4:9\n+  --> $DIR/lint-unused-unsafe.rs:7:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:17:13\n+  --> $DIR/lint-unused-unsafe.rs:20:13\n    |\n LL | fn bad2() { unsafe { bad1() } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:18:20\n+  --> $DIR/lint-unused-unsafe.rs:21:20\n    |\n LL | unsafe fn bad3() { unsafe {} }\n    | ----------------   ^^^^^^ unnecessary `unsafe` block\n    | |\n    | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:19:13\n+  --> $DIR/lint-unused-unsafe.rs:22:13\n    |\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:20:20\n+  --> $DIR/lint-unused-unsafe.rs:23:20\n    |\n LL | unsafe fn bad5() { unsafe { unsf() } }\n    | ----------------   ^^^^^^ unnecessary `unsafe` block\n    | |\n    | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:23:9\n+  --> $DIR/lint-unused-unsafe.rs:26:9\n    |\n LL |     unsafe {                             // don't put the warning here\n    |     ------ because it's nested under this `unsafe` block\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:29:5\n+  --> $DIR/lint-unused-unsafe.rs:32:5\n    |\n LL | unsafe fn bad7() {\n    | ---------------- because it's nested under this `unsafe` fn\n LL |     unsafe {\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:30:9\n+  --> $DIR/lint-unused-unsafe.rs:33:9\n    |\n LL | unsafe fn bad7() {\n    | ---------------- because it's nested under this `unsafe` fn", "previous_filename": "src/test/ui/span/lint-unused-unsafe.stderr"}, {"sha": "b889cc981cad10b836b219b6116af8adbd4f23cb", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -1,5 +1,8 @@\n // Exercise the unused_unsafe attribute in some positive and negative cases\n \n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n+\n #![allow(dead_code)]\n #![deny(unused_unsafe)]\n "}, {"sha": "dda45c3679ab65f1b9b455238615877f63e9bb3e", "filename": "src/test/ui/span/lint-unused-unsafe.thir.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.thir.stderr?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -0,0 +1,66 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:19:13\n+   |\n+LL | fn bad1() { unsafe {} }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:7:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:20:13\n+   |\n+LL | fn bad2() { unsafe { bad1() } }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:21:20\n+   |\n+LL | unsafe fn bad3() { unsafe {} }\n+   | ----------------   ^^^^^^ unnecessary `unsafe` block\n+   | |\n+   | because it's nested under this `unsafe` fn\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:22:13\n+   |\n+LL | fn bad4() { unsafe { callback(||{}) } }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:23:20\n+   |\n+LL | unsafe fn bad5() { unsafe { unsf() } }\n+   | ----------------   ^^^^^^ unnecessary `unsafe` block\n+   | |\n+   | because it's nested under this `unsafe` fn\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:26:9\n+   |\n+LL |     unsafe {                             // don't put the warning here\n+   |     ------ because it's nested under this `unsafe` block\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:33:9\n+   |\n+LL |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:32:5\n+   |\n+LL | unsafe fn bad7() {\n+   | ---------------- because it's nested under this `unsafe` fn\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "f61295c88308c1660f002527c601fb1630c5906a", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "patch": "@@ -8,7 +8,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 1371;\n-const ISSUES_ENTRY_LIMIT: usize = 2558;\n+const ISSUES_ENTRY_LIMIT: usize = 2559;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}