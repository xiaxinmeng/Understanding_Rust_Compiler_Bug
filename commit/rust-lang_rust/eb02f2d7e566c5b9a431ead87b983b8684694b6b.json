{"sha": "eb02f2d7e566c5b9a431ead87b983b8684694b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDJmMmQ3ZTU2NmM1YjlhNDMxZWFkODdiOTgzYjg2ODQ2OTRiNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-07T15:35:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-07T15:35:30Z"}, "message": "Merge pull request #20675 from jbcrail/fix-test-comments\n\nFix misspelled comments in tests.\n\nReviewed-by: steveklabnik", "tree": {"sha": "897a589bc956dd115fe55f2ee166feeb20e43e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897a589bc956dd115fe55f2ee166feeb20e43e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb02f2d7e566c5b9a431ead87b983b8684694b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb02f2d7e566c5b9a431ead87b983b8684694b6b", "html_url": "https://github.com/rust-lang/rust/commit/eb02f2d7e566c5b9a431ead87b983b8684694b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb02f2d7e566c5b9a431ead87b983b8684694b6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0216c8945e7549f55d13302cc0a8ad41b2c2060", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0216c8945e7549f55d13302cc0a8ad41b2c2060", "html_url": "https://github.com/rust-lang/rust/commit/c0216c8945e7549f55d13302cc0a8ad41b2c2060"}, {"sha": "938a705ff17abaa502f2617b4a733f7352007097", "url": "https://api.github.com/repos/rust-lang/rust/commits/938a705ff17abaa502f2617b4a733f7352007097", "html_url": "https://github.com/rust-lang/rust/commit/938a705ff17abaa502f2617b4a733f7352007097"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "be10ca1dd8fd82c9cf00a8389bff6d3c45741629", "filename": "src/test/auxiliary/issue-17662.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fauxiliary%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fauxiliary%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17662.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -16,7 +16,7 @@ pub trait Foo<'a, T> {\n \n pub fn foo<'a, T>(x: &'a Foo<'a, T>) -> T {\n     let x: &'a Foo<T> = x;\n-    //            ^ the lifetime parameter of Foo is left to be infered.\n+    //            ^ the lifetime parameter of Foo is left to be inferred.\n     x.foo()\n     // ^ encoding this method call in metadata triggers an ICE.\n }"}, {"sha": "22e79cc62845b0145a5b77f731047f09e6e60d44", "filename": "src/test/auxiliary/traitimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test inherant trait impls work cross-crait.\n+// Test inherent trait impls work cross-crait.\n \n pub trait Bar<'a> : 'a {}\n "}, {"sha": "2e727f19635002a1b2294052ca77b5438c4e2c00", "filename": "src/test/compile-fail-fulldeps/macro-crate-cannot-read-embedded-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -16,7 +16,7 @@\n // Issue #15750 and #15962 : this test is checking that the standard\n // parser rejects embedded idents.  pnkfelix did not want to attempt\n // to make a test file that itself used the embedded ident input form,\n-// since he worrid that would be difficult to work with in many text\n+// since he worried that would be difficult to work with in many text\n // editors, so instead he made a macro that expands into the embedded\n // ident form.\n "}, {"sha": "541e8ec97fa6cc933f45fdc9abad6f7df06c717f", "filename": "src/test/compile-fail/liveness-missing-ret2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -11,8 +11,8 @@\n // error-pattern: not all control paths return a value\n \n fn f() -> int {\n-    // Make sure typestate doesn't interpreturn this match expression\n-    // as the function result\n+    // Make sure typestate doesn't interpret this match expression as\n+    // the function result\n    match true { true => { } _ => {} };\n }\n "}, {"sha": "bef2f12d642bd5f8ede55bf1896972c184b69bd0", "filename": "src/test/compile-fail/move-fragments-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -47,7 +47,7 @@ pub fn test_move_field_to_local_to_local(p: Pair<D, D>) {\n // `test_uninitialized_local` , the instrumentation reports that `_x`\n // is moved. This is unlike `test_move_field_to_local`, where `_x` is\n // just reported as an assigned_leaf_path. Presumably because this is\n-// how we represent that it did not have an initalizing expression at\n+// how we represent that it did not have an initializing expression at\n // the binding site.\n \n #[rustc_move_fragments]"}, {"sha": "00a8a0893a2af89452084b7c9d8a82e8e4968e77", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Issue #3656\n-// Issue Name: pub method preceeded by attribute can't be parsed\n+// Issue Name: pub method preceded by attribute can't be parsed\n // Abstract: Visibility parsing failed when compiler parsing\n \n use std::f64;"}, {"sha": "6eb981046163eb91a99ba03df8352e8bcdf14f74", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -12,7 +12,7 @@\n // typechecks. The pattern involves regions bound in closures that\n // wind up related to inference variables.\n //\n-// NB. Changes to the region implementatiosn have broken this pattern\n+// NB. Changes to the region implementations have broken this pattern\n // a few times, but it happens to be used in the compiler so those\n // changes were caught. However, those uses in the compiler could\n // easily get changed or refactored away in the future."}, {"sha": "74416b96e93602237b64da4e6a1a7a1be2836224", "filename": "src/test/run-pass/self-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb02f2d7e566c5b9a431ead87b983b8684694b6b/src%2Ftest%2Frun-pass%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-impl.rs?ref=eb02f2d7e566c5b9a431ead87b983b8684694b6b", "patch": "@@ -12,7 +12,7 @@\n \n struct Foo;\n \n-// Test uses on inherant impl.\n+// Test uses on inherent impl.\n impl Foo {\n     fn foo(_x: Self, _y: &Self, _z: Box<Self>) -> Self {\n         Foo"}]}