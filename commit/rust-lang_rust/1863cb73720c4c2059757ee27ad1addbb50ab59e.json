{"sha": "1863cb73720c4c2059757ee27ad1addbb50ab59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjNjYjczNzIwYzRjMjA1OTc1N2VlMjdhZDFhZGRiYjUwYWI1OWU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-01T15:02:43Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-01T15:42:15Z"}, "message": "Errors are more specific in cases where borrows are used in future iterations of loops.", "tree": {"sha": "3d39fcb5f16add23029e0d21b6ba5b38719a18a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d39fcb5f16add23029e0d21b6ba5b38719a18a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1863cb73720c4c2059757ee27ad1addbb50ab59e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlth1NcACgkQAXYLT59T\n8VRDOg//ZE/wc60XMm2novAFyBH7VY9TTNfYKBX0ddBIJT6CmmkC66ILDbk9aj0U\nuF7CHqYqk+6/8txKVwdWGC88gNrB7aC+jGIEowJlqd9ZWGh4NMFydzwvZaSlA+EN\n31Eq4GYuqQjRSDEKK4dKJpv2qUG1KseefEnzFyAPT0efm0ojERlL5PnaTaDsVozq\n0jB81c0+YcBkx1jAaL6NBU756S+4gx8kDjRWCbMoqaQqMZDa0DeYL5HHn4uEflgZ\nbAuAfu5lenAEJjunmxVPXZb8bOa9hamN3sMAxVBMpLNr6PHc1XNLtnHzEQNy0Moi\nS2b/0apRzsbA3yguMXeGHGbfbDxzvE9puIEQ6WjcN7bS985I7LeVi2Wv6UehhkqP\nAoGIjscZ/BkcSRtRXhW8ugXDquiMCPEfxrw15KLuBrP+VUlRjqr/9yy3YBr+8AGg\nhu4YwfszG6NQQqzoW1gpicFL6pM5Xr+iXphk3KBVZY4UK5KerAJIFC0G0jSn6jCH\nOsvj4GpZGngIofGPlYsV1Y1q4np8Cv6cbqmKJ50X3LOTO3Cts2sKIQybu1cBAi2h\neYW0rXbijVJ+K+u/6SKWIxx1G66HjKDLD/j1+3Zn9ci1BEpMheAQFmwRRU/zHmR4\nKLzOPMPU38IMXPIZIebBXH5LRRvFQlPp/XOsiJ0WrqJxddaZJ8s=\n=Klbf\n-----END PGP SIGNATURE-----", "payload": "tree 3d39fcb5f16add23029e0d21b6ba5b38719a18a4\nparent 11f812aa7d1df09724f94c2b095f6dbfd367da17\nauthor David Wood <david@davidtw.co> 1533135763 +0200\ncommitter David Wood <david@davidtw.co> 1533138135 +0200\n\nErrors are more specific in cases where borrows are used in future iterations of loops.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1863cb73720c4c2059757ee27ad1addbb50ab59e", "html_url": "https://github.com/rust-lang/rust/commit/1863cb73720c4c2059757ee27ad1addbb50ab59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1863cb73720c4c2059757ee27ad1addbb50ab59e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f812aa7d1df09724f94c2b095f6dbfd367da17", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f812aa7d1df09724f94c2b095f6dbfd367da17", "html_url": "https://github.com/rust-lang/rust/commit/11f812aa7d1df09724f94c2b095f6dbfd367da17"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "d98bba72f7a33be06f10e0d31ac90e7aae263e65", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::borrow_set::BorrowData;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::Place;\n+use rustc::mir::{Location, Place, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n \n mod find_use;\n@@ -63,10 +63,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         match find_use::find(mir, regioncx, tcx, region_sub, context.loc) {\n             Some(Cause::LiveVar(_local, location)) => {\n-                err.span_label(\n-                    mir.source_info(location).span,\n-                    \"borrow later used here\".to_string(),\n-                );\n+                if self.is_borrow_location_in_loop(context.loc) {\n+                    err.span_label(\n+                        mir.source_info(location).span,\n+                        \"borrow used here in later iteration of loop\".to_string(),\n+                    );\n+                } else {\n+                    err.span_label(\n+                        mir.source_info(location).span,\n+                        \"borrow later used here\".to_string(),\n+                    );\n+                }\n             }\n \n             Some(Cause::DropVar(local, location)) => match &mir.local_decls[local].name {\n@@ -107,4 +114,76 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Check if a borrow location is within a loop.\n+    fn is_borrow_location_in_loop(\n+        &self,\n+        borrow_location: Location,\n+    ) -> bool {\n+        let mut visited_locations = Vec::new();\n+        let mut pending_locations = vec![ borrow_location ];\n+        debug!(\"is_in_loop: borrow_location={:?}\", borrow_location);\n+\n+        while let Some(location) = pending_locations.pop() {\n+            debug!(\"is_in_loop: location={:?} pending_locations={:?} visited_locations={:?}\",\n+                   location, pending_locations, visited_locations);\n+            if location == borrow_location && visited_locations.contains(&borrow_location) {\n+                // We've managed to return to where we started (and this isn't the start of the\n+                // search).\n+                debug!(\"is_in_loop: found!\");\n+                return true;\n+            }\n+\n+            // Skip locations we've been.\n+            if visited_locations.contains(&location) { continue; }\n+\n+            let block = &self.mir.basic_blocks()[location.block];\n+            if location.statement_index ==  block.statements.len() {\n+                // Add start location of the next blocks to pending locations.\n+                match block.terminator().kind {\n+                    TerminatorKind::Goto { target } => {\n+                        pending_locations.push(target.start_location());\n+                    },\n+                    TerminatorKind::SwitchInt { ref targets, .. } => {\n+                        for target in targets {\n+                            pending_locations.push(target.start_location());\n+                        }\n+                    },\n+                    TerminatorKind::Drop { target, unwind, .. } |\n+                    TerminatorKind::DropAndReplace { target, unwind, .. } |\n+                    TerminatorKind::Assert { target, cleanup: unwind, .. } |\n+                    TerminatorKind::Yield { resume: target, drop: unwind, .. } |\n+                    TerminatorKind::FalseUnwind { real_target: target, unwind, .. } => {\n+                        pending_locations.push(target.start_location());\n+                        if let Some(unwind) = unwind {\n+                            pending_locations.push(unwind.start_location());\n+                        }\n+                    },\n+                    TerminatorKind::Call { ref destination, cleanup, .. } => {\n+                        if let Some((_, destination)) = destination {\n+                            pending_locations.push(destination.start_location());\n+                        }\n+                        if let Some(cleanup) = cleanup {\n+                            pending_locations.push(cleanup.start_location());\n+                        }\n+                    },\n+                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets, .. } => {\n+                        pending_locations.push(real_target.start_location());\n+                        for target in imaginary_targets {\n+                            pending_locations.push(target.start_location());\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+            } else {\n+                // Add the next statement to pending locations.\n+                pending_locations.push(location.successor_within_block());\n+            }\n+\n+            // Keep track of where we have visited.\n+            visited_locations.push(location);\n+        }\n+\n+        false\n+    }\n }"}, {"sha": "02e5b44c17c4acc0baf53689129655a108654e41", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -17,7 +17,7 @@ LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n    |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |         inner_second.use_mut();\n LL |         inner_first.use_mut();\n-   |         ----------- borrow later used here\n+   |         ----------- borrow used here in later iteration of loop\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e3e389d11970a886fc365debd5d2638600e6f3e7", "filename": "src/test/ui/issue-52126-assign-op-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -5,7 +5,7 @@ LL |         let v: Vec<&str> = line.split_whitespace().collect();\n    |                            ^^^^ borrowed value does not live long enough\n LL |         //~^ ERROR `line` does not live long enough\n LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n-   |                                                        ------- borrow later used here\n+   |                                                        ------- borrow used here in later iteration of loop\n ...\n LL |     }\n    |     - `line` dropped here while still borrowed"}, {"sha": "606d678542269afda8d2b76830655b676543c122", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -7,7 +7,7 @@ LL |         foo.mutate();\n    |         ^^^^^^^^^^^^ mutable borrow occurs here\n LL |         //~^ ERROR cannot borrow `foo` as mutable\n LL |         println!(\"foo={:?}\", *string);\n-   |                              ------- borrow later used here\n+   |                              ------- borrow used here in later iteration of loop\n \n error: aborting due to previous error\n "}, {"sha": "7aaec700d8985559080944c057955878e4223f7f", "filename": "src/test/ui/span/regions-escape-loop-via-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/regions-escape-loop-via-variable.rs:21:13\n    |\n LL |         let x = 1 + *p;\n-   |                     -- borrow later used here\n+   |                     -- borrow used here in later iteration of loop\n LL |         p = &x;\n    |             ^^ borrowed value does not live long enough\n LL |     }"}, {"sha": "2dc758428ef3a48de7de92f51460fecec267afc9", "filename": "src/test/ui/span/regions-escape-loop-via-vec.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1863cb73720c4c2059757ee27ad1addbb50ab59e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr?ref=1863cb73720c4c2059757ee27ad1addbb50ab59e", "patch": "@@ -7,7 +7,7 @@ LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n    |           ^ use of borrowed `x`\n LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         -- borrow used here in later iteration of loop\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/regions-escape-loop-via-vec.rs:16:21\n@@ -18,15 +18,15 @@ LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n    |                     ^ use of borrowed `x`\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         -- borrow used here in later iteration of loop\n \n error[E0597]: `z` does not live long enough\n   --> $DIR/regions-escape-loop-via-vec.rs:17:17\n    |\n LL |         _y.push(&mut z);\n    |         --      ^^^^^^ borrowed value does not live long enough\n    |         |\n-   |         borrow later used here\n+   |         borrow used here in later iteration of loop\n ...\n LL |     }\n    |     - `z` dropped here while still borrowed\n@@ -38,7 +38,7 @@ LL |     let mut _y = vec![&mut x];\n    |                       ------ borrow of `x` occurs here\n ...\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         -- borrow used here in later iteration of loop\n LL |         //~^ ERROR `z` does not live long enough\n LL |         x += 1; //~ ERROR cannot assign\n    |         ^^^^^^ use of borrowed `x`"}]}