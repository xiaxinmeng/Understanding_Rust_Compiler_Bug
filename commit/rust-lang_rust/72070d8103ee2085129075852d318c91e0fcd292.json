{"sha": "72070d8103ee2085129075852d318c91e0fcd292", "node_id": "C_kwDOAAsO6NoAKDcyMDcwZDgxMDNlZTIwODUxMjkwNzU4NTJkMzE4YzkxZTBmY2QyOTI", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-05T07:08:32Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-05T07:08:32Z"}, "message": "remove region check", "tree": {"sha": "e97140290bba7cb726437844b3be09378be00dd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97140290bba7cb726437844b3be09378be00dd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72070d8103ee2085129075852d318c91e0fcd292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72070d8103ee2085129075852d318c91e0fcd292", "html_url": "https://github.com/rust-lang/rust/commit/72070d8103ee2085129075852d318c91e0fcd292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72070d8103ee2085129075852d318c91e0fcd292/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "904d6c8662a46e36fe95275621e82df2aa6b0c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/904d6c8662a46e36fe95275621e82df2aa6b0c36", "html_url": "https://github.com/rust-lang/rust/commit/904d6c8662a46e36fe95275621e82df2aa6b0c36"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e62153fd92ef73026d255c242f516d1a394b2bd2", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72070d8103ee2085129075852d318c91e0fcd292/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72070d8103ee2085129075852d318c91e0fcd292/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=72070d8103ee2085129075852d318c91e0fcd292", "patch": "@@ -13,21 +13,18 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             match stmt.kind {\n                 StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n                     for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n-                        if p_elem == ProjectionElem::Deref\n-                            && !p_ref.projection.is_empty()\n-                            && region.is_erased()\n-                        {\n-                            // The type that we are derefing\n+                        if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n+                            // The type that we are derefing.\n                             let ty = p_ref.ty(local_decl, tcx).ty;\n                             let temp = patch.new_temp(ty, stmt.source_info.span);\n \n                             // Because we are assigning this right before original statement\n-                            // we are using index i of statement\n+                            // we are using index i of statement.\n                             let loc = Location { block: block, statement_index: i };\n                             patch.add_statement(loc, StatementKind::StorageLive(temp));\n \n                             // We are adding current p_ref's projections to our\n-                            // temp value\n+                            // temp value.\n                             let deref_place =\n                                 Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n                             patch.add_assign(\n@@ -37,7 +34,7 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n                             );\n \n                             // We are creating a place by using our temp value's location\n-                            // and copying derefed values which we need to create new statement\n+                            // and copying derefed values which we need to create new statement.\n                             let temp_place =\n                                 Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n                             let new_stmt = Statement {\n@@ -48,12 +45,17 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n                                 ))),\n                             };\n \n-                            // Replace current statement with newly created one\n+                            // Replace current statement with newly created one.\n                             *stmt = new_stmt;\n \n                             // Since our job with the temp is done it should be gone\n                             let loc = Location { block: block, statement_index: statement_len };\n                             patch.add_statement(loc, StatementKind::StorageDead(temp));\n+\n+                            // As all projections are off the base projection, if there are\n+                            // multiple derefs in the middle of projection, it might cause\n+                            // unsoundness, to not let that happen we break the loop.\n+                            break;\n                         }\n                     }\n                 }"}]}