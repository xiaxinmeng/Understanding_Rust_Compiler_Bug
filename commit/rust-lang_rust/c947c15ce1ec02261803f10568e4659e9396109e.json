{"sha": "c947c15ce1ec02261803f10568e4659e9396109e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NDdjMTVjZTFlYzAyMjYxODAzZjEwNTY4ZTQ2NTllOTM5NjEwOWU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-24T16:36:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-25T20:28:36Z"}, "message": "Basics for trait method resolution", "tree": {"sha": "87e31a56ee05e5b3f3e498b74a0579b0d4cf7a19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e31a56ee05e5b3f3e498b74a0579b0d4cf7a19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c947c15ce1ec02261803f10568e4659e9396109e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c947c15ce1ec02261803f10568e4659e9396109e", "html_url": "https://github.com/rust-lang/rust/commit/c947c15ce1ec02261803f10568e4659e9396109e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c947c15ce1ec02261803f10568e4659e9396109e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb77bc5c2f6c6b9681d9b3d0a068791db7eec0e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb77bc5c2f6c6b9681d9b3d0a068791db7eec0e2", "html_url": "https://github.com/rust-lang/rust/commit/bb77bc5c2f6c6b9681d9b3d0a068791db7eec0e2"}], "stats": {"total": 181, "additions": 156, "deletions": 25}, "files": [{"sha": "88c13566c45002ea1e773c5f9e9c021260207587", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -17,6 +17,7 @@ use crate::{\n     impl_block::ImplBlock,\n     resolve::Resolver,\n     diagnostics::DiagnosticSink,\n+    traits::{TraitItem, TraitData},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -649,6 +650,18 @@ impl Trait {\n     pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n+\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n+        self.trait_data(db).name().clone()\n+    }\n+\n+    pub fn items(self, db: &impl DefDatabase) -> Vec<TraitItem> {\n+        self.trait_data(db).items().to_vec()\n+    }\n+\n+    pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {\n+        db.trait_data(self)\n+    }\n }\n \n impl Docs for Trait {"}, {"sha": "dd0bf6e3431985b7fba3db91524b5221514cfc72", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n     type_ref::TypeRef,\n+    traits::TraitData, Trait\n };\n \n #[salsa::query_group(DefDatabaseStorage)]\n@@ -27,6 +28,9 @@ pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::adt::EnumData::enum_data_query)]\n     fn enum_data(&self, e: Enum) -> Arc<EnumData>;\n \n+    #[salsa::invoke(crate::traits::TraitData::trait_data_query)]\n+    fn trait_data(&self, t: Trait) -> Arc<TraitData>;\n+\n     #[salsa::invoke(crate::ids::SourceFileItems::file_items_query)]\n     fn file_items(&self, file_id: HirFileId) -> Arc<SourceFileItems>;\n "}, {"sha": "974ebd831308b0d718488ea77b50908f3cc31179", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -27,6 +27,7 @@ mod ids;\n mod name;\n mod nameres;\n mod adt;\n+mod traits;\n mod type_alias;\n mod type_ref;\n mod ty;"}, {"sha": "c34aa4b50c1e1f092c134e55bd8c3e15b04e1340", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -62,7 +62,7 @@ use test_utils::tested_by;\n \n use crate::{\n     ModuleDef, Name, Crate, Module,\n-    DefDatabase, Path, PathKind, HirFileId,\n+    DefDatabase, Path, PathKind, HirFileId, Trait,\n     ids::{SourceItemId, SourceFileItemId, MacroCallId},\n     diagnostics::DiagnosticSink,\n     nameres::diagnostics::DefDiagnostic,\n@@ -139,6 +139,12 @@ impl ModuleScope {\n     pub fn get(&self, name: &Name) -> Option<&Resolution> {\n         self.items.get(name)\n     }\n+    pub fn traits<'a>(&'a self) -> impl Iterator<Item = Trait> + 'a {\n+        self.items.values().filter_map(|r| match r.def.take_types() {\n+            Some(ModuleDef::Trait(t)) => Some(t),\n+            _ => None,\n+        })\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Default)]"}, {"sha": "0f5031e7624e0985eab5075c81a9a923a572c2e7", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     generics::GenericParams,\n     expr::{scope::{ExprScopes, ScopeId}, PatId, Body},\n     impl_block::ImplBlock,\n-    path::Path,\n+    path::Path, Trait\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -175,6 +175,21 @@ impl Resolver {\n         names\n     }\n \n+    pub(crate) fn traits_in_scope<'a>(&'a self) -> impl Iterator<Item = Trait> + 'a {\n+        // FIXME prelude\n+        self.scopes\n+            .iter()\n+            .rev()\n+            .flat_map(|scope| {\n+                match scope {\n+                    Scope::ModuleScope(m) => Some(m.crate_def_map[m.module_id].scope.traits()),\n+                    _ => None,\n+                }\n+                .into_iter()\n+            })\n+            .flat_map(|i| i)\n+    }\n+\n     fn module(&self) -> Option<(&CrateDefMap, CrateModuleId)> {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.crate_def_map, m.module_id)),"}, {"sha": "725bdd5cb3b3efc3311effe1be3f5993a5db359e", "filename": "crates/ra_hir/src/traits.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -0,0 +1,52 @@\n+//! HIR for trait definitions.\n+\n+use std::sync::Arc;\n+\n+use ra_syntax::ast::{self, NameOwner};\n+\n+use crate::{Function, Const, TypeAlias, Name, DefDatabase, Trait, ids::LocationCtx, name::AsName};\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct TraitData {\n+    name: Option<Name>,\n+    items: Vec<TraitItem>,\n+}\n+\n+impl TraitData {\n+    pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: Trait) -> Arc<TraitData> {\n+        let (file_id, node) = tr.source(db);\n+        let name = node.name().map(|n| n.as_name());\n+        let module = tr.module(db);\n+        let ctx = LocationCtx::new(db, module, file_id);\n+        let items = if let Some(item_list) = node.item_list() {\n+            item_list\n+                .impl_items()\n+                .map(|item_node| match item_node.kind() {\n+                    ast::ImplItemKind::FnDef(it) => Function { id: ctx.to_def(it) }.into(),\n+                    ast::ImplItemKind::ConstDef(it) => Const { id: ctx.to_def(it) }.into(),\n+                    ast::ImplItemKind::TypeAliasDef(it) => TypeAlias { id: ctx.to_def(it) }.into(),\n+                })\n+                .collect()\n+        } else {\n+            Vec::new()\n+        };\n+        Arc::new(TraitData { name, items })\n+    }\n+\n+    pub(crate) fn name(&self) -> &Option<Name> {\n+        &self.name\n+    }\n+\n+    pub(crate) fn items(&self) -> &[TraitItem] {\n+        &self.items\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum TraitItem {\n+    Function(Function),\n+    Const(Const),\n+    TypeAlias(TypeAlias),\n+    // Existential\n+}\n+impl_froms!(TraitItem: Function, Const, TypeAlias);"}, {"sha": "5731153216a4f801108e742828bc786f0d26ee8e", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -821,7 +821,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => {\n                 let receiver_ty = self.infer_expr(*receiver, &Expectation::none());\n-                let resolved = receiver_ty.clone().lookup_method(self.db, method_name);\n+                let resolved =\n+                    receiver_ty.clone().lookup_method(self.db, method_name, &self.resolver);\n                 let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n                     Some((ty, func)) => {\n                         self.write_method_resolution(tgt_expr, func);"}, {"sha": "708a435b4cb4c778295cd06d9e34e8d6e5adc859", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     ids::TraitId,\n     impl_block::{ImplId, ImplBlock, ImplItem},\n     ty::{Ty, TypeCtor},\n-    nameres::CrateModuleId,\n+    nameres::CrateModuleId, resolve::Resolver, traits::TraitItem\n \n };\n \n@@ -73,18 +73,18 @@ impl CrateImplBlocks {\n \n             let target_ty = impl_block.target_ty(db);\n \n-            if let Some(target_ty_fp) = TyFingerprint::for_impl(&target_ty) {\n-                self.impls\n-                    .entry(target_ty_fp)\n-                    .or_insert_with(Vec::new)\n-                    .push((module.module_id, impl_id));\n-            }\n-\n             if let Some(tr) = impl_block.target_trait(db) {\n                 self.impls_by_trait\n                     .entry(tr.id)\n                     .or_insert_with(Vec::new)\n                     .push((module.module_id, impl_id));\n+            } else {\n+                if let Some(target_ty_fp) = TyFingerprint::for_impl(&target_ty) {\n+                    self.impls\n+                        .entry(target_ty_fp)\n+                        .or_insert_with(Vec::new)\n+                        .push((module.module_id, impl_id));\n+                }\n             }\n         }\n \n@@ -120,20 +120,52 @@ fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Option<Crate> {\n }\n \n impl Ty {\n-    // FIXME: cache this as a query?\n-    // - if so, what signature? (TyFingerprint, Name)?\n-    // - or maybe cache all names and def_ids of methods per fingerprint?\n     /// Look up the method with the given name, returning the actual autoderefed\n     /// receiver type (but without autoref applied yet).\n-    pub fn lookup_method(self, db: &impl HirDatabase, name: &Name) -> Option<(Ty, Function)> {\n-        self.iterate_methods(db, |ty, f| {\n+    pub fn lookup_method(\n+        self,\n+        db: &impl HirDatabase,\n+        name: &Name,\n+        resolver: &Resolver,\n+    ) -> Option<(Ty, Function)> {\n+        // FIXME: what has priority, an inherent method that needs autoderefs or a trait method?\n+        let inherent_method = self.clone().iterate_methods(db, |ty, f| {\n             let sig = f.signature(db);\n             if sig.name() == name && sig.has_self_param() {\n                 Some((ty.clone(), f))\n             } else {\n                 None\n             }\n-        })\n+        });\n+        inherent_method.or_else(|| self.lookup_trait_method(db, name, resolver))\n+    }\n+\n+    fn lookup_trait_method(\n+        self,\n+        db: &impl HirDatabase,\n+        name: &Name,\n+        resolver: &Resolver,\n+    ) -> Option<(Ty, Function)> {\n+        let mut candidates = Vec::new();\n+        for t in resolver.traits_in_scope() {\n+            let data = t.trait_data(db);\n+            for item in data.items() {\n+                match item {\n+                    &TraitItem::Function(m) => {\n+                        let sig = m.signature(db);\n+                        if sig.name() == name && sig.has_self_param() {\n+                            candidates.push((t, m));\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        // FIXME the implements check may result in other obligations or unifying variables?\n+        candidates.retain(|(_t, _m)| /* self implements t */ true);\n+        // FIXME what happens if there are still multiple potential candidates?\n+        let (_chosen_trait, chosen_method) = candidates.first()?;\n+        Some((self.clone(), *chosen_method))\n     }\n \n     // This would be nicer if it just returned an iterator, but that runs into"}, {"sha": "97104326610cfb5c9befe9254cd324e9cb296fde", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -1272,8 +1272,8 @@ fn test() {\n [241; 252) 'Struct::FOO': u32\n [262; 263) 'y': u32\n [266; 275) 'Enum::BAR': u32\n-[285; 286) 'z': u32\n-[289; 302) 'TraitTest::ID': u32\"###\n+[285; 286) 'z': {unknown}\n+[289; 302) 'TraitTest::ID': {unknown}\"###\n     );\n }\n \n@@ -1918,9 +1918,9 @@ fn test() {\n [110; 114) 'self': &{unknown}\n [170; 228) '{     ...i128 }': ()\n [176; 178) 'S1': S1\n-[176; 187) 'S1.method()': {unknown}\n+[176; 187) 'S1.method()': u32\n [203; 205) 'S2': S2\n-[203; 214) 'S2.method()': {unknown}\"###\n+[203; 214) 'S2.method()': u32\"###\n     );\n }\n \n@@ -1964,10 +1964,10 @@ mod bar_test {\n [169; 173) 'self': &{unknown}\n [300; 337) '{     ...     }': ()\n [310; 311) 'S': S\n-[310; 320) 'S.method()': {unknown}\n+[310; 320) 'S.method()': u32\n [416; 454) '{     ...     }': ()\n [426; 427) 'S': S\n-[426; 436) 'S.method()': {unknown}\"###\n+[426; 436) 'S.method()': i128\"###\n     );\n }\n "}, {"sha": "47a37e4d19c7475baac8bc99790cb5e79f5fe1a7", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -4061,7 +4061,11 @@ impl ast::NameOwner for TraitDef {}\n impl ast::AttrsOwner for TraitDef {}\n impl ast::DocCommentsOwner for TraitDef {}\n impl ast::TypeParamsOwner for TraitDef {}\n-impl TraitDef {}\n+impl TraitDef {\n+    pub fn item_list(&self) -> Option<&ItemList> {\n+        super::child_opt(self)\n+    }\n+}\n \n // TrueKw\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "ad6d74162b94b6f871896d96955d8f306162c2d5", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/c947c15ce1ec02261803f10568e4659e9396109e/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=c947c15ce1ec02261803f10568e4659e9396109e", "patch": "@@ -292,7 +292,10 @@ Grammar(\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n         \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n         \"EnumVariant\": ( traits: [\"NameOwner\", \"DocCommentsOwner\", \"AttrsOwner\"], options: [\"Expr\"] ),\n-        \"TraitDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeParamsOwner\"] ),\n+        \"TraitDef\": (\n+            traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeParamsOwner\"],\n+            options: [\"ItemList\"]\n+        ),\n         \"Module\": (\n             traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],\n             options: [ \"ItemList\" ]"}]}