{"sha": "bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "node_id": "C_kwDOAAsO6NoAKGJlZjQ4ZjkzMTQ4OWMyYWQyNjM5NDhkNmIyMWFjYTljMmUzY2EyZjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-09T16:32:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-09T16:32:16Z"}, "message": "Rollup merge of #101492 - TaKO8Ki:suggest-adding-array-length-to-ref-to-array, r=oli-obk\n\nSuggest adding array lengths to references to arrays if possible\n\nref: https://github.com/rust-lang/rust/pull/100590#pullrequestreview-1096851146", "tree": {"sha": "3bddb534cde1e89178ca84cf5b45cb0217d50a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bddb534cde1e89178ca84cf5b45cb0217d50a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjG2qQCRBK7hj4Ov3rIwAAy84IAIJ5Bj0keHEAWAnlxdSXBUAC\n6nPy86tYZqUaRUW2OvUfzGgdZRhJQ0W0Ci/fwGDzB5F6UNCb2fMxsreSsrdxXpr6\nZtg06xjWhqd/e8xoaW76LV6lqqqz8UAyuyPyLzh78wFnZojTavMwAscF4x0r6h4i\nETrbkyKoX0MInITeUs93FbQ393lrUXMASfSf6SzW34uyLRMtmKT4apCfr59pK10G\nUlsJ7QkdQXd4QEAlRmyKVZRFdNXL2CKoC0R1xJKxkmg6Rj4F5fMgpGoWpul3BndZ\nf41gjdm5+53QrgRqA6UlQPvsx5JshAzcfkEm8h8pR+/B2nk6vhCb+rNrbWQnMsQ=\n=Jw/Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bddb534cde1e89178ca84cf5b45cb0217d50a6d\nparent d9609c7c26875b37e97838fa8c5d06c6dfb66fdc\nparent 1e384423a9cfd678f976cf0183c81a770da2a325\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662741136 +0530\ncommitter GitHub <noreply@github.com> 1662741136 +0530\n\nRollup merge of #101492 - TaKO8Ki:suggest-adding-array-length-to-ref-to-array, r=oli-obk\n\nSuggest adding array lengths to references to arrays if possible\n\nref: https://github.com/rust-lang/rust/pull/100590#pullrequestreview-1096851146\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "html_url": "https://github.com/rust-lang/rust/commit/bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "html_url": "https://github.com/rust-lang/rust/commit/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc"}, {"sha": "1e384423a9cfd678f976cf0183c81a770da2a325", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e384423a9cfd678f976cf0183c81a770da2a325", "html_url": "https://github.com/rust-lang/rust/commit/1e384423a9cfd678f976cf0183c81a770da2a325"}], "stats": {"total": 149, "additions": 120, "deletions": 29}, "files": [{"sha": "0de99f7a3dbbdc9aef7fa146ddb6248312b1305e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "patch": "@@ -2401,6 +2401,14 @@ impl<'hir> Ty<'hir> {\n             _ => None,\n         }\n     }\n+\n+    pub fn peel_refs(&self) -> &Self {\n+        let mut final_ty = self;\n+        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+            final_ty = &ty;\n+        }\n+        final_ty\n+    }\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`."}, {"sha": "21392001364138f601c5c42b30aa6a8c9a4a7c1b", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "patch": "@@ -1305,31 +1305,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_array_len(&self, expr: &'tcx hir::Expr<'tcx>, array_len: u64) {\n-        if let Some(parent_hir_id) = self.tcx.hir().find_parent_node(expr.hir_id) {\n-            let ty = match self.tcx.hir().find(parent_hir_id) {\n-                Some(\n-                    hir::Node::Local(hir::Local { ty: Some(ty), .. })\n-                    | hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, _), .. }),\n-                ) => Some(ty),\n-                _ => None,\n-            };\n-            if let Some(ty) = ty\n-                && let hir::TyKind::Array(_, length) = ty.kind\n-                && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n-                && let Some(span) = self.tcx.hir().opt_span(hir_id)\n-            {\n-                match self.tcx.sess.diagnostic().steal_diagnostic(span, StashKey::UnderscoreForArrayLengths) {\n-                    Some(mut err) => {\n-                        err.span_suggestion(\n-                            span,\n-                            \"consider specifying the array length\",\n-                            array_len,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        err.emit();\n-                    }\n-                    None => ()\n+        let parent_node = self.tcx.hir().parent_iter(expr.hir_id).find(|(_, node)| {\n+            !matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::AddrOf(..), .. }))\n+        });\n+        let Some((_,\n+            hir::Node::Local(hir::Local { ty: Some(ty), .. })\n+            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, _), .. }))\n+        ) = parent_node else {\n+            return\n+        };\n+        if let hir::TyKind::Array(_, length) = ty.peel_refs().kind\n+            && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n+            && let Some(span) = self.tcx.hir().opt_span(hir_id)\n+        {\n+            match self.tcx.sess.diagnostic().steal_diagnostic(span, StashKey::UnderscoreForArrayLengths) {\n+                Some(mut err) => {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider specifying the array length\",\n+                        array_len,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.emit();\n                 }\n+                None => ()\n             }\n         }\n     }"}, {"sha": "867c18a7d5e6b2acee746b91e0740e30a7e1bd68", "filename": "src/test/ui/array-slice-vec/suggest-array-length.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed?ref=bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "patch": "@@ -5,10 +5,22 @@ fn main() {\n     const Foo: [i32; 3] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    const REF_FOO: &[u8; 1] = &[1];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n     let foo: [i32; 3] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n     let bar: [i32; 3] = [0; 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    let ref_foo: &[i32; 3] = &[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let ref_bar: &[i32; 3] = &[0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let multiple_ref_foo: &&[i32; 3] = &&[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n }"}, {"sha": "f66b3d4a899912376be45458fcb781a3c292bf55", "filename": "src/test/ui/array-slice-vec/suggest-array-length.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs?ref=bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "patch": "@@ -5,10 +5,22 @@ fn main() {\n     const Foo: [i32; _] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    const REF_FOO: &[u8; _] = &[1];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n     let foo: [i32; _] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n     let bar: [i32; _] = [0; 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    let ref_foo: &[i32; _] = &[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let ref_bar: &[i32; _] = &[0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n }"}, {"sha": "16c90a04784d0e674565e6ef86f10dbc50b9211c", "filename": "src/test/ui/array-slice-vec/suggest-array-length.stderr", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef48f931489c2ad263948d6b21aca9c2e3ca2f4/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr?ref=bef48f931489c2ad263948d6b21aca9c2e3ca2f4", "patch": "@@ -1,21 +1,45 @@\n error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/suggest-array-length.rs:8:20\n+  --> $DIR/suggest-array-length.rs:11:20\n    |\n LL |     let foo: [i32; _] = [1, 2, 3];\n    |                    ^ `_` not allowed here\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/suggest-array-length.rs:11:20\n+  --> $DIR/suggest-array-length.rs:14:20\n    |\n LL |     let bar: [i32; _] = [0; 3];\n    |                    ^ `_` not allowed here\n \n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:17:25\n+   |\n+LL |     let ref_foo: &[i32; _] = &[1, 2, 3];\n+   |                         ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:20:25\n+   |\n+LL |     let ref_bar: &[i32; _] = &[0; 3];\n+   |                         ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:23:35\n+   |\n+LL |     let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+   |                                   ^ `_` not allowed here\n+\n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/suggest-array-length.rs:5:22\n    |\n LL |     const Foo: [i32; _] = [1, 2, 3];\n    |                      ^ `_` not allowed here\n \n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:8:26\n+   |\n+LL |     const REF_FOO: &[u8; _] = &[1];\n+   |                          ^ `_` not allowed here\n+\n error[E0658]: using `_` for array lengths is unstable\n   --> $DIR/suggest-array-length.rs:5:22\n    |\n@@ -26,7 +50,16 @@ LL |     const Foo: [i32; _] = [1, 2, 3];\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n error[E0658]: using `_` for array lengths is unstable\n-  --> $DIR/suggest-array-length.rs:8:20\n+  --> $DIR/suggest-array-length.rs:8:26\n+   |\n+LL |     const REF_FOO: &[u8; _] = &[1];\n+   |                          ^ help: consider specifying the array length: `1`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:11:20\n    |\n LL |     let foo: [i32; _] = [1, 2, 3];\n    |                    ^ help: consider specifying the array length: `3`\n@@ -35,14 +68,41 @@ LL |     let foo: [i32; _] = [1, 2, 3];\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n error[E0658]: using `_` for array lengths is unstable\n-  --> $DIR/suggest-array-length.rs:11:20\n+  --> $DIR/suggest-array-length.rs:14:20\n    |\n LL |     let bar: [i32; _] = [0; 3];\n    |                    ^ help: consider specifying the array length: `3`\n    |\n    = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:17:25\n+   |\n+LL |     let ref_foo: &[i32; _] = &[1, 2, 3];\n+   |                         ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:20:25\n+   |\n+LL |     let ref_bar: &[i32; _] = &[0; 3];\n+   |                         ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:23:35\n+   |\n+LL |     let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+   |                                   ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}