{"sha": "9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYWJmODBkNTUxN2FiODdkNTk4NWVkZmQ5ZGMxZjY2YWY2ZWFhMTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-08T23:54:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-08T23:54:00Z"}, "message": "Rollup merge of #68960 - eddyb:llvm-dbg-cleanup, r=nagisa\n\ncodegen: misc cleanups around debuginfo scopes and locations.\n\nSee each commit message. Most of these seem to be leftovers from the transition to MIR codegen.\n\nr? @nagisa cc @bjorn3", "tree": {"sha": "1e4dbfc2496f5b37efe1e2aa077975bf45ea828c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4dbfc2496f5b37efe1e2aa077975bf45ea828c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeP0oYCRBK7hj4Ov3rIwAAdHIIAFzBLF711mnmtHMVEUWRRzQm\nU61QHiIKDh7C+aV+GHyK7LJEmxqljPpqGu2O8oizZHkVFUvHOLKm6Una2qZDC8Go\nQMTXpQFzvIJNe0zxGT7lufKSsoCQCQYBZoLJFE0F+oAZLKdny/RNvcuuPSWluune\nv8rejc9gfJfaZblrABLRW6EcHoYiJ5cWb4Otwo9VUe8KlIZpOhkUGCgFAgdPnC2F\nvwtrBSI6eaM5h0S+SS2VDoahGiTGg9VfbKj2K+qnZbi7eTa6uV77HwXLbsVT0MNa\nAvy1QxC/6zvC2CQjM6MVfrRYME9KI2wQdJmIiXL+aPbBm73LBoGrBlPEy4aLeFU=\n=0IhZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e4dbfc2496f5b37efe1e2aa077975bf45ea828c\nparent 83331151004f82c729caef6cef267aea5fc2fd4f\nparent bdb72e7b5ac304c918710ec5c968eaece7e6b57c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581206040 +0100\ncommitter GitHub <noreply@github.com> 1581206040 +0100\n\nRollup merge of #68960 - eddyb:llvm-dbg-cleanup, r=nagisa\n\ncodegen: misc cleanups around debuginfo scopes and locations.\n\nSee each commit message. Most of these seem to be leftovers from the transition to MIR codegen.\n\nr? @nagisa cc @bjorn3\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "html_url": "https://github.com/rust-lang/rust/commit/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83331151004f82c729caef6cef267aea5fc2fd4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83331151004f82c729caef6cef267aea5fc2fd4f", "html_url": "https://github.com/rust-lang/rust/commit/83331151004f82c729caef6cef267aea5fc2fd4f"}, {"sha": "bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "html_url": "https://github.com/rust-lang/rust/commit/bdb72e7b5ac304c918710ec5c968eaece7e6b57c"}], "stats": {"total": 175, "additions": 46, "deletions": 129}, "files": [{"sha": "cdb9657e1ff3c3b294b1a57068e3ebc59f8ab86b", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -66,14 +66,8 @@ fn make_mir_scope(\n     if !has_variables.contains(scope) {\n         // Do not create a DIScope if there are no variables\n         // defined in this MIR Scope, to avoid debuginfo bloat.\n-\n-        // However, we don't skip creating a nested scope if\n-        // our parent is the root, because we might want to\n-        // put arguments in the root and not have shadowing.\n-        if parent_scope.scope_metadata.unwrap() != fn_metadata {\n-            debug_context.scopes[scope] = parent_scope;\n-            return;\n-        }\n+        debug_context.scopes[scope] = parent_scope;\n+        return;\n     }\n \n     let loc = span_start(cx, scope_data.span);"}, {"sha": "c1a7bb50878243fb6d2862263ea94c5cf2deb1ab", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -5,7 +5,6 @@ use rustc_codegen_ssa::mir::debuginfo::VariableKind::*;\n \n use self::metadata::{file_metadata, type_metadata, TypeMap};\n use self::namespace::mangled_name_of_instance;\n-use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n use self::type_names::compute_debuginfo_type_name;\n use self::utils::{create_DIArray, is_node_local_to_unit, span_start, DIB};\n \n@@ -38,7 +37,7 @@ use std::ffi::CString;\n use rustc::ty::layout::{self, HasTyCtxt, LayoutOf, Size};\n use rustc_codegen_ssa::traits::*;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, BytePos, Pos, Span};\n+use rustc_span::{self, BytePos, Span};\n use smallvec::SmallVec;\n use syntax::ast;\n \n@@ -52,7 +51,6 @@ mod utils;\n pub use self::create_scope_map::compute_mir_scopes;\n pub use self::metadata::create_global_var_metadata;\n pub use self::metadata::extend_scope_to_file;\n-pub use self::source_loc::set_source_location;\n \n #[allow(non_upper_case_globals)]\n const DW_TAG_auto_variable: c_uint = 0x100;\n@@ -148,20 +146,18 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn dbg_var_addr(\n         &mut self,\n-        dbg_context: &FunctionDebugContext<&'ll DIScope>,\n         dbg_var: &'ll DIVariable,\n         scope_metadata: &'ll DIScope,\n         variable_alloca: Self::Value,\n         direct_offset: Size,\n         indirect_offsets: &[Size],\n         span: Span,\n     ) {\n-        assert!(!dbg_context.source_locations_enabled);\n         let cx = self.cx();\n \n-        let loc = span_start(cx, span);\n-\n         // Convert the direct and indirect offsets to address ops.\n+        // FIXME(eddyb) use `const`s instead of getting the values via FFI,\n+        // the values should match the ones in the DWARF standard anyway.\n         let op_deref = || unsafe { llvm::LLVMRustDIBuilderCreateOpDeref() };\n         let op_plus_uconst = || unsafe { llvm::LLVMRustDIBuilderCreateOpPlusUconst() };\n         let mut addr_ops = SmallVec::<[_; 8]>::new();\n@@ -178,37 +174,32 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n             }\n         }\n \n-        // FIXME(eddyb) maybe this information could be extracted from `var`,\n+        // FIXME(eddyb) maybe this information could be extracted from `dbg_var`,\n         // to avoid having to pass it down in both places?\n-        source_loc::set_debug_location(\n-            self,\n-            InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()),\n-        );\n+        // NB: `var` doesn't seem to know about the column, so that's a limitation.\n+        let dbg_loc = cx.create_debug_loc(scope_metadata, span);\n         unsafe {\n-            let debug_loc = llvm::LLVMGetCurrentDebugLocation(self.llbuilder);\n             // FIXME(eddyb) replace `llvm.dbg.declare` with `llvm.dbg.addr`.\n-            let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n+            llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n                 DIB(cx),\n                 variable_alloca,\n                 dbg_var,\n                 addr_ops.as_ptr(),\n                 addr_ops.len() as c_uint,\n-                debug_loc,\n+                dbg_loc,\n                 self.llbb(),\n             );\n-\n-            llvm::LLVMSetInstDebugLocation(self.llbuilder, instr);\n         }\n-        source_loc::set_debug_location(self, UnknownLocation);\n     }\n \n-    fn set_source_location(\n-        &mut self,\n-        debug_context: &mut FunctionDebugContext<&'ll DIScope>,\n-        scope: &'ll DIScope,\n-        span: Span,\n-    ) {\n-        set_source_location(debug_context, &self, scope, span)\n+    fn set_source_location(&mut self, scope: &'ll DIScope, span: Span) {\n+        debug!(\"set_source_location: {}\", self.sess().source_map().span_to_string(span));\n+\n+        let dbg_loc = self.cx().create_debug_loc(scope, span);\n+\n+        unsafe {\n+            llvm::LLVMSetCurrentDebugLocation(self.llbuilder, dbg_loc);\n+        }\n     }\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self) {\n         gdb::insert_reference_to_gdb_debug_scripts_section_global(self)\n@@ -342,7 +333,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         };\n         let mut fn_debug_context = FunctionDebugContext {\n             scopes: IndexVec::from_elem(null_scope, &mir.source_scopes),\n-            source_locations_enabled: false,\n             defining_crate: def_id.krate,\n         };\n "}, {"sha": "1f871c7d207a41acc5dd160c9f9086f45b7bddcd", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 23, "deletions": 67, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -1,79 +1,35 @@\n-use self::InternalDebugLocation::*;\n-\n use super::metadata::UNKNOWN_COLUMN_NUMBER;\n use super::utils::{debug_context, span_start};\n-use rustc_codegen_ssa::mir::debuginfo::FunctionDebugContext;\n \n-use crate::builder::Builder;\n-use crate::llvm;\n+use crate::common::CodegenCx;\n use crate::llvm::debuginfo::DIScope;\n-use log::debug;\n+use crate::llvm::{self, Value};\n use rustc_codegen_ssa::traits::*;\n \n use libc::c_uint;\n use rustc_span::{Pos, Span};\n \n-/// Sets the current debug location at the beginning of the span.\n-///\n-/// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n-pub fn set_source_location<D>(\n-    debug_context: &FunctionDebugContext<D>,\n-    bx: &Builder<'_, 'll, '_>,\n-    scope: &'ll DIScope,\n-    span: Span,\n-) {\n-    let dbg_loc = if debug_context.source_locations_enabled {\n-        debug!(\"set_source_location: {}\", bx.sess().source_map().span_to_string(span));\n-        let loc = span_start(bx.cx(), span);\n-        InternalDebugLocation::new(scope, loc.line, loc.col.to_usize())\n-    } else {\n-        UnknownLocation\n-    };\n-    set_debug_location(bx, dbg_loc);\n-}\n-\n-#[derive(Copy, Clone, PartialEq)]\n-pub enum InternalDebugLocation<'ll> {\n-    KnownLocation { scope: &'ll DIScope, line: usize, col: usize },\n-    UnknownLocation,\n-}\n-\n-impl InternalDebugLocation<'ll> {\n-    pub fn new(scope: &'ll DIScope, line: usize, col: usize) -> Self {\n-        KnownLocation { scope, line, col }\n-    }\n-}\n-\n-pub fn set_debug_location(bx: &Builder<'_, 'll, '_>, debug_location: InternalDebugLocation<'ll>) {\n-    let metadata_node = match debug_location {\n-        KnownLocation { scope, line, col } => {\n-            // For MSVC, set the column number to zero.\n-            // Otherwise, emit it. This mimics clang behaviour.\n-            // See discussion in https://github.com/rust-lang/rust/issues/42921\n-            let col_used = if bx.sess().target.target.options.is_like_msvc {\n-                UNKNOWN_COLUMN_NUMBER\n-            } else {\n-                col as c_uint\n-            };\n-            debug!(\"setting debug location to {} {}\", line, col);\n-\n-            unsafe {\n-                Some(llvm::LLVMRustDIBuilderCreateDebugLocation(\n-                    debug_context(bx.cx()).llcontext,\n-                    line as c_uint,\n-                    col_used,\n-                    scope,\n-                    None,\n-                ))\n-            }\n+impl CodegenCx<'ll, '_> {\n+    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n+        let loc = span_start(self, span);\n+\n+        // For MSVC, set the column number to zero.\n+        // Otherwise, emit it. This mimics clang behaviour.\n+        // See discussion in https://github.com/rust-lang/rust/issues/42921\n+        let col_used = if self.sess().target.target.options.is_like_msvc {\n+            UNKNOWN_COLUMN_NUMBER\n+        } else {\n+            loc.col.to_usize() as c_uint\n+        };\n+\n+        unsafe {\n+            llvm::LLVMRustDIBuilderCreateDebugLocation(\n+                debug_context(self).llcontext,\n+                loc.line as c_uint,\n+                col_used,\n+                scope,\n+                None,\n+            )\n         }\n-        UnknownLocation => {\n-            debug!(\"clearing debug location \");\n-            None\n-        }\n-    };\n-\n-    unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(bx.llbuilder, metadata_node);\n     }\n }"}, {"sha": "146b7d3d76c5e1c394bda5ed32d5931229b57b0b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -909,9 +909,7 @@ extern \"C\" {\n     pub fn LLVMDisposeBuilder(Builder: &'a mut Builder<'a>);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: Option<&'a Value>);\n-    pub fn LLVMGetCurrentDebugLocation(Builder: &Builder<'a>) -> &'a Value;\n-    pub fn LLVMSetInstDebugLocation(Builder: &Builder<'a>, Inst: &'a Value);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: &'a Value);\n \n     // Terminators\n     pub fn LLVMBuildRetVoid(B: &Builder<'a>) -> &'a Value;"}, {"sha": "976a656a29b19e4d7307e617a7a61352d068701c", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -14,7 +14,6 @@ use super::{FunctionCx, LocalRef};\n \n pub struct FunctionDebugContext<D> {\n     pub scopes: IndexVec<mir::SourceScope, DebugScope<D>>,\n-    pub source_locations_enabled: bool,\n     pub defining_crate: CrateNum,\n }\n \n@@ -53,11 +52,10 @@ impl<D> DebugScope<D> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn set_debug_loc(&mut self, bx: &mut Bx, source_info: mir::SourceInfo) {\n+    pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         let (scope, span) = self.debug_loc(source_info);\n-        if let Some(debug_context) = &mut self.debug_context {\n-            // FIXME(eddyb) get rid of this unwrap somehow.\n-            bx.set_source_location(debug_context, scope.unwrap(), span);\n+        if let Some(scope) = scope {\n+            bx.set_source_location(scope, span);\n         }\n     }\n \n@@ -210,11 +208,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        let debug_context = match &self.debug_context {\n-            Some(debug_context) => debug_context,\n-            None => return,\n-        };\n-\n         // FIXME(eddyb) add debuginfo for unsized places too.\n         let base = match local_ref {\n             LocalRef::Place(place) => place,\n@@ -264,7 +257,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             if let Some(scope) = scope {\n                 if let Some(dbg_var) = var.dbg_var {\n                     bx.dbg_var_addr(\n-                        debug_context,\n                         dbg_var,\n                         scope,\n                         base.llval,"}, {"sha": "64ead19b358697501b8a57fd22b59dcba72eec58", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -230,13 +230,6 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.br(fx.blocks[mir::START_BLOCK]);\n     }\n \n-    // Up until here, IR instructions for this function have explicitly not been annotated with\n-    // source code location, so we don't step into call setup code. From here on, source location\n-    // emitting should be enabled.\n-    if let Some(debug_context) = &mut fx.debug_context {\n-        debug_context.source_locations_enabled = true;\n-    }\n-\n     let rpo = traversal::reverse_postorder(&mir_body);\n     let mut visited = BitSet::new_empty(mir_body.basic_blocks().len());\n "}, {"sha": "3688ae51b391819979ff3350cd66c8855a212e06", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dabf80d5517ab87d5985edfd9dc1f66af6eaa16/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=9dabf80d5517ab87d5985edfd9dc1f66af6eaa16", "patch": "@@ -49,7 +49,6 @@ pub trait DebugInfoBuilderMethods: BackendTypes {\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn dbg_var_addr(\n         &mut self,\n-        dbg_context: &FunctionDebugContext<Self::DIScope>,\n         dbg_var: Self::DIVariable,\n         scope_metadata: Self::DIScope,\n         variable_alloca: Self::Value,\n@@ -58,12 +57,7 @@ pub trait DebugInfoBuilderMethods: BackendTypes {\n         indirect_offsets: &[Size],\n         span: Span,\n     );\n-    fn set_source_location(\n-        &mut self,\n-        debug_context: &mut FunctionDebugContext<Self::DIScope>,\n-        scope: Self::DIScope,\n-        span: Span,\n-    );\n+    fn set_source_location(&mut self, scope: Self::DIScope, span: Span);\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self);\n     fn set_var_name(&mut self, value: Self::Value, name: &str);\n }"}]}