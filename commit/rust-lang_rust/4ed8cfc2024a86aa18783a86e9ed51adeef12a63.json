{"sha": "4ed8cfc2024a86aa18783a86e9ed51adeef12a63", "node_id": "C_kwDOAAsO6NoAKDRlZDhjZmMyMDI0YTg2YWExODc4M2E4NmU5ZWQ1MWFkZWVmMTJhNjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T14:02:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T14:02:22Z"}, "message": "Rollup merge of #107323 - JakobDegen:const-goto, r=tmiasko\n\nDisable ConstGoto opt in cleanup blocks\n\nFixes #107315 .\n\nThere is probably a smaller hammer that we could use here, but none that is super obviously correct. We can always revisit this in the future.\n\nCould not add a test because custom mir does not support cleanup blocks. However, did check that the fallible_iterator crate no longer ICEs with the other PR cherry picked.\n\nr? `@tmiasko`", "tree": {"sha": "3b3ca4900d3c54b89a25dc08a4d93ad89129b9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3ca4900d3c54b89a25dc08a4d93ad89129b9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed8cfc2024a86aa18783a86e9ed51adeef12a63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0ofuCRBK7hj4Ov3rIwAAk2IIACdoEKsxVCnDZv3M4Mm1ZFPs\nFhqg+/ZvCl+WvdC+tb0uXyT/H9S2DCGJUghm36c89DskrV9dfqklPaodHtDIpVH6\nQUXKGB68wPiBb0OH0EkxeV8Lj73xU/xumYvFcja7J5e6A2m5ljgh2DoaPoAw2iQx\n4FhE0Rsa3E6HaqnX8ojgq/KfxQuJBZxX36KJV8qAo0JKeEPQAIq5yNKTrC7HCVw/\nVwtJbA2MEkjjcQomOWeJZwPWpx8HF8Khtm5xTYqGpHaGK89BphDiSO1u6ppzoVUg\nIrowyn+MxM5+5/l0oA1sPOQbZZLumLPN6WXw2k4lJOy/C5BCDA3LAFL4FiSaeVU=\n=CVOc\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b3ca4900d3c54b89a25dc08a4d93ad89129b9f6\nparent c87996a8ada9be5373cb069b20351a18ef74f226\nparent f8aaf9aadb12c599eb20679cc141ce7c7c253c3a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674741742 +0100\ncommitter GitHub <noreply@github.com> 1674741742 +0100\n\nRollup merge of #107323 - JakobDegen:const-goto, r=tmiasko\n\nDisable ConstGoto opt in cleanup blocks\n\nFixes #107315 .\n\nThere is probably a smaller hammer that we could use here, but none that is super obviously correct. We can always revisit this in the future.\n\nCould not add a test because custom mir does not support cleanup blocks. However, did check that the fallible_iterator crate no longer ICEs with the other PR cherry picked.\n\nr? `@tmiasko`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed8cfc2024a86aa18783a86e9ed51adeef12a63", "html_url": "https://github.com/rust-lang/rust/commit/4ed8cfc2024a86aa18783a86e9ed51adeef12a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed8cfc2024a86aa18783a86e9ed51adeef12a63/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87996a8ada9be5373cb069b20351a18ef74f226", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87996a8ada9be5373cb069b20351a18ef74f226", "html_url": "https://github.com/rust-lang/rust/commit/c87996a8ada9be5373cb069b20351a18ef74f226"}, {"sha": "f8aaf9aadb12c599eb20679cc141ce7c7c253c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8aaf9aadb12c599eb20679cc141ce7c7c253c3a", "html_url": "https://github.com/rust-lang/rust/commit/f8aaf9aadb12c599eb20679cc141ce7c7c253c3a"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "da101ca7ad279e32a64967ba76fa7ef75c999d2e", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ed8cfc2024a86aa18783a86e9ed51adeef12a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed8cfc2024a86aa18783a86e9ed51adeef12a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=4ed8cfc2024a86aa18783a86e9ed51adeef12a63", "patch": "@@ -57,6 +57,15 @@ impl<'tcx> MirPass<'tcx> for ConstGoto {\n }\n \n impl<'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'_, 'tcx> {\n+    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n+        if data.is_cleanup {\n+            // Because of the restrictions around control flow in cleanup blocks, we don't perform\n+            // this optimization at all in such blocks.\n+            return;\n+        }\n+        self.super_basic_block_data(block, data);\n+    }\n+\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         let _: Option<_> = try {\n             let target = terminator.kind.as_goto()?;"}]}