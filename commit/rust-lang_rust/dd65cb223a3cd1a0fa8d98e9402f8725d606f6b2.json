{"sha": "dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNjVjYjIyM2EzY2QxYTBmYThkOThlOTQwMmY4NzI1ZDYwNmY2YjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-23T17:23:58Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T13:43:18Z"}, "message": "Add some infrastructure for timing things where time_passes can't be used.", "tree": {"sha": "21baae140aea35e4b79d31c96d0bfdd7490db874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21baae140aea35e4b79d31c96d0bfdd7490db874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "html_url": "https://github.com/rust-lang/rust/commit/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2799a56a1631ee351e4687ee649808e28cccda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2799a56a1631ee351e4687ee649808e28cccda1", "html_url": "https://github.com/rust-lang/rust/commit/b2799a56a1631ee351e4687ee649808e28cccda1"}], "stats": {"total": 127, "additions": 93, "deletions": 34}, "files": [{"sha": "79e14212db42654358efa2690edba288629c28de", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "patch": "@@ -908,6 +908,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"dump MIR state at various points in translation\"),\n     dump_mir_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"the directory the MIR is dumped into\"),\n+    perf_stats: bool = (false, parse_bool, [UNTRACKED],\n+          \"print some performance-related statistics\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "cc115cbeb85bc375c28ff2c125fe2c199ee448b1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "patch": "@@ -18,6 +18,7 @@ use session::search_paths::PathKind;\n use session::config::{DebugInfoLevel, PanicStrategy};\n use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n+use util::common::duration_to_secs_str;\n use mir::transform as mir_pass;\n \n use syntax::ast::{NodeId, Name};\n@@ -43,6 +44,7 @@ use std::env;\n use std::ffi::CString;\n use std::rc::Rc;\n use std::fmt;\n+use std::time::Duration;\n use libc::c_int;\n \n pub mod config;\n@@ -104,9 +106,23 @@ pub struct Session {\n \n     incr_comp_session: RefCell<IncrCompSession>,\n \n+    /// Some measurements that are being gathered during compilation.\n+    pub perf_stats: PerfStats,\n+\n     next_node_id: Cell<ast::NodeId>,\n }\n \n+pub struct PerfStats {\n+    // The accumulated time needed for computing the SVH of the crate\n+    pub svh_time: Cell<Duration>,\n+    // The accumulated time spent on computing incr. comp. hashes\n+    pub incr_comp_hashes_time: Cell<Duration>,\n+    // The number of incr. comp. hash computations performed\n+    pub incr_comp_hashes_count: Cell<u64>,\n+    // The accumulated time spent on computing symbol hashes\n+    pub symbol_hash_time: Cell<Duration>,\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> token::InternedString {\n         self.crate_disambiguator.borrow().clone()\n@@ -404,6 +420,17 @@ impl Session {\n             None\n         }\n     }\n+\n+    pub fn print_perf_stats(&self) {\n+        println!(\"Total time spent computing SVHs:               {}\",\n+                 duration_to_secs_str(self.perf_stats.svh_time.get()));\n+        println!(\"Total time spent computing incr. comp. hashes: {}\",\n+                 duration_to_secs_str(self.perf_stats.incr_comp_hashes_time.get()));\n+        println!(\"Total number of incr. comp. hashes computed:   {}\",\n+                 self.perf_stats.incr_comp_hashes_count.get());\n+        println!(\"Total time spent computing symbol hashes:      {}\",\n+                 duration_to_secs_str(self.perf_stats.symbol_hash_time.get()));\n+    }\n }\n \n pub fn build_session(sopts: config::Options,\n@@ -520,6 +547,12 @@ pub fn build_session_(sopts: config::Options,\n         available_macros: RefCell::new(HashSet::new()),\n         imported_macro_spans: RefCell::new(HashMap::new()),\n         incr_comp_session: RefCell::new(IncrCompSession::NotInitialized),\n+        perf_stats: PerfStats {\n+            svh_time: Cell::new(Duration::from_secs(0)),\n+            incr_comp_hashes_time: Cell::new(Duration::from_secs(0)),\n+            incr_comp_hashes_count: Cell::new(0),\n+            symbol_hash_time: Cell::new(Duration::from_secs(0)),\n+        }\n     };\n \n     init_llvm(&sess);"}, {"sha": "78f20b77f3185b478690a390e59d95b9c4e95ec3", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "patch": "@@ -17,7 +17,7 @@ use std::fmt::Debug;\n use std::hash::{Hash, BuildHasher};\n use std::iter::repeat;\n use std::path::Path;\n-use std::time::Instant;\n+use std::time::{Duration, Instant};\n \n use hir;\n use hir::intravisit;\n@@ -47,27 +47,44 @@ pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where\n     let rv = f();\n     let dur = start.elapsed();\n \n-    // Hack up our own formatting for the duration to make it easier for scripts\n-    // to parse (always use the same number of decimal places and the same unit).\n-    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n-    let secs = dur.as_secs() as f64;\n-    let secs = secs + dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n-\n     let mem_string = match get_resident() {\n         Some(n) => {\n             let mb = n as f64 / 1_000_000.0;\n             format!(\"; rss: {}MB\", mb.round() as usize)\n         }\n         None => \"\".to_owned(),\n     };\n-    println!(\"{}time: {:.3}{}\\t{}\", repeat(\"  \").take(old).collect::<String>(),\n-             secs, mem_string, what);\n+    println!(\"{}time: {}{}\\t{}\",\n+             repeat(\"  \").take(old).collect::<String>(),\n+             duration_to_secs_str(dur),\n+             mem_string,\n+             what);\n \n     DEPTH.with(|slot| slot.set(old));\n \n     rv\n }\n \n+// Hack up our own formatting for the duration to make it easier for scripts\n+// to parse (always use the same number of decimal places and the same unit).\n+pub fn duration_to_secs_str(dur: Duration) -> String {\n+    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n+    let secs = dur.as_secs() as f64 +\n+               dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n+\n+    format!(\"{:.3}\", secs)\n+}\n+\n+pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n+    F: FnOnce() -> T,\n+{\n+    let start = Instant::now();\n+    let rv = f();\n+    let duration = start.elapsed();\n+    accu.set(duration + accu.get());\n+    rv\n+}\n+\n // Like std::macros::try!, but for Option<>.\n macro_rules! option_try(\n     ($e:expr) => (match $e { Some(e) => e, None => return None })"}, {"sha": "e8137430a0646fe01a90d99b22c99dfe606a5a0d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "patch": "@@ -233,6 +233,10 @@ pub fn compile_input(sess: &Session,\n     // any more, we can finalize it (which involves renaming it)\n     rustc_incremental::finalize_session_directory(sess, trans.link.crate_hash);\n \n+    if sess.opts.debugging_opts.perf_stats {\n+        sess.print_perf_stats();\n+    }\n+\n     controller_entry_point!(compilation_done,\n                             sess,\n                             CompileState::state_when_compilation_done(input, sess, outdir, output),"}, {"sha": "00f29b7412ed2b56860abb20c8525edc887d8d56", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=dd65cb223a3cd1a0fa8d98e9402f8725d606f6b2", "patch": "@@ -108,6 +108,7 @@ use rustc::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n use rustc::ty::subst::Substs;\n use rustc::hir::map::definitions::{DefPath, DefPathData};\n+use rustc::util::common::record_time;\n \n use syntax::attr;\n use syntax::parse::token::{self, InternedString};\n@@ -138,33 +139,35 @@ fn get_symbol_hash<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n     let tcx = scx.tcx();\n \n-    let mut hash_state = scx.symbol_hasher().borrow_mut();\n-\n-    hash_state.reset();\n-\n-    // the main symbol name is not necessarily unique; hash in the\n-    // compiler's internal def-path, guaranteeing each symbol has a\n-    // truly unique path\n-    hash_state.input_str(&def_path.to_string(tcx));\n-\n-    // Include the main item-type. Note that, in this case, the\n-    // assertions about `needs_subst` may not hold, but this item-type\n-    // ought to be the same for every reference anyway.\n-    assert!(!item_type.has_erasable_regions());\n-    let encoded_item_type = tcx.sess.cstore.encode_type(tcx, item_type, def_id_to_string);\n-    hash_state.input(&encoded_item_type[..]);\n-\n-    // also include any type parameters (for generic items)\n-    if let Some(substs) = substs {\n-        for t in substs.types() {\n-            assert!(!t.has_erasable_regions());\n-            assert!(!t.needs_subst());\n-            let encoded_type = tcx.sess.cstore.encode_type(tcx, t, def_id_to_string);\n-            hash_state.input(&encoded_type[..]);\n+    return record_time(&tcx.sess.perf_stats.symbol_hash_time, || {\n+        let mut hash_state = scx.symbol_hasher().borrow_mut();\n+\n+        hash_state.reset();\n+\n+        // the main symbol name is not necessarily unique; hash in the\n+        // compiler's internal def-path, guaranteeing each symbol has a\n+        // truly unique path\n+        hash_state.input_str(&def_path.to_string(tcx));\n+\n+        // Include the main item-type. Note that, in this case, the\n+        // assertions about `needs_subst` may not hold, but this item-type\n+        // ought to be the same for every reference anyway.\n+        assert!(!item_type.has_erasable_regions());\n+        let encoded_item_type = tcx.sess.cstore.encode_type(tcx, item_type, def_id_to_string);\n+        hash_state.input(&encoded_item_type[..]);\n+\n+        // also include any type parameters (for generic items)\n+        if let Some(substs) = substs {\n+            for t in substs.types() {\n+                assert!(!t.has_erasable_regions());\n+                assert!(!t.needs_subst());\n+                let encoded_type = tcx.sess.cstore.encode_type(tcx, t, def_id_to_string);\n+                hash_state.input(&encoded_type[..]);\n+            }\n         }\n-    }\n \n-    return format!(\"h{}\", truncated_hash_result(&mut *hash_state));\n+        format!(\"h{}\", truncated_hash_result(&mut *hash_state))\n+    });\n \n     fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n         let output = symbol_hasher.result_bytes();"}]}