{"sha": "f6d4ef94479db4fd35566e312a5718498fa8f1b8", "node_id": "C_kwDOAAsO6NoAKGY2ZDRlZjk0NDc5ZGI0ZmQzNTU2NmUzMTJhNTcxODQ5OGZhOGYxYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T20:26:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T20:26:58Z"}, "message": "Auto merge of #104573 - matthiaskrgr:rollup-k36ybtp, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #101162 (Migrate rustc_resolve to use SessionDiagnostic, part # 1)\n - #103386 (Don't allow `CoerceUnsized` into `dyn*` (except for trait upcasting))\n - #103405 (Detect incorrect chaining of if and if let conditions and recover)\n - #103594 (Fix non-associativity of `Instant` math on `aarch64-apple-darwin` targets)\n - #104006 (Add variant_name function to `LangItem`)\n - #104494 (Migrate GUI test to use functions)\n - #104516 (rustdoc: clean up sidebar width CSS)\n - #104550 (fix a typo)\n\nFailed merges:\n\n - #104554 (Use `ErrorGuaranteed::unchecked_claim_error_was_emitted` less)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "23439d94541cfcb25557155752ed9e694d824634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23439d94541cfcb25557155752ed9e694d824634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d4ef94479db4fd35566e312a5718498fa8f1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d4ef94479db4fd35566e312a5718498fa8f1b8", "html_url": "https://github.com/rust-lang/rust/commit/f6d4ef94479db4fd35566e312a5718498fa8f1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d4ef94479db4fd35566e312a5718498fa8f1b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc01b2e1f48e72eb59a870b2d4fc0a9c56a760e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc01b2e1f48e72eb59a870b2d4fc0a9c56a760e3", "html_url": "https://github.com/rust-lang/rust/commit/bc01b2e1f48e72eb59a870b2d4fc0a9c56a760e3"}, {"sha": "8749eda8eeca89be9fe750fd21a057d519761e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8749eda8eeca89be9fe750fd21a057d519761e5b", "html_url": "https://github.com/rust-lang/rust/commit/8749eda8eeca89be9fe750fd21a057d519761e5b"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "22a5aa5351ad5b1c044319975a19c81869ddba15", "filename": "clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6d4ef94479db4fd35566e312a5718498fa8f1b8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d4ef94479db4fd35566e312a5718498fa8f1b8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=f6d4ef94479db4fd35566e312a5718498fa8f1b8", "patch": "@@ -79,22 +79,22 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n         SimplifiedTypeGen::StrSimplifiedType,\n     ]\n     .iter()\n-    .flat_map(|&ty| cx.tcx.incoherent_impls(ty));\n-    for item_def_id in lang_items.items().iter().flatten().chain(incoherent_impls) {\n-        let lang_item_path = cx.get_def_path(*item_def_id);\n+    .flat_map(|&ty| cx.tcx.incoherent_impls(ty).iter().copied());\n+    for item_def_id in lang_items.iter().map(|(_, def_id)| def_id).chain(incoherent_impls) {\n+        let lang_item_path = cx.get_def_path(item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {\n                 if matches!(\n-                    cx.tcx.def_kind(*item_def_id),\n+                    cx.tcx.def_kind(item_def_id),\n                     DefKind::Mod | DefKind::Enum | DefKind::Trait\n                 ) {\n-                    for child in cx.tcx.module_children(*item_def_id) {\n+                    for child in cx.tcx.module_children(item_def_id) {\n                         if child.ident.name == *item {\n                             return true;\n                         }\n                     }\n                 } else {\n-                    for child in cx.tcx.associated_item_def_ids(*item_def_id) {\n+                    for child in cx.tcx.associated_item_def_ids(item_def_id) {\n                         if cx.tcx.item_name(*child) == *item {\n                             return true;\n                         }"}, {"sha": "cfba7fa8791de3c7567f09c8a41f643f7cd38427", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f6d4ef94479db4fd35566e312a5718498fa8f1b8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d4ef94479db4fd35566e312a5718498fa8f1b8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=f6d4ef94479db4fd35566e312a5718498fa8f1b8", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace, Res};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, Local, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -91,7 +91,7 @@ impl UnnecessaryDefPath {\n     #[allow(clippy::too_many_lines)]\n     fn check_call(&mut self, cx: &LateContext<'_>, func: &Expr<'_>, args: &[Expr<'_>], span: Span) {\n         enum Item {\n-            LangItem(Symbol),\n+            LangItem(&'static str),\n             DiagnosticItem(Symbol),\n         }\n         static PATHS: &[&[&str]] = &[\n@@ -325,18 +325,9 @@ fn inherent_def_path_res(cx: &LateContext<'_>, segments: &[&str]) -> Option<DefI\n     })\n }\n \n-fn get_lang_item_name(cx: &LateContext<'_>, def_id: DefId) -> Option<Symbol> {\n-    if let Some(lang_item) = cx.tcx.lang_items().items().iter().position(|id| *id == Some(def_id)) {\n-        let lang_items = def_path_res(cx, &[\"rustc_hir\", \"lang_items\", \"LangItem\"], Some(Namespace::TypeNS)).def_id();\n-        let item_name = cx\n-            .tcx\n-            .adt_def(lang_items)\n-            .variants()\n-            .iter()\n-            .nth(lang_item)\n-            .unwrap()\n-            .name;\n-        Some(item_name)\n+fn get_lang_item_name(cx: &LateContext<'_>, def_id: DefId) -> Option<&'static str> {\n+    if let Some((lang_item, _)) = cx.tcx.lang_items().iter().find(|(_, id)| *id == def_id) {\n+        Some(lang_item.variant_name())\n     } else {\n         None\n     }"}, {"sha": "e474f370a5d172cbc4c2b4e469f1bb2daa91483b", "filename": "tests/ui-internal/unnecessary_def_path.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path.fixed?ref=f6d4ef94479db4fd35566e312a5718498fa8f1b8", "patch": "@@ -48,14 +48,14 @@ fn _f<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, did: DefId, expr: &Expr<'_>) {\n     let _ = is_type_lang_item(cx, ty, LangItem::OwnedBox);\n     let _ = is_type_diagnostic_item(cx, ty, sym::maybe_uninit_uninit);\n \n-    let _ = cx.tcx.lang_items().require(LangItem::OwnedBox).ok() == Some(did);\n+    let _ = cx.tcx.lang_items().get(LangItem::OwnedBox) == Some(did);\n     let _ = cx.tcx.is_diagnostic_item(sym::Option, did);\n-    let _ = cx.tcx.lang_items().require(LangItem::OptionSome).ok() == Some(did);\n+    let _ = cx.tcx.lang_items().get(LangItem::OptionSome) == Some(did);\n \n     let _ = is_trait_method(cx, expr, sym::AsRef);\n \n     let _ = is_path_diagnostic_item(cx, expr, sym::Option);\n-    let _ = path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().require(LangItem::IteratorNext).ok() == Some(id));\n+    let _ = path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().get(LangItem::IteratorNext) == Some(id));\n     let _ = is_res_lang_ctor(cx, path_res(cx, expr), LangItem::OptionSome);\n }\n "}, {"sha": "3ca29f099771b9607ab423d6087c0bb2c95cabaf", "filename": "tests/ui-internal/unnecessary_def_path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path.stderr?ref=f6d4ef94479db4fd35566e312a5718498fa8f1b8", "patch": "@@ -57,7 +57,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:51:13\n    |\n LL |     let _ = match_def_path(cx, did, &[\"alloc\", \"boxed\", \"Box\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().require(LangItem::OwnedBox).ok() == Some(did)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().get(LangItem::OwnedBox) == Some(did)`\n \n error: use of a def path to a diagnostic item\n   --> $DIR/unnecessary_def_path.rs:52:13\n@@ -69,7 +69,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:53:13\n    |\n LL |     let _ = match_def_path(cx, did, &[\"core\", \"option\", \"Option\", \"Some\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().require(LangItem::OptionSome).ok() == Some(did)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().get(LangItem::OptionSome) == Some(did)`\n    |\n    = help: if this `DefId` came from a constructor expression or pattern then the parent `DefId` should be used instead\n \n@@ -89,7 +89,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:58:13\n    |\n LL |     let _ = is_expr_path_def_path(cx, expr, &[\"core\", \"iter\", \"traits\", \"Iterator\", \"next\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().require(LangItem::IteratorNext).ok() == Some(id))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().get(LangItem::IteratorNext) == Some(id))`\n \n error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:59:13"}, {"sha": "2a240cc249b0c768f084dab5b6f220ae53a59399", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d4ef94479db4fd35566e312a5718498fa8f1b8/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=f6d4ef94479db4fd35566e312a5718498fa8f1b8", "patch": "@@ -1,10 +1,10 @@\n-error: hardcoded path to a language item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n-LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `LangItem::DerefMut`\n+   = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a diagnostic item\n@@ -15,13 +15,13 @@ LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\",\n    |\n    = help: convert all references to use `sym::deref_method`\n \n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n+error: hardcoded path to a language item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n    |\n-LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `sym::Deref`\n+   = help: convert all references to use `LangItem::DerefMut`\n \n error: aborting due to 3 previous errors\n "}]}