{"sha": "c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "node_id": "C_kwDOAAsO6NoAKGMyZjQ1OWNhNzRlZTM3MjRjMjczY2E2ZmNjZjQwMTVhNjdmYzRhN2Q", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-22T02:11:19Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-22T02:11:19Z"}, "message": "Clean up implementation, deduplicate in errors", "tree": {"sha": "dbc666e2e0539a897d4711651d2a0a16bf6155a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc666e2e0539a897d4711651d2a0a16bf6155a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "html_url": "https://github.com/rust-lang/rust/commit/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749b2b077d0e350dd3ebeac014ab1f3c31d92ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/749b2b077d0e350dd3ebeac014ab1f3c31d92ca3", "html_url": "https://github.com/rust-lang/rust/commit/749b2b077d0e350dd3ebeac014ab1f3c31d92ca3"}], "stats": {"total": 358, "additions": 103, "deletions": 255}, "files": [{"sha": "5dcaebadc42f6063e240c09bd2f24b9461a1db78", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -358,15 +358,9 @@ impl MemoryCellClocks {\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Atomic read with vectors: {:#?} :: {:#?}\", self, clocks);\n-        if self.write <= clocks.clock[self.write_index] {\n-            let atomic = self.atomic_mut();\n-            atomic.read_vector.set_at_index(&clocks.clock, index);\n-            Ok(())\n-        } else {\n-            let atomic = self.atomic_mut();\n-            atomic.read_vector.set_at_index(&clocks.clock, index);\n-            Err(DataRace)\n-        }\n+        let atomic = self.atomic_mut();\n+        atomic.read_vector.set_at_index(&clocks.clock, index);\n+        if self.write <= clocks.clock[self.write_index] { Ok(()) } else { Err(DataRace) }\n     }\n \n     /// Detect data-races with an atomic write, either with a non-atomic read or with\n@@ -377,13 +371,11 @@ impl MemoryCellClocks {\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n         log::trace!(\"Atomic write with vectors: {:#?} :: {:#?}\", self, clocks);\n+        let atomic = self.atomic_mut();\n+        atomic.write_vector.set_at_index(&clocks.clock, index);\n         if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n-            let atomic = self.atomic_mut();\n-            atomic.write_vector.set_at_index(&clocks.clock, index);\n             Ok(())\n         } else {\n-            let atomic = self.atomic_mut();\n-            atomic.write_vector.set_at_index(&clocks.clock, index);\n             Err(DataRace)\n         }\n     }\n@@ -635,6 +627,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n         if let Some(data_race) = &mut this.machine.data_race {\n             data_race.maybe_perform_sync_operation(\n                 &this.machine.threads,\n+                current_span,\n                 |index, mut clocks| {\n                     log::trace!(\"Atomic fence on {:?} with ordering {:?}\", index, atomic);\n \n@@ -658,7 +651,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                     // Increment timestamp in case of release semantics.\n                     Ok(atomic != AtomicFenceOrd::Acquire)\n                 },\n-                current_span,\n             )\n         } else {\n             Ok(())\n@@ -721,7 +713,7 @@ impl VClockAlloc {\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls,\n             )\n-            | MemoryKind::CallerLocation => (VTimestamp::NONE, VectorIdx::MAX_INDEX),\n+            | MemoryKind::CallerLocation => (VTimestamp::ZERO, VectorIdx::MAX_INDEX),\n         };\n         VClockAlloc {\n             alloc_ranges: RefCell::new(RangeMap::new(\n@@ -752,7 +744,7 @@ impl VClockAlloc {\n                     let idx = l_remainder_slice\n                         .iter()\n                         .enumerate()\n-                        .find_map(|(idx, &r)| if r == VTimestamp::NONE { None } else { Some(idx) })\n+                        .find_map(|(idx, &r)| if r == VTimestamp::ZERO { None } else { Some(idx) })\n                         .expect(\"Invalid VClock Invariant\");\n                     Some(idx + r_slice.len())\n                 } else {\n@@ -1132,6 +1124,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                 // Perform the atomic operation.\n                 data_race.maybe_perform_sync_operation(\n                     &this.machine.threads,\n+                    current_span,\n                     |index, mut clocks| {\n                         for (offset, range) in\n                             alloc_meta.alloc_ranges.borrow_mut().iter_mut(base_offset, size)\n@@ -1153,7 +1146,6 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                         // This conservatively assumes all operations have release semantics\n                         Ok(true)\n                     },\n-                    current_span,\n                 )?;\n \n                 // Log changes to atomic memory.\n@@ -1497,8 +1489,8 @@ impl GlobalState {\n     fn maybe_perform_sync_operation<'tcx>(\n         &self,\n         thread_mgr: &ThreadManager<'_, '_>,\n-        op: impl FnOnce(VectorIdx, RefMut<'_, ThreadClockSet>) -> InterpResult<'tcx, bool>,\n         current_span: Span,\n+        op: impl FnOnce(VectorIdx, RefMut<'_, ThreadClockSet>) -> InterpResult<'tcx, bool>,\n     ) -> InterpResult<'tcx> {\n         if self.multi_threaded.get() {\n             let (index, clocks) = self.current_thread_state_mut(thread_mgr);"}, {"sha": "ab4764dd1c87a84cf4df94d7a368c98e654b9227", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -48,14 +48,14 @@ const SMALL_VECTOR: usize = 4;\n /// The time-stamps recorded in the data-race detector consist of both\n /// a 32-bit unsigned integer which is the actual timestamp, and a `Span`\n /// so that diagnostics can report what code was responsible for an operation.\n-#[derive(Clone, Copy, Debug, Eq)]\n+#[derive(Clone, Copy, Debug)]\n pub struct VTimestamp {\n     time: u32,\n     pub span: Span,\n }\n \n impl VTimestamp {\n-    pub const NONE: VTimestamp = VTimestamp { time: 0, span: DUMMY_SP };\n+    pub const ZERO: VTimestamp = VTimestamp { time: 0, span: DUMMY_SP };\n \n     pub fn span_data(&self) -> SpanData {\n         self.span.data()\n@@ -68,6 +68,8 @@ impl PartialEq for VTimestamp {\n     }\n }\n \n+impl Eq for VTimestamp {}\n+\n impl PartialOrd for VTimestamp {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         Some(self.cmp(other))\n@@ -98,7 +100,7 @@ impl VClock {\n     /// for a value at the given index\n     pub fn new_with_index(index: VectorIdx, timestamp: VTimestamp) -> VClock {\n         let len = index.index() + 1;\n-        let mut vec = smallvec::smallvec![VTimestamp::NONE; len];\n+        let mut vec = smallvec::smallvec![VTimestamp::ZERO; len];\n         vec[index.index()] = timestamp;\n         VClock(vec)\n     }\n@@ -115,7 +117,7 @@ impl VClock {\n     #[inline]\n     fn get_mut_with_min_len(&mut self, min_len: usize) -> &mut [VTimestamp] {\n         if self.0.len() < min_len {\n-            self.0.resize(min_len, VTimestamp::NONE);\n+            self.0.resize(min_len, VTimestamp::ZERO);\n         }\n         assert!(self.0.len() >= min_len);\n         self.0.as_mut_slice()\n@@ -361,7 +363,7 @@ impl Index<VectorIdx> for VClock {\n \n     #[inline]\n     fn index(&self, index: VectorIdx) -> &VTimestamp {\n-        self.as_slice().get(index.to_u32() as usize).unwrap_or(&VTimestamp::NONE)\n+        self.as_slice().get(index.to_u32() as usize).unwrap_or(&VTimestamp::ZERO)\n     }\n }\n "}, {"sha": "2a48c9e6cd0158e7bd09680a03baf448f3c8f097", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -258,7 +258,7 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n             // The thread index and timestamp of the initialisation write\n             // are never meaningfully used, so it's fine to leave them as 0\n             store_index: VectorIdx::from(0),\n-            timestamp: VTimestamp::NONE,\n+            timestamp: VTimestamp::ZERO,\n             val: init,\n             is_seqcst: false,\n             load_info: RefCell::new(LoadInfo::default()),"}, {"sha": "66cdd331f9fd76bc087041167b7c6a3c69e3af6b", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -69,8 +69,8 @@ impl fmt::Display for TerminationInfo {\n             DataRace { ptr, op1, op2 } =>\n                 write!(\n                     f,\n-                    \"Data race detected between {} on {} and {} on {} at {:?}\",\n-                    op1.action, op1.thread_info, op2.action, op2.thread_info, ptr,\n+                    \"Data race detected between {} on {} and {} on {} at {:?}. The {} is here\",\n+                    op1.action, op1.thread_info, op2.action, op2.thread_info, ptr, op1.action\n                 ),\n         }\n     }\n@@ -222,10 +222,9 @@ pub fn report_error<'tcx, 'mir>(\n                 vec![(Some(*span), format!(\"the `{link_name}` symbol is defined here\"))],\n             Int2PtrWithStrictProvenance =>\n                 vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n-            DataRace { ptr: _, op1, op2 } =>\n+            DataRace { op2, .. } =>\n                 vec![\n-                    (Some(op1.span), format!(\"The {} on {} is here\", op1.action, op1.thread_info)),\n-                    (Some(op2.span), format!(\"The {} on {} is here\", op2.action, op2.thread_info)),\n+                    (Some(op2.span), format!(\"and {} on {}, which is here\", op2.action, op2.thread_info)),\n                     (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n                     (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                 ],"}, {"sha": "ff79f07ba87eaebac16af9669ef16b97e3f7819a", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/alloc_read_race.rs:LL:CC\n-   |\n-LL | ...   *pointer.load(Ordering::Relaxed)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Allocate on thread `<unnamed>` is here\n+help: and Allocate on thread `<unnamed>`, which is here\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |\n LL |             pointer.store(Box::into_raw(Box::new_uninit()), Ordering::Relaxed);"}, {"sha": "2398cbf12e4bdfd6822ad91b6d09963c84e962ba", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/alloc_write_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed) = 2;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/alloc_write_race.rs:LL:CC\n-   |\n-LL | ...   *pointer.load(Ordering::Relaxed) = 2;\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Allocate on thread `<unnamed>` is here\n+help: and Allocate on thread `<unnamed>`, which is here\n   --> $DIR/alloc_write_race.rs:LL:CC\n    |\n LL |                 .store(Box::into_raw(Box::<usize>::new_uninit()) as *mut usize, Ordering::Relaxed);"}, {"sha": "15cfaef11cb4a5d146afaafda4ff0e509946cc11", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Atomic Load is here\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n LL |             (&*c.0).load(Ordering::SeqCst)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Atomic Load is here\n    |\n-help: The Atomic Load on thread `<unnamed>` is here\n-  --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n-   |\n-LL | ...   (&*c.0).load(Ordering::SeqCst)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n LL |             *(c.0 as *mut usize) = 32;"}, {"sha": "d4989146577c0453405874ae0aa74c9d1e0939b3", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n-   |\n-LL | ...   *atomic_ref.get_mut() = 32;\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Atomic Load on thread `<unnamed>` is here\n+help: and Atomic Load on thread `<unnamed>`, which is here\n   --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n    |\n LL |             atomic_ref.load(Ordering::SeqCst)"}, {"sha": "5378ea60672adc38540c4b3eb9571febe3ff54b0", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut()\n-   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n-   |\n-LL |             *atomic_ref.get_mut()\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-help: The Atomic Store on thread `<unnamed>` is here\n+help: and Atomic Store on thread `<unnamed>`, which is here\n   --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |\n LL |             atomic_ref.store(32, Ordering::SeqCst)"}, {"sha": "3da2f624bfc96a0905de14320d25e71948e2cb6d", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Atomic Store is here\n   --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n LL |             (&*c.0).store(32, Ordering::SeqCst);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Atomic Store is here\n    |\n-help: The Atomic Store on thread `<unnamed>` is here\n-  --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n-   |\n-LL | ...   (&*c.0).store(32, Ordering::SeqCst);\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n LL |             let _val = *(c.0 as *mut usize);"}, {"sha": "4d1dbc0b8465f94b9802c43281d8da651b4bbcd7", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Atomic Store is here\n   --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n    |\n LL |             (&*c.0).store(64, Ordering::SeqCst);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Atomic Store is here\n    |\n-help: The Atomic Store on thread `<unnamed>` is here\n-  --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n-   |\n-LL | ...   (&*c.0).store(64, Ordering::SeqCst);\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n    |\n LL |             *(c.0 as *mut usize) = 32;"}, {"sha": "cec68ba159fbbf018e145ad28633aecd41f66dae", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n-   |\n-LL | ...   *atomic_ref.get_mut() = 32;\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: The Atomic Store on thread `<unnamed>` is here\n+help: and Atomic Store on thread `<unnamed>`, which is here\n   --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n    |\n LL |             atomic_ref.store(64, Ordering::SeqCst);"}, {"sha": "7ef38c6706cc85dda8059305f7a66c39d2d2b537", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/dangling_thread_async_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/dangling_thread_async_race.rs:LL:CC\n-   |\n-LL |             *c.0 = 64;\n-   |             ^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/dangling_thread_async_race.rs:LL:CC\n    |\n LL |             *c.0 = 32;"}, {"sha": "3f556b6a8a8b37a8f2101dc6f0d56a31791c59b4", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/dangling_thread_race.rs:LL:CC\n    |\n LL |         *c.0 = 64;\n-   |         ^^^^^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `main` is here\n-  --> $DIR/dangling_thread_race.rs:LL:CC\n-   |\n-LL |         *c.0 = 64;\n-   |         ^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/dangling_thread_race.rs:LL:CC\n    |\n LL |             *c.0 = 32;"}, {"sha": "af2b2ed3987a63a367ed1d538806f67a4eec4658", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n   --> $DIR/dealloc_read_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,19 +7,9 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n    |\n-help: The Deallocate on thread `<unnamed>` is here\n-  --> $DIR/dealloc_read_race1.rs:LL:CC\n-   |\n-LL | /             __rust_dealloc(\n-LL | |\n-LL | |                 ptr.0 as *mut _,\n-LL | |                 std::mem::size_of::<usize>(),\n-LL | |                 std::mem::align_of::<usize>(),\n-LL | |             );\n-   | |_____________^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/dealloc_read_race1.rs:LL:CC\n    |\n LL |             let _val = *ptr.0;"}, {"sha": "d6b2a8a573fa944c5f8890752c2f2d82f4b54f3a", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n   --> $DIR/dealloc_read_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n    |\n-help: The Deallocate on thread `<unnamed>` is here\n-  --> $DIR/dealloc_read_race_stack.rs:LL:CC\n-   |\n-LL |             }\n-   |             ^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/dealloc_read_race_stack.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Acquire)"}, {"sha": "6b235f651af84c1256a96b24683a0814cb78fab5", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Deallocate is here\n   --> $DIR/dealloc_write_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,19 +7,9 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Deallocate is here\n    |\n-help: The Deallocate on thread `<unnamed>` is here\n-  --> $DIR/dealloc_write_race1.rs:LL:CC\n-   |\n-LL | /             __rust_dealloc(\n-LL | |\n-LL | |                 ptr.0 as *mut _,\n-LL | |                 std::mem::size_of::<usize>(),\n-LL | |                 std::mem::align_of::<usize>(),\n-LL | |             );\n-   | |_____________^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/dealloc_write_race1.rs:LL:CC\n    |\n LL |             *ptr.0 = 2;"}, {"sha": "6e20a1aa5e9a2054b1b0f2e53a628b2da5774ba0", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Deallocate is here\n   --> $DIR/dealloc_write_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Deallocate is here\n    |\n-help: The Deallocate on thread `<unnamed>` is here\n-  --> $DIR/dealloc_write_race_stack.rs:LL:CC\n-   |\n-LL |             }\n-   |             ^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/dealloc_write_race_stack.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Acquire) = 3;"}, {"sha": "70d671ea7b7ab773619fcda18df1f25c86123789", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/enable_after_join_to_main.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/enable_after_join_to_main.rs:LL:CC\n-   |\n-LL |             *c.0 = 64;\n-   |             ^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/enable_after_join_to_main.rs:LL:CC\n    |\n LL |             *c.0 = 32;"}, {"sha": "d073124df00418c7d10d7111a1f6bd9faf0f4a76", "filename": "src/tools/miri/tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/fence_after_load.rs:LL:CC\n    |\n LL |     unsafe { V = 2 }\n-   |              ^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n+   |              ^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `main` is here\n-  --> $DIR/fence_after_load.rs:LL:CC\n-   |\n-LL |     unsafe { V = 2 }\n-   |              ^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/fence_after_load.rs:LL:CC\n    |\n LL |         unsafe { V = 1 }"}, {"sha": "ae237a9890de7c3e99500ab9cc0b874c5d5f2d81", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/read_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/read_write_race.rs:LL:CC\n-   |\n-LL |             *c.0 = 64;\n-   |             ^^^^^^^^^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/read_write_race.rs:LL:CC\n    |\n LL |             let _val = *c.0;"}, {"sha": "ec01d9be6e2748ab8b283bbf350e8d1abfcc13bf", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var\n-   |             ^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/read_write_race_stack.rs:LL:CC\n-   |\n-LL |             stack_var\n-   |             ^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Acquire) = 3;"}, {"sha": "50768ebcdb95410727e299c1556b974f14345f4a", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/relax_acquire_race.rs:LL:CC\n-   |\n-LL |                 *c.0\n-   |                 ^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |\n LL |             *c.0 = 1;"}, {"sha": "c3348ae0a3ebbe9efd9a1bce670de80bf527094d", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/release_seq_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/release_seq_race.rs:LL:CC\n-   |\n-LL |                 *c.0\n-   |                 ^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/release_seq_race.rs:LL:CC\n    |\n LL |             *c.0 = 1;"}, {"sha": "522226faa40b9e31d26f928387e664b1b505983a", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/release_seq_race_same_thread.rs:LL:CC\n-   |\n-LL |                 *c.0\n-   |                 ^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |\n LL |             *c.0 = 1;"}, {"sha": "672f08c4221bbb299ad9186809fc06f36b39d495", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n   --> $DIR/rmw_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Read is here\n    |\n-help: The Read on thread `<unnamed>` is here\n-  --> $DIR/rmw_race.rs:LL:CC\n-   |\n-LL |                 *c.0\n-   |                 ^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/rmw_race.rs:LL:CC\n    |\n LL |             *c.0 = 1;"}, {"sha": "e21fe201d1de8b9dc00aa188669eb140393e6c73", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n LL | }\n-   |  ^ Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+   |  ^ Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC. The Deallocate is here\n    |\n-help: The Deallocate on thread `main` is here\n-  --> $DIR/stack_pop_race.rs:LL:CC\n-   |\n-LL | }\n-   |  ^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n LL |         let _val = unsafe { *ptr.0 };"}, {"sha": "1f67303e5968301d3d17c269b56435e13a6331dc", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/write_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/write_write_race.rs:LL:CC\n-   |\n-LL |             *c.0 = 64;\n-   |             ^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/write_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 32;"}, {"sha": "5b6481327ce705f25cd9ef66a8b72558118fee02", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/write_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var = 1usize;\n-   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/write_write_race_stack.rs:LL:CC\n-   |\n-LL |             stack_var = 1usize;\n-   |             ^^^^^^^^^^^^^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/write_write_race_stack.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Acquire) = 3;"}, {"sha": "6f9ea26c0883daa907880dac4d3dbdc4ab13bc2b", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/retag_data_race_read.rs:LL:CC\n    |\n LL |         *p = 5;\n-   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/retag_data_race_read.rs:LL:CC\n-   |\n-LL |         *p = 5;\n-   |         ^^^^^^\n-help: The Read on thread `<unnamed>` is here\n+help: and Read on thread `<unnamed>`, which is here\n   --> $DIR/retag_data_race_read.rs:LL:CC\n    |\n LL |         let _r = &*p;"}, {"sha": "44f17bd6ffa72134f356a467fe303e413baa818e", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2f459ca74ee3724c273ca6fccf4015a67fc4a7d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr?ref=c2f459ca74ee3724c273ca6fccf4015a67fc4a7d", "patch": "@@ -1,15 +1,10 @@\n-error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n   --> $DIR/retag_data_race_write.rs:LL:CC\n    |\n LL |         *p = 5;\n-   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n+   |         ^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC. The Write is here\n    |\n-help: The Write on thread `<unnamed>` is here\n-  --> $DIR/retag_data_race_write.rs:LL:CC\n-   |\n-LL |         *p = 5;\n-   |         ^^^^^^\n-help: The Write on thread `<unnamed>` is here\n+help: and Write on thread `<unnamed>`, which is here\n   --> $DIR/retag_data_race_write.rs:LL:CC\n    |\n LL |         let _r = &mut *p;"}]}