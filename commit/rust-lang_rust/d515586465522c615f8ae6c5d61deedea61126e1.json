{"sha": "d515586465522c615f8ae6c5d61deedea61126e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MTU1ODY0NjU1MjJjNjE1ZjhhZTZjNWQ2MWRlZWRlYTYxMTI2ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-23T17:16:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-23T17:16:22Z"}, "message": "Auto merge of #36449 - canndrew:expand_is_uninhabited, r=eddyb\n\nExpand is_uninhabited\n\nThis allows code such as this to compile:\n\n``` rust\nlet x: ! = ...;\nmatch x {};\n\nlet y: (u32, !) = ...;\nmatch y {};\n```\n\n@eddyb You were worried about making this change. Do you have any idea about what could break? Are there any special tests that need to be written for it?", "tree": {"sha": "d1ddd32d93ff74d68d74aece84692e26b64c075b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ddd32d93ff74d68d74aece84692e26b64c075b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d515586465522c615f8ae6c5d61deedea61126e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d515586465522c615f8ae6c5d61deedea61126e1", "html_url": "https://github.com/rust-lang/rust/commit/d515586465522c615f8ae6c5d61deedea61126e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d515586465522c615f8ae6c5d61deedea61126e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a83df6615d09cda6ed9b53f7daba2d78c925d", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "html_url": "https://github.com/rust-lang/rust/commit/127a83df6615d09cda6ed9b53f7daba2d78c925d"}, {"sha": "2121118f5401d84975f7910e0b71b32e74b990ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2121118f5401d84975f7910e0b71b32e74b990ec", "html_url": "https://github.com/rust-lang/rust/commit/2121118f5401d84975f7910e0b71b32e74b990ec"}], "stats": {"total": 84, "additions": 66, "deletions": 18}, "files": [{"sha": "7982c641ede5cbefbbef80337319e3976f478b8a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d515586465522c615f8ae6c5d61deedea61126e1", "patch": "@@ -30,7 +30,7 @@ use ty::subst::{Subst, Substs};\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n use util::nodemap::NodeSet;\n-use util::nodemap::FxHashMap;\n+use util::nodemap::{FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n@@ -1390,6 +1390,22 @@ impl<'tcx> serialize::UseSpecializedEncodable for AdtDef<'tcx> {\n \n impl<'tcx> serialize::UseSpecializedDecodable for AdtDef<'tcx> {}\n \n+impl<'a, 'gcx, 'tcx> AdtDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n+                                  block: Option<NodeId>,\n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>) -> bool {\n+        if !visited.insert((self.did, substs)) {\n+            return false;\n+        };\n+        self.variants.iter().all(|v| {\n+            v.is_uninhabited_recurse(visited, block, cx, substs, self.is_union())\n+        })\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum AdtKind { Struct, Union, Enum }\n \n@@ -1532,11 +1548,6 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n         self.variants.iter().flat_map(VariantDefData::fields_iter)\n     }\n \n-    #[inline]\n-    pub fn is_empty(&self) -> bool {\n-        self.variants.is_empty()\n-    }\n-\n     #[inline]\n     pub fn is_univariant(&self) -> bool {\n         self.variants.len() == 1\n@@ -1796,6 +1807,22 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> VariantDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n+                                  block: Option<NodeId>,\n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>,\n+                                  is_union: bool) -> bool {\n+        if is_union {\n+            self.fields.iter().all(|f| f.is_uninhabited_recurse(visited, block, cx, substs))\n+        } else {\n+            self.fields.iter().any(|f| f.is_uninhabited_recurse(visited, block, cx, substs))\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx, 'container> FieldDefData<'tcx, 'container> {\n     pub fn new(did: DefId,\n                name: Name,\n@@ -1821,6 +1848,18 @@ impl<'a, 'gcx, 'tcx, 'container> FieldDefData<'tcx, 'container> {\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> FieldDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n+                                  block: Option<NodeId>,\n+                                  tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>) -> bool {\n+        block.map_or(true, |b| self.vis.is_accessible_from(b, &tcx.map)) &&\n+        self.ty(tcx, substs).is_uninhabited_recurse(visited, block, tcx)\n+    }\n+}\n+\n /// Records the substitutions used to translate the polytype for an\n /// item into the monotype of an item reference.\n #[derive(Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "cb3176cce10bd468e747db63596e2f0691205e21", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d515586465522c615f8ae6c5d61deedea61126e1", "patch": "@@ -22,8 +22,9 @@ use collections::enum_set::{self, EnumSet, CLike};\n use std::fmt;\n use std::ops;\n use syntax::abi;\n-use syntax::ast::{self, Name};\n+use syntax::ast::{self, Name, NodeId};\n use syntax::symbol::{keywords, InternedString};\n+use util::nodemap::FxHashSet;\n \n use serialize;\n \n@@ -929,19 +930,27 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_uninhabited(&self, _cx: TyCtxt) -> bool {\n-        // FIXME(#24885): be smarter here, the AdtDefData::is_empty method could easily be made\n-        // more complete.\n+    /// Checks whether a type is uninhabited.\n+    /// If `block` is `Some(id)` it also checks that the uninhabited-ness is visible from `id`.\n+    pub fn is_uninhabited(&self, block: Option<NodeId>, cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n+        let mut visited = FxHashSet::default();\n+        self.is_uninhabited_recurse(&mut visited, block, cx)\n+    }\n+\n+    pub fn is_uninhabited_recurse(&self,\n+                                  visited: &mut FxHashSet<(DefId, &'tcx Substs<'tcx>)>,\n+                                  block: Option<NodeId>,\n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         match self.sty {\n-            TyAdt(def, _) => def.is_empty(),\n+            TyAdt(def, substs) => {\n+                def.is_uninhabited_recurse(visited, block, cx, substs)\n+            },\n \n-            // FIXME(canndrew): There's no reason why these can't be uncommented, they're tested\n-            // and they don't break anything. But I'm keeping my changes small for now.\n-            //TyNever => true,\n-            //TyTuple(ref tys) => tys.iter().any(|ty| ty.is_uninhabited(cx)),\n+            TyNever => true,\n+            TyTuple(ref tys) => tys.iter().any(|ty| ty.is_uninhabited_recurse(visited, block, cx)),\n+            TyArray(ty, len) => len > 0 && ty.is_uninhabited_recurse(visited, block, cx),\n+            TyRef(_, ref tm) => tm.ty.is_uninhabited_recurse(visited, block, cx),\n \n-            // FIXME(canndrew): this line breaks core::fmt\n-            //TyRef(_, ref tm) => tm.ty.is_uninhabited(cx),\n             _ => false,\n         }\n     }"}, {"sha": "3c94d7d6fd5d14919824d55b931de929616ce987", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d515586465522c615f8ae6c5d61deedea61126e1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d515586465522c615f8ae6c5d61deedea61126e1", "patch": "@@ -204,7 +204,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Check for empty enum, because is_useful only works on inhabited types.\n             let pat_ty = self.tcx.tables().node_id_to_type(scrut.id);\n             if inlined_arms.is_empty() {\n-                if !pat_ty.is_uninhabited(self.tcx) {\n+                if !pat_ty.is_uninhabited(Some(scrut.id), self.tcx) {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(self.tcx.sess, span,\n                                                format!(\"non-exhaustive patterns: type {} \\"}]}