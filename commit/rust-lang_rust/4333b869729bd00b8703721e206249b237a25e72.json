{"sha": "4333b869729bd00b8703721e206249b237a25e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzNiODY5NzI5YmQwMGI4NzAzNzIxZTIwNjI0OWIyMzdhMjVlNzI=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-09-16T04:37:52Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-09-16T04:37:52Z"}, "message": "Improve BTreeSet::Intersection::size_hint\nThe commented invariant that an iterator is smaller than other iterator\nwas violated after next is called and two iterators are consumed at\ndifferent rates.", "tree": {"sha": "56c922c9556510ff50cff02b085f2512dde75e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c922c9556510ff50cff02b085f2512dde75e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4333b869729bd00b8703721e206249b237a25e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4333b869729bd00b8703721e206249b237a25e72", "html_url": "https://github.com/rust-lang/rust/commit/4333b869729bd00b8703721e206249b237a25e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4333b869729bd00b8703721e206249b237a25e72/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d5c70b174f06843049af2d764ff57ddc81c81c", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d5c70b174f06843049af2d764ff57ddc81c81c", "html_url": "https://github.com/rust-lang/rust/commit/74d5c70b174f06843049af2d764ff57ddc81c81c"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "0cb91ba4c81da148c9f89dde57ca042162b7e529", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4333b869729bd00b8703721e206249b237a25e72/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4333b869729bd00b8703721e206249b237a25e72/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=4333b869729bd00b8703721e206249b237a25e72", "patch": "@@ -3,7 +3,7 @@\n \n use core::borrow::Borrow;\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n-use core::cmp::max;\n+use core::cmp::{max, min};\n use core::fmt::{self, Debug};\n use core::iter::{Peekable, FromIterator, FusedIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n@@ -187,8 +187,8 @@ pub struct Intersection<'a, T: 'a> {\n }\n enum IntersectionInner<'a, T: 'a> {\n     Stitch {\n-        small_iter: Iter<'a, T>, // for size_hint, should be the smaller of the sets\n-        other_iter: Iter<'a, T>,\n+        a: Iter<'a, T>,\n+        b: Iter<'a, T>,\n     },\n     Search {\n         small_iter: Iter<'a, T>,\n@@ -201,12 +201,12 @@ impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match &self.inner {\n             IntersectionInner::Stitch {\n-                small_iter,\n-                other_iter,\n+                a,\n+                b,\n             } => f\n                 .debug_tuple(\"Intersection\")\n-                .field(&small_iter)\n-                .field(&other_iter)\n+                .field(&a)\n+                .field(&b)\n                 .finish(),\n             IntersectionInner::Search {\n                 small_iter,\n@@ -397,8 +397,8 @@ impl<T: Ord> BTreeSet<T> {\n             // Iterate both sets jointly, spotting matches along the way.\n             Intersection {\n                 inner: IntersectionInner::Stitch {\n-                    small_iter: small.iter(),\n-                    other_iter: other.iter(),\n+                    a: small.iter(),\n+                    b: other.iter(),\n                 },\n             }\n         } else {\n@@ -1221,11 +1221,11 @@ impl<T> Clone for Intersection<'_, T> {\n         Intersection {\n             inner: match &self.inner {\n                 IntersectionInner::Stitch {\n-                    small_iter,\n-                    other_iter,\n+                    a,\n+                    b,\n                 } => IntersectionInner::Stitch {\n-                    small_iter: small_iter.clone(),\n-                    other_iter: other_iter.clone(),\n+                    a: a.clone(),\n+                    b: b.clone(),\n                 },\n                 IntersectionInner::Search {\n                     small_iter,\n@@ -1245,16 +1245,16 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         match &mut self.inner {\n             IntersectionInner::Stitch {\n-                small_iter,\n-                other_iter,\n+                a,\n+                b,\n             } => {\n-                let mut small_next = small_iter.next()?;\n-                let mut other_next = other_iter.next()?;\n+                let mut a_next = a.next()?;\n+                let mut b_next = b.next()?;\n                 loop {\n-                    match Ord::cmp(small_next, other_next) {\n-                        Less => small_next = small_iter.next()?,\n-                        Greater => other_next = other_iter.next()?,\n-                        Equal => return Some(small_next),\n+                    match Ord::cmp(a_next, b_next) {\n+                        Less => a_next = a.next()?,\n+                        Greater => b_next = b.next()?,\n+                        Equal => return Some(a_next),\n                     }\n                 }\n             }\n@@ -1272,7 +1272,7 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let min_len = match &self.inner {\n-            IntersectionInner::Stitch { small_iter, .. } => small_iter.len(),\n+            IntersectionInner::Stitch { a, b } => min(a.len(), b.len()),\n             IntersectionInner::Search { small_iter, .. } => small_iter.len(),\n         };\n         (0, Some(min_len))"}, {"sha": "35db18c39c83a705be03ec3b6813c03db8ba06fe", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4333b869729bd00b8703721e206249b237a25e72/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4333b869729bd00b8703721e206249b237a25e72/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=4333b869729bd00b8703721e206249b237a25e72", "patch": "@@ -90,6 +90,17 @@ fn test_intersection() {\n                        &[1, 3, 11, 77, 103]);\n }\n \n+#[test]\n+fn test_intersection_size_hint() {\n+    let x: BTreeSet<i32> = [3, 4].iter().copied().collect();\n+    let y: BTreeSet<i32> = [1, 2, 3].iter().copied().collect();\n+    let mut iter = x.intersection(&y);\n+    assert_eq!(iter.size_hint(), (0, Some(2)));\n+    assert_eq!(iter.next(), Some(&3));\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+    assert_eq!(iter.next(), None);\n+}\n+\n #[test]\n fn test_difference() {\n     fn check_difference(a: &[i32], b: &[i32], expected: &[i32]) {"}]}