{"sha": "90656f86745afe073a5b590d51b22ec5f6b60e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNjU2Zjg2NzQ1YWZlMDczYTViNTkwZDUxYjIyZWM1ZjZiNjBlMWI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T16:45:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T20:48:47Z"}, "message": "Intern consts & lifetimes\n\nSlight memory usage reduction.", "tree": {"sha": "9255a2e5e39c0daab36f03d3102c33e9ebec7f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9255a2e5e39c0daab36f03d3102c33e9ebec7f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90656f86745afe073a5b590d51b22ec5f6b60e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90656f86745afe073a5b590d51b22ec5f6b60e1b", "html_url": "https://github.com/rust-lang/rust/commit/90656f86745afe073a5b590d51b22ec5f6b60e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90656f86745afe073a5b590d51b22ec5f6b60e1b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37cb6805afc397adf769391cec99b2e11d0d52e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37cb6805afc397adf769391cec99b2e11d0d52e0", "html_url": "https://github.com/rust-lang/rust/commit/37cb6805afc397adf769391cec99b2e11d0d52e0"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "8c4542956284fd44363976235a13ac1df615157b", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90656f86745afe073a5b590d51b22ec5f6b60e1b/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90656f86745afe073a5b590d51b22ec5f6b60e1b/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=90656f86745afe073a5b590d51b22ec5f6b60e1b", "patch": "@@ -75,7 +75,7 @@ impl TyExt for Ty {\n     }\n     fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, lifetime, ty) => Some((ty, *lifetime, *mutability)),\n+            TyKind::Ref(mutability, lifetime, ty) => Some((ty, lifetime.clone(), *mutability)),\n             _ => None,\n         }\n     }"}, {"sha": "3a6ceef05bf26547ae0b26357610ffde14f4a105", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90656f86745afe073a5b590d51b22ec5f6b60e1b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90656f86745afe073a5b590d51b22ec5f6b60e1b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=90656f86745afe073a5b590d51b22ec5f6b60e1b", "patch": "@@ -39,16 +39,29 @@ pub struct InternedSubstitutionInner(SmallVec<[GenericArg; 2]>);\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct InternedTypeInner(chalk_ir::TyData<Interner>);\n \n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub struct InternedWrapper<T>(T);\n+\n+impl<T> std::ops::Deref for InternedWrapper<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n impl_internable!(\n     InternedVariableKindsInner,\n     InternedSubstitutionInner,\n     InternedTypeInner,\n+    InternedWrapper<chalk_ir::LifetimeData<Interner>>,\n+    InternedWrapper<chalk_ir::ConstData<Interner>>,\n );\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Interned<InternedTypeInner>;\n-    type InternedLifetime = chalk_ir::LifetimeData<Self>;\n-    type InternedConst = Arc<chalk_ir::ConstData<Self>>;\n+    type InternedLifetime = Interned<InternedWrapper<chalk_ir::LifetimeData<Self>>>;\n+    type InternedConst = Interned<InternedWrapper<chalk_ir::ConstData<Self>>>;\n     type InternedConcreteConst = ();\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n@@ -221,22 +234,22 @@ impl chalk_ir::interner::Interner for Interner {\n     }\n \n     fn intern_lifetime(&self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n-        lifetime\n+        Interned::new(InternedWrapper(lifetime))\n     }\n \n     fn lifetime_data<'a>(\n         &self,\n         lifetime: &'a Self::InternedLifetime,\n     ) -> &'a chalk_ir::LifetimeData<Self> {\n-        lifetime\n+        &lifetime.0\n     }\n \n     fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n-        Arc::new(constant)\n+        Interned::new(InternedWrapper(constant))\n     }\n \n     fn const_data<'a>(&self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n-        constant\n+        &constant.0\n     }\n \n     fn const_eq("}]}