{"sha": "a4a8c241c7bcce3604a0ce130a65084101d0ab47", "node_id": "C_kwDOAAsO6NoAKGE0YThjMjQxYzdiY2NlMzYwNGEwY2UxMzBhNjUwODQxMDFkMGFiNDc", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-12-07T17:03:53Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-12-22T16:50:57Z"}, "message": "Require Ord for rustc_index::SparseBitSet::last_set_in", "tree": {"sha": "34c3affd87378aa46e9200afbb4e1c48d89a2585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c3affd87378aa46e9200afbb4e1c48d89a2585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4a8c241c7bcce3604a0ce130a65084101d0ab47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a8c241c7bcce3604a0ce130a65084101d0ab47", "html_url": "https://github.com/rust-lang/rust/commit/a4a8c241c7bcce3604a0ce130a65084101d0ab47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4a8c241c7bcce3604a0ce130a65084101d0ab47/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df92485919ac660273ec8dfef61d7ebb0b67a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df92485919ac660273ec8dfef61d7ebb0b67a86", "html_url": "https://github.com/rust-lang/rust/commit/8df92485919ac660273ec8dfef61d7ebb0b67a86"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "5aa213cb70134bef0404ac7388cf1ff225b7a757", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4a8c241c7bcce3604a0ce130a65084101d0ab47/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a8c241c7bcce3604a0ce130a65084101d0ab47/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=a4a8c241c7bcce3604a0ce130a65084101d0ab47", "patch": "@@ -715,6 +715,10 @@ impl<T: Idx> SparseBitSet<T> {\n         self.elems.iter()\n     }\n \n+    bit_relations_inherent_impls! {}\n+}\n+\n+impl<T: Idx + Ord> SparseBitSet<T> {\n     fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {\n         let mut last_leq = None;\n         for e in self.iter() {\n@@ -724,8 +728,6 @@ impl<T: Idx> SparseBitSet<T> {\n         }\n         last_leq\n     }\n-\n-    bit_relations_inherent_impls! {}\n }\n \n /// A fixed-size bitset type with a hybrid representation: sparse when there\n@@ -802,7 +804,10 @@ impl<T: Idx> HybridBitSet<T> {\n     /// Returns the previous element present in the bitset from `elem`,\n     /// inclusively of elem. That is, will return `Some(elem)` if elem is in the\n     /// bitset.\n-    pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {\n+    pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>\n+    where\n+        T: Ord,\n+    {\n         match self {\n             HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),\n             HybridBitSet::Dense(dense) => dense.last_set_in(range),"}]}