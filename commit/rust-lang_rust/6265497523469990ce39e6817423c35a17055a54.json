{"sha": "6265497523469990ce39e6817423c35a17055a54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNjU0OTc1MjM0Njk5OTBjZTM5ZTY4MTc0MjNjMzVhMTcwNTVhNTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-07T20:06:09Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-12T19:43:00Z"}, "message": "Normalize associated types during inference", "tree": {"sha": "e50d81f36127412fa4238d2a71637358bc2d1b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e50d81f36127412fa4238d2a71637358bc2d1b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6265497523469990ce39e6817423c35a17055a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6265497523469990ce39e6817423c35a17055a54", "html_url": "https://github.com/rust-lang/rust/commit/6265497523469990ce39e6817423c35a17055a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6265497523469990ce39e6817423c35a17055a54/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22724f37f3ae73983bf700d10d80a8dbd4fa4073", "url": "https://api.github.com/repos/rust-lang/rust/commits/22724f37f3ae73983bf700d10d80a8dbd4fa4073", "html_url": "https://github.com/rust-lang/rust/commit/22724f37f3ae73983bf700d10d80a8dbd4fa4073"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "74fc77cfbc90f25dcf9af79c06460c0fc9998022", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6265497523469990ce39e6817423c35a17055a54", "patch": "@@ -245,7 +245,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             &self.resolver,\n             type_ref,\n         );\n-        self.insert_type_vars(ty)\n+        let ty = self.insert_type_vars(ty);\n+        self.normalize_associated_types_in(ty)\n     }\n \n     fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs, depth: usize) -> bool {\n@@ -411,6 +412,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n+    fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n+        ty.fold(&mut |ty| match ty {\n+            Ty::Projection(proj_ty) => self.normalize_projection_ty(proj_ty),\n+            Ty::UnselectedProjection(proj_ty) => {\n+                // FIXME\n+                Ty::UnselectedProjection(proj_ty)\n+            }\n+            _ => ty,\n+        })\n+    }\n+\n+    fn normalize_projection_ty(&mut self, proj_ty: ProjectionTy) -> Ty {\n+        let var = self.new_type_var();\n+        let predicate = ProjectionPredicate { projection_ty: proj_ty.clone(), ty: var.clone() };\n+        let obligation = Obligation::Projection(predicate);\n+        self.obligations.push(obligation);\n+        var\n+    }\n+\n     /// Resolves the type completely; type variables without known type are\n     /// replaced by Ty::Unknown.\n     fn resolve_ty_completely(&mut self, tv_stack: &mut Vec<TypeVarId>, ty: Ty) -> Ty {"}, {"sha": "debedcbb8b194bae283c5cc45296284447fc4feb", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6265497523469990ce39e6817423c35a17055a54", "patch": "@@ -117,11 +117,6 @@ impl Ty {\n                                 return Ty::Unknown;\n                             }\n                         };\n-                    eprintln!(\n-                        \"assoc ty: {:?}, parameters: {:?}\",\n-                        associated_ty.name(db),\n-                        trait_ref.substs\n-                    );\n                     // FIXME handle type parameters on the segment\n                     Ty::Projection(ProjectionTy { associated_ty, parameters: trait_ref.substs })\n                 } else {"}, {"sha": "e669f835b38eee664bfc8fa8386006d5df65c18e", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6265497523469990ce39e6817423c35a17055a54/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=6265497523469990ce39e6817423c35a17055a54", "patch": "@@ -402,11 +402,12 @@ where\n         &self,\n         projection: &'p chalk_ir::ProjectionTy,\n     ) -> (Arc<AssociatedTyDatum>, &'p [Parameter], &'p [Parameter]) {\n-        debug!(\"split_projection {:?}\", projection);\n-        unimplemented!()\n+        let proj_ty: ProjectionTy = from_chalk(self.db, projection.clone());\n+        debug!(\"split_projection {:?} = {}\", projection, proj_ty.display(self.db));\n+        // we don't support GATs, so I think this should always be correct currently\n+        (self.db.associated_ty_data(projection.associated_ty_id), &projection.parameters, &[])\n     }\n     fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause> {\n-        debug!(\"custom_clauses\");\n         vec![]\n     }\n     fn all_structs(&self) -> Vec<chalk_ir::StructId> {"}]}