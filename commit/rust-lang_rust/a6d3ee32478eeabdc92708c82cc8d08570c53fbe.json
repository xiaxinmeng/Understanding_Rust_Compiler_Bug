{"sha": "a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "node_id": "C_kwDOAAsO6NoAKGE2ZDNlZTMyNDc4ZWVhYmRjOTI3MDhjODJjYzhkMDg1NzBjNTNmYmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-15T10:23:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-15T10:23:36Z"}, "message": "Rollup merge of #88991 - libstd-switch:aarch64-nintendo-switch, r=wesleywiser\n\nAdd Nintendo Switch as tier 3 target\n\n[Relevant Zulip Discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Upstreaming.20Nintendo.20Switch.20Support/near/253445503)\n\nThis is the first step towards working on incrementally adding support for the Nintendo Switch. After this lands `@leo60228` and I will work on ensuring further work is cleared from a legal perspective before continuing on to work on an allocator and porting libstd.\n\nThe plan is to keep these changes small and incremental enough so as to not cause unneeded burden on reviewers by submitting a single large patch, as was felt to be the case last attempt at upstreaming (#74567).\n\nAll this specific patch does is add the target itself without and std support, which has been tested on-device and is working as expected.\n\nDesignated Target Maintainers:\n* `@leo60228`\n* `@jam1garner`", "tree": {"sha": "e0c1369ae911af3ddf2121d2fb999543205c3c07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c1369ae911af3ddf2121d2fb999543205c3c07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0UAoCRBK7hj4Ov3rIwAAOBYIAKHZtC5wmp4qQBOPC8V1jKd/\nwDY4kY6uvrnVHSTtf/nLy/LqRHXR4EkMmtPtNEc2DBKD0iimyC3GgeE2c2EBDHAB\nxjS/eCwpOqln5iAgZNXFdfDmcfN2KbnkQ3o27kdEr20TgsIGMc2jIpBanGBjN/lC\nAFzI8DvVzudzLpBmrTg+4UO1MCxSun4pAs9keNshLFlCzdC6KY8rtV2rD/VFY3Wk\n/Cz+sAs8OoNHIgDCwXBPcyBY04sOXyOi6aDYy7RI+j0X7TFsDVYz7HUMs+s/2QZS\nl5TwpDNtvem2EkfFEhBWiayRC1K6dwnq+hOMOyvrAsX7mf7T0ISrjBzvUyXgPVs=\n=NnGU\n-----END PGP SIGNATURE-----\n", "payload": "tree e0c1369ae911af3ddf2121d2fb999543205c3c07\nparent 522abf6d88a45f9f49a1b2217426eef1c3a09b52\nparent 62aafb01b11db42e358d81c53719727c1daca33c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657880616 +0530\ncommitter GitHub <noreply@github.com> 1657880616 +0530\n\nRollup merge of #88991 - libstd-switch:aarch64-nintendo-switch, r=wesleywiser\n\nAdd Nintendo Switch as tier 3 target\n\n[Relevant Zulip Discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Upstreaming.20Nintendo.20Switch.20Support/near/253445503)\n\nThis is the first step towards working on incrementally adding support for the Nintendo Switch. After this lands `@leo60228` and I will work on ensuring further work is cleared from a legal perspective before continuing on to work on an allocator and porting libstd.\n\nThe plan is to keep these changes small and incremental enough so as to not cause unneeded burden on reviewers by submitting a single large patch, as was felt to be the case last attempt at upstreaming (#74567).\n\nAll this specific patch does is add the target itself without and std support, which has been tested on-device and is working as expected.\n\nDesignated Target Maintainers:\n* `@leo60228`\n* `@jam1garner`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "html_url": "https://github.com/rust-lang/rust/commit/a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522abf6d88a45f9f49a1b2217426eef1c3a09b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/522abf6d88a45f9f49a1b2217426eef1c3a09b52", "html_url": "https://github.com/rust-lang/rust/commit/522abf6d88a45f9f49a1b2217426eef1c3a09b52"}, {"sha": "62aafb01b11db42e358d81c53719727c1daca33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62aafb01b11db42e358d81c53719727c1daca33c", "html_url": "https://github.com/rust-lang/rust/commit/62aafb01b11db42e358d81c53719727c1daca33c"}], "stats": {"total": 162, "additions": 160, "deletions": 2}, "files": [{"sha": "1b7161fbb85c5365aa42aae59836b80b2edba6b7", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -0,0 +1,26 @@\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel, Target, TargetOptions};\n+\n+const LINKER_SCRIPT: &str = include_str!(\"./aarch64_nintendo_switch_freestanding_linker_script.ld\");\n+\n+/// A base target for Nintendo Switch devices using a pure LLVM toolchain.\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"aarch64-unknown-none\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker: Some(\"rust-lld\".into()),\n+            link_script: Some(LINKER_SCRIPT.into()),\n+            os: \"horizon\".into(),\n+            max_atomic_width: Some(128),\n+            panic_strategy: PanicStrategy::Abort,\n+            position_independent_executables: true,\n+            dynamic_linking: true,\n+            executables: true,\n+            relro_level: RelroLevel::Off,\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "f3441e65937821195840203f0e1ab5731bc9cb5f", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding_linker_script.ld", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding_linker_script.ld", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding_linker_script.ld", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding_linker_script.ld?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -0,0 +1,78 @@\n+OUTPUT_FORMAT(elf64-littleaarch64)\n+OUTPUT_ARCH(aarch64)\n+ENTRY(_start)\n+\n+PHDRS\n+{\n+  text PT_LOAD FLAGS(5);\n+  rodata PT_LOAD FLAGS(4);\n+  data PT_LOAD FLAGS(6);\n+  bss PT_LOAD FLAGS(6);\n+  dynamic PT_DYNAMIC;\n+}\n+\n+SECTIONS\n+{\n+  . = 0;\n+\n+  .text : ALIGN(0x1000) {\n+    HIDDEN(__text_start = .);\n+    KEEP(*(.text.jmp))\n+\n+    . = 0x80;\n+\n+    *(.text .text.*)\n+    *(.plt .plt.*)\n+  }\n+\n+  /* Read-only sections */\n+\n+  . = ALIGN(0x1000);\n+\n+  .module_name : { *(.module_name) } :rodata\n+\n+  .rodata : { *(.rodata .rodata.*) } :rodata\n+  .hash : { *(.hash) }\n+  .dynsym : { *(.dynsym .dynsym.*) }\n+  .dynstr : { *(.dynstr .dynstr.*) }\n+  .rela.dyn : { *(.rela.dyn) }\n+\n+  .eh_frame : {\n+    HIDDEN(__eh_frame_start = .);\n+    *(.eh_frame .eh_frame.*)\n+    HIDDEN(__eh_frame_end = .);\n+  }\n+\n+  .eh_frame_hdr : {\n+    HIDDEN(__eh_frame_hdr_start = .);\n+    *(.eh_frame_hdr .eh_frame_hdr.*)\n+    HIDDEN(__eh_frame_hdr_end = .);\n+  }\n+\n+  /* Read-write sections */\n+\n+   . = ALIGN(0x1000);\n+\n+  .data : {\n+    *(.data .data.*)\n+    *(.got .got.*)\n+    *(.got.plt .got.plt.*)\n+  } :data\n+\n+  .dynamic : {\n+    HIDDEN(__dynamic_start = .);\n+    *(.dynamic)\n+  }\n+\n+  /* BSS section */\n+\n+  . = ALIGN(0x1000);\n+\n+  .bss : {\n+    HIDDEN(__bss_start = .);\n+    *(.bss .bss.*)\n+    *(COMMON)\n+    . = ALIGN(8);\n+    HIDDEN(__bss_end = .);\n+  } :bss\n+}"}, {"sha": "1a6bb4a2eaf3432c1d6cc88676aa93dfd6646504", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -1035,6 +1035,8 @@ supported_targets! {\n \n     (\"armv6k-nintendo-3ds\", armv6k_nintendo_3ds),\n \n+    (\"aarch64-nintendo-switch-freestanding\", aarch64_nintendo_switch_freestanding),\n+\n     (\"armv7-unknown-linux-uclibceabi\", armv7_unknown_linux_uclibceabi),\n     (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n "}, {"sha": "ea0f78e2a6be9da2c9461497e2bafb53ca18b6ec", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -411,7 +411,7 @@ pub struct Target {\n impl Target {\n     pub fn from_triple(triple: &str) -> Self {\n         let mut target: Self = Default::default();\n-        if triple.contains(\"-none\") || triple.contains(\"nvptx\") {\n+        if triple.contains(\"-none\") || triple.contains(\"nvptx\") || triple.contains(\"switch\") {\n             target.no_std = true;\n         }\n         target"}, {"sha": "1895e2901489e187aa39fa6cf8ddae5711afd78b", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -298,7 +298,8 @@ pub fn use_host_linker(target: TargetSelection) -> bool {\n         || target.contains(\"nvptx\")\n         || target.contains(\"fortanix\")\n         || target.contains(\"fuchsia\")\n-        || target.contains(\"bpf\"))\n+        || target.contains(\"bpf\")\n+        || target.contains(\"switch\"))\n }\n \n pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>("}, {"sha": "f6348b2bddc88c7c0af94625f44fa569feec8e1f", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -17,6 +17,7 @@\n     - [Template for Target-specific Documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n+    - [aarch64-nintendo-switch-freestanding](platform-support/aarch64-nintendo-switch-freestanding.md)\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)"}, {"sha": "7a03238f13dff013976fb87b8477f4ff17943a21", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -209,6 +209,7 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n [`aarch64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 |  | ARM64 Apple WatchOS Simulator\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n+[`aarch64-nintendo-switch-freestanding`](platform-support/aarch64-nintendo-switch-freestanding.md) | * |  | ARM64 Nintendo Switch, Horizon\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore"}, {"sha": "308e1fe2f92a04e3ed1cb1b1a259056a8702485c", "filename": "src/doc/rustc/src/platform-support/aarch64-nintendo-switch-freestanding.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-nintendo-switch-freestanding.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6d3ee32478eeabdc92708c82cc8d08570c53fbe/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-nintendo-switch-freestanding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-nintendo-switch-freestanding.md?ref=a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "patch": "@@ -0,0 +1,49 @@\n+# aarch64-nintendo-switch-freestanding\n+\n+**Tier: 3**\n+\n+Nintendo Switch with pure-Rust toolchain.\n+\n+## Designated Developers\n+\n+* [@leo60228](https://github.com/leo60228)\n+* [@jam1garner](https://github.com/jam1garner)\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+It has no special requirements for the host.\n+\n+## Building\n+\n+The target can be built by enabling it for a `rustc` build:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"aarch64-nintendo-switch-freestanding\"]\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from any host.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+## Building Rust programs\n+\n+If `rustc` has support for that target and the library artifacts are available,\n+then Rust programs can be built for that target:\n+\n+```text\n+rustc --target aarch64-nintendo-switch-freestanding your-code.rs\n+```\n+\n+To generate binaries in the NRO format that can be easily run on-device, you\n+can use [cargo-nx](https://github.com/aarch64-switch-rs/cargo-nx):\n+\n+```text\n+cargo nx --triple=aarch64-nintendo-switch-freestanding\n+```"}]}