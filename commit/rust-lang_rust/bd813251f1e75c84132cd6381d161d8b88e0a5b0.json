{"sha": "bd813251f1e75c84132cd6381d161d8b88e0a5b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODEzMjUxZjFlNzVjODQxMzJjZDYzODFkMTYxZDhiODhlMGE1YjA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-18T09:22:06Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:52:40Z"}, "message": "Avoid allocating small strings in combine_strs_with_missing_comments", "tree": {"sha": "cd881be0b1e3589b3a576694a9d351b0e96e5d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd881be0b1e3589b3a576694a9d351b0e96e5d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd813251f1e75c84132cd6381d161d8b88e0a5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd813251f1e75c84132cd6381d161d8b88e0a5b0", "html_url": "https://github.com/rust-lang/rust/commit/bd813251f1e75c84132cd6381d161d8b88e0a5b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd813251f1e75c84132cd6381d161d8b88e0a5b0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c6c591e4fdf1eec729469689c1ca27905b0f4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c6c591e4fdf1eec729469689c1ca27905b0f4c", "html_url": "https://github.com/rust-lang/rust/commit/61c6c591e4fdf1eec729469689c1ca27905b0f4c"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "14749d4db12d836ad8d562dafc844915eec6a785", "filename": "rustfmt-core/src/comment.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bd813251f1e75c84132cd6381d161d8b88e0a5b0/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd813251f1e75c84132cd6381d161d8b88e0a5b0/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=bd813251f1e75c84132cd6381d161d8b88e0a5b0", "patch": "@@ -10,7 +10,7 @@\n \n // Formatting and tools for comments.\n \n-use std::{self, iter};\n+use std::{self, iter, borrow::Cow};\n \n use syntax::codemap::Span;\n \n@@ -154,6 +154,9 @@ pub fn combine_strs_with_missing_comments(\n     shape: Shape,\n     allow_extend: bool,\n ) -> Option<String> {\n+    let mut result =\n+        String::with_capacity(prev_str.len() + next_str.len() + shape.indent.width() + 128);\n+    result.push_str(prev_str);\n     let mut allow_one_line = !prev_str.contains('\\n') && !next_str.contains('\\n');\n     let first_sep = if prev_str.is_empty() || next_str.is_empty() {\n         \"\"\n@@ -163,20 +166,18 @@ pub fn combine_strs_with_missing_comments(\n     let mut one_line_width =\n         last_line_width(prev_str) + first_line_width(next_str) + first_sep.len();\n \n-    let indent_str = shape.indent.to_string(context.config);\n+    let config = context.config;\n+    let indent = shape.indent;\n     let missing_comment = rewrite_missing_comment(span, shape, context)?;\n \n     if missing_comment.is_empty() {\n         if allow_extend && prev_str.len() + first_sep.len() + next_str.len() <= shape.width {\n-            return Some(format!(\"{}{}{}\", prev_str, first_sep, next_str));\n-        } else {\n-            let sep = if prev_str.is_empty() {\n-                String::new()\n-            } else {\n-                String::from(\"\\n\") + &indent_str\n-            };\n-            return Some(format!(\"{}{}{}\", prev_str, sep, next_str));\n+            result.push_str(first_sep);\n+        } else if !prev_str.is_empty() {\n+            result.push_str(&indent.to_string_with_newline(config))\n         }\n+        result.push_str(next_str);\n+        return Some(result);\n     }\n \n     // We have a missing comment between the first expression and the second expression.\n@@ -193,32 +194,35 @@ pub fn combine_strs_with_missing_comments(\n \n     one_line_width -= first_sep.len();\n     let first_sep = if prev_str.is_empty() || missing_comment.is_empty() {\n-        String::new()\n+        Cow::from(\"\")\n     } else {\n         let one_line_width = last_line_width(prev_str) + first_line_width(&missing_comment) + 1;\n         if prefer_same_line && one_line_width <= shape.width {\n-            String::from(\" \")\n+            Cow::from(\" \")\n         } else {\n-            format!(\"\\n{}\", indent_str)\n+            indent.to_string_with_newline(config)\n         }\n     };\n+    result.push_str(&first_sep);\n+    result.push_str(&missing_comment);\n+\n     let second_sep = if missing_comment.is_empty() || next_str.is_empty() {\n-        String::new()\n+        Cow::from(\"\")\n     } else if missing_comment.starts_with(\"//\") {\n-        format!(\"\\n{}\", indent_str)\n+        indent.to_string_with_newline(config)\n     } else {\n         one_line_width += missing_comment.len() + first_sep.len() + 1;\n         allow_one_line &= !missing_comment.starts_with(\"//\") && !missing_comment.contains('\\n');\n         if prefer_same_line && allow_one_line && one_line_width <= shape.width {\n-            String::from(\" \")\n+            Cow::from(\" \")\n         } else {\n-            format!(\"\\n{}\", indent_str)\n+            indent.to_string_with_newline(config)\n         }\n     };\n-    Some(format!(\n-        \"{}{}{}{}{}\",\n-        prev_str, first_sep, missing_comment, second_sep, next_str,\n-    ))\n+    result.push_str(&second_sep);\n+    result.push_str(next_str);\n+\n+    Some(result)\n }\n \n pub fn rewrite_doc_comment(orig: &str, shape: Shape, config: &Config) -> Option<String> {"}, {"sha": "1c98052c493c6b2d171fa6f11d1e0a3e5e0f8fac", "filename": "rustfmt-core/src/shape.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd813251f1e75c84132cd6381d161d8b88e0a5b0/rustfmt-core%2Fsrc%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd813251f1e75c84132cd6381d161d8b88e0a5b0/rustfmt-core%2Fsrc%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fshape.rs?ref=bd813251f1e75c84132cd6381d161d8b88e0a5b0", "patch": "@@ -25,7 +25,7 @@ pub struct Indent {\n // INDENT_BUFFER.len() = 80\n const INDENT_BUFFER_LEN: usize = 80;\n const INDENT_BUFFER: &str =\n-    \"                                                                                \";\n+    \"\\n                                                                               \";\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n@@ -74,16 +74,27 @@ impl Indent {\n     }\n \n     pub fn to_string(&self, config: &Config) -> Cow<'static, str> {\n+        self.to_string_inner(config, 1)\n+    }\n+\n+    pub fn to_string_with_newline(&self, config: &Config) -> Cow<'static, str> {\n+        self.to_string_inner(config, 0)\n+    }\n+\n+    pub fn to_string_inner(&self, config: &Config, offset: usize) -> Cow<'static, str> {\n         let (num_tabs, num_spaces) = if config.hard_tabs() {\n             (self.block_indent / config.tab_spaces(), self.alignment)\n         } else {\n             (0, self.width())\n         };\n         let num_chars = num_tabs + num_spaces;\n-        if num_tabs == 0 && num_chars <= INDENT_BUFFER_LEN {\n-            Cow::from(&INDENT_BUFFER[0..num_chars])\n+        if num_tabs == 0 && num_chars + offset <= INDENT_BUFFER_LEN {\n+            Cow::from(&INDENT_BUFFER[offset..num_chars + 1])\n         } else {\n-            let mut indent = String::with_capacity(num_chars);\n+            let mut indent = String::with_capacity(num_chars + if offset == 0 { 1 } else { 0 });\n+            if offset == 0 {\n+                indent.push('\\n');\n+            }\n             for _ in 0..num_tabs {\n                 indent.push('\\t')\n             }"}]}