{"sha": "3fd89a662a8360bbcd64da1353be8bf3b8833af5", "node_id": "C_kwDOAAsO6NoAKDNmZDg5YTY2MmE4MzYwYmJjZDY0ZGExMzUzYmU4YmYzYjg4MzNhZjU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-02T17:36:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-14T15:56:28Z"}, "message": "Properly check regions on negative overlap check", "tree": {"sha": "722f54f813941e78cc842c9fa60e3bff79c2db97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722f54f813941e78cc842c9fa60e3bff79c2db97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd89a662a8360bbcd64da1353be8bf3b8833af5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIKe6wACgkQgTGiTgx5\n76/jTQ//RCRh34eQnAB0ZnVKsj8lL8ogIESkexdKkg+znPJNbTAgfyVzul6QW93y\nNIkv8c6gma8M0s56HbN/2Y78kh3va/5zHW+mvwsbhZmQtQ7Xl/K5vn5StbVNOx/l\nPO69oMgL0kfvFn+SbrzFPr6JCgNMvTVB5MvZiyp9e5+8ClhSRewKMjteqHsxVkM/\nybWLkDNt/qAKfs87FnGbdi9wUQk0IDFffhcKXO3c6IN710Kealx9oEHGBV1pbY+u\nQ02vH8rTYhkyl4ZMUbk3y/zVidq55b8RY4mytgeA4a+EPqQ74hZSvTtnuslTb/BI\nLUXmuwkeeOI9eJQApJNzi+lkwLoKo3R439KwtTLDhQt7NDlyfSU99D8uYbkPrc3W\nk7E+1dS9MChGtJcBpxcWj6cvfUi8fVtZF3fWa4cPoRvF8IXQ2I6de1VAoxLwPZTt\naAtp4ZrRy4UZf86BSHLu5LY7CF3anqJa1rgLFKlTPDHFma+L5+PZIadoaRRz1xu7\nmVo/eNUcYVbXTNh8geEZVBRgSeKj9O4l2AP8nNIz4QGKUbfKiaAnv60MAmXOvBMj\nbkaijKAIGJsBEqvnH3B9TSpOyn7xzko/D5UGiispe3VkK+ybzLJrUC3/OurHF3Pl\nDdJwq03pCeV0DEnV7RPYq3De5nySoNGK2gHJxlX8Rb7zwri8Wy8=\n=IOs1\n-----END PGP SIGNATURE-----", "payload": "tree 722f54f813941e78cc842c9fa60e3bff79c2db97\nparent b61e1bbf06334e235e475652bb41a603584e7150\nauthor Santiago Pastorino <spastorino@gmail.com> 1643823405 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1644854188 -0300\n\nProperly check regions on negative overlap check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd89a662a8360bbcd64da1353be8bf3b8833af5", "html_url": "https://github.com/rust-lang/rust/commit/3fd89a662a8360bbcd64da1353be8bf3b8833af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd89a662a8360bbcd64da1353be8bf3b8833af5/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b61e1bbf06334e235e475652bb41a603584e7150", "url": "https://api.github.com/repos/rust-lang/rust/commits/b61e1bbf06334e235e475652bb41a603584e7150", "html_url": "https://github.com/rust-lang/rust/commit/b61e1bbf06334e235e475652bb41a603584e7150"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "8ee578b77dcc4b643349fc35f5a17d13d9ea988a", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -4,16 +4,20 @@\n //! [trait-resolution]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n //! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n-use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n-use crate::traits::query::evaluate_obligation::InferCtxtExt;\n+use crate::infer::outlives::env::OutlivesEnvironment;\n+use crate::infer::{CombinedSnapshot, InferOk, RegionckMode};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_trait_ref_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n     PredicateObligations, SelectionContext,\n };\n+//use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::CRATE_HIR_ID;\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -270,7 +274,6 @@ fn implicit_negative<'cx, 'tcx>(\n         impl1_header, impl2_header, obligations\n     );\n     let infcx = selcx.infcx();\n-    let tcx = infcx.tcx;\n     let opt_failing_obligation = impl1_header\n         .predicates\n         .iter()\n@@ -349,7 +352,7 @@ fn negative_impl<'cx, 'tcx>(\n         let opt_failing_obligation = obligations\n             .into_iter()\n             .chain(more_obligations)\n-            .find(|o| negative_impl_exists(selcx, o));\n+            .find(|o| negative_impl_exists(selcx, impl1_env, impl1_def_id, o));\n \n         if let Some(failing_obligation) = opt_failing_obligation {\n             debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -372,15 +375,38 @@ fn loose_check<'cx, 'tcx>(\n \n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n-    let infcx = selcx.infcx();\n+    let infcx = selcx.infcx().clone();\n     let tcx = infcx.tcx;\n     o.flip_polarity(tcx)\n-        .as_ref()\n         .map(|o| {\n-            // FIXME This isn't quite correct, regions should be included\n-            selcx.infcx().predicate_must_hold_modulo_regions(o)\n+            let mut fulfillment_cx = FulfillmentContext::new();\n+            fulfillment_cx.register_predicate_obligation(infcx, o);\n+\n+            let errors = fulfillment_cx.select_all_or_error(infcx);\n+            if !errors.is_empty() {\n+                return false;\n+            }\n+\n+            let mut outlives_env = OutlivesEnvironment::new(param_env);\n+            outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+\n+            infcx.process_registered_region_obligations(\n+                outlives_env.region_bound_pairs_map(),\n+                Some(tcx.lifetimes.re_root_empty),\n+                param_env,\n+            );\n+\n+            let errors =\n+                infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+            if !errors.is_empty() {\n+                return false;\n+            }\n+\n+            true\n         })\n         .unwrap_or(false)\n }"}, {"sha": "19ff9ae62fdc644002133c17e90d1d146572765e", "filename": "src/test/ui/coherence/auxiliary/error_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -1,5 +1,6 @@\n #![crate_type = \"lib\"]\n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n pub trait Error {}\n impl !Error for &str {}"}, {"sha": "a0dd881d1aaad7455fa266dd44f0a47149949c66", "filename": "src/test/ui/coherence/coherence-overlap-negate-use-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n use std::ops::DerefMut;\n "}, {"sha": "8059d23ffd215f9b4df5a09900fb003ed893bf40", "filename": "src/test/ui/coherence/coherence-overlap-negative-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -3,7 +3,7 @@\n //\n // Check that if we promise to not impl what would overlap it doesn't actually overlap\n \n-#![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n extern crate error_lib as lib;\n use lib::Error;"}, {"sha": "32f01f41801030c0197fca80cabec140488c246f", "filename": "src/test/ui/coherence/coherence-overlap-with-regions.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(with_negative_coherence)]\n+\n+#[rustc_strict_coherence]\n+trait Foo {}\n+impl<T> !Foo for &T where T: 'static {}\n+\n+#[rustc_strict_coherence]\n+trait Bar {}\n+impl<T: Foo> Bar for T {}\n+impl<T> Bar for &T where T: 'static {}\n+\n+fn main() {}"}, {"sha": "0e17f089048f72b23cd4c75e2c24fe6b1426f5a9", "filename": "src/test/ui/traits/negative-impls/auxiliary/foreign_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -1,4 +1,5 @@\n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n pub trait ForeignTrait {}\n "}, {"sha": "c1f96ab8c149e37b0072d58504014761a5f4be24", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd89a662a8360bbcd64da1353be8bf3b8833af5/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs?ref=3fd89a662a8360bbcd64da1353be8bf3b8833af5", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n // aux-build: foreign_trait.rs\n \n@@ -16,8 +17,8 @@\n extern crate foreign_trait;\n use foreign_trait::ForeignTrait;\n \n-trait LocalTrait { }\n-impl<T: ForeignTrait> LocalTrait for T { }\n-impl LocalTrait for String { }\n+trait LocalTrait {}\n+impl<T: ForeignTrait> LocalTrait for T {}\n+impl LocalTrait for String {}\n \n-fn main() { }\n+fn main() {}"}]}