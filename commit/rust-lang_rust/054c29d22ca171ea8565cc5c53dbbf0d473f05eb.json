{"sha": "054c29d22ca171ea8565cc5c53dbbf0d473f05eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGMyOWQyMmNhMTcxZWE4NTY1Y2M1YzUzZGJiZjBkNDczZjA1ZWI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:23Z"}, "message": "Rollup merge of #80279 - Yaulendil:str-as-mut, r=m-ou-se\n\nImplement missing `AsMut<str>` for `str`\n\nAllows `&mut str` to be taken by a Generic which requires `T` such that `T: AsMut<str>`. Motivating example:\n\n```rust\nimpl<'i, T> From<T> for StructImmut<'i> where\n    T: AsRef<str> + 'i,\n{\n    fn from(asref: T) -> Self {\n        let string: &str = asref.as_ref();\n        //  ...\n    }\n}\n\nimpl<'i, T> From<T> for StructMut<'i> where\n    T: AsMut<str> + 'i,\n{\n    fn from(mut asmut: T) -> Self {\n        let string: &mut str = asmut.as_mut();\n        //  ...\n    }\n}\n```\n\nThe Immutable form of this structure can be constructed by `StructImmut::from(s)` where `s` may be a `&String` or a `&str`, because `AsRef<str>` is implemented for `str`. However, the mutable form of the structure can be constructed in the same way **only** with a `&mut String`, and **not** with a `&mut str`.\n\nThis change does have some precedent, because as can be seen in [the Implementors](https://doc.rust-lang.org/std/convert/trait.AsMut.html#implementors), `AsMut<[T]>` is implemented for `[T]` as well as for `Vec<T>`, but `AsMut<str>` is implemented only for `String`. This would complete the symmetry.\n\nAs a trait implementation, this should be immediately stable.", "tree": {"sha": "89fb3259b4c4747e499b0b73176c5908dbd56f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89fb3259b4c4747e499b0b73176c5908dbd56f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054c29d22ca171ea8565cc5c53dbbf0d473f05eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4cCRBK7hj4Ov3rIwAAdHIIABQqEfbAGxSuL2uyOAbA/N6v\n5KAYyDt76+VHHfI3ou01PLe0uq3ytigvvxhRaxsZuOP7LOeOw0FQ1G4tzvs/gwgw\n28GZaSNBbZkGONzIBrjSdAvsussslSr8rbNupxleUkGUjpicQGgAxKdYv19zyzjZ\nBTP2cbXTep7YzKDgu5tHP4eL35y4A8yztc5qqh4taT8O5sBu9XMTJC4NGZglVATD\n4zpjpIurq/ewj5AFuyhjpVy7sU+eSQb/6hdYgKKW6LZLbVWsm8qrjrteBNiBsOII\nvJdMdssm89TtCBmKRwZnkPw3KvRq9Iip01JbMjCAEnFyRYr8rkiGCSujTsmlF7w=\n=Q4Bn\n-----END PGP SIGNATURE-----\n", "payload": "tree 89fb3259b4c4747e499b0b73176c5908dbd56f1d\nparent b28a1b29511ebbc13021165a96163d32a98bb7e7\nparent bef4ec2fc51aa020fe6bf81257459f096763f3b7\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054043 +0100\ncommitter GitHub <noreply@github.com> 1612054043 +0100\n\nRollup merge of #80279 - Yaulendil:str-as-mut, r=m-ou-se\n\nImplement missing `AsMut<str>` for `str`\n\nAllows `&mut str` to be taken by a Generic which requires `T` such that `T: AsMut<str>`. Motivating example:\n\n```rust\nimpl<'i, T> From<T> for StructImmut<'i> where\n    T: AsRef<str> + 'i,\n{\n    fn from(asref: T) -> Self {\n        let string: &str = asref.as_ref();\n        //  ...\n    }\n}\n\nimpl<'i, T> From<T> for StructMut<'i> where\n    T: AsMut<str> + 'i,\n{\n    fn from(mut asmut: T) -> Self {\n        let string: &mut str = asmut.as_mut();\n        //  ...\n    }\n}\n```\n\nThe Immutable form of this structure can be constructed by `StructImmut::from(s)` where `s` may be a `&String` or a `&str`, because `AsRef<str>` is implemented for `str`. However, the mutable form of the structure can be constructed in the same way **only** with a `&mut String`, and **not** with a `&mut str`.\n\nThis change does have some precedent, because as can be seen in [the Implementors](https://doc.rust-lang.org/std/convert/trait.AsMut.html#implementors), `AsMut<[T]>` is implemented for `[T]` as well as for `Vec<T>`, but `AsMut<str>` is implemented only for `String`. This would complete the symmetry.\n\nAs a trait implementation, this should be immediately stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054c29d22ca171ea8565cc5c53dbbf0d473f05eb", "html_url": "https://github.com/rust-lang/rust/commit/054c29d22ca171ea8565cc5c53dbbf0d473f05eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054c29d22ca171ea8565cc5c53dbbf0d473f05eb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28a1b29511ebbc13021165a96163d32a98bb7e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28a1b29511ebbc13021165a96163d32a98bb7e7", "html_url": "https://github.com/rust-lang/rust/commit/b28a1b29511ebbc13021165a96163d32a98bb7e7"}, {"sha": "bef4ec2fc51aa020fe6bf81257459f096763f3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef4ec2fc51aa020fe6bf81257459f096763f3b7", "html_url": "https://github.com/rust-lang/rust/commit/bef4ec2fc51aa020fe6bf81257459f096763f3b7"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "e1b19e4b73cc950bee783ccd2f163449e4e3e84b", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/054c29d22ca171ea8565cc5c53dbbf0d473f05eb/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054c29d22ca171ea8565cc5c53dbbf0d473f05eb/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=054c29d22ca171ea8565cc5c53dbbf0d473f05eb", "patch": "@@ -616,6 +616,14 @@ impl AsRef<str> for str {\n     }\n }\n \n+#[stable(feature = \"as_mut_str_for_str\", since = \"1.51.0\")]\n+impl AsMut<str> for str {\n+    #[inline]\n+    fn as_mut(&mut self) -> &mut str {\n+        self\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////"}]}