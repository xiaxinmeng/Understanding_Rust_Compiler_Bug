{"sha": "c102d7fb68b1da42af21d4546ed12de9140f87e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDJkN2ZiNjhiMWRhNDJhZjIxZDQ1NDZlZDEyZGU5MTQwZjg3ZTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-27T05:03:11Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T09:20:59Z"}, "message": "Clean up `CrateSource`.", "tree": {"sha": "42ecf47cbeb744250ec8740bfbfcd49870c2c45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ecf47cbeb744250ec8740bfbfcd49870c2c45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c102d7fb68b1da42af21d4546ed12de9140f87e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c102d7fb68b1da42af21d4546ed12de9140f87e1", "html_url": "https://github.com/rust-lang/rust/commit/c102d7fb68b1da42af21d4546ed12de9140f87e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c102d7fb68b1da42af21d4546ed12de9140f87e1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "624a9b73113bdacc6a92d2d2b0704735093fae3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/624a9b73113bdacc6a92d2d2b0704735093fae3c", "html_url": "https://github.com/rust-lang/rust/commit/624a9b73113bdacc6a92d2d2b0704735093fae3c"}], "stats": {"total": 95, "additions": 27, "deletions": 68}, "files": [{"sha": "8f6d4e9e7d7b78081a5633349ddd6e525521977c", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=c102d7fb68b1da42af21d4546ed12de9140f87e1", "patch": "@@ -61,7 +61,6 @@ pub struct LinkMeta {\n pub struct CrateSource {\n     pub dylib: Option<(PathBuf, PathKind)>,\n     pub rlib: Option<(PathBuf, PathKind)>,\n-    pub cnum: CrateNum,\n }\n \n #[derive(Copy, Debug, PartialEq, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "bc854cd4581a078b95c85370443837eade1cac9e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c102d7fb68b1da42af21d4546ed12de9140f87e1", "patch": "@@ -37,7 +37,7 @@ use syntax::parse;\n use syntax::attr;\n use syntax::ext::base::SyntaxExtension;\n use syntax::parse::token::{InternedString, intern};\n-use syntax_pos::{self, Span, mk_sp};\n+use syntax_pos::{Span, DUMMY_SP, mk_sp};\n use log;\n \n pub struct Library {\n@@ -56,16 +56,14 @@ pub struct CrateLoader<'a> {\n \n fn dump_crates(cstore: &CStore) {\n     info!(\"resolved crates:\");\n-    cstore.iter_crate_data_origins(|_, data, opt_source| {\n+    cstore.iter_crate_data(|_, data| {\n         info!(\"  name: {}\", data.name());\n         info!(\"  cnum: {}\", data.cnum);\n         info!(\"  hash: {}\", data.hash());\n         info!(\"  reqd: {}\", data.explicitly_linked.get());\n-        opt_source.map(|cs| {\n-            let CrateSource { dylib, rlib, cnum: _ } = cs;\n-            dylib.map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n-            rlib.map(|rl|  info!(\"   rlib: {}\", rl.0.display()));\n-        });\n+        let CrateSource { dylib, rlib } = data.source.clone();\n+        dylib.map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n+        rlib.map(|rl|  info!(\"   rlib: {}\", rl.0.display()));\n     })\n }\n \n@@ -261,8 +259,7 @@ impl<'a> CrateLoader<'a> {\n                       span: Span,\n                       lib: Library,\n                       explicitly_linked: bool)\n-                      -> (CrateNum, Rc<cstore::CrateMetadata>,\n-                          cstore::CrateSource) {\n+                      -> (CrateNum, Rc<cstore::CrateMetadata>) {\n         info!(\"register crate `extern crate {} as {}`\", name, ident);\n         let crate_root = lib.metadata.get_root();\n         self.verify_no_symbol_conflicts(span, &crate_root);\n@@ -303,17 +300,14 @@ impl<'a> CrateLoader<'a> {\n             cnum: cnum,\n             codemap_import_info: RefCell::new(vec![]),\n             explicitly_linked: Cell::new(explicitly_linked),\n+            source: cstore::CrateSource {\n+                dylib: dylib,\n+                rlib: rlib,\n+            },\n         });\n \n-        let source = cstore::CrateSource {\n-            dylib: dylib,\n-            rlib: rlib,\n-            cnum: cnum,\n-        };\n-\n         self.cstore.set_crate_data(cnum, cmeta.clone());\n-        self.cstore.add_used_crate_source(source.clone());\n-        (cnum, cmeta, source)\n+        (cnum, cmeta)\n     }\n \n     fn resolve_crate(&mut self,\n@@ -324,7 +318,7 @@ impl<'a> CrateLoader<'a> {\n                      span: Span,\n                      kind: PathKind,\n                      explicitly_linked: bool)\n-                     -> (CrateNum, Rc<cstore::CrateMetadata>, cstore::CrateSource) {\n+                     -> (CrateNum, Rc<cstore::CrateMetadata>) {\n         info!(\"resolving crate `extern crate {} as {}`\", name, ident);\n         let result = match self.existing_match(name, hash, kind) {\n             Some(cnum) => LoadResult::Previous(cnum),\n@@ -356,10 +350,8 @@ impl<'a> CrateLoader<'a> {\n         match result {\n             LoadResult::Previous(cnum) => {\n                 let data = self.cstore.get_crate_data(cnum);\n-                if explicitly_linked && !data.explicitly_linked.get() {\n-                    data.explicitly_linked.set(explicitly_linked);\n-                }\n-                (cnum, data, self.cstore.used_crate_source(cnum))\n+                data.explicitly_linked.set(explicitly_linked || data.explicitly_linked.get());\n+                (cnum, data)\n             }\n             LoadResult::Loaded(library) => {\n                 self.register_crate(root, ident, name, span, library,\n@@ -508,9 +500,8 @@ impl<'a> CrateLoader<'a> {\n \n         let (dylib, metadata) = match library {\n             LoadResult::Previous(cnum) => {\n-                let dylib = self.cstore.opt_used_crate_source(cnum).unwrap().dylib;\n                 let data = self.cstore.get_crate_data(cnum);\n-                (dylib, PMDSource::Registered(data))\n+                (data.source.dylib.clone(), PMDSource::Registered(data))\n             }\n             LoadResult::Loaded(library) => {\n                 let dylib = library.dylib.clone();\n@@ -754,9 +745,8 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let (cnum, data, _) = self.resolve_crate(&None, name, name, None,\n-                                                 syntax_pos::DUMMY_SP,\n-                                                 PathKind::Crate, false);\n+        let (cnum, data) =\n+            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, false);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n@@ -836,9 +826,8 @@ impl<'a> CrateLoader<'a> {\n         } else {\n             &self.sess.target.target.options.exe_allocation_crate\n         };\n-        let (cnum, data, _) = self.resolve_crate(&None, name, name, None,\n-                                                 syntax_pos::DUMMY_SP,\n-                                                 PathKind::Crate, false);\n+        let (cnum, data) =\n+            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, false);\n \n         // Sanity check the crate we loaded to ensure that it is indeed an\n         // allocator."}, {"sha": "1580662342553ecddf163c8cf37b70ef4d521c3f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c102d7fb68b1da42af21d4546ed12de9140f87e1", "patch": "@@ -83,6 +83,8 @@ pub struct CrateMetadata {\n     /// where this is false is when an allocator crate is injected into the\n     /// dependency list, and therefore isn't actually needed to link an rlib.\n     pub explicitly_linked: Cell<bool>,\n+\n+    pub source: CrateSource,\n }\n \n pub struct CachedInlinedItem {\n@@ -97,7 +99,6 @@ pub struct CStore {\n     metas: RefCell<FxHashMap<CrateNum, Rc<CrateMetadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<CrateNum>>,\n-    used_crate_sources: RefCell<Vec<CrateSource>>,\n     used_libraries: RefCell<Vec<(String, NativeLibraryKind)>>,\n     used_link_args: RefCell<Vec<String>>,\n     statically_included_foreign_items: RefCell<NodeSet>,\n@@ -112,7 +113,6 @@ impl CStore {\n             dep_graph: dep_graph.clone(),\n             metas: RefCell::new(FxHashMap()),\n             extern_mod_crate_map: RefCell::new(FxHashMap()),\n-            used_crate_sources: RefCell::new(Vec::new()),\n             used_libraries: RefCell::new(Vec::new()),\n             used_link_args: RefCell::new(Vec::new()),\n             statically_included_foreign_items: RefCell::new(NodeSet()),\n@@ -146,38 +146,9 @@ impl CStore {\n         }\n     }\n \n-    /// Like `iter_crate_data`, but passes source paths (if available) as well.\n-    pub fn iter_crate_data_origins<I>(&self, mut i: I)\n-        where I: FnMut(CrateNum, &CrateMetadata, Option<CrateSource>)\n-    {\n-        for (&k, v) in self.metas.borrow().iter() {\n-            let origin = self.opt_used_crate_source(k);\n-            origin.as_ref().map(|cs| {\n-                assert!(k == cs.cnum);\n-            });\n-            i(k, &v, origin);\n-        }\n-    }\n-\n-    pub fn add_used_crate_source(&self, src: CrateSource) {\n-        let mut used_crate_sources = self.used_crate_sources.borrow_mut();\n-        if !used_crate_sources.contains(&src) {\n-            used_crate_sources.push(src);\n-        }\n-    }\n-\n-    pub fn opt_used_crate_source(&self, cnum: CrateNum) -> Option<CrateSource> {\n-        self.used_crate_sources\n-            .borrow_mut()\n-            .iter()\n-            .find(|source| source.cnum == cnum)\n-            .cloned()\n-    }\n-\n     pub fn reset(&self) {\n         self.metas.borrow_mut().clear();\n         self.extern_mod_crate_map.borrow_mut().clear();\n-        self.used_crate_sources.borrow_mut().clear();\n         self.used_libraries.borrow_mut().clear();\n         self.used_link_args.borrow_mut().clear();\n         self.statically_included_foreign_items.borrow_mut().clear();\n@@ -223,14 +194,14 @@ impl CStore {\n         }\n         info!(\"topological ordering: {:?}\", ordering);\n         ordering.reverse();\n-        let mut libs = self.used_crate_sources\n+        let mut libs = self.metas\n             .borrow()\n             .iter()\n-            .map(|src| {\n-                (src.cnum,\n+            .map(|(&cnum, data)| {\n+                (cnum,\n                  match prefer {\n-                     LinkagePreference::RequireDynamic => src.dylib.clone().map(|p| p.0),\n-                     LinkagePreference::RequireStatic => src.rlib.clone().map(|p| p.0),\n+                     LinkagePreference::RequireDynamic => data.source.dylib.clone().map(|p| p.0),\n+                     LinkagePreference::RequireStatic => data.source.rlib.clone().map(|p| p.0),\n                  })\n             })\n             .collect::<Vec<_>>();"}, {"sha": "2fdc35581b80011aa743f154a500aa8752d8ce24", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102d7fb68b1da42af21d4546ed12de9140f87e1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c102d7fb68b1da42af21d4546ed12de9140f87e1", "patch": "@@ -507,7 +507,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource\n     {\n-        self.opt_used_crate_source(cnum).unwrap()\n+        self.get_crate_data(cnum).source.clone()\n     }\n \n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>"}]}