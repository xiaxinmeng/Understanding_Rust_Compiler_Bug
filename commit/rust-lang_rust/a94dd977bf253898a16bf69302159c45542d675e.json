{"sha": "a94dd977bf253898a16bf69302159c45542d675e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NGRkOTc3YmYyNTM4OThhMTZiZjY5MzAyMTU5YzQ1NTQyZDY3NWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-03T16:21:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-03T16:21:52Z"}, "message": "Move intrinsics codegen to intrinsics.rs", "tree": {"sha": "08589893fc18a67f1ff59edb1198f76347cbdc8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08589893fc18a67f1ff59edb1198f76347cbdc8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94dd977bf253898a16bf69302159c45542d675e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94dd977bf253898a16bf69302159c45542d675e", "html_url": "https://github.com/rust-lang/rust/commit/a94dd977bf253898a16bf69302159c45542d675e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94dd977bf253898a16bf69302159c45542d675e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6289d212fbf4f0b8717fe61519ce430fd1a4c36e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6289d212fbf4f0b8717fe61519ce430fd1a4c36e", "html_url": "https://github.com/rust-lang/rust/commit/6289d212fbf4f0b8717fe61519ce430fd1a4c36e"}], "stats": {"total": 729, "additions": 365, "deletions": 364}, "files": [{"sha": "a079979fa475a4883b6e5bfaa35359348b357a12", "filename": "src/abi.rs", "status": "modified", "additions": 21, "deletions": 364, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/a94dd977bf253898a16bf69302159c45542d675e/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94dd977bf253898a16bf69302159c45542d675e/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=a94dd977bf253898a16bf69302159c45542d675e", "patch": "@@ -477,22 +477,29 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n         .as_ref()\n         .map(|&(ref place, bb)| (trans_place(fx, place), bb));\n \n-    if !codegen_intrinsic_call(fx, fn_ty, &args, destination) {\n-        codegen_call_inner(\n-            fx,\n-            Some(func),\n-            fn_ty,\n-            args,\n-            destination.map(|(place, _)| place),\n-        );\n-\n-        if let Some((_, dest)) = destination {\n-            let ret_ebb = fx.get_ebb(dest);\n-            fx.bcx.ins().jump(ret_ebb, &[]);\n-        } else {\n-            fx.bcx.ins().trap(TrapCode::User(!0));\n+    if let ty::FnDef(def_id, substs) = fn_ty.sty {\n+        let sig = ty_fn_sig(fx.tcx, fn_ty);\n+\n+        if sig.abi == Abi::RustIntrinsic {\n+            crate::intrinsics::codegen_intrinsic_call(fx, def_id, substs, &args, destination);\n+            return;\n         }\n     }\n+\n+    codegen_call_inner(\n+        fx,\n+        Some(func),\n+        fn_ty,\n+        args,\n+        destination.map(|(place, _)| place),\n+    );\n+\n+    if let Some((_, dest)) = destination {\n+        let ret_ebb = fx.get_ebb(dest);\n+        fx.bcx.ins().jump(ret_ebb, &[]);\n+    } else {\n+        fx.bcx.ins().trap(TrapCode::User(!0));\n+    }\n }\n \n pub fn codegen_call_inner<'a, 'tcx: 'a>(\n@@ -587,353 +594,3 @@ pub fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n         }\n     }\n }\n-\n-fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    fn_ty: Ty<'tcx>,\n-    args: &[CValue<'tcx>],\n-    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n-) -> bool {\n-    if let ty::FnDef(def_id, substs) = fn_ty.sty {\n-        let sig = ty_fn_sig(fx.tcx, fn_ty);\n-\n-        if sig.abi == Abi::RustIntrinsic {\n-            let intrinsic = fx.tcx.item_name(def_id).as_str();\n-            let intrinsic = &intrinsic[..];\n-\n-            let ret = match destination {\n-                Some((place, _)) => place,\n-                None => {\n-                    // Insert non returning intrinsics here\n-                    match intrinsic {\n-                        \"abort\" => {\n-                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n-                        }\n-                        \"unreachable\" => {\n-                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n-                        }\n-                        _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n-                    }\n-                    return true;\n-                }\n-            };\n-\n-            let nil_ty = fx.tcx.mk_unit();\n-            let u64_layout = fx.layout_of(fx.tcx.types.u64);\n-            let usize_layout = fx.layout_of(fx.tcx.types.usize);\n-\n-            match intrinsic {\n-                \"assume\" => {\n-                    assert_eq!(args.len(), 1);\n-                }\n-                \"arith_offset\" => {\n-                    assert_eq!(args.len(), 2);\n-                    let base = args[0].load_value(fx);\n-                    let offset = args[1].load_value(fx);\n-                    let res = fx.bcx.ins().iadd(base, offset);\n-                    let res = CValue::ByVal(res, ret.layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"likely\" | \"unlikely\" => {\n-                    assert_eq!(args.len(), 1);\n-                    ret.write_cvalue(fx, args[0]);\n-                }\n-                \"copy\" | \"copy_nonoverlapping\" => {\n-                    let elem_ty = substs.type_at(0);\n-                    let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-                    let elem_size = fx\n-                        .bcx\n-                        .ins()\n-                        .iconst(fx.module.pointer_type(), elem_size as i64);\n-                    assert_eq!(args.len(), 3);\n-                    let src = args[0].load_value(fx);\n-                    let dst = args[1].load_value(fx);\n-                    let count = args[2].load_value(fx);\n-                    let byte_amount = fx.bcx.ins().imul(count, elem_size);\n-\n-                    if intrinsic.ends_with(\"_nonoverlapping\") {\n-                        fx.bcx.call_memcpy(fx.isa, dst, src, byte_amount);\n-                    } else {\n-                        fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n-                    }\n-                }\n-                \"discriminant_value\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n-                    ret.write_cvalue(fx, discr);\n-                }\n-                \"size_of\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n-                    let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n-                    ret.write_cvalue(fx, size_of);\n-                }\n-                \"size_of_val\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let layout = fx.layout_of(substs.type_at(0));\n-                    let size = match &layout.ty.sty {\n-                        _ if !layout.is_unsized() => fx\n-                            .bcx\n-                            .ins()\n-                            .iconst(fx.module.pointer_type(), layout.size.bytes() as i64),\n-                        ty::Slice(elem) => {\n-                            let len = args[0].load_value_pair(fx).1;\n-                            let elem_size = fx.layout_of(elem).size.bytes();\n-                            fx.bcx.ins().imul_imm(len, elem_size as i64)\n-                        }\n-                        ty::Dynamic(..) => crate::vtable::size_of_obj(fx, args[0]),\n-                        ty => bug!(\"size_of_val for unknown unsized type {:?}\", ty),\n-                    };\n-                    ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n-                }\n-                \"min_align_of\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n-                    let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n-                    ret.write_cvalue(fx, min_align);\n-                }\n-                \"min_align_of_val\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let layout = fx.layout_of(substs.type_at(0));\n-                    let align = match &layout.ty.sty {\n-                        _ if !layout.is_unsized() => fx\n-                            .bcx\n-                            .ins()\n-                            .iconst(fx.module.pointer_type(), layout.align.abi() as i64),\n-                        ty::Slice(elem) => {\n-                            let align = fx.layout_of(elem).align.abi() as i64;\n-                            fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n-                        }\n-                        ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, args[0]),\n-                        ty => unimplemented!(\"min_align_of_val for {:?}\", ty),\n-                    };\n-                    ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n-                }\n-                \"type_id\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n-                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n-                    ret.write_cvalue(fx, type_id);\n-                }\n-                _ if intrinsic.starts_with(\"unchecked_\") => {\n-                    assert_eq!(args.len(), 2);\n-                    let bin_op = match intrinsic {\n-                        \"unchecked_div\" => BinOp::Div,\n-                        \"unchecked_rem\" => BinOp::Rem,\n-                        \"unchecked_shl\" => BinOp::Shl,\n-                        \"unchecked_shr\" => BinOp::Shr,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match ret.layout().ty.sty {\n-                        ty::Uint(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        ty::Int(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                _ if intrinsic.ends_with(\"_with_overflow\") => {\n-                    assert_eq!(args.len(), 2);\n-                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-                    let bin_op = match intrinsic {\n-                        \"add_with_overflow\" => BinOp::Add,\n-                        \"sub_with_overflow\" => BinOp::Sub,\n-                        \"mul_with_overflow\" => BinOp::Mul,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match args[0].layout().ty.sty {\n-                        ty::Uint(_) => crate::base::trans_checked_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        ty::Int(_) => crate::base::trans_checked_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                _ if intrinsic.starts_with(\"overflowing_\") => {\n-                    assert_eq!(args.len(), 2);\n-                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-                    let bin_op = match intrinsic {\n-                        \"overflowing_add\" => BinOp::Add,\n-                        \"overflowing_sub\" => BinOp::Sub,\n-                        \"overflowing_mul\" => BinOp::Mul,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match args[0].layout().ty.sty {\n-                        ty::Uint(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        ty::Int(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"offset\" => {\n-                    assert_eq!(args.len(), 2);\n-                    let base = args[0].load_value(fx);\n-                    let offset = args[1].load_value(fx);\n-                    let res = fx.bcx.ins().iadd(base, offset);\n-                    ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n-                }\n-                \"transmute\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let src_ty = substs.type_at(0);\n-                    let dst_ty = substs.type_at(1);\n-                    assert_eq!(args[0].layout().ty, src_ty);\n-                    let addr = args[0].force_stack(fx);\n-                    let dst_layout = fx.layout_of(dst_ty);\n-                    ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n-                }\n-                \"init\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let ty = substs.type_at(0);\n-                    let layout = fx.layout_of(ty);\n-                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                        kind: StackSlotKind::ExplicitSlot,\n-                        size: layout.size.bytes() as u32,\n-                        offset: None,\n-                    });\n-                    let addr = fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0);\n-                    let zero_val = fx.bcx.ins().iconst(types::I8, 0);\n-                    let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n-                    fx.bcx.call_memset(fx.isa, addr, zero_val, len_val);\n-\n-                    let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n-                    let uninit_val = uninit_place.to_cvalue(fx);\n-                    ret.write_cvalue(fx, uninit_val);\n-                }\n-                \"uninit\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let ty = substs.type_at(0);\n-                    let layout = fx.layout_of(ty);\n-                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                        kind: StackSlotKind::ExplicitSlot,\n-                        size: layout.size.bytes() as u32,\n-                        offset: None,\n-                    });\n-\n-                    let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n-                    let uninit_val = uninit_place.to_cvalue(fx);\n-                    ret.write_cvalue(fx, uninit_val);\n-                }\n-                \"ctlz\" | \"ctlz_nonzero\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"cttz\" | \"cttz_nonzero\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"ctpop\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"bitreverse\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"needs_drop\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let ty = substs.type_at(0);\n-                    let needs_drop = if ty.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n-                        1\n-                    } else {\n-                        0\n-                    };\n-                    let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n-                    ret.write_cvalue(fx, needs_drop);\n-                }\n-                _ if intrinsic.starts_with(\"atomic_fence\") => {}\n-                _ if intrinsic.starts_with(\"atomic_singlethreadfence\") => {}\n-                _ if intrinsic.starts_with(\"atomic_load\") => {\n-                    assert_eq!(args.len(), 1);\n-                    let inner_layout =\n-                        fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n-                    let val = CValue::ByRef(args[0].load_value(fx), inner_layout);\n-                    ret.write_cvalue(fx, val);\n-                }\n-                _ if intrinsic.starts_with(\"atomic_store\") => {\n-                    assert_eq!(args.len(), 2);\n-                    let dest = CPlace::Addr(args[0].load_value(fx), None, args[1].layout());\n-                    dest.write_cvalue(fx, args[1]);\n-                }\n-                _ if intrinsic.starts_with(\"atomic_xadd\") => {\n-                    assert_eq!(args.len(), 2);\n-                    let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n-                    let ptr = args[0].load_value(fx);\n-                    let amount = args[1].load_value(fx);\n-                    let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n-                    let new = fx.bcx.ins().iadd(old, amount);\n-                    fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n-                    ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n-                }\n-                _ if intrinsic.starts_with(\"atomic_xsub\") => {\n-                    assert_eq!(args.len(), 2);\n-                    let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n-                    let ptr = args[0].load_value(fx);\n-                    let amount = args[1].load_value(fx);\n-                    let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n-                    let new = fx.bcx.ins().isub(old, amount);\n-                    fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n-                    ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n-                }\n-                _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n-            }\n-\n-            if let Some((_, dest)) = destination {\n-                let ret_ebb = fx.get_ebb(dest);\n-                fx.bcx.ins().jump(ret_ebb, &[]);\n-            } else {\n-                fx.bcx.ins().trap(TrapCode::User(!0));\n-            }\n-            return true;\n-        }\n-    }\n-\n-    false\n-}"}, {"sha": "3e5bfec9438342152d45932fb958152ba2eb8db7", "filename": "src/intrinsics.rs", "status": "added", "additions": 343, "deletions": 0, "changes": 343, "blob_url": "https://github.com/rust-lang/rust/blob/a94dd977bf253898a16bf69302159c45542d675e/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94dd977bf253898a16bf69302159c45542d675e/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=a94dd977bf253898a16bf69302159c45542d675e", "patch": "@@ -0,0 +1,343 @@\n+\n+use crate::prelude::*;\n+\n+pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    def_id: DefId,\n+    substs: &'tcx Substs,\n+    args: &[CValue<'tcx>],\n+    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+) {\n+    let intrinsic = fx.tcx.item_name(def_id).as_str();\n+    let intrinsic = &intrinsic[..];\n+\n+    let ret = match destination {\n+        Some((place, _)) => place,\n+        None => {\n+            // Insert non returning intrinsics here\n+            match intrinsic {\n+                \"abort\" => {\n+                    fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                }\n+                \"unreachable\" => {\n+                    fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                }\n+                _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+            }\n+            return;\n+        }\n+    };\n+\n+    let u64_layout = fx.layout_of(fx.tcx.types.u64);\n+    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+\n+    match intrinsic {\n+        \"assume\" => {\n+            assert_eq!(args.len(), 1);\n+        }\n+        \"arith_offset\" => {\n+            assert_eq!(args.len(), 2);\n+            let base = args[0].load_value(fx);\n+            let offset = args[1].load_value(fx);\n+            let res = fx.bcx.ins().iadd(base, offset);\n+            let res = CValue::ByVal(res, ret.layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"likely\" | \"unlikely\" => {\n+            assert_eq!(args.len(), 1);\n+            ret.write_cvalue(fx, args[0]);\n+        }\n+        \"copy\" | \"copy_nonoverlapping\" => {\n+            let elem_ty = substs.type_at(0);\n+            let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n+            let elem_size = fx\n+                .bcx\n+                .ins()\n+                .iconst(fx.module.pointer_type(), elem_size as i64);\n+            assert_eq!(args.len(), 3);\n+            let src = args[0].load_value(fx);\n+            let dst = args[1].load_value(fx);\n+            let count = args[2].load_value(fx);\n+            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+\n+            if intrinsic.ends_with(\"_nonoverlapping\") {\n+                fx.bcx.call_memcpy(fx.isa, dst, src, byte_amount);\n+            } else {\n+                fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n+            }\n+        }\n+        \"discriminant_value\" => {\n+            assert_eq!(args.len(), 1);\n+            let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n+            ret.write_cvalue(fx, discr);\n+        }\n+        \"size_of\" => {\n+            assert_eq!(args.len(), 0);\n+            let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n+            let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n+            ret.write_cvalue(fx, size_of);\n+        }\n+        \"size_of_val\" => {\n+            assert_eq!(args.len(), 1);\n+            let layout = fx.layout_of(substs.type_at(0));\n+            let size = match &layout.ty.sty {\n+                _ if !layout.is_unsized() => fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(fx.module.pointer_type(), layout.size.bytes() as i64),\n+                ty::Slice(elem) => {\n+                    let len = args[0].load_value_pair(fx).1;\n+                    let elem_size = fx.layout_of(elem).size.bytes();\n+                    fx.bcx.ins().imul_imm(len, elem_size as i64)\n+                }\n+                ty::Dynamic(..) => crate::vtable::size_of_obj(fx, args[0]),\n+                ty => bug!(\"size_of_val for unknown unsized type {:?}\", ty),\n+            };\n+            ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n+        }\n+        \"min_align_of\" => {\n+            assert_eq!(args.len(), 0);\n+            let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n+            let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n+            ret.write_cvalue(fx, min_align);\n+        }\n+        \"min_align_of_val\" => {\n+            assert_eq!(args.len(), 1);\n+            let layout = fx.layout_of(substs.type_at(0));\n+            let align = match &layout.ty.sty {\n+                _ if !layout.is_unsized() => fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(fx.module.pointer_type(), layout.align.abi() as i64),\n+                ty::Slice(elem) => {\n+                    let align = fx.layout_of(elem).align.abi() as i64;\n+                    fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n+                }\n+                ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, args[0]),\n+                ty => unimplemented!(\"min_align_of_val for {:?}\", ty),\n+            };\n+            ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n+        }\n+        \"type_id\" => {\n+            assert_eq!(args.len(), 0);\n+            let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n+            let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n+            ret.write_cvalue(fx, type_id);\n+        }\n+        _ if intrinsic.starts_with(\"unchecked_\") => {\n+            assert_eq!(args.len(), 2);\n+            let bin_op = match intrinsic {\n+                \"unchecked_div\" => BinOp::Div,\n+                \"unchecked_rem\" => BinOp::Rem,\n+                \"unchecked_shl\" => BinOp::Shl,\n+                \"unchecked_shr\" => BinOp::Shr,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match ret.layout().ty.sty {\n+                ty::Uint(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                ty::Int(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        _ if intrinsic.ends_with(\"_with_overflow\") => {\n+            assert_eq!(args.len(), 2);\n+            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+            let bin_op = match intrinsic {\n+                \"add_with_overflow\" => BinOp::Add,\n+                \"sub_with_overflow\" => BinOp::Sub,\n+                \"mul_with_overflow\" => BinOp::Mul,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match args[0].layout().ty.sty {\n+                ty::Uint(_) => crate::base::trans_checked_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                ty::Int(_) => crate::base::trans_checked_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        _ if intrinsic.starts_with(\"overflowing_\") => {\n+            assert_eq!(args.len(), 2);\n+            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+            let bin_op = match intrinsic {\n+                \"overflowing_add\" => BinOp::Add,\n+                \"overflowing_sub\" => BinOp::Sub,\n+                \"overflowing_mul\" => BinOp::Mul,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match args[0].layout().ty.sty {\n+                ty::Uint(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                ty::Int(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"offset\" => {\n+            assert_eq!(args.len(), 2);\n+            let base = args[0].load_value(fx);\n+            let offset = args[1].load_value(fx);\n+            let res = fx.bcx.ins().iadd(base, offset);\n+            ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n+        }\n+        \"transmute\" => {\n+            assert_eq!(args.len(), 1);\n+            let src_ty = substs.type_at(0);\n+            let dst_ty = substs.type_at(1);\n+            assert_eq!(args[0].layout().ty, src_ty);\n+            let addr = args[0].force_stack(fx);\n+            let dst_layout = fx.layout_of(dst_ty);\n+            ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n+        }\n+        \"init\" => {\n+            assert_eq!(args.len(), 0);\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n+            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                kind: StackSlotKind::ExplicitSlot,\n+                size: layout.size.bytes() as u32,\n+                offset: None,\n+            });\n+            let addr = fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0);\n+            let zero_val = fx.bcx.ins().iconst(types::I8, 0);\n+            let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n+            fx.bcx.call_memset(fx.isa, addr, zero_val, len_val);\n+\n+            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+            let uninit_val = uninit_place.to_cvalue(fx);\n+            ret.write_cvalue(fx, uninit_val);\n+        }\n+        \"uninit\" => {\n+            assert_eq!(args.len(), 0);\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n+            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                kind: StackSlotKind::ExplicitSlot,\n+                size: layout.size.bytes() as u32,\n+                offset: None,\n+            });\n+\n+            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+            let uninit_val = uninit_place.to_cvalue(fx);\n+            ret.write_cvalue(fx, uninit_val);\n+        }\n+        \"ctlz\" | \"ctlz_nonzero\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"cttz\" | \"cttz_nonzero\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"ctpop\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"bitreverse\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"needs_drop\" => {\n+            assert_eq!(args.len(), 0);\n+            let ty = substs.type_at(0);\n+            let needs_drop = if ty.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n+                1\n+            } else {\n+                0\n+            };\n+            let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n+            ret.write_cvalue(fx, needs_drop);\n+        }\n+        _ if intrinsic.starts_with(\"atomic_fence\") => {}\n+        _ if intrinsic.starts_with(\"atomic_singlethreadfence\") => {}\n+        _ if intrinsic.starts_with(\"atomic_load\") => {\n+            assert_eq!(args.len(), 1);\n+            let inner_layout =\n+                fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n+            let val = CValue::ByRef(args[0].load_value(fx), inner_layout);\n+            ret.write_cvalue(fx, val);\n+        }\n+        _ if intrinsic.starts_with(\"atomic_store\") => {\n+            assert_eq!(args.len(), 2);\n+            let dest = CPlace::Addr(args[0].load_value(fx), None, args[1].layout());\n+            dest.write_cvalue(fx, args[1]);\n+        }\n+        _ if intrinsic.starts_with(\"atomic_xadd\") => {\n+            assert_eq!(args.len(), 2);\n+            let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+            let ptr = args[0].load_value(fx);\n+            let amount = args[1].load_value(fx);\n+            let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n+            let new = fx.bcx.ins().iadd(old, amount);\n+            fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n+            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+        }\n+        _ if intrinsic.starts_with(\"atomic_xsub\") => {\n+            assert_eq!(args.len(), 2);\n+            let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+            let ptr = args[0].load_value(fx);\n+            let amount = args[1].load_value(fx);\n+            let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n+            let new = fx.bcx.ins().isub(old, amount);\n+            fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n+            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+        }\n+        _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n+    }\n+\n+    if let Some((_, dest)) = destination {\n+        let ret_ebb = fx.get_ebb(dest);\n+        fx.bcx.ins().jump(ret_ebb, &[]);\n+    } else {\n+        fx.bcx.ins().trap(TrapCode::User(!0));\n+    }\n+}"}, {"sha": "82b3c3ebbdca23976f0bc7f1ef20fa19b73b4a6e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a94dd977bf253898a16bf69302159c45542d675e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94dd977bf253898a16bf69302159c45542d675e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a94dd977bf253898a16bf69302159c45542d675e", "patch": "@@ -52,6 +52,7 @@ mod analyze;\n mod base;\n mod common;\n mod constant;\n+mod intrinsics;\n mod metadata;\n mod pretty_clif;\n mod vtable;"}]}