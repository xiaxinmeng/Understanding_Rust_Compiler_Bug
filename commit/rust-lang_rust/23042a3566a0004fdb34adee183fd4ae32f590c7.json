{"sha": "23042a3566a0004fdb34adee183fd4ae32f590c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDQyYTM1NjZhMDAwNGZkYjM0YWRlZTE4M2ZkNGFlMzJmNTkwYzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T00:35:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T03:32:27Z"}, "message": "rustdoc: Gather types of impls", "tree": {"sha": "f83e7db4d3c0741141ac4ee0199907c01dc97024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83e7db4d3c0741141ac4ee0199907c01dc97024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23042a3566a0004fdb34adee183fd4ae32f590c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23042a3566a0004fdb34adee183fd4ae32f590c7", "html_url": "https://github.com/rust-lang/rust/commit/23042a3566a0004fdb34adee183fd4ae32f590c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23042a3566a0004fdb34adee183fd4ae32f590c7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7108d71a52ae7d89d9d806eb8fcea7e50638bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7108d71a52ae7d89d9d806eb8fcea7e50638bc1", "html_url": "https://github.com/rust-lang/rust/commit/b7108d71a52ae7d89d9d806eb8fcea7e50638bc1"}], "stats": {"total": 186, "additions": 161, "deletions": 25}, "files": [{"sha": "94e07f07a73bfb1275fefc5a372d8746c7ae254c", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 161, "deletions": 25, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/23042a3566a0004fdb34adee183fd4ae32f590c7/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23042a3566a0004fdb34adee183fd4ae32f590c7/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=23042a3566a0004fdb34adee183fd4ae32f590c7", "patch": "@@ -20,7 +20,8 @@ fn run(\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n-        fold_iface: fold_iface\n+        fold_iface: fold_iface,\n+        fold_impl: fold_impl\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -291,30 +292,35 @@ fn fold_iface(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::ifacedoc\n ) -> doc::ifacedoc {\n-\n-    let srv = fold.ctxt;\n-\n     {\n-        methods: vec::map(doc.methods) {|methoddoc|\n-            {\n-                args: merge_method_arg_tys(\n-                    srv,\n-                    doc.id,\n-                    methoddoc.args,\n-                    methoddoc.name),\n-                return: merge_method_ret_ty(\n-                    srv,\n-                    doc.id,\n-                    methoddoc.return,\n-                    methoddoc.name),\n-                sig: get_method_sig(srv, doc.id, methoddoc.name)\n-                with methoddoc\n-            }\n-        }\n+        methods: merge_methods(fold.ctxt, doc.id, doc.methods)\n         with doc\n     }\n }\n \n+fn merge_methods(\n+    srv: astsrv::srv,\n+    item_id: doc::ast_id,\n+    docs: [doc::methoddoc]\n+) -> [doc::methoddoc] {\n+    vec::map(docs) {|doc|\n+        {\n+            args: merge_method_arg_tys(\n+                srv,\n+                item_id,\n+                doc.args,\n+                doc.name),\n+            return: merge_method_ret_ty(\n+                srv,\n+                item_id,\n+                doc.return,\n+                doc.name),\n+            sig: get_method_sig(srv, item_id, doc.name)\n+            with doc\n+        }\n+    }\n+}\n+\n fn merge_method_ret_ty(\n     srv: astsrv::srv,\n     item_id: doc::ast_id,\n@@ -351,7 +357,19 @@ fn get_method_ret_ty(\n                 _ { fail \"get_method_ret_ty: undocumented invariant\"; }\n             }\n           }\n-          _ { fail \"get_method_ret_ty: undocumented invariant\"; }\n+          ast_map::node_item(@{\n+            node: ast::item_impl(_, _, _, methods), _\n+          }) {\n+            alt vec::find(methods) {|method|\n+                method.ident == method_name\n+            } {\n+                some(method) {\n+                    ret_ty_to_str(method.decl)\n+                }\n+                _ { fail \"get_method_ret_ty: undocumented invariant\"; }\n+            }\n+          }\n+          _ { fail }\n         }\n     }\n }\n@@ -372,10 +390,22 @@ fn get_method_sig(\n                 some(method) {\n                     some(pprust::fun_to_str(method.decl, method.ident, []))\n                 }\n-                _ { fail \"get_method_ret_sig: undocumented invariant\"; }\n+                _ { fail \"get_method_sig: undocumented invariant\"; }\n+            }\n+          }\n+          ast_map::node_item(@{\n+            node: ast::item_impl(_, _, _, methods), _\n+          }) {\n+            alt vec::find(methods) {|method|\n+                method.ident == method_name\n+            } {\n+                some(method) {\n+                    some(pprust::fun_to_str(method.decl, method.ident, []))\n+                }\n+                _ { fail \"get_method_sig: undocumented invariant\"; }\n             }\n           }\n-          _ { fail \"get_method_ret_sig: undocumented invariant\"; }\n+          _ { fail \"get_method_sig: undocumented invariant\"; }\n         }\n     }\n }\n@@ -412,10 +442,22 @@ fn get_method_arg_tys(\n                 some(method) {\n                     decl_arg_tys(method.decl)\n                 }\n-                _ { fail \"get_method_arg_tys: undocumented invariant\"; }\n+                _ { fail \"get_method_arg_tys: expected method\"; }\n+            }\n+          }\n+          ast_map::node_item(@{\n+            node: ast::item_impl(_, _, _, methods), _\n+          }) {\n+            alt vec::find(methods) {|method|\n+                method.ident == method_name\n+            } {\n+                some(method) {\n+                    decl_arg_tys(method.decl)\n+                }\n+                _ { fail \"get_method_arg_tys: expected method\"; }\n             }\n           }\n-          _ { fail \"get_method_arg_tys: undocumented invariant\"; }\n+          _ { fail }\n         }\n     }\n }\n@@ -457,3 +499,97 @@ fn should_add_iface_method_arg_types() {\n     assert fn_.args[0].ty == some(\"int\");\n     assert fn_.args[1].ty == some(\"bool\");\n }\n+\n+fn fold_impl(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::impldoc\n+) -> doc::impldoc {\n+\n+    let srv = fold.ctxt;\n+\n+    let (iface_ty, self_ty) = astsrv::exec(srv) {|ctxt|\n+        alt ctxt.ast_map.get(doc.id) {\n+          ast_map::node_item(@{\n+            node: ast::item_impl(_, iface_ty, self_ty, _), _\n+          }) {\n+            let iface_ty = option::map(iface_ty) {|iface_ty|\n+                pprust::ty_to_str(iface_ty)\n+            };\n+            (iface_ty, some(pprust::ty_to_str(self_ty)))\n+          }\n+          _ { fail \"expected impl\" }\n+        }\n+    };\n+\n+    {\n+        iface_ty: iface_ty,\n+        self_ty: self_ty,\n+        methods: merge_methods(fold.ctxt, doc.id, doc.methods)\n+        with doc\n+    }\n+}\n+\n+#[test]\n+fn should_add_impl_iface_ty() {\n+    let source = \"impl i of j for int { fn a() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].iface_ty == some(\"j\");\n+}\n+\n+#[test]\n+fn should_not_add_impl_iface_ty_if_none() {\n+    let source = \"impl i for int { fn a() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].iface_ty == none;\n+}\n+\n+#[test]\n+fn should_add_impl_self_ty() {\n+    let source = \"impl i for int { fn a() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].self_ty == some(\"int\");\n+}\n+\n+#[test]\n+fn should_add_impl_method_sigs() {\n+    let source = \"impl i for int { fn a() -> int { fail } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].methods[0].sig == some(\"fn a() -> int\");\n+}\n+\n+#[test]\n+fn should_add_impl_method_ret_types() {\n+    let source = \"impl i for int { fn a() -> int { fail } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].methods[0].return.ty == some(\"int\");\n+}\n+\n+#[test]\n+fn should_not_add_impl_method_nil_ret_type() {\n+    let source = \"impl i for int { fn a() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.impls()[0].methods[0].return.ty == none;\n+}\n+\n+#[test]\n+fn should_add_impl_method_arg_types() {\n+    let source = \"impl i for int { fn a(b: int, c: bool) { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    let fn_ = doc.topmod.impls()[0].methods[0];\n+    assert fn_.args[0].ty == some(\"int\");\n+    assert fn_.args[1].ty == some(\"bool\");\n+}"}]}