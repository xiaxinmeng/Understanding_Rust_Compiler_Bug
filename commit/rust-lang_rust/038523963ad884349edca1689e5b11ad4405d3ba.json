{"sha": "038523963ad884349edca1689e5b11ad4405d3ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODUyMzk2M2FkODg0MzQ5ZWRjYTE2ODllNWIxMWFkNDQwNWQzYmE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-12T20:18:55Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T06:38:16Z"}, "message": "exhaustively match during structural match checking", "tree": {"sha": "8e522c549f83e7fdd6a0369c473969c30f78f123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e522c549f83e7fdd6a0369c473969c30f78f123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038523963ad884349edca1689e5b11ad4405d3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038523963ad884349edca1689e5b11ad4405d3ba", "html_url": "https://github.com/rust-lang/rust/commit/038523963ad884349edca1689e5b11ad4405d3ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038523963ad884349edca1689e5b11ad4405d3ba/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692a26e8d727a79340937565cf77c573d3a2294f", "url": "https://api.github.com/repos/rust-lang/rust/commits/692a26e8d727a79340937565cf77c573d3a2294f", "html_url": "https://github.com/rust-lang/rust/commit/692a26e8d727a79340937565cf77c573d3a2294f"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "67e24a1333a322a3b67b67e272483d1bd7954ca5", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/038523963ad884349edca1689e5b11ad4405d3ba/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038523963ad884349edca1689e5b11ad4405d3ba/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=038523963ad884349edca1689e5b11ad4405d3ba", "patch": "@@ -125,7 +125,10 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         \"trait objects cannot be used in patterns\".to_string()\n                     }\n                     traits::NonStructuralMatchTy::Param => {\n-                        bug!(\"use of constant whose type is a parameter inside a pattern\")\n+                        bug!(\"use of a constant whose type is a parameter inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTy::Foreign => {\n+                        bug!(\"use of a value of a foreign type inside a pattern\")\n                     }\n                 };\n "}, {"sha": "9bd1334bc8e83cbb2f8e43229318c5c586848200", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/038523963ad884349edca1689e5b11ad4405d3ba/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038523963ad884349edca1689e5b11ad4405d3ba/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=038523963ad884349edca1689e5b11ad4405d3ba", "patch": "@@ -13,6 +13,7 @@ pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),\n     Param,\n     Dynamic,\n+    Foreign,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -143,6 +144,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Dynamic);\n                 return true; // Stop visiting.\n             }\n+            ty::Foreign(_) => {\n+                self.found = Some(NonStructuralMatchTy::Foreign);\n+                return true; // Stop visiting\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`.\n@@ -163,7 +168,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 return false;\n             }\n             ty::FnDef(..) | ty::FnPtr(..) => {\n-                // types of formals and return in `fn(_) -> _` are also irrelevant;\n+                // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n                 //\n                 // (But still tell caller to continue search.)\n@@ -176,7 +181,33 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // for empty array.\n                 return false;\n             }\n-            _ => {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Never\n+            | ty::Error => {\n+                // These primitive types are always structural match.\n+                //\n+                // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n+                return false;\n+            }\n+\n+            ty::Array(..)\n+            | ty::Slice(_)\n+            | ty::Ref(..)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::Tuple(..)\n+            | ty::Projection(..)\n+            | ty::UnnormalizedProjection(..)\n+            | ty::Opaque(..)\n+            | ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_) => {\n                 ty.super_visit_with(self);\n                 return false;\n             }"}]}