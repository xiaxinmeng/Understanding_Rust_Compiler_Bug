{"sha": "f85579d4a2c342654f9b158fafd565eb159fdb59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTU3OWQ0YTJjMzQyNjU0ZjliMTU4ZmFmZDU2NWViMTU5ZmRiNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-12T17:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-12T17:04:14Z"}, "message": "Auto merge of #43181 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 8 pull requests\n\n- Successful merges: #42670, #42826, #43000, #43011, #43098, #43100, #43136, #43137\n- Failed merges:", "tree": {"sha": "e0ab8d41914e967769ee6422ad434d85c9fbcc31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0ab8d41914e967769ee6422ad434d85c9fbcc31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85579d4a2c342654f9b158fafd565eb159fdb59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85579d4a2c342654f9b158fafd565eb159fdb59", "html_url": "https://github.com/rust-lang/rust/commit/f85579d4a2c342654f9b158fafd565eb159fdb59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85579d4a2c342654f9b158fafd565eb159fdb59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b19ec92e233b7f91617e4cc2130e70d6e7a5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b19ec92e233b7f91617e4cc2130e70d6e7a5fd", "html_url": "https://github.com/rust-lang/rust/commit/b2b19ec92e233b7f91617e4cc2130e70d6e7a5fd"}, {"sha": "388fce9dab429e2cc90588727ae07a4c878bd7b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/388fce9dab429e2cc90588727ae07a4c878bd7b3", "html_url": "https://github.com/rust-lang/rust/commit/388fce9dab429e2cc90588727ae07a4c878bd7b3"}], "stats": {"total": 367, "additions": 338, "deletions": 29}, "files": [{"sha": "94f5f4042e13476077d578d26b8f703f6b025861", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -726,14 +726,14 @@ impl<T: Clone> Clone for Box<[T]> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"box_borrow\", since = \"1.1.0\")]\n impl<T: ?Sized> borrow::Borrow<T> for Box<T> {\n     fn borrow(&self) -> &T {\n         &**self\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"box_borrow\", since = \"1.1.0\")]\n impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> {\n     fn borrow_mut(&mut self) -> &mut T {\n         &mut **self"}, {"sha": "35744f3f16b39240f970401eaf8b6bf0963ecad1", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -942,7 +942,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n \n-#[stable(feature = \"std_guard_impls\", since = \"1.20\")]\n+#[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<'a, T: ?Sized + fmt::Display> fmt::Display for Ref<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)\n@@ -1041,7 +1041,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n \n-#[stable(feature = \"std_guard_impls\", since = \"1.20\")]\n+#[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.value.fmt(f)"}, {"sha": "bb4cb0ac3b215aab563985321ed0c6875da67508", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -210,7 +210,7 @@ impl From<u8> for char {\n \n \n /// An error which can be returned when parsing a char.\n-#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n pub struct ParseCharError {\n     kind: CharErrorKind,\n@@ -237,15 +237,15 @@ enum CharErrorKind {\n     TooManyChars,\n }\n \n-#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl fmt::Display for ParseCharError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }\n \n \n-#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl FromStr for char {\n     type Err = ParseCharError;\n "}, {"sha": "750e86114c4bb057446f1024dcaff0a22d7b066d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -1627,13 +1627,13 @@ macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($name:Debug),*> Debug for ($($name,)*) {\n+        impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments, deprecated)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n                 $(\n-                    builder.field($name);\n+                    builder.field(&$name);\n                 )*\n \n                 builder.finish()\n@@ -1643,6 +1643,11 @@ macro_rules! tuple {\n     )\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2000ba91460292347aa9c04930347f4a907a17b4", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -559,7 +559,7 @@ mod impls {\n \n         ( $($name:ident)+) => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($name: Hash),*> Hash for ($($name,)*) {\n+            impl<$($name: Hash),*> Hash for ($($name,)*) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n                     let ($(ref $name,)*) = *self;\n@@ -569,6 +569,11 @@ mod impls {\n         );\n     }\n \n+    macro_rules! last_type {\n+        ($a:ident,) => { $a };\n+        ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+    }\n+\n     impl_hash_tuple! {}\n     impl_hash_tuple! { A }\n     impl_hash_tuple! { A B }"}, {"sha": "ae74016ad744991d06de2b292748d732338582dc", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -462,7 +462,7 @@ macro_rules! writeln {\n ///\n /// # Panics\n ///\n-/// This will always panic.\n+/// This will always [panic!](macro.panic.html)\n ///\n /// # Examples\n ///"}, {"sha": "47e9c7c903880ca053555e1a91731551077e6160", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -29,7 +29,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) {\n+            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn eq(&self, other: &($($T,)+)) -> bool {\n                     $(self.$idx == other.$idx)&&+\n@@ -41,10 +41,11 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Eq),+> Eq for ($($T,)+) {}\n+            impl<$($T:Eq),+> Eq for ($($T,)+) where last_type!($($T,)+): ?Sized {}\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+) {\n+            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n+                    where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n                     lexical_partial_cmp!($(self.$idx, other.$idx),+)\n@@ -68,7 +69,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Ord),+> Ord for ($($T,)+) {\n+            impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn cmp(&self, other: &($($T,)+)) -> Ordering {\n                     lexical_cmp!($(self.$idx, other.$idx),+)\n@@ -118,6 +119,11 @@ macro_rules! lexical_cmp {\n     ($a:expr, $b:expr) => { ($a).cmp(&$b) };\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple_impls! {\n     Tuple1 {\n         (0) -> A"}, {"sha": "357e2ab853cbb5d5d0e92db27bd29914680bb20c", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -303,7 +303,7 @@ impl Literal {\n         Literal(token::Literal(token::Lit::Integer(Symbol::intern(&n.to_string())), None))\n     }\n \n-    int_literals!(u8, i8, u16, i16, u32, i32, u64, i64);\n+    int_literals!(u8, i8, u16, i16, u32, i32, u64, i64, usize, isize);\n     fn typed_integer(n: i128, kind: &'static str) -> Literal {\n         Literal(token::Literal(token::Lit::Integer(Symbol::intern(&n.to_string())),\n                                Some(Symbol::intern(kind))))"}, {"sha": "95722a93beda18c27ddc7084bb0048caedb7c614", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -347,9 +347,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n                 let exp_path = self.tcx.item_path_str(did1);\n                 let found_path = self.tcx.item_path_str(did2);\n+                let exp_abs_path = self.tcx.absolute_item_path_str(did1);\n+                let found_abs_path = self.tcx.absolute_item_path_str(did2);\n                 // We compare strings because DefPath can be different\n                 // for imported and non-imported crates\n-                if exp_path == found_path {\n+                if exp_path == found_path\n+                || exp_abs_path == found_abs_path {\n                     let crate_name = self.tcx.sess.cstore.crate_name(did1.krate);\n                     err.span_note(sp, &format!(\"Perhaps two different versions \\\n                                                 of crate `{}` are being used?\","}, {"sha": "c02d1394f6bb56e70ec1e754fa1614c6a13f97aa", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -330,6 +330,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .filter(|a| a.check_name(\"rustc_on_unimplemented\"))\n             .next()\n         {\n+            let name = self.tcx.item_name(def_id).as_str();\n             let err_sp = item.span.substitute_dummy(span);\n             let trait_str = self.tcx.item_path_str(trait_ref.def_id);\n             if let Some(istring) = item.value_str() {\n@@ -347,6 +348,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         Piece::NextArgument(a) => match a.position {\n                             Position::ArgumentNamed(s) => match generic_map.get(s) {\n                                 Some(val) => Some(val),\n+                                None if s == name => {\n+                                    Some(&trait_str)\n+                                }\n                                 None => {\n                                     span_err!(self.tcx.sess, err_sp, E0272,\n                                               \"the #[rustc_on_unimplemented] attribute on trait \\"}, {"sha": "cdbe5e14e90948fabb469189226f1d6465283578", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -1167,6 +1167,7 @@ fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }) {\n         if let Some(istring) = attr.value_str() {\n             let istring = istring.as_str();\n+            let name = tcx.item_name(def_id).as_str();\n             let parser = Parser::new(&istring);\n             let types = &generics.types;\n             for token in parser {\n@@ -1175,13 +1176,14 @@ fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     Piece::NextArgument(a) => match a.position {\n                         // `{Self}` is allowed\n                         Position::ArgumentNamed(s) if s == \"Self\" => (),\n+                        // `{ThisTraitsName}` is allowed\n+                        Position::ArgumentNamed(s) if s == name => (),\n                         // So is `{A}` if A is a type parameter\n                         Position::ArgumentNamed(s) => match types.iter().find(|t| {\n                             t.name == s\n                         }) {\n                             Some(_) => (),\n                             None => {\n-                                let name = tcx.item_name(def_id);\n                                 span_err!(tcx.sess, attr.span, E0230,\n                                                  \"there is no type parameter \\\n                                                           {} on trait {}\","}, {"sha": "d1c2bfb96b3366f9eb9dc79c2df18df6bb9e8d93", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -340,7 +340,7 @@ impl Error for char::CharTryFromError {\n     }\n }\n \n-#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl Error for char::ParseCharError {\n     fn description(&self) -> &str {\n         self.__description()"}, {"sha": "1b832453523fb8f747eb91100a8d1dd829b59717", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -276,7 +276,10 @@ impl<R: Seek> Seek for BufReader<R> {\n /// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n-/// The buffer will be written out when the writer is dropped.\n+/// When the `BufWriter` is dropped, the contents of its buffer will be written\n+/// out. However, any errors that happen in the process of flushing the buffer\n+/// when the writer is dropped will be ignored. Code that wishes to handle such\n+/// errors must manually call [`flush`] before the writer is dropped.\n ///\n /// # Examples\n ///\n@@ -316,6 +319,7 @@ impl<R: Seek> Seek for BufReader<R> {\n /// [`Write`]: ../../std/io/trait.Write.html\n /// [`Tcpstream::write`]: ../../std/net/struct.TcpStream.html#method.write\n /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n+/// [`flush`]: #method.flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {\n     inner: Option<W>,"}, {"sha": "6ad22820a7d9073c13c54c2967ea60b4859194b2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -24,6 +24,11 @@\n /// The multi-argument form of this macro panics with a string and has the\n /// `format!` syntax for building a string.\n ///\n+/// # Current implementation\n+///\n+/// If the main thread panics it will terminate all your threads and end your\n+/// program with code `101`.\n+///\n /// # Examples\n ///\n /// ```should_panic"}, {"sha": "62d8de18f4b452124decf6d11c0953f6b822c4d5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -440,7 +440,7 @@ impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {\n     }\n }\n \n-#[stable(feature = \"std_guard_impls\", since = \"1.20\")]\n+#[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<'a, T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)"}, {"sha": "5c5231f4e84a3122abd834d9744637f58b1d3bca", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -370,7 +370,7 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n     }\n }\n \n-#[stable(feature = \"std_guard_impls\", since = \"1.20\")]\n+#[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n@@ -386,7 +386,7 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n     }\n }\n \n-#[stable(feature = \"std_guard_impls\", since = \"1.20\")]\n+#[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)"}, {"sha": "9a0d1e06da327d1e9ecb439c5660201e801c880e", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -177,6 +177,8 @@ pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn uid(&self) -> u32;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn gid(&self) -> u32;\n@@ -194,6 +196,10 @@ pub trait MetadataExt {\n     fn ctime(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    fn blocks(&self) -> u64;\n }\n \n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -207,6 +213,9 @@ impl MetadataExt for fs::Metadata {\n     fn mode(&self) -> u32 {\n         self.as_inner().as_inner().st_mode as u32\n     }\n+    fn nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n     fn uid(&self) -> u32 {\n         self.as_inner().as_inner().st_uid as u32\n     }\n@@ -234,6 +243,12 @@ impl MetadataExt for fs::Metadata {\n     fn ctime_nsec(&self) -> i64 {\n         self.as_inner().as_inner().st_ctime_nsec as i64\n     }\n+    fn blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n }\n \n /// Add special Redox types (block/char device, fifo and socket)"}, {"sha": "87e50c40148325c7783abe172a7c3bdf1a151aa6", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -119,10 +119,10 @@ impl FilePermissions {\n impl FileType {\n     pub fn is_dir(&self) -> bool { self.is(syscall::MODE_DIR) }\n     pub fn is_file(&self) -> bool { self.is(syscall::MODE_FILE) }\n-    pub fn is_symlink(&self) -> bool { false /*FIXME: Implement symlink mode*/ }\n+    pub fn is_symlink(&self) -> bool { self.is(syscall::MODE_SYMLINK) }\n \n     pub fn is(&self, mode: u16) -> bool {\n-        self.mode & (syscall::MODE_DIR | syscall::MODE_FILE) == mode\n+        self.mode & syscall::MODE_TYPE == mode\n     }\n }\n "}, {"sha": "d6836418b4b5c01b807c67c7702a109d6b1e3482", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -38,7 +38,7 @@ use tables::{conversions, derived_property, general_category, property};\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n-#[stable(feature = \"char_from_str\", since = \"1.19.0\")]\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use core::char::ParseCharError;\n \n // unstable reexports"}, {"sha": "1044d73fd1a368d339228d1b4a35bc27e8c9571e", "filename": "src/test/run-make/type-mismatch-same-crate-name/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,19 @@\n+-include ../tools.mk\n+\n+all:\n+\t# compile two different versions of crateA\n+\t$(RUSTC) --crate-type=rlib crateA.rs -C metadata=-1 -C extra-filename=-1\n+\t$(RUSTC) --crate-type=rlib crateA.rs -C metadata=-2 -C extra-filename=-2\n+\t# make crateB depend on version 1 of crateA\n+\t$(RUSTC) --crate-type=rlib crateB.rs --extern crateA=$(TMPDIR)/libcrateA-1.rlib\n+\t# make crateC depend on version 2 of crateA\n+\t$(RUSTC) crateC.rs --extern crateA=$(TMPDIR)/libcrateA-2.rlib 2>&1 | \\\n+\t\ttr -d '\\r\\n' | grep \\\n+\t\"mismatched types.*\\\n+\tcrateB::try_foo(foo2);.*\\\n+\texpected struct \\`crateA::foo::Foo\\`, found struct \\`crateA::Foo\\`.*\\\n+\tdifferent versions of crate \\`crateA\\`.*\\\n+\tmismatched types.*\\\n+\tcrateB::try_bar(bar2);.*\\\n+\texpected trait \\`crateA::bar::Bar\\`, found trait \\`crateA::Bar\\`.*\\\n+\tdifferent versions of crate \\`crateA\\`\""}, {"sha": "e40266bb4cdaaef5e3057b6c1c7f2cc7e883ed90", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateA.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct Foo;\n+}\n+\n+mod bar {\n+    pub trait Bar{}\n+\n+    pub fn bar() -> Box<Bar> {\n+        unimplemented!()\n+    }\n+}\n+\n+// This makes the publicly accessible path\n+// differ from the internal one.\n+pub use foo::Foo;\n+pub use bar::{Bar, bar};"}, {"sha": "da4ea1c9387e9d534f1788a0505c4705b1b54ec3", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateB.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate crateA;\n+\n+pub fn try_foo(x: crateA::Foo){}\n+pub fn try_bar(x: Box<crateA::Bar>){}"}, {"sha": "da869d2145fe1df4422e926b4ac7e28b95bd3509", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateC.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This tests the extra note reported when a type error deals with\n+// seemingly identical types.\n+// The main use case of this error is when there are two crates\n+// (generally different versions of the same crate) with the same name\n+// causing a type mismatch.\n+\n+// The test is nearly the same as the one in\n+// compile-fail/type-mismatch-same-crate-name.rs\n+// but deals with the case where one of the crates\n+// is only introduced as an indirect dependency.\n+// and the type is accessed via a reexport.\n+// This is similar to how the error can be introduced\n+// when using cargo's automatic dependency resolution.\n+\n+extern crate crateA;\n+\n+fn main() {\n+    let foo2 = crateA::Foo;\n+    let bar2 = crateA::bar();\n+    {\n+        extern crate crateB;\n+        crateB::try_foo(foo2);\n+        crateB::try_bar(bar2);\n+    }\n+}"}, {"sha": "591b19f89e897898bba9efb4ec979c3e2ee74460", "filename": "src/test/run-pass/unsized-tuple-impls.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_tuple_coercion)]\n+\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let x : &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n+    let y : &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n+    let mut a = [y, x];\n+    a.sort();\n+    assert_eq!(a, [x, y]);\n+\n+    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n+\n+    let mut h = HashSet::new();\n+    h.insert(x);\n+    h.insert(y);\n+    assert!(h.contains(x));\n+    assert!(h.contains(y));\n+}"}, {"sha": "8580749084d22da1b39a356468d43611f01a0c57", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "previous_filename": "src/test/compile-fail/on-unimplemented/bad-annotation.rs"}, {"sha": "8599477e8ed7eb05277f6b8e49d6b51d254190ab", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,22 @@\n+error[E0232]: this attribute must have a value\n+  --> $DIR/bad-annotation.rs:26:1\n+   |\n+26 | #[rustc_on_unimplemented] //~ ERROR this attribute must have a value\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ attribute requires a value\n+   |\n+   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+\n+error[E0230]: there is no type parameter C on trait BadAnnotation2\n+  --> $DIR/bad-annotation.rs:30:1\n+   |\n+30 | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0231]: only named substitution parameters are allowed\n+  --> $DIR/bad-annotation.rs:35:1\n+   |\n+35 | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{}>`\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "15375936b898c80de754ba8191984790bda0e5e4", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "previous_filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs"}, {"sha": "a1fa8b720a82944bbf893b0ac955eb314037e0c3", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,53 @@\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:43:5\n+   |\n+43 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:43:5\n+   |\n+43 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:49:5\n+   |\n+49 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:49:5\n+   |\n+49 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "66d612baab4e8648b80a6275cf9c318e8aba0988", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "previous_filename": "src/test/compile-fail/on-unimplemented/on-impl.rs"}, {"sha": "c8c06bf44fd6fe9d2f9be3e62bc8b122b028d720", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:32:5\n+   |\n+32 |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:32:5\n+   |\n+32 |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ed7ec9b1436890c90f87196553bdb310aba21d3d", "filename": "src/test/ui/on-unimplemented/on-trait.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -11,9 +11,12 @@\n \n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n-trait Foo<Bar, Baz, Quux>\n-{}\n+pub mod Bar {\n+  #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}` in `{Foo}`\"]\n+  pub trait Foo<Bar, Baz, Quux> {}\n+}\n+\n+use Bar::Foo;\n \n fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n     panic!()", "previous_filename": "src/test/compile-fail/on-unimplemented/on-trait.rs"}, {"sha": "84986c1ecfdd326ff0e2f9452236a81fb138a5a1", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` is not satisfied\n+  --> $DIR/on-trait.rs:37:30\n+   |\n+37 |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n+   |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n+   |\n+   = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n+   = note: required by `collect`\n+\n+error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n+  --> $DIR/on-trait.rs:42:21\n+   |\n+42 |     let x: String = foobar(); //~ ERROR\n+   |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n+   |\n+   = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n+   = note: required by `foobar`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5d30c2e982ef719e30a0894788cf32af3fa8bf4c", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "previous_filename": "src/test/compile-fail/on-unimplemented/slice-index.rs"}, {"sha": "68789f77f750cf7ef99ccf4253136ed3deb85c27", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f85579d4a2c342654f9b158fafd565eb159fdb59/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=f85579d4a2c342654f9b158fafd565eb159fdb59", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `i32: std::slice::SliceIndex<[i32]>` is not satisfied\n+  --> $DIR/slice-index.rs:21:5\n+   |\n+21 |     x[1i32]; //~ ERROR E0277\n+   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::slice::SliceIndex<[i32]>` is not implemented for `i32`\n+   = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `[i32]`\n+\n+error[E0277]: the trait bound `std::ops::RangeTo<i32>: std::slice::SliceIndex<[i32]>` is not satisfied\n+  --> $DIR/slice-index.rs:24:5\n+   |\n+24 |     x[..1i32]; //~ ERROR E0277\n+   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::slice::SliceIndex<[i32]>` is not implemented for `std::ops::RangeTo<i32>`\n+   = note: required because of the requirements on the impl of `std::ops::Index<std::ops::RangeTo<i32>>` for `[i32]`\n+\n+error: aborting due to 2 previous errors\n+"}]}