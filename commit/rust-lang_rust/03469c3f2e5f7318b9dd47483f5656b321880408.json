{"sha": "03469c3f2e5f7318b9dd47483f5656b321880408", "node_id": "C_kwDOAAsO6NoAKDAzNDY5YzNmMmU1ZjczMThiOWRkNDc0ODNmNTY1NmIzMjE4ODA0MDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T06:37:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-02T22:36:25Z"}, "message": "Make negative trait bounds work with the old trait solver", "tree": {"sha": "4def76c66dbe513023cae219c41de91c5043fcef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4def76c66dbe513023cae219c41de91c5043fcef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03469c3f2e5f7318b9dd47483f5656b321880408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03469c3f2e5f7318b9dd47483f5656b321880408", "html_url": "https://github.com/rust-lang/rust/commit/03469c3f2e5f7318b9dd47483f5656b321880408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03469c3f2e5f7318b9dd47483f5656b321880408/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a63cb06ff21d7cd38f35c92a29162e43f9aadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a63cb06ff21d7cd38f35c92a29162e43f9aadf", "html_url": "https://github.com/rust-lang/rust/commit/40a63cb06ff21d7cd38f35c92a29162e43f9aadf"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "1f01ad009dc39dcf290a9d3e78143bf67cd19ec5", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=03469c3f2e5f7318b9dd47483f5656b321880408", "patch": "@@ -701,6 +701,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n+            // Don't register additional associated type bounds for negative bounds,\n+            // since we should have emitten an error for them earlier, and they will\n+            // not be well-formed!\n+            if polarity == ty::ImplPolarity::Negative {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(binding.span, \"negative trait bounds should not have bindings\");\n+                continue;\n+            }\n+\n             // Specify type to assert that error was already reported in `Err` case.\n             let _: Result<_, ErrorGuaranteed> = self.add_predicates_for_ast_type_binding(\n                 hir_id,"}, {"sha": "f54e5e5e56ffc007defd6c315b1ef2ea1224a8c4", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=03469c3f2e5f7318b9dd47483f5656b321880408", "patch": "@@ -200,6 +200,10 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n         let bound_predicate = elaboratable.predicate().kind();\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n+                // Negative trait bounds do not imply any supertrait bounds\n+                if data.polarity == ty::ImplPolarity::Negative {\n+                    return;\n+                }\n                 // Get predicates implied by the trait, or only super predicates if we only care about self predicates.\n                 let predicates = if self.only_self {\n                     tcx.super_predicates_of(data.def_id())"}, {"sha": "a8864f47ef0369c8c80732b90787d1d14cb8b41d", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=03469c3f2e5f7318b9dd47483f5656b321880408", "patch": "@@ -57,6 +57,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if obligation.polarity() == ty::ImplPolarity::Negative {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n             self.assemble_candidates_from_impls(obligation, &mut candidates);\n+            self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;\n         } else {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n \n@@ -187,6 +188,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n+            if bound.skip_binder().polarity != stack.obligation.predicate.skip_binder().polarity {\n+                continue;\n+            }\n+\n             // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n             // polarity here.\n             let wc = self.where_clause_may_apply(stack, bound.map_bound(|t| t.trait_ref))?;"}, {"sha": "0590e02d84ac04038cbcbca38e078ec7c89fd351", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03469c3f2e5f7318b9dd47483f5656b321880408/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=03469c3f2e5f7318b9dd47483f5656b321880408", "patch": "@@ -328,6 +328,13 @@ impl<'tcx> WfPredicates<'tcx> {\n         let tcx = self.tcx;\n         let trait_ref = &trait_pred.trait_ref;\n \n+        // Negative trait predicates don't require supertraits to hold, just\n+        // that their substs are WF.\n+        if trait_pred.polarity == ty::ImplPolarity::Negative {\n+            self.compute_negative_trait_pred(trait_ref);\n+            return;\n+        }\n+\n         // if the trait predicate is not const, the wf obligations should not be const as well.\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n@@ -393,6 +400,14 @@ impl<'tcx> WfPredicates<'tcx> {\n         );\n     }\n \n+    // Compute the obligations that are required for `trait_ref` to be WF,\n+    // given that it is a *negative* trait predicate.\n+    fn compute_negative_trait_pred(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+        for arg in trait_ref.substs {\n+            self.compute(arg);\n+        }\n+    }\n+\n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::AliasTy<'tcx>) {"}, {"sha": "a3cab41a2ce0f247d7a3ed03bb0ca0571a69fff8", "filename": "tests/ui/traits/negative-bounds/simple.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03469c3f2e5f7318b9dd47483f5656b321880408/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03469c3f2e5f7318b9dd47483f5656b321880408/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr?ref=03469c3f2e5f7318b9dd47483f5656b321880408", "patch": "@@ -7,19 +7,7 @@ LL | #![feature(negative_bounds, negative_impls)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: the trait bound `T: !Copy` is not satisfied\n-  --> $DIR/simple.rs:6:16\n-   |\n-LL |     not_copy::<T>();\n-   |                ^ the trait `!Copy` is not implemented for `T`\n-   |\n-note: required by a bound in `not_copy`\n-  --> $DIR/simple.rs:3:16\n-   |\n-LL | fn not_copy<T: !Copy>() {}\n-   |                ^^^^^ required by this bound in `not_copy`\n-\n-error[E0277]: the trait bound `T: !Copy` is not satisfied\n-  --> $DIR/simple.rs:10:16\n+  --> $DIR/simple.rs:11:16\n    |\n LL |     not_copy::<T>();\n    |                ^ the trait `!Copy` is not implemented for `T`\n@@ -77,6 +65,6 @@ LL + #[derive(Copy)]\n LL | struct NotNecessarilyCopyable;\n    |\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}]}