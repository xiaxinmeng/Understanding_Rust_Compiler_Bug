{"sha": "b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNmNiMGRmNWE2ZGIwNmJiYzkzYjBkMWM2OWE3ZGEyNzcwZjRhNmI=", "commit": {"author": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-20T08:33:50Z"}, "committer": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-20T08:55:36Z"}, "message": "cargo: Install blobs to $sysroot/(bin|lib) on system-mode\n\nIssue #1795", "tree": {"sha": "b8a9ccddef705dfc3b21280e953c86d8fda3a531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a9ccddef705dfc3b21280e953c86d8fda3a531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b", "html_url": "https://github.com/rust-lang/rust/commit/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b/comments", "author": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e", "html_url": "https://github.com/rust-lang/rust/commit/ff0ab6b7ee70fb39fe11069ead3e7ef62e92fe9e"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "4d67877afd8acd07a20fbc995df38a23dae2fd0f", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=b06cb0df5a6db06bbc93b0d1c69a7da2770f4a6b", "patch": "@@ -6,7 +6,7 @@ use std;\n import rustc::syntax::{ast, codemap};\n import rustc::syntax::parse::parser;\n import rustc::util::filesearch::{get_cargo_root, get_cargo_root_nearest,\n-                                 get_cargo_sysroot};\n+                                 get_cargo_sysroot, libdir};\n import rustc::driver::diagnostic;\n \n import std::fs;\n@@ -467,10 +467,31 @@ fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n             #debug(\"  bin: %s\", ct);\n             // FIXME: need libstd fs::copy or something\n             run::run_program(\"cp\", [ct, c.bindir]);\n+            if c.opts.mode == system_mode {\n+                install_one_crate_to_sysroot(ct, \"bin\");\n+            }\n         } else {\n             #debug(\"  lib: %s\", ct);\n             run::run_program(\"cp\", [ct, c.libdir]);\n+            if c.opts.mode == system_mode {\n+                install_one_crate_to_sysroot(ct, libdir());\n+            }\n+        }\n+    }\n+}\n+\n+fn install_one_crate_to_sysroot(ct: str, target: str) {\n+    alt os::get_exe_path() {\n+        some(_path) {\n+            let path = [_path, \"..\", target];\n+            check vec::is_not_empty(path);\n+            let target_dir = fs::normalize(fs::connect_many(path));\n+            let p = run::program_output(\"cp\", [ct, target_dir]);\n+            if p.status != 0 {\n+                warn(#fmt[\"Copying %s to %s is failed\", ct, target_dir]);\n+            }\n         }\n+        none { }\n     }\n }\n \n@@ -827,23 +848,25 @@ fn cmd_usage() {\n           \"\n \n     init                                          Set up .cargo\n-    install [--test] [source/]package-name        Install by name\n-    install [--test] uuid:[source/]package-uuid   Install by uuid\n+    install [options] [source/]package-name       Install by name\n+    install [options] uuid:[source/]package-uuid  Install by uuid\n     list [source]                                 List packages\n     search <name | '*'> [tags...]                 Search packages\n     sync                                          Sync all sources\n     usage                                         This\n \n Options:\n \n+  cargo install\n+\n     --mode=[system,user,local]   change mode as (system/user/local)\n     -g                           equivalent to --mode=user\n     -G                           equivalent to --mode=system\n \n NOTE:\n-This command creates/uses local-level .cargo by default.\n-To create/use user-level .cargo, use option -g/--mode=user.\n-To create/use system-level .cargo, use option -G/--mode=system.\n+\\\"cargo install\\\" installs bin/libs to local-level .cargo by default.\n+To install them into user-level .cargo,  use option -g/--mode=user.\n+To install them into bin/lib on sysroot, use option -G/--mode=system.\n \");\n }\n "}]}