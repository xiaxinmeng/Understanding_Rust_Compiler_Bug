{"sha": "513ab54360d2e8cd608c9f62855699e678659e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxM2FiNTQzNjBkMmU4Y2Q2MDhjOWY2Mjg1NTY5OWU2Nzg2NTllN2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-27T15:40:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-27T15:40:51Z"}, "message": "Rollup merge of #63014 - davidtwco:rustfix-incorrect-dyn-suggestion, r=estebank\n\nStop bare trait lint applying to macro call sites\n\nFixes #61963. Apologies for the delay with in fixing this. If anyone has a better idea how to detect this macro call site case, I'd be happy to fix this in a more robust, less hacky way.\n\nr? @estebank", "tree": {"sha": "6536e8947409233c38e93b3f70d616f454b6bb7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6536e8947409233c38e93b3f70d616f454b6bb7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/513ab54360d2e8cd608c9f62855699e678659e7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPHCDCRBK7hj4Ov3rIwAAdHIIAFp/U+GmbNIzKtzjPCSYaoLm\nwrd7XpKbfSwjvvil2X/eSioBZ8zemK/qsLvflXzCbi0G6IbCuUewIs/RPHQX/vz6\ntOAQqtUtkCl+rsiFAzfvmQFJqoyJ5uqNHiL9E0ZZlAtpSGQ5ulbLNiI3e8jiOZum\nMmZi9RGO/IYryG895lb2avI7yC5dgayC0XxP4WUblT6FFePDZ2jIG9qrhn/UXMRh\nQX7NSuOGsQW2jhTEsDGd3IjXfLSPrLtCGXTd+0G7oYN4z1nmcrtyM88eAXUxWIFA\njP2nQj/KkJ2mEnUgOpIYFyws+fFi/7cve3CX4GqAMSWuL6kRS2IGBwEkO1TVO84=\n=9Lak\n-----END PGP SIGNATURE-----\n", "payload": "tree 6536e8947409233c38e93b3f70d616f454b6bb7b\nparent 4ad743c022c725a62bafa7a2795fcc2055afb124\nparent cae8680544418d838344d9c258030592f0461ee9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564242051 +0200\ncommitter GitHub <noreply@github.com> 1564242051 +0200\n\nRollup merge of #63014 - davidtwco:rustfix-incorrect-dyn-suggestion, r=estebank\n\nStop bare trait lint applying to macro call sites\n\nFixes #61963. Apologies for the delay with in fixing this. If anyone has a better idea how to detect this macro call site case, I'd be happy to fix this in a more robust, less hacky way.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/513ab54360d2e8cd608c9f62855699e678659e7d", "html_url": "https://github.com/rust-lang/rust/commit/513ab54360d2e8cd608c9f62855699e678659e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/513ab54360d2e8cd608c9f62855699e678659e7d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad743c022c725a62bafa7a2795fcc2055afb124", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad743c022c725a62bafa7a2795fcc2055afb124", "html_url": "https://github.com/rust-lang/rust/commit/4ad743c022c725a62bafa7a2795fcc2055afb124"}, {"sha": "cae8680544418d838344d9c258030592f0461ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae8680544418d838344d9c258030592f0461ee9", "html_url": "https://github.com/rust-lang/rust/commit/cae8680544418d838344d9c258030592f0461ee9"}], "stats": {"total": 141, "additions": 134, "deletions": 7}, "files": [{"sha": "639994ed14d86dac521ccc67afed785a24e41d0a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=513ab54360d2e8cd608c9f62855699e678659e7d", "patch": "@@ -5753,13 +5753,21 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn maybe_lint_bare_trait(&self, span: Span, id: NodeId, is_global: bool) {\n-        self.sess.buffer_lint_with_diagnostic(\n-            builtin::BARE_TRAIT_OBJECTS,\n-            id,\n-            span,\n-            \"trait objects without an explicit `dyn` are deprecated\",\n-            builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-        )\n+        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n+        // call site which do not have a macro backtrace. See #61963.\n+        let is_macro_callsite = self.sess.source_map()\n+            .span_to_snippet(span)\n+            .map(|snippet| snippet.starts_with(\"#[\"))\n+            .unwrap_or(true);\n+        if !is_macro_callsite {\n+            self.sess.buffer_lint_with_diagnostic(\n+                builtin::BARE_TRAIT_OBJECTS,\n+                id,\n+                span,\n+                \"trait objects without an explicit `dyn` are deprecated\",\n+                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+            )\n+        }\n     }\n \n     fn wrap_in_try_constructor("}, {"sha": "6c2df7e84e07c4dacb17221dc808ba1b6ebff9d8", "filename": "src/test/ui/suggestions/auxiliary/issue-61963-1.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963-1.rs?ref=513ab54360d2e8cd608c9f62855699e678659e7d", "patch": "@@ -0,0 +1,40 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Group, TokenStream, TokenTree};\n+\n+// This macro exists as part of a reproduction of #61963 but without using quote/syn/proc_macro2.\n+\n+#[proc_macro_derive(DomObject)]\n+pub fn expand_token_stream(input: TokenStream) -> TokenStream {\n+    // Construct a dummy span - `#0 bytes(0..0)` - which is present in the input because\n+    // of the specially crafted generated tokens in the `attribute-crate` proc-macro.\n+    let dummy_span = input.clone().into_iter().nth(0).unwrap().span();\n+\n+    // Define what the macro would output if constructed properly from the source using syn/quote.\n+    let output: TokenStream = \"impl Bar for ((), Qux<Qux<Baz> >) { }\n+    impl Bar for ((), Box<Bar>) { }\".parse().unwrap();\n+\n+    let mut tokens: Vec<_> = output.into_iter().collect();\n+    // Adjust token spans to match the original crate (which would use `quote`). Some of the\n+    // generated tokens point to the dummy span.\n+    for token in tokens.iter_mut() {\n+        if let TokenTree::Group(group) = token {\n+            let mut tokens: Vec<_> = group.stream().into_iter().collect();\n+            for token in tokens.iter_mut().skip(2) {\n+                token.set_span(dummy_span);\n+            }\n+\n+            let mut stream = TokenStream::new();\n+            stream.extend(tokens);\n+            *group = Group::new(group.delimiter(), stream);\n+        }\n+    }\n+\n+    let mut output = TokenStream::new();\n+    output.extend(tokens);\n+    output\n+}"}, {"sha": "e86f1610ab0d0459a2651ef3780f966dc4b5c3c8", "filename": "src/test/ui/suggestions/auxiliary/issue-61963.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-61963.rs?ref=513ab54360d2e8cd608c9f62855699e678659e7d", "patch": "@@ -0,0 +1,41 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Group, Spacing, Punct, TokenTree, TokenStream};\n+\n+// This macro exists as part of a reproduction of #61963 but without using quote/syn/proc_macro2.\n+\n+#[proc_macro_attribute]\n+pub fn dom_struct(_: TokenStream, input: TokenStream) -> TokenStream {\n+    // Construct the expected output tokens - the input but with a `#[derive(DomObject)]` applied.\n+    let attributes: TokenStream =\n+        \"#[derive(DomObject)]\".to_string().parse().unwrap();\n+    let output: TokenStream = attributes.into_iter()\n+        .chain(input.into_iter()).collect();\n+\n+    let mut tokens: Vec<_> = output.into_iter().collect();\n+    // Adjust the spacing of `>` tokens to match what `quote` would produce.\n+    for token in tokens.iter_mut() {\n+        if let TokenTree::Group(group) = token {\n+            let mut tokens: Vec<_> = group.stream().into_iter().collect();\n+            for token in tokens.iter_mut() {\n+                if let TokenTree::Punct(p) = token {\n+                    if p.as_char() == '>' {\n+                        *p = Punct::new('>', Spacing::Alone);\n+                    }\n+                }\n+            }\n+\n+            let mut stream = TokenStream::new();\n+            stream.extend(tokens);\n+            *group = Group::new(group.delimiter(), stream);\n+        }\n+    }\n+\n+    let mut output = TokenStream::new();\n+    output.extend(tokens);\n+    output\n+}"}, {"sha": "c9d738f5a283e375591925ae40f68a8dbdf9e88d", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=513ab54360d2e8cd608c9f62855699e678659e7d", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:issue-61963.rs\n+// aux-build:issue-61963-1.rs\n+#![deny(bare_trait_objects)]\n+\n+#[macro_use]\n+extern crate issue_61963;\n+#[macro_use]\n+extern crate issue_61963_1;\n+\n+// This test checks that the bare trait object lint does not trigger on macro attributes that\n+// generate code which would trigger the lint.\n+\n+pub struct Baz;\n+pub trait Bar { }\n+pub struct Qux<T>(T);\n+\n+#[dom_struct]\n+pub struct Foo {\n+    qux: Qux<Qux<Baz>>,\n+    bar: Box<Bar>,\n+    //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+}\n+\n+fn main() {}"}, {"sha": "46943f40066ff5f343ebe29b17c88f13b2dad804", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513ab54360d2e8cd608c9f62855699e678659e7d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=513ab54360d2e8cd608c9f62855699e678659e7d", "patch": "@@ -0,0 +1,14 @@\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:20:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^ help: use `dyn`: `dyn Bar`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-61963.rs:3:9\n+   |\n+LL | #![deny(bare_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}