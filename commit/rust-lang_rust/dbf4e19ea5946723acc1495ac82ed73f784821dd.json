{"sha": "dbf4e19ea5946723acc1495ac82ed73f784821dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjRlMTllYTU5NDY3MjNhY2MxNDk1YWM4MmVkNzNmNzg0ODIxZGQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-07-12T06:07:34Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:12Z"}, "message": "remove unneeded imports, clean up unused var warnings", "tree": {"sha": "8a45c9fb5b17015f95db03cbbfd5618c9c8394fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a45c9fb5b17015f95db03cbbfd5618c9c8394fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf4e19ea5946723acc1495ac82ed73f784821dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf4e19ea5946723acc1495ac82ed73f784821dd", "html_url": "https://github.com/rust-lang/rust/commit/dbf4e19ea5946723acc1495ac82ed73f784821dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf4e19ea5946723acc1495ac82ed73f784821dd/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60562ac9f8c68c1cf3b30efcd6d6954a9b82acbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/60562ac9f8c68c1cf3b30efcd6d6954a9b82acbe", "html_url": "https://github.com/rust-lang/rust/commit/60562ac9f8c68c1cf3b30efcd6d6954a9b82acbe"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "afb8802968cd20ce1923837fb479dfdae54032bd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dbf4e19ea5946723acc1495ac82ed73f784821dd", "patch": "@@ -135,13 +135,13 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     // that ignore their contexts\n     fn builtin_normal_tt_no_ctxt(f: SyntaxExpanderTTFunNoCtxt) -> @Transformer {\n-        let wrapped_expander : SyntaxExpanderTTFun = |a,b,c,d|{f(a,b,c)};\n+        let wrapped_expander : SyntaxExpanderTTFun = |a,b,c,_d|{f(a,b,c)};\n         @SE(NormalTT(wrapped_expander, None))\n     }\n     // utility function to simplify creating IdentTT syntax extensions\n     // that ignore their contexts\n     fn builtin_item_tt_no_ctxt(f: SyntaxExpanderTTItemFunNoCtxt) -> @Transformer {\n-        let wrapped_expander : SyntaxExpanderTTItemFun = |a,b,c,d,e|{f(a,b,c,d)};\n+        let wrapped_expander : SyntaxExpanderTTItemFun = |a,b,c,d,_e|{f(a,b,c,d)};\n         @SE(IdentTT(wrapped_expander, None))\n     }\n     let mut syntax_expanders = HashMap::new();"}, {"sha": "120f75406c7bc03be3e9cf00e042201b4a915b21", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dbf4e19ea5946723acc1495ac82ed73f784821dd", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{Block, Crate, NodeId, DeclLocal, EMPTY_CTXT, Expr_, ExprMac, SyntaxContext};\n+use ast::{Block, Crate, NodeId, DeclLocal, Expr_, ExprMac, SyntaxContext};\n use ast::{Local, Ident, mac_invoc_tt};\n use ast::{item_mac, Mrk, Stmt_, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n-use ast::{ILLEGAL_CTXT, SCTable, token_tree};\n+use ast::{token_tree};\n use ast;\n-use ast_util::{new_rename, new_mark, mtwt_resolve};\n+use ast_util::{new_rename, new_mark};\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n@@ -585,7 +585,7 @@ fn expand_non_macro_stmt (exts: SyntaxEnv,\n                 let new_name = fresh_name(ident);\n                 new_pending_renames.push((*ident,new_name));\n             }\n-            let mut rename_fld = renames_to_fold(new_pending_renames);\n+            let rename_fld = renames_to_fold(new_pending_renames);\n             // rewrite the pattern using the new names (the old ones\n             // have already been applied):\n             let rewritten_pat = rename_fld.fold_pat(expanded_pat);\n@@ -906,7 +906,7 @@ pub fn expand_block(extsbox: @mut SyntaxEnv,\n                     _cx: @ExtCtxt,\n                     blk: &Block,\n                     fld: @ast_fold,\n-                    orig: @fn(&Block, @ast_fold) -> Block)\n+                    _orig: @fn(&Block, @ast_fold) -> Block)\n                  -> Block {\n     // see note below about treatment of exts table\n     with_exts_frame!(extsbox,false,\n@@ -917,7 +917,7 @@ pub fn expand_block(extsbox: @mut SyntaxEnv,\n pub fn expand_block_elts(exts: SyntaxEnv, b: &Block, fld: @ast_fold) -> Block {\n     let block_info = get_block_info(exts);\n     let pending_renames = block_info.pending_renames;\n-    let mut rename_fld = renames_to_fold(pending_renames);\n+    let rename_fld = renames_to_fold(pending_renames);\n     let new_view_items = b.view_items.map(|x| fld.fold_view_item(x));\n     let mut new_stmts = ~[];\n     for x in b.stmts.iter() {\n@@ -1456,7 +1456,7 @@ impl CtxtFn for Marker {\n pub struct Repainter { ctxt : SyntaxContext }\n \n impl CtxtFn for Repainter {\n-    fn f(&self, ctxt : ast::SyntaxContext) -> ast::SyntaxContext {\n+    fn f(&self, _ctxt : ast::SyntaxContext) -> ast::SyntaxContext {\n         self.ctxt\n     }\n }"}, {"sha": "d03721910846b59e638aa0a3ad25a090ab49bb73", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dbf4e19ea5946723acc1495ac82ed73f784821dd", "patch": "@@ -17,10 +17,7 @@ use util::interner;\n \n use std::cast;\n use std::char;\n-use std::cmp::Equiv;\n use std::local_data;\n-use std::rand;\n-use std::rand::RngUtil;\n \n #[deriving(Clone, Encodable, Decodable, Eq, IterBytes)]\n pub enum binop {\n@@ -565,8 +562,8 @@ pub fn str_ptr_eq(a : @str, b : @str) -> bool {\n         let q : uint = cast::transmute(b);\n         let result = p == q;\n         // got to transmute them back, to make sure the ref count is correct:\n-        let junk1 : @str = cast::transmute(p);\n-        let junk2 : @str = cast::transmute(q);\n+        let _junk1 : @str = cast::transmute(p);\n+        let _junk2 : @str = cast::transmute(q);\n         result\n     }\n }"}, {"sha": "8871413a46d33fa51ce894fd522b10582626ebf3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4e19ea5946723acc1495ac82ed73f784821dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dbf4e19ea5946723acc1495ac82ed73f784821dd", "patch": "@@ -619,7 +619,8 @@ pub fn print_item(s: @ps, item: &ast::item) {\n         }\n         bclose(s, item.span);\n       }\n-      ast::item_mac(codemap::Spanned { node: ast::mac_invoc_tt(ref pth, ref tts, ctxt),\n+      // I think it's reasonable to hide the context here:\n+      ast::item_mac(codemap::Spanned { node: ast::mac_invoc_tt(ref pth, ref tts, _),\n                                    _}) => {\n         print_visibility(s, item.vis);\n         print_path(s, pth, false);\n@@ -1021,7 +1022,8 @@ pub fn print_if(s: @ps, test: &ast::Expr, blk: &ast::Block,\n \n pub fn print_mac(s: @ps, m: &ast::mac) {\n     match m.node {\n-      ast::mac_invoc_tt(ref pth, ref tts, ctxt) => {\n+      // I think it's reasonable to hide the ctxt here:\n+      ast::mac_invoc_tt(ref pth, ref tts, _) => {\n         print_path(s, pth, false);\n         word(s.s, \"!\");\n         popen(s);"}]}