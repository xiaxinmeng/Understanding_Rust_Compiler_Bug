{"sha": "091dc6e98a483c164735e9a0b9c5b3750a94a95f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWRjNmU5OGE0ODNjMTY0NzM1ZTlhMGI5YzViMzc1MGE5NGE5NWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-07T20:48:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-07T20:51:30Z"}, "message": "Purge the old `once_fns`, which are not coming back", "tree": {"sha": "79db3c0e120fbe1e02f710d2a7f2a881d83098c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79db3c0e120fbe1e02f710d2a7f2a881d83098c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091dc6e98a483c164735e9a0b9c5b3750a94a95f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091dc6e98a483c164735e9a0b9c5b3750a94a95f", "html_url": "https://github.com/rust-lang/rust/commit/091dc6e98a483c164735e9a0b9c5b3750a94a95f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091dc6e98a483c164735e9a0b9c5b3750a94a95f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "html_url": "https://github.com/rust-lang/rust/commit/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a"}], "stats": {"total": 178, "additions": 33, "deletions": 145}, "files": [{"sha": "c38fea9b3d58a2b9576ea5e8fcd249ed1b182eb8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=091dc6e98a483c164735e9a0b9c5b3750a94a95f", "patch": "@@ -38,7 +38,6 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"globs\", Active),\n     (\"macro_rules\", Active),\n     (\"struct_variant\", Active),\n-    (\"once_fns\", Active),\n     (\"asm\", Active),\n     (\"managed_boxes\", Removed),\n     (\"non_ascii_idents\", Active),\n@@ -307,11 +306,10 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n         match t.node {\n-            ast::TyClosure(ref closure) if closure.onceness == ast::Once => {\n-                self.gate_feature(\"once_fns\", t.span,\n-                                  \"once functions are \\\n-                                   experimental and likely to be removed\");\n-\n+            ast::TyClosure(ref closure) => {\n+                // this used to be blocked by a feature gate, but it should just\n+                // be plain impossible right now\n+                assert!(closure.onceness != ast::Once);\n             },\n             _ => {}\n         }"}, {"sha": "f501a5831d2ad533cfe630136806c6f25d596385", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=091dc6e98a483c164735e9a0b9c5b3750a94a95f", "patch": "@@ -503,42 +503,41 @@ declare_special_idents_and_keywords! {\n         (27,                         Mod,        \"mod\");\n         (28,                         Move,       \"move\");\n         (29,                         Mut,        \"mut\");\n-        (30,                         Once,       \"once\");\n-        (31,                         Pub,        \"pub\");\n-        (32,                         Ref,        \"ref\");\n-        (33,                         Return,     \"return\");\n+        (30,                         Pub,        \"pub\");\n+        (31,                         Ref,        \"ref\");\n+        (32,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n-        (34,                         Struct,     \"struct\");\n+        (33,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (35,                         True,       \"true\");\n-        (36,                         Trait,      \"trait\");\n-        (37,                         Type,       \"type\");\n-        (38,                         Unsafe,     \"unsafe\");\n-        (39,                         Use,        \"use\");\n-        (40,                         Virtual,    \"virtual\");\n-        (41,                         While,      \"while\");\n-        (42,                         Continue,   \"continue\");\n-        (43,                         Proc,       \"proc\");\n-        (44,                         Box,        \"box\");\n-        (45,                         Const,      \"const\");\n-        (46,                         Where,      \"where\");\n+        (34,                         True,       \"true\");\n+        (35,                         Trait,      \"trait\");\n+        (36,                         Type,       \"type\");\n+        (37,                         Unsafe,     \"unsafe\");\n+        (38,                         Use,        \"use\");\n+        (39,                         Virtual,    \"virtual\");\n+        (40,                         While,      \"while\");\n+        (41,                         Continue,   \"continue\");\n+        (42,                         Proc,       \"proc\");\n+        (43,                         Box,        \"box\");\n+        (44,                         Const,      \"const\");\n+        (45,                         Where,      \"where\");\n \n         'reserved:\n-        (47,                         Alignof,    \"alignof\");\n-        (48,                         Be,         \"be\");\n-        (49,                         Offsetof,   \"offsetof\");\n-        (50,                         Priv,       \"priv\");\n-        (51,                         Pure,       \"pure\");\n-        (52,                         Sizeof,     \"sizeof\");\n-        (53,                         Typeof,     \"typeof\");\n-        (54,                         Unsized,    \"unsized\");\n-        (55,                         Yield,      \"yield\");\n-        (56,                         Do,         \"do\");\n-        (57,                         Abstract,   \"abstract\");\n-        (58,                         Final,      \"final\");\n-        (59,                         Override,   \"override\");\n+        (46,                         Alignof,    \"alignof\");\n+        (47,                         Be,         \"be\");\n+        (48,                         Offsetof,   \"offsetof\");\n+        (49,                         Priv,       \"priv\");\n+        (50,                         Pure,       \"pure\");\n+        (51,                         Sizeof,     \"sizeof\");\n+        (52,                         Typeof,     \"typeof\");\n+        (53,                         Unsized,    \"unsized\");\n+        (54,                         Yield,      \"yield\");\n+        (55,                         Do,         \"do\");\n+        (56,                         Abstract,   \"abstract\");\n+        (57,                         Final,      \"final\");\n+        (58,                         Override,   \"override\");\n     }\n }\n "}, {"sha": "c1515a36bec6897a982445e5fbecee5ab4442952", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=091dc6e98a483c164735e9a0b9c5b3750a94a95f", "patch": "@@ -2663,12 +2663,10 @@ impl<'a> State<'a> {\n         } else if opt_sigil == Some('&') {\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_extern_opt_abi(opt_abi));\n-            try!(self.print_onceness(onceness));\n         } else {\n             assert!(opt_sigil.is_none());\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n-            try!(self.print_onceness(onceness));\n             try!(word(&mut self.s, \"fn\"));\n         }\n \n@@ -2987,13 +2985,6 @@ impl<'a> State<'a> {\n             ast::UnsafeFn => self.word_nbsp(\"unsafe\"),\n         }\n     }\n-\n-    pub fn print_onceness(&mut self, o: ast::Onceness) -> IoResult<()> {\n-        match o {\n-            ast::Once => self.word_nbsp(\"once\"),\n-            ast::Many => Ok(())\n-        }\n-    }\n }\n \n #[cfg(test)]"}, {"sha": "17968195280a10d1eed9fc9c0c67f77d5b8ede06", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing guarantees provided by once functions.\n-// This program would segfault if it were legal.\n-\n-#![feature(once_fns)]\n-use std::sync::Arc;\n-\n-fn foo(blk: once ||) {\n-    blk();\n-    blk(); //~ ERROR use of moved value\n-}\n-\n-fn main() {\n-    let x = Arc::new(true);\n-    foo(|| {\n-        assert!(*x);\n-        drop(x);\n-    })\n-}"}, {"sha": "3efebf6184406f06bf916688639b6274b87830d1", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing guarantees provided by once functions.\n-// This program would segfault if it were legal.\n-\n-use std::sync::Arc;\n-\n-fn foo(blk: ||) {\n-    blk();\n-    blk();\n-}\n-\n-fn main() {\n-    let x = Arc::new(true);\n-    foo(|| {\n-        assert!(*x);\n-        drop(x); //~ ERROR cannot move out of captured outer variable\n-    })\n-}"}, {"sha": "7594deda3b2d854a70442450f0ce2b475e6b4207", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(once_fns)]\n-fn main() {\n-    let f: once || = ||();\n-    let g: || = f;  //~ ERROR mismatched types\n-    let h: || = ||();\n-    let i: once || = h;  // ok\n-}"}, {"sha": "e24e809ed018a9416ade45f491318d0c3c34cbeb", "filename": "src/test/run-pass/once-move-out-on-heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dc6e98a483c164735e9a0b9c5b3750a94a95f/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs?ref=091dc6e98a483c164735e9a0b9c5b3750a94a95f", "patch": "@@ -11,7 +11,6 @@\n // Testing guarantees provided by once functions.\n \n \n-#![feature(once_fns)]\n use std::sync::Arc;\n \n fn foo(blk: proc()) {"}, {"sha": "0419fc54add15b6e14a07ae4320308ed34435c2b", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=3112771001e0e7e9b068ba0bb0ca45c3e8f0f72a", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing guarantees provided by once functions.\n-\n-\n-#![feature(once_fns)]\n-use std::sync::Arc;\n-\n-fn foo(blk: once ||) {\n-    blk();\n-}\n-\n-pub fn main() {\n-    let x = Arc::new(true);\n-    foo(|| {\n-        assert!(*x);\n-        drop(x);\n-    })\n-}"}]}