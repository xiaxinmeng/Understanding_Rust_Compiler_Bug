{"sha": "2db927d8d82260759e4aaa183dbebd0adbb00177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjkyN2Q4ZDgyMjYwNzU5ZTRhYWExODNkYmViZDBhZGJiMDAxNzc=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-04T04:24:20Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-10T12:54:44Z"}, "message": "Add #[default_method_body_is_const]", "tree": {"sha": "04bbc46ca5e71ad46526c929b471e00aeb431321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04bbc46ca5e71ad46526c929b471e00aeb431321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db927d8d82260759e4aaa183dbebd0adbb00177", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDpmJQACgkQZSV3NIU3\nbZJiRhAAneUOWuAcn60dgEwIFFv3eWxbmouTYtDdd9fPmtYhRWLtjIcEH8wYHhHr\nv+rJtBBD3hdclTQQrPT7MYeZnnGyece5HTAM+O5GAPvfBtGNnueghi/hAM69IcMw\n9MuPVM5clcLy+Vzfh10jKmBZys58LEtVdivwWS0AfVFGZOZc6OVsU3VAQl1z5mzy\nVbpBBgmqRdqmedWqOufqi90cMrSDD8BWWQufRteJub/5LdJN5s1FSVSYITGqK+7G\nJ0k+1Fo8F2pRpbuCJZ2zC9At2sKOv6ddnmSee07fq+xKxkEtkprzCjSMcEXBQnR0\nsoiRCxVZNc8WnXyX7ej9toS95PeRH0bK9TujdLDtEpO34t3XGBtzpDw2tNtqZfo9\nrAgVAT+A1NQnab+BPNkpoMM+S0Cx991owVvsnkgbyITVsdTznfb57jUIN75K2rbA\nRFCXlu4UYwnFP8okwdKqnl+aRg+k5Ef8xBDI3SXWiQO/BpU1+BK2rzNxrAu/izqf\nmSZkNGH0225lWMOrx3R0kOgC06XNLABV713TmFKGOSWzCuf46ldJctYzU1WxQRx0\n+zwEK9E66CYaQvJLc1mQr2uED2N51YFBJ+eUpVGUSy9KQw/BB9JPvmxHj1FORwtq\niLkNQjKdc2sEkeVDulvJZ/shm3mHz1oW/yGE6Aoy6a0wLUNUz+g=\n=qJ6l\n-----END PGP SIGNATURE-----", "payload": "tree 04bbc46ca5e71ad46526c929b471e00aeb431321\nparent a84d1b21aea9863f0fc5f436b4982d145dade646\nauthor Deadbeef <ent3rm4n@gmail.com> 1625372660 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1625921684 +0800\n\nAdd #[default_method_body_is_const]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db927d8d82260759e4aaa183dbebd0adbb00177", "html_url": "https://github.com/rust-lang/rust/commit/2db927d8d82260759e4aaa183dbebd0adbb00177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db927d8d82260759e4aaa183dbebd0adbb00177/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84d1b21aea9863f0fc5f436b4982d145dade646", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84d1b21aea9863f0fc5f436b4982d145dade646", "html_url": "https://github.com/rust-lang/rust/commit/a84d1b21aea9863f0fc5f436b4982d145dade646"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "dbdc14dced8c06ee9d81bb0e33c80856279fc93a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=2db927d8d82260759e4aaa183dbebd0adbb00177", "patch": "@@ -470,6 +470,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_legacy_const_generics, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n+    gated!(\n+        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n+        \"the `#[default_method_body_is_const]` attribute marks a default method of a trait \\\n+        as const, so it does not need to be duplicated by a const impl.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:"}, {"sha": "eaeec19eb31482475932a648965b5a200a21edf8", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=2db927d8d82260759e4aaa183dbebd0adbb00177", "patch": "@@ -8,6 +8,7 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -85,34 +86,46 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n                     let did = imp.of_trait.as_ref()?.trait_def_id()?;\n-                    let trait_fn_cnt = self\n-                        .tcx\n-                        .associated_item_def_ids(did)\n-                        .iter()\n-                        .filter(|did| {\n-                            matches!(\n-                                self.tcx.associated_item(**did),\n-                                ty::AssocItem { kind: ty::AssocKind::Fn, .. }\n-                            )\n-                        })\n-                        .count();\n+                    let mut to_implement = FxHashSet::default();\n+\n+                    for did in self.tcx.associated_item_def_ids(did) {\n+                        if let ty::AssocItem {\n+                            kind: ty::AssocKind::Fn, ident, defaultness, ..\n+                        } = self.tcx.associated_item(*did)\n+                        {\n+                            match (\n+                                self.tcx.has_attr(*did, sym::default_method_body_is_const),\n+                                defaultness.has_value(),\n+                            ) {\n+                                (false, true) => {\n+                                    to_implement.insert(ident);\n+                                }\n+                                // ignore functions that do not have default bodies\n+                                // if those are unimplemented it will be catched by\n+                                // typeck.\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n \n-                    let impl_fn_cnt = imp\n+                    for it in imp\n                         .items\n                         .iter()\n                         .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n-                        .count();\n+                    {\n+                        to_implement.remove(&it.ident);\n+                    }\n \n-                    // number of trait functions unequal to functions in impl,\n-                    // meaning that one or more provided/default functions of the\n-                    // trait are used.\n-                    if trait_fn_cnt != impl_fn_cnt {\n+                    // all nonconst trait functions (not marked with #[default_method_body_is_const])\n+                    // must be implemented\n+                    if !to_implement.is_empty() {\n                         self.tcx\n                             .sess\n                             .struct_span_err(\n                                 item.span,\n-                                \"const trait implementations may not use default functions\",\n+                                \"const trait implementations may not use non-const default functions\",\n                             )\n+                            .note(&format!(\"`{}` not implemented\", to_implement.into_iter().map(|id| id.to_string()).collect::<Vec<_>>().join(\"`, `\")))\n                             .emit();\n                     }\n                 }"}, {"sha": "f7a11876f7de450a3e5ee8260b6c7ae1c10dccef", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db927d8d82260759e4aaa183dbebd0adbb00177/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2db927d8d82260759e4aaa183dbebd0adbb00177", "patch": "@@ -462,6 +462,7 @@ symbols! {\n         decode,\n         default_alloc_error_handler,\n         default_lib_allocator,\n+        default_method_body_is_const,\n         default_type_parameter_fallback,\n         default_type_params,\n         delay_span_bug_from_inside_query,"}, {"sha": "def7c34b4e50e2e4cf6435bad316f251e0802ff2", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2db927d8d82260759e4aaa183dbebd0adbb00177/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db927d8d82260759e4aaa183dbebd0adbb00177/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs?ref=2db927d8d82260759e4aaa183dbebd0adbb00177", "patch": "@@ -8,13 +8,31 @@ trait Tr {\n         println!(\"lul\");\n         self.req();\n     }\n+\n+    #[default_method_body_is_const]\n+    fn default() {}\n }\n \n struct S;\n \n impl const Tr for S {\n     fn req(&self) {}\n+} //~^^ ERROR const trait implementations may not use non-const default functions\n+\n+impl const Tr for u8 {\n+    fn req(&self) {}\n+    fn prov(&self) {}\n }\n-//~^^^ ERROR const trait implementations may not use default functions\n+\n+impl const Tr for u16 {\n+    fn prov(&self) {}\n+    fn default() {}\n+} //~^^^ ERROR not all trait items implemented\n+\n+\n+impl const Tr for u32 {\n+    fn req(&self) {}\n+    fn default() {}\n+} //~^^^ ERROR const trait implementations may not use non-const default functions\n \n fn main() {}"}, {"sha": "eb7f899b4dee212bed27ba19d81da55fb4c2ba78", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2db927d8d82260759e4aaa183dbebd0adbb00177/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2db927d8d82260759e4aaa183dbebd0adbb00177/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr?ref=2db927d8d82260759e4aaa183dbebd0adbb00177", "patch": "@@ -1,10 +1,33 @@\n-error: const trait implementations may not use default functions\n-  --> $DIR/impl-with-default-fn.rs:15:1\n+error: const trait implementations may not use non-const default functions\n+  --> $DIR/impl-with-default-fn.rs:18:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n LL | | }\n    | |_^\n+   |\n+   = note: `prov` not implemented\n+\n+error: const trait implementations may not use non-const default functions\n+  --> $DIR/impl-with-default-fn.rs:33:1\n+   |\n+LL | / impl const Tr for u32 {\n+LL | |     fn req(&self) {}\n+LL | |     fn default() {}\n+LL | | }\n+   | |_^\n+   |\n+   = note: `prov` not implemented\n+\n+error[E0046]: not all trait items implemented, missing: `req`\n+  --> $DIR/impl-with-default-fn.rs:27:1\n+   |\n+LL |     fn req(&self);\n+   |     -------------- `req` from trait\n+...\n+LL | impl const Tr for u16 {\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `req` in implementation\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0046`."}]}