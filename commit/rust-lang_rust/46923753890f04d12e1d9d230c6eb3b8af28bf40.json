{"sha": "46923753890f04d12e1d9d230c6eb3b8af28bf40", "node_id": "C_kwDOAAsO6NoAKDQ2OTIzNzUzODkwZjA0ZDEyZTFkOWQyMzBjNmViM2I4YWYyOGJmNDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T01:41:13Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T02:45:14Z"}, "message": "Don't print newlines in APITs", "tree": {"sha": "14a1b1169e530d31655949562b7ff4100e25f7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a1b1169e530d31655949562b7ff4100e25f7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46923753890f04d12e1d9d230c6eb3b8af28bf40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46923753890f04d12e1d9d230c6eb3b8af28bf40", "html_url": "https://github.com/rust-lang/rust/commit/46923753890f04d12e1d9d230c6eb3b8af28bf40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46923753890f04d12e1d9d230c6eb3b8af28bf40/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "096309e6dc4378e175e524e963332d1a3830ed63", "url": "https://api.github.com/repos/rust-lang/rust/commits/096309e6dc4378e175e524e963332d1a3830ed63", "html_url": "https://github.com/rust-lang/rust/commit/096309e6dc4378e175e524e963332d1a3830ed63"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "8d4f96639efbd0d64a6553311d72b385bf900a88", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46923753890f04d12e1d9d230c6eb3b8af28bf40/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46923753890f04d12e1d9d230c6eb3b8af28bf40/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=46923753890f04d12e1d9d230c6eb3b8af28bf40", "patch": "@@ -1425,7 +1425,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             DefPathData::ImplTrait,\n                             span,\n                         );\n-                        let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n+\n+                        // HACK: pprust breaks strings with newlines when the type\n+                        // gets too long. We don't want these to show up in compiler\n+                        // output or built artifacts, so replace them here...\n+                        // Perhaps we should instead format APITs more robustly.\n+                        let ident = Ident::from_str_and_span(\n+                            &pprust::ty_to_string(t).replace('\\n', \" \"),\n+                            span,\n+                        );\n+\n                         let (param, bounds, path) = self.lower_universal_param_and_bounds(\n                             *def_node_id,\n                             span,"}, {"sha": "8ef9281c9d3d76d0df0b5e006c1f4355a406bfdc", "filename": "tests/ui/impl-trait/arg-position-impl-trait-too-long.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46923753890f04d12e1d9d230c6eb3b8af28bf40/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46923753890f04d12e1d9d230c6eb3b8af28bf40/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.rs?ref=46923753890f04d12e1d9d230c6eb3b8af28bf40", "patch": "@@ -0,0 +1,22 @@\n+struct Header;\n+struct EntryMetadata;\n+struct Entry<A, B>(A, B);\n+\n+trait Tr {\n+    type EncodedKey;\n+    type EncodedValue;\n+}\n+\n+fn test<C: Tr, R>(\n+    // This APIT is long, however we shouldn't render the type name with a newline in it.\n+    y: impl FnOnce(\n+        &mut Header,\n+        &mut [EntryMetadata],\n+        &mut [Entry<C::EncodedKey, C::EncodedValue>]\n+    ) -> R,\n+) {\n+    let () = y;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "40446a3d339a7222ea8ae2c6bb5c2f42768a7995", "filename": "tests/ui/impl-trait/arg-position-impl-trait-too-long.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46923753890f04d12e1d9d230c6eb3b8af28bf40/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46923753890f04d12e1d9d230c6eb3b8af28bf40/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Farg-position-impl-trait-too-long.stderr?ref=46923753890f04d12e1d9d230c6eb3b8af28bf40", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/arg-position-impl-trait-too-long.rs:18:9\n+   |\n+LL |       y: impl FnOnce(\n+   |  ________-\n+LL | |         &mut Header,\n+LL | |         &mut [EntryMetadata],\n+LL | |         &mut [Entry<C::EncodedKey, C::EncodedValue>]\n+LL | |     ) -> R,\n+   | |__________- this type parameter\n+LL |   ) {\n+LL |       let () = y;\n+   |           ^^   - this expression has type `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`\n+   |           |\n+   |           expected type parameter `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`, found `()`\n+   |\n+   = note: expected type parameter `impl FnOnce(&mut Header, &mut [EntryMetadata], &mut [Entry<C::EncodedKey, C::EncodedValue>]) -> R`\n+                   found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}