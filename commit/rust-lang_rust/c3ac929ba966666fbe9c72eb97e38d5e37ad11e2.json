{"sha": "c3ac929ba966666fbe9c72eb97e38d5e37ad11e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWM5MjliYTk2NjY2NmZiZTljNzJlYjk3ZTM4ZDVlMzdhZDExZTI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-19T10:06:15Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-19T14:23:52Z"}, "message": "Add a Drain iterator to VecMap", "tree": {"sha": "d4fc1d365d9735e0aa756f163279e5cc13fcf71b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fc1d365d9735e0aa756f163279e5cc13fcf71b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2", "html_url": "https://github.com/rust-lang/rust/commit/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2366dee8e9cb41d963900c8d5128f810a87fc6bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2366dee8e9cb41d963900c8d5128f810a87fc6bb", "html_url": "https://github.com/rust-lang/rust/commit/2366dee8e9cb41d963900c8d5128f810a87fc6bb"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "93f3e192d6d5ecd38d01fd796c25e89ae2836299", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ac929ba966666fbe9c72eb97e38d5e37ad11e2/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c3ac929ba966666fbe9c72eb97e38d5e37ad11e2", "patch": "@@ -186,7 +186,7 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all keys in ascending order by the keys.\n+    /// Returns an iterator visiting all keys in ascending order of the keys.\n     /// The iterator's element type is `uint`.\n     #[stable]\n     pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n@@ -196,7 +196,7 @@ impl<V> VecMap<V> {\n         Keys { iter: self.iter().map(first) }\n     }\n \n-    /// Returns an iterator visiting all values in ascending order by the keys.\n+    /// Returns an iterator visiting all values in ascending order of the keys.\n     /// The iterator's element type is `&'r V`.\n     #[stable]\n     pub fn values<'r>(&'r self) -> Values<'r, V> {\n@@ -206,7 +206,7 @@ impl<V> VecMap<V> {\n         Values { iter: self.iter().map(second) }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by the keys.\n+    /// Returns an iterator visiting all key-value pairs in ascending order of the keys.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n     /// # Examples\n@@ -233,7 +233,7 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by the keys,\n+    /// Returns an iterator visiting all key-value pairs in ascending order of the keys,\n     /// with mutable references to the values.\n     /// The iterator's element type is `(uint, &'r mut V)`.\n     ///\n@@ -264,7 +264,7 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by\n+    /// Returns an iterator visiting all key-value pairs in ascending order of\n     /// the keys, consuming the original `VecMap`.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n@@ -278,7 +278,6 @@ impl<V> VecMap<V> {\n     /// map.insert(3, \"c\");\n     /// map.insert(2, \"b\");\n     ///\n-    /// // Not possible with .iter()\n     /// let vec: Vec<(uint, &str)> = map.into_iter().collect();\n     ///\n     /// assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n@@ -293,6 +292,34 @@ impl<V> VecMap<V> {\n         IntoIter { iter: self.v.into_iter().enumerate().filter_map(filter) }\n     }\n \n+    /// Returns an iterator visiting all key-value pairs in ascending order of\n+    /// the keys, emptying (but not consuming) the original `VecMap`.\n+    /// The iterator's element type is `(uint, &'r V)`. Keeps the allocated memory for reuse.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecMap;\n+    ///\n+    /// let mut map = VecMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(3, \"c\");\n+    /// map.insert(2, \"b\");\n+    ///\n+    /// let vec: Vec<(uint, &str)> = map.drain().collect();\n+    ///\n+    /// assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n+    /// ```\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn drain<'a>(&'a mut self) -> Drain<'a, V> {\n+        fn filter<A>((i, v): (uint, Option<A>)) -> Option<(uint, A)> {\n+            v.map(|v| (i, v))\n+        }\n+        let filter: fn((uint, Option<V>)) -> Option<(uint, V)> = filter; // coerce to fn ptr\n+\n+        Drain { iter: self.v.drain().enumerate().filter_map(filter) }\n+    }\n+\n     /// Return the number of elements in the map.\n     ///\n     /// # Examples\n@@ -672,6 +699,28 @@ pub struct IntoIter<V> {\n     fn((uint, Option<V>)) -> Option<(uint, V)>>\n }\n \n+#[unstable]\n+pub struct Drain<'a, V> {\n+    iter: FilterMap<\n+    (uint, Option<V>),\n+    (uint, V),\n+    Enumerate<vec::Drain<'a, Option<V>>>,\n+    fn((uint, Option<V>)) -> Option<(uint, V)>>\n+}\n+\n+#[unstable]\n+impl<'a, V> Iterator for Drain<'a, V> {\n+    type Item = (uint, V);\n+\n+    fn next(&mut self) -> Option<(uint, V)> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+\n+#[unstable]\n+impl<'a, V> DoubleEndedIterator for Drain<'a, V> {\n+    fn next_back(&mut self) -> Option<(uint, V)> { self.iter.next_back() }\n+}\n+\n #[stable]\n impl<'a, V> Iterator for Keys<'a, V> {\n     type Item = uint;"}]}