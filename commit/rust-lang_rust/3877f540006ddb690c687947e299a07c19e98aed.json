{"sha": "3877f540006ddb690c687947e299a07c19e98aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzdmNTQwMDA2ZGRiNjkwYzY4Nzk0N2UyOTlhMDdjMTllOThhZWQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T15:12:51Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:57:55Z"}, "message": "Declare `body_owner` and `subject_def_id` as `LocalDefId` in `RegionCtxt`", "tree": {"sha": "5bb7fa5b267a095712f00b0f85248fa8f91a4e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb7fa5b267a095712f00b0f85248fa8f91a4e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3877f540006ddb690c687947e299a07c19e98aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3877f540006ddb690c687947e299a07c19e98aed", "html_url": "https://github.com/rust-lang/rust/commit/3877f540006ddb690c687947e299a07c19e98aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3877f540006ddb690c687947e299a07c19e98aed/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "html_url": "https://github.com/rust-lang/rust/commit/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "53d6ec96bd251be7a43341d0348634e029447031", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3877f540006ddb690c687947e299a07c19e98aed/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3877f540006ddb690c687947e299a07c19e98aed/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=3877f540006ddb690c687947e299a07c19e98aed", "patch": "@@ -77,7 +77,7 @@ use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n@@ -109,7 +109,7 @@ macro_rules! ignore_err {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {\n-        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n+        let subject = self.tcx.hir().body_owner_def_id(body.id());\n         let id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(id), id, Subject(subject), self.param_env);\n@@ -135,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self,\n             RepeatingScope(item_id),\n             item_id,\n-            Subject(subject.to_def_id()),\n+            Subject(subject),\n             self.param_env,\n         );\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);\n@@ -154,7 +154,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// constraints to add.\n     pub fn regionck_fn(&self, fn_id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n+        let subject = self.tcx.hir().body_owner_def_id(body.id());\n         let hir_id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(hir_id), hir_id, Subject(subject), self.param_env);\n@@ -180,7 +180,7 @@ pub struct RegionCtxt<'a, 'tcx> {\n \n     // id of innermost fn body id\n     body_id: hir::HirId,\n-    body_owner: DefId,\n+    body_owner: LocalDefId,\n \n     // call_site scope of innermost fn\n     call_site_scope: Option<region::Scope>,\n@@ -189,7 +189,7 @@ pub struct RegionCtxt<'a, 'tcx> {\n     repeating_scope: hir::HirId,\n \n     // id of AST node being analyzed (the subject of the analysis).\n-    subject_def_id: DefId,\n+    subject_def_id: LocalDefId,\n }\n \n impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {\n@@ -200,7 +200,7 @@ impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {\n }\n \n pub struct RepeatingScope(hir::HirId);\n-pub struct Subject(DefId);\n+pub struct Subject(LocalDefId);\n \n impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     pub fn new(\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         let body_id = body.id();\n         self.body_id = body_id.hir_id;\n-        self.body_owner = self.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n \n         let call_site =\n             region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };\n@@ -353,7 +353,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         );\n \n         self.fcx.resolve_regions_and_report_errors(\n-            self.subject_def_id,\n+            self.subject_def_id.to_def_id(),\n             &self.region_scope_tree,\n             &self.outlives_environment,\n             mode,\n@@ -774,7 +774,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         f(mc::MemCategorizationContext::new(\n             &self.infcx,\n             self.outlives_environment.param_env,\n-            self.body_owner.expect_local(),\n+            self.body_owner,\n             &self.tables.borrow(),\n         ))\n     }"}]}