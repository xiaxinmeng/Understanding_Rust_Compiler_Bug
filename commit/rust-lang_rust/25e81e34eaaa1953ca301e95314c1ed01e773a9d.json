{"sha": "25e81e34eaaa1953ca301e95314c1ed01e773a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTgxZTM0ZWFhYTE5NTNjYTMwMWU5NTMxNGMxZWQwMWU3NzNhOWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-05T04:11:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:40:31Z"}, "message": "rewrite task tests", "tree": {"sha": "c8da5e9478d874344dc2c836d2c88dd2b1ea045b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8da5e9478d874344dc2c836d2c88dd2b1ea045b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e81e34eaaa1953ca301e95314c1ed01e773a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e81e34eaaa1953ca301e95314c1ed01e773a9d", "html_url": "https://github.com/rust-lang/rust/commit/25e81e34eaaa1953ca301e95314c1ed01e773a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e81e34eaaa1953ca301e95314c1ed01e773a9d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f5109cde838e66d629bf05c804ad1ca9b06c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f5109cde838e66d629bf05c804ad1ca9b06c42", "html_url": "https://github.com/rust-lang/rust/commit/98f5109cde838e66d629bf05c804ad1ca9b06c42"}], "stats": {"total": 122, "additions": 55, "deletions": 67}, "files": [{"sha": "03acdaa91e0381ba6a6304a56f7cdf3ff28b017c", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -98,7 +98,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n         DLOG(sched, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    root_task->start((spawn_fn)main_fn, (uintptr_t)args->args);\n+    root_task->start((spawn_fn)main_fn, NULL, args->args);\n     root_task->deref();\n     root_task = NULL;\n "}, {"sha": "4f951a7faf0af67daf40eac0bf29ba8829f27074", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -421,15 +421,15 @@ rust_get_task() {\n }\n \n struct fn_env_pair {\n-    intptr_t f;\n-    intptr_t env;\n+    spawn_fn f;\n+    rust_boxed_closure *env;\n };\n \n extern \"C\" CDECL void\n start_task(rust_task_id id, fn_env_pair *f) {\n     rust_task *task = rust_scheduler::get_task();\n     rust_task *target = task->kernel->get_task_by_id(id);\n-    target->start((spawn_fn)f->f, f->env);\n+    target->start(f->f, f->env, NULL);\n     target->deref();\n }\n "}, {"sha": "cade11e372d9271b7ba3e21ec79fd7e1d28322a6", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -292,18 +292,9 @@ rust_task::~rust_task()\n \n struct spawn_args {\n     rust_task *task;\n-    uintptr_t envptr;\n     spawn_fn f;\n-};\n-\n-struct rust_closure {\n-    const type_desc *td;\n-    // ... see trans_closure.rs for full description ...\n-};\n-\n-struct rust_boxed_closure {\n-    intptr_t ref_count;\n-    rust_closure closure;\n+    rust_boxed_closure *envptr;\n+    void *argptr;\n };\n \n struct cleanup_args {\n@@ -319,14 +310,6 @@ cleanup_task(cleanup_args *args) {\n \n     cc::do_cc(task);\n \n-    rust_boxed_closure* boxed_env = (rust_boxed_closure*)a->envptr;\n-    if(boxed_env) {\n-        // free the environment.\n-        rust_closure *env = &boxed_env->closure;\n-        env->td->drop_glue(NULL, NULL, &env->td, env);\n-        env->td->free_glue(NULL, NULL, &env->td, env);\n-    }\n-\n     task->die();\n \n     if (task->killed && !failed) {\n@@ -345,6 +328,8 @@ cleanup_task(cleanup_args *args) {\n     }\n }\n \n+extern \"C\" void upcall_shared_free(void* ptr);\n+\n // This runs on the Rust stack\n extern \"C\" CDECL\n void task_start_wrapper(spawn_args *a)\n@@ -355,27 +340,36 @@ void task_start_wrapper(spawn_args *a)\n     try {\n         // The first argument is the return pointer; as the task fn \n         // must have void return type, we can safely pass 0.\n-        a->f(0, a->envptr);\n+        a->f(0, a->envptr, a->argptr);\n     } catch (rust_task *ex) {\n         A(task->sched, ex == task,\n           \"Expected this task to be thrown for unwinding\");\n         failed = true;\n     }\n \n-    cleanup_args ca = {a, failed};\n+    rust_boxed_closure* boxed_env = (rust_boxed_closure*)a->envptr;\n+    if(boxed_env) {\n+        // free the environment.\n+        const type_desc *td = boxed_env->closure.td;\n+        td->drop_glue(NULL, NULL, td->first_param, &boxed_env->closure);\n+        upcall_shared_free(boxed_env);\n+    }\n \n     // The cleanup work needs lots of stack\n+    cleanup_args ca = {a, failed};\n     task->sched->c_context.call_shim_on_c_stack(&ca, (void*)cleanup_task);\n \n     task->ctx.next->swap(task->ctx);\n }\n \n void\n rust_task::start(spawn_fn spawnee_fn,\n-                 uintptr_t env)\n+                 rust_boxed_closure *envptr,\n+                 void *argptr)\n {\n     LOG(this, task, \"starting task from fn 0x%\" PRIxPTR\n-        \" with env 0x%\" PRIxPTR, spawnee_fn, env);\n+        \" with env 0x%\" PRIxPTR \" and arg 0x%\" PRIxPTR,\n+        spawnee_fn, envptr, argptr);\n \n     I(sched, stk->data != NULL);\n \n@@ -386,7 +380,8 @@ rust_task::start(spawn_fn spawnee_fn,\n     spawn_args *a = (spawn_args *)sp;\n \n     a->task = this;\n-    a->envptr = env;\n+    a->envptr = envptr;\n+    a->argptr = argptr;\n     a->f = spawnee_fn;\n \n     ctx.call((void *)task_start_wrapper, a, sp);"}, {"sha": "6be28f41574c356c18dee2cf2ffaaef99ff048f8", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -21,7 +21,17 @@ struct chan_handle {\n     rust_port_id port;\n };\n \n-typedef void (*CDECL spawn_fn)(uintptr_t, uintptr_t);\n+struct rust_closure {\n+    const type_desc *td;\n+    // ... see trans_closure.rs for full description ...\n+};\n+\n+struct rust_boxed_closure {\n+    intptr_t ref_count;\n+    rust_closure closure;\n+};\n+\n+typedef void (*CDECL spawn_fn)(void*, rust_boxed_closure*, void *);\n \n struct rust_box;\n \n@@ -135,7 +145,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     ~rust_task();\n \n     void start(spawn_fn spawnee_fn,\n-               uintptr_t args);\n+               rust_boxed_closure *env,\n+               void *args);\n     void start();\n     bool running();\n     bool blocked();"}, {"sha": "7bfa06fdc99477c79e6473fac1c96ada45a740f9", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -39,15 +39,15 @@ rust_domain_test::run() {\n     return true;\n }\n \n-void task_entry(uintptr_t retptr, uintptr_t env) {\n+void task_entry(void *, rust_boxed_closure *, void *) {\n     printf(\"task entry\\n\");\n }\n \n void\n rust_task_test::worker::run() {\n     rust_task_id root_id = kernel->create_task(NULL, \"main\");\n     rust_task *root_task = kernel->get_task_by_id(root_id);\n-    root_task->start(&task_entry, (uintptr_t)NULL);\n+    root_task->start(&task_entry, NULL, NULL);\n     root_task->sched->start_main_loop();\n }\n "}, {"sha": "500189a0bc6f6818c239345036b6838b1afe0a86", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e81e34eaaa1953ca301e95314c1ed01e773a9d/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=25e81e34eaaa1953ca301e95314c1ed01e773a9d", "patch": "@@ -11,33 +11,29 @@ fn test_sleep() { task::sleep(1000000u); }\n #[test]\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_unsupervise() {\n-    fn f(&&_i: ()) { task::unsupervise(); fail; }\n-    task::spawn((), f);\n+    fn f() { task::unsupervise(); fail; }\n+    task::spawn {|| f};\n }\n \n #[test]\n fn test_lib_spawn() {\n-    fn foo(&&_i: ()) { #error(\"Hello, World!\"); }\n-    task::spawn((), foo);\n+    fn foo() { #error(\"Hello, World!\"); }\n+    task::spawn {|| foo};\n }\n \n #[test]\n fn test_lib_spawn2() {\n-    fn foo(&&x: int) { assert (x == 42); }\n-    task::spawn(42, foo);\n+    fn foo(x: int) { assert (x == 42); }\n+    task::spawn {|| foo(42);};\n }\n \n #[test]\n fn test_join_chan() {\n-    fn winner(&&_i: ()) { }\n+    fn winner() { }\n \n-    let p = comm::port();\n-    task::spawn_notify((), winner, comm::chan(p));\n-    let s = comm::recv(p);\n-    #error(\"received task status message\");\n-    log(error, s);\n-    alt s {\n-      task::exit(_, task::tr_success.) {/* yay! */ }\n+    let t = task::spawn_joinable {|| winner();};\n+    alt task::join(t) {\n+      task::tr_success. {/* yay! */ }\n       _ { fail \"invalid task status received\" }\n     }\n }\n@@ -46,32 +42,18 @@ fn test_join_chan() {\n #[test]\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_join_chan_fail() {\n-    fn failer(&&_i: ()) { task::unsupervise(); fail }\n+    fn failer() { task::unsupervise(); fail }\n \n-    let p = comm::port();\n-    task::spawn_notify((), failer, comm::chan(p));\n-    let s = comm::recv(p);\n-    #error(\"received task status message\");\n-    log(error, s);\n-    alt s {\n-      task::exit(_, task::tr_failure.) {/* yay! */ }\n+    let t = task::spawn_joinable {|| failer();};\n+    alt task::join(t) {\n+      task::tr_failure. {/* yay! */ }\n       _ { fail \"invalid task status received\" }\n     }\n }\n \n #[test]\n-fn test_join_convenient() {\n-    fn winner(&&_i: ()) { }\n-    let handle = task::spawn_joinable((), winner);\n-    assert (task::tr_success == task::join(handle));\n-}\n-\n-#[test]\n-#[ignore]\n fn spawn_polymorphic() {\n-    // FIXME #1038: Can't spawn palymorphic functions\n-    /*fn foo<T: send>(x: T) { log(error, x); }\n-\n-    task::spawn(true, foo);\n-    task::spawn(42, foo);*/\n+    fn foo<send T>(x: T) { log(error, x); }\n+    task::spawn {|| foo(true);}\n+    task::spawn {|| foo(42);}\n }"}]}