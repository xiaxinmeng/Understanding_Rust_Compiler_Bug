{"sha": "ba2ef58ae6c126ec0b87b307d45fef2da127be22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmVmNThhZTZjMTI2ZWMwYjg3YjMwN2Q0NWZlZjJkYTEyN2JlMjI=", "commit": {"author": {"name": "matthewjasper", "email": "mjjasper1@gmail.com", "date": "2020-06-16T17:27:40Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-17T18:46:15Z"}, "message": "Unify region variables when projecting associated types\n\nThis is required to avoid cycles when evaluating auto trait\npredicates.", "tree": {"sha": "1af52c4955daf2ea82f05795619c56fe60c7ef3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af52c4955daf2ea82f05795619c56fe60c7ef3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2ef58ae6c126ec0b87b307d45fef2da127be22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2ef58ae6c126ec0b87b307d45fef2da127be22", "html_url": "https://github.com/rust-lang/rust/commit/ba2ef58ae6c126ec0b87b307d45fef2da127be22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2ef58ae6c126ec0b87b307d45fef2da127be22/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435f97cec1f0d7de95a0b80e95f295ab444b2fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/435f97cec1f0d7de95a0b80e95f295ab444b2fce", "html_url": "https://github.com/rust-lang/rust/commit/435f97cec1f0d7de95a0b80e95f295ab444b2fce"}], "stats": {"total": 168, "additions": 133, "deletions": 35}, "files": [{"sha": "8695b9616ee5da603eb13745a3a642fdeadd6c7e", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -314,18 +314,25 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             }\n \n             ty::ReVar(vid) => {\n-                let r = self\n+                let resolved_vid = self\n                     .infcx\n                     .unwrap()\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(self.tcx, vid);\n+                    .opportunistic_resolve_var(vid);\n                 debug!(\n                     \"canonical: region var found with vid {:?}, \\\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n+                // micro-optimize -- avoid an interner look-up if the vid\n+                // hasn't changed.\n+                let r = if vid == resolved_vid {\n+                    r\n+                } else {\n+                    self.tcx.mk_region(ty::ReVar(resolved_vid))\n+                };\n                 self.canonicalize_region_mode.canonicalize_free_region(self, r)\n             }\n "}, {"sha": "90d61a78f9b9996e5124a18d5c6a645b236371ac", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -50,10 +50,10 @@ pub struct RegionConstraintStorage<'tcx> {\n     /// R1 <= R2 and R2 <= R1 and (b) we unify the two regions in this\n     /// table. You can then call `opportunistic_resolve_var` early\n     /// which will map R1 and R2 to some common region (i.e., either\n-    /// R1 or R2). This is important when dropck and other such code\n-    /// is iterating to a fixed point, because otherwise we sometimes\n-    /// would wind up with a fresh stream of region variables that\n-    /// have been equated but appear distinct.\n+    /// R1 or R2). This is important when fulfillment, dropck and other such\n+    /// code is iterating to a fixed point, because otherwise we sometimes\n+    /// would wind up with a fresh stream of region variables that have been\n+    /// equated but appear distinct.\n     pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n \n     /// a flag set to true when we perform any unifications; this is used\n@@ -714,13 +714,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        rid: RegionVid,\n-    ) -> ty::Region<'tcx> {\n-        let vid = self.unification_table().probe_value(rid).min_vid;\n-        tcx.mk_region(ty::ReVar(vid))\n+    pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n+        self.unification_table().probe_value(rid).min_vid\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "bda38301f1cc9643f890f829426181d0d7852994", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -46,51 +46,56 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-/// The opportunistic type and region resolver is similar to the\n-/// opportunistic type resolver, but also opportunistically resolves\n-/// regions. It is useful for canonicalization.\n-pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+/// The opportunistic region resolver opportunistically resolves regions\n+/// variables to the variable with the least variable id. It is used when\n+/// normlizing projections to avoid hitting the recursion limit by creating\n+/// many versions of a predicate for types that in the end have to unify.\n+///\n+/// If you want to resolve type and const variables as well, call\n+/// [InferCtxt::resolve_vars_if_possible] first.\n+pub struct OpportunisticRegionResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n-        OpportunisticTypeAndRegionResolver { infcx }\n+        OpportunisticRegionResolver { infcx }\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer() {\n+        if !t.has_infer_regions() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n-            let t0 = self.infcx.shallow_resolve(t);\n-            t0.super_fold_with(self)\n+            t.super_fold_with(self)\n         }\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(rid) => self\n-                .infcx\n-                .inner\n-                .borrow_mut()\n-                .unwrap_region_constraints()\n-                .opportunistic_resolve_var(self.tcx(), rid),\n+            ty::ReVar(rid) => {\n+                let resolved = self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .unwrap_region_constraints()\n+                    .opportunistic_resolve_var(rid);\n+                if resolved == rid { r } else { self.tcx().mk_region(ty::ReVar(resolved)) }\n+            }\n             _ => r,\n         }\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if !ct.needs_infer() {\n+        if !ct.has_infer_regions() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n-            let c0 = self.infcx.shallow_resolve(ct);\n-            c0.super_fold_with(self)\n+            ct.super_fold_with(self)\n         }\n     }\n }"}, {"sha": "24dbf7b8c46719694ac08d863d293d91fb2c0723", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -87,6 +87,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n+    fn has_infer_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_INFER)\n+    }\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }"}, {"sha": "bccd903f57e25df0cf3806889119b9ab87115cd2", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -24,6 +24,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::IntTypeExt;\n@@ -1146,7 +1147,7 @@ fn confirm_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     debug!(\"confirm_candidate(candidate={:?}, obligation={:?})\", candidate, obligation);\n \n-    match candidate {\n+    let mut progress = match candidate {\n         ProjectionTyCandidate::ParamEnv(poly_projection)\n         | ProjectionTyCandidate::TraitDef(poly_projection) => {\n             confirm_param_env_candidate(selcx, obligation, poly_projection)\n@@ -1155,7 +1156,16 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionTyCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, obligation_trait_ref, impl_source)\n         }\n+    };\n+    // When checking for cycle during evaluation, we compare predicates with\n+    // \"syntactic\" equality. Since normalization generally introduces a type\n+    // with new region variables, we need to resolve them to existing variables\n+    // when possible for this to work. See `auto-trait-projection-recursion.rs`\n+    // for a case where this matters.\n+    if progress.ty.has_infer_regions() {\n+        progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);\n     }\n+    progress\n }\n \n fn confirm_select_candidate<'cx, 'tcx>("}, {"sha": "0a05fc6bb82863f5bdaf43c410f92cc3d054ee34", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/project-fn-ret-invariant.rs:48:8\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n    |\n LL |    bar(foo, x)\n-   |        ^^^\n+   |    ^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 44:8...\n   --> $DIR/project-fn-ret-invariant.rs:44:8"}, {"sha": "a2ddd5374c08bdb01c08b72ee28b6c23a7252211", "filename": "src/test/ui/auto-traits/auto-is-contextual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/auto-is-contextual.rs"}, {"sha": "a36f26f02e9f46ed8df2b46784a69d7823211ee3", "filename": "src/test/ui/auto-traits/auto-trait-projection-recursion.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -0,0 +1,34 @@\n+// Checking the `Send` bound in `main` requires:\n+//\n+// checking             <C<'static> as Y>::P: Send\n+// which normalizes to  Box<X<C<'?1>>>: Send\n+// which needs          X<C<'?1>>: Send\n+// which needs          <C<'?1> as Y>::P: Send\n+//\n+// At this point we used to normalize the predicate to `Box<X<C<'?2>>>: Send`\n+// and continue in a loop where we created new region variables to the\n+// recursion limit. To avoid this we now \"canonicalize\" region variables to\n+// lowest unified region vid. This means we instead have to prove\n+// `Box<X<C<'?1>>>: Send`, which we can because auto traits are coinductive.\n+\n+// check-pass\n+\n+// Avoid a really long error message if this regresses.\n+#![recursion_limit=\"20\"]\n+\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+fn is_send<S: Send>() {}\n+\n+fn main() {\n+    is_send::<X<C<'static>>>();\n+}"}, {"sha": "34d6c3da00ee3308486f6aebcfa127ea1837b591", "filename": "src/test/ui/auto-traits/auto-trait-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/auto-trait-validation.rs"}, {"sha": "4040e66c6af776f65aa5f99e5a0f5fafd9504761", "filename": "src/test/ui/auto-traits/auto-trait-validation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/auto-trait-validation.stderr"}, {"sha": "15fdddc5f3f5c3b779de91a6e2df28ade5d9bee8", "filename": "src/test/ui/auto-traits/auto-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/traits/auto-traits.rs"}, {"sha": "7f6b9e3fba79fc1703d571295d205bb1aa4d86af", "filename": "src/test/ui/auto-traits/issue-23080-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/issues/issue-23080-2.rs"}, {"sha": "48ce09aaa34dab455295b3a818e6c39a5c8199f0", "filename": "src/test/ui/auto-traits/issue-23080-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/issues/issue-23080-2.stderr"}, {"sha": "035db82ba5de0df26ec58513fda41d04993525f8", "filename": "src/test/ui/auto-traits/issue-23080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/issues/issue-23080.rs"}, {"sha": "73ecb1c362e1767941666d9f25c736271f4b915b", "filename": "src/test/ui/auto-traits/issue-23080.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/issues/issue-23080.stderr"}, {"sha": "8824a6d2767f74cc76ade01e05d7e42276651799", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.rs"}, {"sha": "63b3300f6dbf4d1ed641bd9dbbbba9fcdfdd8e94", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr"}, {"sha": "edbca9151248672a02a63bfb50170fb44ee57c6a", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.rs"}, {"sha": "796638fc54dce7651c5f8583988d2223a4b223c4", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr"}, {"sha": "71ac2b466c10a191ee0dfff89bdc9970a25ae475", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.rs"}, {"sha": "53ba9b8a3f6b4d6bb6f4fc68df651692c9fa4709", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr"}, {"sha": "6483b9213dc5303f4dfb68caf1339a7a3b2aa39d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.rs"}, {"sha": "bc5000049846362e2e770323ca2034d44b57a761", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr"}, {"sha": "47cab60625dce59c6b2593b99cef0c2343f26763", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.rs"}, {"sha": "76a6994cb009a42dec9e01aad42d280d253aeb00", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr"}, {"sha": "614a5ff55b1ed0e95d03d85849c955d87e01bc7d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.rs"}, {"sha": "5962d191292889c3a34fd4509c617ca877dc8d99", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr"}, {"sha": "205d50a2ed9ce5bc88a7b0c508536d108da8378d", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -0,0 +1,30 @@\n+// Test that we don't hit the recursion limit for short cycles involving lifetimes.\n+\n+// Shouldn't hit this, we should realize that we're in a cycle sooner.\n+#![recursion_limit=\"20\"]\n+\n+trait NotAuto {}\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+impl<T: NotAuto> NotAuto for Box<T> {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+impl<'a> NotAuto for C<'a> {}\n+\n+fn is_send<S: NotAuto>() {}\n+//~^ NOTE: required\n+\n+fn main() {\n+    // Should only be a few notes.\n+    is_send::<X<C<'static>>>();\n+    //~^ ERROR overflow evaluating\n+    //~| NOTE: required\n+}"}, {"sha": "9a227229ea4c2532ca90da09741b0c0b0c6a9460", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ef58ae6c126ec0b87b307d45fef2da127be22/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr?ref=ba2ef58ae6c126ec0b87b307d45fef2da127be22", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `std::boxed::Box<X<C<'_>>>: NotAuto`\n+  --> $DIR/traits-inductive-overflow-lifetime.rs:27:5\n+   |\n+LL | fn is_send<S: NotAuto>() {}\n+   |               ------- required by this bound in `is_send`\n+...\n+LL |     is_send::<X<C<'static>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}