{"sha": "30a58155050e867174ef2f8eaae07e7883f3eb23", "node_id": "C_kwDOAAsO6NoAKDMwYTU4MTU1MDUwZTg2NzE3NGVmMmY4ZWFhZTA3ZTc4ODNmM2ViMjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T13:11:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T13:11:57Z"}, "message": "Auto merge of #101467 - nnethercote:shrink-hir-Ty-Pat, r=spastorino\n\nShrink `hir::Ty` and `hir::Pat`\n\nr? `@ghost`", "tree": {"sha": "de7c47f76ae4682b0c8237bdf6711f3008f759a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7c47f76ae4682b0c8237bdf6711f3008f759a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a58155050e867174ef2f8eaae07e7883f3eb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a58155050e867174ef2f8eaae07e7883f3eb23", "html_url": "https://github.com/rust-lang/rust/commit/30a58155050e867174ef2f8eaae07e7883f3eb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a58155050e867174ef2f8eaae07e7883f3eb23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3db185c52497ecb1b4ee5758c99a1c3fe02c79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3db185c52497ecb1b4ee5758c99a1c3fe02c79d", "html_url": "https://github.com/rust-lang/rust/commit/c3db185c52497ecb1b4ee5758c99a1c3fe02c79d"}, {"sha": "c86a9c077c3b3a8c04166934ec1465920419a2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86a9c077c3b3a8c04166934ec1465920419a2cd", "html_url": "https://github.com/rust-lang/rust/commit/c86a9c077c3b3a8c04166934ec1465920419a2cd"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "bce49165e5b18060f96430be8356f5fb979d14ac", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -51,7 +51,9 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n             false\n         },\n         PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n-        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.is_some() && array_rec(a),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => {\n+            !etc.as_opt_usize().is_some() && array_rec(a)\n+        }\n         PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n         PatKind::Path(_) | PatKind::Lit(_) => true,\n     }"}, {"sha": "93874b103b461d92bb06f73842e441b5e26d41b3", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -248,7 +248,7 @@ impl<'a> NormalizedPat<'a> {\n                 } else {\n                     (None, adt.non_enum_variant())\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };\n@@ -268,7 +268,7 @@ impl<'a> NormalizedPat<'a> {\n                     ty::Tuple(subs) => subs.len(),\n                     _ => return Self::Wild,\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };"}, {"sha": "1bf1c4d1078952cab5deb3f2c756cfb78d1842b4", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -200,6 +200,8 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             // We don't actually know the position and the presence of the `..` (dotdot) operator\n             // in the arms, so we need to evaluate the correct offsets here in order to iterate in\n             // both arms at the same time.\n+            let left_pos = left_pos.as_opt_usize();\n+            let right_pos = right_pos.as_opt_usize();\n             let len = max(\n                 left_in.len() + {\n                     if left_pos.is_some() { 1 } else { 0 }"}, {"sha": "569870ab2b7f41ae3d4b4b2fd53083ba3b71d9ed", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -122,7 +122,8 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n     if_chain! {\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let PatKind::TupleStruct(ref path1, [field], None) = let_pat.kind;\n+        if let PatKind::TupleStruct(ref path1, [field], ddpos) = let_pat.kind;\n+        if ddpos.as_opt_usize().is_none();\n         if let PatKind::Binding(BindingAnnotation(by_ref, _), bind_id, ident, None) = field.kind;\n         let caller_ty = cx.typeck_results().expr_ty(let_expr);\n         let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);"}, {"sha": "ce9ebad8c89a85e98687ef486fc410dca262993f", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -19,10 +19,12 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n         if (local.ty.map_or(false, |ty| !matches!(ty.kind, TyKind::Infer))\n-            || matches!(local.pat.kind, PatKind::Tuple([], None)))\n+            || matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none()))\n             && expr_needs_inferred_result(cx, init)\n         {\n-            if !matches!(local.pat.kind, PatKind::Wild | PatKind::Tuple([], None)) {\n+            if !matches!(local.pat.kind, PatKind::Wild)\n+               && !matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none())\n+            {\n                 span_lint_and_then(\n                     cx,\n                     LET_UNIT_VALUE,"}, {"sha": "ff23ed5fffa3cd04bd86060bb207aa853c426a18", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_lifetime(&mut self, lifetime: Lifetime) {\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n         if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n             std::mem::discriminant(name).hash(&mut self.s);"}, {"sha": "3cf043f22df5dc60e92265bb06133cc341a3b9d9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a58155050e867174ef2f8eaae07e7883f3eb23/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=30a58155050e867174ef2f8eaae07e7883f3eb23", "patch": "@@ -1552,7 +1552,8 @@ pub fn iter_input_pats<'tcx>(decl: &FnDecl<'_>, body: &'tcx Body<'_>) -> impl It\n pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     fn is_ok(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n         if_chain! {\n-            if let PatKind::TupleStruct(ref path, pat, None) = arm.pat.kind;\n+            if let PatKind::TupleStruct(ref path, pat, ddpos) = arm.pat.kind;\n+            if ddpos.as_opt_usize().is_none();\n             if is_lang_ctor(cx, path, ResultOk);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].kind;\n             if path_to_local_id(arm.body, hir_id);"}]}