{"sha": "146b61189a5c206d744a09b9336c26e3dc1637c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmI2MTE4OWE1YzIwNmQ3NDRhMDliOTMzNmMyNmUzZGMxNjM3YzQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T16:28:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T23:44:06Z"}, "message": "Get rid of rust_crate_cache in the runtime\n\nWe are no longer generating dynamic tydescs or dicts.\n\nIssue #1982", "tree": {"sha": "16e44a1b90c1f8b69dc663ad3c21c2bb4a4ccc11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e44a1b90c1f8b69dc663ad3c21c2bb4a4ccc11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146b61189a5c206d744a09b9336c26e3dc1637c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146b61189a5c206d744a09b9336c26e3dc1637c4", "html_url": "https://github.com/rust-lang/rust/commit/146b61189a5c206d744a09b9336c26e3dc1637c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146b61189a5c206d744a09b9336c26e3dc1637c4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "html_url": "https://github.com/rust-lang/rust/commit/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e"}], "stats": {"total": 233, "additions": 0, "deletions": 233}, "files": [{"sha": "cd8d1b3ebebf470fd2396a1275ae4dc395e62619", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -40,7 +40,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n-              rt/rust_crate_cache.cpp \\\n               rt/rust_env.cpp \\\n               rt/rust_task_thread.cpp \\\n               rt/rust_scheduler.cpp \\"}, {"sha": "0294069051bddcd99150393a9d73e2af43634677", "filename": "src/rt/rust_crate_cache.cpp", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=bc21a5ddbe70b2a0c68db9e632ee7e78de9fa59e", "patch": "@@ -1,103 +0,0 @@\n-\n-#include \"rust_internal.h\"\n-#include <algorithm>\n-\n-type_desc *\n-rust_crate_cache::get_type_desc(size_t size,\n-                                size_t align,\n-                                size_t n_descs,\n-                                type_desc const **descs,\n-                                uintptr_t n_obj_params)\n-{\n-    I(thread, n_descs > 1);\n-    type_desc *td = NULL;\n-    size_t keysz = n_descs * sizeof(type_desc*);\n-    HASH_FIND(hh, this->type_descs, descs, keysz, td);\n-    if (td) {\n-        DLOG(thread, cache, \"rust_crate_cache::get_type_desc hit\");\n-\n-        // FIXME: This is a gross hack.\n-        td->n_obj_params = std::max(td->n_obj_params, n_obj_params);\n-\n-        return td;\n-    }\n-    DLOG(thread, cache, \"rust_crate_cache::get_type_desc miss\");\n-    td = (type_desc*) thread->kernel->malloc(sizeof(type_desc) + keysz,\n-                                            \"crate cache typedesc\");\n-    if (!td)\n-        return NULL;\n-    // By convention, desc 0 is the root descriptor.\n-    // but we ignore the size and alignment of it and use the\n-    // passed-in, computed values.\n-    memcpy(td, descs[0], sizeof(type_desc));\n-    td->first_param = &td->descs[1];\n-    td->size = size;\n-    td->align = align;\n-    for (size_t i = 0; i < n_descs; ++i) {\n-        DLOG(thread, cache,\n-                 \"rust_crate_cache::descs[%\" PRIdPTR \"] = 0x%\" PRIxPTR,\n-                 i, descs[i]);\n-        td->descs[i] = descs[i];\n-    }\n-    td->n_obj_params = n_obj_params;\n-    td->n_params = n_descs - 1;\n-    HASH_ADD(hh, this->type_descs, descs, keysz, td);\n-    return td;\n-}\n-\n-void**\n-rust_crate_cache::get_dict(size_t n_fields, void** dict) {\n-    rust_hashable_dict *found = NULL;\n-    size_t dictsz = sizeof(void*) * n_fields;\n-    HASH_FIND(hh, this->dicts, dict, dictsz, found);\n-    if (found) return &(found->fields[0]);\n-    found = (rust_hashable_dict*)\n-        thread->kernel->malloc(sizeof(UT_hash_handle) + dictsz,\n-                              \"crate cache dict\");\n-    if (!found) return NULL;\n-    void** retptr = &(found->fields[0]);\n-    memcpy(retptr, dict, dictsz);\n-    HASH_ADD_KEYPTR(hh, this->dicts, retptr, dictsz, found);\n-    return retptr;\n-}\n-\n-rust_crate_cache::rust_crate_cache(rust_task_thread *thread)\n-    : type_descs(NULL),\n-      dicts(NULL),\n-      thread(thread),\n-      idx(0)\n-{\n-}\n-\n-void\n-rust_crate_cache::flush() {\n-    DLOG(thread, cache, \"rust_crate_cache::flush()\");\n-\n-    while (type_descs) {\n-        type_desc *d = type_descs;\n-        HASH_DEL(type_descs, d);\n-        DLOG(thread, mem, \"rust_crate_cache::flush() tydesc %\" PRIxPTR, d);\n-        thread->kernel->free(d);\n-    }\n-    while (dicts) {\n-        rust_hashable_dict *d = dicts;\n-        HASH_DEL(dicts, d);\n-        thread->kernel->free(d);\n-    }\n-}\n-\n-rust_crate_cache::~rust_crate_cache()\n-{\n-    flush();\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}, {"sha": "55f344f150d5020b1ce6353c577cd7cfc9e71147", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -55,7 +55,6 @@ struct rust_task;\n class rust_log;\n class rust_port;\n class rust_kernel;\n-class rust_crate_cache;\n \n struct stk_seg;\n struct type_desc;"}, {"sha": "5bea4925829e781eb812a9503eef4be8f80cda23", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -71,7 +71,6 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     runtime_sp(0),\n     sched(thread->sched),\n     thread(thread),\n-    cache(NULL),\n     kernel(thread->kernel),\n     name(name),\n     list_index(-1),\n@@ -445,16 +444,6 @@ rust_task::die() {\n     transition(&thread->running_tasks, &thread->dead_tasks, NULL, \"none\");\n }\n \n-rust_crate_cache *\n-rust_task::get_crate_cache()\n-{\n-    if (!cache) {\n-        DLOG(thread, task, \"fetching cache for current crate\");\n-        cache = thread->get_cache();\n-    }\n-    return cache;\n-}\n-\n void\n rust_task::backtrace() {\n     if (!log_rt_backtrace) return;"}, {"sha": "e86dd973b6364bf0add9dde0158723e10d432c2f", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -57,7 +57,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     uintptr_t runtime_sp;      // Runtime sp while task running.\n     rust_scheduler *sched;\n     rust_task_thread *thread;\n-    rust_crate_cache *cache;\n \n     // Fields known only to the runtime.\n     rust_kernel *kernel;\n@@ -185,7 +184,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void unsupervise();\n \n     frame_glue_fns *get_frame_glue_fns(uintptr_t fp);\n-    rust_crate_cache * get_crate_cache();\n \n     void *calloc(size_t size, const char *tag);\n "}, {"sha": "8611e6e0f7942ff2557d78f2f09d476f2492bb07", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -24,7 +24,6 @@ rust_task_thread::rust_task_thread(rust_scheduler *sched,\n                                    int id) :\n     rust_thread(SCHED_STACK_SIZE),\n     _log(srv, this),\n-    cache(this),\n     id(id),\n     should_exit(false),\n     cached_c_stack(NULL),\n@@ -295,11 +294,6 @@ rust_task_thread::start_main_loop() {\n     }\n }\n \n-rust_crate_cache *\n-rust_task_thread::get_cache() {\n-    return &cache;\n-}\n-\n rust_task *\n rust_task_thread::create_task(rust_task *spawner, const char *name,\n                             size_t init_stack_sz) {"}, {"sha": "7363a89d7494145b810298f366ec2c8eab932943", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -11,37 +11,6 @@\n #include <windows.h>\n #endif\n \n-struct rust_task_thread;\n-\n-struct rust_hashable_dict {\n-    UT_hash_handle hh;\n-    void* fields[0];\n-};\n-\n-class rust_crate_cache {\n-public:\n-    type_desc *get_type_desc(size_t size,\n-                             size_t align,\n-                             size_t n_descs,\n-                             type_desc const **descs,\n-                             uintptr_t n_obj_params);\n-    void** get_dict(size_t n_fields, void** dict);\n-\n-private:\n-\n-    type_desc *type_descs;\n-    rust_hashable_dict *dicts;\n-\n-public:\n-\n-    rust_task_thread *thread;\n-    size_t idx;\n-\n-    rust_crate_cache(rust_task_thread *thread);\n-    ~rust_crate_cache();\n-    void flush();\n-};\n-\n struct rust_task_thread : public kernel_owned<rust_task_thread>,\n                         rust_thread\n {\n@@ -52,7 +21,6 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n     // Fields known only by the runtime:\n     rust_log _log;\n \n-    rust_crate_cache cache;\n     const int id;\n \n #ifndef __WIN32__\n@@ -108,7 +76,6 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n     rust_log & get_log();\n     void fail();\n \n-    rust_crate_cache *get_cache();\n     size_t number_of_live_tasks();\n \n     void reap_dead_tasks();"}, {"sha": "f7e6f51b6b21fdfabb76266e46b40d8d48219f50", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -361,73 +361,6 @@ upcall_free_shared_type_desc(type_desc *td) {\n     }\n }\n \n-/**********************************************************************\n- * Called to intern a task-local type descriptor into the hashtable\n- * associated with each scheduler.\n- */\n-\n-struct s_get_type_desc_args {\n-    type_desc *retval;\n-    size_t size;\n-    size_t align;\n-    size_t n_descs;\n-    type_desc const **descs;\n-    uintptr_t n_obj_params;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_get_type_desc(s_get_type_desc_args *args) {\n-    rust_task *task = rust_task_thread::get_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    LOG(task, cache, \"upcall get_type_desc with size=%\" PRIdPTR\n-        \", align=%\" PRIdPTR \", %\" PRIdPTR \" descs\", args->size, args->align,\n-        args->n_descs);\n-    rust_crate_cache *cache = task->get_crate_cache();\n-    type_desc *td = cache->get_type_desc(args->size, args->align, args->n_descs,\n-                                         args->descs, args->n_obj_params);\n-    LOG(task, cache, \"returning tydesc 0x%\" PRIxPTR, td);\n-    args->retval = td;\n-}\n-\n-extern \"C\" CDECL type_desc *\n-upcall_get_type_desc(void *curr_crate, // ignored, legacy compat.\n-                     size_t size,\n-                     size_t align,\n-                     size_t n_descs,\n-                     type_desc const **descs,\n-                     uintptr_t n_obj_params) {\n-    s_get_type_desc_args args = {0,size,align,n_descs,descs,n_obj_params};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_get_type_desc);\n-    return args.retval;\n-}\n-\n-/**********************************************************************\n- * Called to get a heap-allocated dict. These are interned and kept\n- * around indefinitely\n- */\n-\n-struct s_intern_dict_args {\n-    size_t n_fields;\n-    void** dict;\n-    void** res;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_intern_dict(s_intern_dict_args *args) {\n-    rust_task *task = rust_task_thread::get_task();\n-    LOG_UPCALL_ENTRY(task);\n-    rust_crate_cache *cache = task->get_crate_cache();\n-    args->res = cache->get_dict(args->n_fields, args->dict);\n-}\n-\n-extern \"C\" CDECL void**\n-upcall_intern_dict(size_t n_fields, void** dict) {\n-    s_intern_dict_args args = {n_fields, dict, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_intern_dict);\n-    return args.res;\n-}\n-\n /**********************************************************************/\n \n struct s_vec_grow_args {"}, {"sha": "742443af9bd1cfeaae71ffdb0e2016364ae98107", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -65,8 +65,6 @@ upcall_free\n upcall_validate_box\n upcall_create_shared_type_desc\n upcall_free_shared_type_desc\n-upcall_get_type_desc\n-upcall_intern_dict\n upcall_log_type\n upcall_malloc\n upcall_rust_personality"}, {"sha": "4a2f6bc237969ac1155e4b8d3f9ceab50b843c84", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -18,7 +18,6 @@ type upcalls =\n      mark: ValueRef,\n      create_shared_type_desc: ValueRef,\n      free_shared_type_desc: ValueRef,\n-     get_type_desc: ValueRef,\n      vec_grow: ValueRef,\n      vec_push: ValueRef,\n      cmp_type: ValueRef,\n@@ -71,12 +70,6 @@ fn declare_upcalls(targ_cfg: @session::config,\n                 T_ptr(tydesc_type)),\n           free_shared_type_desc:\n               dv(\"free_shared_type_desc\", [T_ptr(tydesc_type)]),\n-          get_type_desc:\n-              d(\"get_type_desc\",\n-                [T_ptr(T_nil()), size_t,\n-                 size_t, size_t,\n-                 T_ptr(T_ptr(tydesc_type)), int_t],\n-                T_ptr(tydesc_type)),\n           vec_grow:\n               dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t]),\n           vec_push:"}]}