{"sha": "71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNzU5ZWM1MmMxNzBlYjg0NTBmYTI4ZjBkMWY1YzMzYjQ3YzUyYjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-18T03:12:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-18T03:12:21Z"}, "message": "Rollup merge of #35739 - circuitfox:E0403-update-error-format, r=jonathandturner\n\nE0403 update error format\n\nFixes #35696\n\nPart of #35233\n\nr? @jonathandturner\n\nAlso did the bonus for this one.", "tree": {"sha": "4691268374a43cb7a3c6b53310171c5df1c8d4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4691268374a43cb7a3c6b53310171c5df1c8d4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "html_url": "https://github.com/rust-lang/rust/commit/71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71759ec52c170eb8450fa28f0d1f5c33b47c52b2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9a5b3bd7a631b39391acd3d6bbf67118d510d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9a5b3bd7a631b39391acd3d6bbf67118d510d2", "html_url": "https://github.com/rust-lang/rust/commit/5e9a5b3bd7a631b39391acd3d6bbf67118d510d2"}, {"sha": "6a1efbd08ed10595ba2a9ac942be23bfb84d977f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1efbd08ed10595ba2a9ac942be23bfb84d977f", "html_url": "https://github.com/rust-lang/rust/commit/6a1efbd08ed10595ba2a9ac942be23bfb84d977f"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "525b8b3e30d70323f164774a5a19fd40d30b779f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71759ec52c170eb8450fa28f0d1f5c33b47c52b2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71759ec52c170eb8450fa28f0d1f5c33b47c52b2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "patch": "@@ -102,7 +102,7 @@ enum ResolutionError<'a> {\n     /// error E0402: cannot use an outer type parameter in this context\n     OuterTypeParameterContext,\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n-    NameAlreadyUsedInTypeParameterList(Name),\n+    NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n     /// error E0404: is not a trait\n     IsNotATrait(&'a str),\n     /// error E0405: use of undeclared trait name\n@@ -209,13 +209,17 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              E0402,\n                              \"cannot use an outer type parameter in this context\")\n         }\n-        ResolutionError::NameAlreadyUsedInTypeParameterList(name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0403,\n-                             \"the name `{}` is already used for a type parameter in this type \\\n-                              parameter list\",\n-                             name)\n+        ResolutionError::NameAlreadyUsedInTypeParameterList(name, first_use_span) => {\n+             let mut err = struct_span_err!(resolver.session,\n+                                            span,\n+                                            E0403,\n+                                            \"the name `{}` is already used for a type parameter \\\n+                                            in this type parameter list\",\n+                                            name);\n+             err.span_label(span, &format!(\"already used\"));\n+             err.span_label(first_use_span.clone(), &format!(\"first use of `{}`\", name));\n+             err\n+\n         }\n         ResolutionError::IsNotATrait(name) => {\n             let mut err = struct_span_err!(resolver.session,\n@@ -1726,17 +1730,19 @@ impl<'a> Resolver<'a> {\n         match type_parameters {\n             HasTypeParameters(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n-                let mut seen_bindings = HashSet::new();\n+                let mut seen_bindings = HashMap::new();\n                 for type_parameter in &generics.ty_params {\n                     let name = type_parameter.ident.name;\n                     debug!(\"with_type_parameter_rib: {}\", type_parameter.id);\n \n-                    if seen_bindings.contains(&name) {\n+                    if seen_bindings.contains_key(&name) {\n+                        let span = seen_bindings.get(&name).unwrap();\n                         resolve_error(self,\n                                       type_parameter.span,\n-                                      ResolutionError::NameAlreadyUsedInTypeParameterList(name));\n+                                      ResolutionError::NameAlreadyUsedInTypeParameterList(name,\n+                                                                                          span));\n                     }\n-                    seen_bindings.insert(name);\n+                    seen_bindings.entry(name).or_insert(type_parameter.span);\n \n                     // plain insert (no renaming)\n                     let def_id = self.definitions.local_def_id(type_parameter.id);"}, {"sha": "cd8532fc4c305bebf8cb399d9747010fb3f4d651", "filename": "src/test/compile-fail/E0403.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71759ec52c170eb8450fa28f0d1f5c33b47c52b2/src%2Ftest%2Fcompile-fail%2FE0403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71759ec52c170eb8450fa28f0d1f5c33b47c52b2/src%2Ftest%2Fcompile-fail%2FE0403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0403.rs?ref=71759ec52c170eb8450fa28f0d1f5c33b47c52b2", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n fn foo<T, T>(s: T, u: T) {} //~ ERROR E0403\n+                            //~| NOTE already used\n+                            //~| NOTE first use of `T`\n \n fn main() {\n }"}]}