{"sha": "f1e3e2c366b05f232c6b2225af7fc155925029df", "node_id": "C_kwDOAAsO6NoAKGYxZTNlMmMzNjZiMDVmMjMyYzZiMjIyNWFmN2ZjMTU1OTI1MDI5ZGY", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-01-25T20:11:44Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-03-28T01:10:50Z"}, "message": "Use PathSegment::ident for scraping method calls", "tree": {"sha": "7e80c8e663ed41899e198b2679abbe6b291925e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e80c8e663ed41899e198b2679abbe6b291925e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e3e2c366b05f232c6b2225af7fc155925029df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e3e2c366b05f232c6b2225af7fc155925029df", "html_url": "https://github.com/rust-lang/rust/commit/f1e3e2c366b05f232c6b2225af7fc155925029df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e3e2c366b05f232c6b2225af7fc155925029df/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d58c9dfdb910089afc1296142bae21634ce5eb4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d58c9dfdb910089afc1296142bae21634ce5eb4b", "html_url": "https://github.com/rust-lang/rust/commit/d58c9dfdb910089afc1296142bae21634ce5eb4b"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "fee42de746d574ec6bdab95031d3335c104184a9", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1e3e2c366b05f232c6b2225af7fc155925029df/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e3e2c366b05f232c6b2225af7fc155925029df/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=f1e3e2c366b05f232c6b2225af7fc155925029df", "patch": "@@ -160,27 +160,14 @@ where\n                     return;\n                 }\n             }\n-            hir::ExprKind::MethodCall(_, args, call_span) => {\n+            hir::ExprKind::MethodCall(path, _, call_span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n                 let Some(def_id) = types.type_dependent_def_id(ex.hir_id) else {\n                     trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);\n                     return;\n                 };\n \n-                // The MethodCall node doesn't directly contain a span for the\n-                // method identifier, so we have to compute it by trimming the full\n-                // span based on the arguments.\n-                let ident_span = match args.get(1) {\n-                    // If there is an argument, e.g. \"f(x)\", then\n-                    // get the span \"f(\" and delete the lparen.\n-                    Some(arg) => {\n-                        let with_paren = call_span.until(arg.span);\n-                        with_paren.with_hi(with_paren.hi() - BytePos(1))\n-                    }\n-                    // Otherwise, just delete both parens directly.\n-                    None => call_span.with_hi(call_span.hi() - BytePos(2)),\n-                };\n-\n+                let ident_span = path.ident.span;\n                 (tcx.type_of(def_id), call_span, ident_span)\n             }\n             _ => {"}]}