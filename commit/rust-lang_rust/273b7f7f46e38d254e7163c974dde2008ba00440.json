{"sha": "273b7f7f46e38d254e7163c974dde2008ba00440", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3M2I3ZjdmNDZlMzhkMjU0ZTcxNjNjOTc0ZGRlMjAwOGJhMDA0NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T13:03:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T13:03:41Z"}, "message": "Auto merge of #3723 - rhysd:issue3721, r=oli-obk\n\nImplement dbg_macro rule\n\nFixes  #3721\n\nThis patch adds new `dbg_macro` rule to check `dbg!` macro use.\n\nSince this is my first patch to clippy, I'm not confident about following points:\n\n- ~~Currently only checks `dbg!` span. Is it possible to check if the `dbg!` macro is provided by standard library or user-defined? If it's possible, I can make the check more strict.~~ Resolved as https://github.com/rust-lang/rust-clippy/pull/3723#discussion_r252417934\n- ~~Is category `style` correct for this rule?~~'restriction' is used instead\n- ~~Should I use `span_lint_and_sugg` instead of `span_lint`? Currently entire message is put as `msg`.  But later part `ensure to avoid having uses of it in version control` may be put as suggestion.~~ Done\n- I'm not native English speaker. The message and doc may not be natural as English.", "tree": {"sha": "ef559264664f3cf34ea866b5e07dd67fda7a4ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef559264664f3cf34ea866b5e07dd67fda7a4ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273b7f7f46e38d254e7163c974dde2008ba00440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273b7f7f46e38d254e7163c974dde2008ba00440", "html_url": "https://github.com/rust-lang/rust/commit/273b7f7f46e38d254e7163c974dde2008ba00440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273b7f7f46e38d254e7163c974dde2008ba00440/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bda548f81bc268a2e9813ce9168d2e40e8a11bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bda548f81bc268a2e9813ce9168d2e40e8a11bd", "html_url": "https://github.com/rust-lang/rust/commit/3bda548f81bc268a2e9813ce9168d2e40e8a11bd"}, {"sha": "83d620b8246094ff54c90888f53015b1ef5a2bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/83d620b8246094ff54c90888f53015b1ef5a2bf8", "html_url": "https://github.com/rust-lang/rust/commit/83d620b8246094ff54c90888f53015b1ef5a2bf8"}], "stats": {"total": 181, "additions": 180, "deletions": 1}, "files": [{"sha": "59a18e9d4c423a1c6ff0c370874d7956bd8d9a48", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -772,6 +772,7 @@ All notable changes to this project will be documented in this file.\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`cyclomatic_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cyclomatic_complexity\n+[`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access"}, {"sha": "d3d82eb0752ef12918854b211fd4a5f16ad54deb", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 295 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 296 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "d75970ce50a269f76a954bcce4c89aba4f6546f5", "filename": "clippy_lints/src/dbg_macro.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -0,0 +1,78 @@\n+use crate::utils::{snippet_opt, span_help_and_lint, span_lint_and_sugg};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast;\n+use syntax::source_map::Span;\n+use syntax::tokenstream::TokenStream;\n+\n+/// **What it does:** Checks for usage of dbg!() macro.\n+///\n+/// **Why is this bad?** `dbg!` macro is intended as a debugging tool. It\n+/// should not be in version control.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// // Bad\n+/// dbg!(true)\n+///\n+/// // Good\n+/// true\n+/// ```\n+declare_clippy_lint! {\n+    pub DBG_MACRO,\n+    restriction,\n+    \"`dbg!` macro is intended as a debugging tool\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DBG_MACRO)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"DbgMacro\"\n+    }\n+}\n+\n+impl EarlyLintPass for Pass {\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n+        if mac.node.path == \"dbg\" {\n+            if let Some(sugg) = tts_span(mac.node.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    DBG_MACRO,\n+                    mac.span,\n+                    \"`dbg!` macro is intended as a debugging tool\",\n+                    \"ensure to avoid having uses of it in version control\",\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else {\n+                span_help_and_lint(\n+                    cx,\n+                    DBG_MACRO,\n+                    mac.span,\n+                    \"`dbg!` macro is intended as a debugging tool\",\n+                    \"ensure to avoid having uses of it in version control\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+// Get span enclosing entire the token stream.\n+fn tts_span(tts: TokenStream) -> Option<Span> {\n+    let mut cursor = tts.into_trees();\n+    let first = cursor.next()?.span();\n+    let span = match cursor.last() {\n+        Some(tree) => first.to(tree.span()),\n+        None => first,\n+    };\n+    Some(span)\n+}"}, {"sha": "5a9364eddb69bdcd36292c9292b7af536079d35a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -94,6 +94,7 @@ pub mod const_static_lifetime;\n pub mod copies;\n pub mod copy_iterator;\n pub mod cyclomatic_complexity;\n+pub mod dbg_macro;\n pub mod default_trait_access;\n pub mod derive;\n pub mod doc;\n@@ -231,6 +232,7 @@ pub fn register_pre_expansion_lints(\n         },\n     );\n     store.register_pre_expansion_pass(Some(session), true, false, box attrs::CfgAttrPass);\n+    store.register_pre_expansion_pass(Some(session), true, false, box dbg_macro::Pass);\n }\n \n pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {\n@@ -495,6 +497,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n+        dbg_macro::DBG_MACRO,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         implicit_return::IMPLICIT_RETURN,\n         indexing_slicing::INDEXING_SLICING,"}, {"sha": "d2df7fbd3e84c727d263648fff82d7edb684abab", "filename": "tests/ui/dbg_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::dbg_macro)]\n+\n+fn foo(n: u32) -> u32 {\n+    if let Some(n) = dbg!(n.checked_sub(4)) {\n+        n\n+    } else {\n+        n\n+    }\n+}\n+\n+fn factorial(n: u32) -> u32 {\n+    if dbg!(n <= 1) {\n+        dbg!(1)\n+    } else {\n+        dbg!(n * factorial(n - 1))\n+    }\n+}\n+\n+fn main() {\n+    dbg!(42);\n+    dbg!(dbg!(dbg!(42)));\n+    foo(3) + dbg!(factorial(4));\n+}"}, {"sha": "43a60180f9644a97bd126311cab4fec3ad29c438", "filename": "tests/ui/dbg_macro.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/273b7f7f46e38d254e7163c974dde2008ba00440/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/273b7f7f46e38d254e7163c974dde2008ba00440/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=273b7f7f46e38d254e7163c974dde2008ba00440", "patch": "@@ -0,0 +1,74 @@\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:4:22\n+   |\n+LL |     if let Some(n) = dbg!(n.checked_sub(4)) {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::dbg-macro` implied by `-D warnings`\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if let Some(n) = n.checked_sub(4) {\n+   |                      ^^^^^^^^^^^^^^^^\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:12:8\n+   |\n+LL |     if dbg!(n <= 1) {\n+   |        ^^^^^^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if n <= 1 {\n+   |        ^^^^^^\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:13:9\n+   |\n+LL |         dbg!(1)\n+   |         ^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         1\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:15:9\n+   |\n+LL |         dbg!(n * factorial(n - 1))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         n * factorial(n - 1)\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:20:5\n+   |\n+LL |     dbg!(42);\n+   |     ^^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     42;\n+   |     ^^\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:21:5\n+   |\n+LL |     dbg!(dbg!(dbg!(42)));\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     dbg!(dbg!(42));\n+   |     ^^^^^^^^^^^^^^\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:22:14\n+   |\n+LL |     foo(3) + dbg!(factorial(4));\n+   |              ^^^^^^^^^^^^^^^^^^\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     foo(3) + factorial(4);\n+   |              ^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}