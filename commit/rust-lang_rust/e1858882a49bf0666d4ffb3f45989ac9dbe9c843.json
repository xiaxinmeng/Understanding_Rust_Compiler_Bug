{"sha": "e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxODU4ODgyYTQ5YmYwNjY2ZDRmZmIzZjQ1OTg5YWM5ZGJlOWM4NDM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-02T01:42:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-02T22:35:47Z"}, "message": "rt: Run a single-threaded scheduler on the main thread", "tree": {"sha": "71ef322a719ca53ad56124ca37eb5061b49f1c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ef322a719ca53ad56124ca37eb5061b49f1c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "html_url": "https://github.com/rust-lang/rust/commit/e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3654ef00782cf9708196fd438ee08c751a5b699b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3654ef00782cf9708196fd438ee08c751a5b699b", "html_url": "https://github.com/rust-lang/rust/commit/3654ef00782cf9708196fd438ee08c751a5b699b"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "e328f81c391de30884adc4d7aec36e1a80f89b38", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -93,7 +93,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     root_task->start((spawn_fn)main_fn, NULL, args->args);\n     root_task = NULL;\n \n-    int ret = kernel->wait_for_exit();\n+    int ret = kernel->run();\n     delete args;\n     delete kernel;\n     delete srv;"}, {"sha": "d65837a47d6a328283bdb1c16b1961832659ea8e", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -1,6 +1,7 @@\n #include \"rust_internal.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n+#include \"rust_sched_launcher.h\"\n \n #include <vector>\n \n@@ -18,8 +19,15 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     rval(0),\n     max_sched_id(0),\n     sched_reaper(this),\n+    osmain_driver(NULL),\n     env(srv->env)\n {\n+    // Create the single threaded scheduler that will run on the platform's\n+    // main thread\n+    rust_manual_sched_launcher_factory launchfac;\n+    osmain_scheduler = create_scheduler(&launchfac, 1, false);\n+    osmain_driver = launchfac.get_driver();\n+    sched_reaper.start();\n }\n \n void\n@@ -59,24 +67,25 @@ void rust_kernel::free(void *mem) {\n \n rust_sched_id\n rust_kernel::create_scheduler(size_t num_threads) {\n+    rust_thread_sched_launcher_factory launchfac;\n+    return create_scheduler(&launchfac, num_threads, true);\n+}\n+\n+rust_sched_id\n+rust_kernel::create_scheduler(rust_sched_launcher_factory *launchfac,\n+                              size_t num_threads, bool allow_exit) {\n     rust_sched_id id;\n     rust_scheduler *sched;\n     {\n         scoped_lock with(sched_lock);\n-        // If this is the first scheduler then we need to launch\n-        // the scheduler reaper.\n-        bool start_reaper = sched_table.empty();\n         id = max_sched_id++;\n         K(srv, id != INTPTR_MAX, \"Hit the maximum scheduler id\");\n         sched = new (this, \"rust_scheduler\")\n-            rust_scheduler(this, srv, num_threads, id, true);\n+            rust_scheduler(this, srv, num_threads, id, allow_exit, launchfac);\n         bool is_new = sched_table\n             .insert(std::pair<rust_sched_id,\n                               rust_scheduler*>(id, sched)).second;\n         A(this, is_new, \"Reusing a sched id?\");\n-        if (start_reaper) {\n-            sched_reaper.start();\n-        }\n     }\n     sched->start_task_threads();\n     return id;\n@@ -123,16 +132,28 @@ rust_kernel::wait_for_schedulers()\n             sched_table.erase(iter);\n             sched->join_task_threads();\n             delete sched;\n+            if (sched_table.size() == 1) {\n+                KLOG_(\"Allowing osmain scheduler to exit\");\n+                sched_lock.unlock();\n+                // It's only the osmain scheduler left. Tell it to exit\n+                rust_scheduler *sched = get_scheduler_by_id(osmain_scheduler);\n+                assert(sched != NULL);\n+                sched_lock.lock();\n+                sched->allow_exit();\n+            }\n         }\n         if (!sched_table.empty()) {\n             sched_lock.wait();\n         }\n     }\n }\n \n-/* Called on the main thread to wait for the kernel to exit */\n+/* Called on the main thread to run the osmain scheduler to completion,\n+   then wait for schedulers to exit */\n int\n-rust_kernel::wait_for_exit() {\n+rust_kernel::run() {\n+    assert(osmain_driver != NULL);\n+    osmain_driver->start_main_loop();\n     sched_reaper.join();\n     return rval;\n }"}, {"sha": "8c1d33c6a5e49f34882abf26855e334eab4f7ca5", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -13,6 +13,9 @@ class rust_scheduler;\n \n typedef std::map<rust_sched_id, rust_scheduler*> sched_map;\n \n+class rust_sched_driver;\n+class rust_sched_launcher_factory;\n+\n /**\n  * A global object shared by all thread domains. Most of the data structures\n  * in this class are synchronized since they are accessed from multiple\n@@ -48,6 +51,11 @@ class rust_kernel {\n     std::vector<rust_sched_id> join_list;\n \n     rust_sched_reaper sched_reaper;\n+    // The single-threaded scheduler that uses the main thread\n+    rust_sched_id osmain_scheduler;\n+    // Runs the single-threaded scheduler that executes tasks\n+    // on the main thread\n+    rust_sched_driver *osmain_driver;\n \n public:\n \n@@ -66,11 +74,13 @@ class rust_kernel {\n     void fail();\n \n     rust_sched_id create_scheduler(size_t num_threads);\n+    rust_sched_id create_scheduler(rust_sched_launcher_factory *launchfac,\n+                                   size_t num_threads, bool allow_exit);\n     rust_scheduler* get_scheduler_by_id(rust_sched_id id);\n     // Called by a scheduler to indicate that it is terminating\n     void release_scheduler_id(rust_sched_id id);\n     void wait_for_schedulers();\n-    int wait_for_exit();\n+    int run();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);"}, {"sha": "330299ec73cc7c8a372dbb6e3614ce0f5d6b00ee", "filename": "src/rt/rust_sched_launcher.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_sched_launcher.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_sched_launcher.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.cpp?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -32,6 +32,7 @@ rust_sched_launcher *\n rust_manual_sched_launcher_factory::create(rust_scheduler *sched, int id) {\n     assert(launcher == NULL && \"I can only track one sched_launcher\");\n     rust_srv *srv = sched->srv->clone();\n-    return new(sched->kernel, \"rust_manual_sched_launcher\")\n+    launcher = new(sched->kernel, \"rust_manual_sched_launcher\")\n         rust_manual_sched_launcher(sched, srv, id);\n+    return launcher;\n }"}, {"sha": "f5db14a397ee1ff9e3a4d9487c2c10154341031b", "filename": "src/rt/rust_sched_launcher.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -36,10 +36,10 @@ class rust_thread_sched_launcher\n \n class rust_manual_sched_launcher : public rust_sched_launcher {\n public:\n-  rust_manual_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);\n-  virtual void start() { }\n-  virtual void join() { }\n-  void start_main_loop() { driver.start_main_loop(); }\n+    rust_manual_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);\n+    virtual void start() { }\n+    virtual void join() { }\n+    rust_sched_driver *get_driver() { return &driver; };\n };\n \n class rust_sched_launcher_factory {\n@@ -62,7 +62,10 @@ class rust_manual_sched_launcher_factory\n public:\n     rust_manual_sched_launcher_factory() : launcher(NULL) { }\n     virtual rust_sched_launcher *create(rust_scheduler *sched, int id);\n-    rust_manual_sched_launcher *get_launcher() { return launcher; }\n+    rust_sched_driver *get_driver() {\n+        assert(launcher != NULL);\n+        return launcher->get_driver();\n+    }\n };\n \n #endif // RUST_SCHED_LAUNCHER_H"}, {"sha": "b9f544b45490d2eeef2fe7f688ff026c1aab2bd1", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -6,7 +6,8 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n                                rust_srv *srv,\n                                size_t num_threads,\n                                rust_sched_id id,\n-                               bool allow_exit) :\n+                               bool allow_exit,\n+                               rust_sched_launcher_factory *launchfac) :\n     kernel(kernel),\n     srv(srv),\n     env(srv->env),\n@@ -17,8 +18,7 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     num_threads(num_threads),\n     id(id)\n {\n-    rust_thread_sched_launcher_factory launchfac;\n-    create_task_threads(&launchfac);\n+    create_task_threads(launchfac);\n }\n \n rust_scheduler::~rust_scheduler() {"}, {"sha": "af501511832c59b1d0ba567336775e9e043f0f2a", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/e1858882a49bf0666d4ffb3f45989ac9dbe9c843/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "patch": "@@ -38,7 +38,8 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n \n public:\n     rust_scheduler(rust_kernel *kernel, rust_srv *srv, size_t num_threads,\n-                   rust_sched_id id, bool allow_exit);\n+                   rust_sched_id id, bool allow_exit,\n+                   rust_sched_launcher_factory *launchfac);\n     ~rust_scheduler();\n \n     void start_task_threads();"}]}