{"sha": "61f47737b503d6af656ed48eea2a03ba35547b61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjQ3NzM3YjUwM2Q2YWY2NTZlZDQ4ZWVhMmEwM2JhMzU1NDdiNjE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T14:52:34Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T14:52:34Z"}, "message": "codegen_llvm: whitespace & formatting improvements", "tree": {"sha": "f1a92afb79603da5dd42a5ba937c07ea54b29262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a92afb79603da5dd42a5ba937c07ea54b29262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f47737b503d6af656ed48eea2a03ba35547b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f47737b503d6af656ed48eea2a03ba35547b61", "html_url": "https://github.com/rust-lang/rust/commit/61f47737b503d6af656ed48eea2a03ba35547b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f47737b503d6af656ed48eea2a03ba35547b61/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "html_url": "https://github.com/rust-lang/rust/commit/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8"}], "stats": {"total": 149, "additions": 69, "deletions": 80}, "files": [{"sha": "1b007a6d814e2045e58eb11ed7ec3536ca50fdfb", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -150,7 +150,7 @@ impl LlvmType for CastTarget {\n         // Create list of fields in the main structure\n         let mut args: Vec<_> =\n             self.prefix.iter().flat_map(|option_kind| option_kind.map(\n-                    |kind| Reg { kind: kind, size: self.prefix_chunk }.llvm_type(cx)))\n+                |kind| Reg { kind: kind, size: self.prefix_chunk }.llvm_type(cx)))\n             .chain((0..rest_count).map(|_| rest_ll_unit))\n             .collect();\n \n@@ -259,8 +259,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n }\n \n pub trait FnTypeExt<'tcx> {\n-    fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>)\n-                   -> Self;\n+    fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>) -> Self;\n     fn new(cx: &CodegenCx<'ll, 'tcx>,\n            sig: ty::FnSig<'tcx>,\n            extra_args: &[Ty<'tcx>]) -> Self;\n@@ -283,25 +282,24 @@ pub trait FnTypeExt<'tcx> {\n }\n \n impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n-    fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>)\n-                       -> Self {\n+    fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>) -> Self {\n         let fn_ty = instance.ty(cx.tcx);\n         let sig = ty_fn_sig(cx, fn_ty);\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         FnType::new(cx, sig, &[])\n     }\n \n     fn new(cx: &CodegenCx<'ll, 'tcx>,\n-               sig: ty::FnSig<'tcx>,\n-               extra_args: &[Ty<'tcx>]) -> Self {\n+           sig: ty::FnSig<'tcx>,\n+           extra_args: &[Ty<'tcx>]) -> Self {\n         FnType::new_internal(cx, sig, extra_args, |ty, _| {\n             ArgType::new(cx.layout_of(ty))\n         })\n     }\n \n     fn new_vtable(cx: &CodegenCx<'ll, 'tcx>,\n-                      sig: ty::FnSig<'tcx>,\n-                      extra_args: &[Ty<'tcx>]) -> Self {\n+                  sig: ty::FnSig<'tcx>,\n+                  extra_args: &[Ty<'tcx>]) -> Self {\n         FnType::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n             // Don't pass the vtable, it's not an argument of the virtual fn."}, {"sha": "6acf884214ab308b7202d82b6728963fe2eb9958", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -213,8 +213,8 @@ pub fn unsized_info(\n                             vtable_ptr.llvm_type(cx))\n         }\n         _ => bug!(\"unsized_info: invalid unsizing {:?} -> {:?}\",\n-                                     source,\n-                                     target),\n+                  source,\n+                  target),\n     }\n }\n \n@@ -340,11 +340,11 @@ pub fn cast_shift_expr_rhs(\n }\n \n fn cast_shift_rhs<'ll, F, G>(op: hir::BinOpKind,\n-                        lhs: &'ll Value,\n-                        rhs: &'ll Value,\n-                        trunc: F,\n-                        zext: G)\n-                        -> &'ll Value\n+                             lhs: &'ll Value,\n+                             rhs: &'ll Value,\n+                             trunc: F,\n+                             zext: G)\n+                             -> &'ll Value\n     where F: FnOnce(&'ll Value, &'ll Type) -> &'ll Value,\n           G: FnOnce(&'ll Value, &'ll Type) -> &'ll Value\n {\n@@ -566,8 +566,8 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n         if declare::get_defined_value(cx, \"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n             cx.sess().struct_span_err(sp, \"entry symbol `main` defined multiple times\")\n-                      .help(\"did you use #[no_mangle] on `fn main`? Use #[start] instead\")\n-                      .emit();\n+                     .help(\"did you use #[no_mangle] on `fn main`? Use #[start] instead\")\n+                     .emit();\n             cx.sess().abort_if_errors();\n             bug!();\n         }\n@@ -736,9 +736,9 @@ fn determine_cgu_reuse<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             rx: mpsc::Receiver<Box<dyn Any + Send>>)\n-                             -> OngoingCodegen {\n-\n+                               rx: mpsc::Receiver<Box<dyn Any + Send>>)\n+                               -> OngoingCodegen\n+{\n     check_for_rustc_errors_attr(tcx);\n \n     if let Some(true) = tcx.sess.opts.debugging_opts.thinlto {\n@@ -803,8 +803,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n-    let codegen_units =\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n+    let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n     let codegen_units = (*codegen_units).clone();\n \n     // Force all codegen_unit queries so they are already either red or green\n@@ -988,7 +987,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n                 if mode_string != \"lazy\" {\n                     let message = format!(\"Unknown codegen-item collection mode '{}'. \\\n                                            Falling back to 'lazy' mode.\",\n-                                           mode_string);\n+                                          mode_string);\n                     tcx.sess.warn(&message);\n                 }\n "}, {"sha": "964bfa15736b594ab52eecc173d4849d32aca9a5", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -110,10 +110,10 @@ impl Builder<'a, 'll, 'tcx> {\n         }\n         if self.cx.sess().count_llvm_insns() {\n             *self.cx.stats\n-                .borrow_mut()\n-                .llvm_insns\n-                .entry(category.to_string())\n-                .or_insert(0) += 1;\n+                    .borrow_mut()\n+                    .llvm_insns\n+                    .entry(category.to_string())\n+                    .or_insert(0) += 1;\n         }\n     }\n \n@@ -735,9 +735,9 @@ impl Builder<'a, 'll, 'tcx> {\n     }\n \n     pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,\n-                         inputs: &[&'ll Value], output: &'ll Type,\n-                         volatile: bool, alignstack: bool,\n-                         dia: AsmDialect) -> Option<&'ll Value> {\n+                           inputs: &[&'ll Value], output: &'ll Type,\n+                           volatile: bool, alignstack: bool,\n+                           dia: AsmDialect) -> Option<&'ll Value> {\n         self.count_insn(\"inlineasm\");\n \n         let volatile = if volatile { llvm::True }\n@@ -1093,7 +1093,7 @@ impl Builder<'a, 'll, 'tcx> {\n     ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMRustBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n-                                         order, failure_order, weak)\n+                                             order, failure_order, weak)\n         }\n     }\n     pub fn atomic_rmw("}, {"sha": "487f3e0759de0aeae80b44ee72e7defccc806984", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -124,7 +124,7 @@ pub fn get_static(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll Value {\n     assert!(!defined_in_current_codegen_unit,\n             \"consts::get_static() should always hit the cache for \\\n              statics defined in the same CGU, but did not for `{:?}`\",\n-             def_id);\n+            def_id);\n \n     let ty = instance.ty(cx.tcx);\n     let sym = cx.tcx.symbol_name(instance).as_str();"}, {"sha": "67f7a609c480a4d84ca045ff05562c571feb8064", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -59,8 +59,8 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n     /// Cache instances of monomorphic and polymorphic items\n     pub instances: RefCell<FxHashMap<Instance<'tcx>, &'a Value>>,\n     /// Cache generated vtables\n-    pub vtables: RefCell<FxHashMap<(Ty<'tcx>,\n-                                Option<ty::PolyExistentialTraitRef<'tcx>>), &'a Value>>,\n+    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>),\n+                                   &'a Value>>,\n     /// Cache of constant strings,\n     pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'a Value>>,\n \n@@ -213,9 +213,9 @@ pub unsafe fn create_module(\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n     crate fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               codegen_unit: Arc<CodegenUnit<'tcx>>,\n-               llvm_module: &'a ::ModuleLlvm)\n-               -> CodegenCx<'a, 'tcx> {\n+                 codegen_unit: Arc<CodegenUnit<'tcx>>,\n+                 llvm_module: &'a ::ModuleLlvm)\n+                 -> CodegenCx<'a, 'tcx> {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n         // attributes in LLVM IR as well as native dependencies (in C these\n@@ -270,8 +270,8 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n         let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CrateDebugContext::new(llmod);\n             debuginfo::metadata::compile_unit_metadata(tcx,\n-                                                        &codegen_unit.name().as_str(),\n-                                                        &dctx);\n+                                                       &codegen_unit.name().as_str(),\n+                                                       &dctx);\n             Some(dctx)\n         } else {\n             None"}, {"sha": "842bdf3cb493ff1b01772c5d4026c8388ae440e3", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -97,8 +97,8 @@ pub fn size_and_align_of_dst(bx: &Builder<'_, 'll, 'tcx>, t: Ty<'tcx>, info: Opt\n                     C_usize(cx, std::cmp::max(sized_align, unsized_align) as u64)\n                 }\n                 _ => bx.select(bx.icmp(llvm::IntUGT, sized_align, unsized_align),\n-                                sized_align,\n-                                unsized_align)\n+                               sized_align,\n+                               unsized_align)\n             };\n \n             // Issue #27023: must add any necessary padding to `size`"}, {"sha": "74326f8a08e5cdf83db415804ca025a9a0d26e97", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -115,8 +115,8 @@ pub fn codegen_intrinsic_call(\n     let llval = match name {\n         _ if simple.is_some() => {\n             bx.call(simple.unwrap(),\n-                     &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n-                     None)\n+                    &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n+                    None)\n         }\n         \"unreachable\" => {\n             return;\n@@ -373,7 +373,6 @@ pub fn codegen_intrinsic_call(\n                     return;\n                 }\n             }\n-\n         },\n         \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n             let sty = &arg_tys[0].sty;\n@@ -822,8 +821,7 @@ fn codegen_msvc_try(\n         let i64p = Type::i64(cx).ptr_to();\n         let ptr_align = bx.tcx().data_layout.pointer_align;\n         let slot = bx.alloca(i64p, \"slot\", ptr_align);\n-        bx.invoke(func, &[data], normal.llbb(), catchswitch.llbb(),\n-            None);\n+        bx.invoke(func, &[data], normal.llbb(), catchswitch.llbb(), None);\n \n         normal.ret(C_i32(cx, 0));\n \n@@ -911,8 +909,7 @@ fn codegen_gnu_try(\n         // being thrown.  The second value is a \"selector\" indicating which of\n         // the landing pad clauses the exception's type had been matched to.\n         // rust_try ignores the selector.\n-        let lpad_ty = Type::struct_(cx, &[Type::i8p(cx), Type::i32(cx)],\n-                                    false);\n+        let lpad_ty = Type::struct_(cx, &[Type::i8p(cx), Type::i32(cx)], false);\n         let vals = catch.landing_pad(lpad_ty, bx.cx.eh_personality(), 1);\n         catch.add_clause(vals, C_null(Type::i8p(cx)));\n         let ptr = catch.extract_value(vals, 0);\n@@ -1000,11 +997,11 @@ fn generic_simd_intrinsic(\n         ($msg: tt, $($fmt: tt)*) => {\n             span_invalid_monomorphization_error(\n                 bx.sess(), span,\n-                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n-                                 $msg),\n+                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \", $msg),\n                          name, $($fmt)*));\n         }\n     }\n+\n     macro_rules! return_error {\n         ($($fmt: tt)*) => {\n             {\n@@ -1021,14 +1018,13 @@ fn generic_simd_intrinsic(\n             }\n         };\n     }\n+\n     macro_rules! require_simd {\n         ($ty: expr, $position: expr) => {\n             require!($ty.is_simd(), \"expected SIMD {} type, found non-SIMD `{}`\", $position, $ty)\n         }\n     }\n \n-\n-\n     let tcx = bx.tcx();\n     let sig = tcx.normalize_erasing_late_bound_regions(\n         ty::ParamEnv::reveal_all(),\n@@ -1121,17 +1117,17 @@ fn generic_simd_intrinsic(\n         };\n \n         return Ok(bx.shuffle_vector(args[0].immediate(),\n-                                     args[1].immediate(),\n-                                     C_vector(&indices)))\n+                                    args[1].immediate(),\n+                                    C_vector(&indices)))\n     }\n \n     if name == \"simd_insert\" {\n         require!(in_elem == arg_tys[2],\n                  \"expected inserted type `{}` (element of input `{}`), found `{}`\",\n                  in_elem, in_ty, arg_tys[2]);\n         return Ok(bx.insert_element(args[0].immediate(),\n-                                     args[2].immediate(),\n-                                     args[1].immediate()))\n+                                    args[2].immediate(),\n+                                    args[1].immediate()))\n     }\n     if name == \"simd_extract\" {\n         require!(ret_ty == in_elem,\n@@ -1150,9 +1146,7 @@ fn generic_simd_intrinsic(\n         );\n         match m_elem_ty.sty {\n             ty::Int(_) => {},\n-            _ => {\n-                return_error!(\"mask element type is `{}`, expected `i_`\", m_elem_ty);\n-            }\n+            _ => return_error!(\"mask element type is `{}`, expected `i_`\", m_elem_ty)\n         }\n         // truncate the mask to a vector of i1s\n         let i1 = Type::i1(bx.cx);\n@@ -1177,8 +1171,7 @@ fn generic_simd_intrinsic(\n             ($msg: tt, $($fmt: tt)*) => {\n                 span_invalid_monomorphization_error(\n                     bx.sess(), span,\n-                    &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n-                                     $msg),\n+                    &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \", $msg),\n                              name, $($fmt)*));\n             }\n         }\n@@ -1312,7 +1305,7 @@ fn generic_simd_intrinsic(\n     }\n \n \n-    if name == \"simd_gather\"  {\n+    if name == \"simd_gather\" {\n         // simd_gather(values: <N x T>, pointers: <N x *_ T>,\n         //             mask: <N x i{M}>) -> <N x T>\n         // * N: number of elements in the input vectors\n@@ -1360,7 +1353,7 @@ fn generic_simd_intrinsic(\n         // to the element type of the first argument\n         let (pointer_count, underlying_ty) = match arg_tys[1].simd_type(tcx).sty {\n             ty::RawPtr(p) if p.ty == in_elem => (ptr_count(arg_tys[1].simd_type(tcx)),\n-                                                   non_ptr(arg_tys[1].simd_type(tcx))),\n+                                                 non_ptr(arg_tys[1].simd_type(tcx))),\n             _ => {\n                 require!(false, \"expected element type `{}` of second argument `{}` \\\n                                  to be a pointer to the element type `{}` of the first \\\n@@ -1414,7 +1407,7 @@ fn generic_simd_intrinsic(\n         return Ok(v);\n     }\n \n-    if name == \"simd_scatter\"  {\n+    if name == \"simd_scatter\" {\n         // simd_scatter(values: <N x T>, pointers: <N x *mut T>,\n         //             mask: <N x i{M}>) -> ()\n         // * N: number of elements in the input vectors\n@@ -1570,7 +1563,6 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                                     )\n                                 }\n                             }\n-\n                         };\n                         Ok(bx.$float_reduce(acc, args[0].immediate()))\n                     }\n@@ -1750,9 +1742,9 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                     _ => {},\n                 }\n                 require!(false,\n-                            \"unsupported operation on `{}` with element `{}`\",\n-                            in_ty,\n-                            in_elem)\n+                         \"unsupported operation on `{}` with element `{}`\",\n+                         in_ty,\n+                         in_elem)\n             })*\n         }\n     }"}, {"sha": "63a8ab077e5ae494c90d00c14ce0b24da08288a0", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -306,7 +306,7 @@ impl ModuleCodegen {\n         };\n         let bytecode_compressed = if emit_bc_compressed {\n             Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n-                    .with_extension(RLIB_BYTECODE_EXTENSION))\n+                        .with_extension(RLIB_BYTECODE_EXTENSION))\n         } else {\n             None\n         };"}, {"sha": "7752465d885bbff47574b533b7bc8cc4f669af29", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -63,7 +63,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n             let of = ObjectFile::new(mb)\n                 .map(|of| OwningRef::new(box of))\n                 .ok_or_else(|| format!(\"provided path not an object file: '{}'\",\n-                                        filename.display()))?;\n+                                       filename.display()))?;\n             let buf = of.try_map(|of| search_meta_section(of, target, filename))?;\n             Ok(rustc_erase_owner!(buf))\n         }"}, {"sha": "a0d6cc4629589da5572e08bfac18c963e6e1ab70", "filename": "src/librustc_codegen_llvm/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -151,9 +151,9 @@ impl Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'll, 'tcx> {\n     }\n \n     fn visit_place(&mut self,\n-                    place: &mir::Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n-                    location: Location) {\n+                   place: &mir::Place<'tcx>,\n+                   context: PlaceContext<'tcx>,\n+                   location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n         let cx = self.fx.cx;\n "}, {"sha": "5be176f75c96a7ef88ed3b31d18b5ed92d8fa29c", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -49,9 +49,9 @@ impl FunctionCx<'a, 'll, 'tcx> {\n     }\n \n     fn codegen_terminator(&mut self,\n-                        mut bx: Builder<'a, 'll, 'tcx>,\n-                        bb: mir::BasicBlock,\n-                        terminator: &mir::Terminator<'tcx>)\n+                          mut bx: Builder<'a, 'll, 'tcx>,\n+                          bb: mir::BasicBlock,\n+                          terminator: &mir::Terminator<'tcx>)\n     {\n         debug!(\"codegen_terminator: {:?}\", terminator);\n "}, {"sha": "dab9b147cc0708d055dba215493bbc6d58842f12", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -108,8 +108,8 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\",\n-                         instance.def,\n-                         instance.substs.as_ptr() as usize)\n+                        instance.def,\n+                        instance.substs.as_ptr() as usize)\n             }\n             MonoItem::Static(id) => {\n                 format!(\"Static({:?})\", id)"}, {"sha": "2fa784161bd7776328dbd5a2aa44c10e0c651d0a", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f47737b503d6af656ed48eea2a03ba35547b61/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=61f47737b503d6af656ed48eea2a03ba35547b61", "patch": "@@ -132,7 +132,7 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         debug!(\"struct_llfields: {}: {:?} offset: {:?} target_offset: {:?} \\\n                 effective_field_align: {}\",\n-            i, field, offset, target_offset, effective_field_align.abi());\n+               i, field, offset, target_offset, effective_field_align.abi());\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n         let padding_align = prev_effective_align.min(effective_field_align);"}]}