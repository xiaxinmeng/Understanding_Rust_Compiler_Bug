{"sha": "37e7f0a629db70e19646c8322f3d3b18444577e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTdmMGE2MjlkYjcwZTE5NjQ2YzgzMjJmM2QzYjE4NDQ0NTc3ZTE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-15T14:48:52Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:40:22Z"}, "message": "Expanded tests for enum variants with generic args.", "tree": {"sha": "f83d69269c8b556a0ea67a613ddcc4b0e44916bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83d69269c8b556a0ea67a613ddcc4b0e44916bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e7f0a629db70e19646c8322f3d3b18444577e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e7f0a629db70e19646c8322f3d3b18444577e1", "html_url": "https://github.com/rust-lang/rust/commit/37e7f0a629db70e19646c8322f3d3b18444577e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e7f0a629db70e19646c8322f3d3b18444577e1/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66409e03346c23859a5ee0ff78ff44673725553e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66409e03346c23859a5ee0ff78ff44673725553e", "html_url": "https://github.com/rust-lang/rust/commit/66409e03346c23859a5ee0ff78ff44673725553e"}], "stats": {"total": 558, "additions": 419, "deletions": 139}, "files": [{"sha": "f8cac550b41b628a7d019dfa4d3505522fbe408c", "filename": "src/test/run-pass/enum-generic-args.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Frun-pass%2Fenum-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Frun-pass%2Fenum-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-generic-args.rs?ref=66409e03346c23859a5ee0ff78ff44673725553e", "patch": "@@ -1,34 +0,0 @@\n-#![feature(irrefutable_let_patterns)]\n-#![feature(type_alias_enum_variants)]\n-\n-#![allow(irrefutable_let_patterns)]\n-\n-enum Enum<T> { Variant(T) }\n-type Alias<T> = Enum<T>;\n-type AliasFixed = Enum<()>;\n-\n-macro_rules! is_variant {\n-    ($expr:expr) => (\n-        assert!(if let Enum::Variant::<()>(_) = $expr { true } else { false },\n-                \"expr does not have correct type\");\n-    )\n-}\n-\n-impl<T> Enum<T> {\n-    fn foo() {\n-        is_variant!(Self::Variant(()));\n-    }\n-}\n-\n-fn main() {\n-    is_variant!(Enum::Variant(()));\n-    is_variant!(Enum::Variant::<()>(()));\n-    is_variant!(Enum::<()>::Variant(()));\n-\n-    is_variant!(Alias::Variant(()));\n-    is_variant!(Alias::<()>::Variant(()));\n-\n-    is_variant!(AliasFixed::Variant(()));\n-\n-    Enum::<()>::foo();\n-}"}, {"sha": "bb4a4c9cf0c0cdbfa7861078070c75496c60abe5", "filename": "src/test/run-pass/enum-variant-generic-args.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs?ref=37e7f0a629db70e19646c8322f3d3b18444577e1", "patch": "@@ -0,0 +1,55 @@\n+#![feature(irrefutable_let_patterns)]\n+#![feature(type_alias_enum_variants)]\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+type Alias<T> = Enum<T>;\n+type AliasFixed = Enum<()>;\n+\n+macro_rules! is_variant {\n+    (TSVariant, $expr:expr) => (is_variant!(@TSVariant, (_), $expr));\n+    (SVariant, $expr:expr) => (is_variant!(@SVariant, { v: _ }, $expr));\n+    (@$variant:ident, $matcher:tt, $expr:expr) => (\n+        assert!(if let Enum::$variant::<()> $matcher = $expr { true } else { false },\n+                \"expr does not have correct type\");\n+    );\n+}\n+\n+impl<T> Enum<T> {\n+    fn ts_variant() {\n+        is_variant!(TSVariant, Self::TSVariant(()));\n+    }\n+\n+    fn s_variant() {\n+        is_variant!(SVariant, Self::SVariant { v: () });\n+    }\n+}\n+\n+fn main() {\n+    // Tuple struct variant\n+\n+    is_variant!(TSVariant, Enum::TSVariant(()));\n+    is_variant!(TSVariant, Enum::TSVariant::<()>(()));\n+    is_variant!(TSVariant, Enum::<()>::TSVariant(()));\n+\n+    is_variant!(TSVariant, Alias::TSVariant(()));\n+    is_variant!(TSVariant, Alias::<()>::TSVariant(()));\n+\n+    is_variant!(TSVariant, AliasFixed::TSVariant(()));\n+\n+    Enum::<()>::ts_variant();\n+\n+    // Struct variant\n+\n+    is_variant!(SVariant, Enum::SVariant { v: () });\n+    is_variant!(SVariant, Enum::SVariant::<()> { v: () });\n+    is_variant!(SVariant, Enum::<()>::SVariant { v: () });\n+\n+    is_variant!(SVariant, Alias::SVariant { v: () });\n+    is_variant!(SVariant, Alias::<()>::SVariant { v: () });\n+\n+    is_variant!(SVariant, AliasFixed::SVariant { v: () });\n+\n+    Enum::<()>::s_variant();\n+}"}, {"sha": "0cf413babcbf658f38ba1975fa0093d3eedafcac", "filename": "src/test/run-pass/type-alias-enum-variants-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs?ref=37e7f0a629db70e19646c8322f3d3b18444577e1", "patch": "@@ -0,0 +1,30 @@\n+#![feature(type_alias_enum_variants)]\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum Foo {\n+    Bar(i32),\n+    Baz { i: i32 },\n+}\n+\n+type FooAlias = Foo;\n+type OptionAlias = Option<i32>;\n+\n+impl Foo {\n+    fn foo() -> Self {\n+        Self::Bar(3)\n+    }\n+}\n+\n+fn main() {\n+    let t = FooAlias::Bar(1);\n+    assert_eq!(t, Foo::Bar(1));\n+    let t = FooAlias::Baz { i: 2 };\n+    assert_eq!(t, Foo::Baz { i: 2 });\n+    match t {\n+        FooAlias::Bar(_i) => {}\n+        FooAlias::Baz { i } => { assert_eq!(i, 2); }\n+    }\n+    assert_eq!(Foo::foo(), Foo::Bar(3));\n+\n+    assert_eq!(OptionAlias::Some(4), Option::Some(4));\n+}"}, {"sha": "21378b044e1b6be376e71049030f6f54a31ae324", "filename": "src/test/ui/enum-generic-args.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Fui%2Fenum-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Fui%2Fenum-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-generic-args.rs?ref=66409e03346c23859a5ee0ff78ff44673725553e", "patch": "@@ -1,35 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-enum Enum<T> { Variant(T) }\n-type Alias<T> = Enum<T>;\n-type AliasFixed = Enum<()>;\n-\n-impl<T> Enum<T> {\n-    fn foo() {\n-        Self::Variant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n-        Self::<()>::Variant(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n-        Self::<()>::Variant::<()>(());\n-        //~^ ERROR type parameters are not allowed on this type [E0109]\n-        //~^^ ERROR type parameters are not allowed on this type [E0109]\n-    }\n-}\n-\n-fn main() {\n-    Enum::<()>::Variant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-\n-    Alias::Variant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-    Alias::<()>::Variant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-\n-    AliasFixed::Variant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-    AliasFixed::<()>::Variant(());\n-    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n-    AliasFixed::<()>::Variant::<()>(());\n-    //~^ ERROR type parameters are not allowed on this type [E0109]\n-    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n-}"}, {"sha": "0807ee15dc75717a1ea125cfed7e4b6de130ca3d", "filename": "src/test/ui/enum-generic-args.stderr", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Fui%2Fenum-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66409e03346c23859a5ee0ff78ff44673725553e/src%2Ftest%2Fui%2Fenum-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-generic-args.stderr?ref=66409e03346c23859a5ee0ff78ff44673725553e", "patch": "@@ -1,70 +0,0 @@\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:9:25\n-   |\n-LL |         Self::Variant::<()>(());\n-   |                         ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:11:16\n-   |\n-LL |         Self::<()>::Variant(());\n-   |                ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:13:16\n-   |\n-LL |         Self::<()>::Variant::<()>(());\n-   |                ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:13:31\n-   |\n-LL |         Self::<()>::Variant::<()>(());\n-   |                               ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:20:27\n-   |\n-LL |     Enum::<()>::Variant::<()>(());\n-   |                           ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:23:22\n-   |\n-LL |     Alias::Variant::<()>(());\n-   |                      ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:25:28\n-   |\n-LL |     Alias::<()>::Variant::<()>(());\n-   |                            ^^ type parameter not allowed\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:28:27\n-   |\n-LL |     AliasFixed::Variant::<()>(());\n-   |                           ^^ type parameter not allowed\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-generic-args.rs:30:18\n-   |\n-LL |     AliasFixed::<()>::Variant(());\n-   |                  ^^ unexpected type argument\n-\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-generic-args.rs:32:18\n-   |\n-LL |     AliasFixed::<()>::Variant::<()>(());\n-   |                  ^^ unexpected type argument\n-\n-error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/enum-generic-args.rs:32:33\n-   |\n-LL |     AliasFixed::<()>::Variant::<()>(());\n-   |                                 ^^ type parameter not allowed\n-\n-error: aborting due to 11 previous errors\n-\n-Some errors occurred: E0107, E0109.\n-For more information about an error, try `rustc --explain E0107`."}, {"sha": "37109e89624b00e349be688586ba5d763922bb77", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=37e7f0a629db70e19646c8322f3d3b18444577e1", "patch": "@@ -0,0 +1,65 @@\n+#![feature(type_alias_enum_variants)]\n+\n+enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+type Alias<T> = Enum<T>;\n+type AliasFixed = Enum<()>;\n+\n+impl<T> Enum<T> {\n+    fn ts_variant() {\n+        Self::TSVariant::<()>(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Self::<()>::TSVariant(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Self::<()>::TSVariant::<()>(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^^ ERROR type parameters are not allowed on this type [E0109]\n+    }\n+\n+    fn s_variant() {\n+        Self::SVariant::<()>(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Self::<()>::SVariant(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Self::<()>::SVariant::<()>(());\n+        //~^ ERROR type parameters are not allowed on this type [E0109]\n+        //~^^ ERROR type parameters are not allowed on this type [E0109]\n+    }\n+}\n+\n+fn main() {\n+    // Tuple struct variant\n+\n+    Enum::<()>::TSVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    Alias::TSVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    Alias::<()>::TSVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    AliasFixed::TSVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    AliasFixed::<()>::TSVariant(());\n+    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    AliasFixed::<()>::TSVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+\n+    // Struct variant\n+\n+    Enum::<()>::SVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    Alias::SVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    Alias::<()>::SVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    AliasFixed::SVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    AliasFixed::<()>::SVariant(());\n+    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    AliasFixed::<()>::SVariant::<()>(());\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+}"}, {"sha": "4cae164b6ff46723b1fcd8146e4e65e21fd5a905", "filename": "src/test/ui/enum-variant-generic-args.stderr", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr?ref=37e7f0a629db70e19646c8322f3d3b18444577e1", "patch": "@@ -0,0 +1,259 @@\n+error[E0423]: expected function, found struct variant `Enum::SVariant`\n+  --> $DIR/enum-variant-generic-args.rs:50:5\n+   |\n+LL |     Enum::<()>::SVariant::<()>(());\n+   |     ^^^^^^^^^^^^--------^^^^^^\n+   |     |           |\n+   |     |           did you mean `TSVariant`?\n+   |     did you mean `Enum::SVariant { /* fields */ }`?\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:9:27\n+   |\n+LL |         Self::TSVariant::<()>(());\n+   |                           ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:11:16\n+   |\n+LL |         Self::<()>::TSVariant(());\n+   |                ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:13:16\n+   |\n+LL |         Self::<()>::TSVariant::<()>(());\n+   |                ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:13:33\n+   |\n+LL |         Self::<()>::TSVariant::<()>(());\n+   |                                 ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:19:26\n+   |\n+LL |         Self::SVariant::<()>(());\n+   |                          ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<Self>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:19:9\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<Self>::SVariant::<()>` defined here\n+...\n+LL |         Self::SVariant::<()>(());\n+   |         ^^^^^^^^^^^^^^^^^^^^----\n+   |         |\n+   |         call expression requires function\n+help: `<Self>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |         <Self>::SVariant::<()>;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:21:16\n+   |\n+LL |         Self::<()>::SVariant(());\n+   |                ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<Self<()>>::SVariant`\n+  --> $DIR/enum-variant-generic-args.rs:21:9\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<Self<()>>::SVariant` defined here\n+...\n+LL |         Self::<()>::SVariant(());\n+   |         ^^^^^^^^^^^^^^^^^^^^----\n+   |         |\n+   |         call expression requires function\n+help: `<Self<()>>::SVariant` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |         <Self<()>>::SVariant;\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:23:16\n+   |\n+LL |         Self::<()>::SVariant::<()>(());\n+   |                ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:23:32\n+   |\n+LL |         Self::<()>::SVariant::<()>(());\n+   |                                ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<Self<()>>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:23:9\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<Self<()>>::SVariant::<()>` defined here\n+...\n+LL |         Self::<()>::SVariant::<()>(());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   |         |\n+   |         call expression requires function\n+help: `<Self<()>>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |         <Self<()>>::SVariant::<()>;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:32:29\n+   |\n+LL |     Enum::<()>::TSVariant::<()>(());\n+   |                             ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:35:24\n+   |\n+LL |     Alias::TSVariant::<()>(());\n+   |                        ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:37:30\n+   |\n+LL |     Alias::<()>::TSVariant::<()>(());\n+   |                              ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:40:29\n+   |\n+LL |     AliasFixed::TSVariant::<()>(());\n+   |                             ^^ type parameter not allowed\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:42:18\n+   |\n+LL |     AliasFixed::<()>::TSVariant(());\n+   |                  ^^ unexpected type argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:44:18\n+   |\n+LL |     AliasFixed::<()>::TSVariant::<()>(());\n+   |                  ^^ unexpected type argument\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:44:35\n+   |\n+LL |     AliasFixed::<()>::TSVariant::<()>(());\n+   |                                   ^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:53:23\n+   |\n+LL |     Alias::SVariant::<()>(());\n+   |                       ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<Alias>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:53:5\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<Alias>::SVariant::<()>` defined here\n+...\n+LL |     Alias::SVariant::<()>(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^----\n+   |     |\n+   |     call expression requires function\n+help: `<Alias>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <Alias>::SVariant::<()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:55:29\n+   |\n+LL |     Alias::<()>::SVariant::<()>(());\n+   |                             ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<Alias<()>>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:55:5\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<Alias<()>>::SVariant::<()>` defined here\n+...\n+LL |     Alias::<()>::SVariant::<()>(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   |     |\n+   |     call expression requires function\n+help: `<Alias<()>>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <Alias<()>>::SVariant::<()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:58:28\n+   |\n+LL |     AliasFixed::SVariant::<()>(());\n+   |                            ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<AliasFixed>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:58:5\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<AliasFixed>::SVariant::<()>` defined here\n+...\n+LL |     AliasFixed::SVariant::<()>(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   |     |\n+   |     call expression requires function\n+help: `<AliasFixed>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <AliasFixed>::SVariant::<()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:60:18\n+   |\n+LL |     AliasFixed::<()>::SVariant(());\n+   |                  ^^ unexpected type argument\n+\n+error[E0618]: expected function, found enum variant `<AliasFixed<()>>::SVariant`\n+  --> $DIR/enum-variant-generic-args.rs:60:5\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<AliasFixed<()>>::SVariant` defined here\n+...\n+LL |     AliasFixed::<()>::SVariant(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   |     |\n+   |     call expression requires function\n+help: `<AliasFixed<()>>::SVariant` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <AliasFixed<()>>::SVariant;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:62:18\n+   |\n+LL |     AliasFixed::<()>::SVariant::<()>(());\n+   |                  ^^ unexpected type argument\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/enum-variant-generic-args.rs:62:34\n+   |\n+LL |     AliasFixed::<()>::SVariant::<()>(());\n+   |                                  ^^ type parameter not allowed\n+\n+error[E0618]: expected function, found enum variant `<AliasFixed<()>>::SVariant::<()>`\n+  --> $DIR/enum-variant-generic-args.rs:62:5\n+   |\n+LL | enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+   |                              ----------------- `<AliasFixed<()>>::SVariant::<()>` defined here\n+...\n+LL |     AliasFixed::<()>::SVariant::<()>(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   |     |\n+   |     call expression requires function\n+help: `<AliasFixed<()>>::SVariant::<()>` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <AliasFixed<()>>::SVariant::<()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 30 previous errors\n+\n+Some errors occurred: E0107, E0109, E0423, E0618.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "abed190d22b0cdb51816236acdcc5e7d9e48b4db", "filename": "src/test/ui/type-alias-enum-variants-panic.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e7f0a629db70e19646c8322f3d3b18444577e1/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs?ref=37e7f0a629db70e19646c8322f3d3b18444577e1", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_enum_variants)]\n+\n+enum Enum { Variant {} }\n+type Alias = Enum;\n+\n+fn main() {\n+    Alias::Variant;\n+    let Alias::Variant = panic!();\n+    let Alias::Variant(..) = panic!();\n+}"}]}