{"sha": "404c50f56200c28ebbee64113c9dfc0120c33e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNGM1MGY1NjIwMGMyOGViYmVlNjQxMTNjOWRmYzAxMjBjMzNlN2E=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-13T14:22:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-13T17:52:24Z"}, "message": "NFC: clippy cargo dev: move generation of clap config into a function", "tree": {"sha": "e61fa89c2151654cd43b3f504ed33d4131849c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61fa89c2151654cd43b3f504ed33d4131849c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404c50f56200c28ebbee64113c9dfc0120c33e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404c50f56200c28ebbee64113c9dfc0120c33e7a", "html_url": "https://github.com/rust-lang/rust/commit/404c50f56200c28ebbee64113c9dfc0120c33e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404c50f56200c28ebbee64113c9dfc0120c33e7a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2b3576ebe6d86388a1ee009a95d6b0b52c8471", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2b3576ebe6d86388a1ee009a95d6b0b52c8471", "html_url": "https://github.com/rust-lang/rust/commit/6b2b3576ebe6d86388a1ee009a95d6b0b52c8471"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "5938b788101325fdf81f9e9e572e43cf717b22c7", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/404c50f56200c28ebbee64113c9dfc0120c33e7a/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404c50f56200c28ebbee64113c9dfc0120c33e7a/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=404c50f56200c28ebbee64113c9dfc0120c33e7a", "patch": "@@ -1,10 +1,52 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n-use clap::{App, Arg, SubCommand};\n+use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n \n fn main() {\n-    let matches = App::new(\"Clippy developer tooling\")\n+    let matches = get_clap_config();\n+\n+    match matches.subcommand() {\n+        (\"bless\", Some(_)) => {\n+            bless::bless();\n+        },\n+        (\"fmt\", Some(matches)) => {\n+            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+        },\n+        (\"update_lints\", Some(matches)) => {\n+            if matches.is_present(\"print-only\") {\n+                update_lints::print_lints();\n+            } else if matches.is_present(\"check\") {\n+                update_lints::run(update_lints::UpdateMode::Check);\n+            } else {\n+                update_lints::run(update_lints::UpdateMode::Change);\n+            }\n+        },\n+        (\"new_lint\", Some(matches)) => {\n+            match new_lint::create(\n+                matches.value_of(\"pass\"),\n+                matches.value_of(\"name\"),\n+                matches.value_of(\"category\"),\n+            ) {\n+                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n+                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+            }\n+        },\n+        (\"limit_stderr_length\", _) => {\n+            stderr_length_check::check();\n+        },\n+        (\"ra-setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n+        (\"serve\", Some(matches)) => {\n+            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n+            let lint = matches.value_of(\"lint\");\n+            serve::run(port, lint);\n+        },\n+        _ => {},\n+    }\n+}\n+\n+fn get_clap_config<'a>() -> ArgMatches<'a> {\n+    App::new(\"Clippy developer tooling\")\n         .subcommand(SubCommand::with_name(\"bless\").about(\"bless the test output changes\"))\n         .subcommand(\n             SubCommand::with_name(\"fmt\")\n@@ -26,16 +68,16 @@ fn main() {\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n-                     * the lint count in README.md is correct\\n \\\n-                     * the changelog contains markdown link references at the bottom\\n \\\n-                     * all lint groups include the correct lints\\n \\\n-                     * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n-                     * all lints are registered in the lint store\",\n+                 * the lint count in README.md is correct\\n \\\n+                 * the changelog contains markdown link references at the bottom\\n \\\n+                 * all lint groups include the correct lints\\n \\\n+                 * lint modules in `clippy_lints/*` are visible in `src/lifb.rs` via `pub mod`\\n \\\n+                 * all lints are registered in the lint store\",\n                 )\n                 .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n                     \"Print a table of lints to STDOUT. \\\n-                     This does not include deprecated and internal lints. \\\n-                     (Does not modify any files)\",\n+                 This does not include deprecated and internal lints. \\\n+                 (Does not modify any files)\",\n                 ))\n                 .arg(\n                     Arg::with_name(\"check\")\n@@ -114,43 +156,5 @@ fn main() {\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n         )\n-        .get_matches();\n-\n-    match matches.subcommand() {\n-        (\"bless\", Some(_)) => {\n-            bless::bless();\n-        },\n-        (\"fmt\", Some(matches)) => {\n-            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n-        },\n-        (\"update_lints\", Some(matches)) => {\n-            if matches.is_present(\"print-only\") {\n-                update_lints::print_lints();\n-            } else if matches.is_present(\"check\") {\n-                update_lints::run(update_lints::UpdateMode::Check);\n-            } else {\n-                update_lints::run(update_lints::UpdateMode::Change);\n-            }\n-        },\n-        (\"new_lint\", Some(matches)) => {\n-            match new_lint::create(\n-                matches.value_of(\"pass\"),\n-                matches.value_of(\"name\"),\n-                matches.value_of(\"category\"),\n-            ) {\n-                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n-                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n-            }\n-        },\n-        (\"limit_stderr_length\", _) => {\n-            stderr_length_check::check();\n-        },\n-        (\"ra-setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n-        (\"serve\", Some(matches)) => {\n-            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n-            let lint = matches.value_of(\"lint\");\n-            serve::run(port, lint);\n-        },\n-        _ => {},\n-    }\n+        .get_matches()\n }"}]}