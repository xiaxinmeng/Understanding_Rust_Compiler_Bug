{"sha": "2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTUzODdiN2M1OGEyNDFkNmI0OTI5YjliOGJkOTA3OGE3YzczYmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-02T20:09:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-03T11:19:55Z"}, "message": "Rename load_value_pair to load_scalar_pair and fix dynamic dispatch with arbitrary self types", "tree": {"sha": "e873e38b4534faefa1a507cc1640a4ee99634c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e873e38b4534faefa1a507cc1640a4ee99634c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "html_url": "https://github.com/rust-lang/rust/commit/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57feadcc13bbf32c599e79c811162f576de0efd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/57feadcc13bbf32c599e79c811162f576de0efd1", "html_url": "https://github.com/rust-lang/rust/commit/57feadcc13bbf32c599e79c811162f576de0efd1"}], "stats": {"total": 165, "additions": 135, "deletions": 30}, "files": [{"sha": "5e7d4762179646f8ea3862403204704e9902993f", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -0,0 +1,83 @@\n+// Adapted from rustc run-pass test suite\n+\n+#![feature(no_core, arbitrary_self_types, box_syntax)]\n+#![feature(rustc_attrs)]\n+\n+#![feature(start, lang_items)]\n+#![no_core]\n+\n+extern crate mini_core;\n+\n+use mini_core::*;\n+use mini_core::libc::*;\n+\n+macro_rules! assert_eq {\n+    ($l:expr, $r: expr) => {\n+        if $l != $r {\n+            panic(&(stringify!($l != $r), file!(), line!(), 0));\n+        }\n+    }\n+}\n+\n+struct Ptr<T: ?Sized>(Box<T>);\n+\n+impl<T: ?Sized> Deref for Ptr<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n+\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n+\n+struct Wrapper<T: ?Sized>(T);\n+\n+impl<T: ?Sized> Deref for Wrapper<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n+\n+\n+trait Trait {\n+    // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n+    // without unsized_locals), but wrappers arond `Self` currently are not.\n+    // FIXME (mikeyhew) uncomment this when unsized rvalues object-safety is implemented\n+    // fn wrapper(self: Wrapper<Self>) -> i32;\n+    fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;\n+    fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n+    fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n+}\n+\n+impl Trait for i32 {\n+    fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32 {\n+        **self\n+    }\n+    fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32 {\n+        **self\n+    }\n+    fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32 {\n+        ***self\n+    }\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    let pw = Ptr(box Wrapper(5)) as Ptr<Wrapper<dyn Trait>>;\n+    assert_eq!(pw.ptr_wrapper(), 5);\n+\n+    let wp = Wrapper(Ptr(box 6)) as Wrapper<Ptr<dyn Trait>>;\n+    assert_eq!(wp.wrapper_ptr(), 6);\n+\n+    let wpw = Wrapper(Ptr(box Wrapper(7))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n+    assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n+\n+    0\n+}"}, {"sha": "ffc2cd8fb65a052e67d552a1ca5f58ad2e45573f", "filename": "example/mini_core.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -27,6 +27,7 @@ impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n \n #[lang = \"receiver\"]\n pub trait Receiver {}\n@@ -216,6 +217,15 @@ impl PartialEq for usize {\n     }\n }\n \n+impl PartialEq for i32 {\n+    fn eq(&self, other: &i32) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &i32) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for isize {\n     fn eq(&self, other: &isize) -> bool {\n         (*self) == (*other)\n@@ -306,6 +316,13 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     drop_in_place(to_drop);\n }\n \n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target: ?Sized;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n #[lang = \"owned_box\"]\n pub struct Box<T: ?Sized>(*mut T);\n \n@@ -317,6 +334,14 @@ impl<T: ?Sized> Drop for Box<T> {\n     }\n }\n \n+impl<T> Deref for Box<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &**self\n+    }\n+}\n+\n #[lang = \"exchange_malloc\"]\n // Make it available to jited mini_core_hello_world\n // FIXME remove next line when jit supports linking rlibs"}, {"sha": "b816eab4694179683e1c1032727a7224bfc1ee33", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -537,7 +537,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         } else {\n                             // fat-ptr -> thin-ptr\n-                            let (ptr, _extra) = operand.load_value_pair(fx);\n+                            let (ptr, _extra) = operand.load_scalar_pair(fx);\n                             lval.write_cvalue(fx, CValue::ByVal(ptr, dest_layout))\n                         }\n                     } else if let ty::Adt(adt_def, _substs) = from_ty.sty {\n@@ -1101,8 +1101,8 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n             Offset (_) bug; // Handled above\n         }\n     } else {\n-        let (lhs_ptr, lhs_extra) = lhs.load_value_pair(fx);\n-        let (rhs_ptr, rhs_extra) = rhs.load_value_pair(fx);\n+        let (lhs_ptr, lhs_extra) = lhs.load_scalar_pair(fx);\n+        let (rhs_ptr, rhs_extra) = rhs.load_scalar_pair(fx);\n         let res = match bin_op {\n             BinOp::Eq => {\n                 let ptr_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_ptr, rhs_ptr);"}, {"sha": "6da473bcbefe3541b6e579c886192707126791e8", "filename": "src/common.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -166,33 +166,33 @@ impl<'tcx> CValue<'tcx> {\n                 fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,\n-            CValue::ByValPair(_, _, _layout) => bug!(\"Please use load_value_pair for ByValPair\"),\n+            CValue::ByValPair(_, _, _layout) => bug!(\"Please use load_scalar_pair for ByValPair\"),\n         }\n     }\n \n-    pub fn load_value_pair<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> (Value, Value)\n+    /// Load a value pair with layout.abi of scalar pair\n+    pub fn load_scalar_pair<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> (Value, Value)\n     where\n         'tcx: 'a,\n     {\n         match self {\n             CValue::ByRef(addr, layout) => {\n-                assert_eq!(\n-                    layout.size.bytes(),\n-                    fx.tcx.data_layout.pointer_size.bytes() * 2\n+                let (a, b) = match &layout.abi {\n+                    layout::Abi::ScalarPair(a, b) => (a.clone(), b.clone()),\n+                    _ => unreachable!(),\n+                };\n+                let clif_ty1 = crate::abi::scalar_to_clif_type(fx.tcx, a.clone());\n+                let clif_ty2 = crate::abi::scalar_to_clif_type(fx.tcx, b);\n+                let val1 = fx.bcx.ins().load(clif_ty1, MemFlags::new(), addr, 0);\n+                let val2 = fx.bcx.ins().load(\n+                    clif_ty2,\n+                    MemFlags::new(),\n+                    addr,\n+                    a.value.size(&fx.tcx).bytes() as i32,\n                 );\n-                let val1_offset = layout.fields.offset(0).bytes() as i32;\n-                let val2_offset = layout.fields.offset(1).bytes() as i32;\n-                let val1 = fx\n-                    .bcx\n-                    .ins()\n-                    .load(fx.pointer_type, MemFlags::new(), addr, val1_offset);\n-                let val2 = fx\n-                    .bcx\n-                    .ins()\n-                    .load(fx.pointer_type, MemFlags::new(), addr, val2_offset);\n                 (val1, val2)\n             }\n-            CValue::ByVal(_, _layout) => bug!(\"Please use load_value for ByVal\"),\n+            CValue::ByVal(_, _layout) => bug!(\"Please use load_scalar for ByVal\"),\n             CValue::ByValPair(val1, val2, _layout) => (val1, val2),\n         }\n     }"}, {"sha": "ba3e69857bba41c10c740e10ec7a01ff325d4b33", "filename": "src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -156,7 +156,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         size_of_val, <T> (c ptr) {\n             let layout = fx.layout_of(T);\n             let size = if layout.is_unsized() {\n-                let (_ptr, info) = ptr.load_value_pair(fx);\n+                let (_ptr, info) = ptr.load_scalar_pair(fx);\n                 let (size, _align) = crate::unsize::size_and_align_of_dst(fx, layout.ty, info);\n                 size\n             } else {\n@@ -175,7 +175,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         min_align_of_val, <T> (c ptr) {\n             let layout = fx.layout_of(T);\n             let align = if layout.is_unsized() {\n-                let (_ptr, info) = ptr.load_value_pair(fx);\n+                let (_ptr, info) = ptr.load_scalar_pair(fx);\n                 let (_size, align) = crate::unsize::size_and_align_of_dst(fx, layout.ty, info);\n                 align\n             } else {"}, {"sha": "627199ddab6c359d56c8f1d588d199a46c92a258", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -96,7 +96,7 @@ pub fn coerce_unsized_into<'a, 'tcx: 'a>(\n         {\n             // fat-ptr to fat-ptr unsize preserves the vtable\n             // i.e., &'a fmt::Debug+Send => &'a fmt::Debug\n-            src.load_value_pair(fx)\n+            src.load_scalar_pair(fx)\n         } else {\n             let base = src.load_scalar(fx);\n             unsize_thin_ptr(fx, base, src_ty, dst_ty)"}, {"sha": "6cfd59dcd089411bf948727279929f59d76ee03c", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -50,14 +50,7 @@ pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n     arg: CValue<'tcx>,\n     idx: usize,\n ) -> (Value, Value) {\n-    let arg = if arg.layout().ty.is_box() {\n-        // Cast `Box<T>` to `*mut T` so `load_value_pair` works\n-        arg.unchecked_cast_to(fx.layout_of(fx.tcx.mk_mut_ptr(arg.layout().ty.boxed_ty())))\n-    } else {\n-        arg\n-    };\n-\n-    let (ptr, vtable) = arg.load_value_pair(fx);\n+    let (ptr, vtable) = arg.load_scalar_pair(fx);\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes();\n     let func_ref = fx.bcx.ins().load(\n         pointer_ty(fx.tcx),"}, {"sha": "5653caee162413804728f7b8a8730b1ffbae69c3", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -17,6 +17,10 @@ echo \"[AOT] mini_core_hello_world\"\n $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin\n ./target/out/mini_core_hello_world abc bcd\n \n+echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n+$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin\n+./target/out/arbitrary_self_types_pointers_and_wrappers\n+\n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh\n "}]}