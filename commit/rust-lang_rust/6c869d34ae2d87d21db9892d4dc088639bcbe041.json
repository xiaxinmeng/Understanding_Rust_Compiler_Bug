{"sha": "6c869d34ae2d87d21db9892d4dc088639bcbe041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODY5ZDM0YWUyZDg3ZDIxZGI5ODkyZDRkYzA4ODYzOWJjYmUwNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-16T00:13:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-16T00:13:26Z"}, "message": "Auto merge of #81057 - GuillaumeGomez:rollup-yl2kqst, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #77693 (Add test for #59352)\n - #80515 (Improve JS performance by storing length before comparing to it in loops)\n - #81030 (Update mdbook)\n - #81033 (Remove useless `clean::Variant` struct)\n - #81049 (inline: Round word-size cost estimates up)\n - #81054 (Drop a few unneeded borrows)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "934fcc1bd4782a3810b643633412ab8649ea58fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934fcc1bd4782a3810b643633412ab8649ea58fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041", "html_url": "https://github.com/rust-lang/rust/commit/6c869d34ae2d87d21db9892d4dc088639bcbe041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "html_url": "https://github.com/rust-lang/rust/commit/fcbd305ee93f49f19313b9bbeaa25ba8837030d9"}, {"sha": "f8b1baac113ed85175453e6dad709dbd65836540", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b1baac113ed85175453e6dad709dbd65836540", "html_url": "https://github.com/rust-lang/rust/commit/f8b1baac113ed85175453e6dad709dbd65836540"}], "stats": {"total": 343, "additions": 231, "deletions": 112}, "files": [{"sha": "5e5a48ad5258be3803e9790de07ad66a6b5dd29d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -1973,9 +1973,9 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.5\"\n+version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21251d3eb9ca5e8ac5b73384ddaa483a9bbc7d7dcd656b1fa8f266634810334a\"\n+checksum = \"b3d948b64449003363127ed6c6139f03273982c3fe97da4cb3dee933e38ce38f\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\","}, {"sha": "07e637b88f9c04ae75da9f42d24ca7ed95dfa397", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -382,7 +382,7 @@ impl Inliner<'tcx> {\n             // Cost of the var is the size in machine-words, if we know\n             // it.\n             if let Some(size) = type_size_of(tcx, self.param_env, ty) {\n-                cost += (size / ptr_size) as usize;\n+                cost += ((size + ptr_size - 1) / ptr_size) as usize;\n             } else {\n                 cost += UNKNOWN_SIZE_COST;\n             }"}, {"sha": "6177e39ba9e4c09cba1c902a6afad49d70731037", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -813,25 +813,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if ty.is_never() {\n                         None\n                     } else {\n-                        Some(match &elem.kind {\n+                        Some(match elem.kind {\n                             // Point at the tail expression when possible.\n                             hir::ExprKind::Block(block, _) => {\n-                                block.expr.as_ref().map_or(block.span, |e| e.span)\n+                                block.expr.map_or(block.span, |e| e.span)\n                             }\n                             _ => elem.span,\n                         })\n                     }\n                 })\n         };\n \n-        if let hir::ExprKind::If(_, _, Some(el)) = &expr.kind {\n+        if let hir::ExprKind::If(_, _, Some(el)) = expr.kind {\n             if let Some(rslt) = check_in_progress(el) {\n                 return rslt;\n             }\n         }\n \n-        if let hir::ExprKind::Match(_, arms, _) = &expr.kind {\n-            let mut iter = arms.iter().filter_map(|arm| check_in_progress(&arm.body));\n+        if let hir::ExprKind::Match(_, arms, _) = expr.kind {\n+            let mut iter = arms.iter().filter_map(|arm| check_in_progress(arm.body));\n             if let Some(span) = iter.next() {\n                 if iter.next().is_none() {\n                     return span;"}, {"sha": "545f432def5a7493890d8ce628ac7e0c784d4869", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -1840,11 +1840,11 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n-            CtorKind::Const => VariantKind::CLike,\n-            CtorKind::Fn => VariantKind::Tuple(\n+            CtorKind::Const => Variant::CLike,\n+            CtorKind::Fn => Variant::Tuple(\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n-            CtorKind::Fictive => VariantKind::Struct(VariantStruct {\n+            CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: doctree::Plain,\n                 fields_stripped: false,\n                 fields: self\n@@ -1861,25 +1861,21 @@ impl Clean<Item> for ty::VariantDef {\n                     .collect(),\n             }),\n         };\n-        let what_rustc_thinks = Item::from_def_id_and_parts(\n-            self.def_id,\n-            Some(self.ident.name),\n-            VariantItem(Variant { kind }),\n-            cx,\n-        );\n+        let what_rustc_thinks =\n+            Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), VariantItem(kind), cx);\n         // don't show `pub` for fields, which are always public\n         Item { visibility: Inherited, ..what_rustc_thinks }\n     }\n }\n \n-impl Clean<VariantKind> for hir::VariantData<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> VariantKind {\n+impl Clean<Variant> for hir::VariantData<'_> {\n+    fn clean(&self, cx: &DocContext<'_>) -> Variant {\n         match self {\n-            hir::VariantData::Struct(..) => VariantKind::Struct(self.clean(cx)),\n+            hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Tuple(..) => {\n-                VariantKind::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n             }\n-            hir::VariantData::Unit(..) => VariantKind::CLike,\n+            hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }\n }\n@@ -2048,7 +2044,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n \n impl Clean<Item> for hir::Variant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let kind = VariantItem(Variant { kind: self.data.clean(cx) });\n+        let kind = VariantItem(self.data.clean(cx));\n         let what_rustc_thinks =\n             Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n         // don't show `pub` for variants, which are always public"}, {"sha": "666b11b5f806dd1f42edde23e96e1b49c620df56", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -237,9 +237,7 @@ impl Item {\n         match *self.kind {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant { kind: VariantKind::Struct(ref vstruct) }) => {\n-                Some(vstruct.fields_stripped)\n-            }\n+            VariantItem(Variant::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n             _ => None,\n         }\n     }\n@@ -353,7 +351,7 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(Variant { kind: VariantKind::Struct(v) }) => v.fields.iter(),\n+            VariantItem(Variant::Struct(v)) => v.fields.iter(),\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -1719,12 +1717,7 @@ crate struct Enum {\n }\n \n #[derive(Clone, Debug)]\n-crate struct Variant {\n-    crate kind: VariantKind,\n-}\n-\n-#[derive(Clone, Debug)]\n-crate enum VariantKind {\n+crate enum Variant {\n     CLike,\n     Tuple(Vec<Type>),\n     Struct(VariantStruct),"}, {"sha": "b2773a29e29051d6a3423865facc393219b21e6e", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -55,13 +55,13 @@ crate trait DocFolder: Sized {\n             }\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n-                match i.kind {\n-                    VariantKind::Struct(mut j) => {\n+                match i {\n+                    Variant::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len()\n                             || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant { kind: VariantKind::Struct(j) })\n+                        VariantItem(Variant::Struct(j))\n                     }\n                     _ => VariantItem(i2),\n                 }"}, {"sha": "2db89e8a7ca687a27d1ca35d1d8672a5fd325928", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -3200,9 +3200,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"    \");\n                 let name = v.name.as_ref().unwrap();\n                 match *v.kind {\n-                    clean::VariantItem(ref var) => match var.kind {\n-                        clean::VariantKind::CLike => write!(w, \"{}\", name),\n-                        clean::VariantKind::Tuple(ref tys) => {\n+                    clean::VariantItem(ref var) => match var {\n+                        clean::Variant::CLike => write!(w, \"{}\", name),\n+                        clean::Variant::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name);\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n@@ -3212,7 +3212,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                             }\n                             write!(w, \")\");\n                         }\n-                        clean::VariantKind::Struct(ref s) => {\n+                        clean::Variant::Struct(ref s) => {\n                             render_struct(w, v, None, s.struct_type, &s.fields, \"    \", false, cx);\n                         }\n                     },\n@@ -3249,25 +3249,22 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 id = id,\n                 name = variant.name.as_ref().unwrap()\n             );\n-            if let clean::VariantItem(ref var) = *variant.kind {\n-                if let clean::VariantKind::Tuple(ref tys) = var.kind {\n-                    write!(w, \"(\");\n-                    for (i, ty) in tys.iter().enumerate() {\n-                        if i > 0 {\n-                            write!(w, \",&nbsp;\");\n-                        }\n-                        write!(w, \"{}\", ty.print());\n+            if let clean::VariantItem(clean::Variant::Tuple(ref tys)) = *variant.kind {\n+                write!(w, \"(\");\n+                for (i, ty) in tys.iter().enumerate() {\n+                    if i > 0 {\n+                        write!(w, \",&nbsp;\");\n                     }\n-                    write!(w, \")\");\n+                    write!(w, \"{}\", ty.print());\n                 }\n+                write!(w, \")\");\n             }\n             write!(w, \"</code></div>\");\n             document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n-            use crate::clean::{Variant, VariantKind};\n-            if let clean::VariantItem(Variant { kind: VariantKind::Struct(ref s) }) = *variant.kind\n-            {\n+            use crate::clean::Variant;\n+            if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,"}, {"sha": "3ffb72ba3ee8b645f85ee6400c176052214ad883", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 45, "deletions": 53, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -648,8 +648,7 @@ function defocusSearchBar() {\n          */\n         function execQuery(query, searchWords, filterCrates) {\n             function itemTypeFromName(typename) {\n-                var length = itemTypes.length;\n-                for (var i = 0; i < length; ++i) {\n+                for (var i = 0, len = itemTypes.length; i < len; ++i) {\n                     if (itemTypes[i] === typename) {\n                         return i;\n                     }\n@@ -667,8 +666,7 @@ function defocusSearchBar() {\n \n             function transformResults(results, isType) {\n                 var out = [];\n-                var length = results.length;\n-                for (var i = 0; i < length; ++i) {\n+                for (var i = 0, len = results.length; i < len; ++i) {\n                     if (results[i].id > -1) {\n                         var obj = searchIndex[results[i].id];\n                         obj.lev = results[i].lev;\n@@ -697,11 +695,11 @@ function defocusSearchBar() {\n                     }\n                 }\n                 results = ar;\n-                var i;\n-                var nresults = results.length;\n-                for (i = 0; i < nresults; ++i) {\n-                    results[i].word = searchWords[results[i].id];\n-                    results[i].item = searchIndex[results[i].id] || {};\n+                var i, len, result;\n+                for (i = 0, len = results.length; i < len; ++i) {\n+                    result = results[i];\n+                    result.word = searchWords[result.id];\n+                    result.item = searchIndex[result.id] || {};\n                 }\n                 // if there are no results then return to default and fail\n                 if (results.length === 0) {\n@@ -775,8 +773,7 @@ function defocusSearchBar() {\n                     return 0;\n                 });\n \n-                var length = results.length;\n-                for (i = 0; i < length; ++i) {\n+                for (i = 0, len = results.length; i < len; ++i) {\n                     var result = results[i];\n \n                     // this validation does not make sense when searching by types\n@@ -833,11 +830,10 @@ function defocusSearchBar() {\n                         var vlength = val.generics.length;\n                         for (var y = 0; y < vlength; ++y) {\n                             var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n-                            var elength = elems.length;\n                             var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                            for (var x = 0; x < elength; ++x) {\n+                            for (var x = 0, elength = elems.length; x < elength; ++x) {\n                                 var tmp_lev = levenshtein(getObjectFromId(elems[x]).name,\n-                                                          firstGeneric);\n+                                                                          firstGeneric);\n                                 if (tmp_lev < lev.lev) {\n                                     lev.lev = tmp_lev;\n                                     lev.pos = x;\n@@ -861,7 +857,7 @@ function defocusSearchBar() {\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                var x;\n+                var len, x, y, e_len, firstGeneric;\n                 if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n@@ -870,10 +866,12 @@ function defocusSearchBar() {\n                                 var elems = obj[GENERICS_DATA].slice(0);\n                                 var allFound = true;\n \n-                                for (var y = 0; allFound === true && y < val.generics.length; ++y) {\n+                                len = val.generics.length;\n+                                for (y = 0; allFound === true && y < len; ++y) {\n                                     allFound = false;\n-                                    var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                                    for (x = 0; allFound === false && x < elems.length; ++x) {\n+                                    firstGeneric = getObjectFromId(val.generics[y]).name;\n+                                    e_len = elems.length;\n+                                    for (x = 0; allFound === false && x < e_len; ++x) {\n                                         allFound = getObjectFromId(elems[x]).name === firstGeneric;\n                                     }\n                                     if (allFound === true) {\n@@ -903,12 +901,10 @@ function defocusSearchBar() {\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n                      if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n-                        var length = obj[GENERICS_DATA].length;\n-                        for (x = 0; x < length; ++x) {\n-                            if (obj[GENERICS_DATA][x] === val.name) {\n-                                return true;\n-                            }\n-                        }\n+                        return obj[GENERICS_DATA].some(\n+                            function(name) {\n+                                return name === val.name;\n+                            });\n                     }\n                     return false;\n                 }\n@@ -965,7 +961,7 @@ function defocusSearchBar() {\n                     if (typeof ret[0] === \"string\") {\n                         ret = [ret];\n                     }\n-                    for (var x = 0; x < ret.length; ++x) {\n+                    for (var x = 0, len = ret.length; x < len; ++x) {\n                         var tmp = ret[x];\n                         if (typePassesFilter(typeFilter, tmp[1]) === false) {\n                             continue;\n@@ -1072,23 +1068,22 @@ function defocusSearchBar() {\n                 // aliases to be before the others in the displayed results.\n                 var aliases = [];\n                 var crateAliases = [];\n-                var i;\n                 if (filterCrates !== undefined) {\n                     if (ALIASES[filterCrates] && ALIASES[filterCrates][query.search]) {\n-                        for (i = 0; i < ALIASES[filterCrates][query.search].length; ++i) {\n-                            aliases.push(\n-                                createAliasFromItem(\n-                                    searchIndex[ALIASES[filterCrates][query.search][i]]));\n+                        var query_aliases = ALIASES[filterCrates][query.search];\n+                        var len = query_aliases.length;\n+                        for (var i = 0; i < len; ++i) {\n+                            aliases.push(createAliasFromItem(searchIndex[query_aliases[i]]));\n                         }\n                     }\n                 } else {\n                     Object.keys(ALIASES).forEach(function(crate) {\n                         if (ALIASES[crate][query.search]) {\n                             var pushTo = crate === window.currentCrate ? crateAliases : aliases;\n-                            for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n-                                pushTo.push(\n-                                    createAliasFromItem(\n-                                        searchIndex[ALIASES[crate][query.search][i]]));\n+                            var query_aliases = ALIASES[crate][query.search];\n+                            var len = query_aliases.length;\n+                            for (var i = 0; i < len; ++i) {\n+                                pushTo.push(createAliasFromItem(searchIndex[query_aliases[i]]));\n                             }\n                         }\n                     });\n@@ -1123,11 +1118,12 @@ function defocusSearchBar() {\n \n             // quoted values mean literal search\n             var nSearchWords = searchWords.length;\n-            var i;\n+            var i, it;\n             var ty;\n             var fullId;\n             var returned;\n             var in_args;\n+            var len;\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n                 val.charAt(val.length - 1) === val.charAt(0))\n             {\n@@ -1175,7 +1171,7 @@ function defocusSearchBar() {\n                 var input = parts[0];\n                 // sort inputs so that order does not matter\n                 var inputs = input.split(\",\").map(trimmer).sort();\n-                for (i = 0; i < inputs.length; ++i) {\n+                for (i = 0, len = inputs.length; i < len; ++i) {\n                     inputs[i] = extractGenerics(inputs[i]);\n                 }\n                 var output = extractGenerics(parts[1]);\n@@ -1200,7 +1196,7 @@ function defocusSearchBar() {\n                             is_module = true;\n                         } else {\n                             var allFound = true;\n-                            for (var it = 0; allFound === true && it < inputs.length; it++) {\n+                            for (it = 0, len = inputs.length; allFound === true && it < len; it++) {\n                                 allFound = checkType(type, inputs[it], true);\n                             }\n                             in_args = allFound;\n@@ -1243,7 +1239,7 @@ function defocusSearchBar() {\n \n                 var paths = valLower.split(\"::\");\n                 var j;\n-                for (j = 0; j < paths.length; ++j) {\n+                for (j = 0, len = paths.length; j < len; ++j) {\n                     if (paths[j] === \"\") {\n                         paths.splice(j, 1);\n                         j -= 1;\n@@ -1365,7 +1361,7 @@ function defocusSearchBar() {\n          * @return {[boolean]}       [Whether the result is valid or not]\n          */\n         function validateResult(name, path, keys, parent) {\n-            for (var i = 0; i < keys.length; ++i) {\n+            for (var i = 0, len = keys.length; i < len; ++i) {\n                 // each check is for validation so we negate the conditions and invalidate\n                 if (!(\n                     // check for an exact name match\n@@ -1686,7 +1682,7 @@ function defocusSearchBar() {\n             function getSmallest(arrays, positions, notDuplicates) {\n                 var start = null;\n \n-                for (var it = 0; it < positions.length; ++it) {\n+                for (var it = 0, len = positions.length; it < len; ++it) {\n                     if (arrays[it].length > positions[it] &&\n                         (start === null || start > arrays[it][positions[it]].lev) &&\n                         !notDuplicates[arrays[it][positions[it]].fullPath]) {\n@@ -1701,7 +1697,7 @@ function defocusSearchBar() {\n                 var positions = [];\n                 var notDuplicates = {};\n \n-                for (var x = 0; x < arrays.length; ++x) {\n+                for (var x = 0, arrays_len = arrays.length; x < arrays_len; ++x) {\n                     positions.push(0);\n                 }\n                 while (ret.length < MAX_RESULTS) {\n@@ -1710,7 +1706,7 @@ function defocusSearchBar() {\n                     if (smallest === null) {\n                         break;\n                     }\n-                    for (x = 0; x < arrays.length && ret.length < MAX_RESULTS; ++x) {\n+                    for (x = 0; x < arrays_len && ret.length < MAX_RESULTS; ++x) {\n                         if (arrays[x].length > positions[x] &&\n                                 arrays[x][positions[x]].lev === smallest &&\n                                 !notDuplicates[arrays[x][positions[x]].fullPath]) {\n@@ -1730,7 +1726,7 @@ function defocusSearchBar() {\n                 \"others\": [],\n             };\n \n-            for (var i = 0; i < queries.length; ++i) {\n+            for (var i = 0, len = queries.length; i < len; ++i) {\n                 query = queries[i].trim();\n                 if (query.length !== 0) {\n                     var tmp = execQuery(getQuery(query), searchWords, filterCrates);\n@@ -1884,7 +1880,7 @@ function defocusSearchBar() {\n                             ALIASES[crate][alias_name] = [];\n                         }\n                         local_aliases = aliases[alias_name];\n-                        for (j = 0; j < local_aliases.length; ++j) {\n+                        for (j = 0, len = local_aliases.length; j < len; ++j) {\n                             ALIASES[crate][alias_name].push(local_aliases[j] + currentIndex);\n                         }\n                     }\n@@ -2052,8 +2048,7 @@ function defocusSearchBar() {\n             div.appendChild(h3);\n             var ul = document.createElement(\"ul\");\n \n-            var length = filtered.length;\n-            for (var i = 0; i < length; ++i) {\n+            for (var i = 0, len = filtered.length; i < len; ++i) {\n                 var item = filtered[i];\n                 var name = item[0];\n                 var desc = item[1]; // can be null\n@@ -2122,21 +2117,18 @@ function defocusSearchBar() {\n         }\n \n         var libs = Object.getOwnPropertyNames(imp);\n-        var llength = libs.length;\n-        for (var i = 0; i < llength; ++i) {\n+        for (var i = 0, llength = libs.length; i < llength; ++i) {\n             if (libs[i] === currentCrate) { continue; }\n             var structs = imp[libs[i]];\n \n-            var slength = structs.length;\n             struct_loop:\n-            for (var j = 0; j < slength; ++j) {\n+            for (var j = 0, slength = structs.length; j < slength; ++j) {\n                 var struct = structs[j];\n \n                 var list = struct.synthetic ? synthetic_implementors : implementors;\n \n                 if (struct.synthetic) {\n-                    var stlength = struct.types.length;\n-                    for (var k = 0; k < stlength; k++) {\n+                    for (var k = 0, stlength = struct.types.length; k < stlength; k++) {\n                         if (inlined_types.has(struct.types[k])) {\n                             continue struct_loop;\n                         }\n@@ -2853,7 +2845,7 @@ function defocusSearchBar() {\n             return 0;\n         });\n         var savedCrate = getSettingValue(\"saved-filter-crate\");\n-        for (var i = 0; i < crates_text.length; ++i) {\n+        for (var i = 0, len = crates_text.length; i < len; ++i) {\n             var option = document.createElement(\"option\");\n             option.value = crates_text[i];\n             option.innerText = crates_text[i];"}, {"sha": "a9cc0ffdf79b084ff923898b371419fc04f48678", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -8,7 +8,7 @@ function getCurrentFilePath() {\n     var parts = window.location.pathname.split(\"/\");\n     var rootPathParts = window.rootPath.split(\"/\");\n \n-    for (var i = 0; i < rootPathParts.length; ++i) {\n+    for (var i = 0, len = rootPathParts.length; i < len; ++i) {\n         if (rootPathParts[i] === \"..\") {\n             parts.pop();\n         }\n@@ -35,12 +35,14 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     };\n     name.innerText = elem[\"name\"];\n \n+    var i, len;\n+\n     var children = document.createElement(\"div\");\n     children.className = \"children\";\n     var folders = document.createElement(\"div\");\n     folders.className = \"folders\";\n     if (elem.dirs) {\n-        for (var i = 0; i < elem.dirs.length; ++i) {\n+        for (i = 0, len = elem.dirs.length; i < len; ++i) {\n             if (createDirEntry(elem.dirs[i], folders, fullPath, currentFile,\n                                hasFoundFile) === true) {\n                 addClass(name, \"expand\");\n@@ -53,7 +55,7 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     var files = document.createElement(\"div\");\n     files.className = \"files\";\n     if (elem.files) {\n-        for (i = 0; i < elem.files.length; ++i) {\n+        for (i = 0, len = elem.files.length; i < len; ++i) {\n             var file = document.createElement(\"a\");\n             file.innerText = elem.files[i];\n             file.href = window.rootPath + \"src/\" + fullPath + elem.files[i] + \".html\";"}, {"sha": "7d05cb016b67c899ccc03b674944b1e9993cb5b8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -482,8 +482,8 @@ impl From<clean::VariantStruct> for Struct {\n \n impl From<clean::Variant> for Variant {\n     fn from(variant: clean::Variant) -> Self {\n-        use clean::VariantKind::*;\n-        match variant.kind {\n+        use clean::Variant::*;\n+        match variant {\n             CLike => Variant::Plain,\n             Tuple(t) => Variant::Tuple(t.into_iter().map(Into::into).collect()),\n             Struct(s) => Variant::Struct(ids(s.fields)),"}, {"sha": "162b70973b418e25f77855fca860b661c45eba10", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -94,7 +94,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant { kind: clean::VariantKind::Struct(..) }) => true,\n+            clean::VariantItem(clean::Variant::Struct(..)) => true,\n             _ => false,\n         };\n "}, {"sha": "28bb85912324eead69471fbfe62e46f4695b2b8d", "filename": "src/test/codegen/issue-59352.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fcodegen%2Fissue-59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fcodegen%2Fissue-59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-59352.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -0,0 +1,18 @@\n+// This test is a mirror of mir-opt/issues/issue-59352.rs. The LLVM inliner doesn't inline\n+// `char::method::is_digit()` and `char::method::to_digit()`, probably because of their size.\n+//\n+// Currently, the MIR optimizer isn't capable of removing the unreachable panic in this test case.\n+// Once the optimizer can do that, mir-opt/issues/issue-59352.rs will need to be updated and this\n+// test case should be removed as it will become redundant.\n+\n+// mir-opt-level=2 enables inlining and enables LLVM to optimize away the unreachable panic call.\n+// compile-flags: -O -Z mir-opt-level=2\n+\n+#![crate_type = \"rlib\"]\n+\n+// CHECK-LABEL: @num_to_digit\n+#[no_mangle]\n+pub fn num_to_digit(num: char) -> u32 {\n+    // CHECK-NOT: panic\n+    if num.is_digit(8) { num.to_digit(8).unwrap() } else { 0 }\n+}"}, {"sha": "9e59337a01d5c6df98b36f4d004c2ce6440bde9c", "filename": "src/test/mir-opt/issues/issue-59352.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -0,0 +1,19 @@\n+// This test is a mirror of codegen/issue-59352.rs.\n+// The LLVM inliner doesn't inline `char::method::is_digit()` and so it doesn't recognize this case\n+// as effectively `if x.is_some() { x.unwrap() } else { 0 }`.\n+//\n+// Currently, the MIR optimizer isn't capable of removing the unreachable panic in this test case.\n+// Once the optimizer can do that, this test case will need to be updated and codegen/issue-59352.rs\n+// removed.\n+\n+// EMIT_MIR issue_59352.num_to_digit.PreCodegen.after.mir\n+// compile-flags: -Z mir-opt-level=2 -Z span_free_formats\n+\n+pub fn num_to_digit(num: char) -> u32 {\n+    // CHECK-NOT: panic\n+    if num.is_digit(8) { num.to_digit(8).unwrap() } else { 0 }\n+}\n+\n+pub fn main() {\n+    num_to_digit('2');\n+}"}, {"sha": "04a8c94e003c4ad75ec1f238d7f4da9f05a5c731", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `num_to_digit` after PreCodegen\n+\n+fn num_to_digit(_1: char) -> u32 {\n+    debug num => _1;                     // in scope 0 at $DIR/issue-59352.rs:12:21: 12:24\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-59352.rs:12:35: 12:38\n+    let mut _2: bool;                    // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+    let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+    let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _10: isize;                  // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n+        debug self => _8;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        debug radix => _5;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _6: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let _7: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _8: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        scope 2 (inlined Option::<u32>::is_some) { // at $DIR/issue-59352.rs:14:8: 14:23\n+            debug self => _6;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        }\n+    }\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n+        debug self => _3;                // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        let mut _9: isize;               // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        scope 4 {\n+            debug val => _0;             // in scope 4 at $DIR/issue-59352.rs:14:26: 14:50\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _8 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n+        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:8: 14:23\n+                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:30: 14:38\n+                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb2: {\n+        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n+        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+\n+    bb3: {\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        _9 = discriminant(_3);           // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        switchInt(move _9) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:62: 14:63\n+        return;                          // scope 0 at $DIR/issue-59352.rs:15:2: 15:2\n+    }\n+\n+    bb5: {\n+        _6 = &_7;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _10 = discriminant((*_6));       // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        _2 = Eq(_10, const 1_isize);     // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+\n+    bb6: {\n+        core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n+    }\n+\n+    bb7: {\n+        unreachable;                     // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+    }\n+\n+    bb8: {\n+        _0 = move ((_3 as Some).0: u32); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n+        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+}"}, {"sha": "26a66fb021e4d78ec489bf71773ff70a084121da", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6c869d34ae2d87d21db9892d4dc088639bcbe041/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=6c869d34ae2d87d21db9892d4dc088639bcbe041", "patch": "@@ -10,6 +10,6 @@ clap = \"2.25.0\"\n env_logger = \"0.7.1\"\n \n [dependencies.mdbook]\n-version = \"0.4.5\"\n+version = \"0.4.6\"\n default-features = false\n features = [\"search\"]"}]}