{"sha": "5ddd4eff0382ba454e8123c663f9e11c14597f79", "node_id": "C_kwDOAAsO6NoAKDVkZGQ0ZWZmMDM4MmJhNDU0ZTgxMjNjNjYzZjllMTFjMTQ1OTdmNzk", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-19T19:14:16Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:56Z"}, "message": "Spelling, punctuation and grammar\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "6d71389f852f00b2c6b5e588d21cb4075987a808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d71389f852f00b2c6b5e588d21cb4075987a808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddd4eff0382ba454e8123c663f9e11c14597f79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRFwACgkQGBtJ+fOP\nM3QU3gv+LwBHM03VNFdoTi4z1U3MckJhmQ0Rb0J5OYp/Kvz2fLwPiGQ97C75fojJ\n0kW9MTOIRJPQJnhTNZtgjyfqQwzri63wHAd3FeYMLRQLvqzWrtZLTTb8ApIhhQuq\nkHdus7CC2ODX/aH0Jt9Dr9JOn6IUroDhwJOXMzubdzkOGLIQS+iSQOtf/mJnTfNt\n3xZ/2tqULPsG5EqrmoiWrYDODRwPxT2EksunI1T9WN9ID8bRLEaf1Yc4qLHURK6b\n2a2gqMahoQBkPqnpSrdrbOEJ69E+ZktufSjVqZnNlIaO4V5W84pxyy9E0NEFJiUG\nW5FcLewT8ra3k29Wxnoy+cvB2hUKE6JukE0cQW3iq90AicLOBqiI5jXnttU+i5OR\ncdc4e3d7pEgw3YdkJ30mNIvGjoMLZD0QPuPSzR14sD2Ev1pbI6mcf2lMp65nrCOW\njgvJQb0nGpF4v6aIEAO4UkutQypgrV1/J3NZ9KPDTtHKBqZCdKHxFKcgZwOM6/KQ\nJZ+r0Va3\n=ZNUp\n-----END PGP SIGNATURE-----", "payload": "tree 6d71389f852f00b2c6b5e588d21cb4075987a808\nparent 31c01415cbb1793ae9492f40bbdd917cfe8d1fa5\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652987656 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539356 +0100\n\nSpelling, punctuation and grammar\n\nCo-authored-by: Ralf Jung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddd4eff0382ba454e8123c663f9e11c14597f79", "html_url": "https://github.com/rust-lang/rust/commit/5ddd4eff0382ba454e8123c663f9e11c14597f79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddd4eff0382ba454e8123c663f9e11c14597f79/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "html_url": "https://github.com/rust-lang/rust/commit/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "938a64cd045b1e16e49480ebd3b75e5f94029d71", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ddd4eff0382ba454e8123c663f9e11c14597f79/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ddd4eff0382ba454e8123c663f9e11c14597f79/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5ddd4eff0382ba454e8123c663f9e11c14597f79", "patch": "@@ -21,7 +21,7 @@ for example:\n * **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n   for reference types\n * **Experimental**: Data races\n-* **Experimental**: Weak memory emulation\n+* **Experimental**: Emulation of weak memory effects (i.e., reads can return outdated values)\n \n On top of that, Miri will also tell you about memory leaks: when there is memory\n still allocated at the end of the execution, and that memory is not reachable"}, {"sha": "34097f4a89372e0cf1f50b60d0485473b008b457", "filename": "tests/compile-fail/weak_memory/cpp20_rwc_syncs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs?ref=5ddd4eff0382ba454e8123c663f9e11c14597f79", "patch": "@@ -4,15 +4,15 @@\n // https://plv.mpi-sws.org/scfix/paper.pdf\n // 2.2 Second Problem: SC Fences are Too Weak\n // This test should pass under the C++20 model Rust is using.\n-// Unfortunately, Miri's weak memory emulation only follows C++11 model\n+// Unfortunately, Miri's weak memory emulation only follows the C++11 model\n // as we don't know how to correctly emulate C++20's revised SC semantics,\n-// so we have to stick to C++11 emulation from exiting research.\n+// so we have to stick to C++11 emulation from existing research.\n \n use std::sync::atomic::Ordering::*;\n use std::thread::spawn;\n use std::sync::atomic::{fence, AtomicUsize};\n \n-// Spins until it reads value\n+// Spins until it reads the given value\n fn reads_value(loc: &AtomicUsize, val: usize) -> usize {\n     while loc.load(Relaxed) != val {\n         std::hint::spin_loop();\n@@ -24,7 +24,7 @@ fn reads_value(loc: &AtomicUsize, val: usize) -> usize {\n // multiple tests\n fn static_atomic(val: usize) -> &'static AtomicUsize {\n     let ret = Box::leak(Box::new(AtomicUsize::new(val)));\n-    // A workaround to put the initialisation value in the store buffer\n+    // A workaround to put the initialization value in the store buffer.\n     ret.store(val, Relaxed);\n     ret\n }"}, {"sha": "8a7c1340cc593a8a21ce82d8109d560656374da3", "filename": "tests/run-pass/weak_memory/consistency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs?ref=5ddd4eff0382ba454e8123c663f9e11c14597f79", "patch": "@@ -37,7 +37,7 @@ fn static_atomic(val: usize) -> &'static AtomicUsize {\n     ret\n }\n \n-// Spins until acquires a pre-determined value\n+// Spins until it acquires a pre-determined value.\n fn acquires_value(loc: &AtomicUsize, val: usize) -> usize {\n     while loc.load(Acquire) != val {\n         std::hint::spin_loop();"}, {"sha": "70e1bf00f442e0180eeacc2bd78925ba7193855a", "filename": "tests/run-pass/weak_memory/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Frun-pass%2Fweak_memory%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddd4eff0382ba454e8123c663f9e11c14597f79/tests%2Frun-pass%2Fweak_memory%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fweak_memory%2Fweak.rs?ref=5ddd4eff0382ba454e8123c663f9e11c14597f79", "patch": "@@ -6,7 +6,7 @@\n // This is scheduler and pseudo-RNG dependent, so each test is\n // run multiple times until one try returns true.\n // Spurious failure is possible, if you are really unlucky with\n-// the RNG.\n+// the RNG and always read the latest value from the store buffer.\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;"}]}