{"sha": "7a74545e9717ab0e85ab154e06810007b1de602f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNzQ1NDVlOTcxN2FiMGU4NWFiMTU0ZTA2ODEwMDA3YjFkZTYwMmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-08T07:28:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-08T17:58:46Z"}, "message": "Convert reinterpret_cast + forget to 'transmute'", "tree": {"sha": "b178ca37003a6203945457c4e8eee910a27e6c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b178ca37003a6203945457c4e8eee910a27e6c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a74545e9717ab0e85ab154e06810007b1de602f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a74545e9717ab0e85ab154e06810007b1de602f", "html_url": "https://github.com/rust-lang/rust/commit/7a74545e9717ab0e85ab154e06810007b1de602f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a74545e9717ab0e85ab154e06810007b1de602f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f12adcbf930122ef6d98790b53d80d511dc62406", "url": "https://api.github.com/repos/rust-lang/rust/commits/f12adcbf930122ef6d98790b53d80d511dc62406", "html_url": "https://github.com/rust-lang/rust/commit/f12adcbf930122ef6d98790b53d80d511dc62406"}], "stats": {"total": 43, "additions": 12, "deletions": 31}, "files": [{"sha": "b6e27f9e8adecf9f172333a22649a4c3ca19cb11", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -137,9 +137,7 @@ Fails if invalid UTF-8\n pure fn from_byte(b: u8) -> str unsafe {\n     assert b < 128u8;\n     let mut v = [b, 0u8];\n-    let s: str = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::forget(v);\n-    s\n+    ::unsafe::transmute(v)\n }\n \n #[doc = \"Appends a character at the end of a string\"]\n@@ -324,8 +322,7 @@ The result vector is not null-terminated.\n \"]\n pure fn bytes(s: str) -> [u8] unsafe {\n     let mut s_copy = s;\n-    let mut v: [u8] = ::unsafe::reinterpret_cast(s_copy);\n-    ::unsafe::forget(s_copy);\n+    let mut v: [u8] = ::unsafe::transmute(s_copy);\n     vec::unsafe::set_len(v, len(s));\n     ret v;\n }\n@@ -1708,9 +1705,7 @@ mod unsafe {\n         v += [0u8];\n \n         assert is_utf8(v);\n-        let s: str = ::unsafe::reinterpret_cast(v);\n-        ::unsafe::forget(v);\n-        ret s;\n+        ret ::unsafe::transmute(v);\n     }\n \n     #[doc = \"Create a Rust string from a null-terminated C string\"]\n@@ -1732,9 +1727,7 @@ mod unsafe {\n    \"]\n    unsafe fn from_bytes(v: [const u8]) -> str unsafe {\n        let vcopy = v + [0u8];\n-       let scopy: str = ::unsafe::reinterpret_cast(vcopy);\n-       ::unsafe::forget(vcopy);\n-       ret scopy;\n+       ret ::unsafe::transmute(vcopy);\n    }\n \n    #[doc = \"\n@@ -1769,9 +1762,7 @@ mod unsafe {\n            v\n        };\n        v += [0u8];\n-       let s: str = ::unsafe::reinterpret_cast(v);\n-       ::unsafe::forget(v);\n-       ret s;\n+       ret ::unsafe::transmute(v);\n    }\n \n    #[doc = \"Appends a byte to a string. (Not UTF-8 safe).\"]"}, {"sha": "a4d6f63dbd6f5478f9fc1babdf3ab3aeecb43c19", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -979,13 +979,12 @@ fn test_unkillable() unsafe {\n \n     unkillable {||\n         let p = ~0;\n-        let pp: *uint = unsafe::reinterpret_cast(p);\n-        unsafe::forget(p);\n+        let pp: *uint = unsafe::transmute(p);\n \n         // If we are killed here then the box will leak\n         po.recv();\n \n-        let _p: ~int = unsafe::reinterpret_cast(pp);\n+        let _p: ~int = unsafe::transmute(pp);\n     }\n \n     // Now we can be killed"}, {"sha": "a94b8e6e1b49eddb6e64d9886c0431a665862dc3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -193,16 +193,12 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> [T] {\n \n #[doc = \"Produces a mut vector from an immutable vector.\"]\n fn to_mut<T>(+v: [T]) -> [mut T] unsafe {\n-    let r = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::forget(v);\n-    r\n+    ::unsafe::transmute(v)\n }\n \n #[doc = \"Produces an immutable vector from a mut vector.\"]\n fn from_mut<T>(+v: [mut T]) -> [T] unsafe {\n-    let r = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::forget(v);\n-    r\n+    ::unsafe::transmute(v)\n }\n \n // Accessors"}, {"sha": "5200b0fe7a79e89a4668fe06cf929877ea947694", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -40,8 +40,7 @@ type arc<T: const> = arc_destruct<T>;\n fn arc<T: const>(-data: T) -> arc<T> {\n     let data = ~{mut count: 1, data: data};\n     unsafe {\n-        let ptr = unsafe::reinterpret_cast(data);\n-        unsafe::forget(data);\n+        let ptr = unsafe::transmute(data);\n         arc_destruct(ptr)\n     }\n }"}, {"sha": "945b23cc47a0ec1c63affb8beebdf92b62dd1b72", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -817,9 +817,7 @@ mod node {\n               }\n             }\n         }\n-        let str : str = unsafe::reinterpret_cast(buf);\n-        unsafe::forget(buf);//TODO: Check if this is correct\n-        ret str;\n+        ret unsafe::transmute(buf);\n     }\n \n     #[doc =\""}, {"sha": "cd6ab2aa00a930946b3799492ce3adb2f9b73b16", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a74545e9717ab0e85ab154e06810007b1de602f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7a74545e9717ab0e85ab154e06810007b1de602f", "patch": "@@ -130,9 +130,7 @@ enum debug_metadata {\n \n fn cast_safely<T: copy, U>(val: T) -> U unsafe {\n     let val2 = val;\n-    let val3 = unsafe::reinterpret_cast(val2);\n-    unsafe::forget(val2);\n-    ret val3;\n+    ret unsafe::transmute(val2);\n }\n \n fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {"}]}