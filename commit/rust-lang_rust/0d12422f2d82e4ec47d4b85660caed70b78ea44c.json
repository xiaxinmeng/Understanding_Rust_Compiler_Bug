{"sha": "0d12422f2d82e4ec47d4b85660caed70b78ea44c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTI0MjJmMmQ4MmU0ZWM0N2Q0Yjg1NjYwY2FlZDcwYjc4ZWE0NGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T22:24:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T22:24:23Z"}, "message": "Rollup merge of #80525 - devsnek:wasm64, r=nagisa\n\nwasm64 support\n\nThere is still some upstream llvm work needed before this can land.", "tree": {"sha": "a5c03caf548a3ab25207c025e67c238ed9a57e3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c03caf548a3ab25207c025e67c238ed9a57e3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d12422f2d82e4ec47d4b85660caed70b78ea44c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgajyXCRBK7hj4Ov3rIwAAdHIIAJKvuw5B5ljRvmV6RZj4liaW\nHrQr5+VarX78u38t1GohF8JocK4uX7mb0rAjClVSL/5JLFXXU3hZIIBt+ykJmqiq\nCEL6FSNwZoWq3i0ryFAG/BA8ksPe0DEGVaAjRxfGQeBCpSogqz4Wnrf2WAGKbLe5\nmt5uP9tHRgSP30msamVkVEd4502RAqeYGIkEx6HcanVjKGJAockstPORLUdEiZa7\nFgl4QrvuS7Yj+MOtOS6mK98IuduDchc3a+oEe0NqoqTmDEEwDfEmWAyIXV2lihPH\neh4uiD4tW6siwTT0B3kNywq3Nwm27fINFepsMzMaywa642ZKenUcJSGd/3Wd8XY=\n=w8kO\n-----END PGP SIGNATURE-----\n", "payload": "tree a5c03caf548a3ab25207c025e67c238ed9a57e3a\nparent 8ad6a443cfee83e1f7d29c9ec0de26143c54a617\nparent da66a31572e0f49981d6b958ecdd95397ecf2d3f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617575063 +0200\ncommitter GitHub <noreply@github.com> 1617575063 +0200\n\nRollup merge of #80525 - devsnek:wasm64, r=nagisa\n\nwasm64 support\n\nThere is still some upstream llvm work needed before this can land.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d12422f2d82e4ec47d4b85660caed70b78ea44c", "html_url": "https://github.com/rust-lang/rust/commit/0d12422f2d82e4ec47d4b85660caed70b78ea44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d12422f2d82e4ec47d4b85660caed70b78ea44c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "html_url": "https://github.com/rust-lang/rust/commit/8ad6a443cfee83e1f7d29c9ec0de26143c54a617"}, {"sha": "da66a31572e0f49981d6b958ecdd95397ecf2d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da66a31572e0f49981d6b958ecdd95397ecf2d3f", "html_url": "https://github.com/rust-lang/rust/commit/da66a31572e0f49981d6b958ecdd95397ecf2d3f"}], "stats": {"total": 147, "additions": 129, "deletions": 18}, "files": [{"sha": "6e1d4eba842e98f844254df63292d3239589a1fe", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -317,7 +317,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     // Note that currently the `wasm-import-module` doesn't do anything, but\n     // eventually LLVM 7 should read this and ferry the appropriate import\n     // module to the output file.\n-    if cx.tcx.sess.target.arch == \"wasm32\" {\n+    if cx.tcx.sess.target.is_like_wasm {\n         if let Some(module) = wasm_import_module(cx.tcx, instance.def_id()) {\n             llvm::AddFunctionAttrStringValue(\n                 llfn,"}, {"sha": "82f3ee07c93ffa99eecafef40fccc1684fbb3854", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -170,10 +170,7 @@ pub fn target_machine_factory(\n     // On the wasm target once the `atomics` feature is enabled that means that\n     // we're no longer single-threaded, or otherwise we don't want LLVM to\n     // lower atomic operations to single-threaded operations.\n-    if singlethread\n-        && sess.target.llvm_target.contains(\"wasm32\")\n-        && sess.target_features.contains(&sym::atomics)\n-    {\n+    if singlethread && sess.target.is_like_wasm && sess.target_features.contains(&sym::atomics) {\n         singlethread = false;\n     }\n "}, {"sha": "e6fa852155b5123b927228bc94baa38336404750", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -1083,9 +1083,9 @@ pub fn compile_unit_metadata(\n             );\n         }\n \n-        // Insert `llvm.ident` metadata on the wasm32 targets since that will\n+        // Insert `llvm.ident` metadata on the wasm targets since that will\n         // get hooked up to the \"producer\" sections `processed-by` information.\n-        if tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+        if tcx.sess.target.is_like_wasm {\n             let name_metadata = llvm::LLVMMDStringInContext(\n                 debug_context.llcontext,\n                 rustc_producer.as_ptr().cast(),"}, {"sha": "77d8ab49ff258d2b2acaac870182fefc5c759f4a", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -186,7 +186,7 @@ impl<'a> GccLinker<'a> {\n         // * On OSX they have their own linker, not binutils'\n         // * For WebAssembly the only functional linker is LLD, which doesn't\n         //   support hint flags\n-        !self.sess.target.is_like_osx && self.sess.target.arch != \"wasm32\"\n+        !self.sess.target.is_like_osx && !self.sess.target.is_like_wasm\n     }\n \n     // Some platforms take hints about whether a library is static or dynamic."}, {"sha": "4e987908b4ea7b5cda6559f7a35afa11879c066e", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -161,7 +161,7 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n         \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n         \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n-        \"wasm32\" => WASM_ALLOWED_FEATURES,\n+        \"wasm32\" | \"wasm64\" => WASM_ALLOWED_FEATURES,\n         _ => &[],\n     }\n }"}, {"sha": "b67feb47173237bd96c9a6d20fcc1bc69cfb2590", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -822,6 +822,9 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n         }\n     }\n     ret.insert((sym::target_arch, Some(Symbol::intern(arch))));\n+    if sess.target.is_like_wasm {\n+        ret.insert((sym::wasm, None));\n+    }\n     ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));"}, {"sha": "e4810fe705953d96a5f0548b4af9827bbe3cb487", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -1294,6 +1294,7 @@ symbols! {\n         vreg,\n         vreg_low16,\n         warn,\n+        wasm,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}, {"sha": "c050bbc9b9df6cb3b9968a5cad3f8f854dfc4d40", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -198,7 +198,7 @@ fn compute_symbol_name(\n     //\n     // [1]: https://bugs.llvm.org/show_bug.cgi?id=44316\n     if is_foreign\n-        && (tcx.sess.target.arch != \"wasm32\"\n+        && (!tcx.sess.target.is_like_wasm\n             || !tcx.wasm_import_module_map(def_id.krate).contains_key(&def_id))\n     {\n         if let Some(name) = attrs.link_name {"}, {"sha": "395235399ea86899e5be09035cfdef129febfa71", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -20,6 +20,7 @@ mod sparc;\n mod sparc64;\n mod wasm32;\n mod wasm32_bindgen_compat;\n+mod wasm64;\n mod x86;\n mod x86_64;\n mod x86_win64;\n@@ -652,6 +653,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                 _ => wasm32_bindgen_compat::compute_abi_info(self),\n             },\n             \"asmjs\" => wasm32::compute_abi_info(cx, self),\n+            \"wasm64\" => wasm64::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "46d670d1689493e1153ee3acecdab6abf6ac8e92", "filename": "compiler/rustc_target/src/abi/call/wasm64.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm64.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -0,0 +1,58 @@\n+use crate::abi::call::{ArgAbi, FnAbi, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n+\n+fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgAbi<'a, Ty>) -> bool\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    if val.layout.is_aggregate() {\n+        if let Some(unit) = val.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n+            let size = val.layout.size;\n+            if unit.size == size {\n+                val.cast_to(Uniform { unit, total: size });\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    ret.extend_integer_width_to(64);\n+    if ret.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, ret) {\n+        ret.make_indirect();\n+    }\n+}\n+\n+fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    arg.extend_integer_width_to(64);\n+    if arg.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, arg) {\n+        arg.make_indirect_byval();\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+where\n+    Ty: TyAndLayoutMethods<'a, C> + Copy,\n+    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+{\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(cx, &mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(cx, arg);\n+    }\n+}"}, {"sha": "801cdd3ebe924c7ce7772896582f23d36bf11c66", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -79,7 +79,7 @@ mod solaris_base;\n mod thumb_base;\n mod uefi_msvc_base;\n mod vxworks_base;\n-mod wasm32_base;\n+mod wasm_base;\n mod windows_gnu_base;\n mod windows_msvc_base;\n mod windows_uwp_gnu_base;\n@@ -842,6 +842,7 @@ supported_targets! {\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),\n+    (\"wasm64-unknown-unknown\", wasm64_unknown_unknown),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),\n@@ -1076,6 +1077,8 @@ pub struct TargetOptions {\n     pub is_like_emscripten: bool,\n     /// Whether the target toolchain is like Fuchsia's.\n     pub is_like_fuchsia: bool,\n+    /// Whether a target toolchain is like WASM.\n+    pub is_like_wasm: bool,\n     /// Version of DWARF to use if not using the default.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub dwarf_version: Option<u32>,\n@@ -1295,6 +1298,7 @@ impl Default for TargetOptions {\n             is_like_emscripten: false,\n             is_like_msvc: false,\n             is_like_fuchsia: false,\n+            is_like_wasm: false,\n             dwarf_version: None,\n             linker_is_gnu: false,\n             allows_weak_linkage: true,\n@@ -1789,6 +1793,7 @@ impl Target {\n         key!(is_like_msvc, bool);\n         key!(is_like_emscripten, bool);\n         key!(is_like_fuchsia, bool);\n+        key!(is_like_wasm, bool);\n         key!(dwarf_version, Option<u32>);\n         key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n@@ -2027,6 +2032,7 @@ impl ToJson for Target {\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_emscripten);\n         target_option_val!(is_like_fuchsia);\n+        target_option_val!(is_like_wasm);\n         target_option_val!(dwarf_version);\n         target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);"}, {"sha": "f4de8bc0a5803ba9596a532a47373ea09d65e4c6", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -50,6 +50,7 @@ impl Target {\n     // and you certainly want \"unknown\" for the OS name.\n     fn can_use_os_unknown(&self) -> bool {\n         self.llvm_target == \"wasm32-unknown-unknown\"\n+            || self.llvm_target == \"wasm64-unknown-unknown\"\n             || (self.env == \"sgx\" && self.vendor == \"fortanix\")\n     }\n }"}, {"sha": "e028dbaa3252018260de58ec15c4ef040f729527", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -1,8 +1,8 @@\n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n \n     let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n "}, {"sha": "0a88ee426297b1f8da2348395e2934431d55e0f6", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -10,11 +10,11 @@\n //! This target is more or less managed by the Rust and WebAssembly Working\n //! Group nowadays at <https://github.com/rustwasm>.\n \n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n     options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();"}, {"sha": "a6b12d2ee8f65005018662eeb92157b6c6b41567", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -72,11 +72,11 @@\n //! best we can with this target. Don't start relying on too much here unless\n //! you know what you're getting in to!\n \n-use super::wasm32_base;\n+use super::wasm_base;\n use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n-    let mut options = wasm32_base::options();\n+    let mut options = wasm_base::options();\n \n     options.os = \"wasi\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);"}, {"sha": "8bfb229d77f67328766c0d51f081b93cfc0cbf98", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -0,0 +1,39 @@\n+//! A \"bare wasm\" target representing a WebAssembly output that makes zero\n+//! assumptions about its environment.\n+//!\n+//! The `wasm64-unknown-unknown` target is intended to encapsulate use cases\n+//! that do not rely on any imported functionality. The binaries generated are\n+//! entirely self-contained by default when using the standard library. Although\n+//! the standard library is available, most of it returns an error immediately\n+//! (e.g. trying to create a TCP stream or something like that).\n+\n+use super::wasm_base;\n+use super::{LinkerFlavor, LldFlavor, Target};\n+\n+pub fn target() -> Target {\n+    let mut options = wasm_base::options();\n+    options.os = \"unknown\".to_string();\n+    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n+    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+\n+    // Make sure clang uses LLD as its linker and is configured appropriately\n+    // otherwise\n+    clang_args.push(\"--target=wasm64-unknown-unknown\".to_string());\n+\n+    // For now this target just never has an entry symbol no matter the output\n+    // type, so unconditionally pass this.\n+    clang_args.push(\"-Wl,--no-entry\".to_string());\n+    options\n+        .pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n+        .unwrap()\n+        .push(\"--no-entry\".to_string());\n+\n+    Target {\n+        llvm_target: \"wasm64-unknown-unknown\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm64\".to_string(),\n+        options,\n+    }\n+}"}, {"sha": "c93ad24225a5e4ad94860fc8e5341d35e71cfcd5", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -60,6 +60,8 @@ pub fn options() -> TargetOptions {\n     pre_link_args.insert(LinkerFlavor::Gcc, clang_args);\n \n     TargetOptions {\n+        is_like_wasm: true,\n+\n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but\n         // we don't allow intermediate `dylib` crate types", "previous_filename": "compiler/rustc_target/src/spec/wasm32_base.rs"}, {"sha": "f352746d3fbe9bc67ccea9e14706a082d52009c4", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -216,6 +216,7 @@ target | std | host | notes\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n+`wasm64-unknown-unknown` | * |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules"}, {"sha": "e93803e2761982af9814437ce756f6057740cc05", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d12422f2d82e4ec47d4b85660caed70b78ea44c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d12422f2d82e4ec47d4b85660caed70b78ea44c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=0d12422f2d82e4ec47d4b85660caed70b78ea44c", "patch": "@@ -487,6 +487,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },\n+                    (sym::wasm, None) => \"WebAssembly\",\n                     (sym::target_arch, Some(arch)) => match &*arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n@@ -498,7 +499,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"powerpc64\" => \"PowerPC-64\",\n                         \"s390x\" => \"s390x\",\n                         \"sparc64\" => \"SPARC64\",\n-                        \"wasm32\" => \"WebAssembly\",\n+                        \"wasm32\" | \"wasm64\" => \"WebAssembly\",\n                         \"x86\" => \"x86\",\n                         \"x86_64\" => \"x86-64\",\n                         _ => \"\","}]}