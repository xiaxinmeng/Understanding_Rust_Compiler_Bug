{"sha": "4d1efb751a8fd70a38c695a6047a837d115b8af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMWVmYjc1MWE4ZmQ3MGEzOGM2OTVhNjA0N2E4MzdkMTE1YjhhZjU=", "commit": {"author": {"name": "Tyler Ruckinger", "email": "t.ruckinger@gmail.com", "date": "2021-02-03T15:28:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-03T15:28:51Z"}, "message": "OsStr eq_ignore_ascii_case takes arg by value\n\nPer a comment on #70516 this changes `eq_ignore_ascii_case` to take the generic parameter `S: AsRef<OsStr>` by value instead of by reference.\r\n\r\nThis is technically a breaking change to an unstable method. I think the only way it would break is if you called this method with an explicit type parameter, ie `my_os_str.eq_ignore_ascii_case::<str>(\"foo\")` becomes `my_os_str.eq_ignore_ascii_case::<&str>(\"foo\")`.\r\n\r\nBesides that, I believe it is overall more flexible since it can now take an owned `OsString` for example.\r\n\r\nIf this change should be made in some other PR (like #80193) then please just close this.", "tree": {"sha": "f05ac1769da8d7e0b1bec831ca3821a8f121d88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f05ac1769da8d7e0b1bec831ca3821a8f121d88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d1efb751a8fd70a38c695a6047a837d115b8af5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGsEzCRBK7hj4Ov3rIwAAdHIIAJ2rOuTkSD7RpUQzevdGViRa\nJObZt27MslVB322Ki9KbvbutIsIabi8Hw0CYYAADswCjUShKcjir0yrqLaQ3sijD\n3IoDPvkG3LCeeiVlJq+TL+tvlY5PNTOCkr9mb07H9vTGTW5Oj4cpfTZS18loB6+G\n2Vau+VPjE8uA0C7XNmhKiSe/GQqMPKmT+Br403eSR6oBjRg9qBNTmfO6HrwKn9D2\nuPDpVB518cBojNJp0z9xfoX7n6V0kjyckun1hHEx4QXOw+JV0LrDsQToMTT6IxIB\nelOCrsQTlRpV/JSLodjvECqkisKxFgqiCPouro775DhmfEHzDqcayuWlB0Iaq0k=\n=Ak0Y\n-----END PGP SIGNATURE-----\n", "payload": "tree f05ac1769da8d7e0b1bec831ca3821a8f121d88e\nparent 6ad11e2e25919b75ebbc36d7910f2a1126a7e873\nauthor Tyler Ruckinger <t.ruckinger@gmail.com> 1612366131 -0500\ncommitter GitHub <noreply@github.com> 1612366131 -0500\n\nOsStr eq_ignore_ascii_case takes arg by value\n\nPer a comment on #70516 this changes `eq_ignore_ascii_case` to take the generic parameter `S: AsRef<OsStr>` by value instead of by reference.\r\n\r\nThis is technically a breaking change to an unstable method. I think the only way it would break is if you called this method with an explicit type parameter, ie `my_os_str.eq_ignore_ascii_case::<str>(\"foo\")` becomes `my_os_str.eq_ignore_ascii_case::<&str>(\"foo\")`.\r\n\r\nBesides that, I believe it is overall more flexible since it can now take an owned `OsString` for example.\r\n\r\nIf this change should be made in some other PR (like #80193) then please just close this."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1efb751a8fd70a38c695a6047a837d115b8af5", "html_url": "https://github.com/rust-lang/rust/commit/4d1efb751a8fd70a38c695a6047a837d115b8af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d1efb751a8fd70a38c695a6047a837d115b8af5/comments", "author": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "html_url": "https://github.com/rust-lang/rust/commit/6ad11e2e25919b75ebbc36d7910f2a1126a7e873"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c9c8f68cd9cce7069b0eeec5922de019bf9145cc", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d1efb751a8fd70a38c695a6047a837d115b8af5/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1efb751a8fd70a38c695a6047a837d115b8af5/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=4d1efb751a8fd70a38c695a6047a837d115b8af5", "patch": "@@ -826,7 +826,7 @@ impl OsStr {\n     /// assert!(!OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n     #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n-    pub fn eq_ignore_ascii_case<S: ?Sized + AsRef<OsStr>>(&self, other: &S) -> bool {\n+    pub fn eq_ignore_ascii_case<S: AsRef<OsStr>>(&self, other: S) -> bool {\n         self.inner.eq_ignore_ascii_case(&other.as_ref().inner)\n     }\n }"}]}