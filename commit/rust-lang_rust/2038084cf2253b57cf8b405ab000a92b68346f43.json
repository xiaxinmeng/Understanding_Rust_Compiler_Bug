{"sha": "2038084cf2253b57cf8b405ab000a92b68346f43", "node_id": "C_kwDOAAsO6NoAKDIwMzgwODRjZjIyNTNiNTdjZjhiNDA1YWIwMDBhOTJiNjgzNDZmNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T15:02:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T15:02:58Z"}, "message": "Auto merge of #8813 - evantypanski:redundant_alloc_fat_ptr, r=Alexendoo\n\nFix redundant_allocation warning for Rc<Box<str>>\n\nchangelog: [`redundant_allocation`] Fixes #8604\n\nFixes false positives where a fat pointer with `str` type was made thin by another allocation, but that thinning allocation was marked as redundant", "tree": {"sha": "299c6cbc14b835ed94b9fc181a442b48211abf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/299c6cbc14b835ed94b9fc181a442b48211abf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2038084cf2253b57cf8b405ab000a92b68346f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2038084cf2253b57cf8b405ab000a92b68346f43", "html_url": "https://github.com/rust-lang/rust/commit/2038084cf2253b57cf8b405ab000a92b68346f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2038084cf2253b57cf8b405ab000a92b68346f43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d75b1950477344018612f7bb6e8b8d7b61e4a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d75b1950477344018612f7bb6e8b8d7b61e4a2", "html_url": "https://github.com/rust-lang/rust/commit/01d75b1950477344018612f7bb6e8b8d7b61e4a2"}, {"sha": "ad7338e5659f5711e08502906147e22b44e41a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7338e5659f5711e08502906147e22b44e41a3e", "html_url": "https://github.com/rust-lang/rust/commit/ad7338e5659f5711e08502906147e22b44e41a3e"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "a1312fcda0b71f251b6443e78b23d12438135ccb", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2038084cf2253b57cf8b405ab000a92b68346f43/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2038084cf2253b57cf8b405ab000a92b68346f43/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=2038084cf2253b57cf8b405ab000a92b68346f43", "patch": "@@ -5,6 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n+use rustc_typeck::hir_ty_to_ty;\n \n use super::{utils, REDUNDANT_ALLOCATION};\n \n@@ -54,8 +55,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     };\n     let inner_span = match qpath_generic_tys(inner_qpath).next() {\n         Some(ty) => {\n-            // Box<Box<dyn T>> is smaller than Box<dyn T> because of wide pointers\n-            if matches!(ty.kind, TyKind::TraitObject(..)) {\n+            // Reallocation of a fat pointer causes it to become thin. `hir_ty_to_ty` is safe to use\n+            // here because `mod.rs` guarantees this lint is only run on types outside of bodies and\n+            // is not run on locals.\n+            if !hir_ty_to_ty(cx.tcx, ty).is_sized(cx.tcx.at(ty.span), cx.param_env) {\n                 return false;\n             }\n             ty.span"}, {"sha": "cf7d8c6e349af2c685037126830a6bf0ac2eb029", "filename": "tests/ui/redundant_allocation.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2038084cf2253b57cf8b405ab000a92b68346f43/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2038084cf2253b57cf8b405ab000a92b68346f43/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=2038084cf2253b57cf8b405ab000a92b68346f43", "patch": "@@ -97,4 +97,39 @@ mod box_dyn {\n     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/8604\n+mod box_fat_ptr {\n+    use std::boxed::Box;\n+    use std::path::Path;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub struct DynSized {\n+        foo: [usize],\n+    }\n+\n+    struct S {\n+        a: Box<Box<str>>,\n+        b: Rc<Box<str>>,\n+        c: Arc<Box<str>>,\n+\n+        e: Box<Box<[usize]>>,\n+        f: Box<Box<Path>>,\n+        g: Box<Box<DynSized>>,\n+    }\n+\n+    pub fn test_box_str(_: Box<Box<str>>) {}\n+    pub fn test_rc_str(_: Rc<Box<str>>) {}\n+    pub fn test_arc_str(_: Arc<Box<str>>) {}\n+\n+    pub fn test_box_slice(_: Box<Box<[usize]>>) {}\n+    pub fn test_box_path(_: Box<Box<Path>>) {}\n+    pub fn test_box_custom(_: Box<Box<DynSized>>) {}\n+\n+    pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+    pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+    pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+    pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n+}\n+\n fn main() {}"}, {"sha": "fab1b069fcbc72462394b367508cb6f34137c22d", "filename": "tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2038084cf2253b57cf8b405ab000a92b68346f43/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2038084cf2253b57cf8b405ab000a92b68346f43/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=2038084cf2253b57cf8b405ab000a92b68346f43", "patch": "@@ -143,5 +143,41 @@ LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n    = note: `Box<Box<dyn T>>` is already on the heap, `Rc<Box<Box<dyn T>>>` makes an extra allocation\n    = help: consider using just `Rc<Box<dyn T>>` or `Box<Box<dyn T>>`\n \n-error: aborting due to 16 previous errors\n+error: usage of `Rc<Box<Box<str>>>`\n+  --> $DIR/redundant_allocation.rs:129:31\n+   |\n+LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+   |                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<str>>` is already on the heap, `Rc<Box<Box<str>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<str>>` or `Box<Box<str>>`\n+\n+error: usage of `Rc<Box<Box<[usize]>>>`\n+  --> $DIR/redundant_allocation.rs:130:33\n+   |\n+LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<[usize]>>` is already on the heap, `Rc<Box<Box<[usize]>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<[usize]>>` or `Box<Box<[usize]>>`\n+\n+error: usage of `Rc<Box<Box<Path>>>`\n+  --> $DIR/redundant_allocation.rs:131:32\n+   |\n+LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+   |                                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<Path>>` is already on the heap, `Rc<Box<Box<Path>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<Path>>` or `Box<Box<Path>>`\n+\n+error: usage of `Rc<Box<Box<DynSized>>>`\n+  --> $DIR/redundant_allocation.rs:132:34\n+   |\n+LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<DynSized>>` is already on the heap, `Rc<Box<Box<DynSized>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<DynSized>>` or `Box<Box<DynSized>>`\n+\n+error: aborting due to 20 previous errors\n "}]}