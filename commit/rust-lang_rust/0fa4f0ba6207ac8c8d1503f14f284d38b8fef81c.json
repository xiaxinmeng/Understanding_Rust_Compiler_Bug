{"sha": "0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTRmMGJhNjIwN2FjOGM4ZDE1MDNmMTRmMjg0ZDM4YjhmZWY4MWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-24T04:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-24T04:47:34Z"}, "message": "Rollup merge of #86415 - Kmeakin:iterator-associativity-docs, r=dtolnay\n\nDocument associativity of iterator folds.\n\nDocument the associativity of `Iterator::fold` and\n`DoubleEndedIterator::rfold` and add examples demonstrating this.\nAdd links to direct users to the fold of the opposite associativity.", "tree": {"sha": "ecf30a6a992c0374fd2790f7e6fa61f3f5c3da95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf30a6a992c0374fd2790f7e6fa61f3f5c3da95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1A5mCRBK7hj4Ov3rIwAA68kIAAJiz8k59iSoiaBOPIC3Dhzd\n2xxY8YOkWPEieEmiZyETqix7F1jhB2GBI0N8Yt3Gm3X+2ZnXrJm4Hsy1QVD2WBir\nkNqYN/zpsaA+BpSEGeEyJNN69Jx/0uJv/VJJ/N2wbe48abQkmMuhwS5HHuFTW/eo\nVEMRqj6L85w2FmPAcZO/Rwso7dcJEbIfvCVlno43BeneC7/CPg5+UsQ5HtrPzPNg\nAOdtwZQU9uJTjtc3shNsKhmvCJ+c7GTl96+8dNzWxi4sZFfCc5kNZaKTHkW0e+QQ\ntwtKjCF6kgEq7fU/g7S8HA3lNyTF6FBwWEJo8mGrnv0G6387l+riZORDCy5IyaA=\n=yKct\n-----END PGP SIGNATURE-----\n", "payload": "tree ecf30a6a992c0374fd2790f7e6fa61f3f5c3da95\nparent 469329d4f89443f756ce6de87a5627b9520b34b2\nparent 8eb0c0df0e8923a264d114291ab96e7bbfa13150\nauthor Yuki Okushi <jtitor@2k36.org> 1624510054 +0900\ncommitter GitHub <noreply@github.com> 1624510054 +0900\n\nRollup merge of #86415 - Kmeakin:iterator-associativity-docs, r=dtolnay\n\nDocument associativity of iterator folds.\n\nDocument the associativity of `Iterator::fold` and\n`DoubleEndedIterator::rfold` and add examples demonstrating this.\nAdd links to direct users to the fold of the opposite associativity.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "html_url": "https://github.com/rust-lang/rust/commit/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469329d4f89443f756ce6de87a5627b9520b34b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/469329d4f89443f756ce6de87a5627b9520b34b2", "html_url": "https://github.com/rust-lang/rust/commit/469329d4f89443f756ce6de87a5627b9520b34b2"}, {"sha": "8eb0c0df0e8923a264d114291ab96e7bbfa13150", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb0c0df0e8923a264d114291ab96e7bbfa13150", "html_url": "https://github.com/rust-lang/rust/commit/8eb0c0df0e8923a264d114291ab96e7bbfa13150"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "6d3ab788e5f480ba2e04b5cc677b6b3c531b79c8", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "patch": "@@ -248,6 +248,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Folding is useful whenever you have a collection of something, and want\n     /// to produce a single value from it.\n     ///\n+    /// Note: `rfold()` combines elements in a *right-associative* fashion. For associative\n+    /// operators like `+`, the order the elements are combined in is not important, but for non-associative\n+    /// operators like `-` the order will affect the final result.\n+    /// For a *left-associative* version of `rfold()`, see [`Iterator::fold()`].\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -262,7 +267,8 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(sum, 6);\n     /// ```\n     ///\n-    /// This example builds a string, starting with an initial value\n+    /// This example demonstrates the right-associative nature of `rfold()`:\n+    /// it builds a string, starting with an initial value\n     /// and continuing with each element from the back until the front:\n     ///\n     /// ```\n@@ -276,6 +282,7 @@ pub trait DoubleEndedIterator: Iterator {\n     ///\n     /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n     /// ```\n+    #[doc(alias = \"foldr\")]\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n     fn rfold<B, F>(mut self, init: B, mut f: F) -> B"}, {"sha": "41d9993abaa4faa95dd27d8373333658aaf94448", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=0fa4f0ba6207ac8c8d1503f14f284d38b8fef81c", "patch": "@@ -2083,6 +2083,11 @@ pub trait Iterator {\n     /// Note: [`reduce()`] can be used to use the first element as the initial\n     /// value, if the accumulator type and item type is the same.\n     ///\n+    /// Note: `fold()` combines elements in a *left-associative* fashion. For associative\n+    /// operators like `+`, the order the elements are combined in is not important, but for non-associative\n+    /// operators like `-` the order will affect the final result.\n+    /// For a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n+    ///\n     /// # Note to Implementors\n     ///\n     /// Several of the other (forward) methods have default implementations in\n@@ -2116,6 +2121,21 @@ pub trait Iterator {\n     ///\n     /// And so, our final result, `6`.\n     ///\n+    /// This example demonstrates the left-associative nature of `fold()`:\n+    /// it builds a string, starting with an initial value\n+    /// and continuing with each element from the front until the back:\n+    ///\n+    /// ```\n+    /// let numbers = [1, 2, 3, 4, 5];\n+    ///\n+    /// let zero = \"0\".to_string();\n+    ///\n+    /// let result = numbers.iter().fold(zero, |acc, &x| {\n+    ///     format!(\"({} + {})\", acc, x)\n+    /// });\n+    ///\n+    /// assert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n+    /// ```\n     /// It's common for people who haven't used iterators a lot to\n     /// use a `for` loop with a list of things to build up a result. Those\n     /// can be turned into `fold()`s:\n@@ -2140,7 +2160,7 @@ pub trait Iterator {\n     /// ```\n     ///\n     /// [`reduce()`]: Iterator::reduce\n-    #[doc(alias = \"inject\")]\n+    #[doc(alias = \"inject\", alias = \"foldl\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B"}]}