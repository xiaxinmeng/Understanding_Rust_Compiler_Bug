{"sha": "4eacf45c9cf6bd110dc019082c2a4a8fd9668d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYWNmNDVjOWNmNmJkMTEwZGMwMTkwODJjMmE0YThmZDk2NjhkNjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T11:01:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T11:01:15Z"}, "message": "also cover next() path of draining iterators", "tree": {"sha": "9bb6ac6a1e0cd5555615fd26649737a4d1520f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb6ac6a1e0cd5555615fd26649737a4d1520f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66", "html_url": "https://github.com/rust-lang/rust/commit/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3411ade32ea8bb2e3f62140e8d47ad43c5a759ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3411ade32ea8bb2e3f62140e8d47ad43c5a759ac", "html_url": "https://github.com/rust-lang/rust/commit/3411ade32ea8bb2e3f62140e8d47ad43c5a759ac"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "05fa7589639fc7e4e967e9cde8e02251e62ad908", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eacf45c9cf6bd110dc019082c2a4a8fd9668d66/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=4eacf45c9cf6bd110dc019082c2a4a8fd9668d66", "patch": "@@ -1352,6 +1352,13 @@ fn test_try_reserve_exact() {\n \n #[test]\n fn test_stable_pointers() {\n+    /// Pull an element from the iterator, then drop it.\n+    /// Useful to cover both the `next` and `drop` paths of an iterator.\n+    fn next_then_drop<I: Iterator>(mut i: I) {\n+        i.next().unwrap();\n+        drop(i);\n+    }\n+\n     // Test that, if we reserved enough space, adding and removing elements does not\n     // invalidate references into the vector (such as `v0`).  This test also\n     // runs in Miri, which would detect such problems.\n@@ -1402,16 +1409,16 @@ fn test_stable_pointers() {\n \n     // Partial draining\n     v.resize_with(10, || 42);\n-    drop(v.drain(5..));\n+    next_then_drop(v.drain(5..));\n     assert_eq!(*v0, 13);\n \n     // Splicing\n     v.resize_with(10, || 42);\n-    drop(v.splice(5.., vec![1, 2, 3, 4, 5])); // empty tail after range\n+    next_then_drop(v.splice(5.., vec![1, 2, 3, 4, 5])); // empty tail after range\n     assert_eq!(*v0, 13);\n-    drop(v.splice(5..8, vec![1])); // replacement is smaller than original range\n+    next_then_drop(v.splice(5..8, vec![1])); // replacement is smaller than original range\n     assert_eq!(*v0, 13);\n-    drop(v.splice(5..6, vec![1; 10].into_iter().filter(|_| true))); // lower bound not exact\n+    next_then_drop(v.splice(5..6, vec![1; 10].into_iter().filter(|_| true))); // lower bound not exact\n     assert_eq!(*v0, 13);\n }\n "}]}