{"sha": "98cc51580d0b8a6662f0155d8a45a8cfff469d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2M1MTU4MGQwYjhhNjY2MmYwMTU1ZDhhNDVhOGNmZmY0NjlkNzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:04:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:04:08Z"}, "message": "Enable profiling for bench", "tree": {"sha": "bf80d0d3a0d05f94732cddfb25eeb857b0cc8005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf80d0d3a0d05f94732cddfb25eeb857b0cc8005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cc51580d0b8a6662f0155d8a45a8cfff469d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cc51580d0b8a6662f0155d8a45a8cfff469d72", "html_url": "https://github.com/rust-lang/rust/commit/98cc51580d0b8a6662f0155d8a45a8cfff469d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cc51580d0b8a6662f0155d8a45a8cfff469d72/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98967d7658e2475d3b58d57950b8d1fb74156fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98967d7658e2475d3b58d57950b8d1fb74156fa", "html_url": "https://github.com/rust-lang/rust/commit/b98967d7658e2475d3b58d57950b8d1fb74156fa"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "764df6b9efd60ce610d743cab93ef6040eab2e07", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=98cc51580d0b8a6662f0155d8a45a8cfff469d72", "patch": "@@ -20,6 +20,8 @@ pub(crate) enum Op {\n }\n \n pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n+    ra_prof::init();\n+\n     let start = Instant::now();\n     eprint!(\"loading: \");\n     let (mut host, roots) = ra_batch::load_cargo(path)?;"}, {"sha": "ed2eaabd4ca96b488b140f82b3622b783f091cc5", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=98cc51580d0b8a6662f0155d8a45a8cfff469d72", "patch": "@@ -15,13 +15,8 @@ fn main() -> Result<()> {\n \n fn setup_logging() -> Result<()> {\n     std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n-\n     env_logger::try_init()?;\n-\n-    ra_prof::set_filter(match std::env::var(\"RA_PROFILE\") {\n-        Ok(spec) => ra_prof::Filter::from_spec(&spec),\n-        Err(_) => ra_prof::Filter::disabled(),\n-    });\n+    ra_prof::init();\n     Ok(())\n }\n "}, {"sha": "c0bfbc2ee1415efa1d14682624f7fc7f1b2e1507", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc51580d0b8a6662f0155d8a45a8cfff469d72/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=98cc51580d0b8a6662f0155d8a45a8cfff469d72", "patch": "@@ -26,6 +26,13 @@ pub use crate::memory_usage::{Bytes, MemoryUsage};\n #[global_allocator]\n static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n+pub fn init() {\n+    set_filter(match std::env::var(\"RA_PROFILE\") {\n+        Ok(spec) => Filter::from_spec(&spec),\n+        Err(_) => Filter::disabled(),\n+    });\n+}\n+\n /// Set profiling filter. It specifies descriptions allowed to profile.\n /// This is helpful when call stack has too many nested profiling scopes.\n /// Additionally filter can specify maximum depth of profiling scopes nesting."}]}