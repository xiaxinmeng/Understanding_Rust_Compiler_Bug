{"sha": "06f3f9a0c9f25c92b7362a4af6067df8902bd057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjNmOWEwYzlmMjVjOTJiNzM2MmE0YWY2MDY3ZGY4OTAyYmQwNTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-06T00:20:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T02:51:24Z"}, "message": "rustdoc: Inline static documentation across crates", "tree": {"sha": "2a354f9b278b11b2d4369170b9e72b074adbdf01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a354f9b278b11b2d4369170b9e72b074adbdf01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f3f9a0c9f25c92b7362a4af6067df8902bd057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f3f9a0c9f25c92b7362a4af6067df8902bd057", "html_url": "https://github.com/rust-lang/rust/commit/06f3f9a0c9f25c92b7362a4af6067df8902bd057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f3f9a0c9f25c92b7362a4af6067df8902bd057/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2290dbb8cc9c72e1b6b64b7325430f031e2cd87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2290dbb8cc9c72e1b6b64b7325430f031e2cd87b", "html_url": "https://github.com/rust-lang/rust/commit/2290dbb8cc9c72e1b6b64b7325430f031e2cd87b"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "e9ea3a7b304e07c85612a485bd5faef921192b78", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=06f3f9a0c9f25c92b7362a4af6067df8902bd057", "patch": "@@ -88,6 +88,10 @@ fn try_inline_def(cx: &core::DocContext,\n             record_extern_fqn(cx, did, clean::TypeModule);\n             clean::ModuleItem(build_module(cx, tcx, did))\n         }\n+        ast::DefStatic(did, mtbl) => {\n+            record_extern_fqn(cx, did, clean::TypeStatic);\n+            clean::StaticItem(build_static(tcx, did, mtbl))\n+        }\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n@@ -343,3 +347,13 @@ fn build_module(cx: &core::DocContext, tcx: &ty::ctxt,\n         is_crate: false,\n     }\n }\n+\n+fn build_static(tcx: &ty::ctxt,\n+                did: ast::DefId,\n+                mutable: bool) -> clean::Static {\n+    clean::Static {\n+        type_: ty::lookup_item_type(tcx, did).ty.clean(),\n+        mutability: if mutable {clean::Mutable} else {clean::Immutable},\n+        expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n+    }\n+}"}, {"sha": "1706f00b70a6fb6f50f43ae8d43e004d1c5990d8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=06f3f9a0c9f25c92b7362a4af6067df8902bd057", "patch": "@@ -35,6 +35,8 @@ pub struct VisSpace(pub Option<ast::Visibility>);\n pub struct FnStyleSpace(pub ast::FnStyle);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n+/// Similar to VisSpace, but used for mutability\n+pub struct MutableSpace(pub clean::Mutability);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -438,24 +440,14 @@ impl fmt::Show for clean::Type {\n             clean::Unique(ref t) => write!(f, \"~{}\", **t),\n             clean::Managed(ref t) => write!(f, \"@{}\", **t),\n             clean::RawPointer(m, ref t) => {\n-                write!(f, \"*{}{}\",\n-                       match m {\n-                           clean::Mutable => \"mut \",\n-                           clean::Immutable => \"\",\n-                       }, **t)\n+                write!(f, \"*{}{}\", MutableSpace(m), **t)\n             }\n             clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n                 let lt = match *l {\n                     Some(ref l) => format!(\"{} \", *l),\n                     _ => \"\".to_string(),\n                 };\n-                write!(f, \"&amp;{}{}{}\",\n-                       lt,\n-                       match mutability {\n-                           clean::Mutable => \"mut \",\n-                           clean::Immutable => \"\",\n-                       },\n-                       **ty)\n+                write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n             }\n         }\n     }\n@@ -494,17 +486,13 @@ impl<'a> fmt::Show for Method<'a> {\n             clean::SelfStatic => {},\n             clean::SelfValue => args.push_str(\"self\"),\n             clean::SelfOwned => args.push_str(\"~self\"),\n-            clean::SelfBorrowed(Some(ref lt), clean::Immutable) => {\n-                args.push_str(format!(\"&amp;{} self\", *lt).as_slice());\n-            }\n-            clean::SelfBorrowed(Some(ref lt), clean::Mutable) => {\n-                args.push_str(format!(\"&amp;{} mut self\", *lt).as_slice());\n-            }\n-            clean::SelfBorrowed(None, clean::Mutable) => {\n-                args.push_str(\"&amp;mut self\");\n+            clean::SelfBorrowed(Some(ref lt), mtbl) => {\n+                args.push_str(format!(\"&amp;{} {}self\", *lt,\n+                                      MutableSpace(mtbl)).as_slice());\n             }\n-            clean::SelfBorrowed(None, clean::Immutable) => {\n-                args.push_str(\"&amp;self\");\n+            clean::SelfBorrowed(None, mtbl) => {\n+                args.push_str(format!(\"&amp;{}self\",\n+                                      MutableSpace(mtbl)).as_slice());\n             }\n         }\n         for (i, input) in d.inputs.values.iter().enumerate() {\n@@ -605,3 +593,12 @@ impl fmt::Show for clean::ViewListIdent {\n         }\n     }\n }\n+\n+impl fmt::Show for MutableSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            MutableSpace(clean::Immutable) => Ok(()),\n+            MutableSpace(clean::Mutable) => write!(f, \"mut \"),\n+        }\n+    }\n+}"}, {"sha": "086232104e36d5f78ef783be8f898cc72b1e7c2a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f3f9a0c9f25c92b7362a4af6067df8902bd057/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=06f3f9a0c9f25c92b7362a4af6067df8902bd057", "patch": "@@ -51,7 +51,7 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n-use html::format::{VisSpace, Method, FnStyleSpace};\n+use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace};\n use html::highlight;\n use html::item_type::{ItemType, shortty};\n use html::item_type;\n@@ -1441,11 +1441,12 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n                 try!(write!(w, \"\n                     <tr>\n-                        <td><code>{}static {}: {}</code>{}</td>\n+                        <td><code>{}static {}{}: {}</code>{}</td>\n                         <td class='docblock'>{}&nbsp;</td>\n                     </tr>\n                 \",\n                 VisSpace(myitem.visibility),\n+                MutableSpace(s.mutability),\n                 *myitem.name.get_ref(),\n                 s.type_,\n                 Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),"}]}