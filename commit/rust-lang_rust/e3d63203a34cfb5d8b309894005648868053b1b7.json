{"sha": "e3d63203a34cfb5d8b309894005648868053b1b7", "node_id": "C_kwDOAAsO6NoAKGUzZDYzMjAzYTM0Y2ZiNWQ4YjMwOTg5NDAwNTY0ODg2ODA1M2IxYjc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T17:43:15Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-04T08:42:23Z"}, "message": "Only compute DefKind through the query.", "tree": {"sha": "bbbba6debe324f4e6243e203979493215dc5b678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbba6debe324f4e6243e203979493215dc5b678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d63203a34cfb5d8b309894005648868053b1b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d63203a34cfb5d8b309894005648868053b1b7", "html_url": "https://github.com/rust-lang/rust/commit/e3d63203a34cfb5d8b309894005648868053b1b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d63203a34cfb5d8b309894005648868053b1b7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6fa4f118d88991458549464d960aa1e495541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b", "html_url": "https://github.com/rust-lang/rust/commit/9a6fa4f118d88991458549464d960aa1e495541b"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "85e3b7424ada9f7a42cd709c8ab259b3e2d12e56", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=e3d63203a34cfb5d8b309894005648868053b1b7", "patch": "@@ -225,7 +225,8 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions_untracked().iter_local_def_id()\n     }\n \n-    pub fn opt_def_kind(self, local_def_id: LocalDefId) -> Option<DefKind> {\n+    /// Do not call this function directly.  The query should be called.\n+    pub(super) fn opt_def_kind(self, local_def_id: LocalDefId) -> Option<DefKind> {\n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n         let def_kind = match self.find(hir_id)? {\n             Node::Item(item) => match item.kind {"}, {"sha": "5ac8ac87fbbff25498a70de57410209e834c6759", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e3d63203a34cfb5d8b309894005648868053b1b7", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         }\n \n         let macro_module_def_id = self.tcx.local_parent(local_def_id);\n-        if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n+        if self.tcx.opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n             // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).\n             return;\n         }"}, {"sha": "7f38f32e25f024c01e99fffc356abcdc4f03188a", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d63203a34cfb5d8b309894005648868053b1b7/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=e3d63203a34cfb5d8b309894005648868053b1b7", "patch": "@@ -291,7 +291,7 @@ macro_rules! define_queries {\n                 // accidentally triggering an infinite query loop.\n                 let def_kind = key.key_as_def_id()\n                     .and_then(|def_id| def_id.as_local())\n-                    .and_then(|def_id| tcx.hir().opt_def_kind(def_id));\n+                    .map(|def_id| tcx.def_kind(def_id));\n                 let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();"}]}