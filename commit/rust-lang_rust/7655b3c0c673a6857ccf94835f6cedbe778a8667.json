{"sha": "7655b3c0c673a6857ccf94835f6cedbe778a8667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NTViM2MwYzY3M2E2ODU3Y2NmOTQ4MzVmNmNlZGJlNzc4YTg2Njc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T12:57:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T12:57:12Z"}, "message": "Stop lexing -1 as a single token\n\nAnd remove the hack that made 1-1 work given that other hack.\n\nIssue #954", "tree": {"sha": "bebf53beb6afacdba479eb1508624bc1fa026a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebf53beb6afacdba479eb1508624bc1fa026a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7655b3c0c673a6857ccf94835f6cedbe778a8667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7655b3c0c673a6857ccf94835f6cedbe778a8667", "html_url": "https://github.com/rust-lang/rust/commit/7655b3c0c673a6857ccf94835f6cedbe778a8667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7655b3c0c673a6857ccf94835f6cedbe778a8667/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ce092c273a20cc503697c3dfebb956c9025d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ce092c273a20cc503697c3dfebb956c9025d46", "html_url": "https://github.com/rust-lang/rust/commit/64ce092c273a20cc503697c3dfebb956c9025d46"}], "stats": {"total": 65, "additions": 3, "deletions": 62}, "files": [{"sha": "385e0df34fe26c20252c5195459310be5debdaef", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7655b3c0c673a6857ccf94835f6cedbe778a8667/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7655b3c0c673a6857ccf94835f6cedbe778a8667/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=7655b3c0c673a6857ccf94835f6cedbe778a8667", "patch": "@@ -175,17 +175,6 @@ fn scan_exponent(rdr: reader) -> option::t<str> {\n     } else { ret none::<str>; }\n }\n \n-fn scan_dec_digits_with_prefix(rdr: reader) -> str {\n-    let negative = false;\n-    if rdr.curr() == '-' {\n-        negative = true;\n-        rdr.bump();\n-    }\n-    let digits = scan_dec_digits(rdr);\n-    if negative { str::unshift_char(digits, '-'); }\n-    ret digits;\n-}\n-\n fn scan_dec_digits(rdr: reader) -> str {\n     let c = rdr.curr();\n     let rslt: str = \"\";\n@@ -220,7 +209,7 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n             c = rdr.curr();\n         }\n     } else {\n-        num_str = scan_dec_digits_with_prefix(rdr);\n+        num_str = scan_dec_digits(rdr);\n         accum_int = std::int::from_str(num_str);\n     }\n     c = rdr.curr();\n@@ -346,7 +335,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n         ret token::IDENT(interner::intern::<str>(*rdr.get_interner(),\n                                                  accum_str), is_mod_name);\n     }\n-    if is_dec_digit(c) || (c == '-' && is_dec_digit(rdr.next())) {\n+    if is_dec_digit(c) {\n         ret scan_number(c, rdr);\n     }\n     fn binop(rdr: reader, op: token::binop) -> token::token {\n@@ -743,42 +732,6 @@ fn gather_comments_and_literals(cm: codemap::codemap, path: str,\n     ret {cmnts: comments, lits: literals};\n }\n \n-// This is a stopgap fix. We will have to do better eventually (issue #954)\n-fn maybe_untangle_minus_from_lit(r: reader, t: token::token)\n-    -> option::t<token::token> {\n-    fn check_str(r: reader, i: uint) -> option::t<uint> {\n-        let it = r.get_interner(), s = interner::get(*it, i);\n-        if s[0] == '-' as u8 {\n-            some(interner::intern(*it, str::slice(s, 1u, str::byte_len(s))))\n-        } else { none }\n-    }\n-    alt t {\n-      token::LIT_INT(v) {\n-        if v < 0 { ret some(token::LIT_INT(-v)); }\n-      }\n-      token::LIT_UINT(v) {\n-        if v > 0x7fffffffu { ret some(token::LIT_UINT(-(v as int) as uint)); }\n-      }\n-      token::LIT_MACH_INT(m, v) {\n-        if v < 0 { ret some(token::LIT_MACH_INT(m, -v)); }\n-      }\n-      token::LIT_FLOAT(s) {\n-        alt check_str(r, s) {\n-          some(s) { ret some(token::LIT_FLOAT(s)); }\n-          _ {}\n-        }\n-      }\n-      token::LIT_MACH_FLOAT(m, s) {\n-        alt check_str(r, s) {\n-          some(s) { ret some(token::LIT_MACH_FLOAT(m, s)); }\n-          _ {}\n-        }\n-      }\n-      _ {}\n-    }\n-    none\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "27dab755e061d6661c98596d9e2bad3c76e9f06a", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7655b3c0c673a6857ccf94835f6cedbe778a8667/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7655b3c0c673a6857ccf94835f6cedbe778a8667/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7655b3c0c673a6857ccf94835f6cedbe778a8667", "patch": "@@ -1180,24 +1180,12 @@ fn parse_more_binops(p: parser, lhs: @ast::expr, min_prec: int) ->\n    @ast::expr {\n     if !expr_has_value(lhs) { ret lhs; }\n     let peeked = p.peek();\n-    let lit_after = alt lexer::maybe_untangle_minus_from_lit(p.get_reader(),\n-                                                             peeked) {\n-      some(tok) {\n-        peeked = token::BINOP(token::MINUS);\n-        let lit = @{node: lit_from_token(p, tok), span: p.get_span()};\n-        some(mk_expr(p, p.get_lo_pos(), p.get_hi_pos(), ast::expr_lit(lit)))\n-      }\n-      none. { none }\n-    };\n     if peeked == token::BINOP(token::OR) &&\n        p.get_restriction() == RESTRICT_NO_BAR_OP { ret lhs; }\n     for cur: op_spec in *p.get_prec_table() {\n         if cur.prec > min_prec && cur.tok == peeked {\n             p.bump();\n-            let expr = alt lit_after {\n-              some(ex) { ex }\n-              _ { parse_prefix_expr(p) }\n-            };\n+            let expr = parse_prefix_expr(p);\n             let rhs = parse_more_binops(p, expr, cur.prec);\n             let bin = mk_expr(p, lhs.span.lo, rhs.span.hi,\n                               ast::expr_binary(cur.op, lhs, rhs));"}]}