{"sha": "3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGY0ODA1M2U4M2Y0OTQ5ZDAwZGNhZjZlYjhkOWUyOGZjNmJiOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-11T04:58:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-11T04:58:48Z"}, "message": "Auto merge of #71896 - spastorino:existential-assoc-types-variance, r=nikomatsakis\n\nRelate existential associated types with variance Invariant\n\nFixes #71550 #72315\n\nr? @nikomatsakis\n\nThe test case reported in that issue now errors with the following message ...\n\n```\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to conflicting requirements\n  --> /tmp/test.rs:25:5\n   |\n25 |     bad(&Bar(PhantomData), x)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 24:11...\n  --> /tmp/test.rs:24:11\n   |\n24 | fn extend<'a, T>(x: &'a T) -> &'static T {\n   |           ^^\nnote: ...so that reference does not outlive borrowed content\n  --> /tmp/test.rs:25:28\n   |\n25 |     bad(&Bar(PhantomData), x)\n   |                            ^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the types are compatible\n  --> /tmp/test.rs:25:9\n   |\n25 |     bad(&Bar(PhantomData), x)\n   |         ^^^^^^^^^^^^^^^^^\n   = note: expected  `&'static T`\n              found  `&T`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0495`.\n```\n\nI could also add that test case if we want to have a weaponized one too.", "tree": {"sha": "77896eb87d9a6d0986920cd169e4468003ee3938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77896eb87d9a6d0986920cd169e4468003ee3938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "html_url": "https://github.com/rust-lang/rust/commit/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93cb961ba67c73815401291ab42b81e3e5733ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93cb961ba67c73815401291ab42b81e3e5733ae", "html_url": "https://github.com/rust-lang/rust/commit/e93cb961ba67c73815401291ab42b81e3e5733ae"}, {"sha": "c99164e7a13d7b2451464f3c0c066be9c7516a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99164e7a13d7b2451464f3c0c066be9c7516a2b", "html_url": "https://github.com/rust-lang/rust/commit/c99164e7a13d7b2451464f3c0c066be9c7516a2b"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "67426b87c24f72b9a5000e4a3d1dc7a65103d758", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -250,8 +250,8 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n                 &b.item_def_id,\n             )))\n         } else {\n-            let ty = relation.relate(&a.ty, &b.ty)?;\n-            let substs = relation.relate(&a.substs, &b.substs)?;\n+            let ty = relation.relate_with_variance(ty::Invariant, &a.ty, &b.ty)?;\n+            let substs = relation.relate_with_variance(ty::Invariant, &a.substs, &b.substs)?;\n             Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, ty })\n         }\n     }"}, {"sha": "93e16bac13b876ef66d81cdd1c8faca674b4e5a3", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -121,7 +121,7 @@ error[E0308]: mismatched types\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n    |\n-   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n+   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n               found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n \n error: aborting due to 14 previous errors"}, {"sha": "5e050f27ac5465102ce295a3a328a148a9cd6715", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for values of type `dyn std::iter::Iterator<Item = &mut u8>` cannot be known at compilation time\n+error[E0277]: the size for values of type `dyn std::iter::Iterator<Item = &'a mut u8>` cannot be known at compilation time\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &mut u8>`\n+   = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item = &'a mut u8>`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n "}, {"sha": "27d1e1844167e5ad725038ec719eec67a5f44719", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/variance-associated-types2.rs:13:12\n+   |\n+LL | fn take<'a>(_: &'a u32) {\n+   |         -- lifetime `'a` defined here\n+LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a095fce7abfac9ab43064f5594105a0b12135f9", "filename": "src/test/ui/variance/variance-associated-types2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -0,0 +1,17 @@\n+// Test that dyn Foo<Bar = T> is invariant with respect to T.\n+// Failure to enforce invariance here can be weaponized, see #71550 for details.\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+fn make() -> Box<dyn Foo<Bar = &'static u32>> {\n+    panic!()\n+}\n+\n+fn take<'a>(_: &'a u32) {\n+    let _: Box<dyn Foo<Bar = &'a u32>> = make();\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "52cdd6493b06dc29f1c016b76f45435a6b5cd6b8", "filename": "src/test/ui/variance/variance-associated-types2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr?ref=3ddf48053e83f4949d00dcaf6eb8d9e28fc6bb95", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/variance-associated-types2.rs:13:42\n+   |\n+LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n+   |                                          ^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait object `dyn Foo<Bar = &'a u32>`\n+              found trait object `dyn Foo<Bar = &'static u32>`\n+note: the lifetime `'a` as defined on the function body at 12:9...\n+  --> $DIR/variance-associated-types2.rs:12:9\n+   |\n+LL | fn take<'a>(_: &'a u32) {\n+   |         ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}