{"sha": "d8dcdec2b8603cdb8059488a090b3b81223dcb22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZGNkZWMyYjg2MDNjZGI4MDU5NDg4YTA5MGIzYjgxMjIzZGNiMjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-11T15:52:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-11T15:52:14Z"}, "message": "Rollup merge of #71021 - robojumper:71000-mir-assert-syntax, r=jonas-schievink\n\nUse write!-style syntax for MIR assert terminator\n\nFixes #71000.\n\nr? @jonas-schievink", "tree": {"sha": "11fa17c2544f6f26770fb95bb1f2e78182c3f842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11fa17c2544f6f26770fb95bb1f2e78182c3f842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8dcdec2b8603cdb8059488a090b3b81223dcb22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekeevCRBK7hj4Ov3rIwAAdHIIAH3dtkZmbOkD5SL3H2RbyniL\nO79+PNfhTBNWBM8SjtLCRTF6gnmpuLw5fl75DZfSo4XjOnsU823377ZUe9UaeGMa\nB3KCktTdfvwqrX74Uxz/aHGuI4llD7i3Nw18V1Ju/r+6MWhrpiovmoBNCtQVhKnr\noyM6yD9c9jcHiCmwsdb6C1/NbPnhhcZYE3y9PXnNET022k6Xsbzywro8Q1roQimz\nqpDeu+WFvdbEz0yjB1AAYgqxhKnGRy3n7Va+/C+JXTU4OsrEzhkrilbqo710B4Fs\ncm+C07GTaA3vfyTORNI0v41AV9SD/kcU0T+YbXyA5/u4D784hFycF1kVgz2Fj7c=\n=AMy8\n-----END PGP SIGNATURE-----\n", "payload": "tree 11fa17c2544f6f26770fb95bb1f2e78182c3f842\nparent b794cb262fc3398a1beab4ee3aaeefe80454aa69\nparent b78ff993fdbaba227f2fe7884ab1e6c0186514c7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586620334 +0200\ncommitter GitHub <noreply@github.com> 1586620334 +0200\n\nRollup merge of #71021 - robojumper:71000-mir-assert-syntax, r=jonas-schievink\n\nUse write!-style syntax for MIR assert terminator\n\nFixes #71000.\n\nr? @jonas-schievink\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dcdec2b8603cdb8059488a090b3b81223dcb22", "html_url": "https://github.com/rust-lang/rust/commit/d8dcdec2b8603cdb8059488a090b3b81223dcb22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8dcdec2b8603cdb8059488a090b3b81223dcb22/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b794cb262fc3398a1beab4ee3aaeefe80454aa69", "url": "https://api.github.com/repos/rust-lang/rust/commits/b794cb262fc3398a1beab4ee3aaeefe80454aa69", "html_url": "https://github.com/rust-lang/rust/commit/b794cb262fc3398a1beab4ee3aaeefe80454aa69"}, {"sha": "b78ff993fdbaba227f2fe7884ab1e6c0186514c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78ff993fdbaba227f2fe7884ab1e6c0186514c7", "html_url": "https://github.com/rust-lang/rust/commit/b78ff993fdbaba227f2fe7884ab1e6c0186514c7"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "212061cfd824f9c365b61e6feb59f54c4068140f", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -1403,6 +1403,21 @@ impl<O> AssertKind<O> {\n             BoundsCheck { .. } => bug!(\"Unexpected AssertKind\"),\n         }\n     }\n+\n+    /// Format the message arguments for the `assert(cond, msg..)` terminator in MIR printing.\n+    fn fmt_assert_args<W: Write>(&self, f: &mut W) -> fmt::Result\n+    where\n+        O: Debug,\n+    {\n+        match self {\n+            AssertKind::BoundsCheck { ref len, ref index } => write!(\n+                f,\n+                \"\\\"index out of bounds: the len is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n+                len, index\n+            ),\n+            _ => write!(f, \"\\\"{}\\\"\", self.description()),\n+        }\n+    }\n }\n \n impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n@@ -1480,7 +1495,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 if !expected {\n                     write!(fmt, \"!\")?;\n                 }\n-                write!(fmt, \"{:?}, \\\"{:?}\\\")\", cond, msg)\n+                write!(fmt, \"{:?}, \", cond)?;\n+                msg.fmt_assert_args(fmt)?;\n+                write!(fmt, \")\")\n             }\n             FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n             FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),"}, {"sha": "0016cebbb4c064341ffe657d44a060d75ae864b7", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n         _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "a004ab4a06aed524401b46f9b6869822892984e7", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n         _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "1deeee0f61239e5431d03f72d122b3be3bf4c872", "filename": "src/test/mir-opt/combine_array_len/32bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -44,7 +44,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -68,7 +68,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "7120829e2b54a0bf0db53a307947767ed40b98e9", "filename": "src/test/mir-opt/combine_array_len/64bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -44,7 +44,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -68,7 +68,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "99d79b23e9e60f438291fc623c2b5b0ba175f993", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -56,15 +56,15 @@\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n -         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "629ca226f2ad60645af2ea66f06f3d0df4eab013", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -56,15 +56,15 @@\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n -         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "41ffedf06bc980c711526dbde6fa10a512855377", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -119,15 +119,15 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n -         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "fd3281f527372a4e7cfa2d25a437d926aa87071e", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -119,15 +119,15 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n -         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "9d62fa31a4565d4b811edc0aea219b20a8489ed6", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -40,15 +40,15 @@\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n -         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "cb84ee82cfea8bf92339b16e0d0c888e0841f21b", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -40,15 +40,15 @@\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n -         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "dbb4171e7f0ed90e255f3cdf099cac76c60799c4", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -39,7 +39,7 @@\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n -         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n@@ -54,7 +54,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "3c4415e05583867c16c5d1b08c620d36408f2357", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -39,7 +39,7 @@\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n -         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n@@ -54,7 +54,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "1f75658aa265ae7feb2f24da7e83c723c3a5f316", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n     }\n \n     bb1 (cleanup): {"}, {"sha": "8305c3fe7c493ecbf1aac45f831958be3614fa6f", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d8dcdec2b8603cdb8059488a090b3b81223dcb22/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=d8dcdec2b8603cdb8059488a090b3b81223dcb22", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n     }\n \n     bb1 (cleanup): {"}]}