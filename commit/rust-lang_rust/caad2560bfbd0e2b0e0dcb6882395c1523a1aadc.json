{"sha": "caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYWQyNTYwYmZiZDBlMmIwZTBkY2I2ODgyMzk1YzE1MjNhMWFhZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-18T01:50:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-18T01:50:29Z"}, "message": "Auto merge of #43628 - oli-obk:orbital_standard_library, r=alexcrichton\n\nRun the miri test suite on the aux builder and travis\n\nReopen of #38350\n\nsee https://github.com/rust-lang/rust/pull/43340#issuecomment-316940762 for earlier discussion\n\nRationale for running miri's test suite in rustc's CI is that miri currently contains many features that we want in const eval in the future, and these features would break if the test suite is not run.\n\nfixes #44077\n\nr? @nikomatsakis\n\ncc @eddyb", "tree": {"sha": "382ef1cea7a7de3e7184782db64c62f861ec6314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382ef1cea7a7de3e7184782db64c62f861ec6314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "html_url": "https://github.com/rust-lang/rust/commit/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a76d8accf04047a938ba43b32d5ff9ab581715", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a76d8accf04047a938ba43b32d5ff9ab581715", "html_url": "https://github.com/rust-lang/rust/commit/e8a76d8accf04047a938ba43b32d5ff9ab581715"}, {"sha": "01555b1da1bb0fb289b1c971a046b315c751c861", "url": "https://api.github.com/repos/rust-lang/rust/commits/01555b1da1bb0fb289b1c971a046b315c751c861", "html_url": "https://github.com/rust-lang/rust/commit/01555b1da1bb0fb289b1c971a046b315c751c861"}], "stats": {"total": 379, "additions": 334, "deletions": 45}, "files": [{"sha": "2802c8d63913f8aa43a39628e2877e81d9ee98ff", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -39,3 +39,6 @@\n [submodule \"src/tools/rustfmt\"]\n \tpath = src/tools/rustfmt\n \turl = https://github.com/rust-lang-nursery/rustfmt.git\n+[submodule \"src/tools/miri\"]\n+\tpath = src/tools/miri\n+\turl = https://github.com/solson/miri.git"}, {"sha": "a3790c8d202587c7ee13a206f476057ee8c5f376", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -291,6 +291,10 @@\n # When creating source tarballs whether or not to create a source tarball.\n #dist-src = false\n \n+# Whether to also run the Miri tests suite when running tests.\n+# As a side-effect also generates MIR for all libraries.\n+#test-miri = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "848b10d312cea476c8352d22690f3b63424fa399", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -246,6 +246,12 @@ fn main() {\n             }\n         }\n \n+        // When running miri tests, we need to generate MIR for all libraries\n+        if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") {\n+            cmd.arg(\"-Zalways-encode-mir\");\n+            cmd.arg(\"-Zmir-emit-validate=1\");\n+        }\n+\n         // Force all crates compiled by this compiler to (a) be unstable and (b)\n         // allow the `rustc_private` feature to link to other unstable crates\n         // also in the sysroot."}, {"sha": "7d116f23ef5816ad57216aa91758759b5451326d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -250,18 +250,18 @@ impl<'a> Builder<'a> {\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n-                native::Llvm, tool::Rustfmt),\n+                native::Llvm, tool::Rustfmt, tool::Miri),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck, check::Rustfmt),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,\n                 doc::Reference, doc::Rustdoc, doc::CargoBook),\n             Kind::Dist => describe!(dist::Docs, dist::Mingw, dist::Rustc, dist::DebuggerScripts,\n                 dist::Std, dist::Analysis, dist::Src, dist::PlainSourceTarball, dist::Cargo,\n-                dist::Rls, dist::Extended, dist::HashSign),\n+                dist::Rls, dist::Extended, dist::HashSign, dist::DontDistWithMiriEnabled),\n             Kind::Install => describe!(install::Docs, install::Std, install::Cargo, install::Rls,\n                 install::Analysis, install::Src, install::Rustc),\n         }\n@@ -481,6 +481,7 @@ impl<'a> Builder<'a> {\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n              })\n+             .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n         if mode != Mode::Tool {"}, {"sha": "95ac2be5423c66f7c9509d2fee9fa57e5a21178c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -23,7 +23,7 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::io::Read;\n \n-use build_helper::{self, output};\n+use build_helper::{self, output, BuildExpectation};\n \n use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use cache::{INTERNER, Interned};\n@@ -33,6 +33,7 @@ use native;\n use tool::{self, Tool};\n use util::{self, dylib_path, dylib_path_var};\n use {Build, Mode};\n+use toolstate::ToolState;\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -64,17 +65,21 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run(build: &Build, cmd: &mut Command) {\n+fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) {\n     if !build.fail_fast {\n-        if !build.try_run(cmd) {\n+        if !build.try_run(cmd, expect) {\n             let failures = build.delayed_failures.get();\n             build.delayed_failures.set(failures + 1);\n         }\n     } else {\n-        build.run(cmd);\n+        build.run_expecting(cmd, expect);\n     }\n }\n \n+fn try_run(build: &Build, cmd: &mut Command) {\n+    try_run_expecting(build, cmd, BuildExpectation::None)\n+}\n+\n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n     if !build.fail_fast {\n         if !build.try_run_quiet(cmd) {\n@@ -294,6 +299,56 @@ impl Step for Rustfmt {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Miri {\n+    host: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let test_miri = run.builder.build.config.test_miri;\n+        run.path(\"src/tools/miri\").default_condition(test_miri)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for miri.\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let host = self.host;\n+        let compiler = builder.compiler(1, host);\n+\n+        let miri = builder.ensure(tool::Miri { compiler, target: self.host });\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/miri/Cargo.toml\"));\n+\n+        // Don't build tests dynamically, just a pain to work with\n+        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+        // miri tests need to know about the stage sysroot\n+        cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n+        cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        cargo.env(\"MIRI_PATH\", miri);\n+\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n+\n+        try_run_expecting(\n+            build,\n+            &mut cargo,\n+            builder.build.config.toolstate.miri.passes(ToolState::Testing),\n+        );\n+    }\n+}\n+\n+\n fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     // Configure PATH to find the right rustc. NB. we have to use PATH\n     // and not RUSTC because the Cargo test suite has tests that will"}, {"sha": "c8b2ed042c11948f9baf7258eed86b8d9672a44b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -27,6 +27,7 @@ use util::exe;\n use cache::{INTERNER, Interned};\n use flags::Flags;\n pub use flags::Subcommand;\n+use toolstate::ToolStates;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -111,6 +112,7 @@ pub struct Config {\n     pub low_priority: bool,\n     pub channel: String,\n     pub quiet_tests: bool,\n+    pub test_miri: bool,\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n@@ -130,6 +132,8 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+\n+    pub toolstate: ToolStates,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -269,6 +273,7 @@ struct Rust {\n     debug: Option<bool>,\n     dist_src: Option<bool>,\n     quiet_tests: Option<bool>,\n+    test_miri: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -304,6 +309,7 @@ impl Config {\n         config.codegen_tests = true;\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n+        config.test_miri = false;\n \n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n@@ -330,6 +336,18 @@ impl Config {\n             }\n         }).unwrap_or_else(|| TomlConfig::default());\n \n+        let toolstate_toml_path = config.src.join(\"src/tools/toolstate.toml\");\n+        let parse_toolstate = || -> Result<_, Box<::std::error::Error>> {\n+            let mut f = File::open(toolstate_toml_path)?;\n+            let mut contents = String::new();\n+            f.read_to_string(&mut contents)?;\n+            Ok(toml::from_str(&contents)?)\n+        };\n+        config.toolstate = parse_toolstate().unwrap_or_else(|err| {\n+            println!(\"failed to parse TOML configuration 'toolstate.toml': {}\", err);\n+            process::exit(2);\n+        });\n+\n         let build = toml.build.clone().unwrap_or(Build::default());\n         set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n         set(&mut config.build, flags.build);\n@@ -444,6 +462,7 @@ impl Config {\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.quiet_tests, rust.quiet_tests);\n+            set(&mut config.test_miri, rust.test_miri);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.rustc_default_ar = rust.default_ar.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);"}, {"sha": "2438be89776da9217e5cd2528beb07abcb17a4a5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -38,6 +38,7 @@ def v(*args):\n o(\"docs\", \"build.docs\", \"build standard library documentation\")\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")\n+o(\"test-miri\", \"rust.test-miri\", \"run miri's test suite\")\n o(\"debuginfo-tests\", \"rust.debuginfo-tests\", \"build tests with debugger metadata\")\n o(\"quiet-tests\", \"rust.quiet-tests\", \"enable quieter output when running tests\")\n o(\"ccache\", \"llvm.ccache\", \"invoke gcc/clang via ccache to reuse object files between builds\")"}, {"sha": "5188604b0a69a463f1203dafd2e5b885bac81448", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -1111,6 +1111,31 @@ impl Step for Rls {\n     }\n }\n \n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct DontDistWithMiriEnabled;\n+\n+impl Step for DontDistWithMiriEnabled {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let build_miri = run.builder.build.config.test_miri;\n+        run.default_condition(build_miri)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(DontDistWithMiriEnabled);\n+    }\n+\n+    fn run(self, _: &Builder) -> PathBuf {\n+        panic!(\"Do not distribute with miri enabled.\\n\\\n+                The distributed libraries would include all MIR (increasing binary size).\n+                The distributed MIR would include validation statements.\");\n+    }\n+}\n+\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Extended {\n     stage: u32,"}, {"sha": "6bca17c8ba860580421c7bc6f9814ab19b985e05", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -143,7 +143,8 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::slice;\n \n-use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime,\n+                   BuildExpectation};\n \n use util::{exe, libdir, OutputFolder, CiEnv};\n \n@@ -164,6 +165,7 @@ pub mod util;\n mod builder;\n mod cache;\n mod tool;\n+mod toolstate;\n \n #[cfg(windows)]\n mod job;\n@@ -542,32 +544,39 @@ impl Build {\n             .join(libdir(&self.config.build))\n     }\n \n+    /// Runs a command, printing out nice contextual information if its build\n+    /// status is not the expected one\n+    fn run_expecting(&self, cmd: &mut Command, expect: BuildExpectation) {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        run_silent(cmd, expect)\n+    }\n+\n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n-        self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_silent(cmd)\n+        self.run_expecting(cmd, BuildExpectation::None)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_suppressed(cmd)\n+        run_suppressed(cmd, BuildExpectation::None)\n     }\n \n-    /// Runs a command, printing out nice contextual information if it fails.\n-    /// Exits if the command failed to execute at all, otherwise returns its\n-    /// `status.success()`.\n-    fn try_run(&self, cmd: &mut Command) -> bool {\n+    /// Runs a command, printing out nice contextual information if its build\n+    /// status is not the expected one.\n+    /// Exits if the command failed to execute at all, otherwise returns whether\n+    /// the expectation was met\n+    fn try_run(&self, cmd: &mut Command, expect: BuildExpectation) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_silent(cmd)\n+        try_run_silent(cmd, expect)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_suppressed(cmd)\n+        try_run_suppressed(cmd, BuildExpectation::None)\n     }\n \n     pub fn is_verbose(&self) -> bool {"}, {"sha": "004f0c31024cd999a367d30059570f22e236eef8", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -56,6 +56,7 @@ check-aux:\n \t\tsrc/tools/cargo \\\n \t\tsrc/tools/rls \\\n \t\tsrc/tools/rustfmt \\\n+\t\tsrc/tools/miri \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "1617351af4cf11d87004b083f2abc51f38c6250f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -21,6 +21,8 @@ use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n use native;\n use channel::GitInfo;\n use cache::Interned;\n+use toolstate::ToolState;\n+use build_helper::BuildExpectation;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct CleanTools {\n@@ -64,6 +66,7 @@ struct ToolBuild {\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n+    expectation: BuildExpectation,\n }\n \n impl Step for ToolBuild {\n@@ -83,6 +86,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n+        let expectation = self.expectation;\n \n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n@@ -95,7 +99,7 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        build.run(&mut cargo);\n+        build.run_expecting(&mut cargo, expectation);\n         build.cargo_out(compiler, Mode::Tool, target).join(exe(tool, &compiler.host))\n     }\n }\n@@ -200,6 +204,7 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n+                    expectation: BuildExpectation::None,\n                 })\n             }\n         }\n@@ -247,6 +252,7 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n             path: \"src/tools/remote-test-server\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -359,6 +365,7 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n             path: \"src/tools/cargo\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -398,6 +405,7 @@ impl Step for Clippy {\n             tool: \"clippy\",\n             mode: Mode::Librustc,\n             path: \"src/tools/clippy\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -441,6 +449,7 @@ impl Step for Rls {\n             tool: \"rls\",\n             mode: Mode::Librustc,\n             path: \"src/tools/rls\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -475,6 +484,43 @@ impl Step for Rustfmt {\n             tool: \"rustfmt\",\n             mode: Mode::Librustc,\n             path: \"src/tools/rustfmt\",\n+            expectation: BuildExpectation::None,\n+        })\n+    }\n+}\n+\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Miri {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let build_miri = run.builder.build.config.test_miri;\n+        run.path(\"src/tools/miri\").default_condition(build_miri)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.target,\n+            tool: \"miri\",\n+            mode: Mode::Librustc,\n+            path: \"src/tools/miri\",\n+            expectation: builder.build.config.toolstate.miri.passes(ToolState::Compiling),\n         })\n     }\n }"}, {"sha": "9556a8b52df6745d7aa99780ed1a49f8a0b96b08", "filename": "src/bootstrap/toolstate.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use build_helper::BuildExpectation;\n+\n+#[derive(Copy, Clone, Debug, Deserialize, PartialEq, Eq)]\n+/// Whether a tool can be compiled, tested or neither\n+pub enum ToolState {\n+    /// The tool compiles successfully, but the test suite fails\n+    Compiling = 1,\n+    /// The tool compiles successfully and its test suite passes\n+    Testing = 2,\n+    /// The tool can't even be compiled\n+    Broken = 0,\n+}\n+\n+impl ToolState {\n+    /// If a tool with the current toolstate should be working on\n+    /// the given toolstate\n+    pub fn passes(self, other: ToolState) -> BuildExpectation {\n+        if self as usize >= other as usize {\n+            BuildExpectation::Succeeding\n+        } else {\n+            BuildExpectation::Failing\n+        }\n+    }\n+}\n+\n+impl Default for ToolState {\n+    fn default() -> Self {\n+        // err on the safe side\n+        ToolState::Broken\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Deserialize, Default)]\n+/// Used to express which tools should (not) be compiled or tested.\n+/// This is created from `toolstate.toml`.\n+pub struct ToolStates {\n+    pub miri: ToolState,\n+}"}, {"sha": "e81dab70b43e702112b119cad19951ece97c02e2", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -35,55 +35,97 @@ macro_rules! t {\n     })\n }\n \n-pub fn run(cmd: &mut Command) {\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub enum BuildExpectation {\n+    Succeeding,\n+    Failing,\n+    None,\n+}\n+\n+pub fn run(cmd: &mut Command, expect: BuildExpectation) {\n     println!(\"running: {:?}\", cmd);\n-    run_silent(cmd);\n+    run_silent(cmd, expect);\n }\n \n-pub fn run_silent(cmd: &mut Command) {\n-    if !try_run_silent(cmd) {\n+pub fn run_silent(cmd: &mut Command, expect: BuildExpectation) {\n+    if !try_run_silent(cmd, expect) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_silent(cmd: &mut Command) -> bool {\n+pub fn try_run_silent(cmd: &mut Command, expect: BuildExpectation) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    if !status.success() {\n-        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-                  expected success, got: {}\\n\\n\",\n-                 cmd,\n-                 status);\n+    process_status(\n+        cmd,\n+        status.success(),\n+        expect,\n+        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                    expected success, got: {}\\n\\n\",\n+                    cmd,\n+                    status))\n+}\n+\n+fn process_status<F: FnOnce()>(\n+    cmd: &Command,\n+    success: bool,\n+    expect: BuildExpectation,\n+    f: F,\n+) -> bool {\n+    use BuildExpectation::*;\n+    match (expect, success) {\n+        (None, false) => { f(); false },\n+        // Non-tool build succeeds, everything is good\n+        (None, true) => true,\n+        // Tool expected to work and is working\n+        (Succeeding, true) => true,\n+        // Tool expected to fail and is failing\n+        (Failing, false) => {\n+            println!(\"This failure is expected (see `src/tools/toolstate.toml`)\");\n+            true\n+        },\n+        // Tool expected to work, but is failing\n+        (Succeeding, false) => {\n+            f();\n+            println!(\"You can disable the tool in `src/tools/toolstate.toml`\");\n+            false\n+        },\n+        // Tool expected to fail, but is working\n+        (Failing, true) => {\n+            println!(\"Expected `{:?}` to fail, but it succeeded.\\n\\\n+                     Please adjust `src/tools/toolstate.toml` accordingly\", cmd);\n+            false\n+        }\n     }\n-    status.success()\n }\n \n-pub fn run_suppressed(cmd: &mut Command) {\n-    if !try_run_suppressed(cmd) {\n+pub fn run_suppressed(cmd: &mut Command, expect: BuildExpectation) {\n+    if !try_run_suppressed(cmd, expect) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n+pub fn try_run_suppressed(cmd: &mut Command, expect: BuildExpectation) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    if !output.status.success() {\n-        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+    process_status(\n+        cmd,\n+        output.status.success(),\n+        expect,\n+        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\\n\\n\\\n                   stdout ----\\n{}\\n\\\n                   stderr ----\\n{}\\n\\n\",\n                  cmd,\n                  output.status,\n                  String::from_utf8_lossy(&output.stdout),\n-                 String::from_utf8_lossy(&output.stderr));\n-    }\n-    output.status.success()\n+                 String::from_utf8_lossy(&output.stderr)))\n }\n \n pub fn gnu_target(target: &str) -> String {"}, {"sha": "adce6a00d46234d2a534d1b170e4663b8fd231fe", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -20,7 +20,7 @@ Images will output artifacts in an `obj` dir at the root of a repository.\n \n - Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n - `scripts` contains files shared by docker images\n-- `disabled` contains images that are not build travis\n+- `disabled` contains images that are not built on travis\n \n ## Cross toolchains\n "}, {"sha": "a453c62cc9e83e10ff0c187d4ad3b2da4e399b20", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -17,5 +17,5 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-test-miri\n ENV RUST_CHECK_TARGET check-aux"}, {"sha": "d89d3bcdb62a50c0ec889831e29f9ac939cc9cbd", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -16,7 +16,7 @@ extern crate gcc;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate};\n+use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n \n fn main() {\n     // FIXME: This is a hack to support building targets that don't\n@@ -126,7 +126,7 @@ fn main() {\n         cmd.arg(\"--with-lg-quantum=4\");\n     }\n \n-    run(&mut cmd);\n+    run(&mut cmd, BuildExpectation::None);\n \n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&native.out_dir)\n@@ -143,7 +143,7 @@ fn main() {\n             .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\"));\n     }\n \n-    run(&mut make);\n+    run(&mut make, BuildExpectation::None);\n \n     // The pthread_atfork symbols is used by jemalloc on android but the really\n     // old android we're building on doesn't have them defined, so just make"}, {"sha": "19ea25fc7df0711a892d7ad0aaff7178db8784fc", "filename": "src/libstd/build.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -15,7 +15,7 @@ extern crate gcc;\n \n use std::env;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate};\n+use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -97,11 +97,14 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .env(\"CC\", compiler.path())\n                 .env(\"AR\", &ar)\n                 .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n-                .env(\"CFLAGS\", cflags));\n+                .env(\"CFLAGS\", cflags),\n+        BuildExpectation::None);\n \n     run(Command::new(build_helper::make(host))\n                 .current_dir(&native.out_dir)\n                 .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n-                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")),\n+        BuildExpectation::None);\n+\n     Ok(())\n }"}, {"sha": "80853e2f24a01db96fe9821e468dd2af75a4d2e5", "filename": "src/tools/miri", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -0,0 +1 @@\n+Subproject commit 80853e2f24a01db96fe9821e468dd2af75a4d2e5"}, {"sha": "90bf7a5e0a6877ba72c20bbbe2abf5805c76522a", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -65,6 +65,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/clippy\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n+        \"src/tools/miri\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}, {"sha": "697be4efadbc882397402caaa72b0a5d34432c6d", "filename": "src/tools/toolstate.toml", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/caad2560bfbd0e2b0e0dcb6882395c1523a1aadc/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=caad2560bfbd0e2b0e0dcb6882395c1523a1aadc", "patch": "@@ -0,0 +1,24 @@\n+# This file reflects the current status of all tools which are allowed\n+# to fail without failing the build.\n+#\n+# There are three states a tool can be in:\n+# 1. Broken: The tool doesn't build\n+# 2. Building: The tool builds but its tests are failing\n+# 3. Testing: The tool builds and its tests are passing\n+#\n+# In the future there will be further states like \"Distributing\", which\n+# configures whether the tool is included in the Rust distribution.\n+#\n+# If a tool was working before your PR but is broken now, consider\n+# updating the tool within your PR. How to do that is described in\n+# \"CONTRIBUTING.md#External Dependencies\". If the effort required is not\n+# warranted (e.g. due to the tool abusing some API that you changed, and\n+# fixing the tool would mean a significant refactoring), you can disable\n+# the tool here, by changing its state to `Broken`. Remember to ping\n+# the tool authors if you do not fix their tool, so they can proactively\n+# fix it, instead of being surprised by the breakage.\n+#\n+# Each tool has a list of people to ping\n+\n+# ping @oli-obk @RalfJung @eddyb\n+miri = \"Testing\""}]}