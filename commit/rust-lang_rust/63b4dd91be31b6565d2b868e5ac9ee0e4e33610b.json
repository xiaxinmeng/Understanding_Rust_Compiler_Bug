{"sha": "63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjRkZDkxYmUzMWI2NTY1ZDJiODY4ZTVhYzllZTBlNGUzMzYxMGI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T14:55:00Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:46Z"}, "message": "hir: remove NodeId from MacroDef", "tree": {"sha": "1fec43d7b427f801f5b0edbcfdce208002123480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fec43d7b427f801f5b0edbcfdce208002123480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "html_url": "https://github.com/rust-lang/rust/commit/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c886d47b822d0269360d9945b556764bd94ac7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c886d47b822d0269360d9945b556764bd94ac7ec", "html_url": "https://github.com/rust-lang/rust/commit/c886d47b822d0269360d9945b556764bd94ac7ec"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b790ee1eaea195cee556971b0c2dc099b536851f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -3532,7 +3532,6 @@ impl<'a> LoweringContext<'a> {\n                     name: ident.name,\n                     vis,\n                     attrs,\n-                    id: i.id,\n                     hir_id,\n                     span: i.span,\n                     body,"}, {"sha": "588b986aad29d6a3f1d5b31efbc97b2462e72e26", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -507,7 +507,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir MacroDef) {\n-        let def_index = self.definitions.opt_def_index(macro_def.id).unwrap();\n+        let node_id = self.hir_to_node_id[&macro_def.hir_id];\n+        let def_index = self.definitions.opt_def_index(node_id).unwrap();\n \n         self.with_dep_node_owner(def_index, macro_def, |this| {\n             this.insert(macro_def.span, macro_def.hir_id, Node::MacroDef(macro_def));"}, {"sha": "5339d0fa0ecd0b42c1bfa466eccb4906cf539812", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -390,7 +390,7 @@ impl<'hir> Map<'hir> {\n                 Some(Def::Local(local.id))\n             }\n             Node::MacroDef(macro_def) => {\n-                Some(Def::Macro(self.local_def_id(macro_def.id),\n+                Some(Def::Macro(self.local_def_id_from_hir_id(macro_def.hir_id),\n                                 MacroKind::Bang))\n             }\n             Node::GenericParam(param) => {"}, {"sha": "1d7b28baed7f236489543fde6d1268c26b66a591", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -809,7 +809,6 @@ pub struct MacroDef {\n     pub name: Name,\n     pub vis: Visibility,\n     pub attrs: HirVec<Attribute>,\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub body: TokenStream,"}, {"sha": "ef13638ceb705963422322f0fb7123490dcf4897", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -406,7 +406,6 @@ impl_stable_hash_for!(struct hir::MacroDef {\n     name,\n     vis,\n     attrs,\n-    id,\n     hir_id,\n     span,\n     legacy,"}, {"sha": "79457cc028a7d51dc63df84e570312d52a0a2d50", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -1279,7 +1279,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef) -> Entry<'tcx> {\n         use syntax::print::pprust;\n-        let def_id = self.tcx.hir().local_def_id(macro_def.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(macro_def.hir_id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(&MacroDef {\n                 body: pprust::tts_to_string(&macro_def.body.trees().collect::<Vec<_>>()),\n@@ -1680,7 +1680,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n         self.index.encode_info_for_ty(ty);\n     }\n     fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef) {\n-        let def_id = self.index.tcx.hir().local_def_id(macro_def.id);\n+        let def_id = self.index.tcx.hir().local_def_id_from_hir_id(macro_def.hir_id);\n         self.index.record(def_id, IsolatedEncoder::encode_info_for_macro_def, macro_def);\n     }\n }"}, {"sha": "3e2571fc0b39c0ffd2dc88d2c57fdcf523c40c37", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -185,7 +185,7 @@ macro_rules! read_hir {\n     ($t:ty) => {\n         impl<'tcx> DepGraphRead for &'tcx $t {\n             fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n-                tcx.hir().read(self.id);\n+                tcx.hir().read_by_hir_id(self.hir_id);\n             }\n         }\n     }"}, {"sha": "830ede751fbc6ccecf82f4a25bad8da3f53256ef", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b4dd91be31b6565d2b868e5ac9ee0e4e33610b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=63b4dd91be31b6565d2b868e5ac9ee0e4e33610b", "patch": "@@ -695,18 +695,20 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n+        let node_id = self.tcx.hir().hir_to_node_id(md.hir_id);\n+\n         if md.legacy {\n-            self.update(md.id, Some(AccessLevel::Public));\n+            self.update(node_id, Some(AccessLevel::Public));\n             return\n         }\n \n         let module_did = ty::DefIdTree::parent(\n             self.tcx,\n-            self.tcx.hir().local_def_id(md.id)\n+            self.tcx.hir().local_def_id_from_hir_id(md.hir_id)\n         ).unwrap();\n         let mut module_id = self.tcx.hir().as_local_node_id(module_did).unwrap();\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n-        let level = self.update(md.id, level);\n+        let level = self.update(node_id, level);\n         if level.is_none() {\n             return\n         }"}]}