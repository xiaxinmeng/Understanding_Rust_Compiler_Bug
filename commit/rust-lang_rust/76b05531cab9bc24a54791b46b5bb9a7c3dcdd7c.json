{"sha": "76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "node_id": "C_kwDOAAsO6NoAKDc2YjA1NTMxY2FiOWJjMjRhNTQ3OTFiNDZiNWJiOWE3YzNkY2RkN2M", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-01T17:08:06Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-01T17:08:06Z"}, "message": "polymorphize: polymorphize shims\n\nThis commit removes the restriction of `InstanceDef::Item` on\npolymorphization, so that shims can now be polymorphized.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "0ade4d9fac829bbf1b14af0437540c3546c11de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ade4d9fac829bbf1b14af0437540c3546c11de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "html_url": "https://github.com/rust-lang/rust/commit/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4528b8e581eb1bb24f4f264d43244d7912f812f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4528b8e581eb1bb24f4f264d43244d7912f812f7", "html_url": "https://github.com/rust-lang/rust/commit/4528b8e581eb1bb24f4f264d43244d7912f812f7"}], "stats": {"total": 173, "additions": 112, "deletions": 61}, "files": [{"sha": "a16388d5de21928f7d9bf4df269c7d9a0b9122a0", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -35,7 +35,8 @@ where\n                 ty::Closure(def_id, substs)\n                 | ty::Generator(def_id, substs, ..)\n                 | ty::FnDef(def_id, substs) => {\n-                    let unused_params = self.tcx.unused_generic_params(def_id);\n+                    let instance = ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id));\n+                    let unused_params = self.tcx.unused_generic_params(instance);\n                     for (index, subst) in substs.into_iter().enumerate() {\n                         let index = index\n                             .try_into()"}, {"sha": "79f1beb0799b3cb9112e13a805a39585f6f8e3a7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -84,6 +84,12 @@ impl IntoArgs for (CrateNum, DefId) {\n     }\n }\n \n+impl IntoArgs for ty::InstanceDef<'tcx> {\n+    fn into_args(self) -> (DefId, DefId) {\n+        (self.def_id(), self.def_id())\n+    }\n+}\n+\n provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n     generics_of => { cdata.get_generics(def_id.index, tcx.sess) }"}, {"sha": "8947c13430fc585d83ad7e3cb818994f816abf59", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -1320,7 +1320,9 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n \n-            let unused = self.tcx.unused_generic_params(def_id);\n+            let instance =\n+                ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));\n+            let unused = self.tcx.unused_generic_params(instance);\n             if !unused.is_empty() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }"}, {"sha": "d0a1c8ce3cfd8d31bce8835743a24593e9246ee5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -1551,11 +1551,11 @@ rustc_queries! {\n     query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n         desc { \"codegen_unit\" }\n     }\n-    query unused_generic_params(key: DefId) -> FiniteBitSet<u32> {\n-        cache_on_disk_if { key.is_local() }\n+    query unused_generic_params(key: ty::InstanceDef<'tcx>) -> FiniteBitSet<u32> {\n+        cache_on_disk_if { key.def_id().is_local() }\n         desc {\n             |tcx| \"determining which generic parameters are unused by `{}`\",\n-                tcx.def_path_str(key)\n+                tcx.def_path_str(key.def_id())\n         }\n     }\n     query backend_optimization_level(_: ()) -> OptLevel {"}, {"sha": "4b38105e44717e52300e5b6f9e789e58f8093d12", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -152,6 +152,22 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n+    /// Returns the `DefId` of instances which might not require codegen locally.\n+    pub fn def_id_if_not_guaranteed_local_codegen(self) -> Option<DefId> {\n+        match self {\n+            ty::InstanceDef::Item(def) => Some(def.did),\n+            ty::InstanceDef::DropGlue(def_id, Some(_)) => Some(def_id),\n+            InstanceDef::VtableShim(..)\n+            | InstanceDef::ReifyShim(..)\n+            | InstanceDef::FnPtrShim(..)\n+            | InstanceDef::Virtual(..)\n+            | InstanceDef::Intrinsic(..)\n+            | InstanceDef::ClosureOnceShim { .. }\n+            | InstanceDef::DropGlue(..)\n+            | InstanceDef::CloneShim(..) => None,\n+        }\n+    }\n+\n     #[inline]\n     pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n         match self {\n@@ -567,29 +583,26 @@ impl<'tcx> Instance<'tcx> {\n             return self;\n         }\n \n-        if let InstanceDef::Item(def) = self.def {\n-            let polymorphized_substs = polymorphize(tcx, def.did, self.substs);\n-            debug!(\"polymorphize: self={:?} polymorphized_substs={:?}\", self, polymorphized_substs);\n-            Self { def: self.def, substs: polymorphized_substs }\n-        } else {\n-            self\n-        }\n+        let polymorphized_substs = polymorphize(tcx, self.def, self.substs);\n+        debug!(\"polymorphize: self={:?} polymorphized_substs={:?}\", self, polymorphized_substs);\n+        Self { def: self.def, substs: polymorphized_substs }\n     }\n }\n \n fn polymorphize<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    instance: ty::InstanceDef<'tcx>,\n     substs: SubstsRef<'tcx>,\n ) -> SubstsRef<'tcx> {\n-    debug!(\"polymorphize({:?}, {:?})\", def_id, substs);\n-    let unused = tcx.unused_generic_params(def_id);\n+    debug!(\"polymorphize({:?}, {:?})\", instance, substs);\n+    let unused = tcx.unused_generic_params(instance);\n     debug!(\"polymorphize: unused={:?}\", unused);\n \n     // If this is a closure or generator then we need to handle the case where another closure\n     // from the function is captured as an upvar and hasn't been polymorphized. In this case,\n     // the unpolymorphized upvar closure would result in a polymorphized closure producing\n     // multiple mono items (and eventually symbol clashes).\n+    let def_id = instance.def_id();\n     let upvars_ty = if tcx.is_closure(def_id) {\n         Some(substs.as_closure().tupled_upvars_ty())\n     } else if tcx.type_of(def_id).is_generator() {\n@@ -613,15 +626,23 @@ fn polymorphize<'tcx>(\n             debug!(\"fold_ty: ty={:?}\", ty);\n             match ty.kind {\n                 ty::Closure(def_id, substs) => {\n-                    let polymorphized_substs = polymorphize(self.tcx, def_id, substs);\n+                    let polymorphized_substs = polymorphize(\n+                        self.tcx,\n+                        ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n+                        substs,\n+                    );\n                     if substs == polymorphized_substs {\n                         ty\n                     } else {\n                         self.tcx.mk_closure(def_id, polymorphized_substs)\n                     }\n                 }\n                 ty::Generator(def_id, substs, movability) => {\n-                    let polymorphized_substs = polymorphize(self.tcx, def_id, substs);\n+                    let polymorphized_substs = polymorphize(\n+                        self.tcx,\n+                        ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n+                        substs,\n+                    );\n                     if substs == polymorphized_substs {\n                         ty\n                     } else {"}, {"sha": "7b7c4d23af50698aa5934f3ffe9d88ffc465418b", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -936,21 +936,13 @@ fn visit_instance_use<'tcx>(\n     }\n }\n \n-// Returns `true` if we should codegen an instance in the local crate.\n-// Returns `false` if we can just link to the upstream crate and therefore don't\n-// need a mono item.\n+/// Returns `true` if we should codegen an instance in the local crate, or returns `false` if we\n+/// can just link to the upstream crate and therefore don't need a mono item.\n fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n-    let def_id = match instance.def {\n-        ty::InstanceDef::Item(def) => def.did,\n-        ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n-        ty::InstanceDef::VtableShim(..)\n-        | ty::InstanceDef::ReifyShim(..)\n-        | ty::InstanceDef::ClosureOnceShim { .. }\n-        | ty::InstanceDef::Virtual(..)\n-        | ty::InstanceDef::FnPtrShim(..)\n-        | ty::InstanceDef::DropGlue(..)\n-        | ty::InstanceDef::Intrinsic(_)\n-        | ty::InstanceDef::CloneShim(..) => return true,\n+    let def_id = if let Some(def_id) = instance.def.def_id_if_not_guaranteed_local_codegen() {\n+        def_id\n+    } else {\n+        return true;\n     };\n \n     if tcx.is_foreign_item(def_id) {"}, {"sha": "e6e4438b6d41afa63bb448bbc1db8b81cfd51e17", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=76b05531cab9bc24a54791b46b5bb9a7c3dcdd7c", "patch": "@@ -27,20 +27,23 @@ pub fn provide(providers: &mut Providers) {\n     providers.unused_generic_params = unused_generic_params;\n }\n \n-/// Determine which generic parameters are used by the function/method/closure represented by\n-/// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n-/// indicates all parameters are used).\n+/// Determine which generic parameters are used by the instance.\n+///\n+/// Returns a bitset where bits representing unused parameters are set (`is_empty` indicates all\n+/// parameters are used).\n #[instrument(level = \"debug\", skip(tcx))]\n-fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n+fn unused_generic_params<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: ty::InstanceDef<'tcx>,\n+) -> FiniteBitSet<u32> {\n     if !tcx.sess.opts.debugging_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return FiniteBitSet::new_empty();\n     }\n \n-    // Polymorphization results are stored in cross-crate metadata only when there are unused\n-    // parameters, so assume that non-local items must have only used parameters (else this query\n-    // would not be invoked, and the cross-crate metadata used instead).\n-    if !def_id.is_local() {\n+    let def_id = instance.def_id();\n+    // Exit early if this instance should not be polymorphized.\n+    if !should_polymorphize(tcx, def_id, instance) {\n         return FiniteBitSet::new_empty();\n     }\n \n@@ -52,38 +55,20 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n         return FiniteBitSet::new_empty();\n     }\n \n-    // Exit early for foreign items, these have no bodies to analyze.\n-    if tcx.is_foreign_item(def_id) {\n-        return FiniteBitSet::new_empty();\n-    }\n-\n-    // Exit early when there is no MIR available.\n-    let context = tcx.hir().body_const_context(def_id.expect_local());\n-    match context {\n-        Some(ConstContext::ConstFn) | None if !tcx.is_mir_available(def_id) => {\n-            debug!(\"no mir available\");\n-            return FiniteBitSet::new_empty();\n-        }\n-        Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n-            debug!(\"no ctfe mir available\");\n-            return FiniteBitSet::new_empty();\n-        }\n-        _ => {}\n-    }\n-\n     // Create a bitset with N rightmost ones for each parameter.\n     let generics_count: u32 =\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n     let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n     unused_parameters.set_range(0..generics_count);\n     debug!(?unused_parameters, \"(start)\");\n+\n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n     debug!(?unused_parameters, \"(after default)\");\n \n     // Visit MIR and accumululate used generic parameters.\n-    let body = match context {\n+    let body = match tcx.hir().body_const_context(def_id.expect_local()) {\n         // Const functions are actually called and should thus be considered for polymorphization\n-        // via their runtime MIR\n+        // via their runtime MIR.\n         Some(ConstContext::ConstFn) | None => tcx.optimized_mir(def_id),\n         Some(_) => tcx.mir_for_ctfe(def_id),\n     };\n@@ -99,6 +84,49 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     unused_parameters\n }\n \n+/// Returns `true` if the instance should be polymorphized.\n+fn should_polymorphize<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    instance: ty::InstanceDef<'tcx>,\n+) -> bool {\n+    // If an instance's MIR body is not polymorphic then the modified substitutions that are\n+    // derived from polymorphization's result won't make any difference.\n+    if !instance.has_polymorphic_mir_body() {\n+        return false;\n+    }\n+\n+    // Don't polymorphize intrinsics or virtual calls - calling `instance_mir` will panic.\n+    if matches!(instance, ty::InstanceDef::Intrinsic(..) | ty::InstanceDef::Virtual(..)) {\n+        return false;\n+    }\n+\n+    // Polymorphization results are stored in cross-crate metadata only when there are unused\n+    // parameters, so assume that non-local items must have only used parameters (else this query\n+    // would not be invoked, and the cross-crate metadata used instead).\n+    if !def_id.is_local() {\n+        return false;\n+    }\n+\n+    // Foreign items have no bodies to analyze.\n+    if tcx.is_foreign_item(def_id) {\n+        return false;\n+    }\n+\n+    // Make sure there is MIR available.\n+    match tcx.hir().body_const_context(def_id.expect_local()) {\n+        Some(ConstContext::ConstFn) | None if !tcx.is_mir_available(def_id) => {\n+            debug!(\"no mir available\");\n+            return false;\n+        }\n+        Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n+            debug!(\"no ctfe mir available\");\n+            return false;\n+        }\n+        _ => true,\n+    }\n+}\n+\n /// Some parameters are considered used-by-default, such as non-generic parameters and the dummy\n /// generic parameters from closures, this function marks them as used. `leaf_is_closure` should\n /// be `true` if the item that `unused_generic_params` was invoked on is a closure.\n@@ -207,7 +235,8 @@ impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n     /// a closure, generator or constant).\n     #[instrument(level = \"debug\", skip(self, def_id, substs))]\n     fn visit_child_body(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) {\n-        let unused = self.tcx.unused_generic_params(def_id);\n+        let instance = ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id));\n+        let unused = self.tcx.unused_generic_params(instance);\n         debug!(?self.unused_parameters, ?unused);\n         for (i, arg) in substs.iter().enumerate() {\n             let i = i.try_into().unwrap();"}]}