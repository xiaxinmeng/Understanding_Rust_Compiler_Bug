{"sha": "f233a4c18bec906dab0b8531f326a15fadece547", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzNhNGMxOGJlYzkwNmRhYjBiODUzMWYzMjZhMTVmYWRlY2U1NDc=", "commit": {"author": {"name": "James Munns", "email": "james.munns@ferrous-systems.com", "date": "2019-09-18T22:16:16Z"}, "committer": {"name": "James Munns", "email": "james.munns@ferrous-systems.com", "date": "2019-09-18T22:16:16Z"}, "message": "Fix a minor grammar nit, update UI tests", "tree": {"sha": "e4c15d47304f16084c9262d9106a4a9c826423e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c15d47304f16084c9262d9106a4a9c826423e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f233a4c18bec906dab0b8531f326a15fadece547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f233a4c18bec906dab0b8531f326a15fadece547", "html_url": "https://github.com/rust-lang/rust/commit/f233a4c18bec906dab0b8531f326a15fadece547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f233a4c18bec906dab0b8531f326a15fadece547/comments", "author": null, "committer": null, "parents": [{"sha": "64c09694a6ecc434cd3a61ade89beb1de17770c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c09694a6ecc434cd3a61ade89beb1de17770c5", "html_url": "https://github.com/rust-lang/rust/commit/64c09694a6ecc434cd3a61ade89beb1de17770c5"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a54bc05f169615917beae66bd191b58209457937", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -134,7 +134,7 @@ impl IntercrateAmbiguityCause {\n                     String::new()\n                 };\n                 format!(\n-                    \"upstream crates may add new impl of trait `{}`{} \\\n+                    \"upstream crates may add a new impl of trait `{}`{} \\\n                      in future versions\",\n                     trait_desc, self_desc\n                 )"}, {"sha": "8fe24bae7c6ca1e995cca02707235bf511608406", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -25,7 +25,7 @@ LL |     fn baz(&self) {}\n LL |     fn baz(&self) {}\n    |     ---------------- other definition for `baz`\n    |\n-   = note: upstream crates may add new impl of trait `std::marker::Copy` for type `std::vec::Vec<_>` in future versions\n+   = note: upstream crates may add a new impl of trait `std::marker::Copy` for type `std::vec::Vec<_>` in future versions\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3a3e1a4afc3bb9596b4f7cb004e2cffe25491a91", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "3a3e1a4afc3bb9596b4f7cb004e2cffe25491a91", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "bd6f59f346b6d6937e0329c8ec2c2b7f1aed913a", "filename": "src/test/ui/coherence/coherence-overlap-upstream.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -6,7 +6,7 @@ LL | impl<T> Foo for T where T: Remote {}\n LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "bd6f59f346b6d6937e0329c8ec2c2b7f1aed913a", "filename": "src/test/ui/coherence/coherence-overlap-upstream.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -6,7 +6,7 @@ LL | impl<T> Foo for T where T: Remote {}\n LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+   = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "26dadec5bba7ed72fb7f38650e86b635d48711e2", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -3,11 +3,11 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n-   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n+   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `i32` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "26dadec5bba7ed72fb7f38650e86b635d48711e2", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -3,11 +3,11 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n-   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n+   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `i32` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "4d9f55c1215471cc99eb97190130b9bdafb1337f", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "4d9f55c1215471cc99eb97190130b9bdafb1337f", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "f0bcf659bb696946741bdccbdf5dd9af2b727ccd", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "f0bcf659bb696946741bdccbdf5dd9af2b727ccd", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "a40153af2cf30daf331b75e2086eab64f2375402", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "a40153af2cf30daf331b75e2086eab64f2375402", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n    |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n+   = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "84c10d8fbc47728c0dabb807ae250f7f75ab35d7", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,7 +7,7 @@ LL | #[derive(Clone)]\n LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n    |\n-   = note: upstream crates may add new impl of trait `std::clone::Clone` for type `[_]` in future versions\n+   = note: upstream crates may add a new impl of trait `std::clone::Clone` for type `[_]` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "2a0f127bdaf60bc002b9876ce24979f0df83e1d8", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f233a4c18bec906dab0b8531f326a15fadece547/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=f233a4c18bec906dab0b8531f326a15fadece547", "patch": "@@ -7,11 +7,11 @@ LL | |     I: Iterator,\n LL | | {\n LL | | }\n    | |_- first implementation here\n-LL | \n+LL |\n LL |   impl IntoPyDictPointer for ()\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n    |\n-   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `()` in future versions\n+   = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `()` in future versions\n \n error: aborting due to previous error\n "}]}