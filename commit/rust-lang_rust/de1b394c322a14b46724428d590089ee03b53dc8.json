{"sha": "de1b394c322a14b46724428d590089ee03b53dc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMWIzOTRjMzIyYTE0YjQ2NzI0NDI4ZDU5MDA4OWVlMDNiNTNkYzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-20T18:10:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-20T18:10:03Z"}, "message": "Move linker invocation from driver::rustc to back::link", "tree": {"sha": "191bd2bd062100e0fd8a8721175efffced1a2ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191bd2bd062100e0fd8a8721175efffced1a2ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1b394c322a14b46724428d590089ee03b53dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1b394c322a14b46724428d590089ee03b53dc8", "html_url": "https://github.com/rust-lang/rust/commit/de1b394c322a14b46724428d590089ee03b53dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1b394c322a14b46724428d590089ee03b53dc8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "870117f44e37bbff5463852224186a266868bf6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/870117f44e37bbff5463852224186a266868bf6e", "html_url": "https://github.com/rust-lang/rust/commit/870117f44e37bbff5463852224186a266868bf6e"}], "stats": {"total": 182, "additions": 94, "deletions": 88}, "files": [{"sha": "73df1462134509be2821aab5c3934946d7e60d9b", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/de1b394c322a14b46724428d590089ee03b53dc8/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1b394c322a14b46724428d590089ee03b53dc8/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=de1b394c322a14b46724428d590089ee03b53dc8", "patch": "@@ -3,12 +3,13 @@ import driver::session;\n import lib::llvm::llvm;\n import front::attr;\n import middle::ty;\n-import metadata::encoder;\n+import metadata::{encoder, cstore};\n import middle::trans_common::crate_ctxt;\n import std::str;\n import std::fs;\n import std::vec;\n import std::option;\n+import std::run;\n import option::some;\n import option::none;\n import std::sha1::sha1;\n@@ -490,6 +491,97 @@ fn mangle_internal_name_by_path(_ccx: @crate_ctxt, path: [str]) -> str {\n fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n     ret ccx.names.next(flav);\n }\n+\n+// If the user wants an exe generated we need to invoke\n+// gcc to link the object file with some libs\n+fn link_binary(sess: session::session,\n+               binary_dir: str,\n+               saved_out_filename: str) {\n+    let glu: str = binary_dir + \"/lib/glue.o\";\n+    let main: str = binary_dir + \"/lib/main.o\";\n+    let stage: str = \"-L\" + binary_dir + \"/lib\";\n+    let prog: str = \"gcc\";\n+    // The invocations of gcc share some flags across platforms\n+\n+    let gcc_args =\n+        [stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n+         saved_out_filename + \".o\"];\n+    let lib_cmd;\n+\n+    let os = sess.get_targ_cfg().os;\n+    if os == session::os_macos {\n+        lib_cmd = \"-dynamiclib\";\n+    } else { lib_cmd = \"-shared\"; }\n+\n+    // Converts a library file name into a gcc -l argument\n+    fn unlib(config: @session::config, filename: str) -> str {\n+        let rmlib =\n+            bind fn (config: @session::config, filename: str) -> str {\n+                     if config.os == session::os_macos ||\n+                            config.os == session::os_linux &&\n+                                str::find(filename, \"lib\") == 0 {\n+                         ret str::slice(filename, 3u,\n+                                        str::byte_len(filename));\n+                     } else { ret filename; }\n+                 }(config, _);\n+        fn rmext(filename: str) -> str {\n+            let parts = str::split(filename, '.' as u8);\n+            vec::pop(parts);\n+            ret str::connect(parts, \".\");\n+        }\n+        ret alt config.os {\n+              session::os_macos. { rmext(rmlib(filename)) }\n+              session::os_linux. { rmext(rmlib(filename)) }\n+              _ { rmext(filename) }\n+            };\n+    }\n+\n+    let cstore = sess.get_cstore();\n+    for cratepath: str in cstore::get_used_crate_files(cstore) {\n+        if str::ends_with(cratepath, \".rlib\") {\n+            gcc_args += [cratepath];\n+            cont;\n+        }\n+        let cratepath = cratepath;\n+        let dir = fs::dirname(cratepath);\n+        if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n+        let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n+        gcc_args += [\"-l\" + libarg];\n+    }\n+\n+    let ula = cstore::get_used_link_args(cstore);\n+    for arg: str in ula { gcc_args += [arg]; }\n+\n+    let used_libs = cstore::get_used_libraries(cstore);\n+    for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n+\n+    if sess.get_opts().library {\n+        gcc_args += [lib_cmd];\n+    } else {\n+        // FIXME: why do we hardcode -lm?\n+        gcc_args += [\"-lm\", main];\n+    }\n+    // We run 'gcc' here\n+\n+    let err_code = run::run_program(prog, gcc_args);\n+    if 0 != err_code {\n+        sess.err(#fmt[\"linking with gcc failed with code %d\", err_code]);\n+        sess.note(#fmt[\"gcc arguments: %s\", str::connect(gcc_args, \" \")]);\n+        sess.abort_if_errors();\n+    }\n+    // Clean up on Darwin\n+\n+    if sess.get_targ_cfg().os == session::os_macos {\n+        run::run_program(\"dsymutil\", [saved_out_filename]);\n+    }\n+\n+\n+    // Remove the temporary object file if we aren't saving temps\n+    if !sess.get_opts().save_temps {\n+        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "274ff3a38ec0b825eeb4720875ba34ba72753fb7", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 87, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/de1b394c322a14b46724428d590089ee03b53dc8/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1b394c322a14b46724428d590089ee03b53dc8/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=de1b394c322a14b46724428d590089ee03b53dc8", "patch": "@@ -512,95 +512,9 @@ fn main(args: [str]) {\n       }\n     }\n \n-    // If the user wants an exe generated we need to invoke\n-    // gcc to link the object file with some libs\n-    //\n-    // TODO: Factor this out of main.\n     if stop_after_codegen { ret; }\n \n-    let glu: str = binary_dir + \"/lib/glue.o\";\n-    let main: str = binary_dir + \"/lib/main.o\";\n-    let stage: str = \"-L\" + binary_dir + \"/lib\";\n-    let prog: str = \"gcc\";\n-    // The invocations of gcc share some flags across platforms\n-\n-    let gcc_args =\n-        [stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n-         saved_out_filename + \".o\"];\n-    let lib_cmd;\n-\n-    let os = sess.get_targ_cfg().os;\n-    if os == session::os_macos {\n-        lib_cmd = \"-dynamiclib\";\n-    } else { lib_cmd = \"-shared\"; }\n-\n-    // Converts a library file name into a gcc -l argument\n-    fn unlib(config: @session::config, filename: str) -> str {\n-        let rmlib =\n-            bind fn (config: @session::config, filename: str) -> str {\n-                     if config.os == session::os_macos ||\n-                            config.os == session::os_linux &&\n-                                str::find(filename, \"lib\") == 0 {\n-                         ret str::slice(filename, 3u,\n-                                        str::byte_len(filename));\n-                     } else { ret filename; }\n-                 }(config, _);\n-        fn rmext(filename: str) -> str {\n-            let parts = str::split(filename, '.' as u8);\n-            vec::pop(parts);\n-            ret str::connect(parts, \".\");\n-        }\n-        ret alt config.os {\n-              session::os_macos. { rmext(rmlib(filename)) }\n-              session::os_linux. { rmext(rmlib(filename)) }\n-              _ { rmext(filename) }\n-            };\n-    }\n-\n-    let cstore = sess.get_cstore();\n-    for cratepath: str in cstore::get_used_crate_files(cstore) {\n-        if str::ends_with(cratepath, \".rlib\") {\n-            gcc_args += [cratepath];\n-            cont;\n-        }\n-        let cratepath = cratepath;\n-        let dir = fs::dirname(cratepath);\n-        if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n-        let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n-        gcc_args += [\"-l\" + libarg];\n-    }\n-\n-    let ula = cstore::get_used_link_args(cstore);\n-    for arg: str in ula { gcc_args += [arg]; }\n-\n-    let used_libs = cstore::get_used_libraries(cstore);\n-    for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n-\n-    if sopts.library {\n-        gcc_args += [lib_cmd];\n-    } else {\n-        // FIXME: why do we hardcode -lm?\n-        gcc_args += [\"-lm\", main];\n-    }\n-    // We run 'gcc' here\n-\n-    let err_code = run::run_program(prog, gcc_args);\n-    if 0 != err_code {\n-        sess.err(#fmt[\"linking with gcc failed with code %d\", err_code]);\n-        sess.note(#fmt[\"gcc arguments: %s\", str::connect(gcc_args, \" \")]);\n-        sess.abort_if_errors();\n-    }\n-    // Clean up on Darwin\n-\n-    if sess.get_targ_cfg().os == session::os_macos {\n-        run::run_program(\"dsymutil\", [saved_out_filename]);\n-    }\n-\n-\n-    // Remove the temporary object file if we aren't saving temps\n-    if !sopts.save_temps {\n-        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n-    }\n+    link::link_binary(sess, binary_dir, saved_out_filename);\n }\n \n #[cfg(test)]"}]}