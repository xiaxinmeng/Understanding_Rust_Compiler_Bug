{"sha": "d208f8003937e4de4ff40076231a4a23f32c6ec7", "node_id": "C_kwDOAAsO6NoAKGQyMDhmODAwMzkzN2U0ZGU0ZmY0MDA3NjIzMWE0YTIzZjMyYzZlYzc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-03T14:25:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-05T14:13:34Z"}, "message": "reduce code duplication", "tree": {"sha": "3279ba4a33eda40da4ecfbf10cf6eca69034ae6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3279ba4a33eda40da4ecfbf10cf6eca69034ae6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d208f8003937e4de4ff40076231a4a23f32c6ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d208f8003937e4de4ff40076231a4a23f32c6ec7", "html_url": "https://github.com/rust-lang/rust/commit/d208f8003937e4de4ff40076231a4a23f32c6ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d208f8003937e4de4ff40076231a4a23f32c6ec7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d11a8483a194dfbdf981f8f5cc0af3dfc54c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d11a8483a194dfbdf981f8f5cc0af3dfc54c5c", "html_url": "https://github.com/rust-lang/rust/commit/47d11a8483a194dfbdf981f8f5cc0af3dfc54c5c"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "6338e08380f2cfe62e0170fad9e5a76d93a6869c", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d208f8003937e4de4ff40076231a4a23f32c6ec7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d208f8003937e4de4ff40076231a4a23f32c6ec7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=d208f8003937e4de4ff40076231a4a23f32c6ec7", "patch": "@@ -284,15 +284,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Abi::Scalar(s) if force => Some(s.primitive()),\n             _ => None,\n         };\n-        let number_may_have_provenance = !M::enforce_number_no_provenance(self);\n+        let read_provenance = |s: abi::Primitive, size| {\n+            // Should be just `s.is_ptr()`, but we support a Miri flag that accepts more\n+            // questionable ptr-int transmutes.\n+            let number_may_have_provenance = !M::enforce_number_no_provenance(self);\n+            s.is_ptr() || (number_may_have_provenance && size == self.pointer_size())\n+        };\n         if let Some(s) = scalar_layout {\n             //FIXME(#96185): let size = s.size(self);\n             //FIXME(#96185): assert_eq!(size, mplace.layout.size, \"abi::Scalar size does not match layout size\");\n             let size = mplace.layout.size; //FIXME(#96185): remove this line\n-            let scalar = alloc.read_scalar(\n-                alloc_range(Size::ZERO, size),\n-                s.is_ptr() || (number_may_have_provenance && size == self.pointer_size()),\n-            )?;\n+            let scalar =\n+                alloc.read_scalar(alloc_range(Size::ZERO, size), read_provenance(s, size))?;\n             return Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }));\n         }\n         let scalar_pair_layout = match mplace.layout.abi {\n@@ -310,14 +313,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let (a_size, b_size) = (a.size(self), b.size(self));\n             let b_offset = a_size.align_to(b.align(self).abi);\n             assert!(b_offset.bytes() > 0); // in `operand_field` we use the offset to tell apart the fields\n-            let a_val = alloc.read_scalar(\n-                alloc_range(Size::ZERO, a_size),\n-                a.is_ptr() || (number_may_have_provenance && a_size == self.pointer_size()),\n-            )?;\n-            let b_val = alloc.read_scalar(\n-                alloc_range(b_offset, b_size),\n-                b.is_ptr() || (number_may_have_provenance && b_size == self.pointer_size()),\n-            )?;\n+            let a_val =\n+                alloc.read_scalar(alloc_range(Size::ZERO, a_size), read_provenance(a, a_size))?;\n+            let b_val =\n+                alloc.read_scalar(alloc_range(b_offset, b_size), read_provenance(b, b_size))?;\n             return Ok(Some(ImmTy {\n                 imm: Immediate::ScalarPair(a_val, b_val),\n                 layout: mplace.layout,"}]}