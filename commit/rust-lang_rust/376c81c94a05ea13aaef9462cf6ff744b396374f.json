{"sha": "376c81c94a05ea13aaef9462cf6ff744b396374f", "node_id": "C_kwDOAAsO6NoAKDM3NmM4MWM5NGEwNWVhMTNhYWVmOTQ2MmNmNmZmNzQ0YjM5NjM3NGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-13T12:49:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-13T12:49:19Z"}, "message": "Rollup merge of #102854 - semarie:openbsd-immutablestack, r=m-ou-se\n\nopenbsd: don't reallocate a guard page on the stack.\n\nthe kernel currently enforce that a stack is immutable. calling mmap(2) or  mprotect(2) to change it will result in EPERM, which generate a panic!().\n\nso just do like for Linux, and trust the kernel to do the right thing.", "tree": {"sha": "819df076df147bf6509fae8642095a287d8fea80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/819df076df147bf6509fae8642095a287d8fea80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376c81c94a05ea13aaef9462cf6ff744b396374f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSAlPCRBK7hj4Ov3rIwAA+HMIAINDXXulu7DpFoixu7TU5zrz\nr2gMSGMgyPqYSu4TsYHKMWU5DzkhO6b0Y7juPtm7uOVKoE17QdnMyffD0EtMloW6\nO7KDZqG0fYIT+WKfb7UE6HApXk5PHIrXI4eFjn8EN4z0sFN5aL6W867PMCRNt6x2\n80NEa73L6K/g+ZJDFmKI5tkDMw/wYk14ie/QxiRLlLP84YYKtzKMRwqsJfXJYuW6\nQHHozlwz3N58cGOfwLybFBqhANbSsCeBI2qtWN8NnxNXrVYcoQmS3ecgVcXlKkYn\nWW0Wi3JBFC7su0sp2S807V1TQ88GElmVZfSPTsuxMGbRM4tw/Wmm0wEuuQVIemA=\n=2N/Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 819df076df147bf6509fae8642095a287d8fea80\nparent ad45dd172213fff157cde566db9fd9279798824e\nparent b3c21efa8a9c22e8b25136d32b35537856bd9c45\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665665359 +0530\ncommitter GitHub <noreply@github.com> 1665665359 +0530\n\nRollup merge of #102854 - semarie:openbsd-immutablestack, r=m-ou-se\n\nopenbsd: don't reallocate a guard page on the stack.\n\nthe kernel currently enforce that a stack is immutable. calling mmap(2) or  mprotect(2) to change it will result in EPERM, which generate a panic!().\n\nso just do like for Linux, and trust the kernel to do the right thing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376c81c94a05ea13aaef9462cf6ff744b396374f", "html_url": "https://github.com/rust-lang/rust/commit/376c81c94a05ea13aaef9462cf6ff744b396374f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376c81c94a05ea13aaef9462cf6ff744b396374f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad45dd172213fff157cde566db9fd9279798824e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad45dd172213fff157cde566db9fd9279798824e", "html_url": "https://github.com/rust-lang/rust/commit/ad45dd172213fff157cde566db9fd9279798824e"}, {"sha": "b3c21efa8a9c22e8b25136d32b35537856bd9c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c21efa8a9c22e8b25136d32b35537856bd9c45", "html_url": "https://github.com/rust-lang/rust/commit/b3c21efa8a9c22e8b25136d32b35537856bd9c45"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "42ac6fcd8bf3677235fb1417b659cc7910495d7f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/376c81c94a05ea13aaef9462cf6ff744b396374f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376c81c94a05ea13aaef9462cf6ff744b396374f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=376c81c94a05ea13aaef9462cf6ff744b396374f", "patch": "@@ -766,6 +766,16 @@ pub mod guard {\n             const GUARD_PAGES: usize = 1;\n             let guard = guardaddr..guardaddr + GUARD_PAGES * page_size;\n             Some(guard)\n+        } else if cfg!(target_os = \"openbsd\") {\n+            // OpenBSD stack already includes a guard page, and stack is\n+            // immutable.\n+            //\n+            // We'll just note where we expect rlimit to start\n+            // faulting, so our handler can report \"stack overflow\", and\n+            // trust that the kernel's own stack guard will work.\n+            let stackptr = get_stack_start_aligned()?;\n+            let stackaddr = stackptr.addr();\n+            Some(stackaddr - page_size..stackaddr)\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on"}]}