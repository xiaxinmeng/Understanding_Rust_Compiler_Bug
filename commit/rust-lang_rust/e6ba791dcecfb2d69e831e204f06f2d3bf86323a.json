{"sha": "e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "node_id": "C_kwDOAAsO6NoAKGU2YmE3OTFkY2VjZmIyZDY5ZTgzMWUyMDRmMDZmMmQzYmY4NjMyM2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-04T19:35:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-04T19:35:03Z"}, "message": "Auto merge of #14252 - Veykril:field-mcall-fallback, r=Veykril\n\ninternal: Handle fields called as method calls as the fields they resolve to\n\nConfusing PR title tbf but this makes it so `bar` in `foo.bar()` resolves to the field if it exists and no method with the same name exists. Improves UX slightly when incorrectly calling a field.", "tree": {"sha": "a1079dd73900d944470d2b5ea6421e0456f01a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1079dd73900d944470d2b5ea6421e0456f01a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "html_url": "https://github.com/rust-lang/rust/commit/e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94dc7a3eb092b5ea641a4d344fae5f3ad4158853", "url": "https://api.github.com/repos/rust-lang/rust/commits/94dc7a3eb092b5ea641a4d344fae5f3ad4158853", "html_url": "https://github.com/rust-lang/rust/commit/94dc7a3eb092b5ea641a4d344fae5f3ad4158853"}, {"sha": "5a91f015b489627d3c9578ec2b01735687c8880a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a91f015b489627d3c9578ec2b01735687c8880a", "html_url": "https://github.com/rust-lang/rust/commit/5a91f015b489627d3c9578ec2b01735687c8880a"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "697f4b43bc7d5c79bd8d0725cda4ecfcab9afb22", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "patch": "@@ -12,7 +12,7 @@ use hir_def::{\n     macro_id_to_def_id,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     type_ref::Mutability,\n-    AsMacroCall, DefWithBodyId, FunctionId, MacroId, TraitId, VariantId,\n+    AsMacroCall, DefWithBodyId, FieldId, FunctionId, MacroId, TraitId, VariantId,\n };\n use hir_expand::{\n     db::AstDatabase,\n@@ -366,6 +366,16 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_method_call(call).map(Function::from)\n     }\n \n+    /// Attempts to resolve this call expression as a method call falling back to resolving it as a field.\n+    pub fn resolve_method_call_field_fallback(\n+        &self,\n+        call: &ast::MethodCallExpr,\n+    ) -> Option<Either<Function, Field>> {\n+        self.imp\n+            .resolve_method_call_fallback(call)\n+            .map(|it| it.map_left(Function::from).map_right(Field::from))\n+    }\n+\n     pub fn resolve_await_to_poll(&self, await_expr: &ast::AwaitExpr) -> Option<Function> {\n         self.imp.resolve_await_to_poll(await_expr).map(Function::from)\n     }\n@@ -1146,6 +1156,13 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(call.syntax())?.resolve_method_call(self.db, call)\n     }\n \n+    fn resolve_method_call_fallback(\n+        &self,\n+        call: &ast::MethodCallExpr,\n+    ) -> Option<Either<FunctionId, FieldId>> {\n+        self.analyze(call.syntax())?.resolve_method_call_fallback(self.db, call)\n+    }\n+\n     fn resolve_await_to_poll(&self, await_expr: &ast::AwaitExpr) -> Option<FunctionId> {\n         self.analyze(await_expr.syntax())?.resolve_await_to_poll(self.db, await_expr)\n     }"}, {"sha": "118a7f8ea86886b10d35031f28e66519914bd431", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "patch": "@@ -10,6 +10,7 @@ use std::{\n     sync::Arc,\n };\n \n+use either::Either;\n use hir_def::{\n     body::{\n         self,\n@@ -266,6 +267,21 @@ impl SourceAnalyzer {\n         Some(self.resolve_impl_method_or_trait_def(db, f_in_trait, substs))\n     }\n \n+    pub(crate) fn resolve_method_call_fallback(\n+        &self,\n+        db: &dyn HirDatabase,\n+        call: &ast::MethodCallExpr,\n+    ) -> Option<Either<FunctionId, FieldId>> {\n+        let expr_id = self.expr_id(db, &call.clone().into())?;\n+        let inference_result = self.infer.as_ref()?;\n+        match inference_result.method_resolution(expr_id) {\n+            Some((f_in_trait, substs)) => {\n+                Some(Either::Left(self.resolve_impl_method_or_trait_def(db, f_in_trait, substs)))\n+            }\n+            None => inference_result.field_resolution(expr_id).map(Either::Right),\n+        }\n+    }\n+\n     pub(crate) fn resolve_await_to_poll(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "1322f5228e8b9994181b6590889c9e66f5f03a11", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "patch": "@@ -469,9 +469,12 @@ impl NameRefClass {\n         match_ast! {\n             match parent {\n                 ast::MethodCallExpr(method_call) => {\n-                    sema.resolve_method_call(&method_call)\n-                        .map(Definition::Function)\n-                        .map(NameRefClass::Definition)\n+                    sema.resolve_method_call_field_fallback(&method_call)\n+                        .map(|it| {\n+                            it.map_left(Definition::Function)\n+                                .map_right(Definition::Field)\n+                                .either(NameRefClass::Definition, NameRefClass::Definition)\n+                        })\n                 },\n                 ast::FieldExpr(field_expr) => {\n                     sema.resolve_field(&field_expr)"}, {"sha": "2e67056b9139be2dc89bca824c5469cc8b71bb82", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ba791dcecfb2d69e831e204f06f2d3bf86323a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "patch": "@@ -5797,3 +5797,26 @@ mod m {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn field_as_method_call_fallback() {\n+    check(\n+        r#\"\n+struct S { f: u32 }\n+fn test() {\n+    S { f: 0 }.f$0();\n+}\n+\"#,\n+        expect![[r#\"\n+            *f*\n+\n+            ```rust\n+            test::S\n+            ```\n+\n+            ```rust\n+            f: u32 // size = 4, align = 4, offset = 0\n+            ```\n+        \"#]],\n+    );\n+}"}]}