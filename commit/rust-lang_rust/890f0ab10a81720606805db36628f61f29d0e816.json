{"sha": "890f0ab10a81720606805db36628f61f29d0e816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MGYwYWIxMGE4MTcyMDYwNjgwNWRiMzY2MjhmNjFmMjlkMGU4MTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T17:15:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T22:49:10Z"}, "message": "rollup merge of #23766: alexcrichton/stabilize-raw-fd\n\nThis commit stabilizes the platform-specific `io` modules, specifically around\nthe traits having to do with the raw representation of each object on each\nplatform.\n\nSpecifically, the following material was stabilized:\n\n* `AsRaw{Fd,Socket,Handle}`\n* `RawFd` (renamed from `Fd`)\n* `RawHandle` (renamed from `Handle`)\n* `RawSocket` (renamed from `Socket`)\n* `AsRaw{Fd,Socket,Handle}` implementations\n* `std::os::{unix, windows}::io`\n\nThe following material was added as `#[unstable]`:\n\n* `FromRaw{Fd,Socket,Handle}`\n* Implementations for various primitives\n\nThere are a number of future improvements that are possible to make to this\nmodule, but this should cover a good bit of functionality desired from these\nmodules for now. Some specific future additions may include:\n\n* `IntoRawXXX` traits to consume the raw representation and cancel the\n  auto-destructor.\n* `Fd`, `Socket`, and `Handle` abstractions that behave like Rust objects and\n  have nice methods for various syscalls.\n\nAt this time though, these are considered backwards-compatible extensions and\nwill not be stabilized at this time.\n\nThis commit is a breaking change due to the addition of `Raw` in from of the\ntype aliases in each of the platform-specific modules.\n\n[breaking-change]", "tree": {"sha": "c388a3942ce1c29258202f2a391700da1b1a8ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c388a3942ce1c29258202f2a391700da1b1a8ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890f0ab10a81720606805db36628f61f29d0e816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890f0ab10a81720606805db36628f61f29d0e816", "html_url": "https://github.com/rust-lang/rust/commit/890f0ab10a81720606805db36628f61f29d0e816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890f0ab10a81720606805db36628f61f29d0e816/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18299747359dba3b1080e7a2a8f5e70fb0eb6cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/18299747359dba3b1080e7a2a8f5e70fb0eb6cde", "html_url": "https://github.com/rust-lang/rust/commit/18299747359dba3b1080e7a2a8f5e70fb0eb6cde"}, {"sha": "6370f2978e485fd46bcb64f51a1c003395acfedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6370f2978e485fd46bcb64f51a1c003395acfedc", "html_url": "https://github.com/rust-lang/rust/commit/6370f2978e485fd46bcb64f51a1c003395acfedc"}], "stats": {"total": 322, "additions": 263, "deletions": 59}, "files": [{"sha": "5ed88780f23e2dc235da037367afb4c99c5f5127", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -56,7 +56,7 @@ mod tempdir;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n-    path: PathBuf,\n+    path: Option<PathBuf>,\n }\n \n /// Metadata information about a file.\n@@ -171,7 +171,7 @@ impl File {\n                reason = \"this abstraction is imposed by this library instead \\\n                          of the underlying OS and may be removed\")]\n     pub fn path(&self) -> Option<&Path> {\n-        Some(&self.path)\n+        self.path.as_ref().map(|p| &**p)\n     }\n \n     /// Attempt to sync all OS-internal metadata to disk.\n@@ -273,6 +273,12 @@ impl File {\n impl AsInner<fs_imp::File> for File {\n     fn as_inner(&self) -> &fs_imp::File { &self.inner }\n }\n+impl FromInner<fs_imp::File> for File {\n+    fn from_inner(f: fs_imp::File) -> File {\n+        File { inner: f, path: None }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -381,7 +387,7 @@ impl OpenOptions {\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n         let path = path.as_ref();\n         let inner = try!(fs_imp::File::open(path, &self.0));\n-        Ok(File { path: path.to_path_buf(), inner: inner })\n+        Ok(File { path: Some(path.to_path_buf()), inner: inner })\n     }\n }\n "}, {"sha": "9ed08d05e8bac3192dd26af43a5e79a2c00eabdc", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -17,7 +17,7 @@ use io::prelude::*;\n use io;\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n use sys_common::net2 as net_imp;\n-use sys_common::AsInner;\n+use sys_common::{AsInner, FromInner};\n \n /// A structure which represents a TCP stream between a local socket and a\n /// remote socket.\n@@ -172,6 +172,10 @@ impl AsInner<net_imp::TcpStream> for TcpStream {\n     fn as_inner(&self) -> &net_imp::TcpStream { &self.0 }\n }\n \n+impl FromInner<net_imp::TcpStream> for TcpStream {\n+    fn from_inner(inner: net_imp::TcpStream) -> TcpStream { TcpStream(inner) }\n+}\n+\n impl TcpListener {\n     /// Creates a new `TcpListener` which will be bound to the specified\n     /// address.\n@@ -245,6 +249,12 @@ impl AsInner<net_imp::TcpListener> for TcpListener {\n     fn as_inner(&self) -> &net_imp::TcpListener { &self.0 }\n }\n \n+impl FromInner<net_imp::TcpListener> for TcpListener {\n+    fn from_inner(inner: net_imp::TcpListener) -> TcpListener {\n+        TcpListener(inner)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "4aeb3d7c7c850afd84720bb82cd7ed552568454c", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -16,7 +16,7 @@ use prelude::v1::*;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};\n use sys_common::net2 as net_imp;\n-use sys_common::AsInner;\n+use sys_common::{AsInner, FromInner};\n \n /// A User Datagram Protocol socket.\n ///\n@@ -140,6 +140,10 @@ impl AsInner<net_imp::UdpSocket> for UdpSocket {\n     fn as_inner(&self) -> &net_imp::UdpSocket { &self.0 }\n }\n \n+impl FromInner<net_imp::UdpSocket> for UdpSocket {\n+    fn from_inner(inner: net_imp::UdpSocket) -> UdpSocket { UdpSocket(inner) }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "e787442052da99d35dc54b51c33a4ec3d55bc18c", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -259,6 +259,12 @@ impl TcpStream {\n     }\n }\n \n+impl FromInner<Socket> for TcpStream {\n+    fn from_inner(socket: Socket) -> TcpStream {\n+        TcpStream { inner: socket }\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // TCP listeners\n ////////////////////////////////////////////////////////////////////////////////\n@@ -312,6 +318,12 @@ impl TcpListener {\n     }\n }\n \n+impl FromInner<Socket> for TcpListener {\n+    fn from_inner(socket: Socket) -> TcpListener {\n+        TcpListener { inner: socket }\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // UDP\n ////////////////////////////////////////////////////////////////////////////////\n@@ -424,3 +436,9 @@ impl UdpSocket {\n         self.inner.duplicate().map(|s| UdpSocket { inner: s })\n     }\n }\n+\n+impl FromInner<Socket> for UdpSocket {\n+    fn from_inner(socket: Socket) -> UdpSocket {\n+        UdpSocket { inner: socket }\n+    }\n+}"}, {"sha": "080cf5620fc7fc10d201df5ead7e78bc5ae3e407", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 92, "deletions": 23, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -32,102 +32,171 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n /// Unix-specific extensions to general I/O primitives\n-#[unstable(feature = \"io_ext\",\n-           reason = \"may want a slightly different organization or a more \\\n-                     general file descriptor primitive\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod io {\n     #[allow(deprecated)] use old_io;\n     use fs;\n     use libc;\n     use net;\n-    use sys_common::AsInner;\n+    use sys_common::{net2, AsInner, FromInner};\n+    use sys;\n \n     /// Raw file descriptors.\n-    pub type Fd = libc::c_int;\n-\n-    /// Extract raw file descriptor\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub type RawFd = libc::c_int;\n+\n+    /// A trait to extract the raw unix file descriptor from an underlying\n+    /// object.\n+    ///\n+    /// This is only available on unix platforms and must be imported in order\n+    /// to call the method. Windows platforms have a corresponding `AsRawHandle`\n+    /// and `AsRawSocket` set of traits.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawFd {\n-        /// Extract the raw file descriptor, without taking any ownership.\n-        fn as_raw_fd(&self) -> Fd;\n+        /// Extract the raw file descriptor.\n+        ///\n+        /// This method does **not** pass ownership of the raw file descriptor\n+        /// to the caller. The descriptor is only guarantee to be valid while\n+        /// the original object has not yet been destroyed.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn as_raw_fd(&self) -> RawFd;\n+    }\n+\n+    /// A trait to express the ability to construct an object from a raw file\n+    /// descriptor.\n+    #[unstable(feature = \"from_raw_os\",\n+               reason = \"recent addition to std::os::unix::io\")]\n+    pub trait FromRawFd {\n+        /// Constructs a new instances of `Self` from the given raw file\n+        /// descriptor.\n+        ///\n+        /// This function **consumes ownership** of the specified file\n+        /// descriptor. The returned object will take responsibility for closing\n+        /// it when the object goes out of scope.\n+        ///\n+        /// Callers should normally only pass in a valid file descriptor to this\n+        /// method or otherwise methods will return errors.\n+        fn from_raw_fd(fd: RawFd) -> Self;\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::fs::File {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for fs::File {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd().raw()\n         }\n     }\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawFd for fs::File {\n+        fn from_raw_fd(fd: RawFd) -> fs::File {\n+            fs::File::from_inner(sys::fs2::File::from_inner(fd))\n+        }\n+    }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::pipe::PipeStream {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::net::pipe::UnixStream {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::net::pipe::UnixListener {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::net::pipe::UnixAcceptor {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n     impl AsRawFd for old_io::net::tcp::TcpStream {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n     impl AsRawFd for old_io::net::tcp::TcpListener {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n     impl AsRawFd for old_io::net::tcp::TcpAcceptor {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for old_io::net::udp::UdpSocket {\n-        fn as_raw_fd(&self) -> Fd {\n+        fn as_raw_fd(&self) -> RawFd {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for net::TcpStream {\n-        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+        fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n     }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for net::TcpListener {\n-        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+        fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n     }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawFd for net::UdpSocket {\n-        fn as_raw_fd(&self) -> Fd { *self.as_inner().socket().as_inner() }\n+        fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+    }\n+\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawFd for net::TcpStream {\n+        fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n+            let socket = sys::net::Socket::from_inner(fd);\n+            net::TcpStream::from_inner(net2::TcpStream::from_inner(socket))\n+        }\n+    }\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawFd for net::TcpListener {\n+        fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n+            let socket = sys::net::Socket::from_inner(fd);\n+            net::TcpListener::from_inner(net2::TcpListener::from_inner(socket))\n+        }\n+    }\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawFd for net::UdpSocket {\n+        fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n+            let socket = sys::net::Socket::from_inner(fd);\n+            net::UdpSocket::from_inner(net2::UdpSocket::from_inner(socket))\n+        }\n     }\n }\n \n@@ -302,7 +371,7 @@ pub mod process {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n     #[doc(no_inline)]\n-    pub use super::io::{Fd, AsRawFd};\n+    pub use super::io::{RawFd, AsRawFd};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]"}, {"sha": "80fc1235a31a269eeae882f233916ee9011ee33c", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -280,6 +280,12 @@ fn cstr(path: &Path) -> io::Result<CString> {\n     Ok(cstring)\n }\n \n+impl FromInner<c_int> for File {\n+    fn from_inner(fd: c_int) -> File {\n+        File(FileDesc::new(fd))\n+    }\n+}\n+\n pub fn mkdir(p: &Path) -> io::Result<()> {\n     let p = try!(cstr(p));\n     try!(cvt(unsafe { libc::mkdir(p.as_ptr(), 0o777) }));"}, {"sha": "00b907ce10cd29ac2f855580d2389628430cd9fd", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -17,7 +17,7 @@ use str;\n use sys::c;\n use net::SocketAddr;\n use sys::fd::FileDesc;\n-use sys_common::AsInner;\n+use sys_common::{AsInner, FromInner};\n \n pub use sys::{cvt, cvt_r};\n \n@@ -72,3 +72,7 @@ impl Socket {\n impl AsInner<c_int> for Socket {\n     fn as_inner(&self) -> &c_int { self.0.as_inner() }\n }\n+\n+impl FromInner<c_int> for Socket {\n+    fn from_inner(fd: c_int) -> Socket { Socket(FileDesc::new(fd)) }\n+}"}, {"sha": "2dd61861bd6dc8c78299ffb2b7c9065f3aef29c9", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 98, "deletions": 22, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -16,112 +16,188 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"io_ext\",\n-           reason = \"organization may change slightly and the primitives \\\n-                     provided may be tweaked\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod io {\n     use fs;\n     use libc;\n     use net;\n-    use sys_common::AsInner;\n+    use sys_common::{net2, AsInner, FromInner};\n+    use sys;\n \n     #[allow(deprecated)]\n     use old_io;\n \n     /// Raw HANDLEs.\n-    pub type Handle = libc::HANDLE;\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub type RawHandle = libc::HANDLE;\n \n     /// Raw SOCKETs.\n-    pub type Socket = libc::SOCKET;\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub type RawSocket = libc::SOCKET;\n \n     /// Extract raw handles.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawHandle {\n         /// Extract the raw handle, without taking any ownership.\n-        fn as_raw_handle(&self) -> Handle;\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn as_raw_handle(&self) -> RawHandle;\n+    }\n+\n+    /// Construct I/O objects from raw handles.\n+    #[unstable(feature = \"from_raw_os\",\n+               reason = \"recent addition to the std::os::windows::io module\")]\n+    pub trait FromRawHandle {\n+        /// Construct a new I/O object from the specified raw handle.\n+        ///\n+        /// This function will **consume ownership** of the handle given,\n+        /// passing responsibility for closing the handle to the returned\n+        /// object.\n+        fn from_raw_handle(handle: RawHandle) -> Self;\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for old_io::fs::File {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for fs::File {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle().raw()\n         }\n     }\n \n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawHandle for fs::File {\n+        fn from_raw_handle(handle: RawHandle) -> fs::File {\n+            fs::File::from_inner(sys::fs2::File::from_inner(handle))\n+        }\n+    }\n+\n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for old_io::pipe::PipeStream {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for old_io::net::pipe::UnixStream {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for old_io::net::pipe::UnixListener {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawHandle for old_io::net::pipe::UnixAcceptor {\n-        fn as_raw_handle(&self) -> Handle {\n+        fn as_raw_handle(&self) -> RawHandle {\n             self.as_inner().handle()\n         }\n     }\n \n     /// Extract raw sockets.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawSocket {\n-        fn as_raw_socket(&self) -> Socket;\n+        /// Extract the underlying raw socket from this object.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn as_raw_socket(&self) -> RawSocket;\n+    }\n+\n+    /// Create I/O objects from raw sockets.\n+    #[unstable(feature = \"from_raw_os\", reason = \"recent addition to module\")]\n+    pub trait FromRawSocket {\n+        /// Creates a new I/O object from the given raw socket.\n+        ///\n+        /// This function will **consume ownership** of the socket provided and\n+        /// it will be closed when the returned object goes out of scope.\n+        fn from_raw_socket(sock: RawSocket) -> Self;\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for old_io::net::tcp::TcpStream {\n-        fn as_raw_socket(&self) -> Socket {\n+        fn as_raw_socket(&self) -> RawSocket {\n             self.as_inner().fd()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for old_io::net::tcp::TcpListener {\n-        fn as_raw_socket(&self) -> Socket {\n+        fn as_raw_socket(&self) -> RawSocket {\n             self.as_inner().socket()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for old_io::net::tcp::TcpAcceptor {\n-        fn as_raw_socket(&self) -> Socket {\n+        fn as_raw_socket(&self) -> RawSocket {\n             self.as_inner().socket()\n         }\n     }\n \n     #[allow(deprecated)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for old_io::net::udp::UdpSocket {\n-        fn as_raw_socket(&self) -> Socket {\n+        fn as_raw_socket(&self) -> RawSocket {\n             self.as_inner().fd()\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for net::TcpStream {\n-        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n+        fn as_raw_socket(&self) -> RawSocket {\n+            *self.as_inner().socket().as_inner()\n+        }\n     }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for net::TcpListener {\n-        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n+        fn as_raw_socket(&self) -> RawSocket {\n+            *self.as_inner().socket().as_inner()\n+        }\n     }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl AsRawSocket for net::UdpSocket {\n-        fn as_raw_socket(&self) -> Socket { *self.as_inner().socket().as_inner() }\n+        fn as_raw_socket(&self) -> RawSocket {\n+            *self.as_inner().socket().as_inner()\n+        }\n+    }\n+\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawSocket for net::TcpStream {\n+        fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n+            let sock = sys::net::Socket::from_inner(sock);\n+            net::TcpStream::from_inner(net2::TcpStream::from_inner(sock))\n+        }\n+    }\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawSocket for net::TcpListener {\n+        fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n+            let sock = sys::net::Socket::from_inner(sock);\n+            net::TcpListener::from_inner(net2::TcpListener::from_inner(sock))\n+        }\n+    }\n+    #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+    impl FromRawSocket for net::UdpSocket {\n+        fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n+            let sock = sys::net::Socket::from_inner(sock);\n+            net::UdpSocket::from_inner(net2::UdpSocket::from_inner(sock))\n+        }\n     }\n }\n \n@@ -230,7 +306,7 @@ pub mod fs {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n     #[doc(no_inline)]\n-    pub use super::io::{Socket, Handle, AsRawSocket, AsRawHandle};\n+    pub use super::io::{RawSocket, RawHandle, AsRawSocket, AsRawHandle};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]"}, {"sha": "d03e45649ed05e3a8a3daec584b453eb32fbc4da", "filename": "src/libstd/sys/windows/fs2.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -20,11 +20,12 @@ use mem;\n use path::{Path, PathBuf};\n use ptr;\n use sync::Arc;\n-use sys::handle::Handle as RawHandle;\n+use sys::handle::Handle;\n use sys::{c, cvt};\n+use sys_common::FromInner;\n use vec::Vec;\n \n-pub struct File { handle: RawHandle }\n+pub struct File { handle: Handle }\n pub struct FileAttr { data: c::WIN32_FILE_ATTRIBUTE_DATA }\n \n pub struct ReadDir {\n@@ -192,7 +193,7 @@ impl File {\n         if handle == libc::INVALID_HANDLE_VALUE {\n             Err(Error::last_os_error())\n         } else {\n-            Ok(File { handle: RawHandle::new(handle) })\n+            Ok(File { handle: Handle::new(handle) })\n         }\n     }\n \n@@ -260,7 +261,13 @@ impl File {\n         Ok(newpos as u64)\n     }\n \n-    pub fn handle(&self) -> &RawHandle { &self.handle }\n+    pub fn handle(&self) -> &Handle { &self.handle }\n+}\n+\n+impl FromInner<libc::HANDLE> for File {\n+    fn from_inner(handle: libc::HANDLE) -> File {\n+        File { handle: Handle::new(handle) }\n+    }\n }\n \n pub fn to_utf16(s: &Path) -> Vec<u16> {"}, {"sha": "12a8ef99d764adc3a9d70b6eea9c66bb71787ca0", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -20,7 +20,7 @@ use num::{SignedInt, Int};\n use rt;\n use sync::{Once, ONCE_INIT};\n use sys::c;\n-use sys_common::AsInner;\n+use sys_common::{AsInner, FromInner};\n \n pub type wrlen_t = i32;\n \n@@ -126,10 +126,14 @@ impl Socket {\n \n impl Drop for Socket {\n     fn drop(&mut self) {\n-        unsafe { cvt(libc::closesocket(self.0)).unwrap(); }\n+        let _ = unsafe { libc::closesocket(self.0) };\n     }\n }\n \n impl AsInner<libc::SOCKET> for Socket {\n     fn as_inner(&self) -> &libc::SOCKET { &self.0 }\n }\n+\n+impl FromInner<libc::SOCKET> for Socket {\n+    fn from_inner(sock: libc::SOCKET) -> Socket { Socket(sock) }\n+}"}, {"sha": "5cd90b0902bfa5a92b3d73da82e7e0735feae9c9", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890f0ab10a81720606805db36628f61f29d0e816/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=890f0ab10a81720606805db36628f61f29d0e816", "patch": "@@ -31,7 +31,7 @@ use ptr;\n use slice;\n use sys::c;\n use sys::fs::FileDesc;\n-use sys::handle::Handle as RawHandle;\n+use sys::handle::Handle;\n \n use libc::funcs::extra::kernel32::{\n     GetEnvironmentStringsW,\n@@ -369,7 +369,7 @@ pub fn home_dir() -> Option<PathBuf> {\n         if c::OpenProcessToken(me, c::TOKEN_READ, &mut token) == 0 {\n             return None\n         }\n-        let _handle = RawHandle::new(token);\n+        let _handle = Handle::new(token);\n         super::fill_utf16_buf_new(|buf, mut sz| {\n             match c::GetUserProfileDirectoryW(token, buf, &mut sz) {\n                 0 if libc::GetLastError() != 0 => 0,"}]}