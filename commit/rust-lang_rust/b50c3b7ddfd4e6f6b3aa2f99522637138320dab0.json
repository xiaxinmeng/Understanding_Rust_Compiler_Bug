{"sha": "b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MGMzYjdkZGZkNGU2ZjZiM2FhMmY5OTUyMjYzNzEzODMyMGRhYjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:07:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T18:07:31Z"}, "message": "Rollup merge of #67160 - matthewjasper:gat-generics, r=nikomatsakis\n\nMake GATs less ICE-prone.\n\nAfter this PR simple lifetime-generic associated types can now be used in a compiling program. There are two big limitations:\n\n* #30472 has not been addressed in any way (see src/test/ui/generic-associated-types/iterable.rs)\n* Using type- and const-generic associated types errors because bound types and constants aren't handled by trait solving.\n    * The errors are technically non-fatal, but they happen in a [part of the compiler](https://github.com/rust-lang/rust/blob/4abb0ad2731e9ac6fd5d64d4cf15b7c82e4b5a81/src/librustc_typeck/lib.rs#L298) that fairly aggressively stops compiling on errors.\n\ncloses #47206\ncloses #49362\ncloses #62521\ncloses #63300\ncloses #64755\ncloses #67089", "tree": {"sha": "c2c3bdef13a161086509448d3fb2934dbc10ba64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2c3bdef13a161086509448d3fb2934dbc10ba64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/l9jCRBK7hj4Ov3rIwAAdHIIACD9Yqg7oQcbC17jqzudURlP\noDHcNnpUiI8dmIK9JkdnuGfUO79CJAXlXb97eoMYUUA/fS4TJNQZzC81W019ycVr\nH6ETlme5AtrEefsMi3Erm9YixWqScg3VIP40bJvk4OiDXmJuPaZ+cNAOzTaDCLat\nelRn07eg3al9ieTX6xZGeR+VWfwrP3D+4mKh3PtxfGKK/no0gYOW+U9eg3sQYdQ4\njapIZi0KjmRYS7xvaG5ibrf8NfpcZdmeEQZXZCW99jyVdUdW8wvLqoyvr0havfxQ\n4DyY5nrIBc8dHcqWpnCaEijaBrWK6+cn6u4UjEvjwqMP7xIlCwyvuhopQPD1R7o=\n=gpiy\n-----END PGP SIGNATURE-----\n", "payload": "tree c2c3bdef13a161086509448d3fb2934dbc10ba64\nparent 0a440b159436ad3c75d25b24ce5d43086b567872\nparent e7b8bfe5b9f09a6c587ebe170abdf84a7bce26fa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576951651 +0100\ncommitter GitHub <noreply@github.com> 1576951651 +0100\n\nRollup merge of #67160 - matthewjasper:gat-generics, r=nikomatsakis\n\nMake GATs less ICE-prone.\n\nAfter this PR simple lifetime-generic associated types can now be used in a compiling program. There are two big limitations:\n\n* #30472 has not been addressed in any way (see src/test/ui/generic-associated-types/iterable.rs)\n* Using type- and const-generic associated types errors because bound types and constants aren't handled by trait solving.\n    * The errors are technically non-fatal, but they happen in a [part of the compiler](https://github.com/rust-lang/rust/blob/4abb0ad2731e9ac6fd5d64d4cf15b7c82e4b5a81/src/librustc_typeck/lib.rs#L298) that fairly aggressively stops compiling on errors.\n\ncloses #47206\ncloses #49362\ncloses #62521\ncloses #63300\ncloses #64755\ncloses #67089\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "html_url": "https://github.com/rust-lang/rust/commit/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a440b159436ad3c75d25b24ce5d43086b567872", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a440b159436ad3c75d25b24ce5d43086b567872", "html_url": "https://github.com/rust-lang/rust/commit/0a440b159436ad3c75d25b24ce5d43086b567872"}, {"sha": "e7b8bfe5b9f09a6c587ebe170abdf84a7bce26fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b8bfe5b9f09a6c587ebe170abdf84a7bce26fa", "html_url": "https://github.com/rust-lang/rust/commit/e7b8bfe5b9f09a6c587ebe170abdf84a7bce26fa"}], "stats": {"total": 1814, "additions": 1183, "deletions": 631}, "files": [{"sha": "fca0632a4a623b5f8d36d032955e6b408750b8d1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1912,6 +1912,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n+            CompareImplTypeObligation { .. } => Error0308(\"type not compatible with trait\"),\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) =>\n                 Error0308(match source {\n                     hir::MatchSource::IfLetDesugar { .. } =>\n@@ -1948,6 +1949,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n+            CompareImplTypeObligation { .. } => \"associated type is compatible with trait\",\n             ExprAssignable => \"expression is assignable\",\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\","}, {"sha": "b299fd6117e416e2394f7635b44f4e8edad17d33", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -702,6 +702,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             SelectionError::Unimplemented => {\n                 if let ObligationCauseCode::CompareImplMethodObligation {\n                     item_name, impl_item_def_id, trait_item_def_id,\n+                } | ObligationCauseCode::CompareImplTypeObligation {\n+                    item_name, impl_item_def_id, trait_item_def_id,\n                 } = obligation.cause.code {\n                     self.report_extra_impl_obligation(\n                         span,\n@@ -2631,6 +2633,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                               but not on the corresponding trait method\",\n                              predicate));\n             }\n+            ObligationCauseCode::CompareImplTypeObligation { .. } => {\n+                err.note(&format!(\n+                    \"the requirement `{}` appears on the associated impl type\\\n+                     but not on the corresponding associated trait type\",\n+                     predicate));\n+            }\n             ObligationCauseCode::ReturnType |\n             ObligationCauseCode::ReturnValue(_) |\n             ObligationCauseCode::BlockTailExpression(_) => (),"}, {"sha": "8baedfed9d60135e123982dfe48918013257fbad", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -230,6 +230,13 @@ pub enum ObligationCauseCode<'tcx> {\n         trait_item_def_id: DefId,\n     },\n \n+    /// Error derived when matching traits/impls; see ObligationCause for more details\n+    CompareImplTypeObligation {\n+        item_name: ast::Name,\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n+\n     /// Checking that this expression can be assigned where it needs to be\n     // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable,"}, {"sha": "408743d5788d105a7a05d05f3c87d68a749625ee", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -23,6 +23,7 @@ use crate::ty::subst::{Subst, InternalSubsts};\n use crate::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::util::common::FN_OUTPUT_NAME;\n+use syntax_pos::DUMMY_SP;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n@@ -1437,11 +1438,14 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     impl_vtable: VtableImplData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n+    let tcx = selcx.tcx();\n+\n     let VtableImplData { impl_def_id, substs, nested } = impl_vtable;\n+    let assoc_item_id = obligation.predicate.item_def_id;\n+    let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n \n-    let tcx = selcx.tcx();\n     let param_env = obligation.param_env;\n-    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_def_id);\n+    let assoc_ty = assoc_ty_def(selcx, impl_def_id, assoc_item_id);\n \n     if !assoc_ty.item.defaultness.has_value() {\n         // This means that the impl is missing a definition for the\n@@ -1456,16 +1460,28 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             obligations: nested,\n         };\n     }\n+    let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n     let ty = if let ty::AssocKind::OpaqueTy = assoc_ty.item.kind {\n         let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n     } else {\n         tcx.type_of(assoc_ty.item.def_id)\n     };\n-    Progress {\n-        ty: ty.subst(tcx, substs),\n-        obligations: nested,\n+    if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n+        tcx.sess.delay_span_bug(\n+            DUMMY_SP,\n+            \"impl item and trait item have different parameter counts\",\n+        );\n+        Progress {\n+            ty: tcx.types.err,\n+            obligations: nested,\n+        }\n+    } else {\n+        Progress {\n+            ty: ty.subst(tcx, substs),\n+            obligations: nested,\n+        }\n     }\n }\n "}, {"sha": "1e78b79ebb619229727e512b4da255e3e127f485", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -514,6 +514,15 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 impl_item_def_id,\n                 trait_item_def_id,\n             }),\n+            super::CompareImplTypeObligation {\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } => Some(super::CompareImplTypeObligation {\n+                item_name,\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            }),\n             super::ExprAssignable => Some(super::ExprAssignable),\n             super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                 arm_span,"}, {"sha": "37a443a2c74698bd54fb5bc44da26688fba6d8ca", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1305,7 +1305,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     }\n \n     #[inline]\n-    pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'_>) -> PolyTraitRef<'tcx> {\n+    pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {\n         // Note: unlike with `TraitRef::to_poly_trait_ref()`,\n         // `self.0.trait_ref` is permitted to have escaping regions.\n         // This is because here `self` has a `Binder` and so does our"}, {"sha": "02efe8df03d80b55da56e3a413dd6eb29a65e7a0", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1026,11 +1026,11 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// Extracts the underlying trait reference from this projection.\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt<'_>) -> ty::TraitRef<'tcx> {\n+    pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::TraitRef {\n             def_id,\n-            substs: self.substs,\n+            substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)),\n         }\n     }\n "}, {"sha": "217188a6f04c298112ba1762ac245acab385470d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n                 ty::GenericParamDefKind::Const => {\n                     tcx.mk_const(ty::Const {\n                         val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n-                        ty: tcx.type_of(def_id),\n+                        ty: tcx.type_of(param.def_id),\n                     }).into()\n                 }\n             }\n@@ -533,8 +533,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                             data.name,\n                             self.root_ty,\n                             data.index);\n-                        self.tcx.sess.delay_span_bug(span, &msg);\n-                        r\n+                        span_bug!(span, \"{}\", msg);\n                     }\n                 }\n             }"}, {"sha": "df81231cf9815165f3fd076eade7a80a12e0f9ff", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1119,17 +1119,16 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 visit::walk_impl_item(this, impl_item);\n                                             }\n-                                            AssocItemKind::TyAlias(_, Some(ref ty)) => {\n+                                            AssocItemKind::TyAlias(_, _) => {\n                                                 // If this is a trait impl, ensure the type\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,\n                                                                       TypeNS,\n                                                                       impl_item.span,\n                                                     |n, s| TypeNotMemberOfTrait(n, s));\n \n-                                                this.visit_ty(ty);\n+                                                visit::walk_impl_item(this, impl_item);\n                                             }\n-                                            AssocItemKind::TyAlias(_, None) => {}\n                                             AssocItemKind::Macro(_) =>\n                                                 panic!(\"unexpanded macro in resolve!\"),\n                                         }"}, {"sha": "9b737428d5aaf9807188a7851ce02e32a6ae27d5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 70, "deletions": 16, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -88,6 +88,7 @@ pub trait AstConv<'tcx> {\n     fn projected_ty_from_poly_trait_ref(&self,\n                                         span: Span,\n                                         item_def_id: DefId,\n+                                        item_segment: &hir::PathSegment,\n                                         poly_trait_ref: ty::PolyTraitRef<'tcx>)\n                                         -> Ty<'tcx>;\n \n@@ -205,6 +206,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let (substs, assoc_bindings, _) = self.create_substs_for_ast_path(\n             span,\n             def_id,\n+            &[],\n             item_segment.generic_args(),\n             item_segment.infer_args,\n             None,\n@@ -615,9 +617,21 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ///    `Output = u32` are returned in the `Vec<ConvertedBinding...>` result.\n     ///\n     /// Note that the type listing given here is *exactly* what the user provided.\n+    ///\n+    /// For (generic) associated types\n+    ///\n+    /// ```\n+    /// <Vec<u8> as Iterable<u8>>::Iter::<'a>\n+    /// ```\n+    ///\n+    /// We have the parent substs are the substs for the parent trait:\n+    /// `[Vec<u8>, u8]` and `generic_args` are the arguments for the associated\n+    /// type itself: `['a]`. The returned `SubstsRef` concatenates these two\n+    /// lists: `[Vec<u8>, u8, 'a]`.\n     fn create_substs_for_ast_path<'a>(&self,\n         span: Span,\n         def_id: DefId,\n+        parent_substs: &[subst::GenericArg<'tcx>],\n         generic_args: &'a hir::GenericArgs,\n         infer_args: bool,\n         self_ty: Option<Ty<'tcx>>)\n@@ -633,17 +647,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n         let generic_params = tcx.generics_of(def_id);\n \n-        // If a self-type was declared, one should be provided.\n-        assert_eq!(generic_params.has_self, self_ty.is_some());\n+        if generic_params.has_self {\n+            if generic_params.parent.is_some() {\n+                // The parent is a trait so it should have at least one subst\n+                // for the `Self` type.\n+                assert!(!parent_substs.is_empty())\n+            } else {\n+                // This item (presumably a trait) needs a self-type.\n+                assert!(self_ty.is_some());\n+            }\n+        } else {\n+            assert!(self_ty.is_none() && parent_substs.is_empty());\n+        }\n \n-        let has_self = generic_params.has_self;\n         let (_, potential_assoc_types) = Self::check_generic_arg_count(\n             tcx,\n             span,\n             &generic_params,\n             &generic_args,\n             GenericArgPosition::Type,\n-            has_self,\n+            self_ty.is_some(),\n             infer_args,\n         );\n \n@@ -652,7 +675,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n             if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n-                if is_object && has_default && has_self {\n+                if is_object && has_default {\n                     let self_param = tcx.types.self_param;\n                     if tcx.at(span).type_of(param.def_id).walk().any(|ty| ty == self_param) {\n                         // There is no suitable inference default for a type parameter\n@@ -668,7 +691,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let substs = Self::create_substs_for_generic_args(\n             tcx,\n             def_id,\n-            &[][..],\n+            parent_substs,\n             self_ty.is_some(),\n             self_ty,\n             // Provide the generic args, and whether types should be inferred.\n@@ -780,6 +803,30 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         (substs, assoc_bindings, potential_assoc_types)\n     }\n \n+    crate fn create_substs_for_associated_item(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+        item_def_id: DefId,\n+        item_segment: &hir::PathSegment,\n+        parent_substs: SubstsRef<'tcx>,\n+    ) -> SubstsRef<'tcx> {\n+        if tcx.generics_of(item_def_id).params.is_empty() {\n+            self.prohibit_generics(slice::from_ref(item_segment));\n+\n+            parent_substs\n+        } else {\n+            self.create_substs_for_ast_path(\n+                span,\n+                item_def_id,\n+                parent_substs,\n+                item_segment.generic_args(),\n+                item_segment.infer_args,\n+                None,\n+            ).0\n+        }\n+    }\n+\n     /// Instantiates the path for the given trait reference, assuming that it's\n     /// bound to a valid trait type. Returns the `DefId` of the defining trait.\n     /// The type _cannot_ be a type other than a trait type.\n@@ -919,6 +966,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         self.create_substs_for_ast_path(span,\n                                         trait_def_id,\n+                                        &[],\n                                         trait_segment.generic_args(),\n                                         trait_segment.infer_args,\n                                         Some(self_ty))\n@@ -1665,8 +1713,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"associated_path_to_ty: {:?}::{}\", qself_ty, assoc_ident);\n \n-        self.prohibit_generics(slice::from_ref(assoc_segment));\n-\n         // Check if we have an enum variant.\n         let mut variant_resolution = None;\n         if let ty::Adt(adt_def, _) = qself_ty.kind {\n@@ -1677,6 +1723,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 if let Some(variant_def) = variant_def {\n                     if permit_variants {\n                         tcx.check_stability(variant_def.def_id, Some(hir_ref_id), span);\n+                        self.prohibit_generics(slice::from_ref(assoc_segment));\n                         return Ok((qself_ty, DefKind::Variant, variant_def.def_id));\n                     } else {\n                         variant_resolution = Some(variant_def.def_id);\n@@ -1767,7 +1814,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 i.ident.modern() == assoc_ident\n         }).expect(\"missing associated type\");\n \n-        let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, bound);\n+        let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n         let ty = self.normalize_ty(span, ty);\n \n         let kind = DefKind::AssocTy;\n@@ -1818,8 +1865,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n \n-        self.prohibit_generics(slice::from_ref(item_segment));\n-\n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty\n         } else {\n@@ -1861,9 +1906,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                         self_ty,\n                                                         trait_segment);\n \n+        let item_substs = self.create_substs_for_associated_item(\n+            tcx,\n+            span,\n+            item_def_id,\n+            item_segment,\n+            trait_ref.substs,\n+        );\n+\n         debug!(\"qpath_to_ty: trait_ref={:?}\", trait_ref);\n \n-        self.normalize_ty(span, tcx.mk_projection(item_def_id, trait_ref.substs))\n+        self.normalize_ty(span, tcx.mk_projection(item_def_id, item_substs))\n     }\n \n     pub fn prohibit_generics<'a, T: IntoIterator<Item = &'a hir::PathSegment>>(\n@@ -2518,21 +2571,22 @@ impl<'tcx> Bounds<'tcx> {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             tcx.lang_items().sized_trait().map(|sized| {\n-                let trait_ref = ty::TraitRef {\n+                let trait_ref = ty::Binder::bind(ty::TraitRef {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[])\n-                };\n+                });\n                 (trait_ref.to_predicate(), span)\n             })\n         });\n \n         sized_predicate.into_iter().chain(\n             self.region_bounds.iter().map(|&(region_bound, span)| {\n                 // Account for the binder being introduced below; no need to shift `param_ty`\n-                // because, at present at least, it can only refer to early-bound regions.\n+                // because, at present at least, it either only refers to early-bound regions,\n+                // or it's a generic associated type that deliberately has escaping bound vars.\n                 let region_bound = ty::fold::shift_region(tcx, region_bound, 1);\n                 let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n-                (ty::Binder::dummy(outlives).to_predicate(), span)\n+                (ty::Binder::bind(outlives).to_predicate(), span)\n             }).chain(\n                 self.trait_bounds.iter().map(|&(bound_trait_ref, span)| {\n                     (bound_trait_ref.to_predicate(), span)"}, {"sha": "4dba2fb96ebab4036c0de3c92cb57d3067abb4b3", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 155, "deletions": 21, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::{self, TyCtxt, GenericParamDefKind};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n-use rustc::ty::subst::{Subst, InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticId};\n \n@@ -26,7 +26,7 @@ use rustc_error_codes::*;\n /// - `trait_m`: the method in the trait\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n \n-pub fn compare_impl_method<'tcx>(\n+crate fn compare_impl_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     impl_m_span: Span,\n@@ -181,13 +181,14 @@ fn compare_predicate_entailment<'tcx>(\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n     // Check region bounds.\n-    check_region_bounds_on_impl_method(tcx,\n-                                       impl_m_span,\n-                                       impl_m,\n-                                       trait_m,\n-                                       &trait_m_generics,\n-                                       &impl_m_generics,\n-                                       trait_to_skol_substs)?;\n+    check_region_bounds_on_impl_item(\n+        tcx,\n+        impl_m_span,\n+        impl_m,\n+        trait_m,\n+        &trait_m_generics,\n+        &impl_m_generics,\n+    )?;\n \n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n@@ -361,25 +362,22 @@ fn compare_predicate_entailment<'tcx>(\n     })\n }\n \n-fn check_region_bounds_on_impl_method<'tcx>(\n+fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n     trait_generics: &ty::Generics,\n     impl_generics: &ty::Generics,\n-    trait_to_skol_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n     let trait_params = trait_generics.own_counts().lifetimes;\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n-    debug!(\"check_region_bounds_on_impl_method: \\\n+    debug!(\"check_region_bounds_on_impl_item: \\\n             trait_generics={:?} \\\n-            impl_generics={:?} \\\n-            trait_to_skol_substs={:?}\",\n+            impl_generics={:?}\",\n            trait_generics,\n-           impl_generics,\n-           trait_to_skol_substs);\n+           impl_generics);\n \n     // Must have same number of early-bound lifetime parameters.\n     // Unfortunately, if the user screws up the bounds, then this\n@@ -391,20 +389,25 @@ fn check_region_bounds_on_impl_method<'tcx>(\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n+        let item_kind = assoc_item_kind_str(impl_m);\n         let def_span = tcx.sess.source_map().def_span(span);\n         let span = tcx.hir().get_generics(impl_m.def_id).map(|g| g.span).unwrap_or(def_span);\n         let mut err = struct_span_err!(\n             tcx.sess,\n             span,\n             E0195,\n-            \"lifetime parameters or bounds on method `{}` do not match the trait declaration\",\n+            \"lifetime parameters or bounds on {} `{}` do not match the trait declaration\",\n+            item_kind,\n             impl_m.ident,\n         );\n-        err.span_label(span, \"lifetimes do not match method in trait\");\n+        err.span_label(span, &format!(\"lifetimes do not match {} in trait\", item_kind));\n         if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n             let def_sp = tcx.sess.source_map().def_span(sp);\n             let sp = tcx.hir().get_generics(trait_m.def_id).map(|g| g.span).unwrap_or(def_sp);\n-            err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n+            err.span_label(\n+                sp,\n+                &format!(\"lifetimes in impl do not match this {} in trait\", item_kind),\n+            );\n         }\n         err.emit();\n         return Err(ErrorReported);\n@@ -603,6 +606,8 @@ fn compare_number_of_generics<'tcx>(\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),\n     ];\n \n+    let item_kind = assoc_item_kind_str(impl_);\n+\n     let mut err_occurred = false;\n     for &(kind, trait_count, impl_count) in &matchings {\n         if impl_count != trait_count {\n@@ -647,8 +652,9 @@ fn compare_number_of_generics<'tcx>(\n             let mut err = tcx.sess.struct_span_err_with_code(\n                 spans,\n                 &format!(\n-                    \"method `{}` has {} {kind} parameter{} but its trait \\\n+                    \"{} `{}` has {} {kind} parameter{} but its trait \\\n                      declaration has {} {kind} parameter{}\",\n+                    item_kind,\n                     trait_.ident,\n                     impl_count,\n                     pluralize!(impl_count),\n@@ -961,7 +967,7 @@ fn compare_synthetic_generics<'tcx>(\n     }\n }\n \n-pub fn compare_const_impl<'tcx>(\n+crate fn compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_c: &ty::AssocItem,\n     impl_c_span: Span,\n@@ -1059,3 +1065,131 @@ pub fn compare_const_impl<'tcx>(\n         fcx.regionck_item(impl_c_hir_id, impl_c_span, &[]);\n     });\n }\n+\n+crate fn compare_ty_impl<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_ty: &ty::AssocItem,\n+    impl_ty_span: Span,\n+    trait_ty: &ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+    trait_item_span: Option<Span>,\n+) {\n+    debug!(\"compare_impl_type(impl_trait_ref={:?})\", impl_trait_ref);\n+\n+    let _: Result<(), ErrorReported> = (|| {\n+        compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n+\n+        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)\n+    })();\n+}\n+\n+/// The equivalent of [compare_predicate_entailment], but for associated types\n+/// instead of associated functions.\n+fn compare_type_predicate_entailment(\n+    tcx: TyCtxt<'tcx>,\n+    impl_ty: &ty::AssocItem,\n+    impl_ty_span: Span,\n+    trait_ty: &ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> Result<(), ErrorReported> {\n+    let impl_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    let trait_to_impl_substs = impl_substs.rebase_onto(tcx,\n+                                                       impl_ty.container.id(),\n+                                                       impl_trait_ref.substs);\n+\n+    let impl_ty_generics = tcx.generics_of(impl_ty.def_id);\n+    let trait_ty_generics = tcx.generics_of(trait_ty.def_id);\n+    let impl_ty_predicates = tcx.predicates_of(impl_ty.def_id);\n+    let trait_ty_predicates = tcx.predicates_of(trait_ty.def_id);\n+\n+    check_region_bounds_on_impl_item(\n+        tcx,\n+        impl_ty_span,\n+        impl_ty,\n+        trait_ty,\n+        &trait_ty_generics,\n+        &impl_ty_generics,\n+    )?;\n+\n+    let impl_ty_own_bounds = impl_ty_predicates.instantiate_own(tcx, impl_substs);\n+\n+    if impl_ty_own_bounds.is_empty() {\n+        // Nothing to check.\n+        return Ok(());\n+    }\n+\n+    // This `HirId` should be used for the `body_id` field on each\n+    // `ObligationCause` (and the `FnCtxt`). This is what\n+    // `regionck_item` expects.\n+    let impl_ty_hir_id = tcx.hir().as_local_hir_id(impl_ty.def_id).unwrap();\n+    let cause = ObligationCause {\n+        span: impl_ty_span,\n+        body_id: impl_ty_hir_id,\n+        code: ObligationCauseCode::CompareImplTypeObligation {\n+            item_name: impl_ty.ident.name,\n+            impl_item_def_id: impl_ty.def_id,\n+            trait_item_def_id: trait_ty.def_id,\n+        },\n+    };\n+\n+    debug!(\"compare_type_predicate_entailment: trait_to_impl_substs={:?}\", trait_to_impl_substs);\n+\n+    // The predicates declared by the impl definition, the trait and the\n+    // associated type in the trait are assumed.\n+    let impl_predicates = tcx.predicates_of(impl_ty_predicates.parent.unwrap());\n+    let mut hybrid_preds = impl_predicates.instantiate_identity(tcx);\n+    hybrid_preds.predicates.extend(\n+        trait_ty_predicates.instantiate_own(tcx, trait_to_impl_substs).predicates);\n+\n+    debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n+\n+    let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n+    let param_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&hybrid_preds.predicates),\n+        Reveal::UserFacing,\n+        None\n+    );\n+    let param_env = traits::normalize_param_env_or_error(tcx,\n+                                                         impl_ty.def_id,\n+                                                         param_env,\n+                                                         normalize_cause.clone());\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let inh = Inherited::new(infcx, impl_ty.def_id);\n+        let infcx = &inh.infcx;\n+\n+        debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\",\n+               param_env.caller_bounds);\n+\n+        let mut selcx = traits::SelectionContext::new(&infcx);\n+\n+        for predicate in impl_ty_own_bounds.predicates {\n+            let traits::Normalized { value: predicate, obligations } =\n+                traits::normalize(&mut selcx, param_env, normalize_cause.clone(), &predicate);\n+\n+            inh.register_predicates(obligations);\n+            inh.register_predicate(traits::Obligation::new(cause.clone(), param_env, predicate));\n+        }\n+\n+        // Check that all obligations are satisfied by the implementation's\n+        // version.\n+        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(errors, None, false);\n+            return Err(ErrorReported);\n+        }\n+\n+        // Finally, resolve all regions. This catches wily misuses of\n+        // lifetime parameters.\n+        let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n+        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, &[]);\n+\n+        Ok(())\n+    })\n+}\n+\n+fn assoc_item_kind_str(impl_item: &ty::AssocItem) -> &'static str {\n+    match impl_item.kind {\n+        ty::AssocKind::Const => \"const\",\n+        ty::AssocKind::Method => \"method\",\n+        ty::AssocKind::Type | ty::AssocKind::OpaqueTy => \"type\",\n+    }\n+}"}, {"sha": "1e3ede4c182197be2836448ebc6f2666d7f03f89", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -551,15 +551,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check for `Deref` implementations by constructing a predicate to\n                 // prove: `<T as Deref>::Output == U`\n                 let deref_trait = self.tcx.lang_items().deref_trait().unwrap();\n-                let item_def_id = self.tcx.associated_items(deref_trait).next().unwrap().def_id;\n+                let item_def_id = self.tcx.associated_items(deref_trait)\n+                    .find(|item| item.kind == ty::AssocKind::Type)\n+                    .unwrap()\n+                    .def_id;\n                 let predicate = ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n                     // `<T as Deref>::Output`\n                     projection_ty: ty::ProjectionTy {\n                         // `T`\n-                        substs: self.tcx.mk_substs_trait(\n-                            checked_ty,\n-                            self.fresh_substs_for_item(sp, item_def_id),\n-                        ),\n+                        substs: self.tcx.intern_substs(&[checked_ty.into()]),\n                         // `Deref::Output`\n                         item_def_id,\n                     },"}, {"sha": "5e99b82c712549c21d1c9204cf435cad54676e68", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -154,7 +154,7 @@ pub use self::Expectation::*;\n use self::autoderef::Autoderef;\n use self::callee::DeferredCallResolution;\n use self::coercion::{CoerceMany, DynamicCoerceMany};\n-pub use self::compare_method::{compare_impl_method, compare_const_impl};\n+use self::compare_method::{compare_impl_method, compare_const_impl, compare_ty_impl};\n use self::method::{MethodCallee, SelfSource};\n use self::TupleArgumentsFlag::*;\n \n@@ -2014,41 +2014,50 @@ fn check_impl_items_against_trait<'tcx>(\n                     }\n                 }\n                 hir::ImplItemKind::Method(..) => {\n-                    let trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n+                    let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Method {\n                         compare_impl_method(tcx,\n                                             &ty_impl_item,\n                                             impl_item.span,\n                                             &ty_trait_item,\n                                             impl_trait_ref,\n-                                            trait_span);\n+                                            opt_trait_span);\n                     } else {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0324,\n                             \"item `{}` is an associated method, \\\n                              which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n                             impl_trait_ref.print_only_trait_path());\n                          err.span_label(impl_item.span, \"does not match trait\");\n-                         if let Some(trait_span) = tcx.hir().span_if_local(ty_trait_item.def_id) {\n+                         if let Some(trait_span) = opt_trait_span {\n                             err.span_label(trait_span, \"item in trait\");\n                          }\n                          err.emit()\n                     }\n                 }\n                 hir::ImplItemKind::OpaqueTy(..) |\n                 hir::ImplItemKind::TyAlias(_) => {\n+                    let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n                         if ty_trait_item.defaultness.has_value() {\n                             overridden_associated_type = Some(impl_item);\n                         }\n+                        compare_ty_impl(\n+                            tcx,\n+                            &ty_impl_item,\n+                            impl_item.span,\n+                            &ty_trait_item,\n+                            impl_trait_ref,\n+                            opt_trait_span,\n+                        )\n                     } else {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0325,\n                             \"item `{}` is an associated type, \\\n                              which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n                             impl_trait_ref.print_only_trait_path());\n                          err.span_label(impl_item.span, \"does not match trait\");\n-                         if let Some(trait_span) = tcx.hir().span_if_local(ty_trait_item.def_id) {\n+                         if let Some(trait_span) = opt_trait_span {\n                             err.span_label(trait_span, \"item in trait\");\n                          }\n                          err.emit()\n@@ -2604,6 +2613,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     fn projected_ty_from_poly_trait_ref(&self,\n                                         span: Span,\n                                         item_def_id: DefId,\n+                                        item_segment: &hir::PathSegment,\n                                         poly_trait_ref: ty::PolyTraitRef<'tcx>)\n                                         -> Ty<'tcx>\n     {\n@@ -2613,7 +2623,16 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n             &poly_trait_ref\n         );\n \n-        self.tcx().mk_projection(item_def_id, trait_ref.substs)\n+        let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n+            self,\n+            self.tcx,\n+            span,\n+            item_def_id,\n+            item_segment,\n+            trait_ref.substs,\n+        );\n+\n+        self.tcx().mk_projection(item_def_id, item_substs)\n     }\n \n     fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "f25d2da13eea644e1849b3fb36119d0e3f2373f0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 110, "deletions": 20, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -224,10 +224,19 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         &self,\n         span: Span,\n         item_def_id: DefId,\n+        item_segment: &hir::PathSegment,\n         poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Ty<'tcx> {\n         if let Some(trait_ref) = poly_trait_ref.no_bound_vars() {\n-            self.tcx().mk_projection(item_def_id, trait_ref.substs)\n+            let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n+                self,\n+                self.tcx,\n+                span,\n+                item_def_id,\n+                item_segment,\n+                trait_ref.substs,\n+            );\n+            self.tcx().mk_projection(item_def_id, item_substs)\n         } else {\n             // There are no late-bound regions; we can just ignore the binder.\n             span_err!(\n@@ -2291,25 +2300,7 @@ fn explicit_predicates_of(\n     // Add predicates from associated type bounds.\n     if let Some((self_trait_ref, trait_items)) = is_trait {\n         predicates.extend(trait_items.iter().flat_map(|trait_item_ref| {\n-            let trait_item = tcx.hir().trait_item(trait_item_ref.id);\n-            let bounds = match trait_item.kind {\n-                hir::TraitItemKind::Type(ref bounds, _) => bounds,\n-                _ => return Vec::new().into_iter()\n-            };\n-\n-            let assoc_ty =\n-                tcx.mk_projection(tcx.hir().local_def_id(trait_item.hir_id),\n-                    self_trait_ref.substs);\n-\n-            let bounds = AstConv::compute_bounds(\n-                &ItemCtxt::new(tcx, def_id),\n-                assoc_ty,\n-                bounds,\n-                SizedByDefault::Yes,\n-                trait_item.span,\n-            );\n-\n-            bounds.predicates(tcx, assoc_ty).into_iter()\n+            associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n         }))\n     }\n \n@@ -2343,6 +2334,105 @@ fn explicit_predicates_of(\n     result\n }\n \n+fn associated_item_predicates(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    self_trait_ref: ty::TraitRef<'tcx>,\n+    trait_item_ref: &hir::TraitItemRef,\n+) -> Vec<(ty::Predicate<'tcx>, Span)> {\n+    let trait_item = tcx.hir().trait_item(trait_item_ref.id);\n+    let item_def_id = tcx.hir().local_def_id(trait_item_ref.id.hir_id);\n+    let bounds = match trait_item.kind {\n+        hir::TraitItemKind::Type(ref bounds, _) => bounds,\n+        _ => return Vec::new()\n+    };\n+\n+    let is_gat = !tcx.generics_of(item_def_id).params.is_empty();\n+\n+    let mut had_error = false;\n+\n+    let mut unimplemented_error = |arg_kind: &str| {\n+        if !had_error {\n+            tcx.sess.struct_span_err(\n+                trait_item.span,\n+                &format!(\"{}-generic associated types are not yet implemented\", arg_kind),\n+            )\n+                .note(\"for more information, see https://github.com/rust-lang/rust/issues/44265\")\n+                .emit();\n+            had_error = true;\n+        }\n+    };\n+\n+    let mk_bound_param = |param: &ty::GenericParamDef, _: &_| {\n+        match param.kind {\n+            ty::GenericParamDefKind::Lifetime => {\n+                tcx.mk_region(ty::RegionKind::ReLateBound(\n+                    ty::INNERMOST,\n+                    ty::BoundRegion::BrNamed(param.def_id, param.name)\n+                )).into()\n+            }\n+            // FIXME(generic_associated_types): Use bound types and constants\n+            // once they are handled by the trait system.\n+            ty::GenericParamDefKind::Type { .. } => {\n+                unimplemented_error(\"type\");\n+                tcx.types.err.into()\n+            }\n+            ty::GenericParamDefKind::Const => {\n+                unimplemented_error(\"const\");\n+                tcx.consts.err.into()\n+            }\n+        }\n+    };\n+\n+    let bound_substs = if is_gat {\n+        // Given:\n+        //\n+        // trait X<'a, B, const C: usize> {\n+        //     type T<'d, E, const F: usize>: Default;\n+        // }\n+        //\n+        // We need to create predicates on the trait:\n+        //\n+        // for<'d, E, const F: usize>\n+        // <Self as X<'a, B, const C: usize>>::T<'d, E, const F: usize>: Sized + Default\n+        //\n+        // We substitute escaping bound parameters for the generic\n+        // arguments to the associated type which are then bound by\n+        // the `Binder` around the the predicate.\n+        //\n+        // FIXME(generic_associated_types): Currently only lifetimes are handled.\n+        self_trait_ref.substs.extend_to(tcx, item_def_id, mk_bound_param)\n+    } else {\n+        self_trait_ref.substs\n+    };\n+\n+    let assoc_ty = tcx.mk_projection(\n+        tcx.hir().local_def_id(trait_item.hir_id),\n+        bound_substs,\n+    );\n+\n+    let bounds = AstConv::compute_bounds(\n+        &ItemCtxt::new(tcx, def_id),\n+        assoc_ty,\n+        bounds,\n+        SizedByDefault::Yes,\n+        trait_item.span,\n+    );\n+\n+    let predicates = bounds.predicates(tcx, assoc_ty);\n+\n+    if is_gat {\n+        // We use shifts to get the regions that we're substituting to\n+        // be bound by the binders in the `Predicate`s rather that\n+        // escaping.\n+        let shifted_in = ty::fold::shift_vars(tcx, &predicates, 1);\n+        let substituted = shifted_in.subst(tcx, bound_substs);\n+        ty::fold::shift_out_vars(tcx, &substituted, 1)\n+    } else {\n+        predicates\n+    }\n+}\n+\n /// Converts a specific `GenericBound` from the AST into a set of\n /// predicates that apply to the self type. A vector is returned\n /// because this can be anywhere from zero predicates (`T: ?Sized` adds no"}, {"sha": "a3a703cf50e9807efb0bfee0c2e581d444d5dee3", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -135,7 +135,7 @@ pub fn identify_constrained_generic_params<'tcx>(\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n pub fn setup_constraining_predicates<'tcx>(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     predicates: &mut [(ty::Predicate<'tcx>, Span)],\n     impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n     input_parameters: &mut FxHashSet<Parameter>,"}, {"sha": "2022e9def4f8cb8919fdd3974d5af777c99932a0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -21,7 +21,7 @@ use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc::hir::ptr::P;\n use rustc::ty::subst::InternalSubsts;\n-use rustc::ty::{self, TyCtxt, Ty, AdtKind};\n+use rustc::ty::{self, TyCtxt, Ty, AdtKind, Lift};\n use rustc::ty::fold::TypeFolder;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, Ident};\n@@ -551,7 +551,8 @@ impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n \n impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> Type {\n-        let trait_ = match self.trait_ref(cx.tcx).clean(cx) {\n+        let lifted = self.lift_to_tcx(cx.tcx).unwrap();\n+        let trait_ = match lifted.trait_ref(cx.tcx).clean(cx) {\n             GenericBound::TraitBound(t, _) => t.trait_,\n             GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n         };"}, {"sha": "7ff348aca7cc1e37349a952c89a3a9936e10dca6", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -3,9 +3,11 @@ use std::ops::Deref;\n trait PointerFamily<U> {\n     type Pointer<T>: Deref<Target = T>;\n     //~^ ERROR generic associated types are unstable\n+    //~| ERROR type-generic associated types are not yet implemented\n     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n     //~^ ERROR generic associated types are unstable\n     //~| ERROR where clauses on associated types are unstable\n+    //~| ERROR type-generic associated types are not yet implemented\n }\n \n struct Foo;"}, {"sha": "ab17c9a28ae9bc3c0be1f6e54a31a275696a984b", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -8,7 +8,7 @@ LL |     type Pointer<T>: Deref<Target = T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Pointer<Usize> = Box<Usize>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:18:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:21:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:23:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,14 +53,30 @@ LL |     type Assoc where Self: Sized;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:26:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:28:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: aborting due to 7 previous errors\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/feature-gate-generic_associated_types.rs:4:5\n+   |\n+LL |     type Pointer<T>: Deref<Target = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+   |\n+LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6f018f04018630912848cf1d5ddca3f6da5abb03", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "renamed", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,10 +1,7 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n // A Collection trait and collection families. Based on\n // http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n@@ -15,18 +12,18 @@ trait Collection<T> {\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^^ ERROR type-generic associated types are not yet implemented\n \n     fn empty() -> Self;\n \n     fn add(&mut self, value: T);\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n trait CollectionFamily {\n     type Member<T>: Collection<T, Family = Self>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n struct VecFamily;\n@@ -48,13 +45,11 @@ impl<T> Collection<T> for Vec<T> {\n     }\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {\n@@ -66,7 +61,6 @@ where\n }\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs"}, {"sha": "e99ae78f71454d90c91159bb54e6b899acf8c730", "filename": "src/test/ui/generic-associated-types/collections.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,19 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/collections.rs:13:5\n+   |\n+LL | /     type Sibling<U>: Collection<U> =\n+LL | |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+   | |_________________________________________________________________________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/collections.rs:25:5\n+   |\n+LL |     type Member<T>: Collection<T, Family = Self>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2198b99db25c1d985f76bd27df24a21300f19ac6", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,26 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(#30472) normalize enough to handle this.\n+\n+use std::ops::Deref;\n+\n+trait Foo {\n+    type Bar<'a, 'b>;\n+}\n+\n+trait Baz {\n+    type Quux<'a>: Foo where Self: 'a;\n+\n+    // This weird type tests that we can use universal function call syntax to access the Item on\n+    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>  where Self: 'a;\n+}\n+\n+impl<T> Baz for T where T: Foo {\n+//~^ ERROR type mismatch resolving\n+    type Quux<'a> where T: 'a = T;\n+\n+    type Baa<'a> where T: 'a = &'a <T as Foo>::Bar<'a, 'static>;\n+}\n+\n+fn main() {}"}, {"sha": "bad746f7ef12181ae0b728e9ed12bf716e22e640", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n+  --> $DIR/construct_with_other_type.rs:19:9\n+   |\n+LL | impl<T> Baz for T where T: Foo {\n+   |         ^^^ expected type parameter `T`, found associated type\n+   |\n+   = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n+              found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n+   = note: you might be missing a type parameter or trait bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "522e23ca43d78f8d8f30ba8f8e749f4f82e4587d", "filename": "src/test/ui/generic-associated-types/empty_generics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,5 +1,5 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n trait Foo {\n     type Bar<,>;", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.rs"}, {"sha": "d3acad47831bee6723ff6ff20fbae940647fd320", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+  --> $DIR/empty_generics.rs:5:14\n+   |\n+LL |     type Bar<,>;\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "f88df6a608aa33c0e70d53987199071abd53ef64", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,17 @@\n+// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n+// missing the feature gate.\n+\n+struct Foo;\n+\n+trait MyTrait {\n+    type Item<T>;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+    //~| ERROR type-generic associated types are not yet implemented\n+}\n+\n+impl MyTrait for Foo {\n+    type Item<T> = T;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+}\n+\n+fn main() { }"}, {"sha": "a7d280d635911ade42b0dee10a3759c6e708fea5", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,29 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n+   |\n+LL |     type Item<T>;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:13:5\n+   |\n+LL |     type Item<T> = T;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n+   |\n+LL |     type Item<T>;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e8fc47d2a59f9d01edacbac1f11235e600e5b5b9", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -4,7 +4,9 @@\n struct Foo;\n \n impl Iterator for Foo {\n-    type Item<'b> = &'b Foo; //~ ERROR generic associated types are unstable [E0658]\n+    type Item<'b> = &'b Foo;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+    //~| ERROR lifetime parameters or bounds on type `Item` do not match the trait declaration\n \n     fn next(&mut self) -> Option<Self::Item> {\n         None", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.rs"}, {"sha": "9031071ff69babd123d2c019363b4b736a678168", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error[E0195]: lifetime parameters or bounds on type `Item` do not match the trait declaration\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:14\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |              ^^^^ lifetimes do not match type in trait\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0195, E0658.\n+For more information about an error, try `rustc --explain E0195`."}, {"sha": "33593884de31f724e72884fc3bd99498c5f58ab1", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.rs"}, {"sha": "d75f9fb8451b9d6856b8fdc0d5d31208fe4fe4c4", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.stderr"}, {"sha": "589024e162166821a06597534970444c568fc1e3", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,4 +1,5 @@\n-#![feature(generic_associated_types)] //~ WARN `generic_associated_types` is incomplete\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n \n // Checking the interaction with this other feature\n #![feature(associated_type_defaults)]\n@@ -8,8 +9,11 @@ use std::fmt::{Display, Debug};\n trait Foo {\n     type Assoc where Self: Sized;\n     type Assoc2<T> where T: Display;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     type Assoc3<T>;\n-    type WithDefault<T> where T: Debug = dyn Iterator<Item=T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     type NoGenerics;\n }\n \n@@ -19,7 +23,7 @@ impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n     type Assoc3<T> where T: Iterator = Vec<T>;\n-    type WithDefault<'a, T> = &'a dyn Iterator<T>;\n+    type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;\n }\n ", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.rs"}, {"sha": "2144a5e7d9cd827bf7a2adca76746a54dc28cf10", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,26 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:11:5\n+   |\n+LL |     type Assoc2<T> where T: Display;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:13:5\n+   |\n+LL |     type Assoc3<T>;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:15:5\n+   |\n+LL |     type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "4b4e59a512462791c0e639b7c87794e16c6bb5c9", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,16 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+use std::ops::Deref;\n+\n+trait Iterable {\n+    type Item<'a>;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>>\n+        + Deref<Target = Self::Item<'b>>;\n+    //~^ ERROR undeclared lifetime\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+    //~^ ERROR undeclared lifetime\n+}\n+\n+fn main() {}"}, {"sha": "81137e81dc4891a1cf12a88d03093ccf082703b0", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,15 @@\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:9:37\n+   |\n+LL |         + Deref<Target = Self::Item<'b>>;\n+   |                                     ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'undeclared`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:12:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+   |                                         ^^^^^^^^^^^ undeclared lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "3ffa6c6eec4a58aeb389e3b3bd6701e7091f80d2", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,23 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+    type B<'a, 'b> where 'a: 'b;\n+    type C where Self: Clone;\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Fooy<T>(T);\n+\n+impl<T> Foo for Fooy<T> {\n+    type A<'a> where Self: 'static = (&'a ());\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+    //~^ ERROR lifetime bound not satisfied\n+    type C where Self: Copy = String;\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "017990076931bdff276322bfb199d15057368e42", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,46 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/impl_bounds.rs:15:5\n+   |\n+LL |     type A<'a> where Self: 'static = (&'a ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n+  --> $DIR/impl_bounds.rs:15:5\n+   |\n+LL |     type A<'a> where Self: 'static = (&'a ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/impl_bounds.rs:17:5\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 17:16\n+  --> $DIR/impl_bounds.rs:17:16\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |                ^^\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 17:12\n+  --> $DIR/impl_bounds.rs:17:12\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |            ^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/impl_bounds.rs:19:5\n+   |\n+LL | impl<T> Foo for Fooy<T> {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+...\n+LL |     type C where Self: Copy = String;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `Fooy<T>`\n+   = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl typebut not on the corresponding associated trait type\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0310, E0478.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "2387b891755247cbca1dab8a0882b19e85103871", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+    type B<'a, 'b> where 'a: 'b;\n+    type C where Self: Clone;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A<'a> = (&'a ());\n+    type B<'a, 'b> = (&'a(), &'b ());\n+    type C = String;\n+}\n+\n+#[derive(Clone)]\n+struct Fooer<T>(T);\n+\n+impl<T> Foo for Fooer<T> {\n+    type A<'x> where T: 'x = (&'x ());\n+    type B<'u, 'v> where 'u: 'v = (&'v &'u ());\n+    type C where Self: ToOwned = String;\n+}\n+\n+fn main() {}"}, {"sha": "53e350aacf88e35448c8c1c9e9c0618917fe4625", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,17 @@\n+// Check that this program doesn't cause the compiler to error without output.\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Assoc3<T>;\n+    //~^ type-generic associated types are not yet implemented\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Assoc3<T> where T: Iterator = Vec<T>;\n+}\n+\n+fn main() {}"}, {"sha": "52207d759b9e5f2dbc6f6fcfd07916177510eb98", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,10 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/issue-47206-where-clause.rs:7:5\n+   |\n+LL |     type Assoc3<T>;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to previous error\n+"}, {"sha": "2298aa5b0b751d3c9ae1732044fba53c141e23ef", "filename": "src/test/ui/generic-associated-types/issue-58694-parameter-out-of-range.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Cert {\n+    type PublicKey<'a>: From<&'a [u8]>;\n+}\n+\n+fn main() {}"}, {"sha": "db0da40aab08dab84695770326201d353b2f964d", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(generic-associated-types) Investigate why this doesn't compile.\n+\n+trait Iterator {\n+//~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a> : 'a` is not satisfied\n+    type Item<'a>: 'a;\n+}\n+\n+\n+fn main() {}"}, {"sha": "07169700f39359c507f5dc84b0b8d5a88c4d3de9", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,15 @@\n+error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a> : 'a` is not satisfied\n+  --> $DIR/issue-62326-parameter-out-of-range.rs:6:1\n+   |\n+LL |   trait Iterator {\n+   |   ^-------------\n+   |   |\n+   |  _required by `Iterator`\n+   | |\n+LL | |\n+LL | |     type Item<'a>: 'a;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "105ab4a8adc380b3cc140552176f36c4ae1e52ec", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,51 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(#30472) normalize enough to handle this.\n+\n+trait Iterable {\n+    type Item<'a> where Self: 'a;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+}\n+\n+// Impl for struct type\n+impl<T> Iterable for Vec<T> {\n+    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+    //~^ ERROR type mismatch resolving\n+    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR type mismatch resolving\n+        self.iter()\n+    }\n+}\n+\n+// Impl for a primitive type\n+impl<T> Iterable for [T] {\n+    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+    //~^ ERROR type mismatch resolving\n+    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR type mismatch resolving\n+        self.iter()\n+    }\n+}\n+\n+fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+    it.iter()\n+}\n+\n+fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+    it.iter().next()\n+}\n+\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    assert_eq!(v, make_iter(&v).copied().collect());\n+    assert_eq!(v, make_iter(&*v).copied().collect());\n+    assert_eq!(1, get_first(&v));\n+    assert_eq!(1, get_first(&*v));\n+}"}, {"sha": "d0d75f3cc633678997783d8119e80538b14eb6b5", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,63 @@\n+error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:15:5\n+   |\n+LL | impl<T> Iterable for Vec<T> {\n+   | --------------------------- in this `impl` item\n+LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n+   |\n+   = note:    expected reference `&T`\n+           found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:27:5\n+   |\n+LL | impl<T> Iterable for [T] {\n+   | ------------------------ in this `impl` item\n+LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n+   |\n+   = note:    expected reference `&T`\n+           found associated type `<[T] as Iterable>::Item<'_>`\n+   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:19:5\n+   |\n+LL |   trait Iterable {\n+   |   -------------- required by `Iterable`\n+...\n+LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+LL | |\n+LL | |         self.iter()\n+LL | |     }\n+   | |_____^ expected associated type, found reference\n+   |\n+   = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+                    found reference `&T`\n+   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:31:5\n+   |\n+LL |   trait Iterable {\n+   |   -------------- required by `Iterable`\n+...\n+LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+LL | |\n+LL | |         self.iter()\n+LL | |     }\n+   | |_____^ expected associated type, found reference\n+   |\n+   = note: expected associated type `<[T] as Iterable>::Item<'_>`\n+                    found reference `&T`\n+   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "0edc5c48c01af48773a97edc1c94b5540f755ae3", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,24 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a>;\n+    type B<'a, 'b>;\n+    type C;\n+    type D<T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type E<'a, T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    // Test parameters in default values\n+    type FOk<T> = Self::E<'static, T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type FErr1 = Self::E<'static, 'static>;\n+    //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    type FErr2<T> = Self::E<'static, T, u32>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    //~| ERROR wrong number of type arguments: expected 1, found 2\n+}\n+\n+fn main() {}"}, {"sha": "6b5683611a281ee9843df7cc631cd22f4b1cb4cb", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,53 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:9:5\n+   |\n+LL |     type D<T>;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:11:5\n+   |\n+LL |     type E<'a, T>;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:14:5\n+   |\n+LL |     type FOk<T> = Self::E<'static, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:19:5\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n+  --> $DIR/parameter_number_and_kind.rs:16:35\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static>;\n+   |                                   ^^^^^^^ unexpected lifetime argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/parameter_number_and_kind.rs:16:18\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static>;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 2\n+  --> $DIR/parameter_number_and_kind.rs:19:41\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>;\n+   |                                         ^^^ unexpected type argument\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "74b9cec1da3fa2cfb3af9321057c0ae5358e4e94", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,35 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+// FIXME(#44265) add tests for type-generic and const-genertic associated types.\n+\n+trait Foo {\n+    type A<'a>;\n+    type B<'a, 'b>;\n+    type C;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `A` do not match the trait declaration\n+    type B<'a, T> = Vec<T>;\n+    //~^ ERROR type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+    type C<'a> = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `C` do not match the trait declaration\n+}\n+\n+struct Fooer;\n+\n+impl Foo for Fooer {\n+    type A<T> = u32;\n+    //~^ ERROR type `A` has 1 type parameter but its trait declaration has 0 type parameters\n+    type B<'a> = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `B` do not match the trait declaration\n+    type C<T> = T;\n+    //~^ ERROR type `C` has 1 type parameter but its trait declaration has 0 type parameters\n+}\n+\n+fn main() {}"}, {"sha": "bdd1c895fd911cdb982c2545b31b185f4cb5cc4b", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,62 @@\n+error[E0195]: lifetime parameters or bounds on type `A` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:16:11\n+   |\n+LL |     type A<'a>;\n+   |           ---- lifetimes in impl do not match this type in trait\n+...\n+LL |     type A = u32;\n+   |           ^ lifetimes do not match type in trait\n+\n+error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:18:12\n+   |\n+LL |     type B<'a, 'b>;\n+   |            --  --\n+   |            |\n+   |            expected 0 type parameters\n+...\n+LL |     type B<'a, T> = Vec<T>;\n+   |            ^^  ^\n+   |            |\n+   |            found 1 type parameter\n+\n+error[E0195]: lifetime parameters or bounds on type `C` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:20:11\n+   |\n+LL |     type C;\n+   |           - lifetimes in impl do not match this type in trait\n+...\n+LL |     type C<'a> = u32;\n+   |           ^^^^ lifetimes do not match type in trait\n+\n+error[E0049]: type `A` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:27:12\n+   |\n+LL |     type A<'a>;\n+   |            -- expected 0 type parameters\n+...\n+LL |     type A<T> = u32;\n+   |            ^ found 1 type parameter\n+\n+error[E0195]: lifetime parameters or bounds on type `B` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:29:11\n+   |\n+LL |     type B<'a, 'b>;\n+   |           -------- lifetimes in impl do not match this type in trait\n+...\n+LL |     type B<'a> = u32;\n+   |           ^^^^ lifetimes do not match type in trait\n+\n+error[E0049]: type `C` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:31:12\n+   |\n+LL |     type C;\n+   |           - expected 0 type parameters\n+...\n+LL |     type C<T> = T;\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0049, E0195.\n+For more information about an error, try `rustc --explain E0049`."}, {"sha": "7f4775ddbb0789ef295b964c13d270c70575a364", "filename": "src/test/ui/generic-associated-types/parse/in-trait-impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z parse-only\n \n #![feature(generic_associated_types)]", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait-impl.rs"}, {"sha": "d438795eb1d976744fa0da0bc9d250f9757ef69f", "filename": "src/test/ui/generic-associated-types/parse/in-trait.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,9 +1,10 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z parse-only\n \n #![feature(generic_associated_types)]\n \n use std::ops::Deref;\n+use std::fmt::Debug;\n \n trait Foo {\n     type Bar<'a>;", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait.rs"}, {"sha": "1668759b4e39c00ec9db1b4b9d654796ca819114", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "renamed", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,24 +1,23 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n-// FIXME(#44265): \"type argument not allowed\" errors will be addressed in a follow-up PR.\n+// FIXME(#44265): allow type-generic associated types.\n \n use std::rc::Rc;\n use std::sync::Arc;\n use std::ops::Deref;\n \n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     fn new<T>(value: T) -> Self::Pointer<T>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n struct ArcFamily;\n \n impl PointerFamily for ArcFamily {\n     type Pointer<T> = Arc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Arc::new(value)\n     }\n }\n@@ -28,14 +27,12 @@ struct RcFamily;\n impl PointerFamily for RcFamily {\n     type Pointer<T> = Rc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Rc::new(value)\n     }\n }\n \n struct Foo<P: PointerFamily> {\n     bar: P::Pointer<String>,\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n fn main() {}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs"}, {"sha": "2a784f8b9d78cd9a8fc0f1c2bcf113e07508f771", "filename": "src/test/ui/generic-associated-types/pointer_family.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -0,0 +1,10 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/pointer_family.rs:11:5\n+   |\n+LL |     type Pointer<T>: Deref<Target = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to previous error\n+"}, {"sha": "7277c0d87c6ffc958ce0a85e18328ef30c9b05ad", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -16,15 +16,19 @@ impl<'a> NoShadow<'a> for &'a u32 {\n }\n \n trait ShadowT<T> {\n-    type Bar<T>; //~ ERROR the name `T` is already used\n+    type Bar<T>;\n+    //~^ ERROR the name `T` is already used\n+    //~| ERROR type-generic associated types are not yet implemented\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n+    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n impl<T> NoShadowT<T> for Option<T> {\n-    type Bar<T> = i32; //~ ERROR the name `T` is already used\n+    type Bar<T> = i32;\n+    //~^ ERROR the name `T` is already used\n }\n \n fn main() {}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs"}, {"sha": "50c12e822e7db2fed5bdc4ea9c544b10c80bae1e", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "renamed", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -7,13 +7,29 @@ LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:27:14\n+  --> $DIR/shadowing.rs:30:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`\n LL |     type Bar<T> = i32;\n    |              ^ already used\n \n-error: aborting due to 2 previous errors\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/shadowing.rs:19:5\n+   |\n+LL |     type Bar<T>;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/shadowing.rs:25:5\n+   |\n+LL |     type Bar<U>; // OK\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0403`.", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr"}, {"sha": "d814f7140d9299797405e6271a0544cd506eb242", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "renamed", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,30 +1,26 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n+// run-pass\n \n-// FIXME(#44265): \"lifetime argument not allowed on this type\" errors will be addressed in a\n-// follow-up PR\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n \n use std::fmt::Display;\n \n trait StreamingIterator {\n     type Item<'a>;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n-    fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;\n }\n \n struct Foo<T: StreamingIterator> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Users can bound parameters by the type constructed by that trait's associated type constructor\n // of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n-//FIXME(sunjay): This next line should parse and be valid\n-//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n-fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-//~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+//FIXME(#44265): This next line should parse and be valid\n+//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(_iter: T) { /* ... */ }\n+fn _foo<T>(_iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n \n // Full example of enumerate iterator\n \n@@ -36,9 +32,7 @@ struct StreamEnumerate<I> {\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     type Item<'a> = (usize, I::Item<'a>);\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-        //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\n         match self.iter.next() {\n             None => None,\n             Some(val) => {\n@@ -50,24 +44,34 @@ impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     }\n }\n \n+impl<I: Iterator> StreamingIterator for I {\n+    type Item<'a> = <I as Iterator>::Item;\n+    fn next(&mut self) -> Option<<I as StreamingIterator>::Item<'_>> {\n+        Iterator::next(self)\n+    }\n+}\n+\n impl<I> StreamEnumerate<I> {\n     pub fn new(iter: I) -> Self {\n         StreamEnumerate {\n             count: 0,\n-            iter: iter,\n+            iter,\n         }\n     }\n }\n \n fn test_stream_enumerate() {\n     let v = vec![\"a\", \"b\", \"c\"];\n-    let se = StreamEnumerate::new(v.iter());\n-    let a: &str = se.next().unwrap().1;\n-    for (i, s) in se {\n-        println!(\"{} {}\", i, s);\n+    let mut se = StreamEnumerate::new(v.iter());\n+    while let Some(item) = se.next() {\n+        assert_eq!(v[item.0], *item.1);\n     }\n-    println!(\"{}\", a);\n+    let x = Foo::<std::slice::Iter<'static, u32>> {\n+        bar: &0u32,\n+    };\n+    assert_eq!(*x.bar, 0u32);\n }\n \n-\n-fn main() {}\n+fn main() {\n+    test_stream_enumerate();\n+}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs"}, {"sha": "9c321c4bd0d741049382bfb205c3271ba7c81b9e", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -19,4 +19,5 @@ impl X {\n     //~| ERROR associated types are not yet supported in inherent impls\n     type W where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n+    //~| ERROR associated types are not yet supported in inherent impls\n }"}, {"sha": "65e1981e3ac781971aea559ac3874d3c4c93efeb", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -68,6 +68,12 @@ error[E0202]: associated types are not yet supported in inherent impls (see #899\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n+   |\n+LL |     type W where Self: Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0202`."}, {"sha": "d0cc1fa3d51721dc8e2d0797a3842830e2e80f6d", "filename": "src/test/ui/qualified/qualified-path-params-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -16,7 +16,6 @@ impl S {\n }\n \n type A = <S as Tr>::A::f<u8>;\n-//~^ ERROR type arguments are not allowed for this type\n-//~| ERROR ambiguous associated type\n+//~^ ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "948f21fce4bdba4c1176ce55983232e2a5c0e42c", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,16 +1,9 @@\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/qualified-path-params-2.rs:18:26\n-   |\n-LL | type A = <S as Tr>::A::f<u8>;\n-   |                          ^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/qualified-path-params-2.rs:18:10\n    |\n LL | type A = <S as Tr>::A::f<u8>;\n    |          ^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<S as Tr>::A as Trait>::f`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0109, E0223.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0223`."}, {"sha": "fa8fcc99240c69c8c0d311681841425d69037b93", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/collections.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:56:90\n-   |\n-LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-   |                                                                                          ^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:68:69\n-   |\n-LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-   |                                                                     ^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:17:71\n-   |\n-LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-   |                                                                       ^ type argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/collections.rs:24:50\n-   |\n-LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-   |                                                  ^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/collections.rs:50:50\n-   |\n-LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-   |                                                  ^^^^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "3a459a4551c8df815153c716b3a2d1dfd429e97f", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,29 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Foo {\n-    type Bar<'a, 'b>;\n-}\n-\n-trait Baz {\n-    type Quux<'a>: Foo;\n-\n-    // This weird type tests that we can use universal function call syntax to access the Item on\n-    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-impl<T> Baz for T where T: Foo {\n-    type Quux<'a> = T;\n-\n-    type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-fn main() {}"}, {"sha": "ab161ae21bb67c84c4603c09304d65c4b9e9e9ce", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,29 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/construct_with_other_type.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:17:46\n-   |\n-LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                              ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:17:63\n-   |\n-LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:25:40\n-   |\n-LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-   |                                        ^^ lifetime argument not allowed\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "9c8d3f192da2aa9dd224392660a877a704a463d1", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,16 +0,0 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/empty_generics.rs:5:14\n-   |\n-LL |     type Bar<,>;\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime\n-\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/empty_generics.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to previous error\n-"}, {"sha": "fb43a50df782393eb47189a0b0df1d90be7a0d2d", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n-   |\n-LL |     type Item<'b> = &'b Foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0d319a7a599f68a91b22711019213e724aebe0cd", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/generic-associated-types-where.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "150899a034b86c4d440d9726e057a0a03f9080e2", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,22 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Iterable {\n-    type Item<'a>;\n-    type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        + Deref<Target = Self::Item<'b>>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-fn main() {}"}, {"sha": "40ea42f62431dd7254e900afc1c86cb5492f10f5", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,42 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n-   |\n-LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'undeclared`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ undeclared lifetime\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:47\n-   |\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-   |                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n-   |\n-LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0109, E0261.\n-For more information about an error, try `rustc --explain E0109`."}, {"sha": "29953b9db1a3130d02a1141f1fe25d7e8324932d", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,50 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Iterable {\n-    type Item<'a>;\n-    type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-// Impl for struct type\n-impl<T> Iterable for Vec<T> {\n-    type Item<'a> = &'a T;\n-    type Iter<'a> = std::slice::Iter<'a, T>;\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        self.iter()\n-    }\n-}\n-\n-// Impl for a primitive type\n-impl<T> Iterable for [T] {\n-    type Item<'a> = &'a T;\n-    type Iter<'a> = std::slice::Iter<'a, T>;\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        self.iter()\n-    }\n-}\n-\n-fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    it.iter()\n-}\n-\n-fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    it.iter().next()\n-}\n-\n-fn main() {}"}, {"sha": "51246d3c9027fa795308bea1dd6666a4f595ea18", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,47 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/iterable.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:11:47\n-   |\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:40:53\n-   |\n-LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-   |                                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:45:60\n-   |\n-LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-   |                                                            ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:14:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-   |                                         ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:23:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:34:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime argument not allowed\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "aa3f4b186da83d998a8babba6b497a5fe74b2bcb", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,47 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-#![feature(associated_type_defaults)]\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-// FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n-\n-trait Foo {\n-    type A<'a>;\n-    type B<'a, 'b>;\n-    type C;\n-    type D<T>;\n-    type E<'a, T>;\n-    // Test parameters in default values\n-    type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-    type FErr1 = Self::E<'static, 'static>; // Error\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    type FErr2<T> = Self::E<'static, T, u32>; // Error\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-struct Fooy;\n-\n-impl Foo for Fooy {\n-    type A = u32; // Error: parameter expected\n-    type B<'a, T> = Vec<T>; // Error: lifetime param expected\n-    type C<'a> = u32; // Error: no param expected\n-    type D<'a> = u32; // Error: type param expected\n-    type E<T, U> = u32; // Error: lifetime expected as the first param\n-}\n-\n-struct Fooer;\n-\n-impl Foo for Fooer {\n-    type A<T> = u32; // Error: lifetime parameter expected\n-    type B<'a> = u32; // Error: another lifetime param expected\n-    type C<T> = T; // Error: no param expected\n-    type D<'b, T> = u32; // Error: unexpected lifetime param\n-    type E<'a, 'b> = u32; // Error: type expected as the second param\n-}\n-\n-fn main() {}"}, {"sha": "65dbd00c5b12138ed726fad09392e5711859d306", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/parameter_number_and_kind.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:17:27\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |                           ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:17:36\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |                                    ^ type argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:20:26\n-   |\n-LL |     type FErr1 = Self::E<'static, 'static>; // Error\n-   |                          ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:22:29\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                             ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:22:38\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                                      ^ type argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "626495350a7e6940cc3b9e75d5dc95422430e474", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,35 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/pointer_family.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:37:21\n-   |\n-LL |     bar: P::Pointer<String>,\n-   |                     ^^^^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:12:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n-   |                                          ^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:20:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:30:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type argument not allowed\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "09dd654b575afaff9a2608e33678c958852d37f2", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a440b159436ad3c75d25b24ce5d43086b567872/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=0a440b159436ad3c75d25b24ce5d43086b567872", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/streaming_iterator.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:18:41\n-   |\n-LL |     bar: <T as StreamingIterator>::Item<'static>,\n-   |                                         ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:26:64\n-   |\n-LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-   |                                                                ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:12:48\n-   |\n-LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-   |                                                ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:38:37\n-   |\n-LL |     type Item<'a> = (usize, I::Item<'a>);\n-   |                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:40:48\n-   |\n-LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-   |                                                ^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "e44a203b7832a70e16fa3dfffd163350edc739e3", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -31,7 +31,6 @@ fn g<T: Tr<A = S>>() {\n fn main() {\n     let s = S::A {}; //~ ERROR ambiguous associated type\n     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-    //~^ ERROR type arguments are not allowed for this type\n     match S {\n         S::A {} => {} //~ ERROR ambiguous associated type\n     }"}, {"sha": "f8a2c7c6b6c20a3dd4109af6d2cdce28a5d81038", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -34,25 +34,19 @@ error[E0223]: ambiguous associated type\n LL |     let s = S::A {};\n    |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/struct-path-associated-type.rs:33:20\n-   |\n-LL |     let z = S::A::<u8> {};\n-   |                    ^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:33:13\n    |\n LL |     let z = S::A::<u8> {};\n    |             ^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/struct-path-associated-type.rs:36:9\n+  --> $DIR/struct-path-associated-type.rs:35:9\n    |\n LL |         S::A {} => {}\n    |         ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0071, E0109, E0223.\n For more information about an error, try `rustc --explain E0071`."}, {"sha": "06ee421fc32794051dfdc529fac56201ec1d7683", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -1,7 +1,6 @@\n pub fn foo(num: i32) -> i32 {\n     let foo: i32::from_be(num);\n     //~^ ERROR expected type, found local variable `num`\n-    //~| ERROR type arguments are not allowed for this type\n     //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| ERROR ambiguous associated type\n     foo"}, {"sha": "63ba7893f041478105335e64f2bda6b5099729e8", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b50c3b7ddfd4e6f6b3aa2f99522637138320dab0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=b50c3b7ddfd4e6f6b3aa2f99522637138320dab0", "patch": "@@ -15,19 +15,13 @@ LL |     let foo: i32::from_be(num);\n    |                   only `Fn` traits may use parentheses\n    |                   help: use angle brackets instead: `from_be<num>`\n \n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n-   |\n-LL |     let foo: i32::from_be(num);\n-   |                           ^^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n    |\n LL |     let foo: i32::from_be(num);\n    |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0109, E0214, E0223, E0573.\n-For more information about an error, try `rustc --explain E0109`.\n+Some errors have detailed explanations: E0214, E0223, E0573.\n+For more information about an error, try `rustc --explain E0214`."}]}