{"sha": "4856e5f8fc37f1fbe3766a44f1cec9520e208a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NTZlNWY4ZmMzN2YxZmJlMzc2NmE0NGYxY2VjOTUyMGUyMDhhNWE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-14T17:51:53Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-15T21:13:17Z"}, "message": "lintcheck: rename a few symbols, add documentation to functions", "tree": {"sha": "1f4a6a593c379b22b0086021a70dcb0bbf0ee437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f4a6a593c379b22b0086021a70dcb0bbf0ee437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a", "html_url": "https://github.com/rust-lang/rust/commit/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b744398718593d00cdccf81fc20b8a3cfd9ead4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b744398718593d00cdccf81fc20b8a3cfd9ead4", "html_url": "https://github.com/rust-lang/rust/commit/1b744398718593d00cdccf81fc20b8a3cfd9ead4"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "45620cc9e63b3aaacf9f00b5ee37262b6e1a3e6a", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856e5f8fc37f1fbe3766a44f1cec9520e208a5a/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=4856e5f8fc37f1fbe3766a44f1cec9520e208a5a", "patch": "@@ -17,14 +17,14 @@ use clap::ArgMatches;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n \n-// use this to store the crates when interacting with the crates.toml file\n+/// List of sources to check, loaded from a .toml file\n #[derive(Debug, Serialize, Deserialize)]\n-struct CrateList {\n+struct SourceList {\n     crates: HashMap<String, TomlCrate>,\n }\n \n-// crate data we stored in the toml, can have multiple versions per crate\n-// A single TomlCrate is laster mapped to several CrateSources in that case\n+/// A crate source stored inside the .toml\n+/// will be translated into on one of the `CrateSource` variants\n #[derive(Debug, Serialize, Deserialize)]\n struct TomlCrate {\n     name: String,\n@@ -34,17 +34,16 @@ struct TomlCrate {\n     path: Option<String>,\n }\n \n-// represents an archive we download from crates.io, or a git repo, or a local repo\n+/// Represents an archive we download from crates.io, or a git repo, or a local repo/folder\n+/// Once processed (downloaded/extracted/cloned/copied...), this will be translated into a `Crate`\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n enum CrateSource {\n     CratesIo { name: String, version: String },\n     Git { name: String, url: String, commit: String },\n     Path { name: String, path: PathBuf },\n }\n \n-// represents the extracted sourcecode of a crate\n-// we actually don't need to special-case git repos here because it does not matter for clippy, yay!\n-// (clippy only needs a simple path)\n+/// Represents the actual source code of a crate that we ran \"cargo clippy\" on\n #[derive(Debug)]\n struct Crate {\n     version: String,\n@@ -53,6 +52,7 @@ struct Crate {\n     path: PathBuf,\n }\n \n+/// A single warning that clippy issued while checking a `Crate`\n #[derive(Debug)]\n struct ClippyWarning {\n     crate_name: String,\n@@ -76,6 +76,9 @@ impl std::fmt::Display for ClippyWarning {\n }\n \n impl CrateSource {\n+    /// Makes the sources available on the disk for clippy to check.\n+    /// Clones a git repo and checks out the specified commit or downloads a crate from crates.io or\n+    /// copies a local folder\n     fn download_and_extract(&self) -> Crate {\n         match self {\n             CrateSource::CratesIo { name, version } => {\n@@ -178,6 +181,8 @@ impl CrateSource {\n }\n \n impl Crate {\n+    /// Run `cargo clippy` on the `Crate` and collect and return all the lint warnings that clippy\n+    /// issued\n     fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<ClippyWarning> {\n         println!(\"Linting {} {}...\", &self.name, &self.version);\n         let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n@@ -218,14 +223,15 @@ impl Crate {\n     }\n }\n \n+/// Builds clippy inside the repo to make sure we have a clippy executable we can use.\n fn build_clippy() {\n     Command::new(\"cargo\")\n         .arg(\"build\")\n         .output()\n         .expect(\"Failed to build clippy!\");\n }\n \n-// get a list of CrateSources we want to check from a \"lintcheck_crates.toml\" file.\n+/// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n     let toml_path = PathBuf::from(\n         env::var(\"LINTCHECK_TOML\").unwrap_or(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\").to_string()),\n@@ -234,7 +240,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n     let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n         std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n-    let crate_list: CrateList =\n+    let crate_list: SourceList =\n         toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n     // parse the hashmap of the toml file into a list of crates\n     let tomlcrates: Vec<TomlCrate> = crate_list\n@@ -288,7 +294,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n     (toml_filename, crate_sources)\n }\n \n-// extract interesting data from a json lint message\n+/// Parse the json output of clippy and return a `ClippyWarning`\n fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n     let jmsg: Value = serde_json::from_str(&json_message).unwrap_or_else(|e| panic!(\"Failed to parse json:\\n{:?}\", e));\n \n@@ -313,7 +319,7 @@ fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n     }\n }\n \n-// the main fn\n+/// lintchecks `main()` function\n pub fn run(clap_config: &ArgMatches) {\n     let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n "}]}