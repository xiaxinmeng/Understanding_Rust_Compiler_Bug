{"sha": "48d8f7210b99299eddeead7ac381cc11a4a2049e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDhmNzIxMGI5OTI5OWVkZGVlYWQ3YWMzODFjYzExYTRhMjA0OWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T11:55:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:43Z"}, "message": "infer: rename `region_vars` field to `region_constraints`", "tree": {"sha": "514d323b327449db3bfe6ae7dea6324da682a6c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514d323b327449db3bfe6ae7dea6324da682a6c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d8f7210b99299eddeead7ac381cc11a4a2049e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d8f7210b99299eddeead7ac381cc11a4a2049e", "html_url": "https://github.com/rust-lang/rust/commit/48d8f7210b99299eddeead7ac381cc11a4a2049e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d8f7210b99299eddeead7ac381cc11a4a2049e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23abd8513857fdaef35ee48b2df0c69b6f784fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/23abd8513857fdaef35ee48b2df0c69b6f784fcf", "html_url": "https://github.com/rust-lang/rust/commit/23abd8513857fdaef35ee48b2df0c69b6f784fcf"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "0c59fa703bb667da8b708ea9567f68d59b2485b4", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -104,7 +104,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                a,\n                b);\n         let origin = Subtype(self.fields.trace.clone());\n-        self.fields.infcx.region_vars.borrow_mut().make_eqregion(origin, a, b);\n+        self.fields.infcx.region_constraints.borrow_mut().make_eqregion(origin, a, b);\n         Ok(a)\n     }\n "}, {"sha": "729e67437ba3e0b098e6cf0fdeb9fc677b73bfd1", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -78,8 +78,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         self.type_variables.borrow_mut().types_created_since_snapshot(\n                             &snapshot.type_snapshot);\n                     let region_vars =\n-                        self.region_vars.borrow().vars_created_since_snapshot(\n-                            &snapshot.region_vars_snapshot);\n+                        self.region_constraints.borrow().vars_created_since_snapshot(\n+                            &snapshot.region_constraints_snapshot);\n \n                     Ok((type_variables, region_vars, value))\n                 }"}, {"sha": "d63036eecff9f11e406b9335f83feeeb62061807", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -67,7 +67,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                b);\n \n         let origin = Subtype(self.fields.trace.clone());\n-        Ok(self.fields.infcx.region_vars.borrow_mut().glb_regions(self.tcx(), origin, a, b))\n+        Ok(self.fields.infcx.region_constraints.borrow_mut().glb_regions(self.tcx(), origin, a, b))\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "2aef9fece87a5aa9daf228826eff36110505b8d3", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                      .filter(|&r| r != representative)\n                 {\n                     let origin = SubregionOrigin::Subtype(self.trace.clone());\n-                    self.infcx.region_vars.borrow_mut().make_eqregion(origin,\n+                    self.infcx.region_constraints.borrow_mut().make_eqregion(origin,\n                                                                       *representative,\n                                                                       *region);\n                 }\n@@ -427,7 +427,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         fn fresh_bound_variable<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                                 debruijn: ty::DebruijnIndex)\n                                                 -> ty::Region<'tcx> {\n-            infcx.region_vars.borrow_mut().new_bound(infcx.tcx, debruijn)\n+            infcx.region_constraints.borrow_mut().new_bound(infcx.tcx, debruijn)\n         }\n     }\n }\n@@ -481,7 +481,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        r: ty::Region<'tcx>,\n                        directions: TaintDirections)\n                        -> FxHashSet<ty::Region<'tcx>> {\n-        self.region_vars.borrow().tainted(self.tcx, &snapshot.region_vars_snapshot, r, directions)\n+        self.region_constraints.borrow().tainted(\n+            self.tcx,\n+            &snapshot.region_constraints_snapshot,\n+            r,\n+            directions)\n     }\n \n     fn region_vars_confined_to_snapshot(&self,\n@@ -539,7 +543,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n          */\n \n         let mut region_vars =\n-            self.region_vars.borrow().vars_created_since_snapshot(&snapshot.region_vars_snapshot);\n+            self.region_constraints.borrow().vars_created_since_snapshot(\n+                &snapshot.region_constraints_snapshot);\n \n         let escaping_types =\n             self.type_variables.borrow_mut().types_escaping_snapshot(&snapshot.type_snapshot);\n@@ -581,9 +586,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         where T : TypeFoldable<'tcx>\n     {\n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.region_vars.borrow_mut().push_skolemized(self.tcx,\n+            self.region_constraints.borrow_mut().push_skolemized(self.tcx,\n                                                           br,\n-                                                          &snapshot.region_vars_snapshot)\n+                                                          &snapshot.region_constraints_snapshot)\n         });\n \n         debug!(\"skolemize_bound_regions(binder={:?}, result={:?}, map={:?})\",\n@@ -768,9 +773,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FxHashSet<_> = skol_map.values().cloned().collect();\n-        self.region_vars.borrow_mut().pop_skolemized(self.tcx,\n-                                                     &skol_regions,\n-                                                     &snapshot.region_vars_snapshot);\n+        self.region_constraints.borrow_mut().pop_skolemized(\n+            self.tcx,\n+            &skol_regions,\n+            &snapshot.region_constraints_snapshot);\n         if !skol_map.is_empty() {\n             self.projection_cache.borrow_mut().rollback_skolemized(\n                 &snapshot.projection_cache_snapshot);"}, {"sha": "0c4f4efe9947ca41fdf165dc5ec5f1b20ef9698e", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -67,7 +67,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                b);\n \n         let origin = Subtype(self.fields.trace.clone());\n-        Ok(self.fields.infcx.region_vars.borrow_mut().lub_regions(self.tcx(), origin, a, b))\n+        Ok(self.fields.infcx.region_constraints.borrow_mut().lub_regions(self.tcx(), origin, a, b))\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "fe15f9acdb5a0b51dc949f1addf8f5d8e9a76c9d", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -104,7 +104,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     float_unification_table: RefCell<UnificationTable<ty::FloatVid>>,\n \n     // For region variables.\n-    region_constraints: RefCell<RegionConstraints<'tcx>>,\n+    region_constraints: RefCell<RegionVarBindings<'tcx>>,\n \n     // Once region inference is done, the values for each variable.\n     lexical_region_resolutions: RefCell<Option<LexicalRegionResolutions<'tcx>>>,\n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n-            region_vars: RefCell::new(RegionVarBindings::new()),\n+            region_constraints: RefCell::new(RegionVarBindings::new()),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n@@ -459,7 +459,7 @@ pub struct CombinedSnapshot<'a, 'tcx:'a> {\n     type_snapshot: type_variable::Snapshot,\n     int_snapshot: unify::Snapshot<ty::IntVid>,\n     float_snapshot: unify::Snapshot<ty::FloatVid>,\n-    region_vars_snapshot: RegionSnapshot,\n+    region_constraints_snapshot: RegionSnapshot,\n     was_in_snapshot: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n@@ -767,7 +767,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             type_snapshot: self.type_variables.borrow_mut().snapshot(),\n             int_snapshot: self.int_unification_table.borrow_mut().snapshot(),\n             float_snapshot: self.float_unification_table.borrow_mut().snapshot(),\n-            region_vars_snapshot: self.region_vars.borrow_mut().start_snapshot(),\n+            region_constraints_snapshot: self.region_constraints.borrow_mut().start_snapshot(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e. during typeck)\n             // to ban writes from within a snapshot to them.\n@@ -783,7 +783,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                type_snapshot,\n                                int_snapshot,\n                                float_snapshot,\n-                               region_vars_snapshot,\n+                               region_constraints_snapshot,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n \n@@ -801,9 +801,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.float_unification_table\n             .borrow_mut()\n             .rollback_to(float_snapshot);\n-        self.region_vars\n+        self.region_constraints\n             .borrow_mut()\n-            .rollback_to(region_vars_snapshot);\n+            .rollback_to(region_constraints_snapshot);\n     }\n \n     fn commit_from(&self, snapshot: CombinedSnapshot) {\n@@ -812,7 +812,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                type_snapshot,\n                                int_snapshot,\n                                float_snapshot,\n-                               region_vars_snapshot,\n+                               region_constraints_snapshot,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n \n@@ -830,9 +830,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.float_unification_table\n             .borrow_mut()\n             .commit(float_snapshot);\n-        self.region_vars\n+        self.region_constraints\n             .borrow_mut()\n-            .commit(region_vars_snapshot);\n+            .commit(region_constraints_snapshot);\n     }\n \n     /// Execute `f` and commit the bindings\n@@ -887,7 +887,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                      sub: ty::Region<'tcx>,\n                      sup: ty::RegionVid)\n     {\n-        self.region_vars.borrow_mut().add_given(sub, sup);\n+        self.region_constraints.borrow_mut().add_given(sub, sup);\n     }\n \n     pub fn can_sub<T>(&self,\n@@ -927,7 +927,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        a: ty::Region<'tcx>,\n                        b: ty::Region<'tcx>) {\n         debug!(\"sub_regions({:?} <: {:?})\", a, b);\n-        self.region_vars.borrow_mut().make_subregion(origin, a, b);\n+        self.region_constraints.borrow_mut().make_subregion(origin, a, b);\n     }\n \n     pub fn equality_predicate(&self,\n@@ -1030,7 +1030,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn next_region_var(&self, origin: RegionVariableOrigin)\n                            -> ty::Region<'tcx> {\n-        self.tcx.mk_region(ty::ReVar(self.region_vars.borrow_mut().new_region_var(origin)))\n+        self.tcx.mk_region(ty::ReVar(self.region_constraints.borrow_mut().new_region_var(origin)))\n     }\n \n     /// Create a region inference variable for the given\n@@ -1127,7 +1127,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                region_map,\n                                                free_regions);\n         let (lexical_region_resolutions, errors) =\n-            self.region_vars.borrow_mut().resolve_regions(&region_rels);\n+            self.region_constraints.borrow_mut().resolve_regions(&region_rels);\n \n         let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));\n         assert!(old_value.is_none());\n@@ -1365,7 +1365,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                a,\n                bound);\n \n-        self.region_vars.borrow_mut().verify_generic_bound(origin, kind, a, bound);\n+        self.region_constraints.borrow_mut().verify_generic_bound(origin, kind, a, bound);\n     }\n \n     pub fn type_moves_by_default(&self,"}, {"sha": "53d963832426bb7a2588a11e0eff3c0abdd6a495", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -75,7 +75,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeAndRegionResolv\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReVar(rid) =>\n-                self.infcx.region_vars.borrow_mut().opportunistic_resolve_var(self.tcx(), rid),\n+                self.infcx.region_constraints.borrow_mut()\n+                                             .opportunistic_resolve_var(self.tcx(), rid),\n             _ =>\n                 r,\n         }"}, {"sha": "bc4bb0c4712fa80bf4a6d1b6b108d380a342395b", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d8f7210b99299eddeead7ac381cc11a4a2049e/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=48d8f7210b99299eddeead7ac381cc11a4a2049e", "patch": "@@ -137,7 +137,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         // from the \"cause\" field, we could perhaps give more tailored\n         // error messages.\n         let origin = SubregionOrigin::Subtype(self.fields.trace.clone());\n-        self.fields.infcx.region_vars.borrow_mut().make_subregion(origin, a, b);\n+        self.fields.infcx.region_constraints.borrow_mut().make_subregion(origin, a, b);\n \n         Ok(a)\n     }"}]}