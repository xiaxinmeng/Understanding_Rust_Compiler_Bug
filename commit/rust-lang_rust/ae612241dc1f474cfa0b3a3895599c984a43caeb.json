{"sha": "ae612241dc1f474cfa0b3a3895599c984a43caeb", "node_id": "C_kwDOAAsO6NoAKGFlNjEyMjQxZGMxZjQ3NGNmYTBiM2EzODk1NTk5Yzk4NGE0M2NhZWI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-22T12:24:35Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T07:32:06Z"}, "message": "various: add `rustc_lint_diagnostics` to diag fns\n\nThe `rustc_lint_diagnostics` attribute is used by the diagnostic\ntranslation/struct migration lints to identify calls where\nnon-translatable diagnostics or diagnostics outwith impls are being\ncreated. Any function used in creating a diagnostic should be annotated\nwith this attribute so this commit adds the attribute to many more\nfunctions.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "92a4f92d4602dbd6c972c7c7d822a80af245019e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a4f92d4602dbd6c972c7c7d822a80af245019e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae612241dc1f474cfa0b3a3895599c984a43caeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae612241dc1f474cfa0b3a3895599c984a43caeb", "html_url": "https://github.com/rust-lang/rust/commit/ae612241dc1f474cfa0b3a3895599c984a43caeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae612241dc1f474cfa0b3a3895599c984a43caeb/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871c879bff903d9539c323b719d18d3b61759e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/871c879bff903d9539c323b719d18d3b61759e62", "html_url": "https://github.com/rust-lang/rust/commit/871c879bff903d9539c323b719d18d3b61759e62"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "708fe8719a1ebc84d3f0bb5b51f2dc434960831f", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -1,4 +1,6 @@\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{\n+    struct_span_err, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n@@ -476,10 +478,11 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         self.infcx.tcx.sess.struct_span_err_with_code(sp, msg, code)"}, {"sha": "a2df072aa31195f63964f71d9d45bc4e4dfdb08c", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n+#![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]"}, {"sha": "1e57d66dd9f5619dd8558574b74a3900cea5771f", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -1077,6 +1077,7 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expansion_cause()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1101,9 +1102,11 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }"}, {"sha": "c18147592dc7022b449379f876b88237dc3bb67f", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -9,6 +9,7 @@\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n+#![feature(rustc_attrs)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "113af328a91fa39bbcdedb97885d0f55f0caaee6", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n+#![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "0869ed65ad2f3db915f7bbe8c4fb56895f55993c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -357,6 +357,7 @@ impl<'a> DerefMut for SnapshotParser<'a> {\n }\n \n impl<'a> Parser<'a> {\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub(super) fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -365,6 +366,7 @@ impl<'a> Parser<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "b5058fd699aca0c900847c7a414081ff973c8ab1", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae612241dc1f474cfa0b3a3895599c984a43caeb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=ae612241dc1f474cfa0b3a3895599c984a43caeb", "patch": "@@ -280,13 +280,15 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -295,6 +297,7 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -303,40 +306,47 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_expect(msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -346,33 +356,38 @@ impl Session {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -381,13 +396,16 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -396,9 +414,11 @@ impl Session {\n     ) -> ! {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -411,13 +431,15 @@ impl Session {\n             self.span_err(sp, msg);\n         }\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> ErrorGuaranteed {\n         self.diagnostic().span_err(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -426,6 +448,7 @@ impl Session {\n     ) {\n         self.diagnostic().span_err_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }"}]}