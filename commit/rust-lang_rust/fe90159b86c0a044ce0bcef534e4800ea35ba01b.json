{"sha": "fe90159b86c0a044ce0bcef534e4800ea35ba01b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTAxNTliODZjMGEwNDRjZTBiY2VmNTM0ZTQ4MDBlYTM1YmEwMWI=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-24T19:51:22Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-24T19:51:22Z"}, "message": "\"constant propagate\" rust_new_exit_task_glue to its only use.", "tree": {"sha": "2b1cd2d821cb497755206fc74f6692b86ef2113c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1cd2d821cb497755206fc74f6692b86ef2113c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe90159b86c0a044ce0bcef534e4800ea35ba01b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe90159b86c0a044ce0bcef534e4800ea35ba01b", "html_url": "https://github.com/rust-lang/rust/commit/fe90159b86c0a044ce0bcef534e4800ea35ba01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe90159b86c0a044ce0bcef534e4800ea35ba01b/comments", "author": null, "committer": null, "parents": [{"sha": "fbc0e840e3e660c0f0acd3e738d005b2a4aec00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc0e840e3e660c0f0acd3e738d005b2a4aec00f", "html_url": "https://github.com/rust-lang/rust/commit/fbc0e840e3e660c0f0acd3e738d005b2a4aec00f"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "e7db7ed5e3403006c9692299e5c7793fcc8be892", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -99,8 +99,7 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n     }\n \n     uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n-    dom->root_task->start((uintptr_t)rust_new_exit_task_glue,\n-                          main_fn,\n+    dom->root_task->start(main_fn,\n                           (uintptr_t)&main_args, sizeof(main_args));\n \n     int ret = dom->start_main_loop();"}, {"sha": "d5187ca7480ae3e3bcf559bc12a51766b4671218", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -262,8 +262,7 @@ rust_dom::start_main_loop() {\n     rust_timer timer(this);\n \n     DLOG(this, dom, \"started domain loop\");\n-    DLOG(this, dom, \"activate glue: \" PTR \", exit glue: \" PTR,\n-        root_crate->get_activate_glue(), rust_new_exit_task_glue);\n+    DLOG(this, dom, \"activate glue: \" PTR, root_crate->get_activate_glue());\n \n     while (number_of_live_tasks() > 0) {\n         A(this, kernel->is_deadlocked() == false, \"deadlock\");"}, {"sha": "213c724e7cea4421b97e805c2cd187d7ca2293ae", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -357,8 +357,6 @@ rust_crate_cache : public dom_owned<rust_crate_cache>,\n     void flush();\n };\n \n-extern \"C\" void rust_new_exit_task_glue();\n-\n #include \"rust_dwarf.h\"\n \n class"}, {"sha": "09665e112986b4ebb34618d31b8bc83bc9b0eed9", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -135,13 +135,13 @@ rust_task::~rust_task()\n         cache->deref();\n }\n \n+extern \"C\" void rust_new_exit_task_glue();\n+\n void\n-rust_task::start(uintptr_t exit_task_glue,\n-                 uintptr_t spawnee_fn,\n+rust_task::start(uintptr_t spawnee_fn,\n                  uintptr_t args,\n                  size_t callsz)\n {\n-    LOGPTR(dom, \"exit-task glue\", exit_task_glue);\n     LOGPTR(dom, \"from spawnee\", spawnee_fn);\n \n     // Set sp to last uintptr_t-sized cell of segment\n@@ -184,7 +184,7 @@ rust_task::start(uintptr_t exit_task_glue,\n \n     *spp-- = (uintptr_t) 0x0;        // retp\n \n-    *spp-- = (uintptr_t) exit_task_glue;\n+    *spp-- = (uintptr_t) rust_new_exit_task_glue;\n \n     for (size_t j = 0; j < n_callee_saves; ++j) {\n         *spp-- = (uintptr_t)NULL;"}, {"sha": "1bfe7ae4bda48a25522e79466d219a167a841ff4", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -55,8 +55,7 @@ rust_task : public maybe_proxy<rust_task>,\n \n     ~rust_task();\n \n-    void start(uintptr_t exit_task_glue,\n-               uintptr_t spawnee_fn,\n+    void start(uintptr_t spawnee_fn,\n                uintptr_t args,\n                size_t callsz);\n     void grow(size_t n_frame_bytes);"}, {"sha": "c86a071eddf35117101e3e101567b7580c3b7442", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -560,8 +560,7 @@ upcall_start_task(rust_task *spawner,\n              \", spawnee 0x%\" PRIxPTR\n              \", callsz %\" PRIdPTR \")\", task->name, task,\n              spawnee_fn, callsz);\n-    task->start((uintptr_t)rust_new_exit_task_glue, spawnee_fn,\n-                args, callsz);\n+    task->start(spawnee_fn, args, callsz);\n     return task;\n }\n \n@@ -612,18 +611,17 @@ static void *rust_thread_start(void *ptr)\n extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_start_thread(rust_task *task,\n                     rust_proxy<rust_task> *child_task_proxy,\n-                    uintptr_t exit_task_glue,\n                     uintptr_t spawnee_fn,\n                     size_t callsz) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *parenet_dom = task->dom;\n     rust_handle<rust_task> *child_task_handle = child_task_proxy->handle();\n     LOG(task, task,\n-              \"exit_task_glue: \" PTR \", spawnee_fn \" PTR\n+              \"spawnee_fn \" PTR\n               \", callsz %\" PRIdPTR \")\",\n-              exit_task_glue, spawnee_fn, callsz);\n+              spawnee_fn, callsz);\n     rust_task *child_task = child_task_handle->referent();\n-    child_task->start(exit_task_glue, spawnee_fn,\n+    child_task->start(spawnee_fn,\n                       task->rust_sp, callsz);\n #if defined(__WIN32__)\n     HANDLE thread;"}, {"sha": "ffbc15d95f6cc303d8c37e263b15ed56f8b4f9b9", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe90159b86c0a044ce0bcef534e4800ea35ba01b/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=fe90159b86c0a044ce0bcef534e4800ea35ba01b", "patch": "@@ -53,8 +53,7 @@ rust_task_test::worker::run() {\n     rust_handle<rust_dom> *handle =\n         kernel->create_domain(crate, \"test\");\n     rust_dom *domain = handle->referent();\n-    domain->root_task->start((uintptr_t)rust_new_exit_task_glue,\n-                             (uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n+    domain->root_task->start((uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n     domain->start_main_loop();\n     kernel->destroy_domain(domain);\n }"}]}