{"sha": "bc3eb354e753368060f5156b36ac3874ccc599b9", "node_id": "C_kwDOAAsO6NoAKGJjM2ViMzU0ZTc1MzM2ODA2MGY1MTU2YjM2YWMzODc0Y2NjNTk5Yjk", "commit": {"author": {"name": "Jonah Petri", "email": "jonah@petri.us", "date": "2021-09-17T21:18:11Z"}, "committer": {"name": "Jonah Petri", "email": "jonah@petri.us", "date": "2021-10-06T14:33:13Z"}, "message": "add platform support details file for armv7-unknown-linux-uclibc", "tree": {"sha": "3a5547e0475e24c1efd66575a788a0ba32d0bdc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a5547e0475e24c1efd66575a788a0ba32d0bdc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc3eb354e753368060f5156b36ac3874ccc599b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3eb354e753368060f5156b36ac3874ccc599b9", "html_url": "https://github.com/rust-lang/rust/commit/bc3eb354e753368060f5156b36ac3874ccc599b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc3eb354e753368060f5156b36ac3874ccc599b9/comments", "author": {"login": "skrap", "id": 1132698, "node_id": "MDQ6VXNlcjExMzI2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1132698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrap", "html_url": "https://github.com/skrap", "followers_url": "https://api.github.com/users/skrap/followers", "following_url": "https://api.github.com/users/skrap/following{/other_user}", "gists_url": "https://api.github.com/users/skrap/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrap/subscriptions", "organizations_url": "https://api.github.com/users/skrap/orgs", "repos_url": "https://api.github.com/users/skrap/repos", "events_url": "https://api.github.com/users/skrap/events{/privacy}", "received_events_url": "https://api.github.com/users/skrap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skrap", "id": 1132698, "node_id": "MDQ6VXNlcjExMzI2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1132698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrap", "html_url": "https://github.com/skrap", "followers_url": "https://api.github.com/users/skrap/followers", "following_url": "https://api.github.com/users/skrap/following{/other_user}", "gists_url": "https://api.github.com/users/skrap/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrap/subscriptions", "organizations_url": "https://api.github.com/users/skrap/orgs", "repos_url": "https://api.github.com/users/skrap/repos", "events_url": "https://api.github.com/users/skrap/events{/privacy}", "received_events_url": "https://api.github.com/users/skrap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11381a5a3a84ab1915d8c2a7ce369d4517c662a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/11381a5a3a84ab1915d8c2a7ce369d4517c662a0", "html_url": "https://github.com/rust-lang/rust/commit/11381a5a3a84ab1915d8c2a7ce369d4517c662a0"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "1bc924d3b90b0f5db6ba18c25375c728c9f2e2b3", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc3eb354e753368060f5156b36ac3874ccc599b9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc3eb354e753368060f5156b36ac3874ccc599b9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=bc3eb354e753368060f5156b36ac3874ccc599b9", "patch": "@@ -175,8 +175,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n             // should use dllimport for functions.\n             if cx.use_dll_storage_attrs\n                 && tcx.is_dllimport_foreign_item(instance_def_id)\n-                && tcx.sess.target.env != \"gnu\"\n-                && tcx.sess.target.env != \"uclibc\"\n+                && !matches!(tcx.sess.target.env.as_ref(), \"gnu\" | \"uclibc\")\n             {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }"}, {"sha": "d230f77bde284bb72b6a8e7056e2e2809cb21f6c", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc3eb354e753368060f5156b36ac3874ccc599b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc3eb354e753368060f5156b36ac3874ccc599b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs?ref=bc3eb354e753368060f5156b36ac3874ccc599b9", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"_mcount\".to_string(),\n+            abi: \"eabihf\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "99013efb495d095d681d1f60fbeb1762e11074e6", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc3eb354e753368060f5156b36ac3874ccc599b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc3eb354e753368060f5156b36ac3874ccc599b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=bc3eb354e753368060f5156b36ac3874ccc599b9", "patch": "@@ -419,7 +419,7 @@ impl Command {\n         }\n \n         // Only glibc 2.24+ posix_spawn() supports returning ENOENT directly.\n-        #[cfg(all(target_os = \"linux\", any(target_env = \"gnu\", target_env = \"uclibc\")))]\n+        #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n         {\n             if let Some(version) = sys::os::glibc_version() {\n                 if version < (2, 24) {"}, {"sha": "b3a4275c6ee92a3e19298067076844e7dbde6818", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bc3eb354e753368060f5156b36ac3874ccc599b9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/bc3eb354e753368060f5156b36ac3874ccc599b9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md?ref=bc3eb354e753368060f5156b36ac3874ccc599b9", "patch": "@@ -0,0 +1,66 @@\n+# armv7-unknown-linux-uclibceabihf\n+\n+**Tier: 3**\n+\n+This tier supports the ARMv7 processor running a Linux kernel and uClibc-ng standard library.  It provides full support for rust and the rust standard library.\n+\n+## Designated Developers\n+\n+* [@skrap](https://github.com/skrap)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires a cross toolchain.  You can find suitable pre-built toolchains at [bootlin](https://toolchains.bootlin.com/) or build one yourself via [buildroot](https://buildroot.org).\n+\n+## Building\n+\n+### Get a C toolchain\n+\n+Compiling rust for this target has been tested on `x86_64` linux hosts.  Other host types have not been tested, but may work, if you can find a suitable cross compilation toolchain for them.\n+\n+If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2020.08-1.tar.bz2), and unpack it into a directory.\n+\n+### Configure rust\n+\n+The target can be built by enabling it for a `rustc` build, by placing the following in `config.toml`:\n+\n+```toml\n+[build]\n+target = [\"armv7-unknown-linux-uclibceabihf\"]\n+stage = 2\n+\n+[target.armv7-unknown-linux-uclibceabihf]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/arm-buildroot-linux-uclibcgnueabihf-gcc\"\n+```\n+\n+### Build\n+\n+```sh\n+# in rust dir\n+./x.py build --stage 2\n+```\n+\n+## Building and Running Rust Programs\n+\n+To test cross-compiled binaries on a `x86_64` system, you can use the `qemu-arm` [userspace emulation](https://qemu-project.gitlab.io/qemu/user/main.html) program.  This avoids having a full emulated ARM system by doing dynamic binary translation and dynamic system call translation.  It lets you run ARM programs directly on your `x86_64` kernel.  It's very convenient!\n+\n+To use:\n+\n+* Install `qemu-arm` according to your distro.\n+* Link your built toolchain via:\n+  * `rustup toolchain link stage2 ${RUST}/build/x86_64-unknown-linux-gnu/stage2`\n+* Create a test program\n+\n+```sh\n+cargo new hello_world\n+cd hello_world\n+```\n+\n+* Build and run\n+\n+```sh\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_RUNNER=\"qemu-arm -L ${TOOLCHAIN}/arm-buildroot-linux-uclibcgnueabihf/sysroot/\" \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_LINKER=${TOOLCHAIN}/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \\\n+cargo +stage2 run --target armv7-unknown-linux-uclibceabihf\n+```"}]}