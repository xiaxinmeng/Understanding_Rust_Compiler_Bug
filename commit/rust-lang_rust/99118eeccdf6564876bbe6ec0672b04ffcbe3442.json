{"sha": "99118eeccdf6564876bbe6ec0672b04ffcbe3442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MTE4ZWVjY2RmNjU2NDg3NmJiZTZlYzA2NzJiMDRmZmNiZTM0NDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-09T16:07:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T16:07:33Z"}, "message": "Merge #6784\n\n6784: Introduce anchored_path r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "08f0fd7d99ad22a3d1db782482b66548e99ba8b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f0fd7d99ad22a3d1db782482b66548e99ba8b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99118eeccdf6564876bbe6ec0672b04ffcbe3442", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0PZFCRBK7hj4Ov3rIwAAdHIIAFhAg7amvgBD7JJRsDMQSdIb\n1+qSxaSKoAIKAqSp42pgLnTSBJNsqMk3T4a2J6uGpXKzP3syU8oPOBKzmzJF+W25\nZOX2vtombJRsOFiQ1Bth2S1cpPOAYLEO1x46CSZHau5llmkqwQX+K0X3xGjsXzdO\nHqY22MF3BS1X9MK86DO9lNaEAnKUQ83kruVCdstuPpMcjurExhGhBT5B0npcIFaC\n5/41ULlIWMvdjilqdsgHT7nTR675lUQcmSNh+jEVOJ8zQX3CoFQuPN17V9b5qdRr\nGTmAjPsOxUO67Hi9/bD7Y1htzT+0/DaXg694HrAyjTbk/k2XvpuqaIoI2z5/gFI=\n=9RuF\n-----END PGP SIGNATURE-----\n", "payload": "tree 08f0fd7d99ad22a3d1db782482b66548e99ba8b2\nparent 42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb\nparent 6e24321e4579d25686982002ed18f321db23cb9f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607530053 +0000\ncommitter GitHub <noreply@github.com> 1607530053 +0000\n\nMerge #6784\n\n6784: Introduce anchored_path r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99118eeccdf6564876bbe6ec0672b04ffcbe3442", "html_url": "https://github.com/rust-lang/rust/commit/99118eeccdf6564876bbe6ec0672b04ffcbe3442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99118eeccdf6564876bbe6ec0672b04ffcbe3442/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "html_url": "https://github.com/rust-lang/rust/commit/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb"}, {"sha": "6e24321e4579d25686982002ed18f321db23cb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e24321e4579d25686982002ed18f321db23cb9f", "html_url": "https://github.com/rust-lang/rust/commit/6e24321e4579d25686982002ed18f321db23cb9f"}], "stats": {"total": 202, "additions": 130, "deletions": 72}, "files": [{"sha": "595f28adae83c333308d3dee19b7df106eb94b9a", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -18,7 +18,7 @@ pub use crate::{\n     },\n };\n pub use salsa;\n-pub use vfs::{file_set::FileSet, FileId, VfsPath};\n+pub use vfs::{file_set::FileSet, AnchoredPath, AnchoredPathBuf, FileId, VfsPath};\n \n #[macro_export]\n macro_rules! impl_intern_key {\n@@ -91,12 +91,7 @@ pub const DEFAULT_LRU_CAP: usize = 128;\n pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n-    /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n-    /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n-    /// so the input is guaranteed to be utf-8 string. One might be tempted to\n-    /// introduce some kind of \"utf-8 path with / separators\", but that's a bad idea. Behold\n-    /// `#[path = \"C://no/way\"]`\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }\n \n@@ -155,11 +150,11 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         SourceDatabaseExt::file_text(self.0, file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId> {\n         // FIXME: this *somehow* should be platform agnostic...\n-        let source_root = self.0.file_source_root(anchor);\n+        let source_root = self.0.file_source_root(path.anchor);\n         let source_root = self.0.source_root(source_root);\n-        source_root.file_set.resolve_path(anchor, path)\n+        source_root.file_set.resolve_path(path)\n     }\n \n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {"}, {"sha": "b4ccd4488b4be02b9cbb95e343d8d6736b929c73", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -1,5 +1,5 @@\n //! This module resolves `mod foo;` declaration to file.\n-use base_db::FileId;\n+use base_db::{AnchoredPath, FileId};\n use hir_expand::name::Name;\n use syntax::SmolStr;\n use test_utils::mark;\n@@ -77,7 +77,8 @@ impl ModDir {\n         };\n \n         for candidate in candidate_files.iter() {\n-            if let Some(file_id) = db.resolve_path(file_id, candidate.as_str()) {\n+            let path = AnchoredPath { anchor: file_id, path: candidate.as_str() };\n+            if let Some(file_id) = db.resolve_path(path) {\n                 let is_mod_rs = candidate.ends_with(\"mod.rs\");\n \n                 let (dir_path, root_non_dir_owner) = if is_mod_rs || attr_path.is_some() {"}, {"sha": "574c0201a79ed073801883cc4980d04499636845", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -5,8 +5,8 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use base_db::SourceDatabase;\n use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, Upcast};\n+use base_db::{AnchoredPath, SourceDatabase};\n use hir_expand::db::AstDatabase;\n use hir_expand::diagnostics::Diagnostic;\n use hir_expand::diagnostics::DiagnosticSinkBuilder;\n@@ -63,8 +63,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, path)\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "f60666a54ab7cddeb526f91dff56ad48665ac277", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -4,7 +4,7 @@ use crate::{\n     MacroDefId, MacroDefKind, TextSize,\n };\n \n-use base_db::FileId;\n+use base_db::{AnchoredPath, FileId};\n use either::Either;\n use mbe::{parse_to_token_tree, ExpandResult};\n use parser::FragmentKind;\n@@ -324,7 +324,8 @@ fn relative_file(\n     allow_recursion: bool,\n ) -> Option<FileId> {\n     let call_site = call_id.as_file().original_file(db);\n-    let res = db.resolve_path(call_site, path)?;\n+    let path = AnchoredPath { anchor: call_site, path };\n+    let res = db.resolve_path(path)?;\n     // Prevent include itself\n     if res == call_site && !allow_recursion {\n         None"}, {"sha": "7168a94624a43f8b6f770636aaa82715d87f4f85", "filename": "crates/hir_expand/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -5,7 +5,7 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate};\n+use base_db::{salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate};\n use rustc_hash::FxHashSet;\n \n #[salsa::database(\n@@ -40,8 +40,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, path)\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "646e16bbecf5272ab8a221faa08630e6218f635c", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -5,7 +5,9 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast};\n+use base_db::{\n+    salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n+};\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::AstDatabase;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -67,8 +69,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, path)\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "d09f3a0a1f5b1e514c09d21807ea4d3cfb790d64", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -610,10 +610,12 @@ fn test_fn() {\n                                     source_file_edits: [],\n                                     file_system_edits: [\n                                         CreateFile {\n-                                            anchor: FileId(\n-                                                0,\n-                                            ),\n-                                            dst: \"foo.rs\",\n+                                            dst: AnchoredPathBuf {\n+                                                anchor: FileId(\n+                                                    0,\n+                                                ),\n+                                                path: \"foo.rs\",\n+                                            },\n                                         },\n                                     ],\n                                     is_snippet: false,"}, {"sha": "29c7a040b6a649bbb2664292fa81947e8e8beb0c", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -8,7 +8,7 @@ use hir::{\n     },\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n-use ide_db::base_db::FileId;\n+use ide_db::base_db::{AnchoredPathBuf, FileId};\n use ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,\n@@ -36,8 +36,10 @@ impl DiagnosticWithFix for UnresolvedModule {\n         Some(Fix::new(\n             \"Create module\",\n             FileSystemEdit::CreateFile {\n-                anchor: self.file.original_file(sema.db),\n-                dst: self.candidate.clone(),\n+                dst: AnchoredPathBuf {\n+                    anchor: self.file.original_file(sema.db),\n+                    path: self.candidate.clone(),\n+                },\n             }\n             .into(),\n             unresolved_module.syntax().text_range(),"}, {"sha": "44081f2100dbb8c2efd59bc73be5465d4293b2d4", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use hir::{Module, ModuleDef, ModuleSource, Semantics};\n-use ide_db::base_db::{FileRange, SourceDatabaseExt};\n+use ide_db::base_db::{AnchoredPathBuf, FileRange, SourceDatabaseExt};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -182,12 +182,13 @@ fn rename_mod(\n     match src.value {\n         ModuleSource::SourceFile(..) => {\n             // mod is defined in path/to/dir/mod.rs\n-            let dst = if module.is_mod_rs(sema.db) {\n+            let path = if module.is_mod_rs(sema.db) {\n                 format!(\"../{}/mod.rs\", new_name)\n             } else {\n                 format!(\"{}.rs\", new_name)\n             };\n-            let move_file = FileSystemEdit::MoveFile { src: file_id, anchor: file_id, dst };\n+            let dst = AnchoredPathBuf { anchor: file_id, path };\n+            let move_file = FileSystemEdit::MoveFile { src: file_id, dst };\n             file_system_edits.push(move_file);\n         }\n         ModuleSource::Module(..) => {}\n@@ -771,10 +772,12 @@ mod foo<|>;\n                                 src: FileId(\n                                     2,\n                                 ),\n-                                anchor: FileId(\n-                                    2,\n-                                ),\n-                                dst: \"foo2.rs\",\n+                                dst: AnchoredPathBuf {\n+                                    anchor: FileId(\n+                                        2,\n+                                    ),\n+                                    path: \"foo2.rs\",\n+                                },\n                             },\n                         ],\n                         is_snippet: false,\n@@ -837,10 +840,12 @@ use crate::foo<|>::FooContent;\n                                 src: FileId(\n                                     1,\n                                 ),\n-                                anchor: FileId(\n-                                    1,\n-                                ),\n-                                dst: \"quux.rs\",\n+                                dst: AnchoredPathBuf {\n+                                    anchor: FileId(\n+                                        1,\n+                                    ),\n+                                    path: \"quux.rs\",\n+                                },\n                             },\n                         ],\n                         is_snippet: false,\n@@ -884,10 +889,12 @@ mod fo<|>o;\n                                 src: FileId(\n                                     1,\n                                 ),\n-                                anchor: FileId(\n-                                    1,\n-                                ),\n-                                dst: \"../foo2/mod.rs\",\n+                                dst: AnchoredPathBuf {\n+                                    anchor: FileId(\n+                                        1,\n+                                    ),\n+                                    path: \"../foo2/mod.rs\",\n+                                },\n                             },\n                         ],\n                         is_snippet: false,\n@@ -932,10 +939,12 @@ mod outer { mod fo<|>o; }\n                                 src: FileId(\n                                     1,\n                                 ),\n-                                anchor: FileId(\n-                                    1,\n-                                ),\n-                                dst: \"bar.rs\",\n+                                dst: AnchoredPathBuf {\n+                                    anchor: FileId(\n+                                        1,\n+                                    ),\n+                                    path: \"bar.rs\",\n+                                },\n                             },\n                         ],\n                         is_snippet: false,\n@@ -1016,10 +1025,12 @@ pub mod foo<|>;\n                                 src: FileId(\n                                     2,\n                                 ),\n-                                anchor: FileId(\n-                                    2,\n-                                ),\n-                                dst: \"foo2.rs\",\n+                                dst: AnchoredPathBuf {\n+                                    anchor: FileId(\n+                                        2,\n+                                    ),\n+                                    path: \"foo2.rs\",\n+                                },\n                             },\n                         ],\n                         is_snippet: false,"}, {"sha": "118c090d759d5a975472298435ea90eea5a977c8", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -19,8 +19,8 @@ use std::{fmt, sync::Arc};\n \n use base_db::{\n     salsa::{self, Durability},\n-    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase,\n-    Upcast,\n+    AnchoredPath, Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate,\n+    SourceDatabase, Upcast,\n };\n use hir::db::{AstDatabase, DefDatabase, HirDatabase};\n use rustc_hash::FxHashSet;\n@@ -72,8 +72,8 @@ impl FileLoader for RootDatabase {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, path)\n+    fn resolve_path(&self, path: AnchoredPath) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "e87d98dadcff397c13218610c0ac95539a5d9ed6", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -3,7 +3,7 @@\n //!\n //! It can be viewed as a dual for `AnalysisChange`.\n \n-use base_db::FileId;\n+use base_db::{AnchoredPathBuf, FileId};\n use text_edit::TextEdit;\n \n #[derive(Default, Debug, Clone)]\n@@ -44,8 +44,8 @@ impl From<Vec<SourceFileEdit>> for SourceChange {\n \n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n-    CreateFile { anchor: FileId, dst: String },\n-    MoveFile { src: FileId, anchor: FileId, dst: String },\n+    CreateFile { dst: AnchoredPathBuf },\n+    MoveFile { src: FileId, dst: AnchoredPathBuf },\n }\n \n impl From<FileSystemEdit> for SourceChange {"}, {"sha": "71dc56915793a8bf5e4b0bb339cc1cd7ba1f359e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -13,6 +13,7 @@ use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use rustc_hash::FxHashMap;\n+use vfs::AnchoredPathBuf;\n \n use crate::{\n     config::Config,\n@@ -268,10 +269,10 @@ impl GlobalStateSnapshot {\n         Some(self.mem_docs.get(&path)?.version)\n     }\n \n-    pub(crate) fn anchored_path(&self, file_id: FileId, path: &str) -> Url {\n-        let mut base = self.vfs.read().0.file_path(file_id);\n+    pub(crate) fn anchored_path(&self, path: &AnchoredPathBuf) -> Url {\n+        let mut base = self.vfs.read().0.file_path(path.anchor);\n         base.pop();\n-        let path = base.join(path).unwrap();\n+        let path = base.join(&path.path).unwrap();\n         let path = path.as_path().unwrap();\n         url_from_abs_path(&path)\n     }"}, {"sha": "715f8927a5edd5eaddba80d50b9cc219f72a600e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -628,17 +628,17 @@ pub(crate) fn resource_op(\n     file_system_edit: FileSystemEdit,\n ) -> lsp_types::ResourceOp {\n     match file_system_edit {\n-        FileSystemEdit::CreateFile { anchor, dst } => {\n-            let uri = snap.anchored_path(anchor, &dst);\n+        FileSystemEdit::CreateFile { dst } => {\n+            let uri = snap.anchored_path(&dst);\n             lsp_types::ResourceOp::Create(lsp_types::CreateFile {\n                 uri,\n                 options: None,\n                 annotation: None,\n             })\n         }\n-        FileSystemEdit::MoveFile { src, anchor, dst } => {\n+        FileSystemEdit::MoveFile { src, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n-            let new_uri = snap.anchored_path(anchor, &dst);\n+            let new_uri = snap.anchored_path(&dst);\n             lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n                 old_uri,\n                 new_uri,"}, {"sha": "02720a32e353102d6fd3b961c36bc1693c2fb313", "filename": "crates/vfs/src/anchored_path.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Fanchored_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Fanchored_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fanchored_path.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -0,0 +1,39 @@\n+//! Analysis-level representation of file-system paths.\n+//!\n+//! The primary goal of this is to losslessly represent paths like\n+//!\n+//! ```\n+//! #[path = \"./bar.rs\"]\n+//! mod foo;\n+//! ```\n+//!\n+//! The first approach one might reach for is to use `PathBuf`. The problem here\n+//! is that `PathBuf` depends on host target (windows or linux), but\n+//! rust-analyzer should be capable to process `#[path = r\"C:\\bar.rs\"]` on Unix.\n+//!\n+//! The second try is to use a `String`. This also fails, however. Consider a\n+//! hypothetical scenario, where rust-analyzer operates in a\n+//! networked/distributed mode. There's one global instance of rust-analyzer,\n+//! which processes requests from different machines. Now, the semantics of\n+//! `#[path = \"/abs/path.rs\"]` actually depends on which file-system we are at!\n+//! That is, even absolute paths exist relative to a file system!\n+//!\n+//! A more realistic scenario here is virtual VFS paths we use for testing. More\n+//! generally, there can be separate \"universes\" of VFS paths.\n+//!\n+//! That's why we use anchored representation -- each path carries an info about\n+//! a file this path originates from. We can fetch fs/\"universe\" information\n+//! from the anchor than.\n+use crate::FileId;\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct AnchoredPathBuf {\n+    pub anchor: FileId,\n+    pub path: String,\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub struct AnchoredPath<'a> {\n+    pub anchor: FileId,\n+    pub path: &'a str,\n+}"}, {"sha": "49ca593ac88bda06e8e871ef7f7accf0a57deedb", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -7,7 +7,7 @@ use std::fmt;\n use fst::{IntoStreamer, Streamer};\n use rustc_hash::FxHashMap;\n \n-use crate::{FileId, Vfs, VfsPath};\n+use crate::{AnchoredPath, FileId, Vfs, VfsPath};\n \n #[derive(Default, Clone, Eq, PartialEq)]\n pub struct FileSet {\n@@ -19,10 +19,10 @@ impl FileSet {\n     pub fn len(&self) -> usize {\n         self.files.len()\n     }\n-    pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        let mut base = self.paths[&anchor].clone();\n+    pub fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n+        let mut base = self.paths[&path.anchor].clone();\n         base.pop();\n-        let path = base.join(path)?;\n+        let path = base.join(path.path)?;\n         self.files.get(&path).copied()\n     }\n "}, {"sha": "a3be579a71a681274d43ef5676ac5adc278c1734", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99118eeccdf6564876bbe6ec0672b04ffcbe3442/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=99118eeccdf6564876bbe6ec0672b04ffcbe3442", "patch": "@@ -36,14 +36,18 @@\n //! have a single `FileSet` which unions the two sources.\n mod vfs_path;\n mod path_interner;\n+mod anchored_path;\n pub mod file_set;\n pub mod loader;\n \n use std::{fmt, mem};\n \n use crate::path_interner::PathInterner;\n \n-pub use crate::vfs_path::VfsPath;\n+pub use crate::{\n+    anchored_path::{AnchoredPath, AnchoredPathBuf},\n+    vfs_path::VfsPath,\n+};\n pub use paths::{AbsPath, AbsPathBuf};\n \n #[derive(Copy, Clone, Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]"}]}