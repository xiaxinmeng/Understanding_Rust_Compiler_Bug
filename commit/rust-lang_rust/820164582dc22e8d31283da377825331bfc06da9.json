{"sha": "820164582dc22e8d31283da377825331bfc06da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDE2NDU4MmRjMjJlOGQzMTI4M2RhMzc3ODI1MzMxYmZjMDZkYTk=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T20:25:18Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:24Z"}, "message": "Remove DebugLoc.", "tree": {"sha": "6a4a9a4d4f270c615b2f2a44f2b89f3ae545e1a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a4a9a4d4f270c615b2f2a44f2b89f3ae545e1a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/820164582dc22e8d31283da377825331bfc06da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/820164582dc22e8d31283da377825331bfc06da9", "html_url": "https://github.com/rust-lang/rust/commit/820164582dc22e8d31283da377825331bfc06da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/820164582dc22e8d31283da377825331bfc06da9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be981dce80f6d115b04a6898bb2d6bf316dc402d", "url": "https://api.github.com/repos/rust-lang/rust/commits/be981dce80f6d115b04a6898bb2d6bf316dc402d", "html_url": "https://github.com/rust-lang/rust/commit/be981dce80f6d115b04a6898bb2d6bf316dc402d"}], "stats": {"total": 123, "additions": 38, "deletions": 85}, "files": [{"sha": "5482200f13ec8f3327d483a9822b4f93b14d1bab", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -49,7 +49,6 @@ use llvm::{ValueRef, True, IntEQ, IntNE};\n use rustc::ty::layout;\n use rustc::ty::{self, Ty, AdtKind};\n use common::*;\n-use debuginfo::DebugLoc;\n use glue;\n use base;\n use machine;\n@@ -595,8 +594,6 @@ fn struct_field_ptr<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n         return bcx.struct_gep(ptr_val, ix);\n     }\n \n-    let dbloc = DebugLoc::None;\n-\n     // We need to get the pointer manually now.\n     // We do this by casting to a *i8, then offsetting it by the appropriate amount.\n     // We do this instead of, say, simply adjusting the pointer from the result of a GEP\n@@ -627,7 +624,6 @@ fn struct_field_ptr<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     //   (unaligned offset + (align - 1)) & -align\n \n     // Calculate offset\n-    dbloc.apply(bcx.fcx());\n     let align_sub_1 = bcx.sub(align, C_uint(bcx.ccx(), 1u64));\n     let offset = bcx.and(bcx.add(unaligned_offset, align_sub_1),\n                          bcx.neg(align));"}, {"sha": "b1be2e4abe6def8c2206ffee64b2910c303a6763", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -60,7 +60,7 @@ use common::{type_is_zero_size, val_ty};\n use common;\n use consts;\n use context::{SharedCrateContext, CrateContextList};\n-use debuginfo::{self, DebugLoc};\n+use debuginfo;\n use declare;\n use machine;\n use machine::{llalign_of_min, llsize_of};\n@@ -649,7 +649,6 @@ pub fn alloc_ty<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n }\n \n pub fn alloca(cx: &BlockAndBuilder, ty: Type, name: &str) -> ValueRef {\n-    DebugLoc::None.apply(cx.fcx());\n     cx.fcx().alloca(ty, name)\n }\n \n@@ -658,8 +657,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     /// and builds the return block.\n     pub fn finish(&'blk self, ret_cx: &BlockAndBuilder<'blk, 'tcx>) {\n         self.build_return_block(ret_cx);\n-\n-        DebugLoc::None.apply(self);\n         self.cleanup();\n     }\n "}, {"sha": "7aceb0b88bb1cd85cb2d0d23c07f7a99368d9fa8", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -16,6 +16,7 @@ use session::Session;\n use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef, TypeKind};\n use llvm::{True, False, Bool, OperandBundleDef, get_param};\n+use llvm::debuginfo::DIScope;\n use monomorphize::Instance;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n@@ -578,6 +579,10 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n         }\n     }\n \n+    pub fn set_source_location(&self, scope: DIScope, sp: Span) {\n+        debuginfo::set_source_location(self.fcx(), self, scope, sp)\n+    }\n+\n     pub fn at_start<F, R>(&self, f: F) -> R\n         where F: FnOnce(&BlockAndBuilder<'blk, 'tcx>) -> R\n     {"}, {"sha": "f915f60c294607761b2baad7044d29e33b64b428", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n \n use abi::Abi;\n-use common::{CrateContext, FunctionContext, BlockAndBuilder};\n+use common::{CrateContext, BlockAndBuilder};\n use monomorphize::{self, Instance};\n use rustc::ty::{self, Ty};\n use rustc::mir;\n@@ -55,6 +55,7 @@ pub use self::create_scope_map::{create_mir_scopes, MirDebugScope};\n pub use self::source_loc::start_emitting_source_locations;\n pub use self::metadata::create_global_var_metadata;\n pub use self::metadata::extend_scope_to_file;\n+pub use self::source_loc::set_source_location;\n \n #[allow(non_upper_case_globals)]\n const DW_TAG_auto_variable: c_uint = 0x100;\n@@ -507,19 +508,3 @@ pub fn declare_local<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n         _ => { /* nothing to do */ }\n     }\n }\n-\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum DebugLoc {\n-    ScopeAt(DIScope, Span),\n-    None\n-}\n-\n-impl DebugLoc {\n-    pub fn apply(self, fcx: &FunctionContext) {\n-        source_loc::set_source_location(fcx, None, self);\n-    }\n-\n-    pub fn apply_to_bcx(self, bcx: &BlockAndBuilder) {\n-        source_loc::set_source_location(bcx.fcx(), Some(bcx), self);\n-    }\n-}"}, {"sha": "e03ad1a8c8fdb1c19e70e3b2a64c367b9510d472", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -11,8 +11,8 @@\n use self::InternalDebugLocation::*;\n \n use super::utils::{debug_context, span_start};\n-use super::metadata::{UNKNOWN_COLUMN_NUMBER};\n-use super::{FunctionDebugContext, DebugLoc};\n+use super::metadata::UNKNOWN_COLUMN_NUMBER;\n+use super::FunctionDebugContext;\n \n use llvm;\n use llvm::debuginfo::DIScope;\n@@ -21,41 +21,30 @@ use common::{CrateContext, FunctionContext};\n \n use libc::c_uint;\n use std::ptr;\n-use syntax_pos::Pos;\n+use syntax_pos::{Span, Pos};\n \n /// Sets the current debug location at the beginning of the span.\n ///\n /// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n-pub fn set_source_location(fcx: &FunctionContext,\n-                           builder: Option<&Builder>,\n-                           debug_loc: DebugLoc) {\n-    let builder = builder.map(|b| b.llbuilder);\n+pub fn set_source_location(fcx: &FunctionContext, builder: &Builder, scope: DIScope, span: Span) {\n+    let builder = builder.llbuilder;\n     let function_debug_context = match fcx.debug_context {\n         FunctionDebugContext::DebugInfoDisabled => return,\n         FunctionDebugContext::FunctionWithoutDebugInfo => {\n-            set_debug_location(fcx.ccx, builder, UnknownLocation);\n+            set_debug_location(fcx.ccx, Some(builder), UnknownLocation);\n             return;\n         }\n         FunctionDebugContext::RegularContext(ref data) => data\n     };\n \n     let dbg_loc = if function_debug_context.source_locations_enabled.get() {\n-        let (scope, span) = match debug_loc {\n-            DebugLoc::ScopeAt(scope, span) => (scope, span),\n-            DebugLoc::None => {\n-                set_debug_location(fcx.ccx, builder, UnknownLocation);\n-                return;\n-            }\n-        };\n-\n-        debug!(\"set_source_location: {}\",\n-               fcx.ccx.sess().codemap().span_to_string(span));\n+        debug!(\"set_source_location: {}\", fcx.ccx.sess().codemap().span_to_string(span));\n         let loc = span_start(fcx.ccx, span);\n         InternalDebugLocation::new(scope, loc.line, loc.col.to_usize())\n     } else {\n         UnknownLocation\n     };\n-    set_debug_location(fcx.ccx, builder, dbg_loc);\n+    set_debug_location(fcx.ccx, Some(builder), dbg_loc);\n }\n \n /// Enables emitting source locations for the given functions."}, {"sha": "84a6406c8e7f75ce7bcf77575be16dcb7761e9c5", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -18,7 +18,6 @@ use abi::{Abi, FnType};\n use adt;\n use base::*;\n use common::*;\n-use debuginfo::DebugLoc;\n use declare;\n use glue;\n use type_of;\n@@ -31,7 +30,7 @@ use syntax::ast;\n use syntax::symbol::Symbol;\n \n use rustc::session::Session;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -90,7 +89,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n                                             fn_ty: &FnType,\n                                             llargs: &[ValueRef],\n                                             llresult: ValueRef,\n-                                            call_debug_location: DebugLoc) {\n+                                            span: Span) {\n     let fcx = bcx.fcx();\n     let ccx = fcx.ccx;\n     let tcx = bcx.tcx();\n@@ -105,14 +104,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     let ret_ty = sig.output();\n     let name = &*tcx.item_name(def_id).as_str();\n \n-    let span = match call_debug_location {\n-        DebugLoc::ScopeAt(_, span) => span,\n-        DebugLoc::None => {\n-            span_bug!(fcx.span.unwrap_or(DUMMY_SP),\n-                      \"intrinsic `{}` called with missing span\", name);\n-        }\n-    };\n-\n     // These are the only intrinsic functions that diverge.\n     if name == \"abort\" {\n         let llfn = ccx.get_intrinsic(&(\"llvm.trap\"));"}, {"sha": "88e623f1ecc548b8aad16c9e09b113a55c11485a", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -20,7 +20,6 @@ use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n use common::{self, BlockAndBuilder, Funclet};\n use common::{C_bool, C_str_slice, C_struct, C_u32, C_undef};\n use consts;\n-use debuginfo::DebugLoc;\n use Disr;\n use machine::{llalign_of_min, llbitsize_of_real};\n use meth;\n@@ -115,9 +114,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         debug!(\"trans_block: terminator: {:?}\", terminator);\n \n         let span = terminator.source_info.span;\n-        let debug_loc = self.debug_loc(terminator.source_info);\n-        debug_loc.apply_to_bcx(&bcx);\n-        debug_loc.apply(bcx.fcx());\n+        let (scope, debug_span) = self.debug_loc(terminator.source_info);\n+        bcx.set_source_location(scope, debug_span);\n         match terminator.kind {\n             mir::TerminatorKind::Resume => {\n                 if let Some(cleanup_pad) = cleanup_pad {\n@@ -329,7 +327,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 // After this point, bcx is the block for the call to panic.\n                 bcx = panic_block;\n-                debug_loc.apply_to_bcx(&bcx);\n+                bcx.set_source_location(scope, debug_span);\n \n                 // Get the location information.\n                 let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n@@ -605,7 +603,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 bug!(\"Cannot use direct operand with an intrinsic call\")\n                         };\n \n-                        trans_intrinsic_call(&bcx, callee.ty, &fn_ty, &llargs, dest, debug_loc);\n+                        trans_intrinsic_call(&bcx, callee.ty, &fn_ty, &llargs, dest, debug_span);\n \n                         if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n                             // Make a fake operand for store_return\n@@ -645,7 +643,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     if let Some((_, target)) = *destination {\n                         let ret_bcx = self.build_block(target);\n                         ret_bcx.at_start(|ret_bcx| {\n-                            debug_loc.apply_to_bcx(ret_bcx);\n+                            bcx.set_source_location(scope, debug_span);\n                             let op = OperandRef {\n                                 val: Immediate(invokeret),\n                                 ty: sig.output(),\n@@ -885,7 +883,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             }\n             CleanupKind::Funclet => {\n                 bcx.set_personality_fn(self.fcx.eh_personality());\n-                DebugLoc::None.apply_to_bcx(&bcx);\n                 let cleanup_pad = bcx.cleanup_pad(None, &[]);\n                 funclets[bb] = Funclet::msvc(cleanup_pad);\n             }"}, {"sha": "7ceba69c37192d448a6000dc2421483cddb8f950", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -10,16 +10,18 @@\n \n use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n+use llvm::debuginfo::DIScope;\n use rustc::ty;\n use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use session::config::FullDebugInfo;\n use base;\n use common::{self, BlockAndBuilder, CrateContext, FunctionContext, C_null, Funclet};\n-use debuginfo::{self, declare_local, DebugLoc, VariableAccess, VariableKind, FunctionDebugContext};\n+use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebugContext};\n+use machine;\n use type_of;\n \n-use syntax_pos::{DUMMY_SP, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n+use syntax_pos::{DUMMY_SP, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos, Span};\n use syntax::symbol::keywords;\n \n use std::cell::Ref;\n@@ -88,15 +90,12 @@ pub struct MirContext<'bcx, 'tcx:'bcx> {\n }\n \n impl<'blk, 'tcx> MirContext<'blk, 'tcx> {\n-    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> DebugLoc {\n+    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (DIScope, Span) {\n         // Bail out if debug info emission is not enabled.\n         match self.fcx.debug_context {\n             FunctionDebugContext::DebugInfoDisabled |\n             FunctionDebugContext::FunctionWithoutDebugInfo => {\n-                // Can't return DebugLoc::None here because intrinsic::trans_intrinsic_call()\n-                // relies on debug location to obtain span of the call site.\n-                return DebugLoc::ScopeAt(self.scopes[source_info.scope].scope_metadata,\n-                                         source_info.span);\n+                return (self.scopes[source_info.scope].scope_metadata, source_info.span);\n             }\n             FunctionDebugContext::RegularContext(_) =>{}\n         }\n@@ -109,8 +108,8 @@ impl<'blk, 'tcx> MirContext<'blk, 'tcx> {\n             self.fcx.ccx.sess().opts.debugging_opts.debug_macros {\n \n             let scope_metadata = self.scope_metadata_for_loc(source_info.scope,\n-                                                             source_info.span.lo);\n-            DebugLoc::ScopeAt(scope_metadata, source_info.span)\n+                source_info.span.lo);\n+            (scope_metadata, source_info.span)\n         } else {\n             let cm = self.fcx.ccx.sess().codemap();\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n@@ -125,7 +124,7 @@ impl<'blk, 'tcx> MirContext<'blk, 'tcx> {\n             }\n             let scope_metadata = self.scope_metadata_for_loc(source_info.scope, span.lo);\n             // Use span of the outermost call site, while keeping the original lexical scope\n-            DebugLoc::ScopeAt(scope_metadata, span)\n+            (scope_metadata, span)\n         }\n     }\n \n@@ -236,14 +235,10 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n                 debug!(\"alloc: {:?} ({}) -> lvalue\", local, name);\n                 let lvalue = LvalueRef::alloca(&bcx, ty, &name.as_str());\n                 if dbg {\n-                    let dbg_loc = mircx.debug_loc(source_info);\n-                    if let DebugLoc::ScopeAt(scope, span) = dbg_loc {\n-                        declare_local(&bcx, name, ty, scope,\n-                            VariableAccess::DirectVariable { alloca: lvalue.llval },\n-                            VariableKind::LocalVariable, span);\n-                    } else {\n-                        panic!(\"Unexpected\");\n-                    }\n+                    let (scope, span) = mircx.debug_loc(source_info);\n+                    declare_local(&bcx, name, ty, scope,\n+                        VariableAccess::DirectVariable { alloca: lvalue.llval },\n+                        VariableKind::LocalVariable, span);\n                 }\n                 LocalRef::Lvalue(lvalue)\n             } else {\n@@ -312,7 +307,6 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n         }\n     }\n \n-    DebugLoc::None.apply(fcx);\n     fcx.cleanup();\n }\n "}, {"sha": "6cc3f6aad9fd69543ee77d49ba72b89af0ae6b9f", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820164582dc22e8d31283da377825331bfc06da9/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=820164582dc22e8d31283da377825331bfc06da9", "patch": "@@ -25,9 +25,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                            -> BlockAndBuilder<'bcx, 'tcx> {\n         debug!(\"trans_statement(statement={:?})\", statement);\n \n-        let debug_loc = self.debug_loc(statement.source_info);\n-        debug_loc.apply_to_bcx(&bcx);\n-        debug_loc.apply(bcx.fcx());\n+        let (scope, span) = self.debug_loc(statement.source_info);\n+        bcx.set_source_location(scope, span);\n         match statement.kind {\n             mir::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 if let mir::Lvalue::Local(index) = *lvalue {"}]}