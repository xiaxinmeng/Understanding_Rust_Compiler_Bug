{"sha": "ca8b75466cef854d30fdf7614c2358b1eb46816e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOGI3NTQ2NmNlZjg1NGQzMGZkZjc2MTRjMjM1OGIxZWI0NjgxNmU=", "commit": {"author": {"name": "Yamakaky", "email": "yamakaky@yamaworld.fr", "date": "2017-03-04T15:27:52Z"}, "committer": {"name": "Yamakaky", "email": "yamakaky@yamaworld.fr", "date": "2017-05-09T17:51:50Z"}, "message": "Don't show the std frames before user code on unwinding.\n\nWhen `RUST_BACKTRACE=1`, remove all frames after\n`__rust_maybe_catch_panic`. Tested on `main`, threads, tests and\nbenches. Cleaning of the top of the stacktrace is let to a future PR.\n\nFixes #40201\n\nSee #41815", "tree": {"sha": "f2bfc45697fca40fadaa04346ed404598a7ad773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2bfc45697fca40fadaa04346ed404598a7ad773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8b75466cef854d30fdf7614c2358b1eb46816e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEEt/Y5vtxe1Ue5GFKSH1EgxmwLZPcFAlkSAbYWHHlhbWFrYWt5\nQHlhbWF3b3JsZC5mcgAKCRAfUSDGbAtk99QEB/90eazHazg2BxWY66eAIat4+TIw\nk230pBjeXUoa8uDUyjVNdsbPDuBT64oMFy3HeLPMza7yrSNoo1boX7H1ok+duTYg\nOKTkJYfYjy/8TolQOIelZrWc7SB4YxL+KEq/29FbDPK6VLDnB7WnmxlX5wDm/dHO\njPsEhAf+a7rEhbSN+lxNf45aNOlNcHiZMB99KeDjBLzFnLC2OsQ21cBd6qtm8MWI\niuUBwdV1gCt7bKS9Y+RnpzP093tGH144s2PLIZYNvH2O9xwIuF4vmL+8aBdq2SIx\nlFlavRuMjdNIx/FGoY8M2robD8mz0ELAPGv0S708RRRYECQo0ytZoH21aAwM\n=khJA\n-----END PGP SIGNATURE-----", "payload": "tree f2bfc45697fca40fadaa04346ed404598a7ad773\nparent f3fc547194d22dc673274ac20e9a7b1e607cb862\nauthor Yamakaky <yamakaky@yamaworld.fr> 1488641272 -0500\ncommitter Yamakaky <yamakaky@yamaworld.fr> 1494352310 +0200\n\nDon't show the std frames before user code on unwinding.\n\nWhen `RUST_BACKTRACE=1`, remove all frames after\n`__rust_maybe_catch_panic`. Tested on `main`, threads, tests and\nbenches. Cleaning of the top of the stacktrace is let to a future PR.\n\nFixes #40201\n\nSee #41815\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8b75466cef854d30fdf7614c2358b1eb46816e", "html_url": "https://github.com/rust-lang/rust/commit/ca8b75466cef854d30fdf7614c2358b1eb46816e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8b75466cef854d30fdf7614c2358b1eb46816e/comments", "author": {"login": "Yamakaky", "id": 1327378, "node_id": "MDQ6VXNlcjEzMjczNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1327378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yamakaky", "html_url": "https://github.com/Yamakaky", "followers_url": "https://api.github.com/users/Yamakaky/followers", "following_url": "https://api.github.com/users/Yamakaky/following{/other_user}", "gists_url": "https://api.github.com/users/Yamakaky/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yamakaky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yamakaky/subscriptions", "organizations_url": "https://api.github.com/users/Yamakaky/orgs", "repos_url": "https://api.github.com/users/Yamakaky/repos", "events_url": "https://api.github.com/users/Yamakaky/events{/privacy}", "received_events_url": "https://api.github.com/users/Yamakaky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Yamakaky", "id": 1327378, "node_id": "MDQ6VXNlcjEzMjczNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1327378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yamakaky", "html_url": "https://github.com/Yamakaky", "followers_url": "https://api.github.com/users/Yamakaky/followers", "following_url": "https://api.github.com/users/Yamakaky/following{/other_user}", "gists_url": "https://api.github.com/users/Yamakaky/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yamakaky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yamakaky/subscriptions", "organizations_url": "https://api.github.com/users/Yamakaky/orgs", "repos_url": "https://api.github.com/users/Yamakaky/repos", "events_url": "https://api.github.com/users/Yamakaky/events{/privacy}", "received_events_url": "https://api.github.com/users/Yamakaky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3fc547194d22dc673274ac20e9a7b1e607cb862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fc547194d22dc673274ac20e9a7b1e607cb862", "html_url": "https://github.com/rust-lang/rust/commit/f3fc547194d22dc673274ac20e9a7b1e607cb862"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "acff7faf8a7d0a853bf3d09e903f360db7c8f721", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=ca8b75466cef854d30fdf7614c2358b1eb46816e", "patch": "@@ -29,8 +29,7 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n #[cfg(not(test))]\n #[lang = \"start\"]\n-fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n-    use mem;\n+fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n     use sys;\n     use sys_common;\n@@ -54,7 +53,9 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        let res = panic::catch_unwind(mem::transmute::<_, fn()>(main));\n+        let res = panic::catch_unwind(|| {\n+            ::sys_common::backtrace::__rust_begin_short_backtrace(main)\n+        });\n         sys_common::cleanup();\n         res.is_err()\n     };"}, {"sha": "617218fe7a5a6989d64a3d0a0fe0a7396a7883f3", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=ca8b75466cef854d30fdf7614c2358b1eb46816e", "patch": "@@ -93,11 +93,47 @@ fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     Ok(())\n }\n \n-fn filter_frames(_frames: &[Frame],\n-                 _format: PrintFormat,\n-                 _context: &BacktraceContext) -> (usize, usize)\n+/// Returns a number of frames to remove at the beginning and at the end of the\n+/// backtrace, according to the backtrace format.\n+fn filter_frames(frames: &[Frame],\n+                 format: PrintFormat,\n+                 context: &BacktraceContext) -> (usize, usize)\n {\n-    (0, 0)\n+    if format == PrintFormat::Full {\n+        return (0, 0);\n+    }\n+\n+    let skipped_before = 0;\n+\n+    let skipped_after = frames.len() - frames.iter().position(|frame| {\n+        let mut is_marker = false;\n+        let _ = resolve_symname(*frame, |symname| {\n+            if let Some(mangled_symbol_name) = symname {\n+                // Use grep to find the concerned functions\n+                if mangled_symbol_name.contains(\"__rust_begin_short_backtrace\") {\n+                    is_marker = true;\n+                }\n+            }\n+            Ok(())\n+        }, context);\n+        is_marker\n+    }).unwrap_or(frames.len());\n+\n+    if skipped_before + skipped_after >= frames.len() {\n+        // Avoid showing completely empty backtraces\n+        return (0, 0);\n+    }\n+\n+    (skipped_before, skipped_after)\n+}\n+\n+\n+/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n+#[inline(never)]\n+pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n+    where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+{\n+    f()\n }\n \n /// Controls how the backtrace should be formated."}, {"sha": "3101d08244e31807286f63f55558ba6cc0941e7f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=ca8b75466cef854d30fdf7614c2358b1eb46816e", "patch": "@@ -358,7 +358,9 @@ impl Builder {\n             }\n             unsafe {\n                 thread_info::set(imp::guard::current(), their_thread);\n-                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n+                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+                    ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n+                }));\n                 *their_packet.get() = Some(try_result);\n             }\n         };"}, {"sha": "0d615db3deb4796270876c8b15597b4bdc10284f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8b75466cef854d30fdf7614c2358b1eb46816e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ca8b75466cef854d30fdf7614c2358b1eb46816e", "patch": "@@ -1314,12 +1314,16 @@ pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAnd\n         let testfn = match x.testfn {\n             DynBenchFn(bench) => {\n                 DynTestFn(Box::new(move |()| {\n-                    bench::run_once(|b| bench.run(b))\n+                    bench::run_once(|b| {\n+                        __rust_begin_short_backtrace(|| bench.run(b))\n+                    })\n                 }))\n             }\n             StaticBenchFn(benchfn) => {\n                 DynTestFn(Box::new(move |()| {\n-                    bench::run_once(|b| benchfn(b))\n+                    bench::run_once(|b| {\n+                        __rust_begin_short_backtrace(|| benchfn(b))\n+                    })\n                 }))\n             }\n             f => f,\n@@ -1425,12 +1429,24 @@ pub fn run_test(opts: &TestOpts,\n             monitor_ch.send((desc, TrMetrics(mm), Vec::new())).unwrap();\n             return;\n         }\n-        DynTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture, f),\n-        StaticTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture,\n-                                          Box::new(move |()| f())),\n+        DynTestFn(f) => {\n+            let cb = move |()| {\n+                __rust_begin_short_backtrace(|| f.call_box(()))\n+            };\n+            run_test_inner(desc, monitor_ch, opts.nocapture, Box::new(cb))\n+        }\n+        StaticTestFn(f) =>\n+            run_test_inner(desc, monitor_ch, opts.nocapture,\n+                           Box::new(move |()| __rust_begin_short_backtrace(f))),\n     }\n }\n \n+/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n+#[inline(never)]\n+fn __rust_begin_short_backtrace<F: FnOnce()>(f: F) {\n+    f()\n+}\n+\n fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> TestResult {\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) |"}]}