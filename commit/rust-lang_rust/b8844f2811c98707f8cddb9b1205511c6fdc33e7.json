{"sha": "b8844f2811c98707f8cddb9b1205511c6fdc33e7", "node_id": "C_kwDOAAsO6NoAKGI4ODQ0ZjI4MTFjOTg3MDdmOGNkZGI5YjEyMDU1MTFjNmZkYzMzZTc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-17T21:53:03Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-09T16:49:05Z"}, "message": "Bump to clap 3", "tree": {"sha": "7fb04ac972e3dbf57a13fd1ee447ab70663725c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb04ac972e3dbf57a13fd1ee447ab70663725c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8844f2811c98707f8cddb9b1205511c6fdc33e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8844f2811c98707f8cddb9b1205511c6fdc33e7", "html_url": "https://github.com/rust-lang/rust/commit/b8844f2811c98707f8cddb9b1205511c6fdc33e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8844f2811c98707f8cddb9b1205511c6fdc33e7/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73443a05908b0f8043659295a854295013987876", "url": "https://api.github.com/repos/rust-lang/rust/commits/73443a05908b0f8043659295a854295013987876", "html_url": "https://github.com/rust-lang/rust/commit/73443a05908b0f8043659295a854295013987876"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "9cc2b829fb14cfcf069daf42bd7f421afdb96fdc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8844f2811c98707f8cddb9b1205511c6fdc33e7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b8844f2811c98707f8cddb9b1205511c6fdc33e7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b8844f2811c98707f8cddb9b1205511c6fdc33e7", "patch": "@@ -3385,7 +3385,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.34.0\",\n+ \"clap 3.1.1\",\n  \"env_logger 0.7.1\",\n  \"mdbook\",\n ]"}, {"sha": "bd08e0ede0bfa74a7bd8d437d9a4e00e4b8dda76", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8844f2811c98707f8cddb9b1205511c6fdc33e7/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b8844f2811c98707f8cddb9b1205511c6fdc33e7/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=b8844f2811c98707f8cddb9b1205511c6fdc33e7", "patch": "@@ -5,7 +5,7 @@ license = \"MIT OR Apache-2.0\"\n edition = \"2021\"\n \n [dependencies]\n-clap = \"2.25.0\"\n+clap = \"3.1.1\"\n env_logger = \"0.7.1\"\n \n [dependencies.mdbook]"}, {"sha": "fe7d8d9afe30f0718055f6f71c61e124ae0de1cb", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b8844f2811c98707f8cddb9b1205511c6fdc33e7/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8844f2811c98707f8cddb9b1205511c6fdc33e7/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=b8844f2811c98707f8cddb9b1205511c6fdc33e7", "patch": "@@ -3,54 +3,55 @@ use clap::crate_version;\n use std::env;\n use std::path::{Path, PathBuf};\n \n-use clap::{App, AppSettings, ArgMatches, SubCommand};\n+use clap::{arg, ArgMatches, Command};\n \n use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n \n fn main() {\n+    let crate_version = format!(\"v{}\", crate_version!());\n     env_logger::Builder::from_env(env_logger::Env::default().default_filter_or(\"warn\")).init();\n-    let d_message = \"-d, --dest-dir=[dest-dir]\n-'The output directory for your book{n}(Defaults to ./book when omitted)'\";\n-    let dir_message = \"[dir]\n-'A directory for your book{n}(Defaults to Current Directory when omitted)'\";\n+    let d_arg = arg!(-d --\"dest-dir\" <DEST_DIR>\n+\"The output directory for your book{n}(Defaults to ./book when omitted)\");\n+    let dir_arg = arg!([dir]\n+\"A directory for your book{n}(Defaults to Current Directory when omitted)\");\n \n-    let matches = App::new(\"rustbook\")\n+    let matches = Command::new(\"rustbook\")\n         .about(\"Build a book with mdBook\")\n         .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n-        .version(&*format!(\"v{}\", crate_version!()))\n-        .setting(AppSettings::SubcommandRequired)\n+        .version(&*crate_version)\n+        .subcommand_required(true)\n         .subcommand(\n-            SubCommand::with_name(\"build\")\n+            Command::new(\"build\")\n                 .about(\"Build the book from the markdown files\")\n-                .arg_from_usage(d_message)\n-                .arg_from_usage(dir_message),\n+                .arg(d_arg)\n+                .arg(&dir_arg),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"test\")\n+            Command::new(\"test\")\n                 .about(\"Tests that a book's Rust code samples compile\")\n-                .arg_from_usage(dir_message),\n+                .arg(dir_arg),\n         )\n         .get_matches();\n \n     // Check which subcomamnd the user ran...\n     match matches.subcommand() {\n-        (\"build\", Some(sub_matches)) => {\n+        Some((\"build\", sub_matches)) => {\n             if let Err(e) = build(sub_matches) {\n                 handle_error(e);\n             }\n         }\n-        (\"test\", Some(sub_matches)) => {\n+        Some((\"test\", sub_matches)) => {\n             if let Err(e) = test(sub_matches) {\n                 handle_error(e);\n             }\n         }\n-        (_, _) => unreachable!(),\n+        _ => unreachable!(),\n     };\n }\n \n // Build command implementation\n-pub fn build(args: &ArgMatches<'_>) -> Result3<()> {\n+pub fn build(args: &ArgMatches) -> Result3<()> {\n     let book_dir = get_book_dir(args);\n     let mut book = load_book(&book_dir)?;\n \n@@ -66,13 +67,13 @@ pub fn build(args: &ArgMatches<'_>) -> Result3<()> {\n     Ok(())\n }\n \n-fn test(args: &ArgMatches<'_>) -> Result3<()> {\n+fn test(args: &ArgMatches) -> Result3<()> {\n     let book_dir = get_book_dir(args);\n     let mut book = load_book(&book_dir)?;\n     book.test(vec![])\n }\n \n-fn get_book_dir(args: &ArgMatches<'_>) -> PathBuf {\n+fn get_book_dir(args: &ArgMatches) -> PathBuf {\n     if let Some(dir) = args.value_of(\"dir\") {\n         // Check if path is relative from current dir, or absolute...\n         let p = Path::new(dir);"}]}