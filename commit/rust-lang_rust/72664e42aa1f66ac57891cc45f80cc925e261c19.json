{"sha": "72664e42aa1f66ac57891cc45f80cc925e261c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjY0ZTQyYWExZjY2YWM1Nzg5MWNjNDVmODBjYzkyNWUyNjFjMTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T18:28:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T18:28:35Z"}, "message": "No longer check aligment and non-NULLness on `&`\n\nThis breaks creating unaligned raw pointers via `&packed.field as *const _`, which needs to be legal.\nAlso it doesn't seem like LLVM still relies on this, see\n* https://github.com/solson/miri/issues/244#issuecomment-315563640\n* https://internals.rust-lang.org/t/rules-for-alignment-and-non-nullness-of-references/5430/16\n\nWe probably want to handle this invariant like the others that validation is concerned with, and only\ncheck it on function boundaries for now.", "tree": {"sha": "b8aba122fc516d1affae3b27b1f8e2f04e7531c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8aba122fc516d1affae3b27b1f8e2f04e7531c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72664e42aa1f66ac57891cc45f80cc925e261c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72664e42aa1f66ac57891cc45f80cc925e261c19", "html_url": "https://github.com/rust-lang/rust/commit/72664e42aa1f66ac57891cc45f80cc925e261c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72664e42aa1f66ac57891cc45f80cc925e261c19/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc", "html_url": "https://github.com/rust-lang/rust/commit/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "ff09e5db94903bc5424ae50c7bee4e4795e61330", "filename": "src/eval_context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72664e42aa1f66ac57891cc45f80cc925e261c19/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72664e42aa1f66ac57891cc45f80cc925e261c19/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=72664e42aa1f66ac57891cc45f80cc925e261c19", "patch": "@@ -682,10 +682,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n \n-                // Check alignment and non-NULLness.\n-                let (_, align) = self.size_and_align_of_dst(ty, val)?;\n-                self.memory.check_align(ptr, align)?;\n-\n                 self.write_value(val, dest, dest_ty)?;\n             }\n "}, {"sha": "ae5f65a7166c6847fcfb0959fc27435a87123af8", "filename": "tests/compile-fail/int_ptr_cast.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast.rs?ref=2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let x = 2usize as *const u32;\n-    // This must fail because alignment is violated\n-    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n-}"}, {"sha": "1897066f7bcc3c7078ebee8135f9b34da862acc7", "filename": "tests/compile-fail/int_ptr_cast2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast2.rs?ref=2d5c4196f17fc8d09ac2c434f2a49cdb07e7f4bc", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let x = 0usize as *const u32;\n-    // This must fail because the pointer is NULL\n-    let _ = unsafe { &*x }; //~ ERROR: invalid use of NULL pointer\n-}"}, {"sha": "5ca733a64df2d91823680cb4cee3aeaad3328f2f", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72664e42aa1f66ac57891cc45f80cc925e261c19/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72664e42aa1f66ac57891cc45f80cc925e261c19/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=72664e42aa1f66ac57891cc45f80cc925e261c19", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p = &foo.x; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n-    let i = *p;\n+    let p = &foo.x;\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "8ad1b323250c9b833e528bd6939d207b14f3cdf4", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72664e42aa1f66ac57891cc45f80cc925e261c19/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72664e42aa1f66ac57891cc45f80cc925e261c19/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=72664e42aa1f66ac57891cc45f80cc925e261c19", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n }"}]}